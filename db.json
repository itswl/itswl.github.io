{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon-16x16.ico","path":"images/favicon-16x16.ico","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32.ico","path":"images/favicon-32x32.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1586537176972},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1586537176974},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1586537176976},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1586537176985},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1586537176989},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1586537176992},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1586537176997},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1586537177004},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1586537177006},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1586537177008},{"_id":"themes/next/_config.yml","hash":"a8630e0b4f45ca77330efd655850c0444521e220","modified":1586537177011},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1586537177013},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1586537177015},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1586537177232},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1586537176994},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1586537177000},{"_id":"source/about/index.md","hash":"de738d4c0531b1d989fe7fe4aa9edf19af44f01e","modified":1586537176769},{"_id":"source/categories/index.md","hash":"2e479a3a332e0d98aa0e7403439863c5193aacc3","modified":1586537176776},{"_id":"source/images/favicon-16x16.ico","hash":"638e9ee22ee977936601c25529da9d30f90c0388","modified":1586537176781},{"_id":"source/images/favicon-32x32.ico","hash":"6bae232f1350b305bffb19b03efa73b8d1979d96","modified":1586537176783},{"_id":"source/resume/index.md","hash":"60eb8f91acea0920bdc265363d31bfc553662d32","modified":1586537176785},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1586537176978},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1586537176980},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1586537176982},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1586537176983},{"_id":"source/book/index.md","hash":"02d23468bddc6dadb116fc381c44172fe2ad6661","modified":1586537176772},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1586537177018},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1586537177020},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1586537177022},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1586537177024},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1586537177026},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1586537177028},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1586537177029},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1586537177031},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1586537177032},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1586537177035},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1586537177036},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1586537177038},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1586537177039},{"_id":"themes/next/languages/zh-Hans.yml","hash":"96b265af371d2475a19867cea04b818b811b23a1","modified":1586537177043},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1586537177045},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1586537177046},{"_id":"themes/next/layout/_layout.swig","hash":"e126deabf20ab72d2b7f76b5cb1310029171d4e9","modified":1586537177055},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1586537177219},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1586537177220},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1586537177224},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1586537177226},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1586537177228},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1586537177230},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1586537177231},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1586537177235},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1586537177237},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1586537177875},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1586537177878},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1586537177880},{"_id":"source/_posts/MySQL/数据库结构优化.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586616761945},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177553},{"_id":"source/_posts/MySQL/SQL查询优化，分库分表.md","hash":"d99d9b0bd3589aa3ce037a5bab2b140436e7e31d","modified":1586616863822},{"_id":"source/_posts/MySQL/mysql优化.md","hash":"89eb8494fec42bb2a06b42c10b922a22a348abf1","modified":1586616735737},{"_id":"source/_posts/MySQL/mysql基础(1).md","hash":"389bb925a1c5d18ea0415199825c7d6faf5ce784","modified":1586537176391},{"_id":"source/_posts/MySQL/mysql基础(3).md","hash":"1075cbe6a24816d5f3538e54df2cf096c9b98822","modified":1586537176395},{"_id":"source/_posts/MySQL/mysql索引.md","hash":"471e6eade8b99ed2d7f093e51bf001a7cda2105e","modified":1586601792519},{"_id":"source/_posts/MySQL/spy.py","hash":"cc61a1daf7b87f85d52490b569ead9f26e4a02db","modified":1586615257535},{"_id":"source/_posts/MySQL/使用MySQL.md","hash":"28b69840976072ac2ea3192dc67be81e2ef9cc62","modified":1586537176401},{"_id":"source/_posts/MySQL/python操作mysql(ORM).md","hash":"4de91617a7143e6fa48e5e51bac017f13e620ac3","modified":1586537176397},{"_id":"source/_posts/MySQL/mysql基础(2).md","hash":"1d26fbe0fa3b9582f0c0f33b86d8338f864fb06a","modified":1586537176393},{"_id":"source/_posts/MySQL/python操作mysql(增删改查).md","hash":"770af614a955addcca829855cd7ee14ad2ba49b4","modified":1586537176399},{"_id":"source/_posts/MySQL/数据库.md","hash":"a020543d64a843322b69fb0d65edf0c86ffd15b1","modified":1586537176403},{"_id":"source/_posts/docker/DockerFile.md","hash":"f0814e293d6c849c57ca6ac3effb2ed8058eca77","modified":1586537176407},{"_id":"source/_posts/docker/基础知windows10+docker+wsl+ubuntu.md","hash":"560ab75f2fbb35b50263bff8ff71273a3731303b","modified":1586537176412},{"_id":"source/_posts/docker/readme.md","hash":"188909e691ed86807f82ba86a19f2a8bec409283","modified":1586537176410},{"_id":"source/_posts/docker/容器间的通信.md","hash":"f865a57209ed323c4d65789a41501071f768606f","modified":1586537176414},{"_id":"source/_posts/docker/推送，备份.md","hash":"622d2f77ecf826528d2c6348ace3ed988f9d4b8e","modified":1586537176418},{"_id":"source/_posts/golang/package与import.md","hash":"e8e572148e749d7a73b0418a977722b8da02f4ef","modified":1586537176421},{"_id":"source/_posts/golang/基础语法.md","hash":"efbef82e6639a7cf0ea043c0c1d8ab597e2bd2dc","modified":1586537176427},{"_id":"source/_posts/golang/readme.md","hash":"d06ca7d55765ed11d8c9b1fd9d4d06fd19266ac3","modified":1586537176423},{"_id":"source/_posts/golang/规范.md","hash":"2374abae229e845ba845c504b7c575ec51ccc496","modified":1586537176430},{"_id":"source/_posts/golang/指针.md","hash":"f1b68469e6f054515e84c91e4a31c3f4d7b58f76","modified":1586537176429},{"_id":"source/_posts/java/java基础语法.md","hash":"c8eb5cd8b2d0b18cbf5ded07cff91b40795acb29","modified":1586537176433},{"_id":"source/_posts/java/readme.md","hash":"848dba2c06c2aa791114c6436a79908c5eedeeab","modified":1586537176435},{"_id":"source/_posts/java/分支结构.md","hash":"91e8d1734cba9d5521ccc8b165b1c9e52f0263aa","modified":1586537176440},{"_id":"source/_posts/java/修饰符.md","hash":"94f8008eb766578ab0cc3a92b6216e27656bd892","modified":1586537176437},{"_id":"source/_posts/java/变量类型.md","hash":"ddc2a0425fcfd18b701a11079206b1cbe9a03897","modified":1586537176443},{"_id":"source/_posts/java/基本数据类型.md","hash":"24c6a96e708b761b0cb8c3c11492778312b5a568","modified":1586537176445},{"_id":"source/_posts/java/运算符.md","hash":"2ea1ab821d7e82d7d82b859b7c0fedeb1775f338","modified":1586537176447},{"_id":"source/_posts/mongodb/odm.md","hash":"00ca62956e04b6585bca80271f411e97ccd5fc75","modified":1586537176455},{"_id":"source/_posts/mongodb/mongodb常用命令.md","hash":"4b5ee88f4a0d2b314e0993affcd5ca138a7deb44","modified":1586537176453},{"_id":"source/_posts/mongodb/python操作MongoDB.md","hash":"ad542bf2a72c23c369881be162bcd8ce321457bb","modified":1586537176458},{"_id":"source/_posts/mongodb/test_odm.md","hash":"af16d68ba8d12b899418f1fa8f7e261950aeb974","modified":1586537176460},{"_id":"source/_posts/mongodb/入门.md","hash":"7759e85ceacce8acc6e5ff8a5d84faecb983d379","modified":1586537176463},{"_id":"source/_posts/mongodb/入门补充生成数据.md","hash":"f28fc800b584500697d78e9ae21b107fc92f3a6b","modified":1586537176467},{"_id":"source/_posts/mongodb/入门补充.md","hash":"819940c6091a068058a5edfac586ce29607d17fb","modified":1586537176465},{"_id":"source/_posts/python/PandaTV爬取主播人气并排序.md","hash":"84968315b6ca040b45f9ede9b3f496c202c76ca0","modified":1586537176494},{"_id":"source/_posts/python/pathlib有关文件路径.md","hash":"ae2cb0cb72e8d1f90f89bc4b3be8fa87425605f4","modified":1586537176507},{"_id":"source/_posts/python/is_json.md","hash":"62714e276337a76a398b3e24398bc7ad6a95ecb7","modified":1586537176505},{"_id":"source/_posts/python/psutil获取系统运行的进程和系统利用率.md","hash":"aca3b1ac1e2482105f1b9420039ff0deced9893a","modified":1586537176510},{"_id":"source/_posts/python/python一些规则.md","hash":"4d0c2cffc1b1c34c8ea04c8dc8d2e0df2a15a04a","modified":1586537176511},{"_id":"source/_posts/python/python拾遗_函数.md","hash":"87c95b583791a1a11a7f244bb06917d0e978165f","modified":1586537176515},{"_id":"source/_posts/python/python列表操作.md","hash":"bfa4d856888a2b6c04184474e17ef93a3d97d7f9","modified":1586537176513},{"_id":"source/_posts/python/readme.md","hash":"bfcccd25f3b413f52a7d1e20dc87c8ebb38313b5","modified":1586537176526},{"_id":"source/_posts/python/python日志模块.md","hash":"e8c53fe8b60cea28d208552263cffbccae97c206","modified":1586537176519},{"_id":"source/_posts/python/关于import路径.md","hash":"25d557f5894fac005c1c83f6c48d71ed4a120da8","modified":1586537176532},{"_id":"source/_posts/python/优雅的python写法.md","hash":"216aecb4a683f1250e57d683695508f2d7ede1cf","modified":1586537176527},{"_id":"source/_posts/python/python的一些函数.md","hash":"9f636740a4922d4c0c5f11cf3fbd4c6d9037f0d1","modified":1586537176522},{"_id":"source/_posts/python/python里的特殊方法.md","hash":"36ddbe38256f55704d8215714324cc078b9aa095","modified":1586537176524},{"_id":"source/_posts/python/多线程.md","hash":"983864560fc5a90247f4606b5575f34ae0ecb624","modified":1586537176534},{"_id":"source/_posts/python/多线程的鸡肋.md","hash":"edb2f6225a9f1d05443020c8f1d9724f2c6fe900","modified":1586537176536},{"_id":"source/_posts/python/多进程.md","hash":"98bc33b70998f9f9a29c8f7e1308a8cdb939de70","modified":1586537176537},{"_id":"source/_posts/python/慕课网数据采集总结.md","hash":"106b87c1d98fcdaea3235af1a8e1b6e7d71ff6e9","modified":1586537176539},{"_id":"source/_posts/python/时间格式.md","hash":"2e037a50418229cb36d521075d2cf1008a1a91e8","modified":1586537176541},{"_id":"source/_posts/python/爬虫整理-(四)-多进程分布式与异步.md","hash":"0cc52c29ac201d26114c7eaca132fc96ec6d0042","modified":1586537176547},{"_id":"source/_posts/python/爬取百度百科词条写入数据库.md","hash":"68538d1cbdb5f59fde778675ea1f8eb76eee9f00","modified":1586537176544},{"_id":"source/_posts/python/爬虫整理-(五)--slenium.md","hash":"e718ddafa054c5bb2a27530373ce1b696c30c13e","modified":1586537176546},{"_id":"source/_posts/python/爬虫整理（一）使用re和urllib.md","hash":"2c776efd53191e5445774ef2d2138b6d15fd0bcf","modified":1586537176550},{"_id":"source/_posts/python/给博客加日期.md","hash":"dcca848101d21cc0429dae068b40fc8a3106363b","modified":1586537176583},{"_id":"source/_posts/python/爬虫整理（二）BeautifulSoup.md","hash":"ae7c88b3c384ae6e4c57c138a064fbbfd1da4435","modified":1586537176554},{"_id":"source/_posts/python/网络请求.md","hash":"4573ae196ca75808f4b644c28a1716def78ecad5","modified":1586537176589},{"_id":"source/_posts/python/爬虫整理（三）Requests.md","hash":"8a079d34467c18a79a2166e954fe1da873a0f7b0","modified":1586537176552},{"_id":"source/_posts/python/迭代对象，迭代器，生成器.md","hash":"5421f5c8fe692344ea9e910e7fd353d0d9f7544f","modified":1586537176597},{"_id":"source/_posts/python/读取TXT_PDF.md","hash":"263134d2319b7aee6203630d152078bff32dac49","modified":1586537176594},{"_id":"source/_posts/python/鸭子类型.md","hash":"9543e95a6ae291495338567b58a8e9dd472dc108","modified":1586537176620},{"_id":"source/_posts/python基础/python.md","hash":"dcd1764d2b5f1e6eed5092ca1f9f38619a317e34","modified":1586537176627},{"_id":"source/_posts/python/装饰器.md","hash":"41108d6d130b21fc252c5209904b756cf7158878","modified":1586537176592},{"_id":"source/_posts/python基础/python中变量与运算符.md","hash":"9aab0e78c578d0456db49a88968fb90d7aabe3ee","modified":1586537176629},{"_id":"source/_posts/python基础/python中流程控制语句.md","hash":"13c0e826055dad70fd81da145f30f6c3732e5e50","modified":1586537176631},{"_id":"source/_posts/python基础/python中用字典代替switch.md","hash":"d00fbcb2fedce0f395ba376ede5f6a0703e8e030","modified":1586537176637},{"_id":"source/_posts/python基础/python中的装饰器.md","hash":"9c62938be062bf619b4ff10155da8bee82f2620b","modified":1586537176647},{"_id":"source/_posts/python基础/python中的列表推导式.md","hash":"60dfd0a1e7c183d1fc1f758a6ccbe0a9c5d10ca1","modified":1586537176642},{"_id":"source/_posts/python基础/python中的枚举.md","hash":"053bcc9b91aa51ae72ea2e9f1ce5cd5973a3ce42","modified":1586537176644},{"_id":"source/_posts/python基础/python中的None.md","hash":"53539867ec29506e3d4b461446fc36a90d869dd9","modified":1586537176640},{"_id":"source/_posts/python基础/python之初识JSON.md","hash":"4662134affe3aa98c83624dc89aef6bf830872a1","modified":1586537176655},{"_id":"source/_posts/python基础/python中面向对象.md","hash":"18d76516fdc105986e8d599934022a7cf75d22a3","modified":1586537176650},{"_id":"source/_posts/python基础/python之函数式编程.md","hash":"eb47849a679198d6e5736b360510b724049ba557","modified":1586537176653},{"_id":"source/_posts/python基础/python之闭包.md","hash":"133f325d55e0e58ca5c7a5bc6d3db362554abb6a","modified":1586537176661},{"_id":"source/_posts/python基础/python基本数据类型总结.md","hash":"b98053a69ffd05e9fa45fe7a19e76981bc6a66d8","modified":1586537176664},{"_id":"source/_posts/python基础/python异常.md","hash":"33d5fa90e9725fa62fe5eb1ad831303040731e83","modified":1586537176665},{"_id":"source/_posts/python基础/python文件操作.md","hash":"767298b892f805e512389dbf1be3ec18ed98d125","modified":1586537176668},{"_id":"source/_posts/python基础/python正则表达式的学习过程.md","hash":"68a833c52cfdc34bf58877fc2d48cb43d07783f6","modified":1586537176676},{"_id":"source/_posts/redis/docker安装redis.md","hash":"51fe0843383c473af201f1319a4bc530577a38b4","modified":1586537176690},{"_id":"source/_posts/redis/docker安装redis集群.md","hash":"89f73d51754a584ee42a566d8834eda81e53b253","modified":1586537176692},{"_id":"source/_posts/python基础/python项目的组织结构.md","hash":"4e5cfc0965d52e06d97941eaa312a756ebfdcb53","modified":1586537176686},{"_id":"source/_posts/redis/python操作redis.md","hash":"c56dd70d14fff34933de1e426728ab81f3f57c8f","modified":1586537176693},{"_id":"source/_posts/python基础/python网络编程.md","hash":"678a440065d26ced9cbb29affffcd4b2ba30a6d5","modified":1586537176679},{"_id":"source/_posts/python基础/python补充.md","hash":"5e1e887fd2457521acf50129da32492ac687a30a","modified":1586537176682},{"_id":"source/_posts/redis/命令.md","hash":"b055c64a6934529a6e82181f6cf080b5eea1ffc9","modified":1586537176701},{"_id":"source/_posts/redis/readme.md","hash":"a036696bd73a546b1795414a8e434dc7c1d73c39","modified":1586537176697},{"_id":"source/_posts/redis/数据备份与恢复.md","hash":"b8ff856392847ede0c82a497e3717154b409765a","modified":1586537176705},{"_id":"source/_posts/redis/安全性能测试客户端连接管道技术.md","hash":"a0896ccd5cd4e1b434e4b95bd1ad49f429d7cfb2","modified":1586537176703},{"_id":"source/_posts/redis/数据类型.md","hash":"643c5eed7b48eda36595693cd352dacb32993b52","modified":1586537176707},{"_id":"source/_posts/基础知识/HTTP的基本原理.md","hash":"d66f040110deedfdf86432a2a5651575e233bd42","modified":1586537176709},{"_id":"source/_posts/基础知识/安装Chrome浏览器和ChromeDriver.md","hash":"68857c5166baaf246a69a8d2a05e297f96d9e660","modified":1586537176765},{"_id":"source/_posts/基础知识/ip地址.md","hash":"899769406dc408d9c69891f012504a80fa1ad537","modified":1586537176729},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1586537177051},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1586537177053},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"0bd1e2cebdf9c0e1152868f16ec024cc933a8f9f","modified":1586537177061},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1586537177064},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1586537177067},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1586537177073},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1586537177078},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1586537177076},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1586537177082},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ecc755f26fcdde18c45dfbd894e646118c8b6bc","modified":1586537177084},{"_id":"source/_posts/随笔/2017-2018 总结(初版).md","hash":"0b241d231dc049e4cb14f481c125ec49b27d1f0e","modified":1586537176767},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1586537177086},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1586537177098},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1586537177096},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1586537177100},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1586537177103},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1586537177120},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1586537177070},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1586537177122},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1586537177136},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1586537177190},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1586537177191},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1586537177193},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1586537177195},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1586537177196},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1586537177198},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1586537177201},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1586537177239},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1586537177242},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1586537177244},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1586537177246},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1586537177249},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1586537177250},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1586537177253},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1586537177254},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1586537177255},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1586537177550},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1586537177556},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586537177560},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1586537177561},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1586537177563},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1586537177565},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1586537177567},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1586537177568},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1586537177569},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1586537177571},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1586537177574},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586537177575},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586537177577},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586537177578},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1586537177579},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586537177581},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1586537177582},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1586537177583},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1586537177585},{"_id":"source/_posts/redis/redis.conf","hash":"7c37280c0653b33a236fb57ddd64ee0661538a42","modified":1586537176700},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177131},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177132},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177456},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177457},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177463},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177539},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586537177546},{"_id":"source/_posts/python/flask/readme.md","hash":"bebe1c159ed6a0414ba145054ffc6034bc5deb29","modified":1586537176501},{"_id":"source/_posts/python/cookbook/record.md","hash":"6de1eb2d482be2421e4decb0a8c1e64ed7a7ead0","modified":1586537176497},{"_id":"source/_posts/python/flask/部署.md","hash":"6a71241ed1fba21e8d11fec3c9f4717e17fffb61","modified":1586537176503},{"_id":"source/_posts/python/元编程/初探.md","hash":"27f0df93d88e53d955f3a543f4260ff535eb582f","modified":1586537176530},{"_id":"source/_posts/python/面向对象/@staticmethod和@classmethod.md","hash":"1f332360347b1d5dea4829f443bd8bdf4aeb8f61","modified":1586537176605},{"_id":"source/_posts/python/面向对象/上下文管理器.md","hash":"489a035401597050a93ab675910cf88401cb0548","modified":1586537176607},{"_id":"source/_posts/python/面向对象/有关于@property.md","hash":"805191110e776d2e3d23189ca3bcfb293ce4c6d2","modified":1586537176610},{"_id":"source/_posts/python/面向对象/格式化字符串.md","hash":"e64ad0bfb7ac1e316d95ba1fde5aefd0c6ab3fda","modified":1586537176614},{"_id":"source/_posts/python/面向对象/调用父类方法.md","hash":"63d6ae44a87bd0dca7b1f1e175c23b1790fb7726","modified":1586537176616},{"_id":"source/_posts/python/面向对象/面向对象.md","hash":"d5a53b894c97f7394e4a26c5b90a3ed8295909ab","modified":1586537176619},{"_id":"source/_posts/基础知识/backup/shadowsocks-all.sh","hash":"50e4653d41ef9df3a283183b4872dc0301aaffaf","modified":1586537176726},{"_id":"source/_posts/基础知识/backup/tcp.sh","hash":"9be55f90a8e773b807da399139556f8ce0a09974","modified":1586537176728},{"_id":"source/_posts/基础知识/learn_linux/linux使用者管理.md","hash":"f23ec0871e38db6e39a58f3bd6b6c1de26e1145e","modified":1586537176744},{"_id":"source/_posts/基础知识/learn_linux/zabbix使用.md","hash":"d1001074ee9dcfd4ddea9b792c598e4e86ec8885","modified":1586537176748},{"_id":"source/_posts/基础知识/learn_linux/命令.md","hash":"7b8ce7e75e757f057050e5add233995ed864c0c4","modified":1586537176751},{"_id":"source/_posts/基础知识/learn_linux/个人计算机.md","hash":"dcb647ddf8b975766107105917e0b2664e0fff5f","modified":1586537176750},{"_id":"source/_posts/基础知识/learn_linux/文件，目录.md","hash":"4fae276124366046a9c811f734e0b2e4e0ae7708","modified":1586537176753},{"_id":"source/_posts/基础知识/learn_linux/日志文件.md","hash":"96dbb9e7f1280cdf309e543a6defec6fa7a1b09c","modified":1586537176754},{"_id":"source/_posts/基础知识/learn_linux/权限，目录.md","hash":"b1d058c04ad3e889d04abce79ee82977d65df805","modified":1586537176757},{"_id":"source/_posts/基础知识/learn_linux/进程与线程.md","hash":"2b8bda3df2996a3fdb6d37212f3ce304f48f7033","modified":1586537176762},{"_id":"source/_posts/基础知识/learn_linux/计算机概论.md","hash":"9ce74fa5781e81581df11ef7edfdf5a75fc04efb","modified":1586537176759},{"_id":"source/_posts/基础知识/learn_linux/计算机组成原理.md","hash":"31b3c63407c17183ef2f29b86f5f85310d48a97d","modified":1586537176760},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1586537177089},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1586537177090},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"f7774a593387422ff488dd7364b5115d43525d79","modified":1586537177094},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1586537177106},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1586537177107},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1586537177109},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1586537177112},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1586537177114},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1586537177116},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1586537177118},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1586537177092},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1586537177125},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1586537177130},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1586537177134},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1586537177140},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1586537177142},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1586537177144},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1586537177146},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1586537177148},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1586537177150},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1586537177152},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1586537177153},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1586537177155},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1586537177159},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1586537177161},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1586537177164},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1586537177167},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1586537177173},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1586537177176},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1586537177178},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1586537177180},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1586537177181},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1586537177183},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1586537177184},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1586537177186},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1586537177188},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1586537177211},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1586537177212},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1586537177214},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1586537177217},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"72c7796db58743c69bc4937e76602cac117cafdc","modified":1586537177450},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1586537177455},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1586537177459},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1586537177461},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1586537177534},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1586537177537},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1586537177541},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1586537177544},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1586537177588},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1586537177590},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1586537177593},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1586537177595},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1586537177597},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1586537177599},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1586537177600},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1586537177601},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1586537177608},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1586537177610},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1586537177611},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1586537177640},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1586537177650},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1586537177653},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1586537177703},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1586537177706},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1586537177708},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1586537177709},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1586537177716},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1586537177720},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1586537177722},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1586537177725},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1586537177726},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1586537177762},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1586537177773},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1586537177776},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1586537177778},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1586537177780},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1586537177782},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1586537177784},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1586537177787},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1586537177789},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1586537177793},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1586537177797},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1586537177799},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1586537177802},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1586537177804},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1586537177805},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1586537177807},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1586537177809},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1586537177811},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1586537177813},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1586537177816},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1586537177821},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1586537177823},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1586537177825},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1586537177826},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1586537177830},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1586537177833},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1586537177835},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1586537177855},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1586537177857},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1586537177866},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1586537177868},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1586537177870},{"_id":"source/images/avatar.png","hash":"29b32d32f833aa01a600f6e794613153d31058cf","modified":1586537176780},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1586537177767},{"_id":"source/_posts/python/DesignPattern/原型模式/readme.md","hash":"42ee7e528f46e955aa054a2b60b7d0aab7a03af8","modified":1586537176481},{"_id":"source/_posts/python/DesignPattern/工厂模式/readme.md","hash":"b0a62656f79187f2aa8b91f29a824c62168d01ac","modified":1586537176484},{"_id":"source/_posts/python/DesignPattern/单例模式/readme.md","hash":"8db2b06ab6a5950d366b05139b585d55c7dc3e12","modified":1586537176474},{"_id":"source/_posts/python/DesignPattern/原型模式/python中的浅拷贝与深拷贝的对比.md","hash":"7a0e956de534e669a6f256c84aeded30702e0ba5","modified":1586537176479},{"_id":"source/_posts/python/DesignPattern/建造者模式/readme.md","hash":"18727c3ae2188e87dfc62f35361329917a3dc76c","modified":1586537176487},{"_id":"source/_posts/python/DesignPattern/适配器模式/readme.md","hash":"e707ad2f7cc28db5669fea9e4c41770dfc6b7c3b","modified":1586537176491},{"_id":"source/_posts/基础知识/backup/nginx/app.py","hash":"b8b22cc3c56e7e7c2835e13f882dd61d9bad910b","modified":1586537176715},{"_id":"source/_posts/基础知识/backup/nginx/flask_uwsgi.ini","hash":"64cc4d25cac74f4868da31826ce9edacf9eedd43","modified":1586537176720},{"_id":"source/_posts/基础知识/backup/nginx/flask_nginx.conf","hash":"6ec2e7eeaf607e081c5f5606bc9dbfa18ef95e52","modified":1586537176717},{"_id":"source/_posts/基础知识/backup/nginx/flask_uwsgi_ipv6.ini","hash":"5b163dde04ecdcbe9a5418264656de6404f566b0","modified":1586537176721},{"_id":"source/_posts/基础知识/backup/nginx/flask_nginx_ipv6.conf","hash":"e8a99c1c30e47bce8cb24102694fab1791dfba53","modified":1586537176718},{"_id":"source/_posts/基础知识/learn_linux/bash_shell/eof","hash":"fb6bf3a0b65a7ca216ed99abc48141a479d39b1f","modified":1586537176737},{"_id":"source/_posts/基础知识/learn_linux/vim/readme.md","hash":"691089183fd689f864e1fa421705a1f671084ba1","modified":1586537176747},{"_id":"source/_posts/基础知识/backup/nginx/nginx.conf.bak","hash":"ed14294bc7a6131edaa52bdb0ae036176c4b5785","modified":1586537176722},{"_id":"source/_posts/基础知识/learn_linux/bash_shell/readme.md","hash":"d0f1f595bb21679a31c3f216908db42cfe486f4c","modified":1586537176740},{"_id":"source/_posts/基础知识/backup/nginx/readme.md","hash":"5464628df39ae6b656d64abab6fba5ef364c551b","modified":1586537176724},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1586537177206},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1586537177209},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1586537177264},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1586537177266},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1586537177267},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1586537177269},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1586537177271},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1586537177318},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1586537177378},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1586537177430},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1586537177436},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1586537177439},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1586537177441},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1586537177443},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1586537177445},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1586537177447},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1586537177471},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1586537177473},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1586537177475},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1586537177477},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1586537177479},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1586537177481},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1586537177483},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1586537177486},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1586537177498},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1586537177500},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1586537177503},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1586537177506},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1586537177507},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1586537177516},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccfa22770fda3f6c44ea0251c1acffe8e6034620","modified":1586537177518},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1586537177523},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1586537177526},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1586537177528},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1586537177530},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1586537177606},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1586537177633},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1586537177637},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1586537177658},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1586537177660},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1586537177665},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1586537177667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1586537177669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1586537177671},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1586537177692},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1586537177695},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1586537177699},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1586537177712},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1586537177714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1586537177730},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1586537177733},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1586537177736},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1586537177849},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1586537177852},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1586537177629},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1586537177631},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586537177754},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1586537177863},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1586537177274},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1586537177280},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1586537177285},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1586537177287},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1586537177289},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1586537177291},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1586537177295},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1586537177297},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1586537177299},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1586537177302},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1586537177303},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1586537177305},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1586537177310},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1586537177314},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1586537177322},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1586537177324},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1586537177326},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1586537177327},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1586537177330},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1586537177331},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1586537177333},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1586537177334},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1586537177338},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1586537177340},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1586537177341},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1586537177343},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1586537177345},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1586537177347},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1586537177349},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1586537177352},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1586537177354},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1586537177356},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1586537177359},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1586537177361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1586537177365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1586537177368},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1586537177370},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1586537177374},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1586537177376},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1586537177382},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1586537177385},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1586537177387},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1586537177389},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1586537177391},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1586537177393},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1586537177394},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1586537177396},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1586537177400},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1586537177405},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1586537177409},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1586537177412},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1586537177415},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1586537177417},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1586537177419},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1586537177421},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1586537177423},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1586537177424},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1586537177426},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1586537177489},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1586537177495},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1586537177512},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1586537177619},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1586537177621},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1586537177623},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1586537177625},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1586537177627},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1586537177676},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1586537177680},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1586537177683},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1586537177686},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1586537177688},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1586537177690},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586537177744},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586537177751},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586537177756},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586537177740},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1586537177646},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1586537177843},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1586537177748},{"_id":"public/search.xml","hash":"b7e15efcdbf0b67549d0ffe2c9b85454ebb0ed93","modified":1586617087027}],"Category":[{"name":"mysql学习","_id":"ck8vqtu4q000774uxrzjfsrfq"},{"name":"docker","_id":"ck8vqtu8f000q74uxc2dxrvy1"},{"name":"golang","_id":"ck8vqtu9q001674uxja8cai8d"},{"name":"java","_id":"ck8vqtub0001o74ux5vt3n96x"},{"name":"数据库","_id":"ck8vqtuf1002q74uxzjqklaxl"},{"name":"python练习","_id":"ck8vqtuhh003i74uxdip9jhb1"},{"name":"python","_id":"ck8vqtuk2004h74ux3vqw7evx"},{"name":"flask","_id":"ck8vqtup2006k74uxdolz7idb"},{"name":"python基础","_id":"ck8vqtup5006n74uxrujo2o1j"},{"name":"计算机网络","_id":"ck8vqturo007o74ux045lu1pu"},{"name":"linux","_id":"ck8vqturv007r74ux5f652pj2"},{"name":"随笔","_id":"ck8vqtus3007u74uxh3mhueyx"},{"name":"jupyter","_id":"ck8vqtv50009i74ux5l0jy6jd"}],"Data":[],"Page":[{"title":"","date":"2018-11-08T13:04:43.000Z","type":"about","_content":"\n****\n# 搭建原因\n\n\n**粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下**\n\n\n**主要是来记录一些东西，进而督促自己学习**\n\n\n**因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜**\n\n\n**另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动**\n\n\n******\n\n\n\n\n\n******\n\n\n# 关于我\n\n**喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。**\n\n\n**喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独**\n\n\n\n**我的邮箱： imwl@live.com**\n\n\n******\n\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2018-11-08 21:04:43\ntype: \"about\"\n---\n\n****\n# 搭建原因\n\n\n**粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下**\n\n\n**主要是来记录一些东西，进而督促自己学习**\n\n\n**因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜**\n\n\n**另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动**\n\n\n******\n\n\n\n\n\n******\n\n\n# 关于我\n\n**喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。**\n\n\n**喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独**\n\n\n\n**我的邮箱： imwl@live.com**\n\n\n******\n\n","updated":"2020-04-10T16:46:16.769Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8vqttdl000074uxo8pdu7vi","content":"<hr>\n<h1 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h1><p><strong>粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下</strong></p>\n<p><strong>主要是来记录一些东西，进而督促自己学习</strong></p>\n<p><strong>因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜</strong></p>\n<p><strong>另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动</strong></p>\n<hr>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><strong>喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。</strong></p>\n<p><strong>喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独</strong></p>\n<p><strong>我的邮箱： <a href=\"mailto:imwl@live.com\" target=\"_blank\" rel=\"noopener\">imwl@live.com</a></strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h1><p><strong>粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下</strong></p>\n<p><strong>主要是来记录一些东西，进而督促自己学习</strong></p>\n<p><strong>因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜</strong></p>\n<p><strong>另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动</strong></p>\n<hr>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><strong>喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。</strong></p>\n<p><strong>喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独</strong></p>\n<p><strong>我的邮箱： <a href=\"mailto:imwl@live.com\" target=\"_blank\" rel=\"noopener\">imwl@live.com</a></strong></p>\n<hr>\n"},{"title":"分类","date":"2018-11-08T08:44:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-11-08 16:44:57\ntype: \"categories\"\n---\n","updated":"2020-04-10T16:46:16.776Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8vqttdr000174ux3o50fr9y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"个人简历","date":"2019-03-02T08:44:57.000Z","type":"resume","_content":"\n# 个人信息\n- 魏来 / 男 / 1995.07\n- 统招本科 / 济南大学 / 学士学位       2013.09-2017.07\n- 工作年限： 3年\n- 期望职位： Python工程师\n- 期望城市： 深圳\n- 电话： 17683749507\n- Email： [itsweilai@gmail.com](itsweilai@gmail.com)\n- Github:  [https://github.com/itswl](https://github.com/itswl)\n- blog:  [https://imwl.ml/](https://imwl.ml/)               备用地址 [https://itswl.github.io/](https://itswl.github.io/)\n \n## 简介\n- 熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic\n- 熟练使用sql， 熟悉mysql，redis， MongoDB\n- 熟悉面向对象思想， 了解一些设计模式\n- 熟练使用linux系统，能编写简单shell脚本\n- 了解nginx部署网页\n- 了解基本的算法与数据结构\n- 了解 Golang, docker, javascript  \n- 具有一定的英语听说读写能力\n\n## 工作经历\n### 深圳软通动力信息技术有限公司 （2019.03 ～   ）\n**cloudsop开发一部 / HW深圳公共开发实施部**\n工作描述： \n1. 主要是编写部署脚本，部署平台到集群上。\n2. 主要使用到的包paramiko,requests,fabric2等\n3. 环境维护和部署过程中的问题解决\n\n\n**管控析平台二部 / HW深圳公共开发实施部**\n工作描述：\n1.\t智能告警项目中的规则管理，后台的增删改查\n2.\t自动化测试用例的建设\n\n### 吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\n**python / 信息部**\n工作描述：\t1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。\n2. 负责周报和月报的制作， 主要是对数据库数据的统计。\n3. 使用pytho操作数据库，使用ORM框架SQLAlchemy等。 \n4. 使用python对excel表进行操作。\n5. 小脚本的开发\n\n### 西安经天交通工程技术研究所（2017.08 ～ 2017.12）\n**技术支持 / 技术部**\n1. 纬地系列软件产品的技术支持、培训服务;\n2. 道路与交通领域新技术与软件功能需求的调研分析；\n3. 软件产品新技术的应用测试工作；\n4. 软件技术与工程实践应用类技术文档编制等。\n\n## 项目经验\n### ruleservice设计 2019.11 ～ \n#### 项目描述：\t\n\n智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。\n\n#### 责任描述：\n1. 主要是对智能告警服务规则设计以及功能测试\n2. flask 编写api接口对后台进行增删改查操作\n3. javascript 测试自动化用例的编写。\n\n### ODAE开发 2019.03 ～ 2019.11\n#### 项目描述：\n一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。\n\n#### 责任描述：\n1. 主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署\n2. 发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。\n\n\n### Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\n#### 责任描述：\t\n基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。\n#### 项目描述：\t\n扩展重写Flask API,更好地支持接口编写,可作为API部分的demo\n\n### flask网页  2018.10  ~ 2018.11 \n#### 责任描述：\n网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。\n#### 项目描述：\n项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币\"鱼 豆\"，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。\n\n使用到  flask + uwsgi + pipenv + nginx \n\n[http://v3.imwl.ga](http://v3.imwl.ga)\n\n### 个人小项目 2018.10  ～ \n#### 项目描述：\n博客地址：[https://imwl.ml/](https://imwl.ml/) ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理\n\npython网页编辑器 [https://imwl.ml/jupyter](https://imwl.ml/jupyter)， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx\n等等\n\n\n## 自我评价\n1. 爱生活，爱技术，爱折腾的阳光宅男。\n2. 喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。\n3. 能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。\n4. 给我一个机会， 定不会让您失望...\n\n## 致谢\n感谢您百忙之中阅读我的简历， 期待能有机会和您共事。","source":"resume/index.md","raw":"---\ntitle: 个人简历\ndate: 2019-03-02 16:44:57\ntype: \"resume\"\n---\n\n# 个人信息\n- 魏来 / 男 / 1995.07\n- 统招本科 / 济南大学 / 学士学位       2013.09-2017.07\n- 工作年限： 3年\n- 期望职位： Python工程师\n- 期望城市： 深圳\n- 电话： 17683749507\n- Email： [itsweilai@gmail.com](itsweilai@gmail.com)\n- Github:  [https://github.com/itswl](https://github.com/itswl)\n- blog:  [https://imwl.ml/](https://imwl.ml/)               备用地址 [https://itswl.github.io/](https://itswl.github.io/)\n \n## 简介\n- 熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic\n- 熟练使用sql， 熟悉mysql，redis， MongoDB\n- 熟悉面向对象思想， 了解一些设计模式\n- 熟练使用linux系统，能编写简单shell脚本\n- 了解nginx部署网页\n- 了解基本的算法与数据结构\n- 了解 Golang, docker, javascript  \n- 具有一定的英语听说读写能力\n\n## 工作经历\n### 深圳软通动力信息技术有限公司 （2019.03 ～   ）\n**cloudsop开发一部 / HW深圳公共开发实施部**\n工作描述： \n1. 主要是编写部署脚本，部署平台到集群上。\n2. 主要使用到的包paramiko,requests,fabric2等\n3. 环境维护和部署过程中的问题解决\n\n\n**管控析平台二部 / HW深圳公共开发实施部**\n工作描述：\n1.\t智能告警项目中的规则管理，后台的增删改查\n2.\t自动化测试用例的建设\n\n### 吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\n**python / 信息部**\n工作描述：\t1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。\n2. 负责周报和月报的制作， 主要是对数据库数据的统计。\n3. 使用pytho操作数据库，使用ORM框架SQLAlchemy等。 \n4. 使用python对excel表进行操作。\n5. 小脚本的开发\n\n### 西安经天交通工程技术研究所（2017.08 ～ 2017.12）\n**技术支持 / 技术部**\n1. 纬地系列软件产品的技术支持、培训服务;\n2. 道路与交通领域新技术与软件功能需求的调研分析；\n3. 软件产品新技术的应用测试工作；\n4. 软件技术与工程实践应用类技术文档编制等。\n\n## 项目经验\n### ruleservice设计 2019.11 ～ \n#### 项目描述：\t\n\n智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。\n\n#### 责任描述：\n1. 主要是对智能告警服务规则设计以及功能测试\n2. flask 编写api接口对后台进行增删改查操作\n3. javascript 测试自动化用例的编写。\n\n### ODAE开发 2019.03 ～ 2019.11\n#### 项目描述：\n一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。\n\n#### 责任描述：\n1. 主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署\n2. 发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。\n\n\n### Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\n#### 责任描述：\t\n基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。\n#### 项目描述：\t\n扩展重写Flask API,更好地支持接口编写,可作为API部分的demo\n\n### flask网页  2018.10  ~ 2018.11 \n#### 责任描述：\n网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。\n#### 项目描述：\n项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币\"鱼 豆\"，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。\n\n使用到  flask + uwsgi + pipenv + nginx \n\n[http://v3.imwl.ga](http://v3.imwl.ga)\n\n### 个人小项目 2018.10  ～ \n#### 项目描述：\n博客地址：[https://imwl.ml/](https://imwl.ml/) ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理\n\npython网页编辑器 [https://imwl.ml/jupyter](https://imwl.ml/jupyter)， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx\n等等\n\n\n## 自我评价\n1. 爱生活，爱技术，爱折腾的阳光宅男。\n2. 喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。\n3. 能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。\n4. 给我一个机会， 定不会让您失望...\n\n## 致谢\n感谢您百忙之中阅读我的简历， 期待能有机会和您共事。","updated":"2020-04-10T16:46:16.785Z","path":"resume/index.html","comments":1,"layout":"page","_id":"ck8vqttdv000274uxzaeq6bmi","content":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>魏来 / 男 / 1995.07</li>\n<li>统招本科 / 济南大学 / 学士学位       2013.09-2017.07</li>\n<li>工作年限： 3年</li>\n<li>期望职位： Python工程师</li>\n<li>期望城市： 深圳</li>\n<li>电话： 17683749507</li>\n<li>Email： <a href=\"itsweilai@gmail.com\">itsweilai@gmail.com</a></li>\n<li>Github:  <a href=\"https://github.com/itswl\" target=\"_blank\" rel=\"noopener\">https://github.com/itswl</a></li>\n<li>blog:  <a href=\"https://imwl.ml/\">https://imwl.ml/</a>               备用地址 <a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io/</a></li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic</li>\n<li>熟练使用sql， 熟悉mysql，redis， MongoDB</li>\n<li>熟悉面向对象思想， 了解一些设计模式</li>\n<li>熟练使用linux系统，能编写简单shell脚本</li>\n<li>了解nginx部署网页</li>\n<li>了解基本的算法与数据结构</li>\n<li>了解 Golang, docker, javascript  </li>\n<li>具有一定的英语听说读写能力</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"深圳软通动力信息技术有限公司-（2019-03-～-）\"><a href=\"#深圳软通动力信息技术有限公司-（2019-03-～-）\" class=\"headerlink\" title=\"深圳软通动力信息技术有限公司 （2019.03 ～   ）\"></a>深圳软通动力信息技术有限公司 （2019.03 ～   ）</h3><p><strong>cloudsop开发一部 / HW深圳公共开发实施部</strong><br>工作描述： </p>\n<ol>\n<li>主要是编写部署脚本，部署平台到集群上。</li>\n<li>主要使用到的包paramiko,requests,fabric2等</li>\n<li>环境维护和部署过程中的问题解决</li>\n</ol>\n<p><strong>管控析平台二部 / HW深圳公共开发实施部</strong><br>工作描述：</p>\n<ol>\n<li>智能告警项目中的规则管理，后台的增删改查</li>\n<li>自动化测试用例的建设</li>\n</ol>\n<h3 id=\"吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\"><a href=\"#吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\" class=\"headerlink\" title=\"吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\"></a>吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）</h3><p><strong>python / 信息部</strong><br>工作描述：    1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。</p>\n<ol start=\"2\">\n<li>负责周报和月报的制作， 主要是对数据库数据的统计。</li>\n<li>使用pytho操作数据库，使用ORM框架SQLAlchemy等。 </li>\n<li>使用python对excel表进行操作。</li>\n<li>小脚本的开发</li>\n</ol>\n<h3 id=\"西安经天交通工程技术研究所（2017-08-～-2017-12）\"><a href=\"#西安经天交通工程技术研究所（2017-08-～-2017-12）\" class=\"headerlink\" title=\"西安经天交通工程技术研究所（2017.08 ～ 2017.12）\"></a>西安经天交通工程技术研究所（2017.08 ～ 2017.12）</h3><p><strong>技术支持 / 技术部</strong></p>\n<ol>\n<li>纬地系列软件产品的技术支持、培训服务;</li>\n<li>道路与交通领域新技术与软件功能需求的调研分析；</li>\n<li>软件产品新技术的应用测试工作；</li>\n<li>软件技术与工程实践应用类技术文档编制等。</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><h3 id=\"ruleservice设计-2019-11-～\"><a href=\"#ruleservice设计-2019-11-～\" class=\"headerlink\" title=\"ruleservice设计 2019.11 ～\"></a>ruleservice设计 2019.11 ～</h3><h4 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。</p>\n<h4 id=\"责任描述：\"><a href=\"#责任描述：\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是对智能告警服务规则设计以及功能测试</li>\n<li>flask 编写api接口对后台进行增删改查操作</li>\n<li>javascript 测试自动化用例的编写。</li>\n</ol>\n<h3 id=\"ODAE开发-2019-03-～-2019-11\"><a href=\"#ODAE开发-2019-03-～-2019-11\" class=\"headerlink\" title=\"ODAE开发 2019.03 ～ 2019.11\"></a>ODAE开发 2019.03 ～ 2019.11</h3><h4 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。</p>\n<h4 id=\"责任描述：-1\"><a href=\"#责任描述：-1\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署</li>\n<li>发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。</li>\n</ol>\n<h3 id=\"Flask构建可扩展的RESTful-API-2018-11-2018-12\"><a href=\"#Flask构建可扩展的RESTful-API-2018-11-2018-12\" class=\"headerlink\" title=\"Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\"></a>Flask构建可扩展的RESTful-API  2018.11  ~  2018.12</h3><h4 id=\"责任描述：-2\"><a href=\"#责任描述：-2\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。</p>\n<h4 id=\"项目描述：-2\"><a href=\"#项目描述：-2\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>扩展重写Flask API,更好地支持接口编写,可作为API部分的demo</p>\n<h3 id=\"flask网页-2018-10-2018-11\"><a href=\"#flask网页-2018-10-2018-11\" class=\"headerlink\" title=\"flask网页  2018.10  ~ 2018.11\"></a>flask网页  2018.10  ~ 2018.11</h3><h4 id=\"责任描述：-3\"><a href=\"#责任描述：-3\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。</p>\n<h4 id=\"项目描述：-3\"><a href=\"#项目描述：-3\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币”鱼 豆”，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。</p>\n<p>使用到  flask + uwsgi + pipenv + nginx </p>\n<p><a href=\"http://v3.imwl.ga\" target=\"_blank\" rel=\"noopener\">http://v3.imwl.ga</a></p>\n<h3 id=\"个人小项目-2018-10-～\"><a href=\"#个人小项目-2018-10-～\" class=\"headerlink\" title=\"个人小项目 2018.10  ～\"></a>个人小项目 2018.10  ～</h3><h4 id=\"项目描述：-4\"><a href=\"#项目描述：-4\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>博客地址：<a href=\"https://imwl.ml/\">https://imwl.ml/</a> ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理</p>\n<p>python网页编辑器 <a href=\"https://imwl.ml/jupyter\">https://imwl.ml/jupyter</a>， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx<br>等等</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ol>\n<li>爱生活，爱技术，爱折腾的阳光宅男。</li>\n<li>喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。</li>\n<li>能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。</li>\n<li>给我一个机会， 定不会让您失望…</li>\n</ol>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您百忙之中阅读我的简历， 期待能有机会和您共事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>魏来 / 男 / 1995.07</li>\n<li>统招本科 / 济南大学 / 学士学位       2013.09-2017.07</li>\n<li>工作年限： 3年</li>\n<li>期望职位： Python工程师</li>\n<li>期望城市： 深圳</li>\n<li>电话： 17683749507</li>\n<li>Email： <a href=\"itsweilai@gmail.com\">itsweilai@gmail.com</a></li>\n<li>Github:  <a href=\"https://github.com/itswl\" target=\"_blank\" rel=\"noopener\">https://github.com/itswl</a></li>\n<li>blog:  <a href=\"https://imwl.ml/\">https://imwl.ml/</a>               备用地址 <a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io/</a></li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic</li>\n<li>熟练使用sql， 熟悉mysql，redis， MongoDB</li>\n<li>熟悉面向对象思想， 了解一些设计模式</li>\n<li>熟练使用linux系统，能编写简单shell脚本</li>\n<li>了解nginx部署网页</li>\n<li>了解基本的算法与数据结构</li>\n<li>了解 Golang, docker, javascript  </li>\n<li>具有一定的英语听说读写能力</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"深圳软通动力信息技术有限公司-（2019-03-～-）\"><a href=\"#深圳软通动力信息技术有限公司-（2019-03-～-）\" class=\"headerlink\" title=\"深圳软通动力信息技术有限公司 （2019.03 ～   ）\"></a>深圳软通动力信息技术有限公司 （2019.03 ～   ）</h3><p><strong>cloudsop开发一部 / HW深圳公共开发实施部</strong><br>工作描述： </p>\n<ol>\n<li>主要是编写部署脚本，部署平台到集群上。</li>\n<li>主要使用到的包paramiko,requests,fabric2等</li>\n<li>环境维护和部署过程中的问题解决</li>\n</ol>\n<p><strong>管控析平台二部 / HW深圳公共开发实施部</strong><br>工作描述：</p>\n<ol>\n<li>智能告警项目中的规则管理，后台的增删改查</li>\n<li>自动化测试用例的建设</li>\n</ol>\n<h3 id=\"吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\"><a href=\"#吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\" class=\"headerlink\" title=\"吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\"></a>吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）</h3><p><strong>python / 信息部</strong><br>工作描述：    1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。</p>\n<ol start=\"2\">\n<li>负责周报和月报的制作， 主要是对数据库数据的统计。</li>\n<li>使用pytho操作数据库，使用ORM框架SQLAlchemy等。 </li>\n<li>使用python对excel表进行操作。</li>\n<li>小脚本的开发</li>\n</ol>\n<h3 id=\"西安经天交通工程技术研究所（2017-08-～-2017-12）\"><a href=\"#西安经天交通工程技术研究所（2017-08-～-2017-12）\" class=\"headerlink\" title=\"西安经天交通工程技术研究所（2017.08 ～ 2017.12）\"></a>西安经天交通工程技术研究所（2017.08 ～ 2017.12）</h3><p><strong>技术支持 / 技术部</strong></p>\n<ol>\n<li>纬地系列软件产品的技术支持、培训服务;</li>\n<li>道路与交通领域新技术与软件功能需求的调研分析；</li>\n<li>软件产品新技术的应用测试工作；</li>\n<li>软件技术与工程实践应用类技术文档编制等。</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><h3 id=\"ruleservice设计-2019-11-～\"><a href=\"#ruleservice设计-2019-11-～\" class=\"headerlink\" title=\"ruleservice设计 2019.11 ～\"></a>ruleservice设计 2019.11 ～</h3><h4 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。</p>\n<h4 id=\"责任描述：\"><a href=\"#责任描述：\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是对智能告警服务规则设计以及功能测试</li>\n<li>flask 编写api接口对后台进行增删改查操作</li>\n<li>javascript 测试自动化用例的编写。</li>\n</ol>\n<h3 id=\"ODAE开发-2019-03-～-2019-11\"><a href=\"#ODAE开发-2019-03-～-2019-11\" class=\"headerlink\" title=\"ODAE开发 2019.03 ～ 2019.11\"></a>ODAE开发 2019.03 ～ 2019.11</h3><h4 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。</p>\n<h4 id=\"责任描述：-1\"><a href=\"#责任描述：-1\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署</li>\n<li>发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。</li>\n</ol>\n<h3 id=\"Flask构建可扩展的RESTful-API-2018-11-2018-12\"><a href=\"#Flask构建可扩展的RESTful-API-2018-11-2018-12\" class=\"headerlink\" title=\"Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\"></a>Flask构建可扩展的RESTful-API  2018.11  ~  2018.12</h3><h4 id=\"责任描述：-2\"><a href=\"#责任描述：-2\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。</p>\n<h4 id=\"项目描述：-2\"><a href=\"#项目描述：-2\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>扩展重写Flask API,更好地支持接口编写,可作为API部分的demo</p>\n<h3 id=\"flask网页-2018-10-2018-11\"><a href=\"#flask网页-2018-10-2018-11\" class=\"headerlink\" title=\"flask网页  2018.10  ~ 2018.11\"></a>flask网页  2018.10  ~ 2018.11</h3><h4 id=\"责任描述：-3\"><a href=\"#责任描述：-3\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。</p>\n<h4 id=\"项目描述：-3\"><a href=\"#项目描述：-3\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币”鱼 豆”，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。</p>\n<p>使用到  flask + uwsgi + pipenv + nginx </p>\n<p><a href=\"http://v3.imwl.ga\" target=\"_blank\" rel=\"noopener\">http://v3.imwl.ga</a></p>\n<h3 id=\"个人小项目-2018-10-～\"><a href=\"#个人小项目-2018-10-～\" class=\"headerlink\" title=\"个人小项目 2018.10  ～\"></a>个人小项目 2018.10  ～</h3><h4 id=\"项目描述：-4\"><a href=\"#项目描述：-4\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>博客地址：<a href=\"https://imwl.ml/\">https://imwl.ml/</a> ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理</p>\n<p>python网页编辑器 <a href=\"https://imwl.ml/jupyter\">https://imwl.ml/jupyter</a>， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx<br>等等</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ol>\n<li>爱生活，爱技术，爱折腾的阳光宅男。</li>\n<li>喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。</li>\n<li>能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。</li>\n<li>给我一个机会， 定不会让您失望…</li>\n</ol>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您百忙之中阅读我的简历， 期待能有机会和您共事。</p>\n"},{"title":"","date":"2018-11-08T13:04:43.000Z","type":"book","_content":"****\n# 关于此页\n\n\n我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。\n\n\n\n\n# 于是就有了这样一个基于gitbook的笔记。\n\n\n****\n\n## github pages托管\n\n\n\n[《 gitbook教程 》](https://itswl.github.io/learn_gitbook/) \n[《 python基础 》](https://itswl.github.io/learn_python/) \n[《 git教程 》](https://itswl.github.io/learn_git/) \n[《 Flask构建可扩展的RESTful-API 》](https://itswl.github.io/flask_api/) \n\n\n\n****\n\n## gitbook网页\n\n\n\n[《 gitbook教程 》](https://learn-gitbook.gitbook.io/gitbook/) \n[《 python基础 》](https://itswl.gitbook.io/python/) \n[《 flask鱼书项目记录 》](https://flask-yushu.gitbook.io/yushu/) \n[《 git教程 》](https://learn-git.gitbook.io/git/) \n[《 Flask构建可扩展的RESTful-API 》](https://flask-api.gitbook.io/api/) \n\n\n\n\n\n******\n\n# 建议\n做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。\n\n**gitbook好像访问速度很慢，使用特殊方法就可以了。**\n\n","source":"book/index.md","raw":"---\ntitle: \ndate: 2018-11-08 21:04:43\ntype: \"book\"\n---\n****\n# 关于此页\n\n\n我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。\n\n\n\n\n# 于是就有了这样一个基于gitbook的笔记。\n\n\n****\n\n## github pages托管\n\n\n\n[《 gitbook教程 》](https://itswl.github.io/learn_gitbook/) \n[《 python基础 》](https://itswl.github.io/learn_python/) \n[《 git教程 》](https://itswl.github.io/learn_git/) \n[《 Flask构建可扩展的RESTful-API 》](https://itswl.github.io/flask_api/) \n\n\n\n****\n\n## gitbook网页\n\n\n\n[《 gitbook教程 》](https://learn-gitbook.gitbook.io/gitbook/) \n[《 python基础 》](https://itswl.gitbook.io/python/) \n[《 flask鱼书项目记录 》](https://flask-yushu.gitbook.io/yushu/) \n[《 git教程 》](https://learn-git.gitbook.io/git/) \n[《 Flask构建可扩展的RESTful-API 》](https://flask-api.gitbook.io/api/) \n\n\n\n\n\n******\n\n# 建议\n做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。\n\n**gitbook好像访问速度很慢，使用特殊方法就可以了。**\n\n","updated":"2020-04-10T16:46:16.772Z","path":"book/index.html","comments":1,"layout":"page","_id":"ck8vqttu8000374ux2cz00bwf","content":"<hr>\n<h1 id=\"关于此页\"><a href=\"#关于此页\" class=\"headerlink\" title=\"关于此页\"></a>关于此页</h1><p>我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。</p>\n<h1 id=\"于是就有了这样一个基于gitbook的笔记。\"><a href=\"#于是就有了这样一个基于gitbook的笔记。\" class=\"headerlink\" title=\"于是就有了这样一个基于gitbook的笔记。\"></a>于是就有了这样一个基于gitbook的笔记。</h1><hr>\n<h2 id=\"github-pages托管\"><a href=\"#github-pages托管\" class=\"headerlink\" title=\"github pages托管\"></a>github pages托管</h2><p><a href=\"https://itswl.github.io/learn_gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.github.io/learn_python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://itswl.github.io/learn_git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://itswl.github.io/flask_api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h2 id=\"gitbook网页\"><a href=\"#gitbook网页\" class=\"headerlink\" title=\"gitbook网页\"></a>gitbook网页</h2><p><a href=\"https://learn-gitbook.gitbook.io/gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.gitbook.io/python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://flask-yushu.gitbook.io/yushu/\" target=\"_blank\" rel=\"noopener\">《 flask鱼书项目记录 》</a><br><a href=\"https://learn-git.gitbook.io/git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://flask-api.gitbook.io/api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。</p>\n<p><strong>gitbook好像访问速度很慢，使用特殊方法就可以了。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"关于此页\"><a href=\"#关于此页\" class=\"headerlink\" title=\"关于此页\"></a>关于此页</h1><p>我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。</p>\n<h1 id=\"于是就有了这样一个基于gitbook的笔记。\"><a href=\"#于是就有了这样一个基于gitbook的笔记。\" class=\"headerlink\" title=\"于是就有了这样一个基于gitbook的笔记。\"></a>于是就有了这样一个基于gitbook的笔记。</h1><hr>\n<h2 id=\"github-pages托管\"><a href=\"#github-pages托管\" class=\"headerlink\" title=\"github pages托管\"></a>github pages托管</h2><p><a href=\"https://itswl.github.io/learn_gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.github.io/learn_python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://itswl.github.io/learn_git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://itswl.github.io/flask_api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h2 id=\"gitbook网页\"><a href=\"#gitbook网页\" class=\"headerlink\" title=\"gitbook网页\"></a>gitbook网页</h2><p><a href=\"https://learn-gitbook.gitbook.io/gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.gitbook.io/python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://flask-yushu.gitbook.io/yushu/\" target=\"_blank\" rel=\"noopener\">《 flask鱼书项目记录 》</a><br><a href=\"https://learn-git.gitbook.io/git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://flask-api.gitbook.io/api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。</p>\n<p><strong>gitbook好像访问速度很慢，使用特殊方法就可以了。</strong></p>\n"}],"Post":[{"_content":"","source":"_posts/MySQL/数据库结构优化.md","raw":"","slug":"MySQL/数据库结构优化","published":1,"date":"2020-04-11T14:52:41.945Z","updated":"2020-04-11T14:52:41.945Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtty2000474ux9l3d4acc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SQL查询优化，分库分表","date":"2020-03-18T13:57:47.000Z","_content":"\n# 一、SQL查询优化（**`重要`**）\n\n## 1.1 获取有性能问题SQL的三种方式\n\n1.  通过用户反馈获取存在性能问题的SQL；\n2.  通过慢查日志获取存在性能问题的SQL；\n3.  实时获取存在性能问题的SQL；\n\n### 1.1.2 慢查日志分析工具\n\n**相关配置参数：**\n\n```\nslow_query_log # 启动停止记录慢查日志，慢查询日志默认是没有开启的可以在配置文件中开启(on)\nslow_query_log_file # 指定慢查日志的存储路径及文件，日志存储和数据从存储应该分开存储\n\nlong_query_time # 指定记录慢查询日志SQL执行时间的阀值默认值为10秒通常,对于一个繁忙的系统来说,改为0.001秒(1毫秒)比较合适\nlog_queries_not_using_indexes #是否记录未使用索引的SQL\n\n```\n\n  **常用工具：**`mysqldumpslow`和`pt-query-digest`\n\n```\npt-query-digest --explain h=127.0.0.1,u=root,p=p@ssWord  slow-mysql.log\n```\n\n## 1.1.3 实时获取有性能问题的SQL（**推荐**）\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-108def45b4274a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\nSELECT id,user,host,DB,command,time,state,info\nFROM information_schema.processlist\nWHERE TIME>=60\n```\n\n  查询当前服务器执行超过`60s`的`SQL`，可以通过脚本周期性的来执行这条`SQL`，就能查出有问题的`SQL`。\n\n## 1.2 SQL的解析预处理及生成执行计划（**`重要`**）\n\n### 1.2.1 查询过程描述（**`重点！！！`**）\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5dc87722917e561f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n[**上图原文连接**](https://processon.com/chart_image/5aab1fcbe4b0f68cc019053a.png?_=1521169284173)\n\n#### 通过上图可以清晰的了解到MySql查询执行的大致过程：\n\n1.  发送`SQL`语句。\n2.  查询缓存，如果命中缓存直接返回结果。\n3.  `SQL`解析，预处理，再由优化器生成对应的查询执行计划。\n4.  执行查询，调用存储引擎API获取数据。\n5.  返回结果。\n\n### 1.2.2 查询缓存对性能的影响（**建议关闭缓存**）\n\n**第一阶段：**\n**相关配置参数：**\n\n```\nquery_cache_type # 设置查询缓存是否可用\nquery_cache_size # 设置查询缓存的内存大小\nquery_cache_limit # 设置查询缓存可用的存储最大值（加上sql_no_cache可以提高效率）\nquery_cache_wlock_invalidate # 设置数据表被锁后是否返回缓存中的数据\nquery_cache_min_res_unit # 设置查询缓存分配的内存块的最小单\n```\n\n> **缓存查找是利用对大小写敏感的`哈希查找`来实现的**，Hash查找只能进行全值查找（sql完全一致），如果缓存命中，检查用户权限，如果权限允许，直接返回，查询不被解析，也不会生成查询计划。\n\n#### **`在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁`**。将`query_cache_type`设置为`off`,`query_cache_size`设置为`0`。\n\n### 1.2.3 **第二阶段：**MySQL依照执行计划和存储引擎进行交互\n\n  **这个阶段包括了多个子过程：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-bb44338f81085e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2b8b416a6222bf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-fe5d84ef10a6fa4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### **`一条查询可以有多种查询方式`**，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，**`这也就是索引不能太多的原因`**。\n\n## 1.3 会造成MySQL生成错误的执行计划的原因\n\n1、统计信息不准确\n2、成本估算与实际的执行计划成本不同\n\n![](https://upload-images.jianshu.io/upload_images/14597179-75fdacdb25eccc88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n3、给出的最优执行计划与估计的不同\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ddff26864a8687f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n4、MySQL不考虑并发查询\n5、会基于固定规则生成执行计划\n6、MySQL不考虑不受其控制的成本，如存储过程，用户自定义函数\n\n## 1.4 MySQL优化器可优化的SQL类型\n\n> 查询优化器：对查询进行优化并查询mysql认为的成本最低的执行计划。 为了生成最优的执行计划，查询优化器会对一些查询进行改写\n\n  可以优化的sql类型\n\n  1、重新定义表的关联顺序；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2d05194901f2f95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  2、将外连接转换为内连接；\n\n  3、使用等价变换规则；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-e415cccfa34dd5f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  4、优化count(),min(),max()；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-409bf29b8984f5b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  5、将一个表达式转换为常数；\n  6、子查询优化；\n\n  ![](https://upload-images.jianshu.io/upload_images/14597179-2b8e7d1a457ebd7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  7、提前终止查询，如发现一个不成立条件(如`where id = -1`)，立即返回一个空结果；\n\n  8、对in()条件进行优化；\n\n## 1.5 查询处理各个阶段所需要的时间\n\n### 1.5.1 使用profile(目前已经不推荐使用了)\n\n```\nset profiling = 1; #启动profile,这是一个session级的配制执行查询\n\nshow profiles; # 查询每一个查询所消耗的总时间的信息\n\nshow profiles for query N; # 查询的每个阶段所消耗的时间\n\n```\n\n### 1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）\n\n启动监控和历史记录表：`use performance_schema`\n\n```\nupdate setup_instruments set enabled='YES',TIME = 'YES' WHERE NAME LIKE 'stage%';\n\nupdate set_consumbers set enabled='YES',TIME = 'YES' WHERE NAME LIKE 'event%';\n\n```\n\n![](https://upload-images.jianshu.io/upload_images/14597179-5a68e6460cfd4b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-d85ebe9b118c2b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 1.6 特定SQL的查询优化\n\n### 1.6.1 大表的数据修改\n\n![](https://upload-images.jianshu.io/upload_images/14597179-7308bd9300d15310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](https://upload-images.jianshu.io/upload_images/14597179-c3ffa1d09d4c9f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 1.6.2 大表的结构修改\n\n![](https://upload-images.jianshu.io/upload_images/14597179-ba5584f9907539cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.  利用主从复制，先对从服务器进入修改，然后主从切换\n2.  （推荐）\n\n> 添加一个新表（修改后的结构），老表数据导入新表，老表建立触发器，修改数据同步到新表， 老表加一个排它锁（重命名）， 新表重命名， 删除老表。\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ca18587e28be637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**修改语句这个样子：**\n\n```\nalter table sbtest4 modify c varchar(150) not null default ''\n\n```\n\n**利用工具修改：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-7239a84cec0180b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# ## 1.6.3 优化not in 和 <> 查询\n\n  **子查询改写为关联查询：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-5e4c1522cdb5a9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 二、分库分表\n\n## 2.1 分库分表的几种方式\n\n> 分担读负载 可通过 一主多从，升级硬件来解决。\n\n### 2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）\n\n![](https://upload-images.jianshu.io/upload_images/14597179-da7140ceb6ffa592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n    **拆分简单,不允许跨库。但并不能减少写负载。**\n\n### 2.1.2 把一个库中的表分离到不同的数据库中\n\n![](https://upload-images.jianshu.io/upload_images/14597179-f3ff87b0f2ee2b0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n    **该方式只能在一定时间内减少写压力。**\n\n    以上两种方式只能暂时解决读写性能问题。\n\n### 2.1.3 数据库分片\n\n> 对一个库中的相关表进行水平拆分到不同实例的数据库中\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ff65dacf21a21f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 2.1.3.1 如何选择分区键\n\n1.  分区键要能尽可能避免跨分区查询的发生\n2.  分区键要尽可能使各个分区中的数据平均\n\n#### 2.1.3.2 分片中如何生成全局唯一ID\n\n![](https://upload-images.jianshu.io/upload_images/14597179-82271ac4944e9cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### [**扩展：表的垂直拆分和水平拆分**](https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39326)\n","source":"_posts/MySQL/SQL查询优化，分库分表.md","raw":"\n---\ntitle: SQL查询优化，分库分表\ndate: 2020-03-18 21:57:47\ntags:\ncategories: mysql学习\n---\n\n# 一、SQL查询优化（**`重要`**）\n\n## 1.1 获取有性能问题SQL的三种方式\n\n1.  通过用户反馈获取存在性能问题的SQL；\n2.  通过慢查日志获取存在性能问题的SQL；\n3.  实时获取存在性能问题的SQL；\n\n### 1.1.2 慢查日志分析工具\n\n**相关配置参数：**\n\n```\nslow_query_log # 启动停止记录慢查日志，慢查询日志默认是没有开启的可以在配置文件中开启(on)\nslow_query_log_file # 指定慢查日志的存储路径及文件，日志存储和数据从存储应该分开存储\n\nlong_query_time # 指定记录慢查询日志SQL执行时间的阀值默认值为10秒通常,对于一个繁忙的系统来说,改为0.001秒(1毫秒)比较合适\nlog_queries_not_using_indexes #是否记录未使用索引的SQL\n\n```\n\n  **常用工具：**`mysqldumpslow`和`pt-query-digest`\n\n```\npt-query-digest --explain h=127.0.0.1,u=root,p=p@ssWord  slow-mysql.log\n```\n\n## 1.1.3 实时获取有性能问题的SQL（**推荐**）\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-108def45b4274a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n```\nSELECT id,user,host,DB,command,time,state,info\nFROM information_schema.processlist\nWHERE TIME>=60\n```\n\n  查询当前服务器执行超过`60s`的`SQL`，可以通过脚本周期性的来执行这条`SQL`，就能查出有问题的`SQL`。\n\n## 1.2 SQL的解析预处理及生成执行计划（**`重要`**）\n\n### 1.2.1 查询过程描述（**`重点！！！`**）\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5dc87722917e561f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n[**上图原文连接**](https://processon.com/chart_image/5aab1fcbe4b0f68cc019053a.png?_=1521169284173)\n\n#### 通过上图可以清晰的了解到MySql查询执行的大致过程：\n\n1.  发送`SQL`语句。\n2.  查询缓存，如果命中缓存直接返回结果。\n3.  `SQL`解析，预处理，再由优化器生成对应的查询执行计划。\n4.  执行查询，调用存储引擎API获取数据。\n5.  返回结果。\n\n### 1.2.2 查询缓存对性能的影响（**建议关闭缓存**）\n\n**第一阶段：**\n**相关配置参数：**\n\n```\nquery_cache_type # 设置查询缓存是否可用\nquery_cache_size # 设置查询缓存的内存大小\nquery_cache_limit # 设置查询缓存可用的存储最大值（加上sql_no_cache可以提高效率）\nquery_cache_wlock_invalidate # 设置数据表被锁后是否返回缓存中的数据\nquery_cache_min_res_unit # 设置查询缓存分配的内存块的最小单\n```\n\n> **缓存查找是利用对大小写敏感的`哈希查找`来实现的**，Hash查找只能进行全值查找（sql完全一致），如果缓存命中，检查用户权限，如果权限允许，直接返回，查询不被解析，也不会生成查询计划。\n\n#### **`在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁`**。将`query_cache_type`设置为`off`,`query_cache_size`设置为`0`。\n\n### 1.2.3 **第二阶段：**MySQL依照执行计划和存储引擎进行交互\n\n  **这个阶段包括了多个子过程：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-bb44338f81085e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2b8b416a6222bf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-fe5d84ef10a6fa4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### **`一条查询可以有多种查询方式`**，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，**`这也就是索引不能太多的原因`**。\n\n## 1.3 会造成MySQL生成错误的执行计划的原因\n\n1、统计信息不准确\n2、成本估算与实际的执行计划成本不同\n\n![](https://upload-images.jianshu.io/upload_images/14597179-75fdacdb25eccc88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n3、给出的最优执行计划与估计的不同\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ddff26864a8687f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n4、MySQL不考虑并发查询\n5、会基于固定规则生成执行计划\n6、MySQL不考虑不受其控制的成本，如存储过程，用户自定义函数\n\n## 1.4 MySQL优化器可优化的SQL类型\n\n> 查询优化器：对查询进行优化并查询mysql认为的成本最低的执行计划。 为了生成最优的执行计划，查询优化器会对一些查询进行改写\n\n  可以优化的sql类型\n\n  1、重新定义表的关联顺序；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2d05194901f2f95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  2、将外连接转换为内连接；\n\n  3、使用等价变换规则；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-e415cccfa34dd5f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  4、优化count(),min(),max()；\n\n![](https://upload-images.jianshu.io/upload_images/14597179-409bf29b8984f5b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  5、将一个表达式转换为常数；\n  6、子查询优化；\n\n  ![](https://upload-images.jianshu.io/upload_images/14597179-2b8e7d1a457ebd7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n  7、提前终止查询，如发现一个不成立条件(如`where id = -1`)，立即返回一个空结果；\n\n  8、对in()条件进行优化；\n\n## 1.5 查询处理各个阶段所需要的时间\n\n### 1.5.1 使用profile(目前已经不推荐使用了)\n\n```\nset profiling = 1; #启动profile,这是一个session级的配制执行查询\n\nshow profiles; # 查询每一个查询所消耗的总时间的信息\n\nshow profiles for query N; # 查询的每个阶段所消耗的时间\n\n```\n\n### 1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）\n\n启动监控和历史记录表：`use performance_schema`\n\n```\nupdate setup_instruments set enabled='YES',TIME = 'YES' WHERE NAME LIKE 'stage%';\n\nupdate set_consumbers set enabled='YES',TIME = 'YES' WHERE NAME LIKE 'event%';\n\n```\n\n![](https://upload-images.jianshu.io/upload_images/14597179-5a68e6460cfd4b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-d85ebe9b118c2b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 1.6 特定SQL的查询优化\n\n### 1.6.1 大表的数据修改\n\n![](https://upload-images.jianshu.io/upload_images/14597179-7308bd9300d15310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![](https://upload-images.jianshu.io/upload_images/14597179-c3ffa1d09d4c9f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 1.6.2 大表的结构修改\n\n![](https://upload-images.jianshu.io/upload_images/14597179-ba5584f9907539cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1.  利用主从复制，先对从服务器进入修改，然后主从切换\n2.  （推荐）\n\n> 添加一个新表（修改后的结构），老表数据导入新表，老表建立触发器，修改数据同步到新表， 老表加一个排它锁（重命名）， 新表重命名， 删除老表。\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ca18587e28be637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**修改语句这个样子：**\n\n```\nalter table sbtest4 modify c varchar(150) not null default ''\n\n```\n\n**利用工具修改：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-7239a84cec0180b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# ## 1.6.3 优化not in 和 <> 查询\n\n  **子查询改写为关联查询：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-5e4c1522cdb5a9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 二、分库分表\n\n## 2.1 分库分表的几种方式\n\n> 分担读负载 可通过 一主多从，升级硬件来解决。\n\n### 2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）\n\n![](https://upload-images.jianshu.io/upload_images/14597179-da7140ceb6ffa592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n    **拆分简单,不允许跨库。但并不能减少写负载。**\n\n### 2.1.2 把一个库中的表分离到不同的数据库中\n\n![](https://upload-images.jianshu.io/upload_images/14597179-f3ff87b0f2ee2b0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n    **该方式只能在一定时间内减少写压力。**\n\n    以上两种方式只能暂时解决读写性能问题。\n\n### 2.1.3 数据库分片\n\n> 对一个库中的相关表进行水平拆分到不同实例的数据库中\n\n![](https://upload-images.jianshu.io/upload_images/14597179-6ff65dacf21a21f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 2.1.3.1 如何选择分区键\n\n1.  分区键要能尽可能避免跨分区查询的发生\n2.  分区键要尽可能使各个分区中的数据平均\n\n#### 2.1.3.2 分片中如何生成全局唯一ID\n\n![](https://upload-images.jianshu.io/upload_images/14597179-82271ac4944e9cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### [**扩展：表的垂直拆分和水平拆分**](https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39326)\n","slug":"MySQL/SQL查询优化，分库分表","published":1,"updated":"2020-04-11T14:54:23.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu4e000574ux32m9cw6v","content":"<h1 id=\"一、SQL查询优化（重要）\"><a href=\"#一、SQL查询优化（重要）\" class=\"headerlink\" title=\"一、SQL查询优化（重要）\"></a>一、SQL查询优化（<strong><code>重要</code></strong>）</h1><h2 id=\"1-1-获取有性能问题SQL的三种方式\"><a href=\"#1-1-获取有性能问题SQL的三种方式\" class=\"headerlink\" title=\"1.1 获取有性能问题SQL的三种方式\"></a>1.1 获取有性能问题SQL的三种方式</h2><ol>\n<li>通过用户反馈获取存在性能问题的SQL；</li>\n<li>通过慢查日志获取存在性能问题的SQL；</li>\n<li>实时获取存在性能问题的SQL；</li>\n</ol>\n<h3 id=\"1-1-2-慢查日志分析工具\"><a href=\"#1-1-2-慢查日志分析工具\" class=\"headerlink\" title=\"1.1.2 慢查日志分析工具\"></a>1.1.2 慢查日志分析工具</h3><p><strong>相关配置参数：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log # 启动停止记录慢查日志，慢查询日志默认是没有开启的可以在配置文件中开启(on)</span><br><span class=\"line\">slow_query_log_file # 指定慢查日志的存储路径及文件，日志存储和数据从存储应该分开存储</span><br><span class=\"line\"></span><br><span class=\"line\">long_query_time # 指定记录慢查询日志SQL执行时间的阀值默认值为10秒通常,对于一个繁忙的系统来说,改为0.001秒(1毫秒)比较合适</span><br><span class=\"line\">log_queries_not_using_indexes #是否记录未使用索引的SQL</span><br></pre></td></tr></table></figure>\n<p>  <strong>常用工具：</strong><code>mysqldumpslow</code>和<code>pt-query-digest</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-query-digest --explain h=127.0.0.1,u=root,p=p@ssWord  slow-mysql.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-1-3-实时获取有性能问题的SQL（推荐）\"><a href=\"#1-1-3-实时获取有性能问题的SQL（推荐）\" class=\"headerlink\" title=\"1.1.3 实时获取有性能问题的SQL（推荐）\"></a>1.1.3 实时获取有性能问题的SQL（<strong>推荐</strong>）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-108def45b4274a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id,user,host,DB,command,time,state,info</span><br><span class=\"line\">FROM information_schema.processlist</span><br><span class=\"line\">WHERE TIME&gt;=60</span><br></pre></td></tr></table></figure>\n<p>  查询当前服务器执行超过<code>60s</code>的<code>SQL</code>，可以通过脚本周期性的来执行这条<code>SQL</code>，就能查出有问题的<code>SQL</code>。</p>\n<h2 id=\"1-2-SQL的解析预处理及生成执行计划（重要）\"><a href=\"#1-2-SQL的解析预处理及生成执行计划（重要）\" class=\"headerlink\" title=\"1.2 SQL的解析预处理及生成执行计划（重要）\"></a>1.2 SQL的解析预处理及生成执行计划（<strong><code>重要</code></strong>）</h2><h3 id=\"1-2-1-查询过程描述（重点！！！）\"><a href=\"#1-2-1-查询过程描述（重点！！！）\" class=\"headerlink\" title=\"1.2.1 查询过程描述（重点！！！）\"></a>1.2.1 查询过程描述（<strong><code>重点！！！</code></strong>）</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5dc87722917e561f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><a href=\"https://processon.com/chart_image/5aab1fcbe4b0f68cc019053a.png?_=1521169284173\" target=\"_blank\" rel=\"noopener\"><strong>上图原文连接</strong></a></p>\n<h4 id=\"通过上图可以清晰的了解到MySql查询执行的大致过程：\"><a href=\"#通过上图可以清晰的了解到MySql查询执行的大致过程：\" class=\"headerlink\" title=\"通过上图可以清晰的了解到MySql查询执行的大致过程：\"></a>通过上图可以清晰的了解到MySql查询执行的大致过程：</h4><ol>\n<li>发送<code>SQL</code>语句。</li>\n<li>查询缓存，如果命中缓存直接返回结果。</li>\n<li><code>SQL</code>解析，预处理，再由优化器生成对应的查询执行计划。</li>\n<li>执行查询，调用存储引擎API获取数据。</li>\n<li>返回结果。</li>\n</ol>\n<h3 id=\"1-2-2-查询缓存对性能的影响（建议关闭缓存）\"><a href=\"#1-2-2-查询缓存对性能的影响（建议关闭缓存）\" class=\"headerlink\" title=\"1.2.2 查询缓存对性能的影响（建议关闭缓存）\"></a>1.2.2 查询缓存对性能的影响（<strong>建议关闭缓存</strong>）</h3><p><strong>第一阶段：</strong><br><strong>相关配置参数：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_cache_type # 设置查询缓存是否可用</span><br><span class=\"line\">query_cache_size # 设置查询缓存的内存大小</span><br><span class=\"line\">query_cache_limit # 设置查询缓存可用的存储最大值（加上sql_no_cache可以提高效率）</span><br><span class=\"line\">query_cache_wlock_invalidate # 设置数据表被锁后是否返回缓存中的数据</span><br><span class=\"line\">query_cache_min_res_unit # 设置查询缓存分配的内存块的最小单</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>缓存查找是利用对大小写敏感的<code>哈希查找</code>来实现的</strong>，Hash查找只能进行全值查找（sql完全一致），如果缓存命中，检查用户权限，如果权限允许，直接返回，查询不被解析，也不会生成查询计划。</p>\n</blockquote>\n<h4 id=\"在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query-cache-type设置为off-query-cache-size设置为0。\"><a href=\"#在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query-cache-type设置为off-query-cache-size设置为0。\" class=\"headerlink\" title=\"在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query_cache_type设置为off,query_cache_size设置为0。\"></a><strong><code>在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁</code></strong>。将<code>query_cache_type</code>设置为<code>off</code>,<code>query_cache_size</code>设置为<code>0</code>。</h4><h3 id=\"1-2-3-第二阶段：MySQL依照执行计划和存储引擎进行交互\"><a href=\"#1-2-3-第二阶段：MySQL依照执行计划和存储引擎进行交互\" class=\"headerlink\" title=\"1.2.3 第二阶段：MySQL依照执行计划和存储引擎进行交互\"></a>1.2.3 <strong>第二阶段：</strong>MySQL依照执行计划和存储引擎进行交互</h3><p>  <strong>这个阶段包括了多个子过程：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bb44338f81085e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b8b416a6222bf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fe5d84ef10a6fa4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\"><a href=\"#一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\" class=\"headerlink\" title=\"一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\"></a><strong><code>一条查询可以有多种查询方式</code></strong>，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，<strong><code>这也就是索引不能太多的原因</code></strong>。</h4><h2 id=\"1-3-会造成MySQL生成错误的执行计划的原因\"><a href=\"#1-3-会造成MySQL生成错误的执行计划的原因\" class=\"headerlink\" title=\"1.3 会造成MySQL生成错误的执行计划的原因\"></a>1.3 会造成MySQL生成错误的执行计划的原因</h2><p>1、统计信息不准确<br>2、成本估算与实际的执行计划成本不同</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-75fdacdb25eccc88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3、给出的最优执行计划与估计的不同</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ddff26864a8687f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>4、MySQL不考虑并发查询<br>5、会基于固定规则生成执行计划<br>6、MySQL不考虑不受其控制的成本，如存储过程，用户自定义函数</p>\n<h2 id=\"1-4-MySQL优化器可优化的SQL类型\"><a href=\"#1-4-MySQL优化器可优化的SQL类型\" class=\"headerlink\" title=\"1.4 MySQL优化器可优化的SQL类型\"></a>1.4 MySQL优化器可优化的SQL类型</h2><blockquote>\n<p>查询优化器：对查询进行优化并查询mysql认为的成本最低的执行计划。 为了生成最优的执行计划，查询优化器会对一些查询进行改写</p>\n</blockquote>\n<p>  可以优化的sql类型</p>\n<p>  1、重新定义表的关联顺序；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2d05194901f2f95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  2、将外连接转换为内连接；</p>\n<p>  3、使用等价变换规则；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e415cccfa34dd5f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  4、优化count(),min(),max()；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-409bf29b8984f5b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  5、将一个表达式转换为常数；<br>  6、子查询优化；</p>\n<p>  <img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b8e7d1a457ebd7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  7、提前终止查询，如发现一个不成立条件(如<code>where id = -1</code>)，立即返回一个空结果；</p>\n<p>  8、对in()条件进行优化；</p>\n<h2 id=\"1-5-查询处理各个阶段所需要的时间\"><a href=\"#1-5-查询处理各个阶段所需要的时间\" class=\"headerlink\" title=\"1.5 查询处理各个阶段所需要的时间\"></a>1.5 查询处理各个阶段所需要的时间</h2><h3 id=\"1-5-1-使用profile-目前已经不推荐使用了\"><a href=\"#1-5-1-使用profile-目前已经不推荐使用了\" class=\"headerlink\" title=\"1.5.1 使用profile(目前已经不推荐使用了)\"></a>1.5.1 使用profile(目前已经不推荐使用了)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set profiling = 1; #启动profile,这是一个session级的配制执行查询</span><br><span class=\"line\"></span><br><span class=\"line\">show profiles; # 查询每一个查询所消耗的总时间的信息</span><br><span class=\"line\"></span><br><span class=\"line\">show profiles for query N; # 查询的每个阶段所消耗的时间</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-2-performance-schema是5-5引入的一个性能分析引擎（5-5版本时期开销比较大）\"><a href=\"#1-5-2-performance-schema是5-5引入的一个性能分析引擎（5-5版本时期开销比较大）\" class=\"headerlink\" title=\"1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）\"></a>1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）</h3><p>启动监控和历史记录表：<code>use performance_schema</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update setup_instruments set enabled=&apos;YES&apos;,TIME = &apos;YES&apos; WHERE NAME LIKE &apos;stage%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">update set_consumbers set enabled=&apos;YES&apos;,TIME = &apos;YES&apos; WHERE NAME LIKE &apos;event%&apos;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5a68e6460cfd4b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d85ebe9b118c2b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"1-6-特定SQL的查询优化\"><a href=\"#1-6-特定SQL的查询优化\" class=\"headerlink\" title=\"1.6 特定SQL的查询优化\"></a>1.6 特定SQL的查询优化</h2><h3 id=\"1-6-1-大表的数据修改\"><a href=\"#1-6-1-大表的数据修改\" class=\"headerlink\" title=\"1.6.1 大表的数据修改\"></a>1.6.1 大表的数据修改</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7308bd9300d15310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c3ffa1d09d4c9f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"1-6-2-大表的结构修改\"><a href=\"#1-6-2-大表的结构修改\" class=\"headerlink\" title=\"1.6.2 大表的结构修改\"></a>1.6.2 大表的结构修改</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ba5584f9907539cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ol>\n<li>利用主从复制，先对从服务器进入修改，然后主从切换</li>\n<li>（推荐）</li>\n</ol>\n<blockquote>\n<p>添加一个新表（修改后的结构），老表数据导入新表，老表建立触发器，修改数据同步到新表， 老表加一个排它锁（重命名）， 新表重命名， 删除老表。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ca18587e28be637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>修改语句这个样子：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table sbtest4 modify c varchar(150) not null default &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>利用工具修改：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7239a84cec0180b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"1-6-3-优化not-in-和-lt-gt-查询\"><a href=\"#1-6-3-优化not-in-和-lt-gt-查询\" class=\"headerlink\" title=\"## 1.6.3 优化not in 和 &lt;&gt; 查询\"></a>## 1.6.3 优化not in 和 &lt;&gt; 查询</h1><p>  <strong>子查询改写为关联查询：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5e4c1522cdb5a9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"二、分库分表\"><a href=\"#二、分库分表\" class=\"headerlink\" title=\"二、分库分表\"></a>二、分库分表</h1><h2 id=\"2-1-分库分表的几种方式\"><a href=\"#2-1-分库分表的几种方式\" class=\"headerlink\" title=\"2.1 分库分表的几种方式\"></a>2.1 分库分表的几种方式</h2><blockquote>\n<p>分担读负载 可通过 一主多从，升级硬件来解决。</p>\n</blockquote>\n<h3 id=\"2-1-1-把一个实例中的多个数据库拆分到不同实例（集群）\"><a href=\"#2-1-1-把一个实例中的多个数据库拆分到不同实例（集群）\" class=\"headerlink\" title=\"2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）\"></a>2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-da7140ceb6ffa592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<pre><code>**拆分简单,不允许跨库。但并不能减少写负载。**\n</code></pre><h3 id=\"2-1-2-把一个库中的表分离到不同的数据库中\"><a href=\"#2-1-2-把一个库中的表分离到不同的数据库中\" class=\"headerlink\" title=\"2.1.2 把一个库中的表分离到不同的数据库中\"></a>2.1.2 把一个库中的表分离到不同的数据库中</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f3ff87b0f2ee2b0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<pre><code>**该方式只能在一定时间内减少写压力。**\n\n以上两种方式只能暂时解决读写性能问题。\n</code></pre><h3 id=\"2-1-3-数据库分片\"><a href=\"#2-1-3-数据库分片\" class=\"headerlink\" title=\"2.1.3 数据库分片\"></a>2.1.3 数据库分片</h3><blockquote>\n<p>对一个库中的相关表进行水平拆分到不同实例的数据库中</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ff65dacf21a21f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"2-1-3-1-如何选择分区键\"><a href=\"#2-1-3-1-如何选择分区键\" class=\"headerlink\" title=\"2.1.3.1 如何选择分区键\"></a>2.1.3.1 如何选择分区键</h4><ol>\n<li>分区键要能尽可能避免跨分区查询的发生</li>\n<li>分区键要尽可能使各个分区中的数据平均</li>\n</ol>\n<h4 id=\"2-1-3-2-分片中如何生成全局唯一ID\"><a href=\"#2-1-3-2-分片中如何生成全局唯一ID\" class=\"headerlink\" title=\"2.1.3.2 分片中如何生成全局唯一ID\"></a>2.1.3.2 分片中如何生成全局唯一ID</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-82271ac4944e9cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"扩展：表的垂直拆分和水平拆分\"><a href=\"#扩展：表的垂直拆分和水平拆分\" class=\"headerlink\" title=\"扩展：表的垂直拆分和水平拆分\"></a><a href=\"https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39326\" target=\"_blank\" rel=\"noopener\"><strong>扩展：表的垂直拆分和水平拆分</strong></a></h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、SQL查询优化（重要）\"><a href=\"#一、SQL查询优化（重要）\" class=\"headerlink\" title=\"一、SQL查询优化（重要）\"></a>一、SQL查询优化（<strong><code>重要</code></strong>）</h1><h2 id=\"1-1-获取有性能问题SQL的三种方式\"><a href=\"#1-1-获取有性能问题SQL的三种方式\" class=\"headerlink\" title=\"1.1 获取有性能问题SQL的三种方式\"></a>1.1 获取有性能问题SQL的三种方式</h2><ol>\n<li>通过用户反馈获取存在性能问题的SQL；</li>\n<li>通过慢查日志获取存在性能问题的SQL；</li>\n<li>实时获取存在性能问题的SQL；</li>\n</ol>\n<h3 id=\"1-1-2-慢查日志分析工具\"><a href=\"#1-1-2-慢查日志分析工具\" class=\"headerlink\" title=\"1.1.2 慢查日志分析工具\"></a>1.1.2 慢查日志分析工具</h3><p><strong>相关配置参数：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log # 启动停止记录慢查日志，慢查询日志默认是没有开启的可以在配置文件中开启(on)</span><br><span class=\"line\">slow_query_log_file # 指定慢查日志的存储路径及文件，日志存储和数据从存储应该分开存储</span><br><span class=\"line\"></span><br><span class=\"line\">long_query_time # 指定记录慢查询日志SQL执行时间的阀值默认值为10秒通常,对于一个繁忙的系统来说,改为0.001秒(1毫秒)比较合适</span><br><span class=\"line\">log_queries_not_using_indexes #是否记录未使用索引的SQL</span><br></pre></td></tr></table></figure>\n<p>  <strong>常用工具：</strong><code>mysqldumpslow</code>和<code>pt-query-digest</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pt-query-digest --explain h=127.0.0.1,u=root,p=p@ssWord  slow-mysql.log</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-1-3-实时获取有性能问题的SQL（推荐）\"><a href=\"#1-1-3-实时获取有性能问题的SQL（推荐）\" class=\"headerlink\" title=\"1.1.3 实时获取有性能问题的SQL（推荐）\"></a>1.1.3 实时获取有性能问题的SQL（<strong>推荐</strong>）</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-108def45b4274a2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id,user,host,DB,command,time,state,info</span><br><span class=\"line\">FROM information_schema.processlist</span><br><span class=\"line\">WHERE TIME&gt;=60</span><br></pre></td></tr></table></figure>\n<p>  查询当前服务器执行超过<code>60s</code>的<code>SQL</code>，可以通过脚本周期性的来执行这条<code>SQL</code>，就能查出有问题的<code>SQL</code>。</p>\n<h2 id=\"1-2-SQL的解析预处理及生成执行计划（重要）\"><a href=\"#1-2-SQL的解析预处理及生成执行计划（重要）\" class=\"headerlink\" title=\"1.2 SQL的解析预处理及生成执行计划（重要）\"></a>1.2 SQL的解析预处理及生成执行计划（<strong><code>重要</code></strong>）</h2><h3 id=\"1-2-1-查询过程描述（重点！！！）\"><a href=\"#1-2-1-查询过程描述（重点！！！）\" class=\"headerlink\" title=\"1.2.1 查询过程描述（重点！！！）\"></a>1.2.1 查询过程描述（<strong><code>重点！！！</code></strong>）</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5dc87722917e561f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><a href=\"https://processon.com/chart_image/5aab1fcbe4b0f68cc019053a.png?_=1521169284173\" target=\"_blank\" rel=\"noopener\"><strong>上图原文连接</strong></a></p>\n<h4 id=\"通过上图可以清晰的了解到MySql查询执行的大致过程：\"><a href=\"#通过上图可以清晰的了解到MySql查询执行的大致过程：\" class=\"headerlink\" title=\"通过上图可以清晰的了解到MySql查询执行的大致过程：\"></a>通过上图可以清晰的了解到MySql查询执行的大致过程：</h4><ol>\n<li>发送<code>SQL</code>语句。</li>\n<li>查询缓存，如果命中缓存直接返回结果。</li>\n<li><code>SQL</code>解析，预处理，再由优化器生成对应的查询执行计划。</li>\n<li>执行查询，调用存储引擎API获取数据。</li>\n<li>返回结果。</li>\n</ol>\n<h3 id=\"1-2-2-查询缓存对性能的影响（建议关闭缓存）\"><a href=\"#1-2-2-查询缓存对性能的影响（建议关闭缓存）\" class=\"headerlink\" title=\"1.2.2 查询缓存对性能的影响（建议关闭缓存）\"></a>1.2.2 查询缓存对性能的影响（<strong>建议关闭缓存</strong>）</h3><p><strong>第一阶段：</strong><br><strong>相关配置参数：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query_cache_type # 设置查询缓存是否可用</span><br><span class=\"line\">query_cache_size # 设置查询缓存的内存大小</span><br><span class=\"line\">query_cache_limit # 设置查询缓存可用的存储最大值（加上sql_no_cache可以提高效率）</span><br><span class=\"line\">query_cache_wlock_invalidate # 设置数据表被锁后是否返回缓存中的数据</span><br><span class=\"line\">query_cache_min_res_unit # 设置查询缓存分配的内存块的最小单</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>缓存查找是利用对大小写敏感的<code>哈希查找</code>来实现的</strong>，Hash查找只能进行全值查找（sql完全一致），如果缓存命中，检查用户权限，如果权限允许，直接返回，查询不被解析，也不会生成查询计划。</p>\n</blockquote>\n<h4 id=\"在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query-cache-type设置为off-query-cache-size设置为0。\"><a href=\"#在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query-cache-type设置为off-query-cache-size设置为0。\" class=\"headerlink\" title=\"在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁。将query_cache_type设置为off,query_cache_size设置为0。\"></a><strong><code>在一个读写比较频繁的系统中，建议关闭缓存，因为缓存更新会加锁</code></strong>。将<code>query_cache_type</code>设置为<code>off</code>,<code>query_cache_size</code>设置为<code>0</code>。</h4><h3 id=\"1-2-3-第二阶段：MySQL依照执行计划和存储引擎进行交互\"><a href=\"#1-2-3-第二阶段：MySQL依照执行计划和存储引擎进行交互\" class=\"headerlink\" title=\"1.2.3 第二阶段：MySQL依照执行计划和存储引擎进行交互\"></a>1.2.3 <strong>第二阶段：</strong>MySQL依照执行计划和存储引擎进行交互</h3><p>  <strong>这个阶段包括了多个子过程：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bb44338f81085e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b8b416a6222bf5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fe5d84ef10a6fa4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\"><a href=\"#一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\" class=\"headerlink\" title=\"一条查询可以有多种查询方式，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，这也就是索引不能太多的原因。\"></a><strong><code>一条查询可以有多种查询方式</code></strong>，查询优化器会对每一种查询方式的（存储引擎）统计信息进行比较，找到成本最低的查询方式，<strong><code>这也就是索引不能太多的原因</code></strong>。</h4><h2 id=\"1-3-会造成MySQL生成错误的执行计划的原因\"><a href=\"#1-3-会造成MySQL生成错误的执行计划的原因\" class=\"headerlink\" title=\"1.3 会造成MySQL生成错误的执行计划的原因\"></a>1.3 会造成MySQL生成错误的执行计划的原因</h2><p>1、统计信息不准确<br>2、成本估算与实际的执行计划成本不同</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-75fdacdb25eccc88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>3、给出的最优执行计划与估计的不同</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ddff26864a8687f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>4、MySQL不考虑并发查询<br>5、会基于固定规则生成执行计划<br>6、MySQL不考虑不受其控制的成本，如存储过程，用户自定义函数</p>\n<h2 id=\"1-4-MySQL优化器可优化的SQL类型\"><a href=\"#1-4-MySQL优化器可优化的SQL类型\" class=\"headerlink\" title=\"1.4 MySQL优化器可优化的SQL类型\"></a>1.4 MySQL优化器可优化的SQL类型</h2><blockquote>\n<p>查询优化器：对查询进行优化并查询mysql认为的成本最低的执行计划。 为了生成最优的执行计划，查询优化器会对一些查询进行改写</p>\n</blockquote>\n<p>  可以优化的sql类型</p>\n<p>  1、重新定义表的关联顺序；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2d05194901f2f95e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  2、将外连接转换为内连接；</p>\n<p>  3、使用等价变换规则；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e415cccfa34dd5f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  4、优化count(),min(),max()；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-409bf29b8984f5b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  5、将一个表达式转换为常数；<br>  6、子查询优化；</p>\n<p>  <img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b8e7d1a457ebd7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>  7、提前终止查询，如发现一个不成立条件(如<code>where id = -1</code>)，立即返回一个空结果；</p>\n<p>  8、对in()条件进行优化；</p>\n<h2 id=\"1-5-查询处理各个阶段所需要的时间\"><a href=\"#1-5-查询处理各个阶段所需要的时间\" class=\"headerlink\" title=\"1.5 查询处理各个阶段所需要的时间\"></a>1.5 查询处理各个阶段所需要的时间</h2><h3 id=\"1-5-1-使用profile-目前已经不推荐使用了\"><a href=\"#1-5-1-使用profile-目前已经不推荐使用了\" class=\"headerlink\" title=\"1.5.1 使用profile(目前已经不推荐使用了)\"></a>1.5.1 使用profile(目前已经不推荐使用了)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set profiling = 1; #启动profile,这是一个session级的配制执行查询</span><br><span class=\"line\"></span><br><span class=\"line\">show profiles; # 查询每一个查询所消耗的总时间的信息</span><br><span class=\"line\"></span><br><span class=\"line\">show profiles for query N; # 查询的每个阶段所消耗的时间</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-5-2-performance-schema是5-5引入的一个性能分析引擎（5-5版本时期开销比较大）\"><a href=\"#1-5-2-performance-schema是5-5引入的一个性能分析引擎（5-5版本时期开销比较大）\" class=\"headerlink\" title=\"1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）\"></a>1.5.2 performance_schema是5.5引入的一个性能分析引擎（5.5版本时期开销比较大）</h3><p>启动监控和历史记录表：<code>use performance_schema</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update setup_instruments set enabled=&apos;YES&apos;,TIME = &apos;YES&apos; WHERE NAME LIKE &apos;stage%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">update set_consumbers set enabled=&apos;YES&apos;,TIME = &apos;YES&apos; WHERE NAME LIKE &apos;event%&apos;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5a68e6460cfd4b93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d85ebe9b118c2b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"1-6-特定SQL的查询优化\"><a href=\"#1-6-特定SQL的查询优化\" class=\"headerlink\" title=\"1.6 特定SQL的查询优化\"></a>1.6 特定SQL的查询优化</h2><h3 id=\"1-6-1-大表的数据修改\"><a href=\"#1-6-1-大表的数据修改\" class=\"headerlink\" title=\"1.6.1 大表的数据修改\"></a>1.6.1 大表的数据修改</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7308bd9300d15310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c3ffa1d09d4c9f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"1-6-2-大表的结构修改\"><a href=\"#1-6-2-大表的结构修改\" class=\"headerlink\" title=\"1.6.2 大表的结构修改\"></a>1.6.2 大表的结构修改</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ba5584f9907539cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ol>\n<li>利用主从复制，先对从服务器进入修改，然后主从切换</li>\n<li>（推荐）</li>\n</ol>\n<blockquote>\n<p>添加一个新表（修改后的结构），老表数据导入新表，老表建立触发器，修改数据同步到新表， 老表加一个排它锁（重命名）， 新表重命名， 删除老表。</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ca18587e28be637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>修改语句这个样子：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table sbtest4 modify c varchar(150) not null default &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>利用工具修改：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7239a84cec0180b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"1-6-3-优化not-in-和-lt-gt-查询\"><a href=\"#1-6-3-优化not-in-和-lt-gt-查询\" class=\"headerlink\" title=\"## 1.6.3 优化not in 和 &lt;&gt; 查询\"></a>## 1.6.3 优化not in 和 &lt;&gt; 查询</h1><p>  <strong>子查询改写为关联查询：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5e4c1522cdb5a9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h1 id=\"二、分库分表\"><a href=\"#二、分库分表\" class=\"headerlink\" title=\"二、分库分表\"></a>二、分库分表</h1><h2 id=\"2-1-分库分表的几种方式\"><a href=\"#2-1-分库分表的几种方式\" class=\"headerlink\" title=\"2.1 分库分表的几种方式\"></a>2.1 分库分表的几种方式</h2><blockquote>\n<p>分担读负载 可通过 一主多从，升级硬件来解决。</p>\n</blockquote>\n<h3 id=\"2-1-1-把一个实例中的多个数据库拆分到不同实例（集群）\"><a href=\"#2-1-1-把一个实例中的多个数据库拆分到不同实例（集群）\" class=\"headerlink\" title=\"2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）\"></a>2.1.1 把一个实例中的多个数据库拆分到不同实例（集群）</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-da7140ceb6ffa592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<pre><code>**拆分简单,不允许跨库。但并不能减少写负载。**\n</code></pre><h3 id=\"2-1-2-把一个库中的表分离到不同的数据库中\"><a href=\"#2-1-2-把一个库中的表分离到不同的数据库中\" class=\"headerlink\" title=\"2.1.2 把一个库中的表分离到不同的数据库中\"></a>2.1.2 把一个库中的表分离到不同的数据库中</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f3ff87b0f2ee2b0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<pre><code>**该方式只能在一定时间内减少写压力。**\n\n以上两种方式只能暂时解决读写性能问题。\n</code></pre><h3 id=\"2-1-3-数据库分片\"><a href=\"#2-1-3-数据库分片\" class=\"headerlink\" title=\"2.1.3 数据库分片\"></a>2.1.3 数据库分片</h3><blockquote>\n<p>对一个库中的相关表进行水平拆分到不同实例的数据库中</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6ff65dacf21a21f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"2-1-3-1-如何选择分区键\"><a href=\"#2-1-3-1-如何选择分区键\" class=\"headerlink\" title=\"2.1.3.1 如何选择分区键\"></a>2.1.3.1 如何选择分区键</h4><ol>\n<li>分区键要能尽可能避免跨分区查询的发生</li>\n<li>分区键要尽可能使各个分区中的数据平均</li>\n</ol>\n<h4 id=\"2-1-3-2-分片中如何生成全局唯一ID\"><a href=\"#2-1-3-2-分片中如何生成全局唯一ID\" class=\"headerlink\" title=\"2.1.3.2 分片中如何生成全局唯一ID\"></a>2.1.3.2 分片中如何生成全局唯一ID</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-82271ac4944e9cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"扩展：表的垂直拆分和水平拆分\"><a href=\"#扩展：表的垂直拆分和水平拆分\" class=\"headerlink\" title=\"扩展：表的垂直拆分和水平拆分\"></a><a href=\"https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39326\" target=\"_blank\" rel=\"noopener\"><strong>扩展：表的垂直拆分和水平拆分</strong></a></h4>"},{"title":"mysql优化","date":"2020-03-16T13:57:47.000Z","_content":"\n\n# 一、什么影响了数据库查询速度\n\n## 1.1 影响数据库查询速度的四个因素\n![](https://upload-images.jianshu.io/upload_images/14597179-d74c8bfa52110257.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 1.2 风险分析\n\n> **QPS：**`Queries Per Second`意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。\n\n> **TPS：**是`TransactionsPerSecond`的缩写，也就是事务数/秒。它是软件测试结果的测量单位。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。\n\n>  **Tips：**最好不要在主库上数据库备份，大型活动前取消这样的计划。\n\n1.  效率低下的`sql`：超高的`QPS`与`TPS`。\n2.  大量的并发：数据连接数被占满（`max_connection`默认`100`，一般把连接数设置得大一些）。\n    并发量:同一时刻数据库服务器处理的请求数量\n3.  超高的`CPU`使用率：`CPU`资源耗尽出现宕机。\n4.  磁盘`IO`：磁盘`IO`性能突然下降、大量消耗磁盘性能的计划任务。解决：更快磁盘设备、调整计划任务、做好磁盘维护。\n\n## 1.3 网卡流量：如何避免无法连接数据库的情况\n\n1.  减少从服务器的数量（从服务器会从主服务器复制日志）\n2.  进行分级缓存（避免前端大量缓存失效）\n3.  避免使用`select *` 进行查询\n4.  分离业务网络和服务器网络\n\n## 1.4 大表带来的问题（**`重要`**）\n\n### 1.4.1 大表的特点\n\n1.  记录行数巨大，单表超千万\n2.  表数据文件巨大，超过`10`个`G`\n\n### 1.4.2 大表的危害\n\n1.慢查询：**很难在短时间内过滤出需要的数据**\n    查询字区分度低 -> 要在大数据量的表中筛选出来其中一部分数据会产生大量的磁盘`io` -> 降低磁盘效率\n\n2.对`DDL`影响：\n\n**建立索引需要很长时间：**\n\n*   `MySQL -v<5.5` 建立索引会锁表\n*   `MySQL -v>=5.5` 建立索引会造成主从延迟（`mysql`建立索引，先在组上执行，再在库上执行）\n\n    **修改表结构需要长时间的锁表：**会造成长时间的主从延迟('480秒延迟')\n\n### 1.4.3 如何处理数据库上的大表\n\n> 分库分表把一张大表分成多个小表\n\n**难点：**\n\n1.  分表主键的选择\n2.  分表后跨分区数据的查询和统计\n\n## 1.5 大事务带来的问题（**`重要`**）\n\n### 1.5.1 什么是事务\n\n![](https://upload-images.jianshu.io/upload_images/14597179-1e087ef5ad797527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 1.5.2事务的`ACID`属性\n\n> 1、原子性（`atomicity`)：全部成功，全部回滚失败。银行存取款。\n\n> 2、一致性（consistent)：银行转账的总金额不变。\n\n> 3、隔离性（isolation)：\n\n**隔离性等级：**\n\n*   未提交读(`READ UNCOMMITED`) **脏读**,两个事务之间互相可见；-- `存在脏读、不可重复读、幻读的问题`\n*   已提交读(`READ COMMITED`)符合隔离性的基本概念,一个事务进行时，其它已提交的`事物`对于该事务是可见的，即可以获取其它事务提交的数据（**不可重复读**）。-- `解决脏读的问题`，存在不可重复读、幻读的问题。\n*   可重复读(`REPEATABLE READ`) **`InnoDB的默认隔离等级`**。事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的！ -- mysql 默认级别，`解决脏读、不可重复读的问题`，存在幻读的问题。使用 MVCC（多版本并发控制，提高并发，不加锁）机制 实现可重复读。**`But，MySQL在可重复读级别已经解决幻读，插不进数据，有间隙锁。`**\n*   可串行化（`SERIALIZABLE`） 在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发是可使用。 -- `解决脏读、不可重复读、幻读`，可保证事务安全，但完全串行执行，性能最低。\n\n```\n不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。\n\n也就是说，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。\n\n幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。\n\n也就是说，当前事务读第一次取到的数据比后来读取到数据条目少。\n\n不可重复读和幻读比较：\n两者有些相似，但是前者针对的是update或delete，后者针对的insert。\n```\n\n    **查看系统的事务隔离级别：**`show variables like '%iso%'`;\n    **开启一个新事务：**`begin`;\n    **提交一个事务：**`commit`;\n    **修改事物的隔离级别：**`set session tx_isolation='read-committed'`;\n\n> 4、持久性(`DURABILITY`)：从数据库的角度的持久性，磁盘损坏就不行了\n\n![](https://upload-images.jianshu.io/upload_images/14597179-aabe6d772ae4b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n`redo log`机制保证事务更新的**一致性**和**持久性**\n\n## 1.5.3 大事务\n\n> 运行时间长，操作数据比较多的事务；\n\n**风险：锁定数据太多，回滚时间长，执行时间长。**\n\n1.  锁定太多数据，造成大量阻塞和锁超时；\n2.  回滚时所需时间比较长，且数据仍然会处于锁定；\n3.  如果执行时间长，将造成主从延迟，因为只有当主服务器全部执行完写入日志时，从服务器才会开始进行同步，造成延迟。\n\n    **解决思路：**\n\n1.  避免一次处理太多数据，可以分批次处理；\n2.  移出不必要的`SELECT`操作，保证事务中只有必要的写操作。\n\n# 二、什么影响了MySQL性能（**`非常重要`**）\n\n## 2.1 影响性能的几个方面\n\n1.  服务器硬件。\n2.  服务器系统（系统参数优化）。\n3.  **存储引擎**。\n    `MyISAM`： 不支持事务，表级锁。\n    `InnoDB`: 支持事务，支持行级锁，事务`ACID`。\n4.  **数据库参数配置。**\n5.  **`数据库结构设计和SQL语句。（重点优化）`**\n\n## 2.2 MySQL体系结构\n\n**分三层：客户端->服务层->存储引擎**\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-99f80e9cefb4d112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n1.  `MySQL`是**`插件式的存储引擎`**，其中存储引擎分很多种。只要实现符合mysql存储引擎的接口，可以开发自己的存储引擎!\n2.  所有跨存储引擎的功能都是在服务层实现的。\n3.  MySQL的**存储引擎是针对表的，不是针对库的**。也就是说在一个数据库中可以使用不同的存储引擎。但是不建议这样做。\n\n## 2.3 InnoDB存储引擎\n\n`MySQL5.5`及之后版本**默认的存储引擎**：`InnoDB`。\n\n### 2.3.1 InnoDB使用表空间进行数据存储。\n\n`show variables like 'innodb_file_per_table`\n\n  如果innodb_file_per_table 为 ON 将建立独立的表空间，文件为tablename.ibd；\n\n  如果innodb_file_per_table 为 OFF 将数据存储到系统的共享表空间，文件为ibdataX（X为从1开始的整数）；\n\n  `.frm` ：是服务器层面产生的文件，类似服务器层的数据字典，**记录表结构**。\n\n### 2.3.2 (MySQL5.5默认)系统表空间与(`MySQL5.6`及以后默认)独立表空间\n\n1.1 系统表空间无法简单的收缩文件大小，造成空间浪费，并会产生大量的磁盘碎片。\n1.2 独立表空间可以通过`optimeze table` 收缩系统文件，不需要重启服务器也不会影响对表的正常访问。\n2.1 如果对多个表进行刷新时，实际上是顺序进行的，会产生IO瓶颈。\n2.2 独立表空间可以同时向多个文件刷新数据。\n\n**强烈建立对Innodb 使用独立表空间，优化什么的更方便，可控。**\n\n### 2.3.3 系统表空间的表转移到独立表空间中的方法\n\n1、使用mysqldump 导出所有数据库数据（存储过程、触发器、计划任务一起都要导出 ）可以在从服务器上操作。\n\n2、停止MYsql 服务器，修改参数（my.cnf加入innodb_file_per_table），并删除Inoodb相关文件（可以重建Data目录）。\n\n3、重启MYSQL，并重建Innodb系统表空间。\n\n4、 重新导入数据。\n\n**或者** `Alter table` 同样可以的转移，但是无法回收系统表空间中占用的空间。\n\n## 2.4 InnoDB存储引擎的特性\n\n### 2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log\n\n1.  `Innodb` 是一种**事务性存储引擎**。\n2.  完全支持事务的`ACID`特性。\n3.  支持事务所需要的两个特殊日志类型：`Redo Log` 和`Undo Log`\n\n    **Redo Log：**实现事务的持久性(已提交的事务)。\n    **Undo Log：**未提交的事务，独立于表空间，需要随机访问，可以存储在高性能io设备上。\n\n> `Undo`日志记录某数据被修改前的值，可以用来在事务失败时进行`rollback`；`Redo`日志记录某数据块被修改后的值，可以用来恢复未写入`data file`的已成功事务更新的数据。\n\n### 2.4.2 特性二：支持行级锁\n\n1.  InnoDB支持行级锁。\n2.  行级锁可以最大程度地支持并发。\n3.  行级锁是由存储引擎层实现的。\n\n## 2.5 什么是锁\n\n### 2.5.1 锁\n\n![](https://upload-images.jianshu.io/upload_images/14597179-8ef5d670b0aa9fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 2.5.2 锁类型\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-ed1432c2ca6a86b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n```\nS锁（读锁）： select ... lock in share mode\nX锁（写锁）：select ... for update (update、delete、)\n```\n\n### 2.5.3 锁的粒度\n\nMySQL的事务支持**不是绑定在MySQL服务器本身**，**`而是与存储引擎相关`**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-69db7a6633cc9465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将**table_name**加表级锁命令：`lock table table_name write`; **`写锁会阻塞其它用户对该表的‘读写’操作，直到`**写锁被释放：`unlock tables`；\n\n1.  **锁的开销越大，粒度越小，并发度越高。**\n2.  表级锁通常是在服务器层实现的。\n3.  行级锁是存储引擎层实现的。innodb的锁机制，服务器层是不知道的\n\n### 2.5.4 锁的分类\n\n（1）悲观锁\n\n总是假设最坏的情况，每次拿数据都认为别人会修改数据，所以要加锁，别人只能等待，直到我释放锁才能拿到锁；数据库的行锁、表锁、读锁、写锁都是这种方式，java中的synchronized和ReentrantLock也是悲观锁的思想。\n\n（2）乐观锁\n\n总是假设最好的情况，每次拿数据都认为别人不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有人修改过；一般基于版本号机制实现。\n\n（3）使用场景\n\n乐观锁适用于读多写少的情况，即冲突很少发生；如果是多写的情况，应用会不断重试，反而会降低系统性能，这种情况最好用悲观锁，因为等待到锁被释放后，可以立即获得锁进行操作。\n\n拓展： [(1)图解悲观锁和乐观锁](http://www.imooc.com/article/285147)\n[(2)什么是乐观锁与悲观锁？](https://www.sohu.com/a/306900091_250298)\n\n### 2.5.5 阻塞和死锁\n（1）阻塞是由于资源不足引起的排队等待现象。\n（2）死锁是由于两个对象在拥有一份资源的情况下申请另一份资源，而另一份资源恰好又是这两对象正持有的，导致两对象无法完成操作，且所持资源无法释放。\n\n## 2.6 如何选择正确的存储引擎\n\n**参考条件：**\n\n1.  事务\n2.  备份(`Innobd`免费在线备份)\n3.  崩溃恢复\n4.  存储引擎的特有特性\n\n**总结:****`Innodb`大法好。**\n**`注意:`**尽量别使用混合存储引擎，比如回滚会出问题在线热备问题。\n\n## 2.7 配置参数\n\n### 2.7.1 内存配置相关参数\n\n> 确定可以使用的内存上限。\n\n```\n内存的使用上限不能超过物理内存，否则容易造成内存溢出；（对于32位操作系统，MySQL只能试用3G以下的内存。）\n```\n\n> 确定MySQL的**每个连接`单独`**使用的内存。\n\n```\nsort_buffer_size #定义了每个线程排序缓存区的大小，MySQL在有查询、需要做排序操作时才会为每个缓冲区分配内存（直接分配该参数的全部内存）；\njoin_buffer_size #定义了每个线程所使用的连接缓冲区的大小，如果一个查询关联了多张表，MySQL会为每张表分配一个连接缓冲，导致一个查询产生了多个连接缓冲；\nread_buffer_size #定义了当对一张MyISAM进行全表扫描时所分配读缓冲池大小，MySQL有查询需要时会为其分配内存，其必须是4k的倍数；\nread_rnd_buffer_size #索引缓冲区大小，MySQL有查询需要时会为其分配内存，只会分配需要的大小。\n\n```\n\n**`注意：`**以上四个参数是为一个线程分配的，如果有100个连接，那么需要×100。\n\n> MySQL数据库实例：\n> \n> 　①MySQL是**`单进程多线程`**（而oracle是多进程），也就是说`MySQL`实例在系统上表现就是一个服务进程，即进程；\n> \n> 　②MySQL实例是线程和内存组成，实例才是真正用于操作数据库文件的；\n> \n> **一般情况下**一个实例操作一个或多个数据库；**集群情况下**多个实例操作一个或多个数据库。\n\n**如何为缓存池分配内存：**\n`Innodb_buffer_pool_size`，定义了Innodb所使用缓存池的大小，对其性能十分重要，必须足够大，但是过大时，使得Innodb 关闭时候需要更多时间把脏页从缓冲池中刷新到磁盘中；\n\n```\n总内存-（每个线程所需要的内存*连接数）-系统保留内存\n\n```\n\n`key_buffer_size`，定义了MyISAM所使用的缓存池的大小，由于数据是依赖存储操作系统缓存的，所以要为操作系统预留更大的内存空间；\n\n```\nselect sum(index_length) from information_schema.talbes where engine='myisam'\n```\n\n**注意：**即使开发使用的表全部是Innodb表，也要为MyISAM预留内存，因为MySQL系统使用的表仍然是MyISAM表。\n\n`max_connections` 控制允许的最大连接数， 一般2000更大。\n**不要使用外键约束保证数据的完整性。**\n\n## 2.8 性能优化顺序\n\n**从上到下：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-019a6a65da3fcb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/MySQL/mysql优化.md","raw":"\n---\ntitle: mysql优化\ndate: 2020-03-16 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n# 一、什么影响了数据库查询速度\n\n## 1.1 影响数据库查询速度的四个因素\n![](https://upload-images.jianshu.io/upload_images/14597179-d74c8bfa52110257.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 1.2 风险分析\n\n> **QPS：**`Queries Per Second`意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。\n\n> **TPS：**是`TransactionsPerSecond`的缩写，也就是事务数/秒。它是软件测试结果的测量单位。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。\n\n>  **Tips：**最好不要在主库上数据库备份，大型活动前取消这样的计划。\n\n1.  效率低下的`sql`：超高的`QPS`与`TPS`。\n2.  大量的并发：数据连接数被占满（`max_connection`默认`100`，一般把连接数设置得大一些）。\n    并发量:同一时刻数据库服务器处理的请求数量\n3.  超高的`CPU`使用率：`CPU`资源耗尽出现宕机。\n4.  磁盘`IO`：磁盘`IO`性能突然下降、大量消耗磁盘性能的计划任务。解决：更快磁盘设备、调整计划任务、做好磁盘维护。\n\n## 1.3 网卡流量：如何避免无法连接数据库的情况\n\n1.  减少从服务器的数量（从服务器会从主服务器复制日志）\n2.  进行分级缓存（避免前端大量缓存失效）\n3.  避免使用`select *` 进行查询\n4.  分离业务网络和服务器网络\n\n## 1.4 大表带来的问题（**`重要`**）\n\n### 1.4.1 大表的特点\n\n1.  记录行数巨大，单表超千万\n2.  表数据文件巨大，超过`10`个`G`\n\n### 1.4.2 大表的危害\n\n1.慢查询：**很难在短时间内过滤出需要的数据**\n    查询字区分度低 -> 要在大数据量的表中筛选出来其中一部分数据会产生大量的磁盘`io` -> 降低磁盘效率\n\n2.对`DDL`影响：\n\n**建立索引需要很长时间：**\n\n*   `MySQL -v<5.5` 建立索引会锁表\n*   `MySQL -v>=5.5` 建立索引会造成主从延迟（`mysql`建立索引，先在组上执行，再在库上执行）\n\n    **修改表结构需要长时间的锁表：**会造成长时间的主从延迟('480秒延迟')\n\n### 1.4.3 如何处理数据库上的大表\n\n> 分库分表把一张大表分成多个小表\n\n**难点：**\n\n1.  分表主键的选择\n2.  分表后跨分区数据的查询和统计\n\n## 1.5 大事务带来的问题（**`重要`**）\n\n### 1.5.1 什么是事务\n\n![](https://upload-images.jianshu.io/upload_images/14597179-1e087ef5ad797527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 1.5.2事务的`ACID`属性\n\n> 1、原子性（`atomicity`)：全部成功，全部回滚失败。银行存取款。\n\n> 2、一致性（consistent)：银行转账的总金额不变。\n\n> 3、隔离性（isolation)：\n\n**隔离性等级：**\n\n*   未提交读(`READ UNCOMMITED`) **脏读**,两个事务之间互相可见；-- `存在脏读、不可重复读、幻读的问题`\n*   已提交读(`READ COMMITED`)符合隔离性的基本概念,一个事务进行时，其它已提交的`事物`对于该事务是可见的，即可以获取其它事务提交的数据（**不可重复读**）。-- `解决脏读的问题`，存在不可重复读、幻读的问题。\n*   可重复读(`REPEATABLE READ`) **`InnoDB的默认隔离等级`**。事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的！ -- mysql 默认级别，`解决脏读、不可重复读的问题`，存在幻读的问题。使用 MVCC（多版本并发控制，提高并发，不加锁）机制 实现可重复读。**`But，MySQL在可重复读级别已经解决幻读，插不进数据，有间隙锁。`**\n*   可串行化（`SERIALIZABLE`） 在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发是可使用。 -- `解决脏读、不可重复读、幻读`，可保证事务安全，但完全串行执行，性能最低。\n\n```\n不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。\n\n也就是说，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。\n\n幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。\n\n也就是说，当前事务读第一次取到的数据比后来读取到数据条目少。\n\n不可重复读和幻读比较：\n两者有些相似，但是前者针对的是update或delete，后者针对的insert。\n```\n\n    **查看系统的事务隔离级别：**`show variables like '%iso%'`;\n    **开启一个新事务：**`begin`;\n    **提交一个事务：**`commit`;\n    **修改事物的隔离级别：**`set session tx_isolation='read-committed'`;\n\n> 4、持久性(`DURABILITY`)：从数据库的角度的持久性，磁盘损坏就不行了\n\n![](https://upload-images.jianshu.io/upload_images/14597179-aabe6d772ae4b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n`redo log`机制保证事务更新的**一致性**和**持久性**\n\n## 1.5.3 大事务\n\n> 运行时间长，操作数据比较多的事务；\n\n**风险：锁定数据太多，回滚时间长，执行时间长。**\n\n1.  锁定太多数据，造成大量阻塞和锁超时；\n2.  回滚时所需时间比较长，且数据仍然会处于锁定；\n3.  如果执行时间长，将造成主从延迟，因为只有当主服务器全部执行完写入日志时，从服务器才会开始进行同步，造成延迟。\n\n    **解决思路：**\n\n1.  避免一次处理太多数据，可以分批次处理；\n2.  移出不必要的`SELECT`操作，保证事务中只有必要的写操作。\n\n# 二、什么影响了MySQL性能（**`非常重要`**）\n\n## 2.1 影响性能的几个方面\n\n1.  服务器硬件。\n2.  服务器系统（系统参数优化）。\n3.  **存储引擎**。\n    `MyISAM`： 不支持事务，表级锁。\n    `InnoDB`: 支持事务，支持行级锁，事务`ACID`。\n4.  **数据库参数配置。**\n5.  **`数据库结构设计和SQL语句。（重点优化）`**\n\n## 2.2 MySQL体系结构\n\n**分三层：客户端->服务层->存储引擎**\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-99f80e9cefb4d112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n1.  `MySQL`是**`插件式的存储引擎`**，其中存储引擎分很多种。只要实现符合mysql存储引擎的接口，可以开发自己的存储引擎!\n2.  所有跨存储引擎的功能都是在服务层实现的。\n3.  MySQL的**存储引擎是针对表的，不是针对库的**。也就是说在一个数据库中可以使用不同的存储引擎。但是不建议这样做。\n\n## 2.3 InnoDB存储引擎\n\n`MySQL5.5`及之后版本**默认的存储引擎**：`InnoDB`。\n\n### 2.3.1 InnoDB使用表空间进行数据存储。\n\n`show variables like 'innodb_file_per_table`\n\n  如果innodb_file_per_table 为 ON 将建立独立的表空间，文件为tablename.ibd；\n\n  如果innodb_file_per_table 为 OFF 将数据存储到系统的共享表空间，文件为ibdataX（X为从1开始的整数）；\n\n  `.frm` ：是服务器层面产生的文件，类似服务器层的数据字典，**记录表结构**。\n\n### 2.3.2 (MySQL5.5默认)系统表空间与(`MySQL5.6`及以后默认)独立表空间\n\n1.1 系统表空间无法简单的收缩文件大小，造成空间浪费，并会产生大量的磁盘碎片。\n1.2 独立表空间可以通过`optimeze table` 收缩系统文件，不需要重启服务器也不会影响对表的正常访问。\n2.1 如果对多个表进行刷新时，实际上是顺序进行的，会产生IO瓶颈。\n2.2 独立表空间可以同时向多个文件刷新数据。\n\n**强烈建立对Innodb 使用独立表空间，优化什么的更方便，可控。**\n\n### 2.3.3 系统表空间的表转移到独立表空间中的方法\n\n1、使用mysqldump 导出所有数据库数据（存储过程、触发器、计划任务一起都要导出 ）可以在从服务器上操作。\n\n2、停止MYsql 服务器，修改参数（my.cnf加入innodb_file_per_table），并删除Inoodb相关文件（可以重建Data目录）。\n\n3、重启MYSQL，并重建Innodb系统表空间。\n\n4、 重新导入数据。\n\n**或者** `Alter table` 同样可以的转移，但是无法回收系统表空间中占用的空间。\n\n## 2.4 InnoDB存储引擎的特性\n\n### 2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log\n\n1.  `Innodb` 是一种**事务性存储引擎**。\n2.  完全支持事务的`ACID`特性。\n3.  支持事务所需要的两个特殊日志类型：`Redo Log` 和`Undo Log`\n\n    **Redo Log：**实现事务的持久性(已提交的事务)。\n    **Undo Log：**未提交的事务，独立于表空间，需要随机访问，可以存储在高性能io设备上。\n\n> `Undo`日志记录某数据被修改前的值，可以用来在事务失败时进行`rollback`；`Redo`日志记录某数据块被修改后的值，可以用来恢复未写入`data file`的已成功事务更新的数据。\n\n### 2.4.2 特性二：支持行级锁\n\n1.  InnoDB支持行级锁。\n2.  行级锁可以最大程度地支持并发。\n3.  行级锁是由存储引擎层实现的。\n\n## 2.5 什么是锁\n\n### 2.5.1 锁\n\n![](https://upload-images.jianshu.io/upload_images/14597179-8ef5d670b0aa9fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 2.5.2 锁类型\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-ed1432c2ca6a86b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n```\nS锁（读锁）： select ... lock in share mode\nX锁（写锁）：select ... for update (update、delete、)\n```\n\n### 2.5.3 锁的粒度\n\nMySQL的事务支持**不是绑定在MySQL服务器本身**，**`而是与存储引擎相关`**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-69db7a6633cc9465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将**table_name**加表级锁命令：`lock table table_name write`; **`写锁会阻塞其它用户对该表的‘读写’操作，直到`**写锁被释放：`unlock tables`；\n\n1.  **锁的开销越大，粒度越小，并发度越高。**\n2.  表级锁通常是在服务器层实现的。\n3.  行级锁是存储引擎层实现的。innodb的锁机制，服务器层是不知道的\n\n### 2.5.4 锁的分类\n\n（1）悲观锁\n\n总是假设最坏的情况，每次拿数据都认为别人会修改数据，所以要加锁，别人只能等待，直到我释放锁才能拿到锁；数据库的行锁、表锁、读锁、写锁都是这种方式，java中的synchronized和ReentrantLock也是悲观锁的思想。\n\n（2）乐观锁\n\n总是假设最好的情况，每次拿数据都认为别人不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有人修改过；一般基于版本号机制实现。\n\n（3）使用场景\n\n乐观锁适用于读多写少的情况，即冲突很少发生；如果是多写的情况，应用会不断重试，反而会降低系统性能，这种情况最好用悲观锁，因为等待到锁被释放后，可以立即获得锁进行操作。\n\n拓展： [(1)图解悲观锁和乐观锁](http://www.imooc.com/article/285147)\n[(2)什么是乐观锁与悲观锁？](https://www.sohu.com/a/306900091_250298)\n\n### 2.5.5 阻塞和死锁\n（1）阻塞是由于资源不足引起的排队等待现象。\n（2）死锁是由于两个对象在拥有一份资源的情况下申请另一份资源，而另一份资源恰好又是这两对象正持有的，导致两对象无法完成操作，且所持资源无法释放。\n\n## 2.6 如何选择正确的存储引擎\n\n**参考条件：**\n\n1.  事务\n2.  备份(`Innobd`免费在线备份)\n3.  崩溃恢复\n4.  存储引擎的特有特性\n\n**总结:****`Innodb`大法好。**\n**`注意:`**尽量别使用混合存储引擎，比如回滚会出问题在线热备问题。\n\n## 2.7 配置参数\n\n### 2.7.1 内存配置相关参数\n\n> 确定可以使用的内存上限。\n\n```\n内存的使用上限不能超过物理内存，否则容易造成内存溢出；（对于32位操作系统，MySQL只能试用3G以下的内存。）\n```\n\n> 确定MySQL的**每个连接`单独`**使用的内存。\n\n```\nsort_buffer_size #定义了每个线程排序缓存区的大小，MySQL在有查询、需要做排序操作时才会为每个缓冲区分配内存（直接分配该参数的全部内存）；\njoin_buffer_size #定义了每个线程所使用的连接缓冲区的大小，如果一个查询关联了多张表，MySQL会为每张表分配一个连接缓冲，导致一个查询产生了多个连接缓冲；\nread_buffer_size #定义了当对一张MyISAM进行全表扫描时所分配读缓冲池大小，MySQL有查询需要时会为其分配内存，其必须是4k的倍数；\nread_rnd_buffer_size #索引缓冲区大小，MySQL有查询需要时会为其分配内存，只会分配需要的大小。\n\n```\n\n**`注意：`**以上四个参数是为一个线程分配的，如果有100个连接，那么需要×100。\n\n> MySQL数据库实例：\n> \n> 　①MySQL是**`单进程多线程`**（而oracle是多进程），也就是说`MySQL`实例在系统上表现就是一个服务进程，即进程；\n> \n> 　②MySQL实例是线程和内存组成，实例才是真正用于操作数据库文件的；\n> \n> **一般情况下**一个实例操作一个或多个数据库；**集群情况下**多个实例操作一个或多个数据库。\n\n**如何为缓存池分配内存：**\n`Innodb_buffer_pool_size`，定义了Innodb所使用缓存池的大小，对其性能十分重要，必须足够大，但是过大时，使得Innodb 关闭时候需要更多时间把脏页从缓冲池中刷新到磁盘中；\n\n```\n总内存-（每个线程所需要的内存*连接数）-系统保留内存\n\n```\n\n`key_buffer_size`，定义了MyISAM所使用的缓存池的大小，由于数据是依赖存储操作系统缓存的，所以要为操作系统预留更大的内存空间；\n\n```\nselect sum(index_length) from information_schema.talbes where engine='myisam'\n```\n\n**注意：**即使开发使用的表全部是Innodb表，也要为MyISAM预留内存，因为MySQL系统使用的表仍然是MyISAM表。\n\n`max_connections` 控制允许的最大连接数， 一般2000更大。\n**不要使用外键约束保证数据的完整性。**\n\n## 2.8 性能优化顺序\n\n**从上到下：**\n\n![](https://upload-images.jianshu.io/upload_images/14597179-019a6a65da3fcb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"MySQL/mysql优化","published":1,"updated":"2020-04-11T14:52:15.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu4l000674ux928zk34z","content":"<h1 id=\"一、什么影响了数据库查询速度\"><a href=\"#一、什么影响了数据库查询速度\" class=\"headerlink\" title=\"一、什么影响了数据库查询速度\"></a>一、什么影响了数据库查询速度</h1><h2 id=\"1-1-影响数据库查询速度的四个因素\"><a href=\"#1-1-影响数据库查询速度的四个因素\" class=\"headerlink\" title=\"1.1 影响数据库查询速度的四个因素\"></a>1.1 影响数据库查询速度的四个因素</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d74c8bfa52110257.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"1-2-风险分析\"><a href=\"#1-2-风险分析\" class=\"headerlink\" title=\"1.2 风险分析\"></a>1.2 风险分析</h2><blockquote>\n<p><strong>QPS：</strong><code>Queries Per Second</code>意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p>\n</blockquote>\n<blockquote>\n<p><strong>TPS：</strong>是<code>TransactionsPerSecond</code>的缩写，也就是事务数/秒。它是软件测试结果的测量单位。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p>\n</blockquote>\n<blockquote>\n<p> <strong>Tips：</strong>最好不要在主库上数据库备份，大型活动前取消这样的计划。</p>\n</blockquote>\n<ol>\n<li>效率低下的<code>sql</code>：超高的<code>QPS</code>与<code>TPS</code>。</li>\n<li>大量的并发：数据连接数被占满（<code>max_connection</code>默认<code>100</code>，一般把连接数设置得大一些）。<br>并发量:同一时刻数据库服务器处理的请求数量</li>\n<li>超高的<code>CPU</code>使用率：<code>CPU</code>资源耗尽出现宕机。</li>\n<li>磁盘<code>IO</code>：磁盘<code>IO</code>性能突然下降、大量消耗磁盘性能的计划任务。解决：更快磁盘设备、调整计划任务、做好磁盘维护。</li>\n</ol>\n<h2 id=\"1-3-网卡流量：如何避免无法连接数据库的情况\"><a href=\"#1-3-网卡流量：如何避免无法连接数据库的情况\" class=\"headerlink\" title=\"1.3 网卡流量：如何避免无法连接数据库的情况\"></a>1.3 网卡流量：如何避免无法连接数据库的情况</h2><ol>\n<li>减少从服务器的数量（从服务器会从主服务器复制日志）</li>\n<li>进行分级缓存（避免前端大量缓存失效）</li>\n<li>避免使用<code>select *</code> 进行查询</li>\n<li>分离业务网络和服务器网络</li>\n</ol>\n<h2 id=\"1-4-大表带来的问题（重要）\"><a href=\"#1-4-大表带来的问题（重要）\" class=\"headerlink\" title=\"1.4 大表带来的问题（重要）\"></a>1.4 大表带来的问题（<strong><code>重要</code></strong>）</h2><h3 id=\"1-4-1-大表的特点\"><a href=\"#1-4-1-大表的特点\" class=\"headerlink\" title=\"1.4.1 大表的特点\"></a>1.4.1 大表的特点</h3><ol>\n<li>记录行数巨大，单表超千万</li>\n<li>表数据文件巨大，超过<code>10</code>个<code>G</code></li>\n</ol>\n<h3 id=\"1-4-2-大表的危害\"><a href=\"#1-4-2-大表的危害\" class=\"headerlink\" title=\"1.4.2 大表的危害\"></a>1.4.2 大表的危害</h3><p>1.慢查询：<strong>很难在短时间内过滤出需要的数据</strong><br>    查询字区分度低 -&gt; 要在大数据量的表中筛选出来其中一部分数据会产生大量的磁盘<code>io</code> -&gt; 降低磁盘效率</p>\n<p>2.对<code>DDL</code>影响：</p>\n<p><strong>建立索引需要很长时间：</strong></p>\n<ul>\n<li><code>MySQL -v&lt;5.5</code> 建立索引会锁表</li>\n<li><p><code>MySQL -v&gt;=5.5</code> 建立索引会造成主从延迟（<code>mysql</code>建立索引，先在组上执行，再在库上执行）</p>\n<p><strong>修改表结构需要长时间的锁表：</strong>会造成长时间的主从延迟(‘480秒延迟’)</p>\n</li>\n</ul>\n<h3 id=\"1-4-3-如何处理数据库上的大表\"><a href=\"#1-4-3-如何处理数据库上的大表\" class=\"headerlink\" title=\"1.4.3 如何处理数据库上的大表\"></a>1.4.3 如何处理数据库上的大表</h3><blockquote>\n<p>分库分表把一张大表分成多个小表</p>\n</blockquote>\n<p><strong>难点：</strong></p>\n<ol>\n<li>分表主键的选择</li>\n<li>分表后跨分区数据的查询和统计</li>\n</ol>\n<h2 id=\"1-5-大事务带来的问题（重要）\"><a href=\"#1-5-大事务带来的问题（重要）\" class=\"headerlink\" title=\"1.5 大事务带来的问题（重要）\"></a>1.5 大事务带来的问题（<strong><code>重要</code></strong>）</h2><h3 id=\"1-5-1-什么是事务\"><a href=\"#1-5-1-什么是事务\" class=\"headerlink\" title=\"1.5.1 什么是事务\"></a>1.5.1 什么是事务</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1e087ef5ad797527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"1-5-2事务的ACID属性\"><a href=\"#1-5-2事务的ACID属性\" class=\"headerlink\" title=\"1.5.2事务的ACID属性\"></a>1.5.2事务的<code>ACID</code>属性</h3><blockquote>\n<p>1、原子性（<code>atomicity</code>)：全部成功，全部回滚失败。银行存取款。</p>\n</blockquote>\n<blockquote>\n<p>2、一致性（consistent)：银行转账的总金额不变。</p>\n</blockquote>\n<blockquote>\n<p>3、隔离性（isolation)：</p>\n</blockquote>\n<p><strong>隔离性等级：</strong></p>\n<ul>\n<li>未提交读(<code>READ UNCOMMITED</code>) <strong>脏读</strong>,两个事务之间互相可见；– <code>存在脏读、不可重复读、幻读的问题</code></li>\n<li>已提交读(<code>READ COMMITED</code>)符合隔离性的基本概念,一个事务进行时，其它已提交的<code>事物</code>对于该事务是可见的，即可以获取其它事务提交的数据（<strong>不可重复读</strong>）。– <code>解决脏读的问题</code>，存在不可重复读、幻读的问题。</li>\n<li>可重复读(<code>REPEATABLE READ</code>) <strong><code>InnoDB的默认隔离等级</code></strong>。事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的！ – mysql 默认级别，<code>解决脏读、不可重复读的问题</code>，存在幻读的问题。使用 MVCC（多版本并发控制，提高并发，不加锁）机制 实现可重复读。<strong><code>But，MySQL在可重复读级别已经解决幻读，插不进数据，有间隙锁。</code></strong></li>\n<li>可串行化（<code>SERIALIZABLE</code>） 在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发是可使用。 – <code>解决脏读、不可重复读、幻读</code>，可保证事务安全，但完全串行执行，性能最低。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。</span><br><span class=\"line\"></span><br><span class=\"line\">幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说，当前事务读第一次取到的数据比后来读取到数据条目少。</span><br><span class=\"line\"></span><br><span class=\"line\">不可重复读和幻读比较：</span><br><span class=\"line\">两者有些相似，但是前者针对的是update或delete，后者针对的insert。</span><br></pre></td></tr></table></figure>\n<pre><code>**查看系统的事务隔离级别：**`show variables like &apos;%iso%&apos;`;\n**开启一个新事务：**`begin`;\n**提交一个事务：**`commit`;\n**修改事物的隔离级别：**`set session tx_isolation=&apos;read-committed&apos;`;\n</code></pre><blockquote>\n<p>4、持久性(<code>DURABILITY</code>)：从数据库的角度的持久性，磁盘损坏就不行了</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-aabe6d772ae4b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><code>redo log</code>机制保证事务更新的<strong>一致性</strong>和<strong>持久性</strong></p>\n<h2 id=\"1-5-3-大事务\"><a href=\"#1-5-3-大事务\" class=\"headerlink\" title=\"1.5.3 大事务\"></a>1.5.3 大事务</h2><blockquote>\n<p>运行时间长，操作数据比较多的事务；</p>\n</blockquote>\n<p><strong>风险：锁定数据太多，回滚时间长，执行时间长。</strong></p>\n<ol>\n<li>锁定太多数据，造成大量阻塞和锁超时；</li>\n<li>回滚时所需时间比较长，且数据仍然会处于锁定；</li>\n<li><p>如果执行时间长，将造成主从延迟，因为只有当主服务器全部执行完写入日志时，从服务器才会开始进行同步，造成延迟。</p>\n<p><strong>解决思路：</strong></p>\n</li>\n<li><p>避免一次处理太多数据，可以分批次处理；</p>\n</li>\n<li>移出不必要的<code>SELECT</code>操作，保证事务中只有必要的写操作。</li>\n</ol>\n<h1 id=\"二、什么影响了MySQL性能（非常重要）\"><a href=\"#二、什么影响了MySQL性能（非常重要）\" class=\"headerlink\" title=\"二、什么影响了MySQL性能（非常重要）\"></a>二、什么影响了MySQL性能（<strong><code>非常重要</code></strong>）</h1><h2 id=\"2-1-影响性能的几个方面\"><a href=\"#2-1-影响性能的几个方面\" class=\"headerlink\" title=\"2.1 影响性能的几个方面\"></a>2.1 影响性能的几个方面</h2><ol>\n<li>服务器硬件。</li>\n<li>服务器系统（系统参数优化）。</li>\n<li><strong>存储引擎</strong>。<br><code>MyISAM</code>： 不支持事务，表级锁。<br><code>InnoDB</code>: 支持事务，支持行级锁，事务<code>ACID</code>。</li>\n<li><strong>数据库参数配置。</strong></li>\n<li><strong><code>数据库结构设计和SQL语句。（重点优化）</code></strong></li>\n</ol>\n<h2 id=\"2-2-MySQL体系结构\"><a href=\"#2-2-MySQL体系结构\" class=\"headerlink\" title=\"2.2 MySQL体系结构\"></a>2.2 MySQL体系结构</h2><p><strong>分三层：客户端-&gt;服务层-&gt;存储引擎</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-99f80e9cefb4d112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ol>\n<li><code>MySQL</code>是<strong><code>插件式的存储引擎</code></strong>，其中存储引擎分很多种。只要实现符合mysql存储引擎的接口，可以开发自己的存储引擎!</li>\n<li>所有跨存储引擎的功能都是在服务层实现的。</li>\n<li>MySQL的<strong>存储引擎是针对表的，不是针对库的</strong>。也就是说在一个数据库中可以使用不同的存储引擎。但是不建议这样做。</li>\n</ol>\n<h2 id=\"2-3-InnoDB存储引擎\"><a href=\"#2-3-InnoDB存储引擎\" class=\"headerlink\" title=\"2.3 InnoDB存储引擎\"></a>2.3 InnoDB存储引擎</h2><p><code>MySQL5.5</code>及之后版本<strong>默认的存储引擎</strong>：<code>InnoDB</code>。</p>\n<h3 id=\"2-3-1-InnoDB使用表空间进行数据存储。\"><a href=\"#2-3-1-InnoDB使用表空间进行数据存储。\" class=\"headerlink\" title=\"2.3.1 InnoDB使用表空间进行数据存储。\"></a>2.3.1 InnoDB使用表空间进行数据存储。</h3><p><code>show variables like &#39;innodb_file_per_table</code></p>\n<p>  如果innodb_file_per_table 为 ON 将建立独立的表空间，文件为tablename.ibd；</p>\n<p>  如果innodb_file_per_table 为 OFF 将数据存储到系统的共享表空间，文件为ibdataX（X为从1开始的整数）；</p>\n<p>  <code>.frm</code> ：是服务器层面产生的文件，类似服务器层的数据字典，<strong>记录表结构</strong>。</p>\n<h3 id=\"2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间\"><a href=\"#2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间\" class=\"headerlink\" title=\"2.3.2 (MySQL5.5默认)系统表空间与(MySQL5.6及以后默认)独立表空间\"></a>2.3.2 (MySQL5.5默认)系统表空间与(<code>MySQL5.6</code>及以后默认)独立表空间</h3><p>1.1 系统表空间无法简单的收缩文件大小，造成空间浪费，并会产生大量的磁盘碎片。<br>1.2 独立表空间可以通过<code>optimeze table</code> 收缩系统文件，不需要重启服务器也不会影响对表的正常访问。<br>2.1 如果对多个表进行刷新时，实际上是顺序进行的，会产生IO瓶颈。<br>2.2 独立表空间可以同时向多个文件刷新数据。</p>\n<p><strong>强烈建立对Innodb 使用独立表空间，优化什么的更方便，可控。</strong></p>\n<h3 id=\"2-3-3-系统表空间的表转移到独立表空间中的方法\"><a href=\"#2-3-3-系统表空间的表转移到独立表空间中的方法\" class=\"headerlink\" title=\"2.3.3 系统表空间的表转移到独立表空间中的方法\"></a>2.3.3 系统表空间的表转移到独立表空间中的方法</h3><p>1、使用mysqldump 导出所有数据库数据（存储过程、触发器、计划任务一起都要导出 ）可以在从服务器上操作。</p>\n<p>2、停止MYsql 服务器，修改参数（my.cnf加入innodb_file_per_table），并删除Inoodb相关文件（可以重建Data目录）。</p>\n<p>3、重启MYSQL，并重建Innodb系统表空间。</p>\n<p>4、 重新导入数据。</p>\n<p><strong>或者</strong> <code>Alter table</code> 同样可以的转移，但是无法回收系统表空间中占用的空间。</p>\n<h2 id=\"2-4-InnoDB存储引擎的特性\"><a href=\"#2-4-InnoDB存储引擎的特性\" class=\"headerlink\" title=\"2.4 InnoDB存储引擎的特性\"></a>2.4 InnoDB存储引擎的特性</h2><h3 id=\"2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log\"><a href=\"#2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log\" class=\"headerlink\" title=\"2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log\"></a>2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log</h3><ol>\n<li><code>Innodb</code> 是一种<strong>事务性存储引擎</strong>。</li>\n<li>完全支持事务的<code>ACID</code>特性。</li>\n<li><p>支持事务所需要的两个特殊日志类型：<code>Redo Log</code> 和<code>Undo Log</code></p>\n<p><strong>Redo Log：</strong>实现事务的持久性(已提交的事务)。<br><strong>Undo Log：</strong>未提交的事务，独立于表空间，需要随机访问，可以存储在高性能io设备上。</p>\n</li>\n</ol>\n<blockquote>\n<p><code>Undo</code>日志记录某数据被修改前的值，可以用来在事务失败时进行<code>rollback</code>；<code>Redo</code>日志记录某数据块被修改后的值，可以用来恢复未写入<code>data file</code>的已成功事务更新的数据。</p>\n</blockquote>\n<h3 id=\"2-4-2-特性二：支持行级锁\"><a href=\"#2-4-2-特性二：支持行级锁\" class=\"headerlink\" title=\"2.4.2 特性二：支持行级锁\"></a>2.4.2 特性二：支持行级锁</h3><ol>\n<li>InnoDB支持行级锁。</li>\n<li>行级锁可以最大程度地支持并发。</li>\n<li>行级锁是由存储引擎层实现的。</li>\n</ol>\n<h2 id=\"2-5-什么是锁\"><a href=\"#2-5-什么是锁\" class=\"headerlink\" title=\"2.5 什么是锁\"></a>2.5 什么是锁</h2><h3 id=\"2-5-1-锁\"><a href=\"#2-5-1-锁\" class=\"headerlink\" title=\"2.5.1 锁\"></a>2.5.1 锁</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8ef5d670b0aa9fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"2-5-2-锁类型\"><a href=\"#2-5-2-锁类型\" class=\"headerlink\" title=\"2.5.2 锁类型\"></a>2.5.2 锁类型</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ed1432c2ca6a86b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S锁（读锁）： select ... lock in share mode</span><br><span class=\"line\">X锁（写锁）：select ... for update (update、delete、)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-3-锁的粒度\"><a href=\"#2-5-3-锁的粒度\" class=\"headerlink\" title=\"2.5.3 锁的粒度\"></a>2.5.3 锁的粒度</h3><p>MySQL的事务支持<strong>不是绑定在MySQL服务器本身</strong>，<strong><code>而是与存储引擎相关</code></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-69db7a6633cc9465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将<strong>table_name</strong>加表级锁命令：<code>lock table table_name write</code>; <strong><code>写锁会阻塞其它用户对该表的‘读写’操作，直到</code></strong>写锁被释放：<code>unlock tables</code>；</p>\n<ol>\n<li><strong>锁的开销越大，粒度越小，并发度越高。</strong></li>\n<li>表级锁通常是在服务器层实现的。</li>\n<li>行级锁是存储引擎层实现的。innodb的锁机制，服务器层是不知道的</li>\n</ol>\n<h3 id=\"2-5-4-锁的分类\"><a href=\"#2-5-4-锁的分类\" class=\"headerlink\" title=\"2.5.4 锁的分类\"></a>2.5.4 锁的分类</h3><p>（1）悲观锁</p>\n<p>总是假设最坏的情况，每次拿数据都认为别人会修改数据，所以要加锁，别人只能等待，直到我释放锁才能拿到锁；数据库的行锁、表锁、读锁、写锁都是这种方式，java中的synchronized和ReentrantLock也是悲观锁的思想。</p>\n<p>（2）乐观锁</p>\n<p>总是假设最好的情况，每次拿数据都认为别人不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有人修改过；一般基于版本号机制实现。</p>\n<p>（3）使用场景</p>\n<p>乐观锁适用于读多写少的情况，即冲突很少发生；如果是多写的情况，应用会不断重试，反而会降低系统性能，这种情况最好用悲观锁，因为等待到锁被释放后，可以立即获得锁进行操作。</p>\n<p>拓展： <a href=\"http://www.imooc.com/article/285147\" target=\"_blank\" rel=\"noopener\">(1)图解悲观锁和乐观锁</a><br><a href=\"https://www.sohu.com/a/306900091_250298\" target=\"_blank\" rel=\"noopener\">(2)什么是乐观锁与悲观锁？</a></p>\n<h3 id=\"2-5-5-阻塞和死锁\"><a href=\"#2-5-5-阻塞和死锁\" class=\"headerlink\" title=\"2.5.5 阻塞和死锁\"></a>2.5.5 阻塞和死锁</h3><p>（1）阻塞是由于资源不足引起的排队等待现象。<br>（2）死锁是由于两个对象在拥有一份资源的情况下申请另一份资源，而另一份资源恰好又是这两对象正持有的，导致两对象无法完成操作，且所持资源无法释放。</p>\n<h2 id=\"2-6-如何选择正确的存储引擎\"><a href=\"#2-6-如何选择正确的存储引擎\" class=\"headerlink\" title=\"2.6 如何选择正确的存储引擎\"></a>2.6 如何选择正确的存储引擎</h2><p><strong>参考条件：</strong></p>\n<ol>\n<li>事务</li>\n<li>备份(<code>Innobd</code>免费在线备份)</li>\n<li>崩溃恢复</li>\n<li>存储引擎的特有特性</li>\n</ol>\n<p><strong>总结:**</strong><code>Innodb</code>大法好。<strong>\n</strong><code>注意:</code>**尽量别使用混合存储引擎，比如回滚会出问题在线热备问题。</p>\n<h2 id=\"2-7-配置参数\"><a href=\"#2-7-配置参数\" class=\"headerlink\" title=\"2.7 配置参数\"></a>2.7 配置参数</h2><h3 id=\"2-7-1-内存配置相关参数\"><a href=\"#2-7-1-内存配置相关参数\" class=\"headerlink\" title=\"2.7.1 内存配置相关参数\"></a>2.7.1 内存配置相关参数</h3><blockquote>\n<p>确定可以使用的内存上限。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存的使用上限不能超过物理内存，否则容易造成内存溢出；（对于32位操作系统，MySQL只能试用3G以下的内存。）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>确定MySQL的<strong>每个连接<code>单独</code></strong>使用的内存。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort_buffer_size #定义了每个线程排序缓存区的大小，MySQL在有查询、需要做排序操作时才会为每个缓冲区分配内存（直接分配该参数的全部内存）；</span><br><span class=\"line\">join_buffer_size #定义了每个线程所使用的连接缓冲区的大小，如果一个查询关联了多张表，MySQL会为每张表分配一个连接缓冲，导致一个查询产生了多个连接缓冲；</span><br><span class=\"line\">read_buffer_size #定义了当对一张MyISAM进行全表扫描时所分配读缓冲池大小，MySQL有查询需要时会为其分配内存，其必须是4k的倍数；</span><br><span class=\"line\">read_rnd_buffer_size #索引缓冲区大小，MySQL有查询需要时会为其分配内存，只会分配需要的大小。</span><br></pre></td></tr></table></figure>\n<p><strong><code>注意：</code></strong>以上四个参数是为一个线程分配的，如果有100个连接，那么需要×100。</p>\n<blockquote>\n<p>MySQL数据库实例：</p>\n<p>　①MySQL是<strong><code>单进程多线程</code></strong>（而oracle是多进程），也就是说<code>MySQL</code>实例在系统上表现就是一个服务进程，即进程；</p>\n<p>　②MySQL实例是线程和内存组成，实例才是真正用于操作数据库文件的；</p>\n<p><strong>一般情况下</strong>一个实例操作一个或多个数据库；<strong>集群情况下</strong>多个实例操作一个或多个数据库。</p>\n</blockquote>\n<p><strong>如何为缓存池分配内存：</strong><br><code>Innodb_buffer_pool_size</code>，定义了Innodb所使用缓存池的大小，对其性能十分重要，必须足够大，但是过大时，使得Innodb 关闭时候需要更多时间把脏页从缓冲池中刷新到磁盘中；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总内存-（每个线程所需要的内存*连接数）-系统保留内存</span><br></pre></td></tr></table></figure>\n<p><code>key_buffer_size</code>，定义了MyISAM所使用的缓存池的大小，由于数据是依赖存储操作系统缓存的，所以要为操作系统预留更大的内存空间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select sum(index_length) from information_schema.talbes where engine=&apos;myisam&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>即使开发使用的表全部是Innodb表，也要为MyISAM预留内存，因为MySQL系统使用的表仍然是MyISAM表。</p>\n<p><code>max_connections</code> 控制允许的最大连接数， 一般2000更大。<br><strong>不要使用外键约束保证数据的完整性。</strong></p>\n<h2 id=\"2-8-性能优化顺序\"><a href=\"#2-8-性能优化顺序\" class=\"headerlink\" title=\"2.8 性能优化顺序\"></a>2.8 性能优化顺序</h2><p><strong>从上到下：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-019a6a65da3fcb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、什么影响了数据库查询速度\"><a href=\"#一、什么影响了数据库查询速度\" class=\"headerlink\" title=\"一、什么影响了数据库查询速度\"></a>一、什么影响了数据库查询速度</h1><h2 id=\"1-1-影响数据库查询速度的四个因素\"><a href=\"#1-1-影响数据库查询速度的四个因素\" class=\"headerlink\" title=\"1.1 影响数据库查询速度的四个因素\"></a>1.1 影响数据库查询速度的四个因素</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d74c8bfa52110257.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"1-2-风险分析\"><a href=\"#1-2-风险分析\" class=\"headerlink\" title=\"1.2 风险分析\"></a>1.2 风险分析</h2><blockquote>\n<p><strong>QPS：</strong><code>Queries Per Second</code>意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p>\n</blockquote>\n<blockquote>\n<p><strong>TPS：</strong>是<code>TransactionsPerSecond</code>的缩写，也就是事务数/秒。它是软件测试结果的测量单位。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p>\n</blockquote>\n<blockquote>\n<p> <strong>Tips：</strong>最好不要在主库上数据库备份，大型活动前取消这样的计划。</p>\n</blockquote>\n<ol>\n<li>效率低下的<code>sql</code>：超高的<code>QPS</code>与<code>TPS</code>。</li>\n<li>大量的并发：数据连接数被占满（<code>max_connection</code>默认<code>100</code>，一般把连接数设置得大一些）。<br>并发量:同一时刻数据库服务器处理的请求数量</li>\n<li>超高的<code>CPU</code>使用率：<code>CPU</code>资源耗尽出现宕机。</li>\n<li>磁盘<code>IO</code>：磁盘<code>IO</code>性能突然下降、大量消耗磁盘性能的计划任务。解决：更快磁盘设备、调整计划任务、做好磁盘维护。</li>\n</ol>\n<h2 id=\"1-3-网卡流量：如何避免无法连接数据库的情况\"><a href=\"#1-3-网卡流量：如何避免无法连接数据库的情况\" class=\"headerlink\" title=\"1.3 网卡流量：如何避免无法连接数据库的情况\"></a>1.3 网卡流量：如何避免无法连接数据库的情况</h2><ol>\n<li>减少从服务器的数量（从服务器会从主服务器复制日志）</li>\n<li>进行分级缓存（避免前端大量缓存失效）</li>\n<li>避免使用<code>select *</code> 进行查询</li>\n<li>分离业务网络和服务器网络</li>\n</ol>\n<h2 id=\"1-4-大表带来的问题（重要）\"><a href=\"#1-4-大表带来的问题（重要）\" class=\"headerlink\" title=\"1.4 大表带来的问题（重要）\"></a>1.4 大表带来的问题（<strong><code>重要</code></strong>）</h2><h3 id=\"1-4-1-大表的特点\"><a href=\"#1-4-1-大表的特点\" class=\"headerlink\" title=\"1.4.1 大表的特点\"></a>1.4.1 大表的特点</h3><ol>\n<li>记录行数巨大，单表超千万</li>\n<li>表数据文件巨大，超过<code>10</code>个<code>G</code></li>\n</ol>\n<h3 id=\"1-4-2-大表的危害\"><a href=\"#1-4-2-大表的危害\" class=\"headerlink\" title=\"1.4.2 大表的危害\"></a>1.4.2 大表的危害</h3><p>1.慢查询：<strong>很难在短时间内过滤出需要的数据</strong><br>    查询字区分度低 -&gt; 要在大数据量的表中筛选出来其中一部分数据会产生大量的磁盘<code>io</code> -&gt; 降低磁盘效率</p>\n<p>2.对<code>DDL</code>影响：</p>\n<p><strong>建立索引需要很长时间：</strong></p>\n<ul>\n<li><code>MySQL -v&lt;5.5</code> 建立索引会锁表</li>\n<li><p><code>MySQL -v&gt;=5.5</code> 建立索引会造成主从延迟（<code>mysql</code>建立索引，先在组上执行，再在库上执行）</p>\n<p><strong>修改表结构需要长时间的锁表：</strong>会造成长时间的主从延迟(‘480秒延迟’)</p>\n</li>\n</ul>\n<h3 id=\"1-4-3-如何处理数据库上的大表\"><a href=\"#1-4-3-如何处理数据库上的大表\" class=\"headerlink\" title=\"1.4.3 如何处理数据库上的大表\"></a>1.4.3 如何处理数据库上的大表</h3><blockquote>\n<p>分库分表把一张大表分成多个小表</p>\n</blockquote>\n<p><strong>难点：</strong></p>\n<ol>\n<li>分表主键的选择</li>\n<li>分表后跨分区数据的查询和统计</li>\n</ol>\n<h2 id=\"1-5-大事务带来的问题（重要）\"><a href=\"#1-5-大事务带来的问题（重要）\" class=\"headerlink\" title=\"1.5 大事务带来的问题（重要）\"></a>1.5 大事务带来的问题（<strong><code>重要</code></strong>）</h2><h3 id=\"1-5-1-什么是事务\"><a href=\"#1-5-1-什么是事务\" class=\"headerlink\" title=\"1.5.1 什么是事务\"></a>1.5.1 什么是事务</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1e087ef5ad797527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"1-5-2事务的ACID属性\"><a href=\"#1-5-2事务的ACID属性\" class=\"headerlink\" title=\"1.5.2事务的ACID属性\"></a>1.5.2事务的<code>ACID</code>属性</h3><blockquote>\n<p>1、原子性（<code>atomicity</code>)：全部成功，全部回滚失败。银行存取款。</p>\n</blockquote>\n<blockquote>\n<p>2、一致性（consistent)：银行转账的总金额不变。</p>\n</blockquote>\n<blockquote>\n<p>3、隔离性（isolation)：</p>\n</blockquote>\n<p><strong>隔离性等级：</strong></p>\n<ul>\n<li>未提交读(<code>READ UNCOMMITED</code>) <strong>脏读</strong>,两个事务之间互相可见；– <code>存在脏读、不可重复读、幻读的问题</code></li>\n<li>已提交读(<code>READ COMMITED</code>)符合隔离性的基本概念,一个事务进行时，其它已提交的<code>事物</code>对于该事务是可见的，即可以获取其它事务提交的数据（<strong>不可重复读</strong>）。– <code>解决脏读的问题</code>，存在不可重复读、幻读的问题。</li>\n<li>可重复读(<code>REPEATABLE READ</code>) <strong><code>InnoDB的默认隔离等级</code></strong>。事务进行时，其它所有事务对其不可见，即多次执行读，得到的结果是一样的！ – mysql 默认级别，<code>解决脏读、不可重复读的问题</code>，存在幻读的问题。使用 MVCC（多版本并发控制，提高并发，不加锁）机制 实现可重复读。<strong><code>But，MySQL在可重复读级别已经解决幻读，插不进数据，有间隙锁。</code></strong></li>\n<li>可串行化（<code>SERIALIZABLE</code>） 在读取的每一行数据上都加锁，会造成大量的锁超时和锁征用，严格数据一致性且没有并发是可使用。 – <code>解决脏读、不可重复读、幻读</code>，可保证事务安全，但完全串行执行，性能最低。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不可重复读：事务A首先读取了一条数据，然后执行逻辑的时候，事务B将这条数据改变了，然后事务A再次读取的时候，发现数据不匹配了，就是所谓的不可重复读了。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说，当前事务先进行了一次数据读取，然后再次读取到的数据是别的事务修改成功的数据，导致两次读取到的数据不匹配，也就照应了不可重复读的语义。</span><br><span class=\"line\"></span><br><span class=\"line\">幻读：事务A首先根据条件索引得到N条数据，然后事务B改变了这N条数据之外的M条或者增添了M条符合事务A搜索条件的数据，导致事务A再次搜索发现有N+M条数据了，就产生了幻读。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说，当前事务读第一次取到的数据比后来读取到数据条目少。</span><br><span class=\"line\"></span><br><span class=\"line\">不可重复读和幻读比较：</span><br><span class=\"line\">两者有些相似，但是前者针对的是update或delete，后者针对的insert。</span><br></pre></td></tr></table></figure>\n<pre><code>**查看系统的事务隔离级别：**`show variables like &apos;%iso%&apos;`;\n**开启一个新事务：**`begin`;\n**提交一个事务：**`commit`;\n**修改事物的隔离级别：**`set session tx_isolation=&apos;read-committed&apos;`;\n</code></pre><blockquote>\n<p>4、持久性(<code>DURABILITY</code>)：从数据库的角度的持久性，磁盘损坏就不行了</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-aabe6d772ae4b092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><code>redo log</code>机制保证事务更新的<strong>一致性</strong>和<strong>持久性</strong></p>\n<h2 id=\"1-5-3-大事务\"><a href=\"#1-5-3-大事务\" class=\"headerlink\" title=\"1.5.3 大事务\"></a>1.5.3 大事务</h2><blockquote>\n<p>运行时间长，操作数据比较多的事务；</p>\n</blockquote>\n<p><strong>风险：锁定数据太多，回滚时间长，执行时间长。</strong></p>\n<ol>\n<li>锁定太多数据，造成大量阻塞和锁超时；</li>\n<li>回滚时所需时间比较长，且数据仍然会处于锁定；</li>\n<li><p>如果执行时间长，将造成主从延迟，因为只有当主服务器全部执行完写入日志时，从服务器才会开始进行同步，造成延迟。</p>\n<p><strong>解决思路：</strong></p>\n</li>\n<li><p>避免一次处理太多数据，可以分批次处理；</p>\n</li>\n<li>移出不必要的<code>SELECT</code>操作，保证事务中只有必要的写操作。</li>\n</ol>\n<h1 id=\"二、什么影响了MySQL性能（非常重要）\"><a href=\"#二、什么影响了MySQL性能（非常重要）\" class=\"headerlink\" title=\"二、什么影响了MySQL性能（非常重要）\"></a>二、什么影响了MySQL性能（<strong><code>非常重要</code></strong>）</h1><h2 id=\"2-1-影响性能的几个方面\"><a href=\"#2-1-影响性能的几个方面\" class=\"headerlink\" title=\"2.1 影响性能的几个方面\"></a>2.1 影响性能的几个方面</h2><ol>\n<li>服务器硬件。</li>\n<li>服务器系统（系统参数优化）。</li>\n<li><strong>存储引擎</strong>。<br><code>MyISAM</code>： 不支持事务，表级锁。<br><code>InnoDB</code>: 支持事务，支持行级锁，事务<code>ACID</code>。</li>\n<li><strong>数据库参数配置。</strong></li>\n<li><strong><code>数据库结构设计和SQL语句。（重点优化）</code></strong></li>\n</ol>\n<h2 id=\"2-2-MySQL体系结构\"><a href=\"#2-2-MySQL体系结构\" class=\"headerlink\" title=\"2.2 MySQL体系结构\"></a>2.2 MySQL体系结构</h2><p><strong>分三层：客户端-&gt;服务层-&gt;存储引擎</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-99f80e9cefb4d112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<ol>\n<li><code>MySQL</code>是<strong><code>插件式的存储引擎</code></strong>，其中存储引擎分很多种。只要实现符合mysql存储引擎的接口，可以开发自己的存储引擎!</li>\n<li>所有跨存储引擎的功能都是在服务层实现的。</li>\n<li>MySQL的<strong>存储引擎是针对表的，不是针对库的</strong>。也就是说在一个数据库中可以使用不同的存储引擎。但是不建议这样做。</li>\n</ol>\n<h2 id=\"2-3-InnoDB存储引擎\"><a href=\"#2-3-InnoDB存储引擎\" class=\"headerlink\" title=\"2.3 InnoDB存储引擎\"></a>2.3 InnoDB存储引擎</h2><p><code>MySQL5.5</code>及之后版本<strong>默认的存储引擎</strong>：<code>InnoDB</code>。</p>\n<h3 id=\"2-3-1-InnoDB使用表空间进行数据存储。\"><a href=\"#2-3-1-InnoDB使用表空间进行数据存储。\" class=\"headerlink\" title=\"2.3.1 InnoDB使用表空间进行数据存储。\"></a>2.3.1 InnoDB使用表空间进行数据存储。</h3><p><code>show variables like &#39;innodb_file_per_table</code></p>\n<p>  如果innodb_file_per_table 为 ON 将建立独立的表空间，文件为tablename.ibd；</p>\n<p>  如果innodb_file_per_table 为 OFF 将数据存储到系统的共享表空间，文件为ibdataX（X为从1开始的整数）；</p>\n<p>  <code>.frm</code> ：是服务器层面产生的文件，类似服务器层的数据字典，<strong>记录表结构</strong>。</p>\n<h3 id=\"2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间\"><a href=\"#2-3-2-MySQL5-5默认-系统表空间与-MySQL5-6及以后默认-独立表空间\" class=\"headerlink\" title=\"2.3.2 (MySQL5.5默认)系统表空间与(MySQL5.6及以后默认)独立表空间\"></a>2.3.2 (MySQL5.5默认)系统表空间与(<code>MySQL5.6</code>及以后默认)独立表空间</h3><p>1.1 系统表空间无法简单的收缩文件大小，造成空间浪费，并会产生大量的磁盘碎片。<br>1.2 独立表空间可以通过<code>optimeze table</code> 收缩系统文件，不需要重启服务器也不会影响对表的正常访问。<br>2.1 如果对多个表进行刷新时，实际上是顺序进行的，会产生IO瓶颈。<br>2.2 独立表空间可以同时向多个文件刷新数据。</p>\n<p><strong>强烈建立对Innodb 使用独立表空间，优化什么的更方便，可控。</strong></p>\n<h3 id=\"2-3-3-系统表空间的表转移到独立表空间中的方法\"><a href=\"#2-3-3-系统表空间的表转移到独立表空间中的方法\" class=\"headerlink\" title=\"2.3.3 系统表空间的表转移到独立表空间中的方法\"></a>2.3.3 系统表空间的表转移到独立表空间中的方法</h3><p>1、使用mysqldump 导出所有数据库数据（存储过程、触发器、计划任务一起都要导出 ）可以在从服务器上操作。</p>\n<p>2、停止MYsql 服务器，修改参数（my.cnf加入innodb_file_per_table），并删除Inoodb相关文件（可以重建Data目录）。</p>\n<p>3、重启MYSQL，并重建Innodb系统表空间。</p>\n<p>4、 重新导入数据。</p>\n<p><strong>或者</strong> <code>Alter table</code> 同样可以的转移，但是无法回收系统表空间中占用的空间。</p>\n<h2 id=\"2-4-InnoDB存储引擎的特性\"><a href=\"#2-4-InnoDB存储引擎的特性\" class=\"headerlink\" title=\"2.4 InnoDB存储引擎的特性\"></a>2.4 InnoDB存储引擎的特性</h2><h3 id=\"2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log\"><a href=\"#2-4-1-特性一：事务性存储引擎及两个特殊日志类型：Redo-Log-和-Undo-Log\" class=\"headerlink\" title=\"2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log\"></a>2.4.1 特性一：事务性存储引擎及两个特殊日志类型：Redo Log 和 Undo Log</h3><ol>\n<li><code>Innodb</code> 是一种<strong>事务性存储引擎</strong>。</li>\n<li>完全支持事务的<code>ACID</code>特性。</li>\n<li><p>支持事务所需要的两个特殊日志类型：<code>Redo Log</code> 和<code>Undo Log</code></p>\n<p><strong>Redo Log：</strong>实现事务的持久性(已提交的事务)。<br><strong>Undo Log：</strong>未提交的事务，独立于表空间，需要随机访问，可以存储在高性能io设备上。</p>\n</li>\n</ol>\n<blockquote>\n<p><code>Undo</code>日志记录某数据被修改前的值，可以用来在事务失败时进行<code>rollback</code>；<code>Redo</code>日志记录某数据块被修改后的值，可以用来恢复未写入<code>data file</code>的已成功事务更新的数据。</p>\n</blockquote>\n<h3 id=\"2-4-2-特性二：支持行级锁\"><a href=\"#2-4-2-特性二：支持行级锁\" class=\"headerlink\" title=\"2.4.2 特性二：支持行级锁\"></a>2.4.2 特性二：支持行级锁</h3><ol>\n<li>InnoDB支持行级锁。</li>\n<li>行级锁可以最大程度地支持并发。</li>\n<li>行级锁是由存储引擎层实现的。</li>\n</ol>\n<h2 id=\"2-5-什么是锁\"><a href=\"#2-5-什么是锁\" class=\"headerlink\" title=\"2.5 什么是锁\"></a>2.5 什么是锁</h2><h3 id=\"2-5-1-锁\"><a href=\"#2-5-1-锁\" class=\"headerlink\" title=\"2.5.1 锁\"></a>2.5.1 锁</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8ef5d670b0aa9fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"2-5-2-锁类型\"><a href=\"#2-5-2-锁类型\" class=\"headerlink\" title=\"2.5.2 锁类型\"></a>2.5.2 锁类型</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ed1432c2ca6a86b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S锁（读锁）： select ... lock in share mode</span><br><span class=\"line\">X锁（写锁）：select ... for update (update、delete、)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-3-锁的粒度\"><a href=\"#2-5-3-锁的粒度\" class=\"headerlink\" title=\"2.5.3 锁的粒度\"></a>2.5.3 锁的粒度</h3><p>MySQL的事务支持<strong>不是绑定在MySQL服务器本身</strong>，<strong><code>而是与存储引擎相关</code></strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-69db7a6633cc9465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将<strong>table_name</strong>加表级锁命令：<code>lock table table_name write</code>; <strong><code>写锁会阻塞其它用户对该表的‘读写’操作，直到</code></strong>写锁被释放：<code>unlock tables</code>；</p>\n<ol>\n<li><strong>锁的开销越大，粒度越小，并发度越高。</strong></li>\n<li>表级锁通常是在服务器层实现的。</li>\n<li>行级锁是存储引擎层实现的。innodb的锁机制，服务器层是不知道的</li>\n</ol>\n<h3 id=\"2-5-4-锁的分类\"><a href=\"#2-5-4-锁的分类\" class=\"headerlink\" title=\"2.5.4 锁的分类\"></a>2.5.4 锁的分类</h3><p>（1）悲观锁</p>\n<p>总是假设最坏的情况，每次拿数据都认为别人会修改数据，所以要加锁，别人只能等待，直到我释放锁才能拿到锁；数据库的行锁、表锁、读锁、写锁都是这种方式，java中的synchronized和ReentrantLock也是悲观锁的思想。</p>\n<p>（2）乐观锁</p>\n<p>总是假设最好的情况，每次拿数据都认为别人不会修改数据，所以不会加锁，但是更新的时候，会判断在此期间有没有人修改过；一般基于版本号机制实现。</p>\n<p>（3）使用场景</p>\n<p>乐观锁适用于读多写少的情况，即冲突很少发生；如果是多写的情况，应用会不断重试，反而会降低系统性能，这种情况最好用悲观锁，因为等待到锁被释放后，可以立即获得锁进行操作。</p>\n<p>拓展： <a href=\"http://www.imooc.com/article/285147\" target=\"_blank\" rel=\"noopener\">(1)图解悲观锁和乐观锁</a><br><a href=\"https://www.sohu.com/a/306900091_250298\" target=\"_blank\" rel=\"noopener\">(2)什么是乐观锁与悲观锁？</a></p>\n<h3 id=\"2-5-5-阻塞和死锁\"><a href=\"#2-5-5-阻塞和死锁\" class=\"headerlink\" title=\"2.5.5 阻塞和死锁\"></a>2.5.5 阻塞和死锁</h3><p>（1）阻塞是由于资源不足引起的排队等待现象。<br>（2）死锁是由于两个对象在拥有一份资源的情况下申请另一份资源，而另一份资源恰好又是这两对象正持有的，导致两对象无法完成操作，且所持资源无法释放。</p>\n<h2 id=\"2-6-如何选择正确的存储引擎\"><a href=\"#2-6-如何选择正确的存储引擎\" class=\"headerlink\" title=\"2.6 如何选择正确的存储引擎\"></a>2.6 如何选择正确的存储引擎</h2><p><strong>参考条件：</strong></p>\n<ol>\n<li>事务</li>\n<li>备份(<code>Innobd</code>免费在线备份)</li>\n<li>崩溃恢复</li>\n<li>存储引擎的特有特性</li>\n</ol>\n<p><strong>总结:**</strong><code>Innodb</code>大法好。<strong>\n</strong><code>注意:</code>**尽量别使用混合存储引擎，比如回滚会出问题在线热备问题。</p>\n<h2 id=\"2-7-配置参数\"><a href=\"#2-7-配置参数\" class=\"headerlink\" title=\"2.7 配置参数\"></a>2.7 配置参数</h2><h3 id=\"2-7-1-内存配置相关参数\"><a href=\"#2-7-1-内存配置相关参数\" class=\"headerlink\" title=\"2.7.1 内存配置相关参数\"></a>2.7.1 内存配置相关参数</h3><blockquote>\n<p>确定可以使用的内存上限。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存的使用上限不能超过物理内存，否则容易造成内存溢出；（对于32位操作系统，MySQL只能试用3G以下的内存。）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>确定MySQL的<strong>每个连接<code>单独</code></strong>使用的内存。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sort_buffer_size #定义了每个线程排序缓存区的大小，MySQL在有查询、需要做排序操作时才会为每个缓冲区分配内存（直接分配该参数的全部内存）；</span><br><span class=\"line\">join_buffer_size #定义了每个线程所使用的连接缓冲区的大小，如果一个查询关联了多张表，MySQL会为每张表分配一个连接缓冲，导致一个查询产生了多个连接缓冲；</span><br><span class=\"line\">read_buffer_size #定义了当对一张MyISAM进行全表扫描时所分配读缓冲池大小，MySQL有查询需要时会为其分配内存，其必须是4k的倍数；</span><br><span class=\"line\">read_rnd_buffer_size #索引缓冲区大小，MySQL有查询需要时会为其分配内存，只会分配需要的大小。</span><br></pre></td></tr></table></figure>\n<p><strong><code>注意：</code></strong>以上四个参数是为一个线程分配的，如果有100个连接，那么需要×100。</p>\n<blockquote>\n<p>MySQL数据库实例：</p>\n<p>　①MySQL是<strong><code>单进程多线程</code></strong>（而oracle是多进程），也就是说<code>MySQL</code>实例在系统上表现就是一个服务进程，即进程；</p>\n<p>　②MySQL实例是线程和内存组成，实例才是真正用于操作数据库文件的；</p>\n<p><strong>一般情况下</strong>一个实例操作一个或多个数据库；<strong>集群情况下</strong>多个实例操作一个或多个数据库。</p>\n</blockquote>\n<p><strong>如何为缓存池分配内存：</strong><br><code>Innodb_buffer_pool_size</code>，定义了Innodb所使用缓存池的大小，对其性能十分重要，必须足够大，但是过大时，使得Innodb 关闭时候需要更多时间把脏页从缓冲池中刷新到磁盘中；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总内存-（每个线程所需要的内存*连接数）-系统保留内存</span><br></pre></td></tr></table></figure>\n<p><code>key_buffer_size</code>，定义了MyISAM所使用的缓存池的大小，由于数据是依赖存储操作系统缓存的，所以要为操作系统预留更大的内存空间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select sum(index_length) from information_schema.talbes where engine=&apos;myisam&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>即使开发使用的表全部是Innodb表，也要为MyISAM预留内存，因为MySQL系统使用的表仍然是MyISAM表。</p>\n<p><code>max_connections</code> 控制允许的最大连接数， 一般2000更大。<br><strong>不要使用外键约束保证数据的完整性。</strong></p>\n<h2 id=\"2-8-性能优化顺序\"><a href=\"#2-8-性能优化顺序\" class=\"headerlink\" title=\"2.8 性能优化顺序\"></a>2.8 性能优化顺序</h2><p><strong>从上到下：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-019a6a65da3fcb8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"mysql基础(1)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n\n**windows安装过程参考之前的文章**\nhttps://www.jianshu.com/p/e35185ec3294\n\n## MySQL语法基础\n### 创建表\n![](https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**-- 为注释，不会被执行**\n![](https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 使用查询语句建表\n```\n-- 新建数据库\nCREATE DATABASE `school`;\n\n-- 使用数据库\nUSE `school`;\n\n-- 创建表格\n-- id\n-- name\n-- nickname\n-- sex\n-- in_time\nCREATE TABLE `students`(\n\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n\t`name` VARCHAR(20) NOT NULL,\n\t`nickname` VARCHAR(20) NULL,\n\t`sex` CHAR(1) NULL,\n\t`in_time` DATETIME NULL\n) DEFAULT CHARSET 'UTF8MB4';\n-- PRIMARY KEY 主键是用来唯一定位记录的,特殊索引\n-- 建议不使用任何业务相关的字段作为主键\n\n-- 在students表中添加一个class id\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n### 插入数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 插入students表   \n-- now():mysql中当前时间\nINSERT INTO `students` VALUE(1,'weilai','imwl','男',now());\n\n-- 可以选择性插入\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES('weilai','imwl','男',now());\n\n-- 插入多行数据\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES\n('weilai2','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now());\n```\n### 查询数据\n![得按照上面的先后顺序，不能颠倒](https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 查询数据库\n-- * 表示所有的\nSELECT * FROM `students`;\n-- 只查询name 和 nickname\nSELECT `name`,`nickname` FROM `students`;\n-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)\nSELECT `name`,`nickname` FROM `students` WHERE `sex`='男';\n-- 在上面基础上id倒序\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC;\n-- 在上面基础上分页\n-- 0，2  : 从第1条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 0,2;\n-- 1,2 : 从第2条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 1,2;\n```\n### 修改数据\n![](https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**where 很重要，不然就是改动整张表的数据**\n```\n-- 修改\n-- 将所有的性别改女\nUPDATE `students` SET `sex`='女';\n-- 将name为weilai 的性别回男\nUPDATE `students` SET `sex`='男' WHERE `name` = 'weilai';\n-- 将name为weilai 的性别为男,nickname改为没有昵称\nUPDATE `students` SET `sex`='男',`nickname`='没有昵称' WHERE `name` = 'weilai';\n-- 将id <3 的性别改为女\nUPDATE `students` SET `sex`='女' WHERE `id` < 3\n\n```\n### 删除数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n```\n-- 删除数据  \n-- 删除students表中，性别为女的数据\nDELETE FROM `students` WHERE `sex` = '女'\n-- 删除students表中全部数据\nDELETE FROM `students`\nTRUNCATE TABLE student\n```\n444\n","source":"_posts/MySQL/mysql基础(1).md","raw":"\n---\ntitle: mysql基础(1)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n\n**windows安装过程参考之前的文章**\nhttps://www.jianshu.com/p/e35185ec3294\n\n## MySQL语法基础\n### 创建表\n![](https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**-- 为注释，不会被执行**\n![](https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 使用查询语句建表\n```\n-- 新建数据库\nCREATE DATABASE `school`;\n\n-- 使用数据库\nUSE `school`;\n\n-- 创建表格\n-- id\n-- name\n-- nickname\n-- sex\n-- in_time\nCREATE TABLE `students`(\n\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n\t`name` VARCHAR(20) NOT NULL,\n\t`nickname` VARCHAR(20) NULL,\n\t`sex` CHAR(1) NULL,\n\t`in_time` DATETIME NULL\n) DEFAULT CHARSET 'UTF8MB4';\n-- PRIMARY KEY 主键是用来唯一定位记录的,特殊索引\n-- 建议不使用任何业务相关的字段作为主键\n\n-- 在students表中添加一个class id\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n### 插入数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 插入students表   \n-- now():mysql中当前时间\nINSERT INTO `students` VALUE(1,'weilai','imwl','男',now());\n\n-- 可以选择性插入\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES('weilai','imwl','男',now());\n\n-- 插入多行数据\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES\n('weilai2','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now());\n```\n### 查询数据\n![得按照上面的先后顺序，不能颠倒](https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 查询数据库\n-- * 表示所有的\nSELECT * FROM `students`;\n-- 只查询name 和 nickname\nSELECT `name`,`nickname` FROM `students`;\n-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)\nSELECT `name`,`nickname` FROM `students` WHERE `sex`='男';\n-- 在上面基础上id倒序\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC;\n-- 在上面基础上分页\n-- 0，2  : 从第1条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 0,2;\n-- 1,2 : 从第2条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 1,2;\n```\n### 修改数据\n![](https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**where 很重要，不然就是改动整张表的数据**\n```\n-- 修改\n-- 将所有的性别改女\nUPDATE `students` SET `sex`='女';\n-- 将name为weilai 的性别回男\nUPDATE `students` SET `sex`='男' WHERE `name` = 'weilai';\n-- 将name为weilai 的性别为男,nickname改为没有昵称\nUPDATE `students` SET `sex`='男',`nickname`='没有昵称' WHERE `name` = 'weilai';\n-- 将id <3 的性别改为女\nUPDATE `students` SET `sex`='女' WHERE `id` < 3\n\n```\n### 删除数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n```\n-- 删除数据  \n-- 删除students表中，性别为女的数据\nDELETE FROM `students` WHERE `sex` = '女'\n-- 删除students表中全部数据\nDELETE FROM `students`\nTRUNCATE TABLE student\n```\n444\n","slug":"MySQL/mysql基础(1)","published":1,"updated":"2020-04-10T16:46:16.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu56000874ux9my1dz7j","content":"<p><strong>windows安装过程参考之前的文章</strong><br><a href=\"https://www.jianshu.com/p/e35185ec3294\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e35185ec3294</a></p>\n<h2 id=\"MySQL语法基础\"><a href=\"#MySQL语法基础\" class=\"headerlink\" title=\"MySQL语法基础\"></a>MySQL语法基础</h2><h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>– 为注释，不会被执行</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"使用查询语句建表\"><a href=\"#使用查询语句建表\" class=\"headerlink\" title=\"使用查询语句建表\"></a>使用查询语句建表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 新建数据库</span><br><span class=\"line\">CREATE DATABASE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 使用数据库</span><br><span class=\"line\">USE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建表格</span><br><span class=\"line\">-- id</span><br><span class=\"line\">-- name</span><br><span class=\"line\">-- nickname</span><br><span class=\"line\">-- sex</span><br><span class=\"line\">-- in_time</span><br><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">\t`name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">\t`nickname` VARCHAR(20) NULL,</span><br><span class=\"line\">\t`sex` CHAR(1) NULL,</span><br><span class=\"line\">\t`in_time` DATETIME NULL</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8MB4&apos;;</span><br><span class=\"line\">-- PRIMARY KEY 主键是用来唯一定位记录的,特殊索引</span><br><span class=\"line\">-- 建议不使用任何业务相关的字段作为主键</span><br><span class=\"line\"></span><br><span class=\"line\">-- 在students表中添加一个class id</span><br><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 插入students表   </span><br><span class=\"line\">-- now():mysql中当前时间</span><br><span class=\"line\">INSERT INTO `students` VALUE(1,&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以选择性插入</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 插入多行数据</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES</span><br><span class=\"line\">(&apos;weilai2&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"得按照上面的先后顺序，不能颠倒\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询数据库</span><br><span class=\"line\">-- * 表示所有的</span><br><span class=\"line\">SELECT * FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;;</span><br><span class=\"line\">-- 在上面基础上id倒序</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC;</span><br><span class=\"line\">-- 在上面基础上分页</span><br><span class=\"line\">-- 0，2  : 从第1条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 0,2;</span><br><span class=\"line\">-- 1,2 : 从第2条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 1,2;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>where 很重要，不然就是改动整张表的数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改</span><br><span class=\"line\">-- 将所有的性别改女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别回男</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别为男,nickname改为没有昵称</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos;,`nickname`=&apos;没有昵称&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将id &lt;3 的性别改为女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos; WHERE `id` &lt; 3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 删除数据  </span><br><span class=\"line\">-- 删除students表中，性别为女的数据</span><br><span class=\"line\">DELETE FROM `students` WHERE `sex` = &apos;女&apos;</span><br><span class=\"line\">-- 删除students表中全部数据</span><br><span class=\"line\">DELETE FROM `students`</span><br><span class=\"line\">TRUNCATE TABLE student</span><br></pre></td></tr></table></figure>\n<p>444</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>windows安装过程参考之前的文章</strong><br><a href=\"https://www.jianshu.com/p/e35185ec3294\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e35185ec3294</a></p>\n<h2 id=\"MySQL语法基础\"><a href=\"#MySQL语法基础\" class=\"headerlink\" title=\"MySQL语法基础\"></a>MySQL语法基础</h2><h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>– 为注释，不会被执行</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"使用查询语句建表\"><a href=\"#使用查询语句建表\" class=\"headerlink\" title=\"使用查询语句建表\"></a>使用查询语句建表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 新建数据库</span><br><span class=\"line\">CREATE DATABASE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 使用数据库</span><br><span class=\"line\">USE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建表格</span><br><span class=\"line\">-- id</span><br><span class=\"line\">-- name</span><br><span class=\"line\">-- nickname</span><br><span class=\"line\">-- sex</span><br><span class=\"line\">-- in_time</span><br><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">\t`name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">\t`nickname` VARCHAR(20) NULL,</span><br><span class=\"line\">\t`sex` CHAR(1) NULL,</span><br><span class=\"line\">\t`in_time` DATETIME NULL</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8MB4&apos;;</span><br><span class=\"line\">-- PRIMARY KEY 主键是用来唯一定位记录的,特殊索引</span><br><span class=\"line\">-- 建议不使用任何业务相关的字段作为主键</span><br><span class=\"line\"></span><br><span class=\"line\">-- 在students表中添加一个class id</span><br><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 插入students表   </span><br><span class=\"line\">-- now():mysql中当前时间</span><br><span class=\"line\">INSERT INTO `students` VALUE(1,&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以选择性插入</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 插入多行数据</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES</span><br><span class=\"line\">(&apos;weilai2&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"得按照上面的先后顺序，不能颠倒\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询数据库</span><br><span class=\"line\">-- * 表示所有的</span><br><span class=\"line\">SELECT * FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;;</span><br><span class=\"line\">-- 在上面基础上id倒序</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC;</span><br><span class=\"line\">-- 在上面基础上分页</span><br><span class=\"line\">-- 0，2  : 从第1条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 0,2;</span><br><span class=\"line\">-- 1,2 : 从第2条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 1,2;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>where 很重要，不然就是改动整张表的数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改</span><br><span class=\"line\">-- 将所有的性别改女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别回男</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别为男,nickname改为没有昵称</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos;,`nickname`=&apos;没有昵称&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将id &lt;3 的性别改为女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos; WHERE `id` &lt; 3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 删除数据  </span><br><span class=\"line\">-- 删除students表中，性别为女的数据</span><br><span class=\"line\">DELETE FROM `students` WHERE `sex` = &apos;女&apos;</span><br><span class=\"line\">-- 删除students表中全部数据</span><br><span class=\"line\">DELETE FROM `students`</span><br><span class=\"line\">TRUNCATE TABLE student</span><br></pre></td></tr></table></figure>\n<p>444</p>\n"},{"title":"mysql基础(3)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n### 多表联查\n![多表联查](https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![投影查询 简写](https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![加where](https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用多表查询可以获取M x N行记录**（M,N为两个表各自的行数）\n**多表查询的结果集可能非常巨大，要小心使用。**\n\n### 内连接\n```\nmysql>   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |\n|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |\n|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |\n| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |\n| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |\n| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |\n| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n\n```\n**INNER JOIN查询的写法是：**\n\n先确定主表，仍然使用`FROM <表1>`的语法；\n再确定需要连接的表，使用`INNER JOIN <表2>`的语法；\n然后确定连接条件，使用`ON <条件...>`，这里的条件是`s.class id = c.id`，表示`students`表的`class id`列与`class`表的`id`列相同的行需要连接；\n**可选：**加上`WHERE`子句、`ORDER BY`等子句。\n\n### 小结\n`JOIN`查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；\n\n`INNER JOIN`是最常用的一种`JOIN`查询，它的语法是`SELECT ... FROM <表1> INNER JOIN <表2> ON <条件...>；`\n\n`JOIN`查询仍然可以使用`WHERE`条件和`ORDER BY`排序。\n  ##  补充知识\n假设查询语句是：\n\n```\nSELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;\n\n```\n\n我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：\n\n![inner-join](http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nLEFT OUTER JOIN是选出左表存在的记录：\n\n![left-outer-join](http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nRIGHT OUTER JOIN是选出右表存在的记录：\n\n![right-outer-join](http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nFULL OUTER JOIN则是选出左右表都存在的记录：\n\n![full-outer-join](http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/MySQL/mysql基础(3).md","raw":"---\ntitle: mysql基础(3)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n### 多表联查\n![多表联查](https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![投影查询 简写](https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![加where](https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用多表查询可以获取M x N行记录**（M,N为两个表各自的行数）\n**多表查询的结果集可能非常巨大，要小心使用。**\n\n### 内连接\n```\nmysql>   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |\n|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |\n|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |\n| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |\n| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |\n| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |\n| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n\n```\n**INNER JOIN查询的写法是：**\n\n先确定主表，仍然使用`FROM <表1>`的语法；\n再确定需要连接的表，使用`INNER JOIN <表2>`的语法；\n然后确定连接条件，使用`ON <条件...>`，这里的条件是`s.class id = c.id`，表示`students`表的`class id`列与`class`表的`id`列相同的行需要连接；\n**可选：**加上`WHERE`子句、`ORDER BY`等子句。\n\n### 小结\n`JOIN`查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；\n\n`INNER JOIN`是最常用的一种`JOIN`查询，它的语法是`SELECT ... FROM <表1> INNER JOIN <表2> ON <条件...>；`\n\n`JOIN`查询仍然可以使用`WHERE`条件和`ORDER BY`排序。\n  ##  补充知识\n假设查询语句是：\n\n```\nSELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;\n\n```\n\n我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：\n\n![inner-join](http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nLEFT OUTER JOIN是选出左表存在的记录：\n\n![left-outer-join](http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nRIGHT OUTER JOIN是选出右表存在的记录：\n\n![right-outer-join](http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nFULL OUTER JOIN则是选出左右表都存在的记录：\n\n![full-outer-join](http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"MySQL/mysql基础(3)","published":1,"updated":"2020-04-10T16:46:16.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu5d000974uxn7gg78ru","content":"<h3 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"多表联查\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"投影查询 简写\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"加where\"></p>\n<p><strong>使用多表查询可以获取M x N行记录</strong>（M,N为两个表各自的行数）<br><strong>多表查询的结果集可能非常巨大，要小心使用。</strong></p>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |</span><br><span class=\"line\">|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |</span><br><span class=\"line\">|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br></pre></td></tr></table></figure>\n<p><strong>INNER JOIN查询的写法是：</strong></p>\n<p>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；<br>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；<br>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class id = c.id</code>，表示<code>students</code>表的<code>class id</code>列与<code>class</code>表的<code>id</code>列相同的行需要连接；<br><strong>可选：</strong>加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>JOIN</code>查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p>\n<p><code>INNER JOIN</code>是最常用的一种<code>JOIN</code>查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；</code></p>\n<p><code>JOIN</code>查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p>假设查询语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</span><br></pre></td></tr></table></figure>\n<p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inner-join\"></p>\n<p>LEFT OUTER JOIN是选出左表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"left-outer-join\"></p>\n<p>RIGHT OUTER JOIN是选出右表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"right-outer-join\"></p>\n<p>FULL OUTER JOIN则是选出左右表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"full-outer-join\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"多表联查\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"投影查询 简写\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"加where\"></p>\n<p><strong>使用多表查询可以获取M x N行记录</strong>（M,N为两个表各自的行数）<br><strong>多表查询的结果集可能非常巨大，要小心使用。</strong></p>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |</span><br><span class=\"line\">|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |</span><br><span class=\"line\">|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br></pre></td></tr></table></figure>\n<p><strong>INNER JOIN查询的写法是：</strong></p>\n<p>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；<br>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；<br>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class id = c.id</code>，表示<code>students</code>表的<code>class id</code>列与<code>class</code>表的<code>id</code>列相同的行需要连接；<br><strong>可选：</strong>加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>JOIN</code>查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p>\n<p><code>INNER JOIN</code>是最常用的一种<code>JOIN</code>查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；</code></p>\n<p><code>JOIN</code>查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p>假设查询语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</span><br></pre></td></tr></table></figure>\n<p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inner-join\"></p>\n<p>LEFT OUTER JOIN是选出左表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"left-outer-join\"></p>\n<p>RIGHT OUTER JOIN是选出右表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"right-outer-join\"></p>\n<p>FULL OUTER JOIN则是选出左右表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"full-outer-join\"></p>\n"},{"title":"使用MySQL","date":"2019-01-14T13:57:47.000Z","_content":"\n示例数据 `https://codeload.github.com/datacharmer/test_db/zip/master`\n导入 eg: `mysql -u root -p < employees.sql`\n\n## 连接到 MySQL\n \\g 输出水平显示\n \\G 输出垂直显示\n\n```\nmysql -h localhost -P 3306 -u root -p  - 连接到mysql\nALTER USER `root`@`localhost` IDENTIFIED BY 'password';  - 修改密码\n```\n### 创建数据库\n数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库\n\n`数据库服务器 → 数据库 → 表（由列定义） → 行`\n\n1. CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 **数据定义语言（DDL）操作**\n2. INSERT/UPDATE/DELETE /SELECT  称为 **数据操作语言（DML）** 前三项也称 **写**，SELECT 也称 **读**\n\n```\nCREATE DATABASE company;  - 创建数据库 建议都用 ``\nCREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） \nUSE `company`; - 使用 company 数据库\nmysql -u root -p company  - 直接连接到 company 数据库\nSELECT DATABASE(); - 查找连接到的数据库\nSHOW DATABASES; - 查找有权访问的所有数据库\nSHOW VARIABLES LIKE 'company'; - 获取当前的数据目录\n\n```\n`sudo ls -lhtr /usr/lcoal/mysql/data/`\n\n### 创建表\n```\nCREATE TABLE IF NOT EXISITS `company`.`customers`(\n`id` int unsigned AUTO_INCREMENT PRIMARY KEY,\n`first_name` varchar(20),\n`last_name` varchar(20),\n`country` varchar(20)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;\n\nSHOW TABLES - 查看所有表\nSHOW CREATE TABLE customers\\G - 查看表结构\nDESC customers;\nCREATE TABLE new_costomers Like customers - 克隆表结构\n```\n\n### 增删改查\n参考\n\n删除表的所有行最快的方式 `TRUNCATE TABLE customers`  DDL操作。\n\n## 创建用户\n**除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句**\n\n\n\n","source":"_posts/MySQL/使用MySQL.md","raw":"\n---\ntitle: 使用MySQL\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n示例数据 `https://codeload.github.com/datacharmer/test_db/zip/master`\n导入 eg: `mysql -u root -p < employees.sql`\n\n## 连接到 MySQL\n \\g 输出水平显示\n \\G 输出垂直显示\n\n```\nmysql -h localhost -P 3306 -u root -p  - 连接到mysql\nALTER USER `root`@`localhost` IDENTIFIED BY 'password';  - 修改密码\n```\n### 创建数据库\n数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库\n\n`数据库服务器 → 数据库 → 表（由列定义） → 行`\n\n1. CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 **数据定义语言（DDL）操作**\n2. INSERT/UPDATE/DELETE /SELECT  称为 **数据操作语言（DML）** 前三项也称 **写**，SELECT 也称 **读**\n\n```\nCREATE DATABASE company;  - 创建数据库 建议都用 ``\nCREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） \nUSE `company`; - 使用 company 数据库\nmysql -u root -p company  - 直接连接到 company 数据库\nSELECT DATABASE(); - 查找连接到的数据库\nSHOW DATABASES; - 查找有权访问的所有数据库\nSHOW VARIABLES LIKE 'company'; - 获取当前的数据目录\n\n```\n`sudo ls -lhtr /usr/lcoal/mysql/data/`\n\n### 创建表\n```\nCREATE TABLE IF NOT EXISITS `company`.`customers`(\n`id` int unsigned AUTO_INCREMENT PRIMARY KEY,\n`first_name` varchar(20),\n`last_name` varchar(20),\n`country` varchar(20)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;\n\nSHOW TABLES - 查看所有表\nSHOW CREATE TABLE customers\\G - 查看表结构\nDESC customers;\nCREATE TABLE new_costomers Like customers - 克隆表结构\n```\n\n### 增删改查\n参考\n\n删除表的所有行最快的方式 `TRUNCATE TABLE customers`  DDL操作。\n\n## 创建用户\n**除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句**\n\n\n\n","slug":"MySQL/使用MySQL","published":1,"updated":"2020-04-10T16:46:16.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu5j000a74uxa0ie0a1t","content":"<p>示例数据 <code>https://codeload.github.com/datacharmer/test_db/zip/master</code><br>导入 eg: <code>mysql -u root -p &lt; employees.sql</code></p>\n<h2 id=\"连接到-MySQL\"><a href=\"#连接到-MySQL\" class=\"headerlink\" title=\"连接到 MySQL\"></a>连接到 MySQL</h2><p> \\g 输出水平显示<br> \\G 输出垂直显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -P 3306 -u root -p  - 连接到mysql</span><br><span class=\"line\">ALTER USER `root`@`localhost` IDENTIFIED BY &apos;password&apos;;  - 修改密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库</p>\n<p><code>数据库服务器 → 数据库 → 表（由列定义） → 行</code></p>\n<ol>\n<li>CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 <strong>数据定义语言（DDL）操作</strong></li>\n<li>INSERT/UPDATE/DELETE /SELECT  称为 <strong>数据操作语言（DML）</strong> 前三项也称 <strong>写</strong>，SELECT 也称 <strong>读</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE company;  - 创建数据库 建议都用 ``</span><br><span class=\"line\">CREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） </span><br><span class=\"line\">USE `company`; - 使用 company 数据库</span><br><span class=\"line\">mysql -u root -p company  - 直接连接到 company 数据库</span><br><span class=\"line\">SELECT DATABASE(); - 查找连接到的数据库</span><br><span class=\"line\">SHOW DATABASES; - 查找有权访问的所有数据库</span><br><span class=\"line\">SHOW VARIABLES LIKE &apos;company&apos;; - 获取当前的数据目录</span><br></pre></td></tr></table></figure>\n<p><code>sudo ls -lhtr /usr/lcoal/mysql/data/</code></p>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE IF NOT EXISITS `company`.`customers`(</span><br><span class=\"line\">`id` int unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">`first_name` varchar(20),</span><br><span class=\"line\">`last_name` varchar(20),</span><br><span class=\"line\">`country` varchar(20)</span><br><span class=\"line\">) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW TABLES - 查看所有表</span><br><span class=\"line\">SHOW CREATE TABLE customers\\G - 查看表结构</span><br><span class=\"line\">DESC customers;</span><br><span class=\"line\">CREATE TABLE new_costomers Like customers - 克隆表结构</span><br></pre></td></tr></table></figure>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>参考</p>\n<p>删除表的所有行最快的方式 <code>TRUNCATE TABLE customers</code>  DDL操作。</p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p><strong>除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>示例数据 <code>https://codeload.github.com/datacharmer/test_db/zip/master</code><br>导入 eg: <code>mysql -u root -p &lt; employees.sql</code></p>\n<h2 id=\"连接到-MySQL\"><a href=\"#连接到-MySQL\" class=\"headerlink\" title=\"连接到 MySQL\"></a>连接到 MySQL</h2><p> \\g 输出水平显示<br> \\G 输出垂直显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -P 3306 -u root -p  - 连接到mysql</span><br><span class=\"line\">ALTER USER `root`@`localhost` IDENTIFIED BY &apos;password&apos;;  - 修改密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库</p>\n<p><code>数据库服务器 → 数据库 → 表（由列定义） → 行</code></p>\n<ol>\n<li>CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 <strong>数据定义语言（DDL）操作</strong></li>\n<li>INSERT/UPDATE/DELETE /SELECT  称为 <strong>数据操作语言（DML）</strong> 前三项也称 <strong>写</strong>，SELECT 也称 <strong>读</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE company;  - 创建数据库 建议都用 ``</span><br><span class=\"line\">CREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） </span><br><span class=\"line\">USE `company`; - 使用 company 数据库</span><br><span class=\"line\">mysql -u root -p company  - 直接连接到 company 数据库</span><br><span class=\"line\">SELECT DATABASE(); - 查找连接到的数据库</span><br><span class=\"line\">SHOW DATABASES; - 查找有权访问的所有数据库</span><br><span class=\"line\">SHOW VARIABLES LIKE &apos;company&apos;; - 获取当前的数据目录</span><br></pre></td></tr></table></figure>\n<p><code>sudo ls -lhtr /usr/lcoal/mysql/data/</code></p>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE IF NOT EXISITS `company`.`customers`(</span><br><span class=\"line\">`id` int unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">`first_name` varchar(20),</span><br><span class=\"line\">`last_name` varchar(20),</span><br><span class=\"line\">`country` varchar(20)</span><br><span class=\"line\">) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW TABLES - 查看所有表</span><br><span class=\"line\">SHOW CREATE TABLE customers\\G - 查看表结构</span><br><span class=\"line\">DESC customers;</span><br><span class=\"line\">CREATE TABLE new_costomers Like customers - 克隆表结构</span><br></pre></td></tr></table></figure>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>参考</p>\n<p>删除表的所有行最快的方式 <code>TRUNCATE TABLE customers</code>  DDL操作。</p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p><strong>除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句</strong></p>\n"},{"title":"mysql索引","date":"2020-03-14T13:57:47.000Z","_content":"\n\nmysql   B+树\n\n正确创建合适的索引是数据库优化的基础\n\n## 索引本质\n索引为了 加速对表中数据行的检索 而创建的 一种**分散存储**的**数据结构**\n\n在 RDBMS系统中  数据的索引都是  硬盘级索引，只有一少部分在内存中\n\nhash索引  等值匹配非常快，但范围查询不可以\n\n\n二叉树性结构存在问题 \n1. 树的高度的太高,IO次数太多\n2. 页为单位，默认4K   MYSQL默认 16K，  可以加载多个关键字，但一次加载关键字太少\n\n### B 树 （多路 平衡 树）\n关键字的个数 = 路数 -1\n\n关键字都有数据区,会多余读取\n\n\n### B + 树 （加强版 多路 平衡 树）\n \nmysql 匹配过程 采用了 左闭合 的比较规则\n\n读取的关键字 以及 子节点的引用\n\n只有最后一层有数据区\n\nIO能力， 排序能力， 扫表能力，查询效率稳定可靠\n\n## 索引\n离散性越好，列的选折性就越好，越适合作为索引。离散性差的作为索引适得其反（例如性别）\n\n### 聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同\n\n### 主键索引  ： \n\n### 辅助索引  ： \n\n### 三星索引 ：\n\n### 联合索引：  \n联合索引 ： eg: `create index idx_name_phoneNum on  user(name,phoneNum,age)`\n单列索引 : 一种特殊的联合索引 `create index idx_name  on  user(name)`\n\n联合索引 用到 范围匹配后面的索引  就会失效\n\n###  最左匹配\n对 索引中关键字的对比 ，从左往右 依次进行比较  abc < acd\n所以使用 like %abc %在左边 不好，因为会查询整个 B+tree\n\n","source":"_posts/MySQL/mysql索引.md","raw":"---\ntitle: mysql索引\ndate: 2020-03-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\nmysql   B+树\n\n正确创建合适的索引是数据库优化的基础\n\n## 索引本质\n索引为了 加速对表中数据行的检索 而创建的 一种**分散存储**的**数据结构**\n\n在 RDBMS系统中  数据的索引都是  硬盘级索引，只有一少部分在内存中\n\nhash索引  等值匹配非常快，但范围查询不可以\n\n\n二叉树性结构存在问题 \n1. 树的高度的太高,IO次数太多\n2. 页为单位，默认4K   MYSQL默认 16K，  可以加载多个关键字，但一次加载关键字太少\n\n### B 树 （多路 平衡 树）\n关键字的个数 = 路数 -1\n\n关键字都有数据区,会多余读取\n\n\n### B + 树 （加强版 多路 平衡 树）\n \nmysql 匹配过程 采用了 左闭合 的比较规则\n\n读取的关键字 以及 子节点的引用\n\n只有最后一层有数据区\n\nIO能力， 排序能力， 扫表能力，查询效率稳定可靠\n\n## 索引\n离散性越好，列的选折性就越好，越适合作为索引。离散性差的作为索引适得其反（例如性别）\n\n### 聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同\n\n### 主键索引  ： \n\n### 辅助索引  ： \n\n### 三星索引 ：\n\n### 联合索引：  \n联合索引 ： eg: `create index idx_name_phoneNum on  user(name,phoneNum,age)`\n单列索引 : 一种特殊的联合索引 `create index idx_name  on  user(name)`\n\n联合索引 用到 范围匹配后面的索引  就会失效\n\n###  最左匹配\n对 索引中关键字的对比 ，从左往右 依次进行比较  abc < acd\n所以使用 like %abc %在左边 不好，因为会查询整个 B+tree\n\n","slug":"MySQL/mysql索引","published":1,"updated":"2020-04-11T10:43:12.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu5t000c74uxdyl3dlod","content":"<p>mysql   B+树</p>\n<p>正确创建合适的索引是数据库优化的基础</p>\n<h2 id=\"索引本质\"><a href=\"#索引本质\" class=\"headerlink\" title=\"索引本质\"></a>索引本质</h2><p>索引为了 加速对表中数据行的检索 而创建的 一种<strong>分散存储</strong>的<strong>数据结构</strong></p>\n<p>在 RDBMS系统中  数据的索引都是  硬盘级索引，只有一少部分在内存中</p>\n<p>hash索引  等值匹配非常快，但范围查询不可以</p>\n<p>二叉树性结构存在问题 </p>\n<ol>\n<li>树的高度的太高,IO次数太多</li>\n<li>页为单位，默认4K   MYSQL默认 16K，  可以加载多个关键字，但一次加载关键字太少</li>\n</ol>\n<h3 id=\"B-树-（多路-平衡-树）\"><a href=\"#B-树-（多路-平衡-树）\" class=\"headerlink\" title=\"B 树 （多路 平衡 树）\"></a>B 树 （多路 平衡 树）</h3><p>关键字的个数 = 路数 -1</p>\n<p>关键字都有数据区,会多余读取</p>\n<h3 id=\"B-树-（加强版-多路-平衡-树）\"><a href=\"#B-树-（加强版-多路-平衡-树）\" class=\"headerlink\" title=\"B + 树 （加强版 多路 平衡 树）\"></a>B + 树 （加强版 多路 平衡 树）</h3><p>mysql 匹配过程 采用了 左闭合 的比较规则</p>\n<p>读取的关键字 以及 子节点的引用</p>\n<p>只有最后一层有数据区</p>\n<p>IO能力， 排序能力， 扫表能力，查询效率稳定可靠</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>离散性越好，列的选折性就越好，越适合作为索引。离散性差的作为索引适得其反（例如性别）</p>\n<h3 id=\"聚集索引-：-数据库-表中数据的-物理顺序-与-键值-的逻辑（索引）-顺序相同\"><a href=\"#聚集索引-：-数据库-表中数据的-物理顺序-与-键值-的逻辑（索引）-顺序相同\" class=\"headerlink\" title=\"聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同\"></a>聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同</h3><h3 id=\"主键索引-：\"><a href=\"#主键索引-：\" class=\"headerlink\" title=\"主键索引  ：\"></a>主键索引  ：</h3><h3 id=\"辅助索引-：\"><a href=\"#辅助索引-：\" class=\"headerlink\" title=\"辅助索引  ：\"></a>辅助索引  ：</h3><h3 id=\"三星索引-：\"><a href=\"#三星索引-：\" class=\"headerlink\" title=\"三星索引 ：\"></a>三星索引 ：</h3><h3 id=\"联合索引：\"><a href=\"#联合索引：\" class=\"headerlink\" title=\"联合索引：\"></a>联合索引：</h3><p>联合索引 ： eg: <code>create index idx_name_phoneNum on  user(name,phoneNum,age)</code><br>单列索引 : 一种特殊的联合索引 <code>create index idx_name  on  user(name)</code></p>\n<p>联合索引 用到 范围匹配后面的索引  就会失效</p>\n<h3 id=\"最左匹配\"><a href=\"#最左匹配\" class=\"headerlink\" title=\"最左匹配\"></a>最左匹配</h3><p>对 索引中关键字的对比 ，从左往右 依次进行比较  abc &lt; acd<br>所以使用 like %abc %在左边 不好，因为会查询整个 B+tree</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mysql   B+树</p>\n<p>正确创建合适的索引是数据库优化的基础</p>\n<h2 id=\"索引本质\"><a href=\"#索引本质\" class=\"headerlink\" title=\"索引本质\"></a>索引本质</h2><p>索引为了 加速对表中数据行的检索 而创建的 一种<strong>分散存储</strong>的<strong>数据结构</strong></p>\n<p>在 RDBMS系统中  数据的索引都是  硬盘级索引，只有一少部分在内存中</p>\n<p>hash索引  等值匹配非常快，但范围查询不可以</p>\n<p>二叉树性结构存在问题 </p>\n<ol>\n<li>树的高度的太高,IO次数太多</li>\n<li>页为单位，默认4K   MYSQL默认 16K，  可以加载多个关键字，但一次加载关键字太少</li>\n</ol>\n<h3 id=\"B-树-（多路-平衡-树）\"><a href=\"#B-树-（多路-平衡-树）\" class=\"headerlink\" title=\"B 树 （多路 平衡 树）\"></a>B 树 （多路 平衡 树）</h3><p>关键字的个数 = 路数 -1</p>\n<p>关键字都有数据区,会多余读取</p>\n<h3 id=\"B-树-（加强版-多路-平衡-树）\"><a href=\"#B-树-（加强版-多路-平衡-树）\" class=\"headerlink\" title=\"B + 树 （加强版 多路 平衡 树）\"></a>B + 树 （加强版 多路 平衡 树）</h3><p>mysql 匹配过程 采用了 左闭合 的比较规则</p>\n<p>读取的关键字 以及 子节点的引用</p>\n<p>只有最后一层有数据区</p>\n<p>IO能力， 排序能力， 扫表能力，查询效率稳定可靠</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>离散性越好，列的选折性就越好，越适合作为索引。离散性差的作为索引适得其反（例如性别）</p>\n<h3 id=\"聚集索引-：-数据库-表中数据的-物理顺序-与-键值-的逻辑（索引）-顺序相同\"><a href=\"#聚集索引-：-数据库-表中数据的-物理顺序-与-键值-的逻辑（索引）-顺序相同\" class=\"headerlink\" title=\"聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同\"></a>聚集索引 ： 数据库 表中数据的 物理顺序 与 键值 的逻辑（索引） 顺序相同</h3><h3 id=\"主键索引-：\"><a href=\"#主键索引-：\" class=\"headerlink\" title=\"主键索引  ：\"></a>主键索引  ：</h3><h3 id=\"辅助索引-：\"><a href=\"#辅助索引-：\" class=\"headerlink\" title=\"辅助索引  ：\"></a>辅助索引  ：</h3><h3 id=\"三星索引-：\"><a href=\"#三星索引-：\" class=\"headerlink\" title=\"三星索引 ：\"></a>三星索引 ：</h3><h3 id=\"联合索引：\"><a href=\"#联合索引：\" class=\"headerlink\" title=\"联合索引：\"></a>联合索引：</h3><p>联合索引 ： eg: <code>create index idx_name_phoneNum on  user(name,phoneNum,age)</code><br>单列索引 : 一种特殊的联合索引 <code>create index idx_name  on  user(name)</code></p>\n<p>联合索引 用到 范围匹配后面的索引  就会失效</p>\n<h3 id=\"最左匹配\"><a href=\"#最左匹配\" class=\"headerlink\" title=\"最左匹配\"></a>最左匹配</h3><p>对 索引中关键字的对比 ，从左往右 依次进行比较  abc &lt; acd<br>所以使用 like %abc %在左边 不好，因为会查询整个 B+tree</p>\n"},{"title":"python操作mysql(ORM)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n\n### 使用SQLAlchemy\n![](https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**安装方法**\n`pip install SQLAlchemy`\n\n\n更多内容参考[flask鱼书项目](https://itswl.github.io/categories/flask/)\n\n\n```\nfrom sqlalchemy import create_engine\n\nfrom sqlalchemy.ext.declarative import declarative_base \nfrom sqlalchemy import Column, Integer, String ,DateTime, Boolean\n\n# 连接数据库\nengine = create_engine('mysql://root:password@localhost:3306/school?charset=utf8')\n## 编码问题\n\n# # 获取基类\nBase = declarative_base()\n\nclass News(Base): # 继承基类\n    __tablename__ = 'students1'\n    id = Column(Integer, primary_key = True)\n    nickname = Column(String(20))\n    name = Column(String(20), nullable = False)\n    sex = Column(String(1))\n    in_time = Column(DateTime)\n    is_vaild = Column(Boolean)\n    idcard = Column(Integer, unique = True)\n        \nNews.metadata.create_all(engine)   # 创建表格\n\n## 新增数据\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\n\nclass OrmTest(object):\n    def __init__(self):\n        self.session = Session()\n\n    def add_one(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n\n    def add_more(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        new_obj2 = News(\n            nickname = 'wei',\n            name = 'lai',\n            sex = '女',\n        )\n        self.session.add_all([new_obj,\n                        new_obj2])\n        self.session.commit()\n        return new_obj\n\n## 查询数据        \n    def get_one(self):\n        return self.session.query(News).get(10)  # get 是选id为2的\n\n    def get_more(self):\n        return self.session.query(News).filter_by(is_vaild=True)\n\n\n## 修改数据\n## 将一条当作多条的一种情况\n    def update_data(self):\n        data_list = self.session.query(News).filter(News.id >= 5)\n        for item in data_list:\n            if item:\n                item.is_vaild = 0 \n                self.session.add(item)  # 加入\n        self.session.commit()  # 提交\n## filter 与 filter_by 的区别\n\n\n## 删除数据\n    def delete_data(self):\n        data = self.session.query(News).get(8)\n        if data:\n            self.session.delete(data)\n            self.session.commit()\n        else:\n            return False\n\n    def delete_data_more(self):\n        delete_list = self.session.query(News).filter(News.id <= 5)\n        for item in delete_list:\n            if item:\n                self.session.delete(item)       \n            else:\n                return False\n        self.session.commit() \n\n\n\ndef main():\n    obj = OrmTest()\n    obj.add_one()\n    obj.add_more()\n\n    data = obj.get_one() \n\n    ## 防止查询失误\n    if data:  \n        print('ID:{0}  {1}'.format(data.id,data.sex))\n    else:\n        print('Not exist')\n\n    data_more = obj.get_more()\n    print(data_more.count())  # 计数\n    for new_obj in data_more:\n        print('ID:{0}  {1} {2} {3}'.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))\n\n    obj.update_data()\n    print('数据修改成功')\n    \n    obj.delete_data()\n    print('数据删除成功')\n\n    obj.delete_data_more()\n\n\nif __name__ == '__main__':\n    main()\n```\n","source":"_posts/MySQL/python操作mysql(ORM).md","raw":"\n---\ntitle: python操作mysql(ORM)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n\n### 使用SQLAlchemy\n![](https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**安装方法**\n`pip install SQLAlchemy`\n\n\n更多内容参考[flask鱼书项目](https://itswl.github.io/categories/flask/)\n\n\n```\nfrom sqlalchemy import create_engine\n\nfrom sqlalchemy.ext.declarative import declarative_base \nfrom sqlalchemy import Column, Integer, String ,DateTime, Boolean\n\n# 连接数据库\nengine = create_engine('mysql://root:password@localhost:3306/school?charset=utf8')\n## 编码问题\n\n# # 获取基类\nBase = declarative_base()\n\nclass News(Base): # 继承基类\n    __tablename__ = 'students1'\n    id = Column(Integer, primary_key = True)\n    nickname = Column(String(20))\n    name = Column(String(20), nullable = False)\n    sex = Column(String(1))\n    in_time = Column(DateTime)\n    is_vaild = Column(Boolean)\n    idcard = Column(Integer, unique = True)\n        \nNews.metadata.create_all(engine)   # 创建表格\n\n## 新增数据\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\n\nclass OrmTest(object):\n    def __init__(self):\n        self.session = Session()\n\n    def add_one(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n\n    def add_more(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        new_obj2 = News(\n            nickname = 'wei',\n            name = 'lai',\n            sex = '女',\n        )\n        self.session.add_all([new_obj,\n                        new_obj2])\n        self.session.commit()\n        return new_obj\n\n## 查询数据        \n    def get_one(self):\n        return self.session.query(News).get(10)  # get 是选id为2的\n\n    def get_more(self):\n        return self.session.query(News).filter_by(is_vaild=True)\n\n\n## 修改数据\n## 将一条当作多条的一种情况\n    def update_data(self):\n        data_list = self.session.query(News).filter(News.id >= 5)\n        for item in data_list:\n            if item:\n                item.is_vaild = 0 \n                self.session.add(item)  # 加入\n        self.session.commit()  # 提交\n## filter 与 filter_by 的区别\n\n\n## 删除数据\n    def delete_data(self):\n        data = self.session.query(News).get(8)\n        if data:\n            self.session.delete(data)\n            self.session.commit()\n        else:\n            return False\n\n    def delete_data_more(self):\n        delete_list = self.session.query(News).filter(News.id <= 5)\n        for item in delete_list:\n            if item:\n                self.session.delete(item)       \n            else:\n                return False\n        self.session.commit() \n\n\n\ndef main():\n    obj = OrmTest()\n    obj.add_one()\n    obj.add_more()\n\n    data = obj.get_one() \n\n    ## 防止查询失误\n    if data:  \n        print('ID:{0}  {1}'.format(data.id,data.sex))\n    else:\n        print('Not exist')\n\n    data_more = obj.get_more()\n    print(data_more.count())  # 计数\n    for new_obj in data_more:\n        print('ID:{0}  {1} {2} {3}'.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))\n\n    obj.update_data()\n    print('数据修改成功')\n    \n    obj.delete_data()\n    print('数据删除成功')\n\n    obj.delete_data_more()\n\n\nif __name__ == '__main__':\n    main()\n```\n","slug":"MySQL/python操作mysql(ORM)","published":1,"updated":"2020-04-10T16:46:16.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu5z000d74uxpw8c1jyt","content":"<h3 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>安装方法</strong><br><code>pip install SQLAlchemy</code></p>\n<p>更多内容参考<a href=\"https://itswl.github.io/categories/flask/\" target=\"_blank\" rel=\"noopener\">flask鱼书项目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base </span><br><span class=\"line\">from sqlalchemy import Column, Integer, String ,DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接数据库</span><br><span class=\"line\">engine = create_engine(&apos;mysql://root:password@localhost:3306/school?charset=utf8&apos;)</span><br><span class=\"line\">## 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\"># # 获取基类</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\">class News(Base): # 继承基类</span><br><span class=\"line\">    __tablename__ = &apos;students1&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key = True)</span><br><span class=\"line\">    nickname = Column(String(20))</span><br><span class=\"line\">    name = Column(String(20), nullable = False)</span><br><span class=\"line\">    sex = Column(String(1))</span><br><span class=\"line\">    in_time = Column(DateTime)</span><br><span class=\"line\">    is_vaild = Column(Boolean)</span><br><span class=\"line\">    idcard = Column(Integer, unique = True)</span><br><span class=\"line\">        </span><br><span class=\"line\">News.metadata.create_all(engine)   # 创建表格</span><br><span class=\"line\"></span><br><span class=\"line\">## 新增数据</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\">class OrmTest(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_more(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        new_obj2 = News(</span><br><span class=\"line\">            nickname = &apos;wei&apos;,</span><br><span class=\"line\">            name = &apos;lai&apos;,</span><br><span class=\"line\">            sex = &apos;女&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add_all([new_obj,</span><br><span class=\"line\">                        new_obj2])</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询数据        </span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.session.query(News).get(10)  # get 是选id为2的</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.session.query(News).filter_by(is_vaild=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 修改数据</span><br><span class=\"line\">## 将一条当作多条的一种情况</span><br><span class=\"line\">    def update_data(self):</span><br><span class=\"line\">        data_list = self.session.query(News).filter(News.id &gt;= 5)</span><br><span class=\"line\">        for item in data_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                item.is_vaild = 0 </span><br><span class=\"line\">                self.session.add(item)  # 加入</span><br><span class=\"line\">        self.session.commit()  # 提交</span><br><span class=\"line\">## filter 与 filter_by 的区别</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 删除数据</span><br><span class=\"line\">    def delete_data(self):</span><br><span class=\"line\">        data = self.session.query(News).get(8)</span><br><span class=\"line\">        if data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_data_more(self):</span><br><span class=\"line\">        delete_list = self.session.query(News).filter(News.id &lt;= 5)</span><br><span class=\"line\">        for item in delete_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                self.session.delete(item)       </span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">        self.session.commit() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = OrmTest()</span><br><span class=\"line\">    obj.add_one()</span><br><span class=\"line\">    obj.add_more()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = obj.get_one() </span><br><span class=\"line\"></span><br><span class=\"line\">    ## 防止查询失误</span><br><span class=\"line\">    if data:  </span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125;&apos;.format(data.id,data.sex))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;Not exist&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    data_more = obj.get_more()</span><br><span class=\"line\">    print(data_more.count())  # 计数</span><br><span class=\"line\">    for new_obj in data_more:</span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125; &#123;2&#125; &#123;3&#125;&apos;.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.update_data()</span><br><span class=\"line\">    print(&apos;数据修改成功&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    obj.delete_data()</span><br><span class=\"line\">    print(&apos;数据删除成功&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.delete_data_more()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>安装方法</strong><br><code>pip install SQLAlchemy</code></p>\n<p>更多内容参考<a href=\"https://itswl.github.io/categories/flask/\" target=\"_blank\" rel=\"noopener\">flask鱼书项目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base </span><br><span class=\"line\">from sqlalchemy import Column, Integer, String ,DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接数据库</span><br><span class=\"line\">engine = create_engine(&apos;mysql://root:password@localhost:3306/school?charset=utf8&apos;)</span><br><span class=\"line\">## 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\"># # 获取基类</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\">class News(Base): # 继承基类</span><br><span class=\"line\">    __tablename__ = &apos;students1&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key = True)</span><br><span class=\"line\">    nickname = Column(String(20))</span><br><span class=\"line\">    name = Column(String(20), nullable = False)</span><br><span class=\"line\">    sex = Column(String(1))</span><br><span class=\"line\">    in_time = Column(DateTime)</span><br><span class=\"line\">    is_vaild = Column(Boolean)</span><br><span class=\"line\">    idcard = Column(Integer, unique = True)</span><br><span class=\"line\">        </span><br><span class=\"line\">News.metadata.create_all(engine)   # 创建表格</span><br><span class=\"line\"></span><br><span class=\"line\">## 新增数据</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\">class OrmTest(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_more(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        new_obj2 = News(</span><br><span class=\"line\">            nickname = &apos;wei&apos;,</span><br><span class=\"line\">            name = &apos;lai&apos;,</span><br><span class=\"line\">            sex = &apos;女&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add_all([new_obj,</span><br><span class=\"line\">                        new_obj2])</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询数据        </span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.session.query(News).get(10)  # get 是选id为2的</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.session.query(News).filter_by(is_vaild=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 修改数据</span><br><span class=\"line\">## 将一条当作多条的一种情况</span><br><span class=\"line\">    def update_data(self):</span><br><span class=\"line\">        data_list = self.session.query(News).filter(News.id &gt;= 5)</span><br><span class=\"line\">        for item in data_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                item.is_vaild = 0 </span><br><span class=\"line\">                self.session.add(item)  # 加入</span><br><span class=\"line\">        self.session.commit()  # 提交</span><br><span class=\"line\">## filter 与 filter_by 的区别</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 删除数据</span><br><span class=\"line\">    def delete_data(self):</span><br><span class=\"line\">        data = self.session.query(News).get(8)</span><br><span class=\"line\">        if data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_data_more(self):</span><br><span class=\"line\">        delete_list = self.session.query(News).filter(News.id &lt;= 5)</span><br><span class=\"line\">        for item in delete_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                self.session.delete(item)       </span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">        self.session.commit() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = OrmTest()</span><br><span class=\"line\">    obj.add_one()</span><br><span class=\"line\">    obj.add_more()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = obj.get_one() </span><br><span class=\"line\"></span><br><span class=\"line\">    ## 防止查询失误</span><br><span class=\"line\">    if data:  </span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125;&apos;.format(data.id,data.sex))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;Not exist&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    data_more = obj.get_more()</span><br><span class=\"line\">    print(data_more.count())  # 计数</span><br><span class=\"line\">    for new_obj in data_more:</span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125; &#123;2&#125; &#123;3&#125;&apos;.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.update_data()</span><br><span class=\"line\">    print(&apos;数据修改成功&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    obj.delete_data()</span><br><span class=\"line\">    print(&apos;数据删除成功&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.delete_data_more()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql基础(2)","date":"2019-01-14T13:57:47.000Z","_content":"\n## 外键\n在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。\n\n**在students表中添加一个class id(id的后一列)**\n```\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n**在数据库school中建立一个班级表**\n```\nCREATE TABLE `students`(\n    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(20) NOT NULL,\n) DEFAULT CHARSET 'UTF8';\n```\n**添加/删除 外键**\n```\nALTER TABLE `students`\nADD CONSTRAINT `qe`\n-- 外键约束名称，随意取值 \nFOREIGN KEY (`class id`)\nREFERENCES `class` (`id`);\n\n-- ALTER TABLE `school`.`students` \n-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);\n\n-- 删除外键\nALTER TABLE `students`\nDROP FOREIGN KEY `qe`;\n删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的\n```\n\n通过中间表，可以定义了一个“多对多”关系。\n\n**一对一：**一个表的记录对应到另一个表的唯一一个记录\n\n有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度\n\n## 索引\n在查找记录的时候，想要获得非常快的速度，就需要使用索引\n```\nALTER TABLE `school`.`students` \nADD INDEX `sex search`(`sex`);   \n-- 名称为sex search，使用列 sex 的索引\n-- 也可以多列\nALTER TABLE `school`.`students` \nADD INDEX `search`(`sex`，`name`); \n```\n索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。\n```\nALTER TABLE `school`.`students` \nDROP INDEX `sex search`;\n-- 删除索引\n```\n\n**假设name不重复，那么可以创建唯一索引\n```\n ADD UNIQUE INDEX `search`(`name`) \n```\n**没索引，但对is_vaild进行唯一约束\n```\nALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (is_vaild);\n```\n**通过对数据库表创建索引，可以提高查询速度。**\n\n**通过创建唯一索引，可以保证某一列的值具有唯一性。**\n\n**数据库索引对于用户和应用程序来说都是透明的。**\n\n## 查询补充\n```\nSELECT * FROM `students` WHERE  `id` >= 10 AND `sex` != '女'  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;\n\nSELECT  COUNT(*)  num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n\nSELECT  AVG(id) num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n```\n![GROUP BY](https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![sql内置函数](https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4\n","source":"_posts/MySQL/mysql基础(2).md","raw":"\n---\ntitle: mysql基础(2)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n## 外键\n在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。\n\n**在students表中添加一个class id(id的后一列)**\n```\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n**在数据库school中建立一个班级表**\n```\nCREATE TABLE `students`(\n    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(20) NOT NULL,\n) DEFAULT CHARSET 'UTF8';\n```\n**添加/删除 外键**\n```\nALTER TABLE `students`\nADD CONSTRAINT `qe`\n-- 外键约束名称，随意取值 \nFOREIGN KEY (`class id`)\nREFERENCES `class` (`id`);\n\n-- ALTER TABLE `school`.`students` \n-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);\n\n-- 删除外键\nALTER TABLE `students`\nDROP FOREIGN KEY `qe`;\n删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的\n```\n\n通过中间表，可以定义了一个“多对多”关系。\n\n**一对一：**一个表的记录对应到另一个表的唯一一个记录\n\n有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度\n\n## 索引\n在查找记录的时候，想要获得非常快的速度，就需要使用索引\n```\nALTER TABLE `school`.`students` \nADD INDEX `sex search`(`sex`);   \n-- 名称为sex search，使用列 sex 的索引\n-- 也可以多列\nALTER TABLE `school`.`students` \nADD INDEX `search`(`sex`，`name`); \n```\n索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。\n```\nALTER TABLE `school`.`students` \nDROP INDEX `sex search`;\n-- 删除索引\n```\n\n**假设name不重复，那么可以创建唯一索引\n```\n ADD UNIQUE INDEX `search`(`name`) \n```\n**没索引，但对is_vaild进行唯一约束\n```\nALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (is_vaild);\n```\n**通过对数据库表创建索引，可以提高查询速度。**\n\n**通过创建唯一索引，可以保证某一列的值具有唯一性。**\n\n**数据库索引对于用户和应用程序来说都是透明的。**\n\n## 查询补充\n```\nSELECT * FROM `students` WHERE  `id` >= 10 AND `sex` != '女'  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;\n\nSELECT  COUNT(*)  num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n\nSELECT  AVG(id) num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n```\n![GROUP BY](https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![sql内置函数](https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4\n","slug":"MySQL/mysql基础(2)","published":1,"updated":"2020-04-10T16:46:16.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu6c000g74uxlxdlddk7","content":"<h2 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h2><p>在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。</p>\n<p><strong>在students表中添加一个class id(id的后一列)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在数据库school中建立一个班级表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>添加/删除 外键</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">ADD CONSTRAINT `qe`</span><br><span class=\"line\">-- 外键约束名称，随意取值 </span><br><span class=\"line\">FOREIGN KEY (`class id`)</span><br><span class=\"line\">REFERENCES `class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- ALTER TABLE `school`.`students` </span><br><span class=\"line\">-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除外键</span><br><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">DROP FOREIGN KEY `qe`;</span><br><span class=\"line\">删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的</span><br></pre></td></tr></table></figure></p>\n<p>通过中间表，可以定义了一个“多对多”关系。</p>\n<p><strong>一对一：</strong>一个表的记录对应到另一个表的唯一一个记录</p>\n<p>有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在查找记录的时候，想要获得非常快的速度，就需要使用索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `sex search`(`sex`);   </span><br><span class=\"line\">-- 名称为sex search，使用列 sex 的索引</span><br><span class=\"line\">-- 也可以多列</span><br><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `search`(`sex`，`name`);</span><br></pre></td></tr></table></figure></p>\n<p>索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">DROP INDEX `sex search`;</span><br><span class=\"line\">-- 删除索引</span><br></pre></td></tr></table></figure></p>\n<p>**假设name不重复，那么可以创建唯一索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD UNIQUE INDEX `search`(`name`)</span><br></pre></td></tr></table></figure></p>\n<p>**没索引，但对is_vaild进行唯一约束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE students</span><br><span class=\"line\">ADD CONSTRAINT uni_name UNIQUE (is_vaild);</span><br></pre></td></tr></table></figure></p>\n<p><strong>通过对数据库表创建索引，可以提高查询速度。</strong></p>\n<p><strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong></p>\n<p><strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p>\n<h2 id=\"查询补充\"><a href=\"#查询补充\" class=\"headerlink\" title=\"查询补充\"></a>查询补充</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `students` WHERE  `id` &gt;= 10 AND `sex` != &apos;女&apos;  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  COUNT(*)  num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  AVG(id) num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"GROUP BY\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"sql内置函数\"><br>4</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h2><p>在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。</p>\n<p><strong>在students表中添加一个class id(id的后一列)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在数据库school中建立一个班级表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>添加/删除 外键</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">ADD CONSTRAINT `qe`</span><br><span class=\"line\">-- 外键约束名称，随意取值 </span><br><span class=\"line\">FOREIGN KEY (`class id`)</span><br><span class=\"line\">REFERENCES `class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- ALTER TABLE `school`.`students` </span><br><span class=\"line\">-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除外键</span><br><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">DROP FOREIGN KEY `qe`;</span><br><span class=\"line\">删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的</span><br></pre></td></tr></table></figure></p>\n<p>通过中间表，可以定义了一个“多对多”关系。</p>\n<p><strong>一对一：</strong>一个表的记录对应到另一个表的唯一一个记录</p>\n<p>有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在查找记录的时候，想要获得非常快的速度，就需要使用索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `sex search`(`sex`);   </span><br><span class=\"line\">-- 名称为sex search，使用列 sex 的索引</span><br><span class=\"line\">-- 也可以多列</span><br><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `search`(`sex`，`name`);</span><br></pre></td></tr></table></figure></p>\n<p>索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">DROP INDEX `sex search`;</span><br><span class=\"line\">-- 删除索引</span><br></pre></td></tr></table></figure></p>\n<p>**假设name不重复，那么可以创建唯一索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD UNIQUE INDEX `search`(`name`)</span><br></pre></td></tr></table></figure></p>\n<p>**没索引，但对is_vaild进行唯一约束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE students</span><br><span class=\"line\">ADD CONSTRAINT uni_name UNIQUE (is_vaild);</span><br></pre></td></tr></table></figure></p>\n<p><strong>通过对数据库表创建索引，可以提高查询速度。</strong></p>\n<p><strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong></p>\n<p><strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p>\n<h2 id=\"查询补充\"><a href=\"#查询补充\" class=\"headerlink\" title=\"查询补充\"></a>查询补充</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `students` WHERE  `id` &gt;= 10 AND `sex` != &apos;女&apos;  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  COUNT(*)  num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  AVG(id) num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"GROUP BY\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"sql内置函数\"><br>4</p>\n"},{"title":"数据库","date":"2019-01-14T13:57:47.000Z","_content":"\n\n### 数据库分类\n1. 关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）\n2. 非关系型数据库 (mongoDB,redis等）\n>非关系型数据库分类\n>1 . 文档型\n>2 . key-value型\n>3 . 列式数据库\n>4 . 图形数据库\n\n![文档型](https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![key-value型](https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列式数据库](https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![图形数据库](https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/MySQL/数据库.md","raw":"---\ntitle: 数据库\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n### 数据库分类\n1. 关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）\n2. 非关系型数据库 (mongoDB,redis等）\n>非关系型数据库分类\n>1 . 文档型\n>2 . key-value型\n>3 . 列式数据库\n>4 . 图形数据库\n\n![文档型](https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![key-value型](https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列式数据库](https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![图形数据库](https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"MySQL/数据库","published":1,"updated":"2020-04-10T16:46:16.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu74000i74uxh3hjyiw5","content":"<h3 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h3><ol>\n<li>关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）</li>\n<li>非关系型数据库 (mongoDB,redis等）<blockquote>\n<p>非关系型数据库分类<br>1 . 文档型<br>2 . key-value型<br>3 . 列式数据库<br>4 . 图形数据库</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文档型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key-value型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列式数据库\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图形数据库\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h3><ol>\n<li>关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）</li>\n<li>非关系型数据库 (mongoDB,redis等）<blockquote>\n<p>非关系型数据库分类<br>1 . 文档型<br>2 . key-value型<br>3 . 列式数据库<br>4 . 图形数据库</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文档型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key-value型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列式数据库\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图形数据库\"></p>\n"},{"title":"python操作mysql（增删改查）","date":"2019-01-14T13:57:47.000Z","_content":"\n## 使用mysqlclient\n### 先安装mysqlclient\n网址：https://pypi.org/project/mysqlclient/\npython中可使用pip安装，`pip install mysqlclient`\n>也可以使用别的方法，详细可查看之前的文章：\n[爬取百度百科词条写入数据库](https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n### python操作mysql\n#### 查询数据\n```\nimport MySQLdb\n\n# 获取连接\nconnection = MySQLdb.connect(\n    host = 'localhost',\n    user = 'root',\n    password = 'password',\n    db = 'school',\n    charset = 'utf8mb4',\n    port = 3306 # 默认3306，可不填port\n)\n\n# 获取数据\ncursor = connection.cursor()\ncursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \nresult =  cursor.fetchone()  # 获取第一条数据\nprint (result)\n\n# 关闭连接\nconnection.close()\n```\n**可能会出现异常，所以改写**\n```\nimport MySQLdb\n\ntry:\n# 获取连接\n    connection = MySQLdb.connect(\n        host = 'localhost',\n        user = 'root',\n        password = 'password',\n        db = 'school',\n        charset = 'utf8mb4',\n        port = 3306 # 默认3306，可不填port\n    )\n    # 获取数据\n    cursor = connection.cursor()\n    cursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \n    result =  cursor.fetchone()  # 获取第一条数据\n    print (result)\n\nexcept MySQLdb.Error as e:\n    print('Error : %s ' % e)\n\n\nfinally:\n    # 关闭连接\n    connection.close()\n```\n### 因为这个操作是所有都有的，所以封装成一个对象\n```\nimport MySQLdb\n\nclass MysqlSearch:\n    def __init__(self):\n        self.get_connection()\n    \n    def get_connection(self):\n        try:\n            self.connection = MySQLdb.connect(\n                host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'school',\n                charset = 'utf8mb4',\n                port = 3306 # 默认3306，可不填port\n            )          \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def close_connection(self):\n        try:\n            if self.connection:\n                self.connection.close()\n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def get_one(self):\n            # 获取会话指针\n            cursor = self.connection.cursor()\n            # 准备sql\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            # 执行sql\n            cursor.execute(sql,('weilai',)) \n            # print(cursor.description)\n            ## (('id', 3, 1, 11, 11, 0, 0), ('name', 253, 6, 80, 80, 0, 0), \n            ## ('nickname', 253, 4, 80, 80, 0, 1), ('sex', 254, 3, 4, 4, 0, 1),\n            ## ('in_time', 12, 19, 19, 19, 0, 1))\n            ## 获得一条结果\n            # a = [k[0] for k in cursor.description],\n            ## a = ['id', 'name', 'nickname', 'sex', 'in_time']\n            # b = [k[0] for k in cursor.description],cursor.fetchone()\n            ## (['id', 'name', 'nickname', 'sex', 'in_time'],\n            ##  (7, 'weilai', 'imwl', '男', datetime.datetime(2018, 12, 27, 22, 5, 41)))\n            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  \n            # 关闭 cursor 和连接\n            cursor.close()\n            self.close_connection()\n            return result\n\n    def get_more(self):\n            cursor = self.connection.cursor()\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            cursor.execute(sql,('weilai',)) \n            result = [dict(zip([k[0] for k in cursor.description],row))\n                for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n            cursor.close()\n            self.close_connection()\n            return result\n\n\ndef main():\n    obj = MysqlSearch()\n    # a = obj.get_one()\n    # print(a)\n    # print(a['id'])\n\n    b = obj.get_more()\n    for item in b:\n        print(item)\n\n\nif __name__ == '__main__':\n    main()\n\n# zip函数\n'''\nzip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致\n>>> a = [1,2,3]\n>>> b = [4,5,6]\n>>> c = [4,5,6,7,8]\n>>> zipped = zip(a,b)     # 返回一个对象\n>>> zipped\n<zip object at 0x103abc288>\n>>> list(zipped)  # list() 转换为列表\n[(1, 4), (2, 5), (3, 6)]\n>>> list(zip(a,c))              # 元素个数与最短的列表一致\n[(1, 4), (2, 5), (3, 6)]\n \n>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式\n>>> list(a1)\n[1, 2, 3]\n>>> list(a2)\n[4, 5, 6]\n'''\n```\n** 补充(分页查询)：\n```\n    def get_more_by_pages(self, page, page_size):\n        # 分页查询数据\n        offset =  (page -1) * page_size\n\n        cursor = self.connection.cursor()\n        sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;'\n        cursor.execute(sql,('weilai', offset, page_size)) \n        result = [dict(zip([k[0] for k in cursor.description],row))\n         for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n        cursor.close()\n        self.close_connection()\n        return result\n```\n#### 新增/修改数据到数据库\n**出现问题不应该提交**\n\n```\n    def add_one(self):\n        # 准备SQL\n        try:\n            sql = (\n                \"INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE\"\n                \"(%s,%s,%s,%s);\"\n                )\n            cursor = self.connection.cursor()\n\n            # 可以提交多条\n            cursor.execute(sql,('name1', 'nickname1', '男', None))\n            cursor.execute(sql,('name2', 'nickname2', '男', 'haha'))\n            # 提交事务\n            self.connection.commit()\n            # 关闭cursor和连接\n            cursor.close()\n            \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n            self.connection.rollback()\n        \n        self.close_connection()\n```\n","source":"_posts/MySQL/python操作mysql(增删改查).md","raw":"---\ntitle: python操作mysql（增删改查）\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n## 使用mysqlclient\n### 先安装mysqlclient\n网址：https://pypi.org/project/mysqlclient/\npython中可使用pip安装，`pip install mysqlclient`\n>也可以使用别的方法，详细可查看之前的文章：\n[爬取百度百科词条写入数据库](https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n### python操作mysql\n#### 查询数据\n```\nimport MySQLdb\n\n# 获取连接\nconnection = MySQLdb.connect(\n    host = 'localhost',\n    user = 'root',\n    password = 'password',\n    db = 'school',\n    charset = 'utf8mb4',\n    port = 3306 # 默认3306，可不填port\n)\n\n# 获取数据\ncursor = connection.cursor()\ncursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \nresult =  cursor.fetchone()  # 获取第一条数据\nprint (result)\n\n# 关闭连接\nconnection.close()\n```\n**可能会出现异常，所以改写**\n```\nimport MySQLdb\n\ntry:\n# 获取连接\n    connection = MySQLdb.connect(\n        host = 'localhost',\n        user = 'root',\n        password = 'password',\n        db = 'school',\n        charset = 'utf8mb4',\n        port = 3306 # 默认3306，可不填port\n    )\n    # 获取数据\n    cursor = connection.cursor()\n    cursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \n    result =  cursor.fetchone()  # 获取第一条数据\n    print (result)\n\nexcept MySQLdb.Error as e:\n    print('Error : %s ' % e)\n\n\nfinally:\n    # 关闭连接\n    connection.close()\n```\n### 因为这个操作是所有都有的，所以封装成一个对象\n```\nimport MySQLdb\n\nclass MysqlSearch:\n    def __init__(self):\n        self.get_connection()\n    \n    def get_connection(self):\n        try:\n            self.connection = MySQLdb.connect(\n                host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'school',\n                charset = 'utf8mb4',\n                port = 3306 # 默认3306，可不填port\n            )          \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def close_connection(self):\n        try:\n            if self.connection:\n                self.connection.close()\n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def get_one(self):\n            # 获取会话指针\n            cursor = self.connection.cursor()\n            # 准备sql\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            # 执行sql\n            cursor.execute(sql,('weilai',)) \n            # print(cursor.description)\n            ## (('id', 3, 1, 11, 11, 0, 0), ('name', 253, 6, 80, 80, 0, 0), \n            ## ('nickname', 253, 4, 80, 80, 0, 1), ('sex', 254, 3, 4, 4, 0, 1),\n            ## ('in_time', 12, 19, 19, 19, 0, 1))\n            ## 获得一条结果\n            # a = [k[0] for k in cursor.description],\n            ## a = ['id', 'name', 'nickname', 'sex', 'in_time']\n            # b = [k[0] for k in cursor.description],cursor.fetchone()\n            ## (['id', 'name', 'nickname', 'sex', 'in_time'],\n            ##  (7, 'weilai', 'imwl', '男', datetime.datetime(2018, 12, 27, 22, 5, 41)))\n            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  \n            # 关闭 cursor 和连接\n            cursor.close()\n            self.close_connection()\n            return result\n\n    def get_more(self):\n            cursor = self.connection.cursor()\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            cursor.execute(sql,('weilai',)) \n            result = [dict(zip([k[0] for k in cursor.description],row))\n                for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n            cursor.close()\n            self.close_connection()\n            return result\n\n\ndef main():\n    obj = MysqlSearch()\n    # a = obj.get_one()\n    # print(a)\n    # print(a['id'])\n\n    b = obj.get_more()\n    for item in b:\n        print(item)\n\n\nif __name__ == '__main__':\n    main()\n\n# zip函数\n'''\nzip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致\n>>> a = [1,2,3]\n>>> b = [4,5,6]\n>>> c = [4,5,6,7,8]\n>>> zipped = zip(a,b)     # 返回一个对象\n>>> zipped\n<zip object at 0x103abc288>\n>>> list(zipped)  # list() 转换为列表\n[(1, 4), (2, 5), (3, 6)]\n>>> list(zip(a,c))              # 元素个数与最短的列表一致\n[(1, 4), (2, 5), (3, 6)]\n \n>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式\n>>> list(a1)\n[1, 2, 3]\n>>> list(a2)\n[4, 5, 6]\n'''\n```\n** 补充(分页查询)：\n```\n    def get_more_by_pages(self, page, page_size):\n        # 分页查询数据\n        offset =  (page -1) * page_size\n\n        cursor = self.connection.cursor()\n        sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;'\n        cursor.execute(sql,('weilai', offset, page_size)) \n        result = [dict(zip([k[0] for k in cursor.description],row))\n         for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n        cursor.close()\n        self.close_connection()\n        return result\n```\n#### 新增/修改数据到数据库\n**出现问题不应该提交**\n\n```\n    def add_one(self):\n        # 准备SQL\n        try:\n            sql = (\n                \"INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE\"\n                \"(%s,%s,%s,%s);\"\n                )\n            cursor = self.connection.cursor()\n\n            # 可以提交多条\n            cursor.execute(sql,('name1', 'nickname1', '男', None))\n            cursor.execute(sql,('name2', 'nickname2', '男', 'haha'))\n            # 提交事务\n            self.connection.commit()\n            # 关闭cursor和连接\n            cursor.close()\n            \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n            self.connection.rollback()\n        \n        self.close_connection()\n```\n","slug":"MySQL/python操作mysql(增删改查)","published":1,"updated":"2020-04-10T16:46:16.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu7k000k74uxf1iuhc32","content":"<h2 id=\"使用mysqlclient\"><a href=\"#使用mysqlclient\" class=\"headerlink\" title=\"使用mysqlclient\"></a>使用mysqlclient</h2><h3 id=\"先安装mysqlclient\"><a href=\"#先安装mysqlclient\" class=\"headerlink\" title=\"先安装mysqlclient\"></a>先安装mysqlclient</h3><p>网址：<a href=\"https://pypi.org/project/mysqlclient/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/mysqlclient/</a><br>python中可使用pip安装，<code>pip install mysqlclient</code></p>\n<blockquote>\n<p>也可以使用别的方法，详细可查看之前的文章：<br><a href=\"https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">爬取百度百科词条写入数据库</a></p>\n</blockquote>\n<h3 id=\"python操作mysql\"><a href=\"#python操作mysql\" class=\"headerlink\" title=\"python操作mysql\"></a>python操作mysql</h3><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">connection = MySQLdb.connect(</span><br><span class=\"line\">    host = &apos;localhost&apos;,</span><br><span class=\"line\">    user = &apos;root&apos;,</span><br><span class=\"line\">    password = &apos;password&apos;,</span><br><span class=\"line\">    db = &apos;school&apos;,</span><br><span class=\"line\">    charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">    port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数据</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\">cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">print (result)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>可能会出现异常，所以改写</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">    connection = MySQLdb.connect(</span><br><span class=\"line\">        host = &apos;localhost&apos;,</span><br><span class=\"line\">        user = &apos;root&apos;,</span><br><span class=\"line\">        password = &apos;password&apos;,</span><br><span class=\"line\">        db = &apos;school&apos;,</span><br><span class=\"line\">        charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">        port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">    )</span><br><span class=\"line\">    # 获取数据</span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">    result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">    print (result)</span><br><span class=\"line\"></span><br><span class=\"line\">except MySQLdb.Error as e:</span><br><span class=\"line\">    print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 关闭连接</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"因为这个操作是所有都有的，所以封装成一个对象\"><a href=\"#因为这个操作是所有都有的，所以封装成一个对象\" class=\"headerlink\" title=\"因为这个操作是所有都有的，所以封装成一个对象\"></a>因为这个操作是所有都有的，所以封装成一个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">class MysqlSearch:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.get_connection()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.connection = MySQLdb.connect(</span><br><span class=\"line\">                host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;school&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">            )          </span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def close_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if self.connection:</span><br><span class=\"line\">                self.connection.close()</span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">            # 获取会话指针</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            # 准备sql</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            # 执行sql</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            # print(cursor.description)</span><br><span class=\"line\">            ## ((&apos;id&apos;, 3, 1, 11, 11, 0, 0), (&apos;name&apos;, 253, 6, 80, 80, 0, 0), </span><br><span class=\"line\">            ## (&apos;nickname&apos;, 253, 4, 80, 80, 0, 1), (&apos;sex&apos;, 254, 3, 4, 4, 0, 1),</span><br><span class=\"line\">            ## (&apos;in_time&apos;, 12, 19, 19, 19, 0, 1))</span><br><span class=\"line\">            ## 获得一条结果</span><br><span class=\"line\">            # a = [k[0] for k in cursor.description],</span><br><span class=\"line\">            ## a = [&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;]</span><br><span class=\"line\">            # b = [k[0] for k in cursor.description],cursor.fetchone()</span><br><span class=\"line\">            ## ([&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;],</span><br><span class=\"line\">            ##  (7, &apos;weilai&apos;, &apos;imwl&apos;, &apos;男&apos;, datetime.datetime(2018, 12, 27, 22, 5, 41)))</span><br><span class=\"line\">            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  </span><br><span class=\"line\">            # 关闭 cursor 和连接</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">                for row in cursor.fetchall()] </span><br><span class=\"line\">            # print(result) </span><br><span class=\"line\">            # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">            # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">            # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = MysqlSearch()</span><br><span class=\"line\">    # a = obj.get_one()</span><br><span class=\"line\">    # print(a)</span><br><span class=\"line\">    # print(a[&apos;id&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    b = obj.get_more()</span><br><span class=\"line\">    for item in b:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"># zip函数</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">zip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致</span><br><span class=\"line\">&gt;&gt;&gt; a = [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; b = [4,5,6]</span><br><span class=\"line\">&gt;&gt;&gt; c = [4,5,6,7,8]</span><br><span class=\"line\">&gt;&gt;&gt; zipped = zip(a,b)     # 返回一个对象</span><br><span class=\"line\">&gt;&gt;&gt; zipped</span><br><span class=\"line\">&lt;zip object at 0x103abc288&gt;</span><br><span class=\"line\">&gt;&gt;&gt; list(zipped)  # list() 转换为列表</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\">&gt;&gt;&gt; list(zip(a,c))              # 元素个数与最短的列表一致</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt;&gt;&gt; a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span><br><span class=\"line\">&gt;&gt;&gt; list(a1)</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; list(a2)</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>** 补充(分页查询)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_more_by_pages(self, page, page_size):</span><br><span class=\"line\">    # 分页查询数据</span><br><span class=\"line\">    offset =  (page -1) * page_size</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = self.connection.cursor()</span><br><span class=\"line\">    sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;&apos;</span><br><span class=\"line\">    cursor.execute(sql,(&apos;weilai&apos;, offset, page_size)) </span><br><span class=\"line\">    result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">     for row in cursor.fetchall()] </span><br><span class=\"line\">        # print(result) </span><br><span class=\"line\">        # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">        # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">        # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    self.close_connection()</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"新增-修改数据到数据库\"><a href=\"#新增-修改数据到数据库\" class=\"headerlink\" title=\"新增/修改数据到数据库\"></a>新增/修改数据到数据库</h4><p><strong>出现问题不应该提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add_one(self):</span><br><span class=\"line\">    # 准备SQL</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        sql = (</span><br><span class=\"line\">            &quot;INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE&quot;</span><br><span class=\"line\">            &quot;(%s,%s,%s,%s);&quot;</span><br><span class=\"line\">            )</span><br><span class=\"line\">        cursor = self.connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 可以提交多条</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name1&apos;, &apos;nickname1&apos;, &apos;男&apos;, None))</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name2&apos;, &apos;nickname2&apos;, &apos;男&apos;, &apos;haha&apos;))</span><br><span class=\"line\">        # 提交事务</span><br><span class=\"line\">        self.connection.commit()</span><br><span class=\"line\">        # 关闭cursor和连接</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">    except MySQLdb.Error as e:</span><br><span class=\"line\">        print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\">        self.connection.rollback()</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.close_connection()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用mysqlclient\"><a href=\"#使用mysqlclient\" class=\"headerlink\" title=\"使用mysqlclient\"></a>使用mysqlclient</h2><h3 id=\"先安装mysqlclient\"><a href=\"#先安装mysqlclient\" class=\"headerlink\" title=\"先安装mysqlclient\"></a>先安装mysqlclient</h3><p>网址：<a href=\"https://pypi.org/project/mysqlclient/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/mysqlclient/</a><br>python中可使用pip安装，<code>pip install mysqlclient</code></p>\n<blockquote>\n<p>也可以使用别的方法，详细可查看之前的文章：<br><a href=\"https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">爬取百度百科词条写入数据库</a></p>\n</blockquote>\n<h3 id=\"python操作mysql\"><a href=\"#python操作mysql\" class=\"headerlink\" title=\"python操作mysql\"></a>python操作mysql</h3><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">connection = MySQLdb.connect(</span><br><span class=\"line\">    host = &apos;localhost&apos;,</span><br><span class=\"line\">    user = &apos;root&apos;,</span><br><span class=\"line\">    password = &apos;password&apos;,</span><br><span class=\"line\">    db = &apos;school&apos;,</span><br><span class=\"line\">    charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">    port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数据</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\">cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">print (result)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>可能会出现异常，所以改写</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">    connection = MySQLdb.connect(</span><br><span class=\"line\">        host = &apos;localhost&apos;,</span><br><span class=\"line\">        user = &apos;root&apos;,</span><br><span class=\"line\">        password = &apos;password&apos;,</span><br><span class=\"line\">        db = &apos;school&apos;,</span><br><span class=\"line\">        charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">        port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">    )</span><br><span class=\"line\">    # 获取数据</span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">    result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">    print (result)</span><br><span class=\"line\"></span><br><span class=\"line\">except MySQLdb.Error as e:</span><br><span class=\"line\">    print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 关闭连接</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"因为这个操作是所有都有的，所以封装成一个对象\"><a href=\"#因为这个操作是所有都有的，所以封装成一个对象\" class=\"headerlink\" title=\"因为这个操作是所有都有的，所以封装成一个对象\"></a>因为这个操作是所有都有的，所以封装成一个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">class MysqlSearch:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.get_connection()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.connection = MySQLdb.connect(</span><br><span class=\"line\">                host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;school&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">            )          </span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def close_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if self.connection:</span><br><span class=\"line\">                self.connection.close()</span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">            # 获取会话指针</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            # 准备sql</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            # 执行sql</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            # print(cursor.description)</span><br><span class=\"line\">            ## ((&apos;id&apos;, 3, 1, 11, 11, 0, 0), (&apos;name&apos;, 253, 6, 80, 80, 0, 0), </span><br><span class=\"line\">            ## (&apos;nickname&apos;, 253, 4, 80, 80, 0, 1), (&apos;sex&apos;, 254, 3, 4, 4, 0, 1),</span><br><span class=\"line\">            ## (&apos;in_time&apos;, 12, 19, 19, 19, 0, 1))</span><br><span class=\"line\">            ## 获得一条结果</span><br><span class=\"line\">            # a = [k[0] for k in cursor.description],</span><br><span class=\"line\">            ## a = [&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;]</span><br><span class=\"line\">            # b = [k[0] for k in cursor.description],cursor.fetchone()</span><br><span class=\"line\">            ## ([&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;],</span><br><span class=\"line\">            ##  (7, &apos;weilai&apos;, &apos;imwl&apos;, &apos;男&apos;, datetime.datetime(2018, 12, 27, 22, 5, 41)))</span><br><span class=\"line\">            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  </span><br><span class=\"line\">            # 关闭 cursor 和连接</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">                for row in cursor.fetchall()] </span><br><span class=\"line\">            # print(result) </span><br><span class=\"line\">            # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">            # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">            # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = MysqlSearch()</span><br><span class=\"line\">    # a = obj.get_one()</span><br><span class=\"line\">    # print(a)</span><br><span class=\"line\">    # print(a[&apos;id&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    b = obj.get_more()</span><br><span class=\"line\">    for item in b:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"># zip函数</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">zip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致</span><br><span class=\"line\">&gt;&gt;&gt; a = [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; b = [4,5,6]</span><br><span class=\"line\">&gt;&gt;&gt; c = [4,5,6,7,8]</span><br><span class=\"line\">&gt;&gt;&gt; zipped = zip(a,b)     # 返回一个对象</span><br><span class=\"line\">&gt;&gt;&gt; zipped</span><br><span class=\"line\">&lt;zip object at 0x103abc288&gt;</span><br><span class=\"line\">&gt;&gt;&gt; list(zipped)  # list() 转换为列表</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\">&gt;&gt;&gt; list(zip(a,c))              # 元素个数与最短的列表一致</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt;&gt;&gt; a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span><br><span class=\"line\">&gt;&gt;&gt; list(a1)</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; list(a2)</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>** 补充(分页查询)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_more_by_pages(self, page, page_size):</span><br><span class=\"line\">    # 分页查询数据</span><br><span class=\"line\">    offset =  (page -1) * page_size</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = self.connection.cursor()</span><br><span class=\"line\">    sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;&apos;</span><br><span class=\"line\">    cursor.execute(sql,(&apos;weilai&apos;, offset, page_size)) </span><br><span class=\"line\">    result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">     for row in cursor.fetchall()] </span><br><span class=\"line\">        # print(result) </span><br><span class=\"line\">        # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">        # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">        # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    self.close_connection()</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"新增-修改数据到数据库\"><a href=\"#新增-修改数据到数据库\" class=\"headerlink\" title=\"新增/修改数据到数据库\"></a>新增/修改数据到数据库</h4><p><strong>出现问题不应该提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add_one(self):</span><br><span class=\"line\">    # 准备SQL</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        sql = (</span><br><span class=\"line\">            &quot;INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE&quot;</span><br><span class=\"line\">            &quot;(%s,%s,%s,%s);&quot;</span><br><span class=\"line\">            )</span><br><span class=\"line\">        cursor = self.connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 可以提交多条</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name1&apos;, &apos;nickname1&apos;, &apos;男&apos;, None))</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name2&apos;, &apos;nickname2&apos;, &apos;男&apos;, &apos;haha&apos;))</span><br><span class=\"line\">        # 提交事务</span><br><span class=\"line\">        self.connection.commit()</span><br><span class=\"line\">        # 关闭cursor和连接</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">    except MySQLdb.Error as e:</span><br><span class=\"line\">        print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\">        self.connection.rollback()</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.close_connection()</span><br></pre></td></tr></table></figure>\n"},{"title":"dockerfile","date":"2019-07-02T03:05:31.000Z","_content":"\n## 简介\n\nDockerfile是由一系列命令和参数构成的脚本，这些命令应用于操作系统基础镜像并最终创建的一个新镜像；\n\n## 常用命令\n`FROM image:tag` : 使用的基础镜像构建\n`MAINTAINER user_info` : 声明镜像维护者信息\n`LABEL value` :  镜像描述元信息 (可以多条)\n`ENV key value` : 设置环境变量 (可以多条)\n`RUN command` :  构建镜像时需要运行的命令 (可以多条)\n`WORKDIR path_dir` : 设置终端默认登录进来的工作目录\n`EXPOSE port` :  当前容器对外暴露出的端口\n`ADD source_dir/file dest_dir/file` :  宿主机内文件复制到容器，压缩文件会解压\n`COPY source_dir/file dest_dir/file` : 同 `ADD`，不过压缩文件不解压\n`VOLUME ` : 创建一个 可以从本机或其他容器挂载的挂载点，一般用来存放数据库和需要保存的数据\n`CMD ` : 指定容器启动时要运行的命令，多个CMD，最后一个生效      CMD <command> 或CMD [\"<executeable>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]\n`ENTRYPOINT` : 指定容器启动时要运行的命令\n`ONBUILD ` : 为子镜像服务\n```\n简单实例：父镜像Dockerfile:\nFROM centos\nONBUILD RUN yum -y install vim\nCMD /bin/bash\n \n子镜像简单点：\nFROM parent\n```\n\n## Dockerfile\n```\nFROM centos\nMAINTAINER caofeng<caofeng2012@126.com>\n \nLABEL name=\"imwl CentOS Image\" \\\n    build-date=\"20180916\"\n    \nENV WORKPATH /home/\nWORKDIR $WORKPATH\n \nRUN yum -y install net-tools\nRUN yum -y install vim\n \nEXPOSE 80\nCMD /bin/bash\n```\n","source":"_posts/docker/DockerFile.md","raw":"---\ntitle: dockerfile\ndate: 2019-07-02 11:05:31\ntags:\ncategories: docker\n---\n\n## 简介\n\nDockerfile是由一系列命令和参数构成的脚本，这些命令应用于操作系统基础镜像并最终创建的一个新镜像；\n\n## 常用命令\n`FROM image:tag` : 使用的基础镜像构建\n`MAINTAINER user_info` : 声明镜像维护者信息\n`LABEL value` :  镜像描述元信息 (可以多条)\n`ENV key value` : 设置环境变量 (可以多条)\n`RUN command` :  构建镜像时需要运行的命令 (可以多条)\n`WORKDIR path_dir` : 设置终端默认登录进来的工作目录\n`EXPOSE port` :  当前容器对外暴露出的端口\n`ADD source_dir/file dest_dir/file` :  宿主机内文件复制到容器，压缩文件会解压\n`COPY source_dir/file dest_dir/file` : 同 `ADD`，不过压缩文件不解压\n`VOLUME ` : 创建一个 可以从本机或其他容器挂载的挂载点，一般用来存放数据库和需要保存的数据\n`CMD ` : 指定容器启动时要运行的命令，多个CMD，最后一个生效      CMD <command> 或CMD [\"<executeable>\",\"<param1>\",\"<param2>\",...] CMD [\"<param1>\",\"<param2>\",...]\n`ENTRYPOINT` : 指定容器启动时要运行的命令\n`ONBUILD ` : 为子镜像服务\n```\n简单实例：父镜像Dockerfile:\nFROM centos\nONBUILD RUN yum -y install vim\nCMD /bin/bash\n \n子镜像简单点：\nFROM parent\n```\n\n## Dockerfile\n```\nFROM centos\nMAINTAINER caofeng<caofeng2012@126.com>\n \nLABEL name=\"imwl CentOS Image\" \\\n    build-date=\"20180916\"\n    \nENV WORKPATH /home/\nWORKDIR $WORKPATH\n \nRUN yum -y install net-tools\nRUN yum -y install vim\n \nEXPOSE 80\nCMD /bin/bash\n```\n","slug":"docker/DockerFile","published":1,"updated":"2020-04-10T16:46:16.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu7w000m74uxnkbxmpho","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于操作系统基础镜像并最终创建的一个新镜像；</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><code>FROM image:tag</code> : 使用的基础镜像构建<br><code>MAINTAINER user_info</code> : 声明镜像维护者信息<br><code>LABEL value</code> :  镜像描述元信息 (可以多条)<br><code>ENV key value</code> : 设置环境变量 (可以多条)<br><code>RUN command</code> :  构建镜像时需要运行的命令 (可以多条)<br><code>WORKDIR path_dir</code> : 设置终端默认登录进来的工作目录<br><code>EXPOSE port</code> :  当前容器对外暴露出的端口<br><code>ADD source_dir/file dest_dir/file</code> :  宿主机内文件复制到容器，压缩文件会解压<br><code>COPY source_dir/file dest_dir/file</code> : 同 <code>ADD</code>，不过压缩文件不解压<br><code>VOLUME</code> : 创建一个 可以从本机或其他容器挂载的挂载点，一般用来存放数据库和需要保存的数据<br><code>CMD</code> : 指定容器启动时要运行的命令，多个CMD，最后一个生效      CMD <command> 或CMD [“<executeable>“,”<param1>“,”<param2>“,…] CMD [“<param1>“,”<param2>“,…]<br><code>ENTRYPOINT</code> : 指定容器启动时要运行的命令<br><code>ONBUILD</code> : 为子镜像服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单实例：父镜像Dockerfile:</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">ONBUILD RUN yum -y install vim</span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"> </span><br><span class=\"line\">子镜像简单点：</span><br><span class=\"line\">FROM parent</span><br></pre></td></tr></table></figure></param2></param1></param2></param1></executeable></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER caofeng&lt;caofeng2012@126.com&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">LABEL name=&quot;imwl CentOS Image&quot; \\</span><br><span class=\"line\">    build-date=&quot;20180916&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">ENV WORKPATH /home/</span><br><span class=\"line\">WORKDIR $WORKPATH</span><br><span class=\"line\"> </span><br><span class=\"line\">RUN yum -y install net-tools</span><br><span class=\"line\">RUN yum -y install vim</span><br><span class=\"line\"> </span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于操作系统基础镜像并最终创建的一个新镜像；</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><code>FROM image:tag</code> : 使用的基础镜像构建<br><code>MAINTAINER user_info</code> : 声明镜像维护者信息<br><code>LABEL value</code> :  镜像描述元信息 (可以多条)<br><code>ENV key value</code> : 设置环境变量 (可以多条)<br><code>RUN command</code> :  构建镜像时需要运行的命令 (可以多条)<br><code>WORKDIR path_dir</code> : 设置终端默认登录进来的工作目录<br><code>EXPOSE port</code> :  当前容器对外暴露出的端口<br><code>ADD source_dir/file dest_dir/file</code> :  宿主机内文件复制到容器，压缩文件会解压<br><code>COPY source_dir/file dest_dir/file</code> : 同 <code>ADD</code>，不过压缩文件不解压<br><code>VOLUME</code> : 创建一个 可以从本机或其他容器挂载的挂载点，一般用来存放数据库和需要保存的数据<br><code>CMD</code> : 指定容器启动时要运行的命令，多个CMD，最后一个生效      CMD <command> 或CMD [“<executeable>“,”<param1>“,”<param2>“,…] CMD [“<param1>“,”<param2>“,…]<br><code>ENTRYPOINT</code> : 指定容器启动时要运行的命令<br><code>ONBUILD</code> : 为子镜像服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简单实例：父镜像Dockerfile:</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\">ONBUILD RUN yum -y install vim</span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"> </span><br><span class=\"line\">子镜像简单点：</span><br><span class=\"line\">FROM parent</span><br></pre></td></tr></table></figure></param2></param1></param2></param1></executeable></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER caofeng&lt;caofeng2012@126.com&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">LABEL name=&quot;imwl CentOS Image&quot; \\</span><br><span class=\"line\">    build-date=&quot;20180916&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">ENV WORKPATH /home/</span><br><span class=\"line\">WORKDIR $WORKPATH</span><br><span class=\"line\"> </span><br><span class=\"line\">RUN yum -y install net-tools</span><br><span class=\"line\">RUN yum -y install vim</span><br><span class=\"line\"> </span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure>\n"},{"title":"docker_windos10下","date":"2019-08-04T03:51:16.000Z","_content":"\n\n## 准备工作\n### 安装wsl linux\n1. 开启Linux子系统，以**管理员权限**打开 PowerShell\n```\n# 启用虚拟机平台\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform\n# 开启Linux子系统\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n```\n2. 开启开发者模式，`WIN + S` 搜索 开发者设置，打开后选择 开发者模式\n3. `WIN + S` 搜索 store， 打开 Microsoft Store（微软应用商店）,eg: 搜索 Ubuntu ，选择 Ubuntu 18.04 LST 进行安装\n4. 待安装完成后，从应用中打开 Ubuntu 18.04 LST\n#### 优化\n1. 换源\n\n2. 打开自动切换到root用户\n\n当前用户目录下 `vi .bash_profile  `  添加以下内容\n```\n#.bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n\n \n\n         . ~/.bashrc\n\nfi\n\nsudo su - root\n\nPATH=$PATH:$HOME/bin\n\nexport PATH\n```\n\n修改/etc/sudoers文件\n\n```\nsu - root\nchmod u+w /etc/sudoers\n\nvi /etc/sudoers # 编辑文件，在root ALL=(ALL)ALL行下添加\n\nxxx ALL=(ALL) NOPASSWD: ALL\n\n# XXX为用户名。\n\nchmod u－w /etc/sudoers   # 回到文件的原权限！\n```\n### 安装docker\n实际上是在Win10中安装Docker桌面服务，Linux子系统中安装客户端，连接Win10上的Docker服务，进行操作\n\n在Ubuntu子系统中安装Docker\n```\n# 更新apt包管理列表\nsudo apt-get update -y\n\n# 安装依赖包\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n# 加入Docker官方PGP公钥\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n# 确认指纹\nsudo apt-key fingerprint 0EBFCD88\n\n# 将stable（稳定版）Docker加入apt源中\n#\n# If you want to live on the edge, you can change \"stable\" below to \"test\" or\n# \"nightly\". I highly recommend sticking with stable!\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n# 更新apt包管理列表\nsudo apt-get update -y\n\n# 安装Docker CE最新版本\nsudo apt-get install -y docker-ce\n\n# 允许当前用户访问Docker CLI，不必使用root\nsudo usermod -aG docker $USER\n\n# 此时执行 docker version 会提示如下错误：\n# Cannot connect to the Docker daemon at unix:///var/run/docker.sock.\n\n# 配置Windows Docker服务地址 （Settings => General => Expose daemon on tcp://localhost:2375 without TLS）\necho \"export DOCKER_HOST=localhost:2375\" >> ~/.bashrc  \n# 使配置生效\n. ~/.bashrc\n```\n### powershell其他操作\n使用管理员模式，打开PowerShell\n```\n启动停止 wsl 服务\n# 停止子系统服务\nnet stop LxssManager\n# 启动子系统服务\nnet start LxssManager\n```\n备份恢复，导出、导入子系统\n```\n# d:\\Ubuntu-18.04.tar 导出文件路径\nwsl --export Ubuntu-18.04 d:\\Ubuntu-18.04.tar\n# d:\\wsl\\u18.04 子系统导入后的安装路径\nwsl --import Ubuntu-18.04 d:\\wsl\\u18.04 d:\\Ubuntu-18.04.tar\n```\n","source":"_posts/docker/基础知windows10+docker+wsl+ubuntu.md","raw":"---\n\ntitle: docker_windos10下\n\ndate: 2019-8-4 11:51:16\n\ntags: \n\ncategories: docker\n\n---\n\n\n## 准备工作\n### 安装wsl linux\n1. 开启Linux子系统，以**管理员权限**打开 PowerShell\n```\n# 启用虚拟机平台\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform\n# 开启Linux子系统\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n```\n2. 开启开发者模式，`WIN + S` 搜索 开发者设置，打开后选择 开发者模式\n3. `WIN + S` 搜索 store， 打开 Microsoft Store（微软应用商店）,eg: 搜索 Ubuntu ，选择 Ubuntu 18.04 LST 进行安装\n4. 待安装完成后，从应用中打开 Ubuntu 18.04 LST\n#### 优化\n1. 换源\n\n2. 打开自动切换到root用户\n\n当前用户目录下 `vi .bash_profile  `  添加以下内容\n```\n#.bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n\n \n\n         . ~/.bashrc\n\nfi\n\nsudo su - root\n\nPATH=$PATH:$HOME/bin\n\nexport PATH\n```\n\n修改/etc/sudoers文件\n\n```\nsu - root\nchmod u+w /etc/sudoers\n\nvi /etc/sudoers # 编辑文件，在root ALL=(ALL)ALL行下添加\n\nxxx ALL=(ALL) NOPASSWD: ALL\n\n# XXX为用户名。\n\nchmod u－w /etc/sudoers   # 回到文件的原权限！\n```\n### 安装docker\n实际上是在Win10中安装Docker桌面服务，Linux子系统中安装客户端，连接Win10上的Docker服务，进行操作\n\n在Ubuntu子系统中安装Docker\n```\n# 更新apt包管理列表\nsudo apt-get update -y\n\n# 安装依赖包\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n\n# 加入Docker官方PGP公钥\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n# 确认指纹\nsudo apt-key fingerprint 0EBFCD88\n\n# 将stable（稳定版）Docker加入apt源中\n#\n# If you want to live on the edge, you can change \"stable\" below to \"test\" or\n# \"nightly\". I highly recommend sticking with stable!\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n# 更新apt包管理列表\nsudo apt-get update -y\n\n# 安装Docker CE最新版本\nsudo apt-get install -y docker-ce\n\n# 允许当前用户访问Docker CLI，不必使用root\nsudo usermod -aG docker $USER\n\n# 此时执行 docker version 会提示如下错误：\n# Cannot connect to the Docker daemon at unix:///var/run/docker.sock.\n\n# 配置Windows Docker服务地址 （Settings => General => Expose daemon on tcp://localhost:2375 without TLS）\necho \"export DOCKER_HOST=localhost:2375\" >> ~/.bashrc  \n# 使配置生效\n. ~/.bashrc\n```\n### powershell其他操作\n使用管理员模式，打开PowerShell\n```\n启动停止 wsl 服务\n# 停止子系统服务\nnet stop LxssManager\n# 启动子系统服务\nnet start LxssManager\n```\n备份恢复，导出、导入子系统\n```\n# d:\\Ubuntu-18.04.tar 导出文件路径\nwsl --export Ubuntu-18.04 d:\\Ubuntu-18.04.tar\n# d:\\wsl\\u18.04 子系统导入后的安装路径\nwsl --import Ubuntu-18.04 d:\\wsl\\u18.04 d:\\Ubuntu-18.04.tar\n```\n","slug":"docker/基础知windows10+docker+wsl+ubuntu","published":1,"updated":"2020-04-10T16:46:16.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu81000o74uxfgv0xwzx","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装wsl-linux\"><a href=\"#安装wsl-linux\" class=\"headerlink\" title=\"安装wsl linux\"></a>安装wsl linux</h3><ol>\n<li><p>开启Linux子系统，以<strong>管理员权限</strong>打开 PowerShell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启用虚拟机平台</span><br><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class=\"line\"># 开启Linux子系统</span><br><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启开发者模式，<code>WIN + S</code> 搜索 开发者设置，打开后选择 开发者模式</p>\n</li>\n<li><code>WIN + S</code> 搜索 store， 打开 Microsoft Store（微软应用商店）,eg: 搜索 Ubuntu ，选择 Ubuntu 18.04 LST 进行安装</li>\n<li>待安装完成后，从应用中打开 Ubuntu 18.04 LST<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4></li>\n<li><p>换源</p>\n</li>\n<li><p>打开自动切换到root用户</p>\n</li>\n</ol>\n<p>当前用户目录下 <code>vi .bash_profile</code>  添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"># Get the aliases and functions</span><br><span class=\"line\">if [ -f ~/.bashrc ]; then</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">         . ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">sudo su - root</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:$HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure></p>\n<p>修改/etc/sudoers文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - root</span><br><span class=\"line\">chmod u+w /etc/sudoers</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/sudoers # 编辑文件，在root ALL=(ALL)ALL行下添加</span><br><span class=\"line\"></span><br><span class=\"line\">xxx ALL=(ALL) NOPASSWD: ALL</span><br><span class=\"line\"></span><br><span class=\"line\"># XXX为用户名。</span><br><span class=\"line\"></span><br><span class=\"line\">chmod u－w /etc/sudoers   # 回到文件的原权限！</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>实际上是在Win10中安装Docker桌面服务，Linux子系统中安装客户端，连接Win10上的Docker服务，进行操作</p>\n<p>在Ubuntu子系统中安装Docker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更新apt包管理列表</span><br><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖包</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"># 加入Docker官方PGP公钥</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"># 确认指纹</span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\"></span><br><span class=\"line\"># 将stable（稳定版）Docker加入apt源中</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want to live on the edge, you can change &quot;stable&quot; below to &quot;test&quot; or</span><br><span class=\"line\"># &quot;nightly&quot;. I highly recommend sticking with stable!</span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\">   $(lsb_release -cs) \\</span><br><span class=\"line\">   stable&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新apt包管理列表</span><br><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装Docker CE最新版本</span><br><span class=\"line\">sudo apt-get install -y docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许当前用户访问Docker CLI，不必使用root</span><br><span class=\"line\">sudo usermod -aG docker $USER</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时执行 docker version 会提示如下错误：</span><br><span class=\"line\"># Cannot connect to the Docker daemon at unix:///var/run/docker.sock.</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置Windows Docker服务地址 （Settings =&gt; General =&gt; Expose daemon on tcp://localhost:2375 without TLS）</span><br><span class=\"line\">echo &quot;export DOCKER_HOST=localhost:2375&quot; &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"># 使配置生效</span><br><span class=\"line\">. ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"powershell其他操作\"><a href=\"#powershell其他操作\" class=\"headerlink\" title=\"powershell其他操作\"></a>powershell其他操作</h3><p>使用管理员模式，打开PowerShell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动停止 wsl 服务</span><br><span class=\"line\"># 停止子系统服务</span><br><span class=\"line\">net stop LxssManager</span><br><span class=\"line\"># 启动子系统服务</span><br><span class=\"line\">net start LxssManager</span><br></pre></td></tr></table></figure></p>\n<p>备份恢复，导出、导入子系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># d:\\Ubuntu-18.04.tar 导出文件路径</span><br><span class=\"line\">wsl --export Ubuntu-18.04 d:\\Ubuntu-18.04.tar</span><br><span class=\"line\"># d:\\wsl\\u18.04 子系统导入后的安装路径</span><br><span class=\"line\">wsl --import Ubuntu-18.04 d:\\wsl\\u18.04 d:\\Ubuntu-18.04.tar</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装wsl-linux\"><a href=\"#安装wsl-linux\" class=\"headerlink\" title=\"安装wsl linux\"></a>安装wsl linux</h3><ol>\n<li><p>开启Linux子系统，以<strong>管理员权限</strong>打开 PowerShell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启用虚拟机平台</span><br><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class=\"line\"># 开启Linux子系统</span><br><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启开发者模式，<code>WIN + S</code> 搜索 开发者设置，打开后选择 开发者模式</p>\n</li>\n<li><code>WIN + S</code> 搜索 store， 打开 Microsoft Store（微软应用商店）,eg: 搜索 Ubuntu ，选择 Ubuntu 18.04 LST 进行安装</li>\n<li>待安装完成后，从应用中打开 Ubuntu 18.04 LST<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4></li>\n<li><p>换源</p>\n</li>\n<li><p>打开自动切换到root用户</p>\n</li>\n</ol>\n<p>当前用户目录下 <code>vi .bash_profile</code>  添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"># Get the aliases and functions</span><br><span class=\"line\">if [ -f ~/.bashrc ]; then</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">         . ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">sudo su - root</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=$PATH:$HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure></p>\n<p>修改/etc/sudoers文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - root</span><br><span class=\"line\">chmod u+w /etc/sudoers</span><br><span class=\"line\"></span><br><span class=\"line\">vi /etc/sudoers # 编辑文件，在root ALL=(ALL)ALL行下添加</span><br><span class=\"line\"></span><br><span class=\"line\">xxx ALL=(ALL) NOPASSWD: ALL</span><br><span class=\"line\"></span><br><span class=\"line\"># XXX为用户名。</span><br><span class=\"line\"></span><br><span class=\"line\">chmod u－w /etc/sudoers   # 回到文件的原权限！</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>实际上是在Win10中安装Docker桌面服务，Linux子系统中安装客户端，连接Win10上的Docker服务，进行操作</p>\n<p>在Ubuntu子系统中安装Docker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更新apt包管理列表</span><br><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖包</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"># 加入Docker官方PGP公钥</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"># 确认指纹</span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\"></span><br><span class=\"line\"># 将stable（稳定版）Docker加入apt源中</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you want to live on the edge, you can change &quot;stable&quot; below to &quot;test&quot; or</span><br><span class=\"line\"># &quot;nightly&quot;. I highly recommend sticking with stable!</span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span><br><span class=\"line\">   $(lsb_release -cs) \\</span><br><span class=\"line\">   stable&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新apt包管理列表</span><br><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装Docker CE最新版本</span><br><span class=\"line\">sudo apt-get install -y docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许当前用户访问Docker CLI，不必使用root</span><br><span class=\"line\">sudo usermod -aG docker $USER</span><br><span class=\"line\"></span><br><span class=\"line\"># 此时执行 docker version 会提示如下错误：</span><br><span class=\"line\"># Cannot connect to the Docker daemon at unix:///var/run/docker.sock.</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置Windows Docker服务地址 （Settings =&gt; General =&gt; Expose daemon on tcp://localhost:2375 without TLS）</span><br><span class=\"line\">echo &quot;export DOCKER_HOST=localhost:2375&quot; &gt;&gt; ~/.bashrc  </span><br><span class=\"line\"># 使配置生效</span><br><span class=\"line\">. ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"powershell其他操作\"><a href=\"#powershell其他操作\" class=\"headerlink\" title=\"powershell其他操作\"></a>powershell其他操作</h3><p>使用管理员模式，打开PowerShell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动停止 wsl 服务</span><br><span class=\"line\"># 停止子系统服务</span><br><span class=\"line\">net stop LxssManager</span><br><span class=\"line\"># 启动子系统服务</span><br><span class=\"line\">net start LxssManager</span><br></pre></td></tr></table></figure></p>\n<p>备份恢复，导出、导入子系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># d:\\Ubuntu-18.04.tar 导出文件路径</span><br><span class=\"line\">wsl --export Ubuntu-18.04 d:\\Ubuntu-18.04.tar</span><br><span class=\"line\"># d:\\wsl\\u18.04 子系统导入后的安装路径</span><br><span class=\"line\">wsl --import Ubuntu-18.04 d:\\wsl\\u18.04 d:\\Ubuntu-18.04.tar</span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker简介","date":"2019-08-03T03:51:16.000Z","_content":"\n\n# docker\n**Linux 容器**不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离\n\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口\n\n**Docker** 将应用程序与该程序的依赖，打包在一个文件(**image**)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.\n\n容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n**image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例**\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n \nDocker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）\n\n### docker 用途\n1. 简化环境搭建\n2. 简化运维工作量\n3. 微服务利器\n\n### docker 安装\n` uname -r` 内核版本大于 `3.10`\n\n```\ncurl https://get.docker.com > /tmp/install.sh\nchmod +x /tmp/install.sh\n/tmp/install.sh\nsudo usermod -aG docker root\nservice docker restart\nservice docker status\nsystemctl enable docker   # 开机自启\ndocker info  #  获取docker信息\ndocker --help # docker 帮助文档\n\n```\n\n### 快速确认\n\n`docker version `\n\n\n### 换源\n`vi /etc/docker`  目录下找到在`daemon.json`文件（没有就新建），将下面内容写入(阿里云)\n```\n{\n \"registry-mirrors\": [\"https://xxxxxxx.mirror.aliyuncs.com\"]\n}\n```\n\n#### 重启daemon\n`systemctl daemon-reload`\n \n#### 重启docker服务\n`systemctl restart docker`\n\n### 第一个镜像\n\n```\ndocker run debian echo \"hello world\"\n```\n\n1. **docker run**  : 启动容器\n2. **debian** : 使用的镜像名称  （本地如果没有镜像，就在docker hub 进行搜素，并下载最新版）\n3. **echo \"hello world\"** : 执行的命令\n\n\n```\ndocker run -i -t debian /bin/bash   \ndocker run -i -t debian   #  也可以不加  /bin/bash\n```\n\n\n1. **-i -t**  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端\n2. **/bin/bash** : 获得一个 bash shell\n3. **退出 shell, 容器就会停止**, **Ctrl+ P + Q 退出而不停止**\n\n``` \ndocker run --name weilai -h docker -it debian /bin/bash  # -h 指定hostname --name 指定docker name\ndocker inspect weilai # 获取 weilai 容器的更多信息\ndoker diff weilai  # 查看 weilai 文件的更改\ndocker logs weilai # weilai 容器日志记录\ndocker ps # 正在运行的 docker 容器\ndocker ps -a # 列出所有容器\ndocker ps -n 2  # 显示最近创建的2个容器\ndocker ps -f status=exited # 查看停止的容器\ndocker start weilai # 启动已有容器   docker run 是启动一个新的实例  \ndocker attach weilai  # 切换到运行交互式容器\ndocker cp weilai:/tmp /home # 拷贝容器下的/tmp文件夹  到宿主机下的 /home 目录下\ndocker cp /home/test.sh  weilai:/tmp/weuilai.sh # 宿主机下的 /home 目录的 tets.sh 到容器下的/tmp文件夹 并改名为weilai.sh\ndocker exec  weilai ls -l # 进入容器 执行 ls -l 并回到宿主机，显示结果\ndocker start weilai # 查看容器进程\ndocker stop weilai  # 停止容器\ndocker kill weilai # 强制停止（不建议）\ndocker rm weilai # 删除容器\ndocker rmi -f debian # 删除 debian  -f 强制删除\n\n```\n\n\n`docker run` ：创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；\n`docker exec`: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；\n`docker attach`: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；\n\n## docker 镜像\n`docker images` : 列出本机所有镜像\n```\ndocker images -qa # -a 显示所有镜像（含中间层） -q 只显示镜像id\ndocker images --digests # 显示镜像的摘要信息\ndocker images --no-trunc # 显示完整的镜像信息 \n```\n\n`docker search redis` : 搜索 `redis` 镜像\n`docker pull redis:latest`  :  拉取 `redis:latest` 镜像 (TAG  默认为 latest\n\n删除多个镜像：`docker rmi -f 镜像名称1:[TAG] 镜像名称2:[TAG]`\n中间空格隔开\n \n删除全部镜像：`docker rmi -f $(docker images -qa)`\n\n同样的\n\n强制删除 `docker rm -f 容器ID或name`\n\n删除多个容器 \n`docker rm -f 容器ID1  容器ID2 `\n \n删除所有容器\n\n`docker rm -f $(docker ps -qa)`\n \n## 容器目录挂载\n创建容器的时候，将宿主机的目录与容器内的目录进行映射，实现宿主机和容器目录的双向数据自动同步；\n\n相比前面的 `cp` 更加简单方便\n\n### 语法\n`docker run -it -v  /宿主机目录:/容器目录 镜像名`\n \n**多目录挂载**\n`docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名`\n\n**挂载目录制度**\n`docker run -it -v  /宿主机目录:/容器目录:ro 镜像名`\n\n例如安装`redis`\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n\n**注意**\n同步多级目录，可能会出现权限不足的提示；\n这是因为selinux把权限禁掉了，我们需要添加  --privileged=true 来解决挂载的目录没有权限的问题；\n\n## docker 网络模式\n**docker** 默认使用的是 **bridge桥接网络模式**\n\n```\n# docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nd2a8ca970a9c        bridge              bridge              local\ne379fa1c8774        host                host                local\n3dfff078ede1        none                null                local\n```\n\n\n1. 自定义网络模式\n```\n# docker network create --subnet=172.20.0.0/16 extnetwork\na2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3\n# ifconfig\nbr-a2c75e5e49ea: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 172.20.0.1  netmask 255.255.0.0  broadcast 172.20.255.255\n        ether 02:42:43:82:72:6e  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\ndocker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        inet6 fe80::42:d5ff:fe34:51d4  prefixlen 64  scopeid 0x20<link>\n        ether 02:42:d5:34:51:d4  txqueuelen 0  (Ethernet)\n        RX packets 10771  bytes 601704 (587.6 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10230  bytes 51101359 (48.7 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...\n...\n...\n\n```\n2. 创建容器并指定ip  `--net extnetwork --ip 172.20.0.2`\n\n`extnetwork` 上文指定\n`172.20.0.1` 是网关,所以从2 分配\n\n```\n# docker run -p 8066:8066 -it --net extnetwork --ip 172.20.0.2 debian\nroot@b4246dddf9f5:/#ip address\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n17: eth0@if18: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\n```\n也可以用 `docker inspect 容器id` 查看信息\n\n```\n# docker inspect b4246dddf9f5\n....\n \"NetworkID\": \"a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3\",\n                    \"EndpointID\": \"efa3cd2ed24010ba37bcf7183fba6cce7bc89f9327375f1148db1a6888005d6f\",\n                    \"Gateway\": \"172.20.0.1\",\n                    \"IPAddress\": \"172.20.0.2\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n\n....\n```\n3. 删除网络\n`docker network rm extnetwork`\n\n","source":"_posts/docker/readme.md","raw":"---\n\ntitle: docker简介\n\ndate: 2019-8-3 11:51:16\n\ntags: \n\ncategories: docker\n\n---\n\n\n# docker\n**Linux 容器**不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离\n\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口\n\n**Docker** 将应用程序与该程序的依赖，打包在一个文件(**image**)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.\n\n容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n**image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例**\n\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n \nDocker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）\n\n### docker 用途\n1. 简化环境搭建\n2. 简化运维工作量\n3. 微服务利器\n\n### docker 安装\n` uname -r` 内核版本大于 `3.10`\n\n```\ncurl https://get.docker.com > /tmp/install.sh\nchmod +x /tmp/install.sh\n/tmp/install.sh\nsudo usermod -aG docker root\nservice docker restart\nservice docker status\nsystemctl enable docker   # 开机自启\ndocker info  #  获取docker信息\ndocker --help # docker 帮助文档\n\n```\n\n### 快速确认\n\n`docker version `\n\n\n### 换源\n`vi /etc/docker`  目录下找到在`daemon.json`文件（没有就新建），将下面内容写入(阿里云)\n```\n{\n \"registry-mirrors\": [\"https://xxxxxxx.mirror.aliyuncs.com\"]\n}\n```\n\n#### 重启daemon\n`systemctl daemon-reload`\n \n#### 重启docker服务\n`systemctl restart docker`\n\n### 第一个镜像\n\n```\ndocker run debian echo \"hello world\"\n```\n\n1. **docker run**  : 启动容器\n2. **debian** : 使用的镜像名称  （本地如果没有镜像，就在docker hub 进行搜素，并下载最新版）\n3. **echo \"hello world\"** : 执行的命令\n\n\n```\ndocker run -i -t debian /bin/bash   \ndocker run -i -t debian   #  也可以不加  /bin/bash\n```\n\n\n1. **-i -t**  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端\n2. **/bin/bash** : 获得一个 bash shell\n3. **退出 shell, 容器就会停止**, **Ctrl+ P + Q 退出而不停止**\n\n``` \ndocker run --name weilai -h docker -it debian /bin/bash  # -h 指定hostname --name 指定docker name\ndocker inspect weilai # 获取 weilai 容器的更多信息\ndoker diff weilai  # 查看 weilai 文件的更改\ndocker logs weilai # weilai 容器日志记录\ndocker ps # 正在运行的 docker 容器\ndocker ps -a # 列出所有容器\ndocker ps -n 2  # 显示最近创建的2个容器\ndocker ps -f status=exited # 查看停止的容器\ndocker start weilai # 启动已有容器   docker run 是启动一个新的实例  \ndocker attach weilai  # 切换到运行交互式容器\ndocker cp weilai:/tmp /home # 拷贝容器下的/tmp文件夹  到宿主机下的 /home 目录下\ndocker cp /home/test.sh  weilai:/tmp/weuilai.sh # 宿主机下的 /home 目录的 tets.sh 到容器下的/tmp文件夹 并改名为weilai.sh\ndocker exec  weilai ls -l # 进入容器 执行 ls -l 并回到宿主机，显示结果\ndocker start weilai # 查看容器进程\ndocker stop weilai  # 停止容器\ndocker kill weilai # 强制停止（不建议）\ndocker rm weilai # 删除容器\ndocker rmi -f debian # 删除 debian  -f 强制删除\n\n```\n\n\n`docker run` ：创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；\n`docker exec`: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；\n`docker attach`: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；\n\n## docker 镜像\n`docker images` : 列出本机所有镜像\n```\ndocker images -qa # -a 显示所有镜像（含中间层） -q 只显示镜像id\ndocker images --digests # 显示镜像的摘要信息\ndocker images --no-trunc # 显示完整的镜像信息 \n```\n\n`docker search redis` : 搜索 `redis` 镜像\n`docker pull redis:latest`  :  拉取 `redis:latest` 镜像 (TAG  默认为 latest\n\n删除多个镜像：`docker rmi -f 镜像名称1:[TAG] 镜像名称2:[TAG]`\n中间空格隔开\n \n删除全部镜像：`docker rmi -f $(docker images -qa)`\n\n同样的\n\n强制删除 `docker rm -f 容器ID或name`\n\n删除多个容器 \n`docker rm -f 容器ID1  容器ID2 `\n \n删除所有容器\n\n`docker rm -f $(docker ps -qa)`\n \n## 容器目录挂载\n创建容器的时候，将宿主机的目录与容器内的目录进行映射，实现宿主机和容器目录的双向数据自动同步；\n\n相比前面的 `cp` 更加简单方便\n\n### 语法\n`docker run -it -v  /宿主机目录:/容器目录 镜像名`\n \n**多目录挂载**\n`docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名`\n\n**挂载目录制度**\n`docker run -it -v  /宿主机目录:/容器目录:ro 镜像名`\n\n例如安装`redis`\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n\n**注意**\n同步多级目录，可能会出现权限不足的提示；\n这是因为selinux把权限禁掉了，我们需要添加  --privileged=true 来解决挂载的目录没有权限的问题；\n\n## docker 网络模式\n**docker** 默认使用的是 **bridge桥接网络模式**\n\n```\n# docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nd2a8ca970a9c        bridge              bridge              local\ne379fa1c8774        host                host                local\n3dfff078ede1        none                null                local\n```\n\n\n1. 自定义网络模式\n```\n# docker network create --subnet=172.20.0.0/16 extnetwork\na2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3\n# ifconfig\nbr-a2c75e5e49ea: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 172.20.0.1  netmask 255.255.0.0  broadcast 172.20.255.255\n        ether 02:42:43:82:72:6e  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\ndocker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        inet6 fe80::42:d5ff:fe34:51d4  prefixlen 64  scopeid 0x20<link>\n        ether 02:42:d5:34:51:d4  txqueuelen 0  (Ethernet)\n        RX packets 10771  bytes 601704 (587.6 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10230  bytes 51101359 (48.7 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n...\n...\n...\n\n```\n2. 创建容器并指定ip  `--net extnetwork --ip 172.20.0.2`\n\n`extnetwork` 上文指定\n`172.20.0.1` 是网关,所以从2 分配\n\n```\n# docker run -p 8066:8066 -it --net extnetwork --ip 172.20.0.2 debian\nroot@b4246dddf9f5:/#ip address\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n17: eth0@if18: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\n```\n也可以用 `docker inspect 容器id` 查看信息\n\n```\n# docker inspect b4246dddf9f5\n....\n \"NetworkID\": \"a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3\",\n                    \"EndpointID\": \"efa3cd2ed24010ba37bcf7183fba6cce7bc89f9327375f1148db1a6888005d6f\",\n                    \"Gateway\": \"172.20.0.1\",\n                    \"IPAddress\": \"172.20.0.2\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n\n....\n```\n3. 删除网络\n`docker network rm extnetwork`\n\n","slug":"docker/readme","published":1,"updated":"2020-04-10T16:46:16.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu8h000r74uxk1czu8y0","content":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><p><strong>Linux 容器</strong>不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离</p>\n<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</p>\n<p><strong>Docker</strong> 将应用程序与该程序的依赖，打包在一个文件(<strong>image</strong>)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.</p>\n<p>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p><strong>image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例</strong></p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</p>\n<h3 id=\"docker-用途\"><a href=\"#docker-用途\" class=\"headerlink\" title=\"docker 用途\"></a>docker 用途</h3><ol>\n<li>简化环境搭建</li>\n<li>简化运维工作量</li>\n<li>微服务利器</li>\n</ol>\n<h3 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h3><p><code>uname -r</code> 内核版本大于 <code>3.10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; /tmp/install.sh</span><br><span class=\"line\">chmod +x /tmp/install.sh</span><br><span class=\"line\">/tmp/install.sh</span><br><span class=\"line\">sudo usermod -aG docker root</span><br><span class=\"line\">service docker restart</span><br><span class=\"line\">service docker status</span><br><span class=\"line\">systemctl enable docker   # 开机自启</span><br><span class=\"line\">docker info  #  获取docker信息</span><br><span class=\"line\">docker --help # docker 帮助文档</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速确认\"><a href=\"#快速确认\" class=\"headerlink\" title=\"快速确认\"></a>快速确认</h3><p><code>docker version</code></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><p><code>vi /etc/docker</code>  目录下找到在<code>daemon.json</code>文件（没有就新建），将下面内容写入(阿里云)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重启daemon\"><a href=\"#重启daemon\" class=\"headerlink\" title=\"重启daemon\"></a>重启daemon</h4><p><code>systemctl daemon-reload</code></p>\n<h4 id=\"重启docker服务\"><a href=\"#重启docker服务\" class=\"headerlink\" title=\"重启docker服务\"></a>重启docker服务</h4><p><code>systemctl restart docker</code></p>\n<h3 id=\"第一个镜像\"><a href=\"#第一个镜像\" class=\"headerlink\" title=\"第一个镜像\"></a>第一个镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run debian echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>docker run</strong>  : 启动容器</li>\n<li><strong>debian</strong> : 使用的镜像名称  （本地如果没有镜像，就在docker hub 进行搜素，并下载最新版）</li>\n<li><strong>echo “hello world”</strong> : 执行的命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t debian /bin/bash   </span><br><span class=\"line\">docker run -i -t debian   #  也可以不加  /bin/bash</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>-i -t</strong>  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端</li>\n<li><strong>/bin/bash</strong> : 获得一个 bash shell</li>\n<li><strong>退出 shell, 容器就会停止</strong>, <strong>Ctrl+ P + Q 退出而不停止</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name weilai -h docker -it debian /bin/bash  # -h 指定hostname --name 指定docker name</span><br><span class=\"line\">docker inspect weilai # 获取 weilai 容器的更多信息</span><br><span class=\"line\">doker diff weilai  # 查看 weilai 文件的更改</span><br><span class=\"line\">docker logs weilai # weilai 容器日志记录</span><br><span class=\"line\">docker ps # 正在运行的 docker 容器</span><br><span class=\"line\">docker ps -a # 列出所有容器</span><br><span class=\"line\">docker ps -n 2  # 显示最近创建的2个容器</span><br><span class=\"line\">docker ps -f status=exited # 查看停止的容器</span><br><span class=\"line\">docker start weilai # 启动已有容器   docker run 是启动一个新的实例  </span><br><span class=\"line\">docker attach weilai  # 切换到运行交互式容器</span><br><span class=\"line\">docker cp weilai:/tmp /home # 拷贝容器下的/tmp文件夹  到宿主机下的 /home 目录下</span><br><span class=\"line\">docker cp /home/test.sh  weilai:/tmp/weuilai.sh # 宿主机下的 /home 目录的 tets.sh 到容器下的/tmp文件夹 并改名为weilai.sh</span><br><span class=\"line\">docker exec  weilai ls -l # 进入容器 执行 ls -l 并回到宿主机，显示结果</span><br><span class=\"line\">docker start weilai # 查看容器进程</span><br><span class=\"line\">docker stop weilai  # 停止容器</span><br><span class=\"line\">docker kill weilai # 强制停止（不建议）</span><br><span class=\"line\">docker rm weilai # 删除容器</span><br><span class=\"line\">docker rmi -f debian # 删除 debian  -f 强制删除</span><br></pre></td></tr></table></figure>\n<p><code>docker run</code> ：创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；<br><code>docker exec</code>: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；<br><code>docker attach</code>: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；</p>\n<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><p><code>docker images</code> : 列出本机所有镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -qa # -a 显示所有镜像（含中间层） -q 只显示镜像id</span><br><span class=\"line\">docker images --digests # 显示镜像的摘要信息</span><br><span class=\"line\">docker images --no-trunc # 显示完整的镜像信息</span><br></pre></td></tr></table></figure></p>\n<p><code>docker search redis</code> : 搜索 <code>redis</code> 镜像<br><code>docker pull redis:latest</code>  :  拉取 <code>redis:latest</code> 镜像 (TAG  默认为 latest</p>\n<p>删除多个镜像：<code>docker rmi -f 镜像名称1:[TAG] 镜像名称2:[TAG]</code><br>中间空格隔开</p>\n<p>删除全部镜像：<code>docker rmi -f $(docker images -qa)</code></p>\n<p>同样的</p>\n<p>强制删除 <code>docker rm -f 容器ID或name</code></p>\n<p>删除多个容器<br><code>docker rm -f 容器ID1  容器ID2</code></p>\n<p>删除所有容器</p>\n<p><code>docker rm -f $(docker ps -qa)</code></p>\n<h2 id=\"容器目录挂载\"><a href=\"#容器目录挂载\" class=\"headerlink\" title=\"容器目录挂载\"></a>容器目录挂载</h2><p>创建容器的时候，将宿主机的目录与容器内的目录进行映射，实现宿主机和容器目录的双向数据自动同步；</p>\n<p>相比前面的 <code>cp</code> 更加简单方便</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>docker run -it -v  /宿主机目录:/容器目录 镜像名</code></p>\n<p><strong>多目录挂载</strong><br><code>docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名</code></p>\n<p><strong>挂载目录制度</strong><br><code>docker run -it -v  /宿主机目录:/容器目录:ro 镜像名</code></p>\n<p>例如安装<code>redis</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong><br>同步多级目录，可能会出现权限不足的提示；<br>这是因为selinux把权限禁掉了，我们需要添加  –privileged=true 来解决挂载的目录没有权限的问题；</p>\n<h2 id=\"docker-网络模式\"><a href=\"#docker-网络模式\" class=\"headerlink\" title=\"docker 网络模式\"></a>docker 网络模式</h2><p><strong>docker</strong> 默认使用的是 <strong>bridge桥接网络模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker network ls</span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">d2a8ca970a9c        bridge              bridge              local</span><br><span class=\"line\">e379fa1c8774        host                host                local</span><br><span class=\"line\">3dfff078ede1        none                null                local</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>自定义网络模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker network create --subnet=172.20.0.0/16 extnetwork</span><br><span class=\"line\">a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3</span><br><span class=\"line\"># ifconfig</span><br><span class=\"line\">br-a2c75e5e49ea: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.20.0.1  netmask 255.255.0.0  broadcast 172.20.255.255</span><br><span class=\"line\">        ether 02:42:43:82:72:6e  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        inet6 fe80::42:d5ff:fe34:51d4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 02:42:d5:34:51:d4  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 10771  bytes 601704 (587.6 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 10230  bytes 51101359 (48.7 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器并指定ip  <code>--net extnetwork --ip 172.20.0.2</code></p>\n</li>\n</ol>\n<p><code>extnetwork</code> 上文指定<br><code>172.20.0.1</code> 是网关,所以从2 分配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker run -p 8066:8066 -it --net extnetwork --ip 172.20.0.2 debian</span><br><span class=\"line\">root@b4246dddf9f5:/#ip address</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">17: eth0@if18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n<p>也可以用 <code>docker inspect 容器id</code> 查看信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker inspect b4246dddf9f5</span><br><span class=\"line\">....</span><br><span class=\"line\"> &quot;NetworkID&quot;: &quot;a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: &quot;efa3cd2ed24010ba37bcf7183fba6cce7bc89f9327375f1148db1a6888005d6f&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.20.0.1&quot;,</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.20.0.2&quot;,</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>删除网络<br><code>docker network rm extnetwork</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h1><p><strong>Linux 容器</strong>不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离</p>\n<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</p>\n<p><strong>Docker</strong> 将应用程序与该程序的依赖，打包在一个文件(<strong>image</strong>)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.</p>\n<p>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p><strong>image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例</strong></p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</p>\n<h3 id=\"docker-用途\"><a href=\"#docker-用途\" class=\"headerlink\" title=\"docker 用途\"></a>docker 用途</h3><ol>\n<li>简化环境搭建</li>\n<li>简化运维工作量</li>\n<li>微服务利器</li>\n</ol>\n<h3 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h3><p><code>uname -r</code> 内核版本大于 <code>3.10</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; /tmp/install.sh</span><br><span class=\"line\">chmod +x /tmp/install.sh</span><br><span class=\"line\">/tmp/install.sh</span><br><span class=\"line\">sudo usermod -aG docker root</span><br><span class=\"line\">service docker restart</span><br><span class=\"line\">service docker status</span><br><span class=\"line\">systemctl enable docker   # 开机自启</span><br><span class=\"line\">docker info  #  获取docker信息</span><br><span class=\"line\">docker --help # docker 帮助文档</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速确认\"><a href=\"#快速确认\" class=\"headerlink\" title=\"快速确认\"></a>快速确认</h3><p><code>docker version</code></p>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><p><code>vi /etc/docker</code>  目录下找到在<code>daemon.json</code>文件（没有就新建），将下面内容写入(阿里云)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重启daemon\"><a href=\"#重启daemon\" class=\"headerlink\" title=\"重启daemon\"></a>重启daemon</h4><p><code>systemctl daemon-reload</code></p>\n<h4 id=\"重启docker服务\"><a href=\"#重启docker服务\" class=\"headerlink\" title=\"重启docker服务\"></a>重启docker服务</h4><p><code>systemctl restart docker</code></p>\n<h3 id=\"第一个镜像\"><a href=\"#第一个镜像\" class=\"headerlink\" title=\"第一个镜像\"></a>第一个镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run debian echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>docker run</strong>  : 启动容器</li>\n<li><strong>debian</strong> : 使用的镜像名称  （本地如果没有镜像，就在docker hub 进行搜素，并下载最新版）</li>\n<li><strong>echo “hello world”</strong> : 执行的命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t debian /bin/bash   </span><br><span class=\"line\">docker run -i -t debian   #  也可以不加  /bin/bash</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>-i -t</strong>  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端</li>\n<li><strong>/bin/bash</strong> : 获得一个 bash shell</li>\n<li><strong>退出 shell, 容器就会停止</strong>, <strong>Ctrl+ P + Q 退出而不停止</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name weilai -h docker -it debian /bin/bash  # -h 指定hostname --name 指定docker name</span><br><span class=\"line\">docker inspect weilai # 获取 weilai 容器的更多信息</span><br><span class=\"line\">doker diff weilai  # 查看 weilai 文件的更改</span><br><span class=\"line\">docker logs weilai # weilai 容器日志记录</span><br><span class=\"line\">docker ps # 正在运行的 docker 容器</span><br><span class=\"line\">docker ps -a # 列出所有容器</span><br><span class=\"line\">docker ps -n 2  # 显示最近创建的2个容器</span><br><span class=\"line\">docker ps -f status=exited # 查看停止的容器</span><br><span class=\"line\">docker start weilai # 启动已有容器   docker run 是启动一个新的实例  </span><br><span class=\"line\">docker attach weilai  # 切换到运行交互式容器</span><br><span class=\"line\">docker cp weilai:/tmp /home # 拷贝容器下的/tmp文件夹  到宿主机下的 /home 目录下</span><br><span class=\"line\">docker cp /home/test.sh  weilai:/tmp/weuilai.sh # 宿主机下的 /home 目录的 tets.sh 到容器下的/tmp文件夹 并改名为weilai.sh</span><br><span class=\"line\">docker exec  weilai ls -l # 进入容器 执行 ls -l 并回到宿主机，显示结果</span><br><span class=\"line\">docker start weilai # 查看容器进程</span><br><span class=\"line\">docker stop weilai  # 停止容器</span><br><span class=\"line\">docker kill weilai # 强制停止（不建议）</span><br><span class=\"line\">docker rm weilai # 删除容器</span><br><span class=\"line\">docker rmi -f debian # 删除 debian  -f 强制删除</span><br></pre></td></tr></table></figure>\n<p><code>docker run</code> ：创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；<br><code>docker exec</code>: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；<br><code>docker attach</code>: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；</p>\n<h2 id=\"docker-镜像\"><a href=\"#docker-镜像\" class=\"headerlink\" title=\"docker 镜像\"></a>docker 镜像</h2><p><code>docker images</code> : 列出本机所有镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -qa # -a 显示所有镜像（含中间层） -q 只显示镜像id</span><br><span class=\"line\">docker images --digests # 显示镜像的摘要信息</span><br><span class=\"line\">docker images --no-trunc # 显示完整的镜像信息</span><br></pre></td></tr></table></figure></p>\n<p><code>docker search redis</code> : 搜索 <code>redis</code> 镜像<br><code>docker pull redis:latest</code>  :  拉取 <code>redis:latest</code> 镜像 (TAG  默认为 latest</p>\n<p>删除多个镜像：<code>docker rmi -f 镜像名称1:[TAG] 镜像名称2:[TAG]</code><br>中间空格隔开</p>\n<p>删除全部镜像：<code>docker rmi -f $(docker images -qa)</code></p>\n<p>同样的</p>\n<p>强制删除 <code>docker rm -f 容器ID或name</code></p>\n<p>删除多个容器<br><code>docker rm -f 容器ID1  容器ID2</code></p>\n<p>删除所有容器</p>\n<p><code>docker rm -f $(docker ps -qa)</code></p>\n<h2 id=\"容器目录挂载\"><a href=\"#容器目录挂载\" class=\"headerlink\" title=\"容器目录挂载\"></a>容器目录挂载</h2><p>创建容器的时候，将宿主机的目录与容器内的目录进行映射，实现宿主机和容器目录的双向数据自动同步；</p>\n<p>相比前面的 <code>cp</code> 更加简单方便</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>docker run -it -v  /宿主机目录:/容器目录 镜像名</code></p>\n<p><strong>多目录挂载</strong><br><code>docker run -it -v /宿主机目录:/容器目录 -v /宿主机目录2:/容器目录2  镜像名</code></p>\n<p><strong>挂载目录制度</strong><br><code>docker run -it -v  /宿主机目录:/容器目录:ro 镜像名</code></p>\n<p>例如安装<code>redis</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong><br>同步多级目录，可能会出现权限不足的提示；<br>这是因为selinux把权限禁掉了，我们需要添加  –privileged=true 来解决挂载的目录没有权限的问题；</p>\n<h2 id=\"docker-网络模式\"><a href=\"#docker-网络模式\" class=\"headerlink\" title=\"docker 网络模式\"></a>docker 网络模式</h2><p><strong>docker</strong> 默认使用的是 <strong>bridge桥接网络模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker network ls</span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">d2a8ca970a9c        bridge              bridge              local</span><br><span class=\"line\">e379fa1c8774        host                host                local</span><br><span class=\"line\">3dfff078ede1        none                null                local</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>自定义网络模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker network create --subnet=172.20.0.0/16 extnetwork</span><br><span class=\"line\">a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3</span><br><span class=\"line\"># ifconfig</span><br><span class=\"line\">br-a2c75e5e49ea: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.20.0.1  netmask 255.255.0.0  broadcast 172.20.255.255</span><br><span class=\"line\">        ether 02:42:43:82:72:6e  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class=\"line\">        inet6 fe80::42:d5ff:fe34:51d4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 02:42:d5:34:51:d4  txqueuelen 0  (Ethernet)</span><br><span class=\"line\">        RX packets 10771  bytes 601704 (587.6 KiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 10230  bytes 51101359 (48.7 MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器并指定ip  <code>--net extnetwork --ip 172.20.0.2</code></p>\n</li>\n</ol>\n<p><code>extnetwork</code> 上文指定<br><code>172.20.0.1</code> 是网关,所以从2 分配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker run -p 8066:8066 -it --net extnetwork --ip 172.20.0.2 debian</span><br><span class=\"line\">root@b4246dddf9f5:/#ip address</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">17: eth0@if18: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:14:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.20.0.2/16 brd 172.20.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n<p>也可以用 <code>docker inspect 容器id</code> 查看信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker inspect b4246dddf9f5</span><br><span class=\"line\">....</span><br><span class=\"line\"> &quot;NetworkID&quot;: &quot;a2c75e5e49ea2bf16380befd73ac19be54e271f4ad1e39549c47290d1b9fa7f3&quot;,</span><br><span class=\"line\">                    &quot;EndpointID&quot;: &quot;efa3cd2ed24010ba37bcf7183fba6cce7bc89f9327375f1148db1a6888005d6f&quot;,</span><br><span class=\"line\">                    &quot;Gateway&quot;: &quot;172.20.0.1&quot;,</span><br><span class=\"line\">                    &quot;IPAddress&quot;: &quot;172.20.0.2&quot;,</span><br><span class=\"line\">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class=\"line\">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>删除网络<br><code>docker network rm extnetwork</code></li>\n</ol>\n"},{"title":"docker容器间的通信","date":"2019-08-05T03:51:16.000Z","_content":"\n\nhttps://blog.csdn.net/u013355826/article/details/84987233\n容器之间通信的主要方式\n\n1.通过容器ip访问\n\n    容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。\n\n2.通过宿主机的ip:port访问\n\n    通过宿主机的ip:port访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。\n\n3.通过link建立连接（官方不推荐使用）\n\n     运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。\n\n# 源容器：mysql\ndocker run -itd --name test-mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n#被链接容器 centos\ndocker run -itd --name test-centos --link test-mysql:mysql  centos /bin/bash\n#进入test-centos\ndocker exec -it test-centos /bin/bash\n直接通过 link的名字或者link时候取的别名就能进入：\n\n\n\n通过link建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。\n\n在被链接的容器上查看环境变量\n\n\n\n被链接容器会继承源容器的环境变量信息。\n\n与/etc/hosts中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 /etc/hosts来解析链接容器的IP地址。\n\n除了环境变量之外，Docker还将源容器的主机条目添加到/etc/hosts文件中。\n\n\n\n如果重新启动源容器，/etc/hosts链接容器上的文件将使用源容器的新IP地址自动更新，从而允许链接通信继续。\n\n4.通过 User-defined networks（推荐）\n\n     docker network来创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。\n\n创建网络\n\ndocker network create test-network\n启动容器时，加入创建的网络\n\ndocker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7\n启动被链接的容器\n\n docker run -it --network test-network --network-alias centos  centos /bin/bash\n\n","source":"_posts/docker/容器间的通信.md","raw":"---\n\ntitle: docker容器间的通信\n\ndate: 2019-8-5 11:51:16\n\ntags: \n\ncategories: docker\n\n---\n\n\nhttps://blog.csdn.net/u013355826/article/details/84987233\n容器之间通信的主要方式\n\n1.通过容器ip访问\n\n    容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。\n\n2.通过宿主机的ip:port访问\n\n    通过宿主机的ip:port访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。\n\n3.通过link建立连接（官方不推荐使用）\n\n     运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。\n\n# 源容器：mysql\ndocker run -itd --name test-mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n#被链接容器 centos\ndocker run -itd --name test-centos --link test-mysql:mysql  centos /bin/bash\n#进入test-centos\ndocker exec -it test-centos /bin/bash\n直接通过 link的名字或者link时候取的别名就能进入：\n\n\n\n通过link建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。\n\n在被链接的容器上查看环境变量\n\n\n\n被链接容器会继承源容器的环境变量信息。\n\n与/etc/hosts中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 /etc/hosts来解析链接容器的IP地址。\n\n除了环境变量之外，Docker还将源容器的主机条目添加到/etc/hosts文件中。\n\n\n\n如果重新启动源容器，/etc/hosts链接容器上的文件将使用源容器的新IP地址自动更新，从而允许链接通信继续。\n\n4.通过 User-defined networks（推荐）\n\n     docker network来创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。\n\n创建网络\n\ndocker network create test-network\n启动容器时，加入创建的网络\n\ndocker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7\n启动被链接的容器\n\n docker run -it --network test-network --network-alias centos  centos /bin/bash\n\n","slug":"docker/容器间的通信","published":1,"updated":"2020-04-10T16:46:16.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu8m000t74ux21ywho5h","content":"<p><a href=\"https://blog.csdn.net/u013355826/article/details/84987233\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013355826/article/details/84987233</a><br>容器之间通信的主要方式</p>\n<p>1.通过容器ip访问</p>\n<pre><code>容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。\n</code></pre><p>2.通过宿主机的ip:port访问</p>\n<pre><code>通过宿主机的ip:port访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。\n</code></pre><p>3.通过link建立连接（官方不推荐使用）</p>\n<pre><code>运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。\n</code></pre><h1 id=\"源容器：mysql\"><a href=\"#源容器：mysql\" class=\"headerlink\" title=\"源容器：mysql\"></a>源容器：mysql</h1><p>docker run -itd –name test-mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7</p>\n<p>#被链接容器 centos<br>docker run -itd –name test-centos –link test-mysql:mysql  centos /bin/bash</p>\n<p>#进入test-centos<br>docker exec -it test-centos /bin/bash<br>直接通过 link的名字或者link时候取的别名就能进入：</p>\n<p>通过link建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。</p>\n<p>在被链接的容器上查看环境变量</p>\n<p>被链接容器会继承源容器的环境变量信息。</p>\n<p>与/etc/hosts中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 /etc/hosts来解析链接容器的IP地址。</p>\n<p>除了环境变量之外，Docker还将源容器的主机条目添加到/etc/hosts文件中。</p>\n<p>如果重新启动源容器，/etc/hosts链接容器上的文件将使用源容器的新IP地址自动更新，从而允许链接通信继续。</p>\n<p>4.通过 User-defined networks（推荐）</p>\n<pre><code>docker network来创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。\n</code></pre><p>创建网络</p>\n<p>docker network create test-network<br>启动容器时，加入创建的网络</p>\n<p>docker run -it –network test-network –network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7<br>启动被链接的容器</p>\n<p> docker run -it –network test-network –network-alias centos  centos /bin/bash</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/u013355826/article/details/84987233\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013355826/article/details/84987233</a><br>容器之间通信的主要方式</p>\n<p>1.通过容器ip访问</p>\n<pre><code>容器重启后，ip会发生变化。通过容器ip访问不是一个好的方案。\n</code></pre><p>2.通过宿主机的ip:port访问</p>\n<pre><code>通过宿主机的ip:port访问，只能依靠监听在暴露出的端口的进程来进行有限的通信。\n</code></pre><p>3.通过link建立连接（官方不推荐使用）</p>\n<pre><code>运行容器时，指定参数link，使得源容器与被链接的容器可以进行相互通信，并且接受的容器可以获得源容器的一些数据，比如：环境变量。\n</code></pre><h1 id=\"源容器：mysql\"><a href=\"#源容器：mysql\" class=\"headerlink\" title=\"源容器：mysql\"></a>源容器：mysql</h1><p>docker run -itd –name test-mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7</p>\n<p>#被链接容器 centos<br>docker run -itd –name test-centos –link test-mysql:mysql  centos /bin/bash</p>\n<p>#进入test-centos<br>docker exec -it test-centos /bin/bash<br>直接通过 link的名字或者link时候取的别名就能进入：</p>\n<p>通过link建立连接的容器，被链接的容器能 ping 通源容器，反过来不行。</p>\n<p>在被链接的容器上查看环境变量</p>\n<p>被链接容器会继承源容器的环境变量信息。</p>\n<p>与/etc/hosts中的主机条目不同，如果重新启动源容器，则不会自动更新存储在环境变量中的IP地址。我们建议使用主机条目 /etc/hosts来解析链接容器的IP地址。</p>\n<p>除了环境变量之外，Docker还将源容器的主机条目添加到/etc/hosts文件中。</p>\n<p>如果重新启动源容器，/etc/hosts链接容器上的文件将使用源容器的新IP地址自动更新，从而允许链接通信继续。</p>\n<p>4.通过 User-defined networks（推荐）</p>\n<pre><code>docker network来创建一个桥接网络，在docker run的时候将容器指定到新创建的桥接网络中，这样同一桥接网络中的容器就可以通过互相访问。\n</code></pre><p>创建网络</p>\n<p>docker network create test-network<br>启动容器时，加入创建的网络</p>\n<p>docker run -it –network test-network –network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7<br>启动被链接的容器</p>\n<p> docker run -it –network test-network –network-alias centos  centos /bin/bash</p>\n"},{"title":"docker推送备份","date":"2019-08-06T03:51:16.000Z","_content":"## 提交运行的容器成为镜像\n```\ndocker run --name imwltest -h docker -dit -e TZ=Asia/Shanghai debian\n# docker commit -a='作者' -m='备注' 运行时容器ID 新镜像名称\ndocker commit -a='imwl' -m='Test'  imwltest imwl/test # 默认TAG: latest\ndocker commit -a='imwl' -m='Test'  imwltest imwl/test:0.14\n```\n\n```\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nimwl/test           0.14                69c1c6c58124        About a minute ago   114MB\nimwl/test           latest              ad65438d599f        7 minutes ago        114MB\n```\n\nDocker Hub 账户  imwl\n```\ndocker login\n\ndocker push imwl/test:0.14\ndocker push imwl/test\n\ndocker tag flasky:latest imwl/flask:latest\n\ndocker push imwl/flask:latest\n\n\n\n\ndocker run --name flasky -d -p 8000:5000 imwl/flask:latest    # -d 后台运行容器，并返回容器ID  -p 端口映射（8000宿主机，5000容器端口） \n\n#  -P   随机端口映射\n# -e TZ=Asia/Shanghai  指定时区\n\n```\n\n## 备份与还原\n有些机密性，可以通过docker镜像备份和迁移实现\n```\n# docker save -o 备份镜像的名称  源镜像名称:tag版本\ndocker save -o imwltest.tar imwl/test:0.14\n\n# 当前目录下 会有 imwltest.tar文件\n\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED\nimwl/test           0.14                69c1c6c58124        27 minutes ago\nimwl/test           latest              ad65438d599f        32 minutes ago\n\n# docker rmi imwl/test:0.14\nUntagged: imwl/test:0.14\nUntagged: imwl/test@sha256:97b496724012eee3df3421edb2ab6edcd6115e42b8060c24ba06b51da466e0dd\nDeleted: sha256:69c1c6c58124c56456a22c92a2e2125c9abc744f6acde379f5039779becbcc29\n\n# docker  images\nREPOSITORY          TAG                 IMAGE ID            CREATED\nimwl/test           latest              ad65438d599f        32 minutes ago\n\n## 恢复\n# docker load -i imwltest.tar\nLoaded image: imwl/test:0.14\n\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nimwl/test           0.14                69c1c6c58124        32 minutes ago      114MB\nimwl/test           latest              ad65438d599f        37 minutes ago      114MB\ndebian              latest              a8797652cfd9        2 weeks ago         114MB\n```\n\n## 私有仓库\n\nDocker私有仓库内部用来存放镜像的仓库，具有更高的保密安全级别\n\n### 搭建\n```\n# docker pull registry # 拉取私有仓库镜像\n# docker run -di --name=myRegistry  --restart=always  -p 5000:5000 registry # 启动私有仓库容器\n365d3d60c6741b95bd4c7c1ea7ab0d68f2f3ef62264b2beff3120d77f5c82a88\n# wget http://207.246.103.127:5000/v2/_catalog  # 本机IP地址 207.246.103.127\n--2020-02-20 15:27:49--  http://207.246.103.127:5000/v2/_catalog\nConnecting to 207.246.103.127:5000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 20 [application/json]\nSaving to: '_catalog'\n\n_catalog                           100%[=============================================================>]      20  --.-KB/s    in 0s\n\n2020-02-20 15:27:49 (2.54 MB/s) - '_catalog' saved [20/20]\n\n# cat  _catalog\n{\"repositories\":[]}\n\n##  因为仓库里还没有镜像，所以就是空的；\n\n# cd /etc/docker\n# \"insecure-registries\": [\"207.246.103.127:5000\"] 写入到 daemon.json文件  ## 信任私有仓库\n#  systemctl restart docker # 重启docker\n\n\n```\n### 测试\n标记镜像为私有仓库的镜像\n`docker tag imwl/test 207.246.103.127:5000/debiantest`\n\n上传镜像到私有仓库\n`docker push 207.246.103.127:5000/debiantest`\n\n","source":"_posts/docker/推送，备份.md","raw":"---\n\ntitle: docker推送备份\n\ndate: 2019-8-6 11:51:16\n\ntags: \n\ncategories: docker\n\n---\n## 提交运行的容器成为镜像\n```\ndocker run --name imwltest -h docker -dit -e TZ=Asia/Shanghai debian\n# docker commit -a='作者' -m='备注' 运行时容器ID 新镜像名称\ndocker commit -a='imwl' -m='Test'  imwltest imwl/test # 默认TAG: latest\ndocker commit -a='imwl' -m='Test'  imwltest imwl/test:0.14\n```\n\n```\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nimwl/test           0.14                69c1c6c58124        About a minute ago   114MB\nimwl/test           latest              ad65438d599f        7 minutes ago        114MB\n```\n\nDocker Hub 账户  imwl\n```\ndocker login\n\ndocker push imwl/test:0.14\ndocker push imwl/test\n\ndocker tag flasky:latest imwl/flask:latest\n\ndocker push imwl/flask:latest\n\n\n\n\ndocker run --name flasky -d -p 8000:5000 imwl/flask:latest    # -d 后台运行容器，并返回容器ID  -p 端口映射（8000宿主机，5000容器端口） \n\n#  -P   随机端口映射\n# -e TZ=Asia/Shanghai  指定时区\n\n```\n\n## 备份与还原\n有些机密性，可以通过docker镜像备份和迁移实现\n```\n# docker save -o 备份镜像的名称  源镜像名称:tag版本\ndocker save -o imwltest.tar imwl/test:0.14\n\n# 当前目录下 会有 imwltest.tar文件\n\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED\nimwl/test           0.14                69c1c6c58124        27 minutes ago\nimwl/test           latest              ad65438d599f        32 minutes ago\n\n# docker rmi imwl/test:0.14\nUntagged: imwl/test:0.14\nUntagged: imwl/test@sha256:97b496724012eee3df3421edb2ab6edcd6115e42b8060c24ba06b51da466e0dd\nDeleted: sha256:69c1c6c58124c56456a22c92a2e2125c9abc744f6acde379f5039779becbcc29\n\n# docker  images\nREPOSITORY          TAG                 IMAGE ID            CREATED\nimwl/test           latest              ad65438d599f        32 minutes ago\n\n## 恢复\n# docker load -i imwltest.tar\nLoaded image: imwl/test:0.14\n\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nimwl/test           0.14                69c1c6c58124        32 minutes ago      114MB\nimwl/test           latest              ad65438d599f        37 minutes ago      114MB\ndebian              latest              a8797652cfd9        2 weeks ago         114MB\n```\n\n## 私有仓库\n\nDocker私有仓库内部用来存放镜像的仓库，具有更高的保密安全级别\n\n### 搭建\n```\n# docker pull registry # 拉取私有仓库镜像\n# docker run -di --name=myRegistry  --restart=always  -p 5000:5000 registry # 启动私有仓库容器\n365d3d60c6741b95bd4c7c1ea7ab0d68f2f3ef62264b2beff3120d77f5c82a88\n# wget http://207.246.103.127:5000/v2/_catalog  # 本机IP地址 207.246.103.127\n--2020-02-20 15:27:49--  http://207.246.103.127:5000/v2/_catalog\nConnecting to 207.246.103.127:5000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 20 [application/json]\nSaving to: '_catalog'\n\n_catalog                           100%[=============================================================>]      20  --.-KB/s    in 0s\n\n2020-02-20 15:27:49 (2.54 MB/s) - '_catalog' saved [20/20]\n\n# cat  _catalog\n{\"repositories\":[]}\n\n##  因为仓库里还没有镜像，所以就是空的；\n\n# cd /etc/docker\n# \"insecure-registries\": [\"207.246.103.127:5000\"] 写入到 daemon.json文件  ## 信任私有仓库\n#  systemctl restart docker # 重启docker\n\n\n```\n### 测试\n标记镜像为私有仓库的镜像\n`docker tag imwl/test 207.246.103.127:5000/debiantest`\n\n上传镜像到私有仓库\n`docker push 207.246.103.127:5000/debiantest`\n\n","slug":"docker/推送，备份","published":1,"updated":"2020-04-10T16:46:16.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu8r000v74uxoj567v8j","content":"<h2 id=\"提交运行的容器成为镜像\"><a href=\"#提交运行的容器成为镜像\" class=\"headerlink\" title=\"提交运行的容器成为镜像\"></a>提交运行的容器成为镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name imwltest -h docker -dit -e TZ=Asia/Shanghai debian</span><br><span class=\"line\"># docker commit -a=&apos;作者&apos; -m=&apos;备注&apos; 运行时容器ID 新镜像名称</span><br><span class=\"line\">docker commit -a=&apos;imwl&apos; -m=&apos;Test&apos;  imwltest imwl/test # 默认TAG: latest</span><br><span class=\"line\">docker commit -a=&apos;imwl&apos; -m=&apos;Test&apos;  imwltest imwl/test:0.14</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        About a minute ago   114MB</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        7 minutes ago        114MB</span><br></pre></td></tr></table></figure>\n<p>Docker Hub 账户  imwl<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\">docker push imwl/test:0.14</span><br><span class=\"line\">docker push imwl/test</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag flasky:latest imwl/flask:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker push imwl/flask:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name flasky -d -p 8000:5000 imwl/flask:latest    # -d 后台运行容器，并返回容器ID  -p 端口映射（8000宿主机，5000容器端口） </span><br><span class=\"line\"></span><br><span class=\"line\">#  -P   随机端口映射</span><br><span class=\"line\"># -e TZ=Asia/Shanghai  指定时区</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h2><p>有些机密性，可以通过docker镜像备份和迁移实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker save -o 备份镜像的名称  源镜像名称:tag版本</span><br><span class=\"line\">docker save -o imwltest.tar imwl/test:0.14</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前目录下 会有 imwltest.tar文件</span><br><span class=\"line\"></span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        27 minutes ago</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        32 minutes ago</span><br><span class=\"line\"></span><br><span class=\"line\"># docker rmi imwl/test:0.14</span><br><span class=\"line\">Untagged: imwl/test:0.14</span><br><span class=\"line\">Untagged: imwl/test@sha256:97b496724012eee3df3421edb2ab6edcd6115e42b8060c24ba06b51da466e0dd</span><br><span class=\"line\">Deleted: sha256:69c1c6c58124c56456a22c92a2e2125c9abc744f6acde379f5039779becbcc29</span><br><span class=\"line\"></span><br><span class=\"line\"># docker  images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        32 minutes ago</span><br><span class=\"line\"></span><br><span class=\"line\">## 恢复</span><br><span class=\"line\"># docker load -i imwltest.tar</span><br><span class=\"line\">Loaded image: imwl/test:0.14</span><br><span class=\"line\"></span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        32 minutes ago      114MB</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        37 minutes ago      114MB</span><br><span class=\"line\">debian              latest              a8797652cfd9        2 weeks ago         114MB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h2><p>Docker私有仓库内部用来存放镜像的仓库，具有更高的保密安全级别</p>\n<h3 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull registry # 拉取私有仓库镜像</span><br><span class=\"line\"># docker run -di --name=myRegistry  --restart=always  -p 5000:5000 registry # 启动私有仓库容器</span><br><span class=\"line\">365d3d60c6741b95bd4c7c1ea7ab0d68f2f3ef62264b2beff3120d77f5c82a88</span><br><span class=\"line\"># wget http://207.246.103.127:5000/v2/_catalog  # 本机IP地址 207.246.103.127</span><br><span class=\"line\">--2020-02-20 15:27:49--  http://207.246.103.127:5000/v2/_catalog</span><br><span class=\"line\">Connecting to 207.246.103.127:5000... connected.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 20 [application/json]</span><br><span class=\"line\">Saving to: &apos;_catalog&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">_catalog                           100%[=============================================================&gt;]      20  --.-KB/s    in 0s</span><br><span class=\"line\"></span><br><span class=\"line\">2020-02-20 15:27:49 (2.54 MB/s) - &apos;_catalog&apos; saved [20/20]</span><br><span class=\"line\"></span><br><span class=\"line\"># cat  _catalog</span><br><span class=\"line\">&#123;&quot;repositories&quot;:[]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为仓库里还没有镜像，所以就是空的；</span><br><span class=\"line\"></span><br><span class=\"line\"># cd /etc/docker</span><br><span class=\"line\"># &quot;insecure-registries&quot;: [&quot;207.246.103.127:5000&quot;] 写入到 daemon.json文件  ## 信任私有仓库</span><br><span class=\"line\">#  systemctl restart docker # 重启docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>标记镜像为私有仓库的镜像<br><code>docker tag imwl/test 207.246.103.127:5000/debiantest</code></p>\n<p>上传镜像到私有仓库<br><code>docker push 207.246.103.127:5000/debiantest</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"提交运行的容器成为镜像\"><a href=\"#提交运行的容器成为镜像\" class=\"headerlink\" title=\"提交运行的容器成为镜像\"></a>提交运行的容器成为镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name imwltest -h docker -dit -e TZ=Asia/Shanghai debian</span><br><span class=\"line\"># docker commit -a=&apos;作者&apos; -m=&apos;备注&apos; 运行时容器ID 新镜像名称</span><br><span class=\"line\">docker commit -a=&apos;imwl&apos; -m=&apos;Test&apos;  imwltest imwl/test # 默认TAG: latest</span><br><span class=\"line\">docker commit -a=&apos;imwl&apos; -m=&apos;Test&apos;  imwltest imwl/test:0.14</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        About a minute ago   114MB</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        7 minutes ago        114MB</span><br></pre></td></tr></table></figure>\n<p>Docker Hub 账户  imwl<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\">docker push imwl/test:0.14</span><br><span class=\"line\">docker push imwl/test</span><br><span class=\"line\"></span><br><span class=\"line\">docker tag flasky:latest imwl/flask:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker push imwl/flask:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name flasky -d -p 8000:5000 imwl/flask:latest    # -d 后台运行容器，并返回容器ID  -p 端口映射（8000宿主机，5000容器端口） </span><br><span class=\"line\"></span><br><span class=\"line\">#  -P   随机端口映射</span><br><span class=\"line\"># -e TZ=Asia/Shanghai  指定时区</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h2><p>有些机密性，可以通过docker镜像备份和迁移实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker save -o 备份镜像的名称  源镜像名称:tag版本</span><br><span class=\"line\">docker save -o imwltest.tar imwl/test:0.14</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前目录下 会有 imwltest.tar文件</span><br><span class=\"line\"></span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        27 minutes ago</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        32 minutes ago</span><br><span class=\"line\"></span><br><span class=\"line\"># docker rmi imwl/test:0.14</span><br><span class=\"line\">Untagged: imwl/test:0.14</span><br><span class=\"line\">Untagged: imwl/test@sha256:97b496724012eee3df3421edb2ab6edcd6115e42b8060c24ba06b51da466e0dd</span><br><span class=\"line\">Deleted: sha256:69c1c6c58124c56456a22c92a2e2125c9abc744f6acde379f5039779becbcc29</span><br><span class=\"line\"></span><br><span class=\"line\"># docker  images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        32 minutes ago</span><br><span class=\"line\"></span><br><span class=\"line\">## 恢复</span><br><span class=\"line\"># docker load -i imwltest.tar</span><br><span class=\"line\">Loaded image: imwl/test:0.14</span><br><span class=\"line\"></span><br><span class=\"line\"># docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">imwl/test           0.14                69c1c6c58124        32 minutes ago      114MB</span><br><span class=\"line\">imwl/test           latest              ad65438d599f        37 minutes ago      114MB</span><br><span class=\"line\">debian              latest              a8797652cfd9        2 weeks ago         114MB</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h2><p>Docker私有仓库内部用来存放镜像的仓库，具有更高的保密安全级别</p>\n<h3 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull registry # 拉取私有仓库镜像</span><br><span class=\"line\"># docker run -di --name=myRegistry  --restart=always  -p 5000:5000 registry # 启动私有仓库容器</span><br><span class=\"line\">365d3d60c6741b95bd4c7c1ea7ab0d68f2f3ef62264b2beff3120d77f5c82a88</span><br><span class=\"line\"># wget http://207.246.103.127:5000/v2/_catalog  # 本机IP地址 207.246.103.127</span><br><span class=\"line\">--2020-02-20 15:27:49--  http://207.246.103.127:5000/v2/_catalog</span><br><span class=\"line\">Connecting to 207.246.103.127:5000... connected.</span><br><span class=\"line\">HTTP request sent, awaiting response... 200 OK</span><br><span class=\"line\">Length: 20 [application/json]</span><br><span class=\"line\">Saving to: &apos;_catalog&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">_catalog                           100%[=============================================================&gt;]      20  --.-KB/s    in 0s</span><br><span class=\"line\"></span><br><span class=\"line\">2020-02-20 15:27:49 (2.54 MB/s) - &apos;_catalog&apos; saved [20/20]</span><br><span class=\"line\"></span><br><span class=\"line\"># cat  _catalog</span><br><span class=\"line\">&#123;&quot;repositories&quot;:[]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为仓库里还没有镜像，所以就是空的；</span><br><span class=\"line\"></span><br><span class=\"line\"># cd /etc/docker</span><br><span class=\"line\"># &quot;insecure-registries&quot;: [&quot;207.246.103.127:5000&quot;] 写入到 daemon.json文件  ## 信任私有仓库</span><br><span class=\"line\">#  systemctl restart docker # 重启docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>标记镜像为私有仓库的镜像<br><code>docker tag imwl/test 207.246.103.127:5000/debiantest</code></p>\n<p>上传镜像到私有仓库<br><code>docker push 207.246.103.127:5000/debiantest</code></p>\n"},{"title":"Go的package与import","date":"2019-09-17T03:51:16.000Z","_content":"\n\n# package\n1. package 是最基本的分发单位 和 工程管理中依赖关系的体现\n2. 每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包\n3. 要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数\n4. 同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成\n\n\n\n\n## import 原理\n此处需要插图\n\n## import 导入包的几种方式：点，别名与下划线\n在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：\n```\n     import(\n         \"fmt\"\n     )\n```\n然后在代码里面可以通过如下的方式调用\n`fmt.Println(\"hello world\")`\n\n上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：\n\n相对路径     `import   \"./model\"`  // 当前文件同一目录的model目录，但是不建议这种方式import\n\n绝对路径    `import   \"shorturl/model\"`  // 加载GOPATH/src/shorturl/model模块\n\n## 三种导入包的使用方法。\n\n1. 点操作` import( . \"fmt\" )` \n可以省略前缀的包名，`fmt.Println(\"hello world\") ` 可以省略的写成Println(\"hello world\")\n\n2. 别名操作`import( f \"fmt\" )`   调用包函数时前缀变成了重命名的前缀，即f.Println(\"hello world\")\n\n3.  \\_ 操作`import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) `\n\n\\_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()\n\n","source":"_posts/golang/package与import.md","raw":"---\n\ntitle: Go的package与import\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n\n\n# package\n1. package 是最基本的分发单位 和 工程管理中依赖关系的体现\n2. 每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包\n3. 要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数\n4. 同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成\n\n\n\n\n## import 原理\n此处需要插图\n\n## import 导入包的几种方式：点，别名与下划线\n在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：\n```\n     import(\n         \"fmt\"\n     )\n```\n然后在代码里面可以通过如下的方式调用\n`fmt.Println(\"hello world\")`\n\n上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：\n\n相对路径     `import   \"./model\"`  // 当前文件同一目录的model目录，但是不建议这种方式import\n\n绝对路径    `import   \"shorturl/model\"`  // 加载GOPATH/src/shorturl/model模块\n\n## 三种导入包的使用方法。\n\n1. 点操作` import( . \"fmt\" )` \n可以省略前缀的包名，`fmt.Println(\"hello world\") ` 可以省略的写成Println(\"hello world\")\n\n2. 别名操作`import( f \"fmt\" )`   调用包函数时前缀变成了重命名的前缀，即f.Println(\"hello world\")\n\n3.  \\_ 操作`import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) `\n\n\\_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()\n\n","slug":"golang/package与import","published":1,"updated":"2020-04-10T16:46:16.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu8z000y74uxlgha71uh","content":"<h1 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h1><ol>\n<li>package 是最基本的分发单位 和 工程管理中依赖关系的体现</li>\n<li>每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包</li>\n<li>要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数</li>\n<li>同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成</li>\n</ol>\n<h2 id=\"import-原理\"><a href=\"#import-原理\" class=\"headerlink\" title=\"import 原理\"></a>import 原理</h2><p>此处需要插图</p>\n<h2 id=\"import-导入包的几种方式：点，别名与下划线\"><a href=\"#import-导入包的几种方式：点，别名与下划线\" class=\"headerlink\" title=\"import 导入包的几种方式：点，别名与下划线\"></a>import 导入包的几种方式：点，别名与下划线</h2><p>在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>然后在代码里面可以通过如下的方式调用<br><code>fmt.Println(&quot;hello world&quot;)</code></p>\n<p>上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<p>相对路径     <code>import   &quot;./model&quot;</code>  // 当前文件同一目录的model目录，但是不建议这种方式import</p>\n<p>绝对路径    <code>import   &quot;shorturl/model&quot;</code>  // 加载GOPATH/src/shorturl/model模块</p>\n<h2 id=\"三种导入包的使用方法。\"><a href=\"#三种导入包的使用方法。\" class=\"headerlink\" title=\"三种导入包的使用方法。\"></a>三种导入包的使用方法。</h2><ol>\n<li><p>点操作<code>import( . &quot;fmt&quot; )</code><br>可以省略前缀的包名，<code>fmt.Println(&quot;hello world&quot;)</code> 可以省略的写成Println(“hello world”)</p>\n</li>\n<li><p>别名操作<code>import( f &quot;fmt&quot; )</code>   调用包函数时前缀变成了重命名的前缀，即f.Println(“hello world”)</p>\n</li>\n<li><p>_ 操作<code>import ( &quot;database/sql&quot; _ &quot;github.com/ziutek/mymysql/godrv&quot; )</code></p>\n</li>\n</ol>\n<p>_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h1><ol>\n<li>package 是最基本的分发单位 和 工程管理中依赖关系的体现</li>\n<li>每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包</li>\n<li>要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数</li>\n<li>同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成</li>\n</ol>\n<h2 id=\"import-原理\"><a href=\"#import-原理\" class=\"headerlink\" title=\"import 原理\"></a>import 原理</h2><p>此处需要插图</p>\n<h2 id=\"import-导入包的几种方式：点，别名与下划线\"><a href=\"#import-导入包的几种方式：点，别名与下划线\" class=\"headerlink\" title=\"import 导入包的几种方式：点，别名与下划线\"></a>import 导入包的几种方式：点，别名与下划线</h2><p>在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>然后在代码里面可以通过如下的方式调用<br><code>fmt.Println(&quot;hello world&quot;)</code></p>\n<p>上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<p>相对路径     <code>import   &quot;./model&quot;</code>  // 当前文件同一目录的model目录，但是不建议这种方式import</p>\n<p>绝对路径    <code>import   &quot;shorturl/model&quot;</code>  // 加载GOPATH/src/shorturl/model模块</p>\n<h2 id=\"三种导入包的使用方法。\"><a href=\"#三种导入包的使用方法。\" class=\"headerlink\" title=\"三种导入包的使用方法。\"></a>三种导入包的使用方法。</h2><ol>\n<li><p>点操作<code>import( . &quot;fmt&quot; )</code><br>可以省略前缀的包名，<code>fmt.Println(&quot;hello world&quot;)</code> 可以省略的写成Println(“hello world”)</p>\n</li>\n<li><p>别名操作<code>import( f &quot;fmt&quot; )</code>   调用包函数时前缀变成了重命名的前缀，即f.Println(“hello world”)</p>\n</li>\n<li><p>_ 操作<code>import ( &quot;database/sql&quot; _ &quot;github.com/ziutek/mymysql/godrv&quot; )</code></p>\n</li>\n</ol>\n<p>_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()</p>\n"},{"title":"Go基础语法","date":"2019-09-17T03:51:16.000Z","_content":"\n## 一般结构\n```\n// 当前程序的包名\npackage main\n\n// 导入其他包\nimport . \"fmt\"\n\n// 常量定义\nconst PI = 3.14\n\n// 全局变量的声明和赋值\nvar name = \"gopher\"\n\n// 一般类型声明\ntype newType int\n\n// 结构的声明\ntype gopher struct{}\n\n// 接口的声明\ntype golang interface{}\n\n// 由main函数作为程序入口点启动\nfunc main() {\n    Println(\"Hello World!\")\n}\n```\n\n\n## 变量\n```\npackage main\nimport \"fmt\"\n\nvar x1, y1 int\nvar (  // 这种因式分解关键字的写法一般用于声明全局变量\n    a1 int\n    b1 bool\n)\n\nvar c1, d1 int = 1, 2\nvar e1, f1 = 123, \"hello\"\n\nvar h1 int  // 全局变量 允许声明但不使用\n// e1 := \"weilai\" // 只能被用在函数体内，而不可以用于全局变量的声明与赋值\n\n\nfunc main() {\n   /*\n    多行注释\n   */\n   // 一行注释\n   var a string = \"weilai\"  // 声明一个变量并初始化\n   var b, c int = 1, 2   // 一次声明多个变量：\n   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 ''\n   var z bool // bool 0值 false\n   fmt.Println(z) \n   fmt.Println(a)  // 打印 a 换行\n   fmt.Print(b, c)  // 不会换行\n   fmt.Println(d)\n   fmt.Println(\"hello\")  // 会换行\n   fmt.Println(\"world\" )\n   fmt.Print(\"hello\")\n   fmt.Print(\"world\")\n\n   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := \n   e := \"weilai\"  // 等同于 var e string = \"weilai\"  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明\n   f, g := 20, 30 \n   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。\n \n   // h := 40  // 声明但未使用  局部变量  会报错\n   fmt.Println(\"e=\", e , \",f=\" , f , \",g=\" , g)\n   fmt.Printf(\"e=%s,f=%d,g=%d\" , e , f , g) // Printf 是格式化输出\n   var vname1, vname2, vname3 = \"v1\", \"v2\", \"v3\"\n   fmt.Printf(vname1, vname2, vname3)\n   println(x1, y1, a1, b1, c1, d1, e1, f1)\n\n   _,numb,strs := numbers() //只获取函数返回值的后两个\n   fmt.Println(numb,strs)\n}\n//一个可以返回多个值的函数\nfunc numbers()(int,int,string){\n   a , b , c := 1 , 2 , \"str\"\n   return a,b,c\n}\n\n/*\n\nfalse\nweilai\n1 20\nhello\nworld\nhelloworlde= weilai ,f= 30 ,g= 20\ne=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello\n2 str\n\n*/\n```\n","source":"_posts/golang/基础语法.md","raw":"---\n\ntitle: Go基础语法\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n\n## 一般结构\n```\n// 当前程序的包名\npackage main\n\n// 导入其他包\nimport . \"fmt\"\n\n// 常量定义\nconst PI = 3.14\n\n// 全局变量的声明和赋值\nvar name = \"gopher\"\n\n// 一般类型声明\ntype newType int\n\n// 结构的声明\ntype gopher struct{}\n\n// 接口的声明\ntype golang interface{}\n\n// 由main函数作为程序入口点启动\nfunc main() {\n    Println(\"Hello World!\")\n}\n```\n\n\n## 变量\n```\npackage main\nimport \"fmt\"\n\nvar x1, y1 int\nvar (  // 这种因式分解关键字的写法一般用于声明全局变量\n    a1 int\n    b1 bool\n)\n\nvar c1, d1 int = 1, 2\nvar e1, f1 = 123, \"hello\"\n\nvar h1 int  // 全局变量 允许声明但不使用\n// e1 := \"weilai\" // 只能被用在函数体内，而不可以用于全局变量的声明与赋值\n\n\nfunc main() {\n   /*\n    多行注释\n   */\n   // 一行注释\n   var a string = \"weilai\"  // 声明一个变量并初始化\n   var b, c int = 1, 2   // 一次声明多个变量：\n   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 ''\n   var z bool // bool 0值 false\n   fmt.Println(z) \n   fmt.Println(a)  // 打印 a 换行\n   fmt.Print(b, c)  // 不会换行\n   fmt.Println(d)\n   fmt.Println(\"hello\")  // 会换行\n   fmt.Println(\"world\" )\n   fmt.Print(\"hello\")\n   fmt.Print(\"world\")\n\n   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := \n   e := \"weilai\"  // 等同于 var e string = \"weilai\"  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明\n   f, g := 20, 30 \n   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。\n \n   // h := 40  // 声明但未使用  局部变量  会报错\n   fmt.Println(\"e=\", e , \",f=\" , f , \",g=\" , g)\n   fmt.Printf(\"e=%s,f=%d,g=%d\" , e , f , g) // Printf 是格式化输出\n   var vname1, vname2, vname3 = \"v1\", \"v2\", \"v3\"\n   fmt.Printf(vname1, vname2, vname3)\n   println(x1, y1, a1, b1, c1, d1, e1, f1)\n\n   _,numb,strs := numbers() //只获取函数返回值的后两个\n   fmt.Println(numb,strs)\n}\n//一个可以返回多个值的函数\nfunc numbers()(int,int,string){\n   a , b , c := 1 , 2 , \"str\"\n   return a,b,c\n}\n\n/*\n\nfalse\nweilai\n1 20\nhello\nworld\nhelloworlde= weilai ,f= 30 ,g= 20\ne=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello\n2 str\n\n*/\n```\n","slug":"golang/基础语法","published":1,"updated":"2020-04-10T16:46:16.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu99001074uxok8lz85l","content":"<h2 id=\"一般结构\"><a href=\"#一般结构\" class=\"headerlink\" title=\"一般结构\"></a>一般结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前程序的包名</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入其他包</span><br><span class=\"line\">import . &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 常量定义</span><br><span class=\"line\">const PI = 3.14</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量的声明和赋值</span><br><span class=\"line\">var name = &quot;gopher&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 一般类型声明</span><br><span class=\"line\">type newType int</span><br><span class=\"line\"></span><br><span class=\"line\">// 结构的声明</span><br><span class=\"line\">type gopher struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 接口的声明</span><br><span class=\"line\">type golang interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由main函数作为程序入口点启动</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var x1, y1 int</span><br><span class=\"line\">var (  // 这种因式分解关键字的写法一般用于声明全局变量</span><br><span class=\"line\">    a1 int</span><br><span class=\"line\">    b1 bool</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var c1, d1 int = 1, 2</span><br><span class=\"line\">var e1, f1 = 123, &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var h1 int  // 全局变量 允许声明但不使用</span><br><span class=\"line\">// e1 := &quot;weilai&quot; // 只能被用在函数体内，而不可以用于全局变量的声明与赋值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /*</span><br><span class=\"line\">    多行注释</span><br><span class=\"line\">   */</span><br><span class=\"line\">   // 一行注释</span><br><span class=\"line\">   var a string = &quot;weilai&quot;  // 声明一个变量并初始化</span><br><span class=\"line\">   var b, c int = 1, 2   // 一次声明多个变量：</span><br><span class=\"line\">   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 &apos;&apos;</span><br><span class=\"line\">   var z bool // bool 0值 false</span><br><span class=\"line\">   fmt.Println(z) </span><br><span class=\"line\">   fmt.Println(a)  // 打印 a 换行</span><br><span class=\"line\">   fmt.Print(b, c)  // 不会换行</span><br><span class=\"line\">   fmt.Println(d)</span><br><span class=\"line\">   fmt.Println(&quot;hello&quot;)  // 会换行</span><br><span class=\"line\">   fmt.Println(&quot;world&quot; )</span><br><span class=\"line\">   fmt.Print(&quot;hello&quot;)</span><br><span class=\"line\">   fmt.Print(&quot;world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := </span><br><span class=\"line\">   e := &quot;weilai&quot;  // 等同于 var e string = &quot;weilai&quot;  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明</span><br><span class=\"line\">   f, g := 20, 30 </span><br><span class=\"line\">   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。</span><br><span class=\"line\"> </span><br><span class=\"line\">   // h := 40  // 声明但未使用  局部变量  会报错</span><br><span class=\"line\">   fmt.Println(&quot;e=&quot;, e , &quot;,f=&quot; , f , &quot;,g=&quot; , g)</span><br><span class=\"line\">   fmt.Printf(&quot;e=%s,f=%d,g=%d&quot; , e , f , g) // Printf 是格式化输出</span><br><span class=\"line\">   var vname1, vname2, vname3 = &quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;</span><br><span class=\"line\">   fmt.Printf(vname1, vname2, vname3)</span><br><span class=\"line\">   println(x1, y1, a1, b1, c1, d1, e1, f1)</span><br><span class=\"line\"></span><br><span class=\"line\">   _,numb,strs := numbers() //只获取函数返回值的后两个</span><br><span class=\"line\">   fmt.Println(numb,strs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//一个可以返回多个值的函数</span><br><span class=\"line\">func numbers()(int,int,string)&#123;</span><br><span class=\"line\">   a , b , c := 1 , 2 , &quot;str&quot;</span><br><span class=\"line\">   return a,b,c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">false</span><br><span class=\"line\">weilai</span><br><span class=\"line\">1 20</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">helloworlde= weilai ,f= 30 ,g= 20</span><br><span class=\"line\">e=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello</span><br><span class=\"line\">2 str</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一般结构\"><a href=\"#一般结构\" class=\"headerlink\" title=\"一般结构\"></a>一般结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前程序的包名</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入其他包</span><br><span class=\"line\">import . &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 常量定义</span><br><span class=\"line\">const PI = 3.14</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量的声明和赋值</span><br><span class=\"line\">var name = &quot;gopher&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 一般类型声明</span><br><span class=\"line\">type newType int</span><br><span class=\"line\"></span><br><span class=\"line\">// 结构的声明</span><br><span class=\"line\">type gopher struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 接口的声明</span><br><span class=\"line\">type golang interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由main函数作为程序入口点启动</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var x1, y1 int</span><br><span class=\"line\">var (  // 这种因式分解关键字的写法一般用于声明全局变量</span><br><span class=\"line\">    a1 int</span><br><span class=\"line\">    b1 bool</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var c1, d1 int = 1, 2</span><br><span class=\"line\">var e1, f1 = 123, &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var h1 int  // 全局变量 允许声明但不使用</span><br><span class=\"line\">// e1 := &quot;weilai&quot; // 只能被用在函数体内，而不可以用于全局变量的声明与赋值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /*</span><br><span class=\"line\">    多行注释</span><br><span class=\"line\">   */</span><br><span class=\"line\">   // 一行注释</span><br><span class=\"line\">   var a string = &quot;weilai&quot;  // 声明一个变量并初始化</span><br><span class=\"line\">   var b, c int = 1, 2   // 一次声明多个变量：</span><br><span class=\"line\">   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 &apos;&apos;</span><br><span class=\"line\">   var z bool // bool 0值 false</span><br><span class=\"line\">   fmt.Println(z) </span><br><span class=\"line\">   fmt.Println(a)  // 打印 a 换行</span><br><span class=\"line\">   fmt.Print(b, c)  // 不会换行</span><br><span class=\"line\">   fmt.Println(d)</span><br><span class=\"line\">   fmt.Println(&quot;hello&quot;)  // 会换行</span><br><span class=\"line\">   fmt.Println(&quot;world&quot; )</span><br><span class=\"line\">   fmt.Print(&quot;hello&quot;)</span><br><span class=\"line\">   fmt.Print(&quot;world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := </span><br><span class=\"line\">   e := &quot;weilai&quot;  // 等同于 var e string = &quot;weilai&quot;  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明</span><br><span class=\"line\">   f, g := 20, 30 </span><br><span class=\"line\">   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。</span><br><span class=\"line\"> </span><br><span class=\"line\">   // h := 40  // 声明但未使用  局部变量  会报错</span><br><span class=\"line\">   fmt.Println(&quot;e=&quot;, e , &quot;,f=&quot; , f , &quot;,g=&quot; , g)</span><br><span class=\"line\">   fmt.Printf(&quot;e=%s,f=%d,g=%d&quot; , e , f , g) // Printf 是格式化输出</span><br><span class=\"line\">   var vname1, vname2, vname3 = &quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;</span><br><span class=\"line\">   fmt.Printf(vname1, vname2, vname3)</span><br><span class=\"line\">   println(x1, y1, a1, b1, c1, d1, e1, f1)</span><br><span class=\"line\"></span><br><span class=\"line\">   _,numb,strs := numbers() //只获取函数返回值的后两个</span><br><span class=\"line\">   fmt.Println(numb,strs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//一个可以返回多个值的函数</span><br><span class=\"line\">func numbers()(int,int,string)&#123;</span><br><span class=\"line\">   a , b , c := 1 , 2 , &quot;str&quot;</span><br><span class=\"line\">   return a,b,c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">false</span><br><span class=\"line\">weilai</span><br><span class=\"line\">1 20</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">helloworlde= weilai ,f= 30 ,g= 20</span><br><span class=\"line\">e=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello</span><br><span class=\"line\">2 str</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n"},{"title":"go简介","date":"2019-07-14T03:05:31.000Z","_content":"\n## 简介\n\n### GO 语言特点\n1. 运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）\n2. 语言层面支持并发，易于利用多核实现并发  （最大特点）\n3. 内置runtime（作用：性能监控，GC等），支持垃圾回收\n4. 丰富标准库，强大网络库\n5. 内置强大的工具（gofmt）,跨平台编译，内嵌C支持\n\n### GO 语言的应用\n1. 服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。\n2. 分布式系统，数据库代理器等\n3. 网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、\n4. 内存数据库，前一段时间google开发的groupcache，couchbase的部分组建\n5. 云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。\n\n### GO 语言命令行工具\n1. go build  用于编译源码文件，代码包，依赖包;\n2. go run    可以编译并运行Go源码文件\n3. go get    主要用来动态获取远程代码包\n\n","source":"_posts/golang/readme.md","raw":"---\ntitle: go简介\ndate: 2019-07-14 11:05:31\ntags:\ncategories: golang\n---\n\n## 简介\n\n### GO 语言特点\n1. 运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）\n2. 语言层面支持并发，易于利用多核实现并发  （最大特点）\n3. 内置runtime（作用：性能监控，GC等），支持垃圾回收\n4. 丰富标准库，强大网络库\n5. 内置强大的工具（gofmt）,跨平台编译，内嵌C支持\n\n### GO 语言的应用\n1. 服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。\n2. 分布式系统，数据库代理器等\n3. 网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、\n4. 内存数据库，前一段时间google开发的groupcache，couchbase的部分组建\n5. 云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。\n\n### GO 语言命令行工具\n1. go build  用于编译源码文件，代码包，依赖包;\n2. go run    可以编译并运行Go源码文件\n3. go get    主要用来动态获取远程代码包\n\n","slug":"golang/readme","published":1,"updated":"2020-04-10T16:46:16.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu9i001374ux8h6whcfl","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GO-语言特点\"><a href=\"#GO-语言特点\" class=\"headerlink\" title=\"GO 语言特点\"></a>GO 语言特点</h3><ol>\n<li>运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）</li>\n<li>语言层面支持并发，易于利用多核实现并发  （最大特点）</li>\n<li>内置runtime（作用：性能监控，GC等），支持垃圾回收</li>\n<li>丰富标准库，强大网络库</li>\n<li>内置强大的工具（gofmt）,跨平台编译，内嵌C支持</li>\n</ol>\n<h3 id=\"GO-语言的应用\"><a href=\"#GO-语言的应用\" class=\"headerlink\" title=\"GO 语言的应用\"></a>GO 语言的应用</h3><ol>\n<li>服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。</li>\n<li>分布式系统，数据库代理器等</li>\n<li>网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、</li>\n<li>内存数据库，前一段时间google开发的groupcache，couchbase的部分组建</li>\n<li>云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。</li>\n</ol>\n<h3 id=\"GO-语言命令行工具\"><a href=\"#GO-语言命令行工具\" class=\"headerlink\" title=\"GO 语言命令行工具\"></a>GO 语言命令行工具</h3><ol>\n<li>go build  用于编译源码文件，代码包，依赖包;</li>\n<li>go run    可以编译并运行Go源码文件</li>\n<li>go get    主要用来动态获取远程代码包</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GO-语言特点\"><a href=\"#GO-语言特点\" class=\"headerlink\" title=\"GO 语言特点\"></a>GO 语言特点</h3><ol>\n<li>运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）</li>\n<li>语言层面支持并发，易于利用多核实现并发  （最大特点）</li>\n<li>内置runtime（作用：性能监控，GC等），支持垃圾回收</li>\n<li>丰富标准库，强大网络库</li>\n<li>内置强大的工具（gofmt）,跨平台编译，内嵌C支持</li>\n</ol>\n<h3 id=\"GO-语言的应用\"><a href=\"#GO-语言的应用\" class=\"headerlink\" title=\"GO 语言的应用\"></a>GO 语言的应用</h3><ol>\n<li>服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。</li>\n<li>分布式系统，数据库代理器等</li>\n<li>网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、</li>\n<li>内存数据库，前一段时间google开发的groupcache，couchbase的部分组建</li>\n<li>云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。</li>\n</ol>\n<h3 id=\"GO-语言命令行工具\"><a href=\"#GO-语言命令行工具\" class=\"headerlink\" title=\"GO 语言命令行工具\"></a>GO 语言命令行工具</h3><ol>\n<li>go build  用于编译源码文件，代码包，依赖包;</li>\n<li>go run    可以编译并运行Go源码文件</li>\n<li>go get    主要用来动态获取远程代码包</li>\n</ol>\n"},{"title":"规范","date":"2019-07-14T03:05:31.000Z","_content":"\n## 变量\n### 声明，初始化，赋值\n1. 同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5\n2. 全局变量声明必须使用`var`关键字,局部变量可以省略（a,b,c int =1,2,3）\n3. 变量 `_` 表示丢弃\n### 变量类型转换\n1. 类型转换必须是显示的，不存在隐式转换\n2. 只发生在兼容类型之间\n3. <变量名称> [:]= <目标类型>(<需要转换的变量>)\n```\npackage main\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc main(){\n\n  var a float32 = 3.1\n  c := int(a)\n  \n  fmt.Println(c)\n  fmt.Println(reflect.TypeOf(c))\n  \n}\n```\n\n### 变量可见性规则\n1. 大写字母开头的变量可导出，其他包可以读取，是共有变量\n2. 小写字母开头的变量不可导出，是私有变量\n\n## 常量\n\n### 常量定义形式\n常量中的数据类型只可以是**布尔型、数字型（整数型、浮点型和复数）和字符串型**\n1. 显示 const identifier [type] = value \n2. 隐式 const identifier = value  (通常叫做  无类型常量)\n3. 常量可以使用 **内置**表达式定义  eg: `len()`,`unsafe.Size0f()`等\n\n### 特殊常量 iota\n1. iota 在 const 关键字出现时被重置为 0 \n2. const 中每新增一行常量声明 iota 就计数一次\n3. iota 只能在常量中使用\n\n**iota** 常见使用法：\n1. 跳值使用法\n2. 插队使用法\n3. 表达式隐式使用法\n4. 单行使用法\n\n\n\n","source":"_posts/golang/规范.md","raw":"---\ntitle: 规范\ndate: 2019-07-14 11:05:31\ntags:\ncategories: golang\n---\n\n## 变量\n### 声明，初始化，赋值\n1. 同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5\n2. 全局变量声明必须使用`var`关键字,局部变量可以省略（a,b,c int =1,2,3）\n3. 变量 `_` 表示丢弃\n### 变量类型转换\n1. 类型转换必须是显示的，不存在隐式转换\n2. 只发生在兼容类型之间\n3. <变量名称> [:]= <目标类型>(<需要转换的变量>)\n```\npackage main\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc main(){\n\n  var a float32 = 3.1\n  c := int(a)\n  \n  fmt.Println(c)\n  fmt.Println(reflect.TypeOf(c))\n  \n}\n```\n\n### 变量可见性规则\n1. 大写字母开头的变量可导出，其他包可以读取，是共有变量\n2. 小写字母开头的变量不可导出，是私有变量\n\n## 常量\n\n### 常量定义形式\n常量中的数据类型只可以是**布尔型、数字型（整数型、浮点型和复数）和字符串型**\n1. 显示 const identifier [type] = value \n2. 隐式 const identifier = value  (通常叫做  无类型常量)\n3. 常量可以使用 **内置**表达式定义  eg: `len()`,`unsafe.Size0f()`等\n\n### 特殊常量 iota\n1. iota 在 const 关键字出现时被重置为 0 \n2. const 中每新增一行常量声明 iota 就计数一次\n3. iota 只能在常量中使用\n\n**iota** 常见使用法：\n1. 跳值使用法\n2. 插队使用法\n3. 表达式隐式使用法\n4. 单行使用法\n\n\n\n","slug":"golang/规范","published":1,"updated":"2020-04-10T16:46:16.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu9n001574uxyz7djgg7","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"声明，初始化，赋值\"><a href=\"#声明，初始化，赋值\" class=\"headerlink\" title=\"声明，初始化，赋值\"></a>声明，初始化，赋值</h3><ol>\n<li>同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5</li>\n<li>全局变量声明必须使用<code>var</code>关键字,局部变量可以省略（a,b,c int =1,2,3）</li>\n<li>变量 <code>_</code> 表示丢弃<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3></li>\n<li>类型转换必须是显示的，不存在隐式转换</li>\n<li>只发生在兼容类型之间</li>\n<li>&lt;变量名称&gt; [:]= &lt;目标类型&gt;(&lt;需要转换的变量&gt;)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a float32 = 3.1</span><br><span class=\"line\">  c := int(a)</span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(c)</span><br><span class=\"line\">  fmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"变量可见性规则\"><a href=\"#变量可见性规则\" class=\"headerlink\" title=\"变量可见性规则\"></a>变量可见性规则</h3><ol>\n<li>大写字母开头的变量可导出，其他包可以读取，是共有变量</li>\n<li>小写字母开头的变量不可导出，是私有变量</li>\n</ol>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"常量定义形式\"><a href=\"#常量定义形式\" class=\"headerlink\" title=\"常量定义形式\"></a>常量定义形式</h3><p>常量中的数据类型只可以是<strong>布尔型、数字型（整数型、浮点型和复数）和字符串型</strong></p>\n<ol>\n<li>显示 const identifier [type] = value </li>\n<li>隐式 const identifier = value  (通常叫做  无类型常量)</li>\n<li>常量可以使用 <strong>内置</strong>表达式定义  eg: <code>len()</code>,<code>unsafe.Size0f()</code>等</li>\n</ol>\n<h3 id=\"特殊常量-iota\"><a href=\"#特殊常量-iota\" class=\"headerlink\" title=\"特殊常量 iota\"></a>特殊常量 iota</h3><ol>\n<li>iota 在 const 关键字出现时被重置为 0 </li>\n<li>const 中每新增一行常量声明 iota 就计数一次</li>\n<li>iota 只能在常量中使用</li>\n</ol>\n<p><strong>iota</strong> 常见使用法：</p>\n<ol>\n<li>跳值使用法</li>\n<li>插队使用法</li>\n<li>表达式隐式使用法</li>\n<li>单行使用法</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"声明，初始化，赋值\"><a href=\"#声明，初始化，赋值\" class=\"headerlink\" title=\"声明，初始化，赋值\"></a>声明，初始化，赋值</h3><ol>\n<li>同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5</li>\n<li>全局变量声明必须使用<code>var</code>关键字,局部变量可以省略（a,b,c int =1,2,3）</li>\n<li>变量 <code>_</code> 表示丢弃<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3></li>\n<li>类型转换必须是显示的，不存在隐式转换</li>\n<li>只发生在兼容类型之间</li>\n<li>&lt;变量名称&gt; [:]= &lt;目标类型&gt;(&lt;需要转换的变量&gt;)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a float32 = 3.1</span><br><span class=\"line\">  c := int(a)</span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(c)</span><br><span class=\"line\">  fmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"变量可见性规则\"><a href=\"#变量可见性规则\" class=\"headerlink\" title=\"变量可见性规则\"></a>变量可见性规则</h3><ol>\n<li>大写字母开头的变量可导出，其他包可以读取，是共有变量</li>\n<li>小写字母开头的变量不可导出，是私有变量</li>\n</ol>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"常量定义形式\"><a href=\"#常量定义形式\" class=\"headerlink\" title=\"常量定义形式\"></a>常量定义形式</h3><p>常量中的数据类型只可以是<strong>布尔型、数字型（整数型、浮点型和复数）和字符串型</strong></p>\n<ol>\n<li>显示 const identifier [type] = value </li>\n<li>隐式 const identifier = value  (通常叫做  无类型常量)</li>\n<li>常量可以使用 <strong>内置</strong>表达式定义  eg: <code>len()</code>,<code>unsafe.Size0f()</code>等</li>\n</ol>\n<h3 id=\"特殊常量-iota\"><a href=\"#特殊常量-iota\" class=\"headerlink\" title=\"特殊常量 iota\"></a>特殊常量 iota</h3><ol>\n<li>iota 在 const 关键字出现时被重置为 0 </li>\n<li>const 中每新增一行常量声明 iota 就计数一次</li>\n<li>iota 只能在常量中使用</li>\n</ol>\n<p><strong>iota</strong> 常见使用法：</p>\n<ol>\n<li>跳值使用法</li>\n<li>插队使用法</li>\n<li>表达式隐式使用法</li>\n<li>单行使用法</li>\n</ol>\n"},{"title":"指针","date":"2019-07-14T03:05:31.000Z","_content":"\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nGo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int = 10   \n\n   fmt.Printf(\"变量的地址: %x\\n\", &a  )\n}\n```\n\n\n**指针声明** : `var var_name *var-type`  eg: `var fp *float32`\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int= 20   /* 声明实际变量 */\n   var ip *int        /* 声明指针变量 */\n\n   ip = &a  /* 指针变量的存储地址 */\n\n   fmt.Printf(\"a 变量的地址是: %x\\n\", &a  )\n\n   /* 指针变量的存储地址 */\n   fmt.Printf(\"ip 变量的存储地址: %x\\n\", ip )\n\n   /* 使用指针访问值 */\n   fmt.Printf(\"*ip 变量的值: %d\\n\", *ip )\n}\n```\n\n**空指针** :当一个指针被定义后没有分配到任何变量时，它的值为 nil\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var  ptr *int\n   var ptr1 *\n   fmt.Printf(\"ptr 的值为 : %x\\n\", ptr  )  /* 0 */\n}\n```\n","source":"_posts/golang/指针.md","raw":"---\ntitle: 指针\ndate: 2019-07-14 11:05:31\ntags:\ncategories: golang\n---\n\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nGo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int = 10   \n\n   fmt.Printf(\"变量的地址: %x\\n\", &a  )\n}\n```\n\n\n**指针声明** : `var var_name *var-type`  eg: `var fp *float32`\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int= 20   /* 声明实际变量 */\n   var ip *int        /* 声明指针变量 */\n\n   ip = &a  /* 指针变量的存储地址 */\n\n   fmt.Printf(\"a 变量的地址是: %x\\n\", &a  )\n\n   /* 指针变量的存储地址 */\n   fmt.Printf(\"ip 变量的存储地址: %x\\n\", ip )\n\n   /* 使用指针访问值 */\n   fmt.Printf(\"*ip 变量的值: %d\\n\", *ip )\n}\n```\n\n**空指针** :当一个指针被定义后没有分配到任何变量时，它的值为 nil\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var  ptr *int\n   var ptr1 *\n   fmt.Printf(\"ptr 的值为 : %x\\n\", ptr  )  /* 0 */\n}\n```\n","slug":"golang/指针","published":1,"updated":"2020-04-10T16:46:16.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu9t001874ux19esfc5h","content":"<p>变量是一种使用方便的占位符，用于引用计算机内存地址。</p>\n<p>Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int = 10   </span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;变量的地址: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>指针声明</strong> : <code>var var_name *var-type</code>  eg: <code>var fp *float32</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int= 20   /* 声明实际变量 */</span><br><span class=\"line\">   var ip *int        /* 声明指针变量 */</span><br><span class=\"line\"></span><br><span class=\"line\">   ip = &amp;a  /* 指针变量的存储地址 */</span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;a 变量的地址是: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 指针变量的存储地址 */</span><br><span class=\"line\">   fmt.Printf(&quot;ip 变量的存储地址: %x\\n&quot;, ip )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 使用指针访问值 */</span><br><span class=\"line\">   fmt.Printf(&quot;*ip 变量的值: %d\\n&quot;, *ip )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>空指针</strong> :当一个指针被定义后没有分配到任何变量时，它的值为 nil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var  ptr *int</span><br><span class=\"line\">   var ptr1 *</span><br><span class=\"line\">   fmt.Printf(&quot;ptr 的值为 : %x\\n&quot;, ptr  )  /* 0 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>变量是一种使用方便的占位符，用于引用计算机内存地址。</p>\n<p>Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int = 10   </span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;变量的地址: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>指针声明</strong> : <code>var var_name *var-type</code>  eg: <code>var fp *float32</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int= 20   /* 声明实际变量 */</span><br><span class=\"line\">   var ip *int        /* 声明指针变量 */</span><br><span class=\"line\"></span><br><span class=\"line\">   ip = &amp;a  /* 指针变量的存储地址 */</span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;a 变量的地址是: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 指针变量的存储地址 */</span><br><span class=\"line\">   fmt.Printf(&quot;ip 变量的存储地址: %x\\n&quot;, ip )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 使用指针访问值 */</span><br><span class=\"line\">   fmt.Printf(&quot;*ip 变量的值: %d\\n&quot;, *ip )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>空指针</strong> :当一个指针被定义后没有分配到任何变量时，它的值为 nil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var  ptr *int</span><br><span class=\"line\">   var ptr1 *</span><br><span class=\"line\">   fmt.Printf(&quot;ptr 的值为 : %x\\n&quot;, ptr  )  /* 0 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java基础语法","date":"2019-09-18T03:51:16.000Z","_content":"## hello world\n\nHelloWorld.java  (源文件名必须和类名相同)\n```\npublic class HelloWorld {\n   /* 第一个Java程序.  \n    * 它将打印字符串 Hello World\n    */\n    public static void main(String []args) {  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行\n       System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n} \n```\n（cmd在java文件的同一路径下）\n1. 编译 `javac -encoding utf-8 HelloWorld.java`  (含中文最好使用 -encoding utf-8编译，以免出现错误)\n2. 运行 `java HelloWorld`  打印  HelloWorld\n\n## 类和对象\n```\npublic class Puppy{  // Puppy 类  一个源文件中只能有一个public类\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"Passed Name is :\" + name ); \n   }\n\n   public void setAge( int age ){\n       puppyAge = age;\n   }\n\n   public int getAge( ){\n       System.out.println(\"Puppy's age is :\" + puppyAge ); \n       return puppyAge;\n   }\n\n   public static void main(String []args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge ); \n   }\n}\n```\n## import\n\nEmployee.java\n```\nimport java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n```\n\nEmployeeTest.java\n```\nimport java.io.*;\npublic class EmployeeTest{\n\n   public static void main(String args[]){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n编译后，执行EmployeeTest就可以得到结果\n","source":"_posts/java/java基础语法.md","raw":"---\n\ntitle: java基础语法\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## hello world\n\nHelloWorld.java  (源文件名必须和类名相同)\n```\npublic class HelloWorld {\n   /* 第一个Java程序.  \n    * 它将打印字符串 Hello World\n    */\n    public static void main(String []args) {  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行\n       System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n} \n```\n（cmd在java文件的同一路径下）\n1. 编译 `javac -encoding utf-8 HelloWorld.java`  (含中文最好使用 -encoding utf-8编译，以免出现错误)\n2. 运行 `java HelloWorld`  打印  HelloWorld\n\n## 类和对象\n```\npublic class Puppy{  // Puppy 类  一个源文件中只能有一个public类\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"Passed Name is :\" + name ); \n   }\n\n   public void setAge( int age ){\n       puppyAge = age;\n   }\n\n   public int getAge( ){\n       System.out.println(\"Puppy's age is :\" + puppyAge ); \n       return puppyAge;\n   }\n\n   public static void main(String []args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge ); \n   }\n}\n```\n## import\n\nEmployee.java\n```\nimport java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n```\n\nEmployeeTest.java\n```\nimport java.io.*;\npublic class EmployeeTest{\n\n   public static void main(String args[]){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n编译后，执行EmployeeTest就可以得到结果\n","slug":"java/java基础语法","published":1,"updated":"2020-04-10T16:46:16.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtu9x001a74ux8rhfkyr9","content":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><p>HelloWorld.java  (源文件名必须和类名相同)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">   /* 第一个Java程序.  </span><br><span class=\"line\">    * 它将打印字符串 Hello World</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static void main(String []args) &#123;  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行</span><br><span class=\"line\">       System.out.println(&quot;Hello World&quot;); // 打印 Hello World</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（cmd在java文件的同一路径下）</p>\n<ol>\n<li>编译 <code>javac -encoding utf-8 HelloWorld.java</code>  (含中文最好使用 -encoding utf-8编译，以免出现错误)</li>\n<li>运行 <code>java HelloWorld</code>  打印  HelloWorld</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Puppy&#123;  // Puppy 类  一个源文件中只能有一个public类</span><br><span class=\"line\">   int puppyAge;</span><br><span class=\"line\">   public Puppy(String name)&#123;</span><br><span class=\"line\">      // 这个构造器仅有一个参数：name</span><br><span class=\"line\">      System.out.println(&quot;Passed Name is :&quot; + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void setAge( int age )&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public int getAge( )&#123;</span><br><span class=\"line\">       System.out.println(&quot;Puppy&apos;s age is :&quot; + puppyAge ); </span><br><span class=\"line\">       return puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String []args)&#123;</span><br><span class=\"line\">      /* 创建对象 */</span><br><span class=\"line\">      Puppy myPuppy = new Puppy( &quot;tommy&quot; );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象</span><br><span class=\"line\">      /* 通过方法来设定age */</span><br><span class=\"line\">      myPuppy.setAge( 2 );</span><br><span class=\"line\">      /* 调用另一个方法获取age */</span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      /*你也可以像下面这样访问成员变量 */</span><br><span class=\"line\">      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>Employee.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EmployeeTest.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class EmployeeTest&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      /* 使用构造器创建两个对象 */</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;James Smith&quot;);</span><br><span class=\"line\">      Employee empTwo = new Employee(&quot;Mary Anne&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 调用这两个对象的成员方法</span><br><span class=\"line\">      empOne.empAge(26);</span><br><span class=\"line\">      empOne.empDesignation(&quot;Senior Software Engineer&quot;);</span><br><span class=\"line\">      empOne.empSalary(1000);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"></span><br><span class=\"line\">      empTwo.empAge(21);</span><br><span class=\"line\">      empTwo.empDesignation(&quot;Software Engineer&quot;);</span><br><span class=\"line\">      empTwo.empSalary(500);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译后，执行EmployeeTest就可以得到结果</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><p>HelloWorld.java  (源文件名必须和类名相同)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">   /* 第一个Java程序.  </span><br><span class=\"line\">    * 它将打印字符串 Hello World</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static void main(String []args) &#123;  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行</span><br><span class=\"line\">       System.out.println(&quot;Hello World&quot;); // 打印 Hello World</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（cmd在java文件的同一路径下）</p>\n<ol>\n<li>编译 <code>javac -encoding utf-8 HelloWorld.java</code>  (含中文最好使用 -encoding utf-8编译，以免出现错误)</li>\n<li>运行 <code>java HelloWorld</code>  打印  HelloWorld</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Puppy&#123;  // Puppy 类  一个源文件中只能有一个public类</span><br><span class=\"line\">   int puppyAge;</span><br><span class=\"line\">   public Puppy(String name)&#123;</span><br><span class=\"line\">      // 这个构造器仅有一个参数：name</span><br><span class=\"line\">      System.out.println(&quot;Passed Name is :&quot; + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void setAge( int age )&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public int getAge( )&#123;</span><br><span class=\"line\">       System.out.println(&quot;Puppy&apos;s age is :&quot; + puppyAge ); </span><br><span class=\"line\">       return puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String []args)&#123;</span><br><span class=\"line\">      /* 创建对象 */</span><br><span class=\"line\">      Puppy myPuppy = new Puppy( &quot;tommy&quot; );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象</span><br><span class=\"line\">      /* 通过方法来设定age */</span><br><span class=\"line\">      myPuppy.setAge( 2 );</span><br><span class=\"line\">      /* 调用另一个方法获取age */</span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      /*你也可以像下面这样访问成员变量 */</span><br><span class=\"line\">      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>Employee.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EmployeeTest.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class EmployeeTest&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      /* 使用构造器创建两个对象 */</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;James Smith&quot;);</span><br><span class=\"line\">      Employee empTwo = new Employee(&quot;Mary Anne&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 调用这两个对象的成员方法</span><br><span class=\"line\">      empOne.empAge(26);</span><br><span class=\"line\">      empOne.empDesignation(&quot;Senior Software Engineer&quot;);</span><br><span class=\"line\">      empOne.empSalary(1000);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"></span><br><span class=\"line\">      empTwo.empAge(21);</span><br><span class=\"line\">      empTwo.empDesignation(&quot;Software Engineer&quot;);</span><br><span class=\"line\">      empTwo.empSalary(500);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译后，执行EmployeeTest就可以得到结果</p>\n"},{"title":"java分支结构","date":"2019-09-18T03:51:16.000Z","_content":"### if else \nIfElse.java\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n\n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }\n      else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }\n      else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }\n      else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n### 嵌套的if…else语句\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n\n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n### switch语句\n\n```\npublic class Test {\n\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n\n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n         case 'F' :\n            System.out.println(\"你需要继续努力\");\n            break;\n         default :\n            System.out.println(\"无效等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n","source":"_posts/java/分支结构.md","raw":"\n---\n\ntitle: java分支结构\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n### if else \nIfElse.java\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n\n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }\n      else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }\n      else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }\n      else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n### 嵌套的if…else语句\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n\n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n### switch语句\n\n```\npublic class Test {\n\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n\n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n         case 'F' :\n            System.out.println(\"你需要继续努力\");\n            break;\n         default :\n            System.out.println(\"无效等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n","slug":"java/分支结构","published":1,"updated":"2020-04-10T16:46:16.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtua3001d74ux8dt6jbqb","content":"<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><p>IfElse.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 10 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 10&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 20 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 20&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 30 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 30&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else&#123;</span><br><span class=\"line\">         System.out.print(&quot;这是 else 语句&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌套的if…else语句\"><a href=\"#嵌套的if…else语句\" class=\"headerlink\" title=\"嵌套的if…else语句\"></a>嵌套的if…else语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\">      int y = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 30 )&#123;</span><br><span class=\"line\">         if( y == 10 )&#123;</span><br><span class=\"line\">             System.out.print(&quot;X = 30 and Y = 10&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      //char grade = args[0].charAt(0);</span><br><span class=\"line\">      char grade = &apos;C&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      switch(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         case &apos;A&apos; :</span><br><span class=\"line\">            System.out.println(&quot;优秀&quot;); </span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;B&apos; :</span><br><span class=\"line\">         case &apos;C&apos; :</span><br><span class=\"line\">            System.out.println(&quot;良好&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;D&apos; :</span><br><span class=\"line\">            System.out.println(&quot;及格&quot;);</span><br><span class=\"line\">         case &apos;F&apos; :</span><br><span class=\"line\">            System.out.println(&quot;你需要继续努力&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         default :</span><br><span class=\"line\">            System.out.println(&quot;无效等级&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(&quot;你的等级是 &quot; + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><p>IfElse.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 10 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 10&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 20 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 20&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 30 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 30&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else&#123;</span><br><span class=\"line\">         System.out.print(&quot;这是 else 语句&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌套的if…else语句\"><a href=\"#嵌套的if…else语句\" class=\"headerlink\" title=\"嵌套的if…else语句\"></a>嵌套的if…else语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\">      int y = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 30 )&#123;</span><br><span class=\"line\">         if( y == 10 )&#123;</span><br><span class=\"line\">             System.out.print(&quot;X = 30 and Y = 10&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      //char grade = args[0].charAt(0);</span><br><span class=\"line\">      char grade = &apos;C&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      switch(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         case &apos;A&apos; :</span><br><span class=\"line\">            System.out.println(&quot;优秀&quot;); </span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;B&apos; :</span><br><span class=\"line\">         case &apos;C&apos; :</span><br><span class=\"line\">            System.out.println(&quot;良好&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;D&apos; :</span><br><span class=\"line\">            System.out.println(&quot;及格&quot;);</span><br><span class=\"line\">         case &apos;F&apos; :</span><br><span class=\"line\">            System.out.println(&quot;你需要继续努力&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         default :</span><br><span class=\"line\">            System.out.println(&quot;无效等级&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(&quot;你的等级是 &quot; + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"java简介","date":"2019-09-18T03:51:16.000Z","_content":"## java简介\nJava分为三个体系：\n\nJavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)\n\nJavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\n\nJavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)\n\n### 开发环境配置(windows下)\n\n[java下载](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n下载后安装，配置系统环境变量\n\n此电脑 > 右键属性 > 高级 > 环境变量\n```\n变量名：JAVA_HOME\n变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置\n变量名：CLASSPATH\n变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个\".\"\n变量名：Path\n变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\nwindows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量\n```\n\n重启后生效\n\n### 测试JDK是否安装成功\n\n1. \"开始\"->\"运行\"，键入\"cmd\"；\n\n2. 键入命令: java -version、java、javac 几个命令\n","source":"_posts/java/readme.md","raw":"---\n\ntitle: java简介\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## java简介\nJava分为三个体系：\n\nJavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)\n\nJavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\n\nJavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)\n\n### 开发环境配置(windows下)\n\n[java下载](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n下载后安装，配置系统环境变量\n\n此电脑 > 右键属性 > 高级 > 环境变量\n```\n变量名：JAVA_HOME\n变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置\n变量名：CLASSPATH\n变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个\".\"\n变量名：Path\n变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\nwindows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量\n```\n\n重启后生效\n\n### 测试JDK是否安装成功\n\n1. \"开始\"->\"运行\"，键入\"cmd\"；\n\n2. 键入命令: java -version、java、javac 几个命令\n","slug":"java/readme","published":1,"updated":"2020-04-10T16:46:16.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtua7001e74uxnp67p2os","content":"<h2 id=\"java简介\"><a href=\"#java简介\" class=\"headerlink\" title=\"java简介\"></a>java简介</h2><p>Java分为三个体系：</p>\n<p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p>\n<p>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</p>\n<p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p>\n<h3 id=\"开发环境配置-windows下\"><a href=\"#开发环境配置-windows下\" class=\"headerlink\" title=\"开发环境配置(windows下)\"></a>开发环境配置(windows下)</h3><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java下载</a></p>\n<p>下载后安装，配置系统环境变量</p>\n<p>此电脑 &gt; 右键属性 &gt; 高级 &gt; 环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名：JAVA_HOME</span><br><span class=\"line\">变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class=\"line\">变量名：CLASSPATH</span><br><span class=\"line\">变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class=\"line\">变量名：Path</span><br><span class=\"line\">变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\"></span><br><span class=\"line\">windows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量</span><br></pre></td></tr></table></figure></p>\n<p>重启后生效</p>\n<h3 id=\"测试JDK是否安装成功\"><a href=\"#测试JDK是否安装成功\" class=\"headerlink\" title=\"测试JDK是否安装成功\"></a>测试JDK是否安装成功</h3><ol>\n<li><p>“开始”-&gt;”运行”，键入”cmd”；</p>\n</li>\n<li><p>键入命令: java -version、java、javac 几个命令</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java简介\"><a href=\"#java简介\" class=\"headerlink\" title=\"java简介\"></a>java简介</h2><p>Java分为三个体系：</p>\n<p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p>\n<p>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</p>\n<p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p>\n<h3 id=\"开发环境配置-windows下\"><a href=\"#开发环境配置-windows下\" class=\"headerlink\" title=\"开发环境配置(windows下)\"></a>开发环境配置(windows下)</h3><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java下载</a></p>\n<p>下载后安装，配置系统环境变量</p>\n<p>此电脑 &gt; 右键属性 &gt; 高级 &gt; 环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名：JAVA_HOME</span><br><span class=\"line\">变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class=\"line\">变量名：CLASSPATH</span><br><span class=\"line\">变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class=\"line\">变量名：Path</span><br><span class=\"line\">变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\"></span><br><span class=\"line\">windows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量</span><br></pre></td></tr></table></figure></p>\n<p>重启后生效</p>\n<h3 id=\"测试JDK是否安装成功\"><a href=\"#测试JDK是否安装成功\" class=\"headerlink\" title=\"测试JDK是否安装成功\"></a>测试JDK是否安装成功</h3><ol>\n<li><p>“开始”-&gt;”运行”，键入”cmd”；</p>\n</li>\n<li><p>键入命令: java -version、java、javac 几个命令</p>\n</li>\n</ol>\n"},{"title":"java修饰符","date":"2019-09-18T03:51:16.000Z","_content":"## Java修饰符\n主要分为以下两类：\n1. 访问修饰符\n2. 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端\n\n```\npublic class className {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 访问控制修饰符\n#### 默认访问修饰符-不使用任何关键字\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。\n```\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n#### 私有访问修饰符-private\n私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。\n\n声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。\n\nPrivate访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n```\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n#### 公有访问修饰符-public\n被声明为public的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n```\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\n#### 受保护的访问修饰符-protected\n被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。\n\nProtected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。\n\n子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法\n\n```\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n\nclass StreamingAudioPlayer {\n   boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。\n\n#### 访问控制和继承\n请注意以下方法继承的规则：\n1. 父类中声明为public的方法在子类中也必须为public。\n2. 父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。\n3. 父类中声明为private的方法，不能够被继承。\n###  非访问修饰符\n\n`static` : 用来创建类方法和类变量。\n\n`final` : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\n`abstract` : 用来创建抽象类和抽象方法。\n\n`synchronized`和`volatile` : 主要用于线程的编程。\n\n#### static修饰符\n1. 静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量\n2. 静态方法 ： 来声明独立于对象的静态方法\n```\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n\n   private static void addInstance() {\n      numInstances++;\n   }\n\n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n\n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n      } \n      System.out.println(\"Created \" +       InstanceCounter.getCount() + \" instances\");\n   } \n}\n```\n\n#### final修饰符\nfinal变量:\n```\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n\n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\nfinal方法:\n类中的Final方法可以被子类继承，但是不能被子类修改。\n\n声明final方法的主要目的是防止该方法的内容被修改\n```\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\nfinal类： 不能被继承\n```\npublic final class Test {\n   // 类体\n}\n```\n\n","source":"_posts/java/修饰符.md","raw":"---\n\ntitle: java修饰符\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## Java修饰符\n主要分为以下两类：\n1. 访问修饰符\n2. 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端\n\n```\npublic class className {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 访问控制修饰符\n#### 默认访问修饰符-不使用任何关键字\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。\n```\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n#### 私有访问修饰符-private\n私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。\n\n声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。\n\nPrivate访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n```\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n#### 公有访问修饰符-public\n被声明为public的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n```\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\n#### 受保护的访问修饰符-protected\n被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。\n\nProtected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。\n\n子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法\n\n```\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n\nclass StreamingAudioPlayer {\n   boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。\n\n#### 访问控制和继承\n请注意以下方法继承的规则：\n1. 父类中声明为public的方法在子类中也必须为public。\n2. 父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。\n3. 父类中声明为private的方法，不能够被继承。\n###  非访问修饰符\n\n`static` : 用来创建类方法和类变量。\n\n`final` : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\n`abstract` : 用来创建抽象类和抽象方法。\n\n`synchronized`和`volatile` : 主要用于线程的编程。\n\n#### static修饰符\n1. 静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量\n2. 静态方法 ： 来声明独立于对象的静态方法\n```\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n\n   private static void addInstance() {\n      numInstances++;\n   }\n\n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n\n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n      } \n      System.out.println(\"Created \" +       InstanceCounter.getCount() + \" instances\");\n   } \n}\n```\n\n#### final修饰符\nfinal变量:\n```\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n\n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\nfinal方法:\n类中的Final方法可以被子类继承，但是不能被子类修改。\n\n声明final方法的主要目的是防止该方法的内容被修改\n```\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\nfinal类： 不能被继承\n```\npublic final class Test {\n   // 类体\n}\n```\n\n","slug":"java/修饰符","published":1,"updated":"2020-04-10T16:46:16.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuad001h74uxsrsb154u","content":"<h2 id=\"Java修饰符\"><a href=\"#Java修饰符\" class=\"headerlink\" title=\"Java修饰符\"></a>Java修饰符</h2><p>主要分为以下两类：</p>\n<ol>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ol>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class className &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private boolean myFlag;</span><br><span class=\"line\">static final double weeks = 9.5;</span><br><span class=\"line\">protected static final int BOXWIDTH = 42;</span><br><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // 方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问控制修饰符\"><a href=\"#访问控制修饰符\" class=\"headerlink\" title=\"访问控制修饰符\"></a>访问控制修饰符</h3><h4 id=\"默认访问修饰符-不使用任何关键字\"><a href=\"#默认访问修饰符-不使用任何关键字\" class=\"headerlink\" title=\"默认访问修饰符-不使用任何关键字\"></a>默认访问修饰符-不使用任何关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String version = &quot;1.5.1&quot;;</span><br><span class=\"line\">boolean processOrder() &#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"私有访问修饰符-private\"><a href=\"#私有访问修饰符-private\" class=\"headerlink\" title=\"私有访问修饰符-private\"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。</p>\n<p>Private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Logger &#123;</span><br><span class=\"line\">   private String format;</span><br><span class=\"line\">   public String getFormat() &#123;</span><br><span class=\"line\">      return this.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void setFormat(String format) &#123;</span><br><span class=\"line\">      this.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"公有访问修饰符-public\"><a href=\"#公有访问修饰符-public\" class=\"headerlink\" title=\"公有访问修饰符-public\"></a>公有访问修饰符-public</h4><p>被声明为public的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"受保护的访问修饰符-protected\"><a href=\"#受保护的访问修饰符-protected\" class=\"headerlink\" title=\"受保护的访问修饰符-protected\"></a>受保护的访问修饰符-protected</h4><p>被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。</p>\n<p>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</p>\n<p>子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AudioPlayer &#123;</span><br><span class=\"line\">   protected boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StreamingAudioPlayer &#123;</span><br><span class=\"line\">   boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。</p>\n<h4 id=\"访问控制和继承\"><a href=\"#访问控制和继承\" class=\"headerlink\" title=\"访问控制和继承\"></a>访问控制和继承</h4><p>请注意以下方法继承的规则：</p>\n<ol>\n<li>父类中声明为public的方法在子类中也必须为public。</li>\n<li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li>\n<li>父类中声明为private的方法，不能够被继承。<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3></li>\n</ol>\n<p><code>static</code> : 用来创建类方法和类变量。</p>\n<p><code>final</code> : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p><code>abstract</code> : 用来创建抽象类和抽象方法。</p>\n<p><code>synchronized</code>和<code>volatile</code> : 主要用于线程的编程。</p>\n<h4 id=\"static修饰符\"><a href=\"#static修饰符\" class=\"headerlink\" title=\"static修饰符\"></a>static修饰符</h4><ol>\n<li>静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量</li>\n<li>静态方法 ： 来声明独立于对象的静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InstanceCounter &#123;</span><br><span class=\"line\">   private static int numInstances = 0;</span><br><span class=\"line\">   protected static int getCount() &#123;</span><br><span class=\"line\">      return numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   private static void addInstance() &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] arguments) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Starting with &quot; + InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">      for (int i = 0; i &lt; 500; ++i)&#123;</span><br><span class=\"line\">         new InstanceCounter();</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(&quot;Created &quot; +       InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"final修饰符\"><a href=\"#final修饰符\" class=\"headerlink\" title=\"final修饰符\"></a>final修饰符</h4><p>final变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">  final int value = 10;</span><br><span class=\"line\">  // 下面是声明常量的实例</span><br><span class=\"line\">  public static final int BOXWIDTH = 6;</span><br><span class=\"line\">  static final String TITLE = &quot;Manager&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void changeValue()&#123;</span><br><span class=\"line\">     value = 12; //将输出一个错误</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final方法:<br>类中的Final方法可以被子类继承，但是不能被子类修改。</p>\n<p>声明final方法的主要目的是防止该方法的内容被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public final void changeName()&#123;</span><br><span class=\"line\">       // 方法体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final类： 不能被继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\">   // 类体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java修饰符\"><a href=\"#Java修饰符\" class=\"headerlink\" title=\"Java修饰符\"></a>Java修饰符</h2><p>主要分为以下两类：</p>\n<ol>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ol>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class className &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private boolean myFlag;</span><br><span class=\"line\">static final double weeks = 9.5;</span><br><span class=\"line\">protected static final int BOXWIDTH = 42;</span><br><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // 方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问控制修饰符\"><a href=\"#访问控制修饰符\" class=\"headerlink\" title=\"访问控制修饰符\"></a>访问控制修饰符</h3><h4 id=\"默认访问修饰符-不使用任何关键字\"><a href=\"#默认访问修饰符-不使用任何关键字\" class=\"headerlink\" title=\"默认访问修饰符-不使用任何关键字\"></a>默认访问修饰符-不使用任何关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String version = &quot;1.5.1&quot;;</span><br><span class=\"line\">boolean processOrder() &#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"私有访问修饰符-private\"><a href=\"#私有访问修饰符-private\" class=\"headerlink\" title=\"私有访问修饰符-private\"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。</p>\n<p>Private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Logger &#123;</span><br><span class=\"line\">   private String format;</span><br><span class=\"line\">   public String getFormat() &#123;</span><br><span class=\"line\">      return this.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void setFormat(String format) &#123;</span><br><span class=\"line\">      this.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"公有访问修饰符-public\"><a href=\"#公有访问修饰符-public\" class=\"headerlink\" title=\"公有访问修饰符-public\"></a>公有访问修饰符-public</h4><p>被声明为public的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"受保护的访问修饰符-protected\"><a href=\"#受保护的访问修饰符-protected\" class=\"headerlink\" title=\"受保护的访问修饰符-protected\"></a>受保护的访问修饰符-protected</h4><p>被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。</p>\n<p>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</p>\n<p>子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AudioPlayer &#123;</span><br><span class=\"line\">   protected boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StreamingAudioPlayer &#123;</span><br><span class=\"line\">   boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。</p>\n<h4 id=\"访问控制和继承\"><a href=\"#访问控制和继承\" class=\"headerlink\" title=\"访问控制和继承\"></a>访问控制和继承</h4><p>请注意以下方法继承的规则：</p>\n<ol>\n<li>父类中声明为public的方法在子类中也必须为public。</li>\n<li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li>\n<li>父类中声明为private的方法，不能够被继承。<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3></li>\n</ol>\n<p><code>static</code> : 用来创建类方法和类变量。</p>\n<p><code>final</code> : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p><code>abstract</code> : 用来创建抽象类和抽象方法。</p>\n<p><code>synchronized</code>和<code>volatile</code> : 主要用于线程的编程。</p>\n<h4 id=\"static修饰符\"><a href=\"#static修饰符\" class=\"headerlink\" title=\"static修饰符\"></a>static修饰符</h4><ol>\n<li>静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量</li>\n<li>静态方法 ： 来声明独立于对象的静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InstanceCounter &#123;</span><br><span class=\"line\">   private static int numInstances = 0;</span><br><span class=\"line\">   protected static int getCount() &#123;</span><br><span class=\"line\">      return numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   private static void addInstance() &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] arguments) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Starting with &quot; + InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">      for (int i = 0; i &lt; 500; ++i)&#123;</span><br><span class=\"line\">         new InstanceCounter();</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(&quot;Created &quot; +       InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"final修饰符\"><a href=\"#final修饰符\" class=\"headerlink\" title=\"final修饰符\"></a>final修饰符</h4><p>final变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">  final int value = 10;</span><br><span class=\"line\">  // 下面是声明常量的实例</span><br><span class=\"line\">  public static final int BOXWIDTH = 6;</span><br><span class=\"line\">  static final String TITLE = &quot;Manager&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void changeValue()&#123;</span><br><span class=\"line\">     value = 12; //将输出一个错误</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final方法:<br>类中的Final方法可以被子类继承，但是不能被子类修改。</p>\n<p>声明final方法的主要目的是防止该方法的内容被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public final void changeName()&#123;</span><br><span class=\"line\">       // 方法体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final类： 不能被继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\">   // 类体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java变量类型","date":"2019-09-18T03:51:16.000Z","_content":"\n## 变量类型\n在Java语言中\n\n1. 局部变量\n2. 实例变量\n3. 类变量\n\n所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n`type identifier [ = value][, identifier [= value] ...] ;`\n\n```\nint a, b, c;         // 声明三个int型整数：a、b、c。\nint d = 3, e, f = 5; // 声明三个整数并赋予初值。\nbyte z = 22;         // 声明并初始化z。\ndouble pi = 3.14159; // 声明了pi。\nchar x = 'x';        // 变量x的值是字符'x'。\n```\n### 局部变量\n```\npublic class Test{ \n   public void pupAge(){\n      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n   \n   public static void main(String args[]){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n### 实例变量\n```\nimport java.io.*;\npublic class Employee{\n   // 这个成员变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]){\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n```\n\n## 类变量\n```\nimport java.io.*;\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n\n// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT\n```\n\n","source":"_posts/java/变量类型.md","raw":"---\n\ntitle: java变量类型\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n\n## 变量类型\n在Java语言中\n\n1. 局部变量\n2. 实例变量\n3. 类变量\n\n所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n`type identifier [ = value][, identifier [= value] ...] ;`\n\n```\nint a, b, c;         // 声明三个int型整数：a、b、c。\nint d = 3, e, f = 5; // 声明三个整数并赋予初值。\nbyte z = 22;         // 声明并初始化z。\ndouble pi = 3.14159; // 声明了pi。\nchar x = 'x';        // 变量x的值是字符'x'。\n```\n### 局部变量\n```\npublic class Test{ \n   public void pupAge(){\n      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n   \n   public static void main(String args[]){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n### 实例变量\n```\nimport java.io.*;\npublic class Employee{\n   // 这个成员变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]){\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n```\n\n## 类变量\n```\nimport java.io.*;\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n\n// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT\n```\n\n","slug":"java/变量类型","published":1,"updated":"2020-04-10T16:46:16.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuai001j74ux0y0p8vem","content":"<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在Java语言中</p>\n<ol>\n<li>局部变量</li>\n<li>实例变量</li>\n<li>类变量</li>\n</ol>\n<p>所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n<p><code>type identifier [ = value][, identifier [= value] ...] ;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a, b, c;         // 声明三个int型整数：a、b、c。</span><br><span class=\"line\">int d = 3, e, f = 5; // 声明三个整数并赋予初值。</span><br><span class=\"line\">byte z = 22;         // 声明并初始化z。</span><br><span class=\"line\">double pi = 3.14159; // 声明了pi。</span><br><span class=\"line\">char x = &apos;x&apos;;        // 变量x的值是字符&apos;x&apos;。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123; </span><br><span class=\"line\">   public void pupAge()&#123;</span><br><span class=\"line\">      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中</span><br><span class=\"line\">      age = age + 7;</span><br><span class=\"line\">      System.out.println(&quot;Puppy age is : &quot; + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Test test = new Test();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   // 这个成员变量对子类可见</span><br><span class=\"line\">   public String name;</span><br><span class=\"line\">   // 私有变量，仅在该类可见</span><br><span class=\"line\">   private double salary;</span><br><span class=\"line\">   //在构造器中对name赋值</span><br><span class=\"line\">   public Employee (String empName)&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //设定salary的值</span><br><span class=\"line\">   public void setSalary(double empSal)&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   // 打印信息</span><br><span class=\"line\">   public void printEmp()&#123;</span><br><span class=\"line\">      System.out.println(&quot;name  : &quot; + name );</span><br><span class=\"line\">      System.out.println(&quot;salary :&quot; + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;Ransika&quot;);</span><br><span class=\"line\">      empOne.setSalary(1000);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在Java语言中</p>\n<ol>\n<li>局部变量</li>\n<li>实例变量</li>\n<li>类变量</li>\n</ol>\n<p>所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n<p><code>type identifier [ = value][, identifier [= value] ...] ;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a, b, c;         // 声明三个int型整数：a、b、c。</span><br><span class=\"line\">int d = 3, e, f = 5; // 声明三个整数并赋予初值。</span><br><span class=\"line\">byte z = 22;         // 声明并初始化z。</span><br><span class=\"line\">double pi = 3.14159; // 声明了pi。</span><br><span class=\"line\">char x = &apos;x&apos;;        // 变量x的值是字符&apos;x&apos;。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123; </span><br><span class=\"line\">   public void pupAge()&#123;</span><br><span class=\"line\">      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中</span><br><span class=\"line\">      age = age + 7;</span><br><span class=\"line\">      System.out.println(&quot;Puppy age is : &quot; + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Test test = new Test();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   // 这个成员变量对子类可见</span><br><span class=\"line\">   public String name;</span><br><span class=\"line\">   // 私有变量，仅在该类可见</span><br><span class=\"line\">   private double salary;</span><br><span class=\"line\">   //在构造器中对name赋值</span><br><span class=\"line\">   public Employee (String empName)&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //设定salary的值</span><br><span class=\"line\">   public void setSalary(double empSal)&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   // 打印信息</span><br><span class=\"line\">   public void printEmp()&#123;</span><br><span class=\"line\">      System.out.println(&quot;name  : &quot; + name );</span><br><span class=\"line\">      System.out.println(&quot;salary :&quot; + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;Ransika&quot;);</span><br><span class=\"line\">      empOne.setSalary(1000);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT</span><br></pre></td></tr></table></figure>\n"},{"title":"java基本数据类型","date":"2019-09-18T03:51:16.000Z","_content":"\n## 基本数据类型\n两大数据类型：\n1. 内置数据类型\n2. 引用数据类型\n\n### 内置数据类型\n```\npublic class PrimitiveTypeTest {\n    public static void main(String[] args) {\n        // byte\n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);\n        System.out.println(\"包装类：java.lang.Byte\");\n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);\n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);\n        System.out.println();\n    // short\n    System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);\n    System.out.println(\"包装类：java.lang.Short\");\n    System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);\n    System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);\n    System.out.println();\n\n    // int\n    System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);\n    System.out.println(\"包装类：java.lang.Integer\");\n    System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);\n    System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);\n    System.out.println();\n\n    // long\n    System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);\n    System.out.println(\"包装类：java.lang.Long\");\n    System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);\n    System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);\n    System.out.println();\n\n    // float\n    System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);\n    System.out.println(\"包装类：java.lang.Float\");\n    System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);\n    System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);\n    System.out.println();\n\n    // double\n    System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);\n    System.out.println(\"包装类：java.lang.Double\");\n    System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);\n    System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);\n    System.out.println();\n\n    // char\n    System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);\n    System.out.println(\"包装类：java.lang.Character\");\n    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台\n    System.out.println(\"最小值：Character.MIN_VALUE=\"\n            + (int) Character.MIN_VALUE);\n    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台\n    System.out.println(\"最大值：Character.MAX_VALUE=\"\n            + (int) Character.MAX_VALUE);\n}\n}\n```\n\n### 引用数据类型\n1. 引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。\n2. 对象、数组都是引用数据类型。\n3. 所有引用类型的默认值都是null。\n4. 一个引用变量可以用来引用与任何与之兼容的类型。\n5. 例子：Animal animal = new Animal(\"giraffe\"）\n\n### 常量\n```\nfinal double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识\n```\n\n```\nint decimal = 100;   // 十进值\nint octal = 0144;  // 8进值\nint hexa =  0x64;  // 16进值\n```\n### 字符串\n双引号\n\n```\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n\n```\nchar a = '\\u0001';   // 变量a 的值为 '\\u0001'\nString a = \"\\u0001\";\n```\n\n\n\n","source":"_posts/java/基本数据类型.md","raw":"---\n\ntitle: java基本数据类型\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n\n## 基本数据类型\n两大数据类型：\n1. 内置数据类型\n2. 引用数据类型\n\n### 内置数据类型\n```\npublic class PrimitiveTypeTest {\n    public static void main(String[] args) {\n        // byte\n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);\n        System.out.println(\"包装类：java.lang.Byte\");\n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);\n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);\n        System.out.println();\n    // short\n    System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);\n    System.out.println(\"包装类：java.lang.Short\");\n    System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);\n    System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);\n    System.out.println();\n\n    // int\n    System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);\n    System.out.println(\"包装类：java.lang.Integer\");\n    System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);\n    System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);\n    System.out.println();\n\n    // long\n    System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);\n    System.out.println(\"包装类：java.lang.Long\");\n    System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);\n    System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);\n    System.out.println();\n\n    // float\n    System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);\n    System.out.println(\"包装类：java.lang.Float\");\n    System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);\n    System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);\n    System.out.println();\n\n    // double\n    System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);\n    System.out.println(\"包装类：java.lang.Double\");\n    System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);\n    System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);\n    System.out.println();\n\n    // char\n    System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);\n    System.out.println(\"包装类：java.lang.Character\");\n    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台\n    System.out.println(\"最小值：Character.MIN_VALUE=\"\n            + (int) Character.MIN_VALUE);\n    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台\n    System.out.println(\"最大值：Character.MAX_VALUE=\"\n            + (int) Character.MAX_VALUE);\n}\n}\n```\n\n### 引用数据类型\n1. 引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。\n2. 对象、数组都是引用数据类型。\n3. 所有引用类型的默认值都是null。\n4. 一个引用变量可以用来引用与任何与之兼容的类型。\n5. 例子：Animal animal = new Animal(\"giraffe\"）\n\n### 常量\n```\nfinal double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识\n```\n\n```\nint decimal = 100;   // 十进值\nint octal = 0144;  // 8进值\nint hexa =  0x64;  // 16进值\n```\n### 字符串\n双引号\n\n```\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n\n```\nchar a = '\\u0001';   // 变量a 的值为 '\\u0001'\nString a = \"\\u0001\";\n```\n\n\n\n","slug":"java/基本数据类型","published":1,"updated":"2020-04-10T16:46:16.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuao001m74uxznqjlg5o","content":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>两大数据类型：</p>\n<ol>\n<li>内置数据类型</li>\n<li>引用数据类型</li>\n</ol>\n<h3 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimitiveTypeTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // byte</span><br><span class=\"line\">        System.out.println(&quot;基本类型：byte 二进制位数：&quot; + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(&quot;包装类：java.lang.Byte&quot;);</span><br><span class=\"line\">        System.out.println(&quot;最小值：Byte.MIN_VALUE=&quot; + Byte.MIN_VALUE);</span><br><span class=\"line\">        System.out.println(&quot;最大值：Byte.MAX_VALUE=&quot; + Byte.MAX_VALUE);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    // short</span><br><span class=\"line\">    System.out.println(&quot;基本类型：short 二进制位数：&quot; + Short.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Short&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Short.MIN_VALUE=&quot; + Short.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Short.MAX_VALUE=&quot; + Short.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // int</span><br><span class=\"line\">    System.out.println(&quot;基本类型：int 二进制位数：&quot; + Integer.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Integer&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Integer.MIN_VALUE=&quot; + Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Integer.MAX_VALUE=&quot; + Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // long</span><br><span class=\"line\">    System.out.println(&quot;基本类型：long 二进制位数：&quot; + Long.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Long&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Long.MIN_VALUE=&quot; + Long.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Long.MAX_VALUE=&quot; + Long.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // float</span><br><span class=\"line\">    System.out.println(&quot;基本类型：float 二进制位数：&quot; + Float.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Float&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Float.MIN_VALUE=&quot; + Float.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Float.MAX_VALUE=&quot; + Float.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // double</span><br><span class=\"line\">    System.out.println(&quot;基本类型：double 二进制位数：&quot; + Double.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Double&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Double.MIN_VALUE=&quot; + Double.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Double.MAX_VALUE=&quot; + Double.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // char</span><br><span class=\"line\">    System.out.println(&quot;基本类型：char 二进制位数：&quot; + Character.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Character&quot;);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最小值：Character.MIN_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MIN_VALUE);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最大值：Character.MAX_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><ol>\n<li>引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用与任何与之兼容的类型。</li>\n<li>例子：Animal animal = new Animal(“giraffe”）</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int decimal = 100;   // 十进值</span><br><span class=\"line\">int octal = 0144;  // 8进值</span><br><span class=\"line\">int hexa =  0x64;  // 16进值</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello World&quot;</span><br><span class=\"line\">&quot;two\\nlines&quot;</span><br><span class=\"line\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char a = &apos;\\u0001&apos;;   // 变量a 的值为 &apos;\\u0001&apos;</span><br><span class=\"line\">String a = &quot;\\u0001&quot;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>两大数据类型：</p>\n<ol>\n<li>内置数据类型</li>\n<li>引用数据类型</li>\n</ol>\n<h3 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimitiveTypeTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // byte</span><br><span class=\"line\">        System.out.println(&quot;基本类型：byte 二进制位数：&quot; + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(&quot;包装类：java.lang.Byte&quot;);</span><br><span class=\"line\">        System.out.println(&quot;最小值：Byte.MIN_VALUE=&quot; + Byte.MIN_VALUE);</span><br><span class=\"line\">        System.out.println(&quot;最大值：Byte.MAX_VALUE=&quot; + Byte.MAX_VALUE);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    // short</span><br><span class=\"line\">    System.out.println(&quot;基本类型：short 二进制位数：&quot; + Short.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Short&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Short.MIN_VALUE=&quot; + Short.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Short.MAX_VALUE=&quot; + Short.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // int</span><br><span class=\"line\">    System.out.println(&quot;基本类型：int 二进制位数：&quot; + Integer.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Integer&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Integer.MIN_VALUE=&quot; + Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Integer.MAX_VALUE=&quot; + Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // long</span><br><span class=\"line\">    System.out.println(&quot;基本类型：long 二进制位数：&quot; + Long.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Long&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Long.MIN_VALUE=&quot; + Long.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Long.MAX_VALUE=&quot; + Long.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // float</span><br><span class=\"line\">    System.out.println(&quot;基本类型：float 二进制位数：&quot; + Float.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Float&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Float.MIN_VALUE=&quot; + Float.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Float.MAX_VALUE=&quot; + Float.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // double</span><br><span class=\"line\">    System.out.println(&quot;基本类型：double 二进制位数：&quot; + Double.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Double&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Double.MIN_VALUE=&quot; + Double.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Double.MAX_VALUE=&quot; + Double.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // char</span><br><span class=\"line\">    System.out.println(&quot;基本类型：char 二进制位数：&quot; + Character.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Character&quot;);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最小值：Character.MIN_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MIN_VALUE);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最大值：Character.MAX_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><ol>\n<li>引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用与任何与之兼容的类型。</li>\n<li>例子：Animal animal = new Animal(“giraffe”）</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int decimal = 100;   // 十进值</span><br><span class=\"line\">int octal = 0144;  // 8进值</span><br><span class=\"line\">int hexa =  0x64;  // 16进值</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello World&quot;</span><br><span class=\"line\">&quot;two\\nlines&quot;</span><br><span class=\"line\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char a = &apos;\\u0001&apos;;   // 变量a 的值为 &apos;\\u0001&apos;</span><br><span class=\"line\">String a = &quot;\\u0001&quot;;</span><br></pre></td></tr></table></figure>\n"},{"title":"java运算符","date":"2019-09-18T03:51:16.000Z","_content":"## Java 运算符\n主要分为一下几种\n\n1. 算术运算符\n2. 关系运算符\n3. 位运算符\n4. 逻辑运算符\n5. 赋值运算符\n6. 其他运算符\n\n###  算术运算符\nArithmeticOperator.java\n```\npublic class ArithmeticOperator {\n\n    public static void main(String args[]) {\n       int a = 10;\n       int b = 20;\n       int c = 25;\n       int d = 25;\n       System.out.println(\"a + b = \" + (a + b) );\n       System.out.println(\"a - b = \" + (a - b) );\n       System.out.println(\"a * b = \" + (a * b) );\n       System.out.println(\"b / a = \" + (b / a) );\n       System.out.println(\"b % a = \" + (b % a) );\n       System.out.println(\"c % a = \" + (c % a) );\n       System.out.println(\"a++   = \" +  (a++) );\n       System.out.println(\"a--   = \" +  (a--) );\n       // 查看  d++ 与 ++d 的不同\n       System.out.println(\"d++   = \" +  (d++) );  // 当前语句后 +1\n       System.out.println(\"++d   = \" +  (++d) );  // 当前语句前 +1\n    }\n  } \n```\n\n### 关系运算符\n\nRelationalOperator.java\n```\npublic class RelationalOperator {\n\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      System.out.println(\"a == b = \" + (a == b) );\n      System.out.println(\"a != b = \" + (a != b) );\n      System.out.println(\"a > b = \" + (a > b) );\n      System.out.println(\"a < b = \" + (a < b) );\n      System.out.println(\"b >= a = \" + (b >= a) );\n      System.out.println(\"b <= a = \" + (b <= a) ); \n   } \n}\n```\n### 逻辑运算符\nLogicalOperators.java\n```\npublic class LogicalOperators {\n   public static void main(String args[]) {\n      boolean a = true;\n      boolean b = false;\n      System.out.println(\"a && b = \" + (a&&b));\n      System.out.println(\"a || b = \" + (a||b) );\n      System.out.println(\"!(a && b) = \" + !(a && b));\n   }\n } \n```\n### 赋值运算符\n\nAssignmentOperator.java\n```\npublic class AssignmentOperator {\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      int c;\n      c = a + b;\n      System.out.println(\"c = a + b is \" + (a + b));\n      System.out.println(\"c += a  is \" + (c+=a) );\n      System.out.println(\"c -= a is \" + (c -=a));\n      System.out.println(\"c *= a is \" + (c *= a));\n      a = 10;\n      c = 15;\n      System.out.println(\"c /= a is \" + (c/=a) );\n      a = 10;\n      c = 15;\n      System.out.println(\"c %= a  is \" + (c %= a));\n   }\n } \n```\n\n### 条件运算符\nConditionalOperator.java\n```\npublic class ConditionalOperator {\n   public static void main(String args[]){\n      int a , b;   \n      a = 10;    \n      b = (a == 1) ? 20: 30;   // 不成立 \n      System.out.println( \"Value of b is : \" +  b );  // 30\n      b = (a == 10) ? 20: 30;    // 成立\n      System.out.println( \"Value of b is : \" + b );  // 20\n   }\n}\n```\n### instanceOf 运算符\nCar.java\n```\nclass Vehicle {}\n\npublic class Car extends Vehicle {  // Car 继承了Vehicle所有属性和方法\n   public static void main(String args[]){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true\n      System.out.println( result);  // true\n   }\n}\n```\n\n\n","source":"_posts/java/运算符.md","raw":"---\n\ntitle: java运算符\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## Java 运算符\n主要分为一下几种\n\n1. 算术运算符\n2. 关系运算符\n3. 位运算符\n4. 逻辑运算符\n5. 赋值运算符\n6. 其他运算符\n\n###  算术运算符\nArithmeticOperator.java\n```\npublic class ArithmeticOperator {\n\n    public static void main(String args[]) {\n       int a = 10;\n       int b = 20;\n       int c = 25;\n       int d = 25;\n       System.out.println(\"a + b = \" + (a + b) );\n       System.out.println(\"a - b = \" + (a - b) );\n       System.out.println(\"a * b = \" + (a * b) );\n       System.out.println(\"b / a = \" + (b / a) );\n       System.out.println(\"b % a = \" + (b % a) );\n       System.out.println(\"c % a = \" + (c % a) );\n       System.out.println(\"a++   = \" +  (a++) );\n       System.out.println(\"a--   = \" +  (a--) );\n       // 查看  d++ 与 ++d 的不同\n       System.out.println(\"d++   = \" +  (d++) );  // 当前语句后 +1\n       System.out.println(\"++d   = \" +  (++d) );  // 当前语句前 +1\n    }\n  } \n```\n\n### 关系运算符\n\nRelationalOperator.java\n```\npublic class RelationalOperator {\n\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      System.out.println(\"a == b = \" + (a == b) );\n      System.out.println(\"a != b = \" + (a != b) );\n      System.out.println(\"a > b = \" + (a > b) );\n      System.out.println(\"a < b = \" + (a < b) );\n      System.out.println(\"b >= a = \" + (b >= a) );\n      System.out.println(\"b <= a = \" + (b <= a) ); \n   } \n}\n```\n### 逻辑运算符\nLogicalOperators.java\n```\npublic class LogicalOperators {\n   public static void main(String args[]) {\n      boolean a = true;\n      boolean b = false;\n      System.out.println(\"a && b = \" + (a&&b));\n      System.out.println(\"a || b = \" + (a||b) );\n      System.out.println(\"!(a && b) = \" + !(a && b));\n   }\n } \n```\n### 赋值运算符\n\nAssignmentOperator.java\n```\npublic class AssignmentOperator {\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      int c;\n      c = a + b;\n      System.out.println(\"c = a + b is \" + (a + b));\n      System.out.println(\"c += a  is \" + (c+=a) );\n      System.out.println(\"c -= a is \" + (c -=a));\n      System.out.println(\"c *= a is \" + (c *= a));\n      a = 10;\n      c = 15;\n      System.out.println(\"c /= a is \" + (c/=a) );\n      a = 10;\n      c = 15;\n      System.out.println(\"c %= a  is \" + (c %= a));\n   }\n } \n```\n\n### 条件运算符\nConditionalOperator.java\n```\npublic class ConditionalOperator {\n   public static void main(String args[]){\n      int a , b;   \n      a = 10;    \n      b = (a == 1) ? 20: 30;   // 不成立 \n      System.out.println( \"Value of b is : \" +  b );  // 30\n      b = (a == 10) ? 20: 30;    // 成立\n      System.out.println( \"Value of b is : \" + b );  // 20\n   }\n}\n```\n### instanceOf 运算符\nCar.java\n```\nclass Vehicle {}\n\npublic class Car extends Vehicle {  // Car 继承了Vehicle所有属性和方法\n   public static void main(String args[]){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true\n      System.out.println( result);  // true\n   }\n}\n```\n\n\n","slug":"java/运算符","published":1,"updated":"2020-04-10T16:46:16.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuat001n74uxe8o59uur","content":"<h2 id=\"Java-运算符\"><a href=\"#Java-运算符\" class=\"headerlink\" title=\"Java 运算符\"></a>Java 运算符</h2><p>主要分为一下几种</p>\n<ol>\n<li>算术运算符</li>\n<li>关系运算符</li>\n<li>位运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>其他运算符</li>\n</ol>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>ArithmeticOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ArithmeticOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">       int a = 10;</span><br><span class=\"line\">       int b = 20;</span><br><span class=\"line\">       int c = 25;</span><br><span class=\"line\">       int d = 25;</span><br><span class=\"line\">       System.out.println(&quot;a + b = &quot; + (a + b) );</span><br><span class=\"line\">       System.out.println(&quot;a - b = &quot; + (a - b) );</span><br><span class=\"line\">       System.out.println(&quot;a * b = &quot; + (a * b) );</span><br><span class=\"line\">       System.out.println(&quot;b / a = &quot; + (b / a) );</span><br><span class=\"line\">       System.out.println(&quot;b % a = &quot; + (b % a) );</span><br><span class=\"line\">       System.out.println(&quot;c % a = &quot; + (c % a) );</span><br><span class=\"line\">       System.out.println(&quot;a++   = &quot; +  (a++) );</span><br><span class=\"line\">       System.out.println(&quot;a--   = &quot; +  (a--) );</span><br><span class=\"line\">       // 查看  d++ 与 ++d 的不同</span><br><span class=\"line\">       System.out.println(&quot;d++   = &quot; +  (d++) );  // 当前语句后 +1</span><br><span class=\"line\">       System.out.println(&quot;++d   = &quot; +  (++d) );  // 当前语句前 +1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>RelationalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RelationalOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      System.out.println(&quot;a == b = &quot; + (a == b) );</span><br><span class=\"line\">      System.out.println(&quot;a != b = &quot; + (a != b) );</span><br><span class=\"line\">      System.out.println(&quot;a &gt; b = &quot; + (a &gt; b) );</span><br><span class=\"line\">      System.out.println(&quot;a &lt; b = &quot; + (a &lt; b) );</span><br><span class=\"line\">      System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a) );</span><br><span class=\"line\">      System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a) ); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>LogicalOperators.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogicalOperators &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      boolean a = true;</span><br><span class=\"line\">      boolean b = false;</span><br><span class=\"line\">      System.out.println(&quot;a &amp;&amp; b = &quot; + (a&amp;&amp;b));</span><br><span class=\"line\">      System.out.println(&quot;a || b = &quot; + (a||b) );</span><br><span class=\"line\">      System.out.println(&quot;!(a &amp;&amp; b) = &quot; + !(a &amp;&amp; b));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>AssignmentOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AssignmentOperator &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      int c;</span><br><span class=\"line\">      c = a + b;</span><br><span class=\"line\">      System.out.println(&quot;c = a + b is &quot; + (a + b));</span><br><span class=\"line\">      System.out.println(&quot;c += a  is &quot; + (c+=a) );</span><br><span class=\"line\">      System.out.println(&quot;c -= a is &quot; + (c -=a));</span><br><span class=\"line\">      System.out.println(&quot;c *= a is &quot; + (c *= a));</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c /= a is &quot; + (c/=a) );</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c %= a  is &quot; + (c %= a));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><p>ConditionalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ConditionalOperator &#123;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int a , b;   </span><br><span class=\"line\">      a = 10;    </span><br><span class=\"line\">      b = (a == 1) ? 20: 30;   // 不成立 </span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; +  b );  // 30</span><br><span class=\"line\">      b = (a == 10) ? 20: 30;    // 成立</span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; + b );  // 20</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"instanceOf-运算符\"><a href=\"#instanceOf-运算符\" class=\"headerlink\" title=\"instanceOf 运算符\"></a>instanceOf 运算符</h3><p>Car.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vehicle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Car extends Vehicle &#123;  // Car 继承了Vehicle所有属性和方法</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Vehicle a = new Car();</span><br><span class=\"line\">      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true</span><br><span class=\"line\">      System.out.println( result);  // true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-运算符\"><a href=\"#Java-运算符\" class=\"headerlink\" title=\"Java 运算符\"></a>Java 运算符</h2><p>主要分为一下几种</p>\n<ol>\n<li>算术运算符</li>\n<li>关系运算符</li>\n<li>位运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>其他运算符</li>\n</ol>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>ArithmeticOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ArithmeticOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">       int a = 10;</span><br><span class=\"line\">       int b = 20;</span><br><span class=\"line\">       int c = 25;</span><br><span class=\"line\">       int d = 25;</span><br><span class=\"line\">       System.out.println(&quot;a + b = &quot; + (a + b) );</span><br><span class=\"line\">       System.out.println(&quot;a - b = &quot; + (a - b) );</span><br><span class=\"line\">       System.out.println(&quot;a * b = &quot; + (a * b) );</span><br><span class=\"line\">       System.out.println(&quot;b / a = &quot; + (b / a) );</span><br><span class=\"line\">       System.out.println(&quot;b % a = &quot; + (b % a) );</span><br><span class=\"line\">       System.out.println(&quot;c % a = &quot; + (c % a) );</span><br><span class=\"line\">       System.out.println(&quot;a++   = &quot; +  (a++) );</span><br><span class=\"line\">       System.out.println(&quot;a--   = &quot; +  (a--) );</span><br><span class=\"line\">       // 查看  d++ 与 ++d 的不同</span><br><span class=\"line\">       System.out.println(&quot;d++   = &quot; +  (d++) );  // 当前语句后 +1</span><br><span class=\"line\">       System.out.println(&quot;++d   = &quot; +  (++d) );  // 当前语句前 +1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>RelationalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RelationalOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      System.out.println(&quot;a == b = &quot; + (a == b) );</span><br><span class=\"line\">      System.out.println(&quot;a != b = &quot; + (a != b) );</span><br><span class=\"line\">      System.out.println(&quot;a &gt; b = &quot; + (a &gt; b) );</span><br><span class=\"line\">      System.out.println(&quot;a &lt; b = &quot; + (a &lt; b) );</span><br><span class=\"line\">      System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a) );</span><br><span class=\"line\">      System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a) ); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>LogicalOperators.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogicalOperators &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      boolean a = true;</span><br><span class=\"line\">      boolean b = false;</span><br><span class=\"line\">      System.out.println(&quot;a &amp;&amp; b = &quot; + (a&amp;&amp;b));</span><br><span class=\"line\">      System.out.println(&quot;a || b = &quot; + (a||b) );</span><br><span class=\"line\">      System.out.println(&quot;!(a &amp;&amp; b) = &quot; + !(a &amp;&amp; b));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>AssignmentOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AssignmentOperator &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      int c;</span><br><span class=\"line\">      c = a + b;</span><br><span class=\"line\">      System.out.println(&quot;c = a + b is &quot; + (a + b));</span><br><span class=\"line\">      System.out.println(&quot;c += a  is &quot; + (c+=a) );</span><br><span class=\"line\">      System.out.println(&quot;c -= a is &quot; + (c -=a));</span><br><span class=\"line\">      System.out.println(&quot;c *= a is &quot; + (c *= a));</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c /= a is &quot; + (c/=a) );</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c %= a  is &quot; + (c %= a));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><p>ConditionalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ConditionalOperator &#123;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int a , b;   </span><br><span class=\"line\">      a = 10;    </span><br><span class=\"line\">      b = (a == 1) ? 20: 30;   // 不成立 </span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; +  b );  // 30</span><br><span class=\"line\">      b = (a == 10) ? 20: 30;    // 成立</span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; + b );  // 20</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"instanceOf-运算符\"><a href=\"#instanceOf-运算符\" class=\"headerlink\" title=\"instanceOf 运算符\"></a>instanceOf 运算符</h3><p>Car.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vehicle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Car extends Vehicle &#123;  // Car 继承了Vehicle所有属性和方法</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Vehicle a = new Car();</span><br><span class=\"line\">      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true</span><br><span class=\"line\">      System.out.println( result);  // true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mongodb常用命令","date":"2019-08-13T02:51:16.000Z","_content":"\n1.mongo\n连入本机数据库\n\n2.mongo 10.66.66.126:27017\n连入ip地址为10.66.66.126的机器的数据库\n\n3.db / db.getName()\n查看当前数据库(db就是Database)\n\n4.use demo\n切换/创建数据库(demo为数据库名)\n\n5.show dbs\n查看所有数据库\nshow tables\n查看所有表集合\n\n6.db.dropDatabase()\n删除当前操作的数据库\n\n7.db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")\n从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中\n\n8.db.repairDatabase()\n修复当前数据库\n\n9.db.version()\n当前db版本\n\n10.db.stats()\n显示当前db状态\n\n11.db.getMongo()\n查看当前db的链接机器地址\n\n12.数据库表 (Collection聚集集合 )\n\t1)创建一个表\n\tdb.createCollection(“collName”, {size: 20, capped: 5, max: 100})\n\n\t2)得到指定名称的表\n\tdb.getCollection(\"table\")\n\n\t3)查询当前db的所有表名的集合\n\tdb.getCollectionNames()\n\n\t4)显示当前db所有表索引的状态\n\tdb.printCollectionStats()\n\t\n13.查数据\n\t1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)\n\tdb.table.find() \n\t相当于：select * from table;\n\tdb.table.find().pretty()  查看的数据格式化\n\tdb.table.find({}, {id: 0, \"name\": 0})\t查询表中所有数据,id和name字段不返回\n\tdb.table.find({}, {id: 1, \"name\": 1})\t查询表中所有数据,id和name字段返回(默认返回)\n\t\n\t\n\t2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\n\tdb.table.distinct(\"name\")\n\t相当于: select distinct name from table;\n\t\n\t3)查询某张表中\"name\"=\"Bill\"的数据\n\tdb.table.find({\"name\"=\"Bill\"})\n\t相当于：select * from table where name = Bill;\n\n\t4)查询某张表中 id > 1 的数据 ($gt >, $lt <，$gte >=, $lte <=, $ne !=)\n\tdb.table.find({id: {$gt: 1}})\n\t相当于: select * from table where id > 1;\n\t\n\t5)查询某张表中 id > 1 $$ id <= 5的数据\n\tdb.table.find({id: {$gt: 1,$lte: 5}})\n\t相当于： select * from table where (id > 1 and id <= 5);\n\t\n\t6)查询某张表中 name 中包含 li 的数据\n\tdb.table.find({name: /li/})\n\t相当于： select * from table where name like '%li%';\n\t\n\t7)查询某张表中 name 以 li 开头的数据\n\tdb.table.find({name: /^li/})\n\t相当于： select * from table where name like 'li%';\n\t\n\t8)查询某张表中 name 以 li 结尾的数据\n\tdb.table.find({name: /li$/})\n\t相当于：select * from table where name like '%li'; \n\t\n\t9)查询指定列 name 和 work 的数据\n\tdb.table.find({}, {name: 1, work: 1})\n\t相当于：select name, work from table;\n\t\n\t10)查询 id > 3 的指定列 name 和 work 的数据\n\tdb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n\t想当于： select name, work from table where id > 3;\n\t\n\t11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n\t升序: db.table.find().sort({number: 1})\t\n\t降序：db.table.find().sort({number: -1})\n\t\n\t12)查询前三条数据\n\tdb.table.find().limit(3)\n\t相当于：select top 3 * from table;\n\t\n\t13)查询前三条之后的数据\n\tdb.table.find().skip(3)\n\t相当于：select * from table where id not in (select top 3 * from table);\n\t\n\t14)查询前三条之后的5条数据\n\tdb.table.find().limit(5).skip(3)\n\t\n\t15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\n\tdb.table.find({$or: [{id: 2}, {id: 5}]})\n\t相当于：select * from table where id = 2 or id = 5;\n\t\n\t16)查询第一条数据\n\tdb.table.findOne()\n\t相当于：select top 1 * from table;\n\t\n\t17)查询 id >= 5 的数据的个数 (count() 查询数量)\n\tdb.table.find({id: {$gte: 5}}).count()\n\t相当于：select count(*) from table where id >= 5;\n\t\n\t18)查询有 name字段 的数据的个数 \n\tdb.table.find({name: {$exists: true}}).count()\n\t相当于: select count(name) from table;\n\t\n14.索引\n索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。\n索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。\nMongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引\n此外，排序可能升序或降序排列，而索引只有升序一种方式。\n\t1)创建索引\n\tdb.table.ensureIndex({name: 1})\n\tdb.table.ensureIndex({name: 1, ts: -1})\n\t \n\t2)查询当前聚集集合所有索引\n\tdb.table.getIndexes()\n\t \n\t3)查看总索引记录大小\n\tdb.table.totalIndexSize()\n\t \n\t4)读取当前集合的所有index信息\n\tdb.table.reIndex()\n\t \n\t5)删除指定索引\n\tdb.table.dropIndex(\"name_1\")\n\t \n\t6)删除所有索引索引\n\tdb.table.dropIndexes()\n\t\n15.添加数据\n\t1)插入数据字段\n\tdb.table.insert({})\n\tdb.table.save({})\n\t\n\t2)导入数据表\n\tmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n\t-d: 数据库\n\t-c: 表名\n\t--file: 数据文件地址\n\t--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n\t\n\t\n\t\n16.修改数据\n\t1)修改表中条件为 name : \"baiqi\" 的数据的 字段 number($set设置)\n\tdb.table.update({name: \"baiqi\"}, {$set: {number: \"111\"}}, false, true)\n\t第一个false表示不新增数据\n\t相当于：update table set number = '111' where name = \"baiqi\";\n\t\n\t2)修改表中条件为 name : \"mayun\" 的数据 让 number = number + 111, id = id + 2($inc自增)\n\tdb.table.update({name: \"mayun\"}, {$inc: {number: 111, id: 2}}, false, true)\n\t相当于：update table set number = number + 111, id = id + 2 where name = \"mayun\";\n\t\n\t3)综合上面两个修改\n\tdb.table.update({name: 'liuqiangdong'}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n\t相当于： update table set id = id + 3, number = 113 where name = 'liuqiangdong';\n\t\n17.删除数据\n\tdb.table.remove({_id: ObjectId(\"59a67e103cbae75d282fe46b\")})\n\t\n其他\n\t1)查询之前的错误信息\n\tdb.getPrevError()\n\t\n\t2)清除错误记录\n\tdb.resetError()\n","source":"_posts/mongodb/mongodb常用命令.md","raw":"---\n\ntitle: mongodb常用命令\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n1.mongo\n连入本机数据库\n\n2.mongo 10.66.66.126:27017\n连入ip地址为10.66.66.126的机器的数据库\n\n3.db / db.getName()\n查看当前数据库(db就是Database)\n\n4.use demo\n切换/创建数据库(demo为数据库名)\n\n5.show dbs\n查看所有数据库\nshow tables\n查看所有表集合\n\n6.db.dropDatabase()\n删除当前操作的数据库\n\n7.db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")\n从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中\n\n8.db.repairDatabase()\n修复当前数据库\n\n9.db.version()\n当前db版本\n\n10.db.stats()\n显示当前db状态\n\n11.db.getMongo()\n查看当前db的链接机器地址\n\n12.数据库表 (Collection聚集集合 )\n\t1)创建一个表\n\tdb.createCollection(“collName”, {size: 20, capped: 5, max: 100})\n\n\t2)得到指定名称的表\n\tdb.getCollection(\"table\")\n\n\t3)查询当前db的所有表名的集合\n\tdb.getCollectionNames()\n\n\t4)显示当前db所有表索引的状态\n\tdb.printCollectionStats()\n\t\n13.查数据\n\t1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)\n\tdb.table.find() \n\t相当于：select * from table;\n\tdb.table.find().pretty()  查看的数据格式化\n\tdb.table.find({}, {id: 0, \"name\": 0})\t查询表中所有数据,id和name字段不返回\n\tdb.table.find({}, {id: 1, \"name\": 1})\t查询表中所有数据,id和name字段返回(默认返回)\n\t\n\t\n\t2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\n\tdb.table.distinct(\"name\")\n\t相当于: select distinct name from table;\n\t\n\t3)查询某张表中\"name\"=\"Bill\"的数据\n\tdb.table.find({\"name\"=\"Bill\"})\n\t相当于：select * from table where name = Bill;\n\n\t4)查询某张表中 id > 1 的数据 ($gt >, $lt <，$gte >=, $lte <=, $ne !=)\n\tdb.table.find({id: {$gt: 1}})\n\t相当于: select * from table where id > 1;\n\t\n\t5)查询某张表中 id > 1 $$ id <= 5的数据\n\tdb.table.find({id: {$gt: 1,$lte: 5}})\n\t相当于： select * from table where (id > 1 and id <= 5);\n\t\n\t6)查询某张表中 name 中包含 li 的数据\n\tdb.table.find({name: /li/})\n\t相当于： select * from table where name like '%li%';\n\t\n\t7)查询某张表中 name 以 li 开头的数据\n\tdb.table.find({name: /^li/})\n\t相当于： select * from table where name like 'li%';\n\t\n\t8)查询某张表中 name 以 li 结尾的数据\n\tdb.table.find({name: /li$/})\n\t相当于：select * from table where name like '%li'; \n\t\n\t9)查询指定列 name 和 work 的数据\n\tdb.table.find({}, {name: 1, work: 1})\n\t相当于：select name, work from table;\n\t\n\t10)查询 id > 3 的指定列 name 和 work 的数据\n\tdb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n\t想当于： select name, work from table where id > 3;\n\t\n\t11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n\t升序: db.table.find().sort({number: 1})\t\n\t降序：db.table.find().sort({number: -1})\n\t\n\t12)查询前三条数据\n\tdb.table.find().limit(3)\n\t相当于：select top 3 * from table;\n\t\n\t13)查询前三条之后的数据\n\tdb.table.find().skip(3)\n\t相当于：select * from table where id not in (select top 3 * from table);\n\t\n\t14)查询前三条之后的5条数据\n\tdb.table.find().limit(5).skip(3)\n\t\n\t15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\n\tdb.table.find({$or: [{id: 2}, {id: 5}]})\n\t相当于：select * from table where id = 2 or id = 5;\n\t\n\t16)查询第一条数据\n\tdb.table.findOne()\n\t相当于：select top 1 * from table;\n\t\n\t17)查询 id >= 5 的数据的个数 (count() 查询数量)\n\tdb.table.find({id: {$gte: 5}}).count()\n\t相当于：select count(*) from table where id >= 5;\n\t\n\t18)查询有 name字段 的数据的个数 \n\tdb.table.find({name: {$exists: true}}).count()\n\t相当于: select count(name) from table;\n\t\n14.索引\n索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。\n索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。\nMongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引\n此外，排序可能升序或降序排列，而索引只有升序一种方式。\n\t1)创建索引\n\tdb.table.ensureIndex({name: 1})\n\tdb.table.ensureIndex({name: 1, ts: -1})\n\t \n\t2)查询当前聚集集合所有索引\n\tdb.table.getIndexes()\n\t \n\t3)查看总索引记录大小\n\tdb.table.totalIndexSize()\n\t \n\t4)读取当前集合的所有index信息\n\tdb.table.reIndex()\n\t \n\t5)删除指定索引\n\tdb.table.dropIndex(\"name_1\")\n\t \n\t6)删除所有索引索引\n\tdb.table.dropIndexes()\n\t\n15.添加数据\n\t1)插入数据字段\n\tdb.table.insert({})\n\tdb.table.save({})\n\t\n\t2)导入数据表\n\tmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n\t-d: 数据库\n\t-c: 表名\n\t--file: 数据文件地址\n\t--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n\t\n\t\n\t\n16.修改数据\n\t1)修改表中条件为 name : \"baiqi\" 的数据的 字段 number($set设置)\n\tdb.table.update({name: \"baiqi\"}, {$set: {number: \"111\"}}, false, true)\n\t第一个false表示不新增数据\n\t相当于：update table set number = '111' where name = \"baiqi\";\n\t\n\t2)修改表中条件为 name : \"mayun\" 的数据 让 number = number + 111, id = id + 2($inc自增)\n\tdb.table.update({name: \"mayun\"}, {$inc: {number: 111, id: 2}}, false, true)\n\t相当于：update table set number = number + 111, id = id + 2 where name = \"mayun\";\n\t\n\t3)综合上面两个修改\n\tdb.table.update({name: 'liuqiangdong'}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n\t相当于： update table set id = id + 3, number = 113 where name = 'liuqiangdong';\n\t\n17.删除数据\n\tdb.table.remove({_id: ObjectId(\"59a67e103cbae75d282fe46b\")})\n\t\n其他\n\t1)查询之前的错误信息\n\tdb.getPrevError()\n\t\n\t2)清除错误记录\n\tdb.resetError()\n","slug":"mongodb/mongodb常用命令","published":1,"updated":"2020-04-10T16:46:16.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtub4001q74uxgibguhw6","content":"<p>1.mongo<br>连入本机数据库</p>\n<p>2.mongo 10.66.66.126:27017<br>连入ip地址为10.66.66.126的机器的数据库</p>\n<p>3.db / db.getName()<br>查看当前数据库(db就是Database)</p>\n<p>4.use demo<br>切换/创建数据库(demo为数据库名)</p>\n<p>5.show dbs<br>查看所有数据库<br>show tables<br>查看所有表集合</p>\n<p>6.db.dropDatabase()<br>删除当前操作的数据库</p>\n<p>7.db.copyDatabase(“mydb”, “temp”, “127.0.0.1”)<br>从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中</p>\n<p>8.db.repairDatabase()<br>修复当前数据库</p>\n<p>9.db.version()<br>当前db版本</p>\n<p>10.db.stats()<br>显示当前db状态</p>\n<p>11.db.getMongo()<br>查看当前db的链接机器地址</p>\n<p>12.数据库表 (Collection聚集集合 )<br>    1)创建一个表<br>    db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</p>\n<pre><code>2)得到指定名称的表\ndb.getCollection(&quot;table&quot;)\n\n3)查询当前db的所有表名的集合\ndb.getCollectionNames()\n\n4)显示当前db所有表索引的状态\ndb.printCollectionStats()\n</code></pre><p>13.查数据<br>    1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)<br>    db.table.find()<br>    相当于：select * from table;<br>    db.table.find().pretty()  查看的数据格式化<br>    db.table.find({}, {id: 0, “name”: 0})    查询表中所有数据,id和name字段不返回<br>    db.table.find({}, {id: 1, “name”: 1})    查询表中所有数据,id和name字段返回(默认返回)</p>\n<pre><code>2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\ndb.table.distinct(&quot;name&quot;)\n相当于: select distinct name from table;\n\n3)查询某张表中&quot;name&quot;=&quot;Bill&quot;的数据\ndb.table.find({&quot;name&quot;=&quot;Bill&quot;})\n相当于：select * from table where name = Bill;\n\n4)查询某张表中 id &gt; 1 的数据 ($gt &gt;, $lt &lt;，$gte &gt;=, $lte &lt;=, $ne !=)\ndb.table.find({id: {$gt: 1}})\n相当于: select * from table where id &gt; 1;\n\n5)查询某张表中 id &gt; 1 $$ id &lt;= 5的数据\ndb.table.find({id: {$gt: 1,$lte: 5}})\n相当于： select * from table where (id &gt; 1 and id &lt;= 5);\n\n6)查询某张表中 name 中包含 li 的数据\ndb.table.find({name: /li/})\n相当于： select * from table where name like &apos;%li%&apos;;\n\n7)查询某张表中 name 以 li 开头的数据\ndb.table.find({name: /^li/})\n相当于： select * from table where name like &apos;li%&apos;;\n\n8)查询某张表中 name 以 li 结尾的数据\ndb.table.find({name: /li$/})\n相当于：select * from table where name like &apos;%li&apos;; \n\n9)查询指定列 name 和 work 的数据\ndb.table.find({}, {name: 1, work: 1})\n相当于：select name, work from table;\n\n10)查询 id &gt; 3 的指定列 name 和 work 的数据\ndb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n想当于： select name, work from table where id &gt; 3;\n\n11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n升序: db.table.find().sort({number: 1})    \n降序：db.table.find().sort({number: -1})\n\n12)查询前三条数据\ndb.table.find().limit(3)\n相当于：select top 3 * from table;\n\n13)查询前三条之后的数据\ndb.table.find().skip(3)\n相当于：select * from table where id not in (select top 3 * from table);\n\n14)查询前三条之后的5条数据\ndb.table.find().limit(5).skip(3)\n\n15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\ndb.table.find({$or: [{id: 2}, {id: 5}]})\n相当于：select * from table where id = 2 or id = 5;\n\n16)查询第一条数据\ndb.table.findOne()\n相当于：select top 1 * from table;\n\n17)查询 id &gt;= 5 的数据的个数 (count() 查询数量)\ndb.table.find({id: {$gte: 5}}).count()\n相当于：select count(*) from table where id &gt;= 5;\n\n18)查询有 name字段 的数据的个数 \ndb.table.find({name: {$exists: true}}).count()\n相当于: select count(name) from table;\n</code></pre><p>14.索引<br>索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。<br>索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。<br>MongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引<br>此外，排序可能升序或降序排列，而索引只有升序一种方式。<br>    1)创建索引<br>    db.table.ensureIndex({name: 1})<br>    db.table.ensureIndex({name: 1, ts: -1})</p>\n<pre><code>2)查询当前聚集集合所有索引\ndb.table.getIndexes()\n\n3)查看总索引记录大小\ndb.table.totalIndexSize()\n\n4)读取当前集合的所有index信息\ndb.table.reIndex()\n\n5)删除指定索引\ndb.table.dropIndex(&quot;name_1&quot;)\n\n6)删除所有索引索引\ndb.table.dropIndexes()\n</code></pre><p>15.添加数据<br>    1)插入数据字段<br>    db.table.insert({})<br>    db.table.save({})</p>\n<pre><code>2)导入数据表\nmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n-d: 数据库\n-c: 表名\n--file: 数据文件地址\n--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n</code></pre><p>16.修改数据<br>    1)修改表中条件为 name : “baiqi” 的数据的 字段 number($set设置)<br>    db.table.update({name: “baiqi”}, {$set: {number: “111”}}, false, true)<br>    第一个false表示不新增数据<br>    相当于：update table set number = ‘111’ where name = “baiqi”;</p>\n<pre><code>2)修改表中条件为 name : &quot;mayun&quot; 的数据 让 number = number + 111, id = id + 2($inc自增)\ndb.table.update({name: &quot;mayun&quot;}, {$inc: {number: 111, id: 2}}, false, true)\n相当于：update table set number = number + 111, id = id + 2 where name = &quot;mayun&quot;;\n\n3)综合上面两个修改\ndb.table.update({name: &apos;liuqiangdong&apos;}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n相当于： update table set id = id + 3, number = 113 where name = &apos;liuqiangdong&apos;;\n</code></pre><p>17.删除数据<br>    db.table.remove({_id: ObjectId(“59a67e103cbae75d282fe46b”)})</p>\n<p>其他<br>    1)查询之前的错误信息<br>    db.getPrevError()</p>\n<pre><code>2)清除错误记录\ndb.resetError()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>1.mongo<br>连入本机数据库</p>\n<p>2.mongo 10.66.66.126:27017<br>连入ip地址为10.66.66.126的机器的数据库</p>\n<p>3.db / db.getName()<br>查看当前数据库(db就是Database)</p>\n<p>4.use demo<br>切换/创建数据库(demo为数据库名)</p>\n<p>5.show dbs<br>查看所有数据库<br>show tables<br>查看所有表集合</p>\n<p>6.db.dropDatabase()<br>删除当前操作的数据库</p>\n<p>7.db.copyDatabase(“mydb”, “temp”, “127.0.0.1”)<br>从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中</p>\n<p>8.db.repairDatabase()<br>修复当前数据库</p>\n<p>9.db.version()<br>当前db版本</p>\n<p>10.db.stats()<br>显示当前db状态</p>\n<p>11.db.getMongo()<br>查看当前db的链接机器地址</p>\n<p>12.数据库表 (Collection聚集集合 )<br>    1)创建一个表<br>    db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</p>\n<pre><code>2)得到指定名称的表\ndb.getCollection(&quot;table&quot;)\n\n3)查询当前db的所有表名的集合\ndb.getCollectionNames()\n\n4)显示当前db所有表索引的状态\ndb.printCollectionStats()\n</code></pre><p>13.查数据<br>    1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)<br>    db.table.find()<br>    相当于：select * from table;<br>    db.table.find().pretty()  查看的数据格式化<br>    db.table.find({}, {id: 0, “name”: 0})    查询表中所有数据,id和name字段不返回<br>    db.table.find({}, {id: 1, “name”: 1})    查询表中所有数据,id和name字段返回(默认返回)</p>\n<pre><code>2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\ndb.table.distinct(&quot;name&quot;)\n相当于: select distinct name from table;\n\n3)查询某张表中&quot;name&quot;=&quot;Bill&quot;的数据\ndb.table.find({&quot;name&quot;=&quot;Bill&quot;})\n相当于：select * from table where name = Bill;\n\n4)查询某张表中 id &gt; 1 的数据 ($gt &gt;, $lt &lt;，$gte &gt;=, $lte &lt;=, $ne !=)\ndb.table.find({id: {$gt: 1}})\n相当于: select * from table where id &gt; 1;\n\n5)查询某张表中 id &gt; 1 $$ id &lt;= 5的数据\ndb.table.find({id: {$gt: 1,$lte: 5}})\n相当于： select * from table where (id &gt; 1 and id &lt;= 5);\n\n6)查询某张表中 name 中包含 li 的数据\ndb.table.find({name: /li/})\n相当于： select * from table where name like &apos;%li%&apos;;\n\n7)查询某张表中 name 以 li 开头的数据\ndb.table.find({name: /^li/})\n相当于： select * from table where name like &apos;li%&apos;;\n\n8)查询某张表中 name 以 li 结尾的数据\ndb.table.find({name: /li$/})\n相当于：select * from table where name like &apos;%li&apos;; \n\n9)查询指定列 name 和 work 的数据\ndb.table.find({}, {name: 1, work: 1})\n相当于：select name, work from table;\n\n10)查询 id &gt; 3 的指定列 name 和 work 的数据\ndb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n想当于： select name, work from table where id &gt; 3;\n\n11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n升序: db.table.find().sort({number: 1})    \n降序：db.table.find().sort({number: -1})\n\n12)查询前三条数据\ndb.table.find().limit(3)\n相当于：select top 3 * from table;\n\n13)查询前三条之后的数据\ndb.table.find().skip(3)\n相当于：select * from table where id not in (select top 3 * from table);\n\n14)查询前三条之后的5条数据\ndb.table.find().limit(5).skip(3)\n\n15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\ndb.table.find({$or: [{id: 2}, {id: 5}]})\n相当于：select * from table where id = 2 or id = 5;\n\n16)查询第一条数据\ndb.table.findOne()\n相当于：select top 1 * from table;\n\n17)查询 id &gt;= 5 的数据的个数 (count() 查询数量)\ndb.table.find({id: {$gte: 5}}).count()\n相当于：select count(*) from table where id &gt;= 5;\n\n18)查询有 name字段 的数据的个数 \ndb.table.find({name: {$exists: true}}).count()\n相当于: select count(name) from table;\n</code></pre><p>14.索引<br>索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。<br>索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。<br>MongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引<br>此外，排序可能升序或降序排列，而索引只有升序一种方式。<br>    1)创建索引<br>    db.table.ensureIndex({name: 1})<br>    db.table.ensureIndex({name: 1, ts: -1})</p>\n<pre><code>2)查询当前聚集集合所有索引\ndb.table.getIndexes()\n\n3)查看总索引记录大小\ndb.table.totalIndexSize()\n\n4)读取当前集合的所有index信息\ndb.table.reIndex()\n\n5)删除指定索引\ndb.table.dropIndex(&quot;name_1&quot;)\n\n6)删除所有索引索引\ndb.table.dropIndexes()\n</code></pre><p>15.添加数据<br>    1)插入数据字段<br>    db.table.insert({})<br>    db.table.save({})</p>\n<pre><code>2)导入数据表\nmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n-d: 数据库\n-c: 表名\n--file: 数据文件地址\n--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n</code></pre><p>16.修改数据<br>    1)修改表中条件为 name : “baiqi” 的数据的 字段 number($set设置)<br>    db.table.update({name: “baiqi”}, {$set: {number: “111”}}, false, true)<br>    第一个false表示不新增数据<br>    相当于：update table set number = ‘111’ where name = “baiqi”;</p>\n<pre><code>2)修改表中条件为 name : &quot;mayun&quot; 的数据 让 number = number + 111, id = id + 2($inc自增)\ndb.table.update({name: &quot;mayun&quot;}, {$inc: {number: 111, id: 2}}, false, true)\n相当于：update table set number = number + 111, id = id + 2 where name = &quot;mayun&quot;;\n\n3)综合上面两个修改\ndb.table.update({name: &apos;liuqiangdong&apos;}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n相当于： update table set id = id + 3, number = 113 where name = &apos;liuqiangdong&apos;;\n</code></pre><p>17.删除数据<br>    db.table.remove({_id: ObjectId(“59a67e103cbae75d282fe46b”)})</p>\n<p>其他<br>    1)查询之前的错误信息<br>    db.getPrevError()</p>\n<pre><code>2)清除错误记录\ndb.resetError()\n</code></pre>"},{"title":"odm","date":"2019-08-13T02:51:16.000Z","_content":"\n\n```\n\nfrom mongoengine import connect, Document, StringField, IntField, \\\n    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字\nconnect('test')   # 连接的数据库\n# connect('test', host = '192.168.0.2', port=27017)\n# connect('test', host = 'mongodb://localhost/test') \nSEX_CHOICE = (\n    ('male', '男'),\n    ('female', '女')\n)\n\nclass Grade(EmbeddedDocument):\n    '''  成绩信息  '''\n    name =  StringField(required=True)\n    score = FloatField(required=True)\n\nclass Student(DynamicDocument):   # 可以在后面插入其他关键字\n    ''' 学生信息 '''\n    name = StringField(max_length=32, required=True)\n    age = IntField(required=True)\n    sex = StringField(choices=SEX_CHOICE, required=True)\n    grade = FloatField()\n    address = StringField()\n    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联\n    \n    meta = {\n        'collection': 'students'  # 指定连接的集合\n    }\n```","source":"_posts/mongodb/odm.md","raw":"---\n\ntitle: odm\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n\n```\n\nfrom mongoengine import connect, Document, StringField, IntField, \\\n    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字\nconnect('test')   # 连接的数据库\n# connect('test', host = '192.168.0.2', port=27017)\n# connect('test', host = 'mongodb://localhost/test') \nSEX_CHOICE = (\n    ('male', '男'),\n    ('female', '女')\n)\n\nclass Grade(EmbeddedDocument):\n    '''  成绩信息  '''\n    name =  StringField(required=True)\n    score = FloatField(required=True)\n\nclass Student(DynamicDocument):   # 可以在后面插入其他关键字\n    ''' 学生信息 '''\n    name = StringField(max_length=32, required=True)\n    age = IntField(required=True)\n    sex = StringField(choices=SEX_CHOICE, required=True)\n    grade = FloatField()\n    address = StringField()\n    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联\n    \n    meta = {\n        'collection': 'students'  # 指定连接的集合\n    }\n```","slug":"mongodb/odm","published":1,"updated":"2020-04-10T16:46:16.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtub8001r74uxbz6phd0i","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from mongoengine import connect, Document, StringField, IntField, \\</span><br><span class=\"line\">    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字</span><br><span class=\"line\">connect(&apos;test&apos;)   # 连接的数据库</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;192.168.0.2&apos;, port=27017)</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;mongodb://localhost/test&apos;) </span><br><span class=\"line\">SEX_CHOICE = (</span><br><span class=\"line\">    (&apos;male&apos;, &apos;男&apos;),</span><br><span class=\"line\">    (&apos;female&apos;, &apos;女&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class Grade(EmbeddedDocument):</span><br><span class=\"line\">    &apos;&apos;&apos;  成绩信息  &apos;&apos;&apos;</span><br><span class=\"line\">    name =  StringField(required=True)</span><br><span class=\"line\">    score = FloatField(required=True)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(DynamicDocument):   # 可以在后面插入其他关键字</span><br><span class=\"line\">    &apos;&apos;&apos; 学生信息 &apos;&apos;&apos;</span><br><span class=\"line\">    name = StringField(max_length=32, required=True)</span><br><span class=\"line\">    age = IntField(required=True)</span><br><span class=\"line\">    sex = StringField(choices=SEX_CHOICE, required=True)</span><br><span class=\"line\">    grade = FloatField()</span><br><span class=\"line\">    address = StringField()</span><br><span class=\"line\">    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联</span><br><span class=\"line\">    </span><br><span class=\"line\">    meta = &#123;</span><br><span class=\"line\">        &apos;collection&apos;: &apos;students&apos;  # 指定连接的集合</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from mongoengine import connect, Document, StringField, IntField, \\</span><br><span class=\"line\">    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字</span><br><span class=\"line\">connect(&apos;test&apos;)   # 连接的数据库</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;192.168.0.2&apos;, port=27017)</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;mongodb://localhost/test&apos;) </span><br><span class=\"line\">SEX_CHOICE = (</span><br><span class=\"line\">    (&apos;male&apos;, &apos;男&apos;),</span><br><span class=\"line\">    (&apos;female&apos;, &apos;女&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class Grade(EmbeddedDocument):</span><br><span class=\"line\">    &apos;&apos;&apos;  成绩信息  &apos;&apos;&apos;</span><br><span class=\"line\">    name =  StringField(required=True)</span><br><span class=\"line\">    score = FloatField(required=True)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(DynamicDocument):   # 可以在后面插入其他关键字</span><br><span class=\"line\">    &apos;&apos;&apos; 学生信息 &apos;&apos;&apos;</span><br><span class=\"line\">    name = StringField(max_length=32, required=True)</span><br><span class=\"line\">    age = IntField(required=True)</span><br><span class=\"line\">    sex = StringField(choices=SEX_CHOICE, required=True)</span><br><span class=\"line\">    grade = FloatField()</span><br><span class=\"line\">    address = StringField()</span><br><span class=\"line\">    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联</span><br><span class=\"line\">    </span><br><span class=\"line\">    meta = &#123;</span><br><span class=\"line\">        &apos;collection&apos;: &apos;students&apos;  # 指定连接的集合</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"python操作MongoDB","date":"2019-08-13T02:51:16.000Z","_content":"\npython操作MongoDB\n\n```\nfrom pymongo import MongoClient\nfrom dataclasses import dataclass\nfrom bson.objectid import ObjectId\n\n\n@dataclass\nclass Test_Mongo():\n    client:dict = MongoClient()\n    db:dict = client['test']  # 连接到 test 数据库\n    \n    def add_one(self):\n        post = {\n            'name': 'justin',\n            'age': 18,\n            'sex': 'male',\n            'grade': 80\n        }\n        return self.db.students.insert_one(post)\n\n    def add_many(self):\n        return self.db.students.insert_many([{'name':i} for i in range(0,10)])\n\n\n    def get_one(self):\n        return self.db.students.find_one({'name':'justin'})\n\n    def get_more(self):\n        return self.db.students.find({'sex':'male'})\n\n    def get_one_from_oid(self, oid):\n        obj = ObjectId(oid)\n        return self.db.students.find_one({'_id': obj})\n\n    def get_count(self):\n        return self.db.students.estimated_document_count()\n\n\n    def update_one(self):\n        return self.db.students.update_one({'name':'justin'},{'$inc':{'age':10}})\n\n    def update_many(self):\n        return self.db.students.update_many({},{'$inc':{'age':5}})\n\n    def delete_one(self):\n        return self.db.students.delete_one({'name':'justin'})\n\n    def delete_many(self):\n        return self.db.students.delete_many({'name':'justin'})\n\n\ndef main():\n    obj = Test_Mongo()\n    print(obj.add_one().inserted_id)\n    print(obj.get_one())\n    print(obj.add_many().inserted_ids)\n    print(obj.get_count())\n    for item in obj.get_more():\n        print(item['_id'])\n    print(obj.get_one_from_oid(obj.add_one().inserted_id))\n    print(obj.update_one().matched_count)\n    print(obj.update_one().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.delete_one().deleted_count)\n    print(obj.delete_many().deleted_count)\n\n\nif __name__ == '__main__':\n    main()\n```","source":"_posts/mongodb/python操作MongoDB.md","raw":"---\n\ntitle: python操作MongoDB\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\npython操作MongoDB\n\n```\nfrom pymongo import MongoClient\nfrom dataclasses import dataclass\nfrom bson.objectid import ObjectId\n\n\n@dataclass\nclass Test_Mongo():\n    client:dict = MongoClient()\n    db:dict = client['test']  # 连接到 test 数据库\n    \n    def add_one(self):\n        post = {\n            'name': 'justin',\n            'age': 18,\n            'sex': 'male',\n            'grade': 80\n        }\n        return self.db.students.insert_one(post)\n\n    def add_many(self):\n        return self.db.students.insert_many([{'name':i} for i in range(0,10)])\n\n\n    def get_one(self):\n        return self.db.students.find_one({'name':'justin'})\n\n    def get_more(self):\n        return self.db.students.find({'sex':'male'})\n\n    def get_one_from_oid(self, oid):\n        obj = ObjectId(oid)\n        return self.db.students.find_one({'_id': obj})\n\n    def get_count(self):\n        return self.db.students.estimated_document_count()\n\n\n    def update_one(self):\n        return self.db.students.update_one({'name':'justin'},{'$inc':{'age':10}})\n\n    def update_many(self):\n        return self.db.students.update_many({},{'$inc':{'age':5}})\n\n    def delete_one(self):\n        return self.db.students.delete_one({'name':'justin'})\n\n    def delete_many(self):\n        return self.db.students.delete_many({'name':'justin'})\n\n\ndef main():\n    obj = Test_Mongo()\n    print(obj.add_one().inserted_id)\n    print(obj.get_one())\n    print(obj.add_many().inserted_ids)\n    print(obj.get_count())\n    for item in obj.get_more():\n        print(item['_id'])\n    print(obj.get_one_from_oid(obj.add_one().inserted_id))\n    print(obj.update_one().matched_count)\n    print(obj.update_one().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.delete_one().deleted_count)\n    print(obj.delete_many().deleted_count)\n\n\nif __name__ == '__main__':\n    main()\n```","slug":"mongodb/python操作MongoDB","published":1,"updated":"2020-04-10T16:46:16.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtubk001v74uxpp9n3j0x","content":"<p>python操作MongoDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">from bson.objectid import ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Test_Mongo():</span><br><span class=\"line\">    client:dict = MongoClient()</span><br><span class=\"line\">    db:dict = client[&apos;test&apos;]  # 连接到 test 数据库</span><br><span class=\"line\">    </span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        post = &#123;</span><br><span class=\"line\">            &apos;name&apos;: &apos;justin&apos;,</span><br><span class=\"line\">            &apos;age&apos;: 18,</span><br><span class=\"line\">            &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">            &apos;grade&apos;: 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self.db.students.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_many(self):</span><br><span class=\"line\">        return self.db.students.insert_many([&#123;&apos;name&apos;:i&#125; for i in range(0,10)])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.db.students.find(&#123;&apos;sex&apos;:&apos;male&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one_from_oid(self, oid):</span><br><span class=\"line\">        obj = ObjectId(oid)</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;_id&apos;: obj&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_count(self):</span><br><span class=\"line\">        return self.db.students.estimated_document_count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return self.db.students.update_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:10&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_many(self):</span><br><span class=\"line\">        return self.db.students.update_many(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:5&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return self.db.students.delete_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_many(self):</span><br><span class=\"line\">        return self.db.students.delete_many(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = Test_Mongo()</span><br><span class=\"line\">    print(obj.add_one().inserted_id)</span><br><span class=\"line\">    print(obj.get_one())</span><br><span class=\"line\">    print(obj.add_many().inserted_ids)</span><br><span class=\"line\">    print(obj.get_count())</span><br><span class=\"line\">    for item in obj.get_more():</span><br><span class=\"line\">        print(item[&apos;_id&apos;])</span><br><span class=\"line\">    print(obj.get_one_from_oid(obj.add_one().inserted_id))</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.delete_one().deleted_count)</span><br><span class=\"line\">    print(obj.delete_many().deleted_count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>python操作MongoDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">from bson.objectid import ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Test_Mongo():</span><br><span class=\"line\">    client:dict = MongoClient()</span><br><span class=\"line\">    db:dict = client[&apos;test&apos;]  # 连接到 test 数据库</span><br><span class=\"line\">    </span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        post = &#123;</span><br><span class=\"line\">            &apos;name&apos;: &apos;justin&apos;,</span><br><span class=\"line\">            &apos;age&apos;: 18,</span><br><span class=\"line\">            &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">            &apos;grade&apos;: 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self.db.students.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_many(self):</span><br><span class=\"line\">        return self.db.students.insert_many([&#123;&apos;name&apos;:i&#125; for i in range(0,10)])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.db.students.find(&#123;&apos;sex&apos;:&apos;male&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one_from_oid(self, oid):</span><br><span class=\"line\">        obj = ObjectId(oid)</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;_id&apos;: obj&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_count(self):</span><br><span class=\"line\">        return self.db.students.estimated_document_count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return self.db.students.update_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:10&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_many(self):</span><br><span class=\"line\">        return self.db.students.update_many(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:5&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return self.db.students.delete_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_many(self):</span><br><span class=\"line\">        return self.db.students.delete_many(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = Test_Mongo()</span><br><span class=\"line\">    print(obj.add_one().inserted_id)</span><br><span class=\"line\">    print(obj.get_one())</span><br><span class=\"line\">    print(obj.add_many().inserted_ids)</span><br><span class=\"line\">    print(obj.get_count())</span><br><span class=\"line\">    for item in obj.get_more():</span><br><span class=\"line\">        print(item[&apos;_id&apos;])</span><br><span class=\"line\">    print(obj.get_one_from_oid(obj.add_one().inserted_id))</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.delete_one().deleted_count)</span><br><span class=\"line\">    print(obj.delete_many().deleted_count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"title":"test_odm","date":"2019-08-13T02:51:16.000Z","_content":"\n```\nfrom odm import Grade, Student\n\nclass TestMongoEngine:\n    def add_one(self):\n        math = Grade(name = '数学', score = 90)\n        English = Grade(name = '英语', score = 89.5)\n\n        stu_obj = Student(\n            name =  'weilai',\n            age = 22,\n            sex = 'male',\n            grades = [math, English]\n        )\n        stu_obj.remake = 'remake'  # 动态插入\n        stu_obj.save()\n        return stu_obj\n\n    def get_one(self):\n        return Student.objects.first()\n\n    def get_more(self):\n        return Student.objects.all()\n    \n    def get_from_oid(self, oid):\n        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据\n         \n    def update_more(self):\n        return Student.objects.filter(sex='male',age__gt=20).update(inc__age=10)\n\n    def update_one(self):\n        return Student.objects.filter(sex='male',age__gt=20).update_one(inc__age=100)\n\n    def delete_one(self):\n        return Student.objects.filter(sex='male').first().delete()\n\n    def delete_more(self):\n        return Student.objects.filter(sex='male').delete()\n\ndef main():\n    obj = TestMongoEngine()\n    result = obj.add_one()\n    print(result.pk)\n    get_one = obj.get_one()\n    print(get_one.id)\n    print(get_one.name)\n    print(obj.get_from_oid(get_one.id).id)\n    rows = obj.get_more()\n    for row in rows:\n        print(row.sex)\n    print(obj.update_more())\n    print(obj.update_one())\n    print(obj.delete_one())\n    print(obj.delete_more())\n\nif __name__ == '__main__':\n    main()\n```","source":"_posts/mongodb/test_odm.md","raw":"---\n\ntitle: test_odm\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n```\nfrom odm import Grade, Student\n\nclass TestMongoEngine:\n    def add_one(self):\n        math = Grade(name = '数学', score = 90)\n        English = Grade(name = '英语', score = 89.5)\n\n        stu_obj = Student(\n            name =  'weilai',\n            age = 22,\n            sex = 'male',\n            grades = [math, English]\n        )\n        stu_obj.remake = 'remake'  # 动态插入\n        stu_obj.save()\n        return stu_obj\n\n    def get_one(self):\n        return Student.objects.first()\n\n    def get_more(self):\n        return Student.objects.all()\n    \n    def get_from_oid(self, oid):\n        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据\n         \n    def update_more(self):\n        return Student.objects.filter(sex='male',age__gt=20).update(inc__age=10)\n\n    def update_one(self):\n        return Student.objects.filter(sex='male',age__gt=20).update_one(inc__age=100)\n\n    def delete_one(self):\n        return Student.objects.filter(sex='male').first().delete()\n\n    def delete_more(self):\n        return Student.objects.filter(sex='male').delete()\n\ndef main():\n    obj = TestMongoEngine()\n    result = obj.add_one()\n    print(result.pk)\n    get_one = obj.get_one()\n    print(get_one.id)\n    print(get_one.name)\n    print(obj.get_from_oid(get_one.id).id)\n    rows = obj.get_more()\n    for row in rows:\n        print(row.sex)\n    print(obj.update_more())\n    print(obj.update_one())\n    print(obj.delete_one())\n    print(obj.delete_more())\n\nif __name__ == '__main__':\n    main()\n```","slug":"mongodb/test_odm","published":1,"updated":"2020-04-10T16:46:16.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtubo001w74ux56862pv1","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from odm import Grade, Student</span><br><span class=\"line\"></span><br><span class=\"line\">class TestMongoEngine:</span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        math = Grade(name = &apos;数学&apos;, score = 90)</span><br><span class=\"line\">        English = Grade(name = &apos;英语&apos;, score = 89.5)</span><br><span class=\"line\"></span><br><span class=\"line\">        stu_obj = Student(</span><br><span class=\"line\">            name =  &apos;weilai&apos;,</span><br><span class=\"line\">            age = 22,</span><br><span class=\"line\">            sex = &apos;male&apos;,</span><br><span class=\"line\">            grades = [math, English]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        stu_obj.remake = &apos;remake&apos;  # 动态插入</span><br><span class=\"line\">        stu_obj.save()</span><br><span class=\"line\">        return stu_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return Student.objects.all()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_from_oid(self, oid):</span><br><span class=\"line\">        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据</span><br><span class=\"line\">         </span><br><span class=\"line\">    def update_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update(inc__age=10)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update_one(inc__age=100)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).first().delete()</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).delete()</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = TestMongoEngine()</span><br><span class=\"line\">    result = obj.add_one()</span><br><span class=\"line\">    print(result.pk)</span><br><span class=\"line\">    get_one = obj.get_one()</span><br><span class=\"line\">    print(get_one.id)</span><br><span class=\"line\">    print(get_one.name)</span><br><span class=\"line\">    print(obj.get_from_oid(get_one.id).id)</span><br><span class=\"line\">    rows = obj.get_more()</span><br><span class=\"line\">    for row in rows:</span><br><span class=\"line\">        print(row.sex)</span><br><span class=\"line\">    print(obj.update_more())</span><br><span class=\"line\">    print(obj.update_one())</span><br><span class=\"line\">    print(obj.delete_one())</span><br><span class=\"line\">    print(obj.delete_more())</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from odm import Grade, Student</span><br><span class=\"line\"></span><br><span class=\"line\">class TestMongoEngine:</span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        math = Grade(name = &apos;数学&apos;, score = 90)</span><br><span class=\"line\">        English = Grade(name = &apos;英语&apos;, score = 89.5)</span><br><span class=\"line\"></span><br><span class=\"line\">        stu_obj = Student(</span><br><span class=\"line\">            name =  &apos;weilai&apos;,</span><br><span class=\"line\">            age = 22,</span><br><span class=\"line\">            sex = &apos;male&apos;,</span><br><span class=\"line\">            grades = [math, English]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        stu_obj.remake = &apos;remake&apos;  # 动态插入</span><br><span class=\"line\">        stu_obj.save()</span><br><span class=\"line\">        return stu_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return Student.objects.all()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_from_oid(self, oid):</span><br><span class=\"line\">        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据</span><br><span class=\"line\">         </span><br><span class=\"line\">    def update_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update(inc__age=10)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update_one(inc__age=100)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).first().delete()</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).delete()</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = TestMongoEngine()</span><br><span class=\"line\">    result = obj.add_one()</span><br><span class=\"line\">    print(result.pk)</span><br><span class=\"line\">    get_one = obj.get_one()</span><br><span class=\"line\">    print(get_one.id)</span><br><span class=\"line\">    print(get_one.name)</span><br><span class=\"line\">    print(obj.get_from_oid(get_one.id).id)</span><br><span class=\"line\">    rows = obj.get_more()</span><br><span class=\"line\">    for row in rows:</span><br><span class=\"line\">        print(row.sex)</span><br><span class=\"line\">    print(obj.update_more())</span><br><span class=\"line\">    print(obj.update_one())</span><br><span class=\"line\">    print(obj.delete_one())</span><br><span class=\"line\">    print(obj.delete_more())</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"title":"mongodb入门","date":"2019-08-13T02:51:16.000Z","_content":"## 简介\n### 文档\n1. eg: {\"foo\":3,\"greeting\":\"Hello world!\"}\n2. 区分大小写\n3. key唯一\n4. 文档可嵌套\n5. 键值对 有序\n\n### 集合\n1. 集合就是一组文档\n2. 文档类似于 关系库里的 行\n3. 集合类似于 关系库里的表\n4. 集合中的文档无需固定的结构\n\n集合命名规则：\n\n### 数据库\n1. 多个文档组成集合，多个集合组成数据库\n2. 一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）\n3. 每个数据库都有独立权限\n4. 保留的数据库名称（admin,local,config）\n\n## 使用命令行操作数据库\n### 兼容js操作\n> 1+2\n3\n> function add(r1,r2){\n... return r1 + r2;\n... }\n> add(8,2)\n10\n### 新增数据\n`show dbs` 查看所有数据库\n`db.collection.insert()`\n`db.collection.insertOne()`\n`db.collection.insertMany()`\n```\n> show dbs\nadmin  0.078GB\nlocal  0.078GB\n```\n`use test` 使用 test 数据库 （没有就会创建）\n```\n> use students\nswitched to db students\n> db   # 查看当前数据库\nstudents\n> stu = { name : 'weilai', age : 22 }\n{ \"name\" : \"weilai\", \"age\" : 22 }\n> db.students.insert(stu)\nWriteResult({ \"nInserted\" : 1 })\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n```\n\n### 查询数据\n`db.collection.find()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n`db.collection.findOne()`\n```\n> db.students.findOne()   # 查询第一条数据\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n```\n\n### 修改数据\n`db.collection.update()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> s = db.students.findOne()\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n> db.students.update({name:'weilai'},{name:'cool'})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }  # 直接替换，并非仅修改 name 的值\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n仅修改值\n```\n> s_obj = db.students.findOne({'name':'weilai1'})\n{\n        \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"),\n        \"name\" : \"weilai1\",\n        \"age\" : 22,\n        \"sex\" : \"male\"\n}\n> s_obj.name = 'amy'\namy\n> db.students.update({name:'weilai1'},s_obj)\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n```\n\n### 删除数据\n`db.collection.remove({name:'cool'})`  删除 1条数据\n`db.collection.remove({})` 删除所有数据\n```\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({name:'cool'})\nWriteResult({ \"nRemoved\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({})\nWriteResult({ \"nRemoved\" : 2 })\n> db.students.find()\n>\n```\n\n\n\n\n","source":"_posts/mongodb/入门.md","raw":"---\n\ntitle: mongodb入门\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n## 简介\n### 文档\n1. eg: {\"foo\":3,\"greeting\":\"Hello world!\"}\n2. 区分大小写\n3. key唯一\n4. 文档可嵌套\n5. 键值对 有序\n\n### 集合\n1. 集合就是一组文档\n2. 文档类似于 关系库里的 行\n3. 集合类似于 关系库里的表\n4. 集合中的文档无需固定的结构\n\n集合命名规则：\n\n### 数据库\n1. 多个文档组成集合，多个集合组成数据库\n2. 一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）\n3. 每个数据库都有独立权限\n4. 保留的数据库名称（admin,local,config）\n\n## 使用命令行操作数据库\n### 兼容js操作\n> 1+2\n3\n> function add(r1,r2){\n... return r1 + r2;\n... }\n> add(8,2)\n10\n### 新增数据\n`show dbs` 查看所有数据库\n`db.collection.insert()`\n`db.collection.insertOne()`\n`db.collection.insertMany()`\n```\n> show dbs\nadmin  0.078GB\nlocal  0.078GB\n```\n`use test` 使用 test 数据库 （没有就会创建）\n```\n> use students\nswitched to db students\n> db   # 查看当前数据库\nstudents\n> stu = { name : 'weilai', age : 22 }\n{ \"name\" : \"weilai\", \"age\" : 22 }\n> db.students.insert(stu)\nWriteResult({ \"nInserted\" : 1 })\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n```\n\n### 查询数据\n`db.collection.find()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n`db.collection.findOne()`\n```\n> db.students.findOne()   # 查询第一条数据\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n```\n\n### 修改数据\n`db.collection.update()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> s = db.students.findOne()\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n> db.students.update({name:'weilai'},{name:'cool'})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }  # 直接替换，并非仅修改 name 的值\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n仅修改值\n```\n> s_obj = db.students.findOne({'name':'weilai1'})\n{\n        \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"),\n        \"name\" : \"weilai1\",\n        \"age\" : 22,\n        \"sex\" : \"male\"\n}\n> s_obj.name = 'amy'\namy\n> db.students.update({name:'weilai1'},s_obj)\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n```\n\n### 删除数据\n`db.collection.remove({name:'cool'})`  删除 1条数据\n`db.collection.remove({})` 删除所有数据\n```\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({name:'cool'})\nWriteResult({ \"nRemoved\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({})\nWriteResult({ \"nRemoved\" : 2 })\n> db.students.find()\n>\n```\n\n\n\n\n","slug":"mongodb/入门","published":1,"updated":"2020-04-10T16:46:16.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuc9001z74uxq83ug9m8","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ol>\n<li>eg: {“foo”:3,”greeting”:”Hello world!”}</li>\n<li>区分大小写</li>\n<li>key唯一</li>\n<li>文档可嵌套</li>\n<li>键值对 有序</li>\n</ol>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><ol>\n<li>集合就是一组文档</li>\n<li>文档类似于 关系库里的 行</li>\n<li>集合类似于 关系库里的表</li>\n<li>集合中的文档无需固定的结构</li>\n</ol>\n<p>集合命名规则：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>多个文档组成集合，多个集合组成数据库</li>\n<li>一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）</li>\n<li>每个数据库都有独立权限</li>\n<li>保留的数据库名称（admin,local,config）</li>\n</ol>\n<h2 id=\"使用命令行操作数据库\"><a href=\"#使用命令行操作数据库\" class=\"headerlink\" title=\"使用命令行操作数据库\"></a>使用命令行操作数据库</h2><h3 id=\"兼容js操作\"><a href=\"#兼容js操作\" class=\"headerlink\" title=\"兼容js操作\"></a>兼容js操作</h3><blockquote>\n<p>1+2<br>3<br>function add(r1,r2){<br>… return r1 + r2;<br>… }<br>add(8,2)<br>10</p>\n</blockquote>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><p><code>show dbs</code> 查看所有数据库<br><code>db.collection.insert()</code><br><code>db.collection.insertOne()</code><br><code>db.collection.insertMany()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin  0.078GB</span><br><span class=\"line\">local  0.078GB</span><br></pre></td></tr></table></figure></p>\n<p><code>use test</code> 使用 test 数据库 （没有就会创建）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use students</span><br><span class=\"line\">switched to db students</span><br><span class=\"line\">&gt; db   # 查看当前数据库</span><br><span class=\"line\">students</span><br><span class=\"line\">&gt; stu = &#123; name : &apos;weilai&apos;, age : 22 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&gt; db.students.insert(stu)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><code>db.collection.find()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>db.collection.findOne()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.findOne()   # 查询第一条数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><code>db.collection.update()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; s = db.students.findOne()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai&apos;&#125;,&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;  # 直接替换，并非仅修改 name 的值</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>仅修改值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; s_obj = db.students.findOne(&#123;&apos;name&apos;:&apos;weilai1&apos;&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai1&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22,</span><br><span class=\"line\">        &quot;sex&quot; : &quot;male&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; s_obj.name = &apos;amy&apos;</span><br><span class=\"line\">amy</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai1&apos;&#125;,s_obj)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><code>db.collection.remove({name:&#39;cool&#39;})</code>  删除 1条数据<br><code>db.collection.remove({})</code> 删除所有数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ol>\n<li>eg: {“foo”:3,”greeting”:”Hello world!”}</li>\n<li>区分大小写</li>\n<li>key唯一</li>\n<li>文档可嵌套</li>\n<li>键值对 有序</li>\n</ol>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><ol>\n<li>集合就是一组文档</li>\n<li>文档类似于 关系库里的 行</li>\n<li>集合类似于 关系库里的表</li>\n<li>集合中的文档无需固定的结构</li>\n</ol>\n<p>集合命名规则：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>多个文档组成集合，多个集合组成数据库</li>\n<li>一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）</li>\n<li>每个数据库都有独立权限</li>\n<li>保留的数据库名称（admin,local,config）</li>\n</ol>\n<h2 id=\"使用命令行操作数据库\"><a href=\"#使用命令行操作数据库\" class=\"headerlink\" title=\"使用命令行操作数据库\"></a>使用命令行操作数据库</h2><h3 id=\"兼容js操作\"><a href=\"#兼容js操作\" class=\"headerlink\" title=\"兼容js操作\"></a>兼容js操作</h3><blockquote>\n<p>1+2<br>3<br>function add(r1,r2){<br>… return r1 + r2;<br>… }<br>add(8,2)<br>10</p>\n</blockquote>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><p><code>show dbs</code> 查看所有数据库<br><code>db.collection.insert()</code><br><code>db.collection.insertOne()</code><br><code>db.collection.insertMany()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin  0.078GB</span><br><span class=\"line\">local  0.078GB</span><br></pre></td></tr></table></figure></p>\n<p><code>use test</code> 使用 test 数据库 （没有就会创建）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use students</span><br><span class=\"line\">switched to db students</span><br><span class=\"line\">&gt; db   # 查看当前数据库</span><br><span class=\"line\">students</span><br><span class=\"line\">&gt; stu = &#123; name : &apos;weilai&apos;, age : 22 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&gt; db.students.insert(stu)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><code>db.collection.find()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>db.collection.findOne()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.findOne()   # 查询第一条数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><code>db.collection.update()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; s = db.students.findOne()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai&apos;&#125;,&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;  # 直接替换，并非仅修改 name 的值</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>仅修改值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; s_obj = db.students.findOne(&#123;&apos;name&apos;:&apos;weilai1&apos;&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai1&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22,</span><br><span class=\"line\">        &quot;sex&quot; : &quot;male&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; s_obj.name = &apos;amy&apos;</span><br><span class=\"line\">amy</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai1&apos;&#125;,s_obj)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><code>db.collection.remove({name:&#39;cool&#39;})</code>  删除 1条数据<br><code>db.collection.remove({})</code> 删除所有数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mongodb补充数据","date":"2019-08-13T02:51:16.000Z","_content":"```\nimport random\nimport json\n\na = {\n    'name' : 'weilai',\n    'age' : 18,\n    'sex': 'male',\n    'grade' : 45 \n    }\nlist_json = []\nfor i in range(0,20):\n    a['name'] = f\"测试-{i}\"\n    a['age'] = random.randint(0, 100)\n    a['sex'] =  random.choice(['male', 'female'])\n    a['grade'] = random.randint(0, 100)\n    j = json.dumps(a, ensure_ascii=False)\n    list_json.append(j)\n\nlist_json = ','.join(list_json)\nlist_json = '[' + list_json +']'\nprint(list_json)\n```","source":"_posts/mongodb/入门补充生成数据.md","raw":"---\n\ntitle: mongodb补充数据\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n```\nimport random\nimport json\n\na = {\n    'name' : 'weilai',\n    'age' : 18,\n    'sex': 'male',\n    'grade' : 45 \n    }\nlist_json = []\nfor i in range(0,20):\n    a['name'] = f\"测试-{i}\"\n    a['age'] = random.randint(0, 100)\n    a['sex'] =  random.choice(['male', 'female'])\n    a['grade'] = random.randint(0, 100)\n    j = json.dumps(a, ensure_ascii=False)\n    list_json.append(j)\n\nlist_json = ','.join(list_json)\nlist_json = '[' + list_json +']'\nprint(list_json)\n```","slug":"mongodb/入门补充生成数据","published":1,"updated":"2020-04-10T16:46:16.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtud9002274uxjfjm5mpm","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">a = &#123;</span><br><span class=\"line\">    &apos;name&apos; : &apos;weilai&apos;,</span><br><span class=\"line\">    &apos;age&apos; : 18,</span><br><span class=\"line\">    &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">    &apos;grade&apos; : 45 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">list_json = []</span><br><span class=\"line\">for i in range(0,20):</span><br><span class=\"line\">    a[&apos;name&apos;] = f&quot;测试-&#123;i&#125;&quot;</span><br><span class=\"line\">    a[&apos;age&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    a[&apos;sex&apos;] =  random.choice([&apos;male&apos;, &apos;female&apos;])</span><br><span class=\"line\">    a[&apos;grade&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    j = json.dumps(a, ensure_ascii=False)</span><br><span class=\"line\">    list_json.append(j)</span><br><span class=\"line\"></span><br><span class=\"line\">list_json = &apos;,&apos;.join(list_json)</span><br><span class=\"line\">list_json = &apos;[&apos; + list_json +&apos;]&apos;</span><br><span class=\"line\">print(list_json)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">a = &#123;</span><br><span class=\"line\">    &apos;name&apos; : &apos;weilai&apos;,</span><br><span class=\"line\">    &apos;age&apos; : 18,</span><br><span class=\"line\">    &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">    &apos;grade&apos; : 45 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">list_json = []</span><br><span class=\"line\">for i in range(0,20):</span><br><span class=\"line\">    a[&apos;name&apos;] = f&quot;测试-&#123;i&#125;&quot;</span><br><span class=\"line\">    a[&apos;age&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    a[&apos;sex&apos;] =  random.choice([&apos;male&apos;, &apos;female&apos;])</span><br><span class=\"line\">    a[&apos;grade&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    j = json.dumps(a, ensure_ascii=False)</span><br><span class=\"line\">    list_json.append(j)</span><br><span class=\"line\"></span><br><span class=\"line\">list_json = &apos;,&apos;.join(list_json)</span><br><span class=\"line\">list_json = &apos;[&apos; + list_json +&apos;]&apos;</span><br><span class=\"line\">print(list_json)</span><br></pre></td></tr></table></figure>"},{"title":"mongodb插入数据","date":"2019-08-13T02:51:16.000Z","_content":"\n## 插入数据\n```\n> use test\nswitched to db test\n> db.students.insertMany(\n... [{\"name\": \"测试-0\", \"age\": 63, \"sex\": \"female\", \"grade\": 1},{\"name\": \"测试-1\", \"age\": 32, \"sex\": \"male\", \"grade\": 7},{\"name\": \"测试-2\", \"age\": 20, \"sex\": \"female\", \"grade\": 8},{\"name\": \"测试-3\", \"age\": 55, \"sex\": \"female\", \"grade\": 58},{\"name\": \"测试-4\", \"age\": 84, \"sex\": \"male\", \"grade\": 65},{\"name\": \"测试-5\", \"age\": 27, \"sex\": \"female\", \"grade\": 57},{\"name\": \"测试-6\", \"age\": 86, \"sex\": \"female\", \"grade\": 61},{\"name\": \"测试-7\", \"age\": 18, \"sex\": \"female\", \"grade\": 93},{\"name\": \"测试-8\", \"age\": 50, \"sex\": \"female\", \"grade\": 71},{\"name\": \"测试-9\", \"age\": 81, \"sex\": \"male\", \"grade\": 42},{\"name\": \"测试-10\", \"age\": 26, \"sex\": \"male\", \"grade\": 25},{\"name\": \"测试-11\", \"age\": 91, \"sex\": \"female\", \"grade\": 14},{\"name\": \"测试-12\", \"age\": 6, \"sex\": \"female\", \"grade\": 54},{\"name\": \"测试-13\", \"age\": 73, \"sex\": \"male\", \"grade\": 24},{\"name\": \"测试-14\", \"age\": 51, \"sex\": \"male\", \"grade\": 14},{\"name\": \"测试-15\", \"age\": 53, \"sex\": \"female\", \"grade\": 19},{\"name\": \"测试-16\", \"age\": 3, \"sex\": \"female\", \"grade\": 48},{\"name\": \"测试-17\", \"age\": 13, \"sex\": \"male\", \"grade\": 11},{\"name\": \"测试-18\", \"age\": 40, \"sex\": \"female\", \"grade\": 97},{\"name\": \"测试-19\", \"age\": 97, \"sex\": \"male\", \"grade\": 96}])\n{\n        \"acknowledged\" : true,\n        \"insertedIds\" : [\n                ObjectId(\"5de8b35c75deb540ecfc5332\"),\n                ObjectId(\"5de8b35c75deb540ecfc5333\"),\n                ObjectId(\"5de8b35c75deb540ecfc5334\"),\n                ObjectId(\"5de8b35c75deb540ecfc5335\"),\n                ObjectId(\"5de8b35c75deb540ecfc5336\"),\n                ObjectId(\"5de8b35c75deb540ecfc5337\"),\n                ObjectId(\"5de8b35c75deb540ecfc5338\"),\n                ObjectId(\"5de8b35c75deb540ecfc5339\"),\n                ObjectId(\"5de8b35c75deb540ecfc533a\"),\n                ObjectId(\"5de8b35c75deb540ecfc533b\"),\n                ObjectId(\"5de8b35c75deb540ecfc533c\"),\n                ObjectId(\"5de8b35c75deb540ecfc533d\"),\n                ObjectId(\"5de8b35c75deb540ecfc533e\"),\n                ObjectId(\"5de8b35c75deb540ecfc533f\"),\n                ObjectId(\"5de8b35c75deb540ecfc5340\"),\n                ObjectId(\"5de8b35c75deb540ecfc5341\"),\n                ObjectId(\"5de8b35c75deb540ecfc5342\"),\n                ObjectId(\"5de8b35c75deb540ecfc5343\"),\n                ObjectId(\"5de8b35c75deb540ecfc5344\"),\n                ObjectId(\"5de8b35c75deb540ecfc5345\")\n        ]\n}\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({sex:'male'},{age:1,name:1,_id:0})  # sex 为 male false 不显示， true 显示\n{ \"name\" : \"测试-1\", \"age\" : 32 }\n{ \"name\" : \"测试-4\", \"age\" : 84 }\n{ \"name\" : \"测试-9\", \"age\" : 81 }\n{ \"name\" : \"测试-10\", \"age\" : 26 }\n{ \"name\" : \"测试-13\", \"age\" : 73 }\n{ \"name\" : \"测试-14\", \"age\" : 51 }\n{ \"name\" : \"测试-17\", \"age\" : 13 }\n{ \"name\" : \"测试-19\", \"age\" : 97 }\n> db.students.find({grade:{'$gte':60}},{_id:0})  # grade 大于等于 60 \n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({'$or':[{sex:'female',age:18},{sex:'male',age:81}]},{_id:0})  # age =18,sex  = famale 或 age = 81,sex  = male\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n> db.students.find().sort({age:-1})  #  按 age 倒序 \n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n> db.students.find({},{_id:0}).sort({age:1})  # 查询所有，不显示_id,按age 升序\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 1'}})  # 仅修改第一条数据\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 1\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 2'}},{multi:true}) # {multi:true} 多条属性\nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 19 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({},{'$inc':{age:1}},{multi:true})  # 所有人的age加1 \nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 20 })\n> db.students.find({},{_id:0})  \n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({sex:'male'},{'$inc':{grade:-1}},{multi:true}) # sex:male 的grade 减1 \nWriteResult({ \"nMatched\" : 8, \"nUpserted\" : 0, \"nModified\" : 8 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 6, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 64, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 41, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 23, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 13, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 10, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 95, \"class\" : \"class 2\" }\n```\n\n\n\n","source":"_posts/mongodb/入门补充.md","raw":"---\n\ntitle: mongodb插入数据\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n## 插入数据\n```\n> use test\nswitched to db test\n> db.students.insertMany(\n... [{\"name\": \"测试-0\", \"age\": 63, \"sex\": \"female\", \"grade\": 1},{\"name\": \"测试-1\", \"age\": 32, \"sex\": \"male\", \"grade\": 7},{\"name\": \"测试-2\", \"age\": 20, \"sex\": \"female\", \"grade\": 8},{\"name\": \"测试-3\", \"age\": 55, \"sex\": \"female\", \"grade\": 58},{\"name\": \"测试-4\", \"age\": 84, \"sex\": \"male\", \"grade\": 65},{\"name\": \"测试-5\", \"age\": 27, \"sex\": \"female\", \"grade\": 57},{\"name\": \"测试-6\", \"age\": 86, \"sex\": \"female\", \"grade\": 61},{\"name\": \"测试-7\", \"age\": 18, \"sex\": \"female\", \"grade\": 93},{\"name\": \"测试-8\", \"age\": 50, \"sex\": \"female\", \"grade\": 71},{\"name\": \"测试-9\", \"age\": 81, \"sex\": \"male\", \"grade\": 42},{\"name\": \"测试-10\", \"age\": 26, \"sex\": \"male\", \"grade\": 25},{\"name\": \"测试-11\", \"age\": 91, \"sex\": \"female\", \"grade\": 14},{\"name\": \"测试-12\", \"age\": 6, \"sex\": \"female\", \"grade\": 54},{\"name\": \"测试-13\", \"age\": 73, \"sex\": \"male\", \"grade\": 24},{\"name\": \"测试-14\", \"age\": 51, \"sex\": \"male\", \"grade\": 14},{\"name\": \"测试-15\", \"age\": 53, \"sex\": \"female\", \"grade\": 19},{\"name\": \"测试-16\", \"age\": 3, \"sex\": \"female\", \"grade\": 48},{\"name\": \"测试-17\", \"age\": 13, \"sex\": \"male\", \"grade\": 11},{\"name\": \"测试-18\", \"age\": 40, \"sex\": \"female\", \"grade\": 97},{\"name\": \"测试-19\", \"age\": 97, \"sex\": \"male\", \"grade\": 96}])\n{\n        \"acknowledged\" : true,\n        \"insertedIds\" : [\n                ObjectId(\"5de8b35c75deb540ecfc5332\"),\n                ObjectId(\"5de8b35c75deb540ecfc5333\"),\n                ObjectId(\"5de8b35c75deb540ecfc5334\"),\n                ObjectId(\"5de8b35c75deb540ecfc5335\"),\n                ObjectId(\"5de8b35c75deb540ecfc5336\"),\n                ObjectId(\"5de8b35c75deb540ecfc5337\"),\n                ObjectId(\"5de8b35c75deb540ecfc5338\"),\n                ObjectId(\"5de8b35c75deb540ecfc5339\"),\n                ObjectId(\"5de8b35c75deb540ecfc533a\"),\n                ObjectId(\"5de8b35c75deb540ecfc533b\"),\n                ObjectId(\"5de8b35c75deb540ecfc533c\"),\n                ObjectId(\"5de8b35c75deb540ecfc533d\"),\n                ObjectId(\"5de8b35c75deb540ecfc533e\"),\n                ObjectId(\"5de8b35c75deb540ecfc533f\"),\n                ObjectId(\"5de8b35c75deb540ecfc5340\"),\n                ObjectId(\"5de8b35c75deb540ecfc5341\"),\n                ObjectId(\"5de8b35c75deb540ecfc5342\"),\n                ObjectId(\"5de8b35c75deb540ecfc5343\"),\n                ObjectId(\"5de8b35c75deb540ecfc5344\"),\n                ObjectId(\"5de8b35c75deb540ecfc5345\")\n        ]\n}\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({sex:'male'},{age:1,name:1,_id:0})  # sex 为 male false 不显示， true 显示\n{ \"name\" : \"测试-1\", \"age\" : 32 }\n{ \"name\" : \"测试-4\", \"age\" : 84 }\n{ \"name\" : \"测试-9\", \"age\" : 81 }\n{ \"name\" : \"测试-10\", \"age\" : 26 }\n{ \"name\" : \"测试-13\", \"age\" : 73 }\n{ \"name\" : \"测试-14\", \"age\" : 51 }\n{ \"name\" : \"测试-17\", \"age\" : 13 }\n{ \"name\" : \"测试-19\", \"age\" : 97 }\n> db.students.find({grade:{'$gte':60}},{_id:0})  # grade 大于等于 60 \n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({'$or':[{sex:'female',age:18},{sex:'male',age:81}]},{_id:0})  # age =18,sex  = famale 或 age = 81,sex  = male\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n> db.students.find().sort({age:-1})  #  按 age 倒序 \n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n> db.students.find({},{_id:0}).sort({age:1})  # 查询所有，不显示_id,按age 升序\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 1'}})  # 仅修改第一条数据\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 1\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 2'}},{multi:true}) # {multi:true} 多条属性\nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 19 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({},{'$inc':{age:1}},{multi:true})  # 所有人的age加1 \nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 20 })\n> db.students.find({},{_id:0})  \n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({sex:'male'},{'$inc':{grade:-1}},{multi:true}) # sex:male 的grade 减1 \nWriteResult({ \"nMatched\" : 8, \"nUpserted\" : 0, \"nModified\" : 8 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 6, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 64, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 41, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 23, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 13, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 10, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 95, \"class\" : \"class 2\" }\n```\n\n\n\n","slug":"mongodb/入门补充","published":1,"updated":"2020-04-10T16:46:16.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtudn002674uxnc4z3m9l","content":"<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use test</span><br><span class=\"line\">switched to db test</span><br><span class=\"line\">&gt; db.students.insertMany(</span><br><span class=\"line\">... [&#123;&quot;name&quot;: &quot;测试-0&quot;, &quot;age&quot;: 63, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;测试-1&quot;, &quot;age&quot;: 32, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 7&#125;,&#123;&quot;name&quot;: &quot;测试-2&quot;, &quot;age&quot;: 20, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 8&#125;,&#123;&quot;name&quot;: &quot;测试-3&quot;, &quot;age&quot;: 55, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 58&#125;,&#123;&quot;name&quot;: &quot;测试-4&quot;, &quot;age&quot;: 84, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 65&#125;,&#123;&quot;name&quot;: &quot;测试-5&quot;, &quot;age&quot;: 27, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 57&#125;,&#123;&quot;name&quot;: &quot;测试-6&quot;, &quot;age&quot;: 86, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 61&#125;,&#123;&quot;name&quot;: &quot;测试-7&quot;, &quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 93&#125;,&#123;&quot;name&quot;: &quot;测试-8&quot;, &quot;age&quot;: 50, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 71&#125;,&#123;&quot;name&quot;: &quot;测试-9&quot;, &quot;age&quot;: 81, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 42&#125;,&#123;&quot;name&quot;: &quot;测试-10&quot;, &quot;age&quot;: 26, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 25&#125;,&#123;&quot;name&quot;: &quot;测试-11&quot;, &quot;age&quot;: 91, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-12&quot;, &quot;age&quot;: 6, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 54&#125;,&#123;&quot;name&quot;: &quot;测试-13&quot;, &quot;age&quot;: 73, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 24&#125;,&#123;&quot;name&quot;: &quot;测试-14&quot;, &quot;age&quot;: 51, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-15&quot;, &quot;age&quot;: 53, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 19&#125;,&#123;&quot;name&quot;: &quot;测试-16&quot;, &quot;age&quot;: 3, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 48&#125;,&#123;&quot;name&quot;: &quot;测试-17&quot;, &quot;age&quot;: 13, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 11&#125;,&#123;&quot;name&quot;: &quot;测试-18&quot;, &quot;age&quot;: 40, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 97&#125;,&#123;&quot;name&quot;: &quot;测试-19&quot;, &quot;age&quot;: 97, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 96&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedIds&quot; : [</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;sex:&apos;male&apos;&#125;,&#123;age:1,name:1,_id:0&#125;)  # sex 为 male false 不显示， true 显示</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;grade:&#123;&apos;$gte&apos;:60&#125;&#125;,&#123;_id:0&#125;)  # grade 大于等于 60 </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&apos;$or&apos;:[&#123;sex:&apos;female&apos;,age:18&#125;,&#123;sex:&apos;male&apos;,age:81&#125;]&#125;,&#123;_id:0&#125;)  # age =18,sex  = famale 或 age = 81,sex  = male</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&gt; db.students.find().sort(&#123;age:-1&#125;)  #  按 age 倒序 </span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)  # 查询所有，不显示_id,按age 升序</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 1&apos;&#125;&#125;)  # 仅修改第一条数据</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 1&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 2&apos;&#125;&#125;,&#123;multi:true&#125;) # &#123;multi:true&#125; 多条属性</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 19 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;age:1&#125;&#125;,&#123;multi:true&#125;)  # 所有人的age加1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 20 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)  </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;sex:&apos;male&apos;&#125;,&#123;&apos;$inc&apos;:&#123;grade:-1&#125;&#125;,&#123;multi:true&#125;) # sex:male 的grade 减1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 8, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 6, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 64, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 41, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 23, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 13, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 10, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 95, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use test</span><br><span class=\"line\">switched to db test</span><br><span class=\"line\">&gt; db.students.insertMany(</span><br><span class=\"line\">... [&#123;&quot;name&quot;: &quot;测试-0&quot;, &quot;age&quot;: 63, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;测试-1&quot;, &quot;age&quot;: 32, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 7&#125;,&#123;&quot;name&quot;: &quot;测试-2&quot;, &quot;age&quot;: 20, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 8&#125;,&#123;&quot;name&quot;: &quot;测试-3&quot;, &quot;age&quot;: 55, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 58&#125;,&#123;&quot;name&quot;: &quot;测试-4&quot;, &quot;age&quot;: 84, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 65&#125;,&#123;&quot;name&quot;: &quot;测试-5&quot;, &quot;age&quot;: 27, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 57&#125;,&#123;&quot;name&quot;: &quot;测试-6&quot;, &quot;age&quot;: 86, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 61&#125;,&#123;&quot;name&quot;: &quot;测试-7&quot;, &quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 93&#125;,&#123;&quot;name&quot;: &quot;测试-8&quot;, &quot;age&quot;: 50, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 71&#125;,&#123;&quot;name&quot;: &quot;测试-9&quot;, &quot;age&quot;: 81, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 42&#125;,&#123;&quot;name&quot;: &quot;测试-10&quot;, &quot;age&quot;: 26, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 25&#125;,&#123;&quot;name&quot;: &quot;测试-11&quot;, &quot;age&quot;: 91, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-12&quot;, &quot;age&quot;: 6, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 54&#125;,&#123;&quot;name&quot;: &quot;测试-13&quot;, &quot;age&quot;: 73, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 24&#125;,&#123;&quot;name&quot;: &quot;测试-14&quot;, &quot;age&quot;: 51, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-15&quot;, &quot;age&quot;: 53, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 19&#125;,&#123;&quot;name&quot;: &quot;测试-16&quot;, &quot;age&quot;: 3, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 48&#125;,&#123;&quot;name&quot;: &quot;测试-17&quot;, &quot;age&quot;: 13, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 11&#125;,&#123;&quot;name&quot;: &quot;测试-18&quot;, &quot;age&quot;: 40, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 97&#125;,&#123;&quot;name&quot;: &quot;测试-19&quot;, &quot;age&quot;: 97, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 96&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedIds&quot; : [</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;sex:&apos;male&apos;&#125;,&#123;age:1,name:1,_id:0&#125;)  # sex 为 male false 不显示， true 显示</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;grade:&#123;&apos;$gte&apos;:60&#125;&#125;,&#123;_id:0&#125;)  # grade 大于等于 60 </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&apos;$or&apos;:[&#123;sex:&apos;female&apos;,age:18&#125;,&#123;sex:&apos;male&apos;,age:81&#125;]&#125;,&#123;_id:0&#125;)  # age =18,sex  = famale 或 age = 81,sex  = male</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&gt; db.students.find().sort(&#123;age:-1&#125;)  #  按 age 倒序 </span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)  # 查询所有，不显示_id,按age 升序</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 1&apos;&#125;&#125;)  # 仅修改第一条数据</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 1&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 2&apos;&#125;&#125;,&#123;multi:true&#125;) # &#123;multi:true&#125; 多条属性</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 19 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;age:1&#125;&#125;,&#123;multi:true&#125;)  # 所有人的age加1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 20 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)  </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;sex:&apos;male&apos;&#125;,&#123;&apos;$inc&apos;:&#123;grade:-1&#125;&#125;,&#123;multi:true&#125;) # sex:male 的grade 减1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 8, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 6, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 64, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 41, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 23, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 13, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 10, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 95, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"PandaTV爬取主播人气并排序","date":"2018-12-25T03:05:31.000Z","_content":"\n\n很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = 'https://www.panda.tv/cate/yzdr'。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\n![发布的时候nickname和number如图](https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n代码如下：\n```\nimport re\nfrom urllib import request\nimport os\nimport datetime\n \n \nclass Spider():\n    url = 'https://www.panda.tv/all'\n    root_pattern ='<div class=\"video-info\">[\\s\\S]*?</div>'  # 因为number和name均在其下\n    name_pattern = '<span class=\"video-nickname\" title=\"([\\s\\S]*?)\">\\n'\n    number_pattern = '<span class=\"video-number\"><i class=\"ricon ricon-eye\"></i>([\\s\\S]*?)</span>\\n'\n\n    # 获取htmls数据\n    def __fetch_content(self):\n        r = request.Request(Spider.url)\n        r.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758')\n        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法\n        htmls = r.read()     # 读取\n        htmls = str(htmls, encoding='utf-8')   # 转为str\n        return htmls   \n\n    \n    # 建立一个list为: [{'name':name,'number': number},{'name':name,'number': number},...]\n    def __analysis(self, htmls):\n        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的<div class=\"video-info\">[\\s\\S]*?</div>\n        anchors = []\n\n        for html in root_html:  # 将<div class=\"video-info\">[\\s\\S]*?</div>一个一个提取出来\n            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]\n            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]\n            anchor = {'name': name, 'number': number} # 将name 和 number 对应起来，组成一个字典\n            anchors.append(anchor) # 将这个字典添加到 anchors列表中\n        return anchors\n \n    # \n    def __refine(self, anchors):\n        l = lambda anchors: {\n            'name': anchors['name'][0],  #strip()  内置函数，去掉空格\n            'number': anchors['number'][0]   # 取出字符串\n        }\n        return map(l, anchors)  #{['name':'xxx','number':'yyy']},{['name':'xxx1','number':'yyy1']}...\n \n    def __sort(self, anchors):   #排序\n        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序\n        return anchors  #anchor['number']中的转为float格式，按转化后的数字大小进行排序\n \n    def __sort_seed(self, anchor):  # 排序调用的方法\n        r = anchor['number']\n        if '万' in r:\n            r = r.strip('万')\n            r = float(r)\n            r *= 10000\n        number = float(r)\n        return number\n \n    def __show(self, anchors):  # 显示格式  \n        time_stamp = datetime.datetime.now()\n        b = str(time_stamp.strftime('%Y.%m.%d - %H:%M:%S') )\n        with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write('\\n\\n')\n                f.write(b)\n                f.write('\\n\\n') \n        for rank in range(0, len(anchors)):\n            a = str(('rank  ' + str(rank + 1) + '    '   #加排名，因为是从0开始\n                                           '主播姓名' + ':' + anchors[rank]['name'] +\n                  '      ' + '观看人数:'+anchors[rank]['number']))\n            with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write(a)\n                f.write('\\n')\n \n    def go(self):  #主方法\n        htmls = self.__fetch_content()\n        anchors = self.__analysis(htmls)\n        anchors = list(self.__refine(anchors))\n        anchors = self.__sort(anchors)\n        self.__show(anchors)\n \nspider = Spider()\nspider.go()\n```\n附带本次成果\n![](https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/python/PandaTV爬取主播人气并排序.md","raw":"---\ntitle: PandaTV爬取主播人气并排序\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = 'https://www.panda.tv/cate/yzdr'。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\n![发布的时候nickname和number如图](https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n代码如下：\n```\nimport re\nfrom urllib import request\nimport os\nimport datetime\n \n \nclass Spider():\n    url = 'https://www.panda.tv/all'\n    root_pattern ='<div class=\"video-info\">[\\s\\S]*?</div>'  # 因为number和name均在其下\n    name_pattern = '<span class=\"video-nickname\" title=\"([\\s\\S]*?)\">\\n'\n    number_pattern = '<span class=\"video-number\"><i class=\"ricon ricon-eye\"></i>([\\s\\S]*?)</span>\\n'\n\n    # 获取htmls数据\n    def __fetch_content(self):\n        r = request.Request(Spider.url)\n        r.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758')\n        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法\n        htmls = r.read()     # 读取\n        htmls = str(htmls, encoding='utf-8')   # 转为str\n        return htmls   \n\n    \n    # 建立一个list为: [{'name':name,'number': number},{'name':name,'number': number},...]\n    def __analysis(self, htmls):\n        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的<div class=\"video-info\">[\\s\\S]*?</div>\n        anchors = []\n\n        for html in root_html:  # 将<div class=\"video-info\">[\\s\\S]*?</div>一个一个提取出来\n            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]\n            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]\n            anchor = {'name': name, 'number': number} # 将name 和 number 对应起来，组成一个字典\n            anchors.append(anchor) # 将这个字典添加到 anchors列表中\n        return anchors\n \n    # \n    def __refine(self, anchors):\n        l = lambda anchors: {\n            'name': anchors['name'][0],  #strip()  内置函数，去掉空格\n            'number': anchors['number'][0]   # 取出字符串\n        }\n        return map(l, anchors)  #{['name':'xxx','number':'yyy']},{['name':'xxx1','number':'yyy1']}...\n \n    def __sort(self, anchors):   #排序\n        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序\n        return anchors  #anchor['number']中的转为float格式，按转化后的数字大小进行排序\n \n    def __sort_seed(self, anchor):  # 排序调用的方法\n        r = anchor['number']\n        if '万' in r:\n            r = r.strip('万')\n            r = float(r)\n            r *= 10000\n        number = float(r)\n        return number\n \n    def __show(self, anchors):  # 显示格式  \n        time_stamp = datetime.datetime.now()\n        b = str(time_stamp.strftime('%Y.%m.%d - %H:%M:%S') )\n        with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write('\\n\\n')\n                f.write(b)\n                f.write('\\n\\n') \n        for rank in range(0, len(anchors)):\n            a = str(('rank  ' + str(rank + 1) + '    '   #加排名，因为是从0开始\n                                           '主播姓名' + ':' + anchors[rank]['name'] +\n                  '      ' + '观看人数:'+anchors[rank]['number']))\n            with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write(a)\n                f.write('\\n')\n \n    def go(self):  #主方法\n        htmls = self.__fetch_content()\n        anchors = self.__analysis(htmls)\n        anchors = list(self.__refine(anchors))\n        anchors = self.__sort(anchors)\n        self.__show(anchors)\n \nspider = Spider()\nspider.go()\n```\n附带本次成果\n![](https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"python/PandaTV爬取主播人气并排序","published":1,"updated":"2020-04-10T16:46:16.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtue1002974uxjwllidy9","content":"<p>很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = ‘<a href=\"https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\" target=\"_blank\" rel=\"noopener\">https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发布的时候nickname和number如图\"><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from urllib import request</span><br><span class=\"line\">import os</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">class Spider():</span><br><span class=\"line\">    url = &apos;https://www.panda.tv/all&apos;</span><br><span class=\"line\">    root_pattern =&apos;&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;&apos;  # 因为number和name均在其下</span><br><span class=\"line\">    name_pattern = &apos;&lt;span class=&quot;video-nickname&quot; title=&quot;([\\s\\S]*?)&quot;&gt;\\n&apos;</span><br><span class=\"line\">    number_pattern = &apos;&lt;span class=&quot;video-number&quot;&gt;&lt;i class=&quot;ricon ricon-eye&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;\\n&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 获取htmls数据</span><br><span class=\"line\">    def __fetch_content(self):</span><br><span class=\"line\">        r = request.Request(Spider.url)</span><br><span class=\"line\">        r.add_header(&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758&apos;)</span><br><span class=\"line\">        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法</span><br><span class=\"line\">        htmls = r.read()     # 读取</span><br><span class=\"line\">        htmls = str(htmls, encoding=&apos;utf-8&apos;)   # 转为str</span><br><span class=\"line\">        return htmls   </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立一个list为: [&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,...]</span><br><span class=\"line\">    def __analysis(self, htmls):</span><br><span class=\"line\">        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;</span><br><span class=\"line\">        anchors = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for html in root_html:  # 将&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;一个一个提取出来</span><br><span class=\"line\">            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]</span><br><span class=\"line\">            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]</span><br><span class=\"line\">            anchor = &#123;&apos;name&apos;: name, &apos;number&apos;: number&#125; # 将name 和 number 对应起来，组成一个字典</span><br><span class=\"line\">            anchors.append(anchor) # 将这个字典添加到 anchors列表中</span><br><span class=\"line\">        return anchors</span><br><span class=\"line\"> </span><br><span class=\"line\">    # </span><br><span class=\"line\">    def __refine(self, anchors):</span><br><span class=\"line\">        l = lambda anchors: &#123;</span><br><span class=\"line\">            &apos;name&apos;: anchors[&apos;name&apos;][0],  #strip()  内置函数，去掉空格</span><br><span class=\"line\">            &apos;number&apos;: anchors[&apos;number&apos;][0]   # 取出字符串</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map(l, anchors)  #&#123;[&apos;name&apos;:&apos;xxx&apos;,&apos;number&apos;:&apos;yyy&apos;]&#125;,&#123;[&apos;name&apos;:&apos;xxx1&apos;,&apos;number&apos;:&apos;yyy1&apos;]&#125;...</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort(self, anchors):   #排序</span><br><span class=\"line\">        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序</span><br><span class=\"line\">        return anchors  #anchor[&apos;number&apos;]中的转为float格式，按转化后的数字大小进行排序</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort_seed(self, anchor):  # 排序调用的方法</span><br><span class=\"line\">        r = anchor[&apos;number&apos;]</span><br><span class=\"line\">        if &apos;万&apos; in r:</span><br><span class=\"line\">            r = r.strip(&apos;万&apos;)</span><br><span class=\"line\">            r = float(r)</span><br><span class=\"line\">            r *= 10000</span><br><span class=\"line\">        number = float(r)</span><br><span class=\"line\">        return number</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __show(self, anchors):  # 显示格式  </span><br><span class=\"line\">        time_stamp = datetime.datetime.now()</span><br><span class=\"line\">        b = str(time_stamp.strftime(&apos;%Y.%m.%d - %H:%M:%S&apos;) )</span><br><span class=\"line\">        with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;)</span><br><span class=\"line\">                f.write(b)</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;) </span><br><span class=\"line\">        for rank in range(0, len(anchors)):</span><br><span class=\"line\">            a = str((&apos;rank  &apos; + str(rank + 1) + &apos;    &apos;   #加排名，因为是从0开始</span><br><span class=\"line\">                                           &apos;主播姓名&apos; + &apos;:&apos; + anchors[rank][&apos;name&apos;] +</span><br><span class=\"line\">                  &apos;      &apos; + &apos;观看人数:&apos;+anchors[rank][&apos;number&apos;]))</span><br><span class=\"line\">            with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(a)</span><br><span class=\"line\">                f.write(&apos;\\n&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    def go(self):  #主方法</span><br><span class=\"line\">        htmls = self.__fetch_content()</span><br><span class=\"line\">        anchors = self.__analysis(htmls)</span><br><span class=\"line\">        anchors = list(self.__refine(anchors))</span><br><span class=\"line\">        anchors = self.__sort(anchors)</span><br><span class=\"line\">        self.__show(anchors)</span><br><span class=\"line\"> </span><br><span class=\"line\">spider = Spider()</span><br><span class=\"line\">spider.go()</span><br></pre></td></tr></table></figure></p>\n<p>附带本次成果<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = ‘<a href=\"https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\" target=\"_blank\" rel=\"noopener\">https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发布的时候nickname和number如图\"><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from urllib import request</span><br><span class=\"line\">import os</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">class Spider():</span><br><span class=\"line\">    url = &apos;https://www.panda.tv/all&apos;</span><br><span class=\"line\">    root_pattern =&apos;&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;&apos;  # 因为number和name均在其下</span><br><span class=\"line\">    name_pattern = &apos;&lt;span class=&quot;video-nickname&quot; title=&quot;([\\s\\S]*?)&quot;&gt;\\n&apos;</span><br><span class=\"line\">    number_pattern = &apos;&lt;span class=&quot;video-number&quot;&gt;&lt;i class=&quot;ricon ricon-eye&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;\\n&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 获取htmls数据</span><br><span class=\"line\">    def __fetch_content(self):</span><br><span class=\"line\">        r = request.Request(Spider.url)</span><br><span class=\"line\">        r.add_header(&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758&apos;)</span><br><span class=\"line\">        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法</span><br><span class=\"line\">        htmls = r.read()     # 读取</span><br><span class=\"line\">        htmls = str(htmls, encoding=&apos;utf-8&apos;)   # 转为str</span><br><span class=\"line\">        return htmls   </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立一个list为: [&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,...]</span><br><span class=\"line\">    def __analysis(self, htmls):</span><br><span class=\"line\">        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;</span><br><span class=\"line\">        anchors = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for html in root_html:  # 将&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;一个一个提取出来</span><br><span class=\"line\">            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]</span><br><span class=\"line\">            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]</span><br><span class=\"line\">            anchor = &#123;&apos;name&apos;: name, &apos;number&apos;: number&#125; # 将name 和 number 对应起来，组成一个字典</span><br><span class=\"line\">            anchors.append(anchor) # 将这个字典添加到 anchors列表中</span><br><span class=\"line\">        return anchors</span><br><span class=\"line\"> </span><br><span class=\"line\">    # </span><br><span class=\"line\">    def __refine(self, anchors):</span><br><span class=\"line\">        l = lambda anchors: &#123;</span><br><span class=\"line\">            &apos;name&apos;: anchors[&apos;name&apos;][0],  #strip()  内置函数，去掉空格</span><br><span class=\"line\">            &apos;number&apos;: anchors[&apos;number&apos;][0]   # 取出字符串</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map(l, anchors)  #&#123;[&apos;name&apos;:&apos;xxx&apos;,&apos;number&apos;:&apos;yyy&apos;]&#125;,&#123;[&apos;name&apos;:&apos;xxx1&apos;,&apos;number&apos;:&apos;yyy1&apos;]&#125;...</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort(self, anchors):   #排序</span><br><span class=\"line\">        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序</span><br><span class=\"line\">        return anchors  #anchor[&apos;number&apos;]中的转为float格式，按转化后的数字大小进行排序</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort_seed(self, anchor):  # 排序调用的方法</span><br><span class=\"line\">        r = anchor[&apos;number&apos;]</span><br><span class=\"line\">        if &apos;万&apos; in r:</span><br><span class=\"line\">            r = r.strip(&apos;万&apos;)</span><br><span class=\"line\">            r = float(r)</span><br><span class=\"line\">            r *= 10000</span><br><span class=\"line\">        number = float(r)</span><br><span class=\"line\">        return number</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __show(self, anchors):  # 显示格式  </span><br><span class=\"line\">        time_stamp = datetime.datetime.now()</span><br><span class=\"line\">        b = str(time_stamp.strftime(&apos;%Y.%m.%d - %H:%M:%S&apos;) )</span><br><span class=\"line\">        with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;)</span><br><span class=\"line\">                f.write(b)</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;) </span><br><span class=\"line\">        for rank in range(0, len(anchors)):</span><br><span class=\"line\">            a = str((&apos;rank  &apos; + str(rank + 1) + &apos;    &apos;   #加排名，因为是从0开始</span><br><span class=\"line\">                                           &apos;主播姓名&apos; + &apos;:&apos; + anchors[rank][&apos;name&apos;] +</span><br><span class=\"line\">                  &apos;      &apos; + &apos;观看人数:&apos;+anchors[rank][&apos;number&apos;]))</span><br><span class=\"line\">            with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(a)</span><br><span class=\"line\">                f.write(&apos;\\n&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    def go(self):  #主方法</span><br><span class=\"line\">        htmls = self.__fetch_content()</span><br><span class=\"line\">        anchors = self.__analysis(htmls)</span><br><span class=\"line\">        anchors = list(self.__refine(anchors))</span><br><span class=\"line\">        anchors = self.__sort(anchors)</span><br><span class=\"line\">        self.__show(anchors)</span><br><span class=\"line\"> </span><br><span class=\"line\">spider = Spider()</span><br><span class=\"line\">spider.go()</span><br></pre></td></tr></table></figure></p>\n<p>附带本次成果<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"pathlib模块","date":"2019-07-08T03:05:31.000Z","_content":"\n**面向对象的文件系统路径**\n\npathlib 提供表示文件系统路径的类，适用于不同的操作系统\n\n纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作\n```\nimport pathlib\nprint(pathlib.PurePath(__file__)) # 文件路径\nprint(pathlib.PurePath(__file__).match('*.py'))\nprint(pathlib.Path.cwd())  #  当前路径 （运行路径）\nprint(pathlib.Path.cwd().parent)  # 上一级\nprint(pathlib.Path.cwd().parent.parent)  # 上上级\n\n\nparts = ['first', 'second', 'third']\nprint(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径\n```\n\n**更多**\n```\nfrom pathlib import Path\nPath.iterdir() # 遍历目录的子目录或者文件\n\nPath.is_dir() # 判断是否是目录\n\nPath.glob() # 过滤目录(返回生成器)\n\nPath.resolve() # 返回绝对路径\n\nPath.exists() # 判断路径是否存在\n\nPath.open() # 打开文件(支持with)\n\nPath.unlink() # 删除文件或目录(目录非空触发异常)\n\n# 基本属性\nPath.parts # 分割路径 类似os.path.split(), 不过返回元组\n\nPath.drive # 返回驱动器名称\n\nPath.root # 返回路径的根目录\n\nPath.anchor # 自动判断返回drive或root\n\nPath.parents # 返回所有上级目录的列表\n\n# 改变路径\nPath.with_name() # 更改路径名称, 更改最后一级路径名\n\nPath.with_suffix() # 更改路径后缀\n\n#拼接路径\nPath.joinpath() # 拼接路径\n\nPath.relative_to() # 计算相对路径\n\n# 测试路径\nPath.match() # 测试路径是否符合pattern\n\nPath.is_dir() # 是否是文件\n\nPath.is_absolute() # 是否是绝对路径\n\nPath.is_reserved() # 是否是预留路径\n\nPath.exists() # 判断路径是否真实存在\n\n# 其他方法\nPath.cwd() # 返回当前目录的路径对象\n\nPath.home() # 返回当前用户的home路径对象\n\nPath.stat()  # 返回路径信息, 同os.stat()\n\nPath.chmod()  # 更改路径权限, 类似os.chmod()\n\nPath.expanduser() # 展开~返回完整路径对象\n\nPath.mkdir() # 创建目录\n\nPath.rename()  # 重命名路径\n\nPath.rglob()  # 递归遍历所有子目录的文件\n\n```\n","source":"_posts/python/pathlib有关文件路径.md","raw":"---\ntitle: pathlib模块\ndate: 2019-07-08 11:05:31\ntags:\ncategories: python练习\n---\n\n**面向对象的文件系统路径**\n\npathlib 提供表示文件系统路径的类，适用于不同的操作系统\n\n纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作\n```\nimport pathlib\nprint(pathlib.PurePath(__file__)) # 文件路径\nprint(pathlib.PurePath(__file__).match('*.py'))\nprint(pathlib.Path.cwd())  #  当前路径 （运行路径）\nprint(pathlib.Path.cwd().parent)  # 上一级\nprint(pathlib.Path.cwd().parent.parent)  # 上上级\n\n\nparts = ['first', 'second', 'third']\nprint(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径\n```\n\n**更多**\n```\nfrom pathlib import Path\nPath.iterdir() # 遍历目录的子目录或者文件\n\nPath.is_dir() # 判断是否是目录\n\nPath.glob() # 过滤目录(返回生成器)\n\nPath.resolve() # 返回绝对路径\n\nPath.exists() # 判断路径是否存在\n\nPath.open() # 打开文件(支持with)\n\nPath.unlink() # 删除文件或目录(目录非空触发异常)\n\n# 基本属性\nPath.parts # 分割路径 类似os.path.split(), 不过返回元组\n\nPath.drive # 返回驱动器名称\n\nPath.root # 返回路径的根目录\n\nPath.anchor # 自动判断返回drive或root\n\nPath.parents # 返回所有上级目录的列表\n\n# 改变路径\nPath.with_name() # 更改路径名称, 更改最后一级路径名\n\nPath.with_suffix() # 更改路径后缀\n\n#拼接路径\nPath.joinpath() # 拼接路径\n\nPath.relative_to() # 计算相对路径\n\n# 测试路径\nPath.match() # 测试路径是否符合pattern\n\nPath.is_dir() # 是否是文件\n\nPath.is_absolute() # 是否是绝对路径\n\nPath.is_reserved() # 是否是预留路径\n\nPath.exists() # 判断路径是否真实存在\n\n# 其他方法\nPath.cwd() # 返回当前目录的路径对象\n\nPath.home() # 返回当前用户的home路径对象\n\nPath.stat()  # 返回路径信息, 同os.stat()\n\nPath.chmod()  # 更改路径权限, 类似os.chmod()\n\nPath.expanduser() # 展开~返回完整路径对象\n\nPath.mkdir() # 创建目录\n\nPath.rename()  # 重命名路径\n\nPath.rglob()  # 递归遍历所有子目录的文件\n\n```\n","slug":"python/pathlib有关文件路径","published":1,"updated":"2020-04-10T16:46:16.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtue9002d74uxrq5vnpmi","content":"<p><strong>面向对象的文件系统路径</strong></p>\n<p>pathlib 提供表示文件系统路径的类，适用于不同的操作系统</p>\n<p>纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathlib</span><br><span class=\"line\">print(pathlib.PurePath(__file__)) # 文件路径</span><br><span class=\"line\">print(pathlib.PurePath(__file__).match(&apos;*.py&apos;))</span><br><span class=\"line\">print(pathlib.Path.cwd())  #  当前路径 （运行路径）</span><br><span class=\"line\">print(pathlib.Path.cwd().parent)  # 上一级</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.parent)  # 上上级</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parts = [&apos;first&apos;, &apos;second&apos;, &apos;third&apos;]</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pathlib import Path</span><br><span class=\"line\">Path.iterdir() # 遍历目录的子目录或者文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 判断是否是目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.glob() # 过滤目录(返回生成器)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.resolve() # 返回绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否存在</span><br><span class=\"line\"></span><br><span class=\"line\">Path.open() # 打开文件(支持with)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.unlink() # 删除文件或目录(目录非空触发异常)</span><br><span class=\"line\"></span><br><span class=\"line\"># 基本属性</span><br><span class=\"line\">Path.parts # 分割路径 类似os.path.split(), 不过返回元组</span><br><span class=\"line\"></span><br><span class=\"line\">Path.drive # 返回驱动器名称</span><br><span class=\"line\"></span><br><span class=\"line\">Path.root # 返回路径的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.anchor # 自动判断返回drive或root</span><br><span class=\"line\"></span><br><span class=\"line\">Path.parents # 返回所有上级目录的列表</span><br><span class=\"line\"></span><br><span class=\"line\"># 改变路径</span><br><span class=\"line\">Path.with_name() # 更改路径名称, 更改最后一级路径名</span><br><span class=\"line\"></span><br><span class=\"line\">Path.with_suffix() # 更改路径后缀</span><br><span class=\"line\"></span><br><span class=\"line\">#拼接路径</span><br><span class=\"line\">Path.joinpath() # 拼接路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.relative_to() # 计算相对路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试路径</span><br><span class=\"line\">Path.match() # 测试路径是否符合pattern</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 是否是文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_absolute() # 是否是绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_reserved() # 是否是预留路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否真实存在</span><br><span class=\"line\"></span><br><span class=\"line\"># 其他方法</span><br><span class=\"line\">Path.cwd() # 返回当前目录的路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.home() # 返回当前用户的home路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.stat()  # 返回路径信息, 同os.stat()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.chmod()  # 更改路径权限, 类似os.chmod()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.expanduser() # 展开~返回完整路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.mkdir() # 创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rename()  # 重命名路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rglob()  # 递归遍历所有子目录的文件</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>面向对象的文件系统路径</strong></p>\n<p>pathlib 提供表示文件系统路径的类，适用于不同的操作系统</p>\n<p>纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathlib</span><br><span class=\"line\">print(pathlib.PurePath(__file__)) # 文件路径</span><br><span class=\"line\">print(pathlib.PurePath(__file__).match(&apos;*.py&apos;))</span><br><span class=\"line\">print(pathlib.Path.cwd())  #  当前路径 （运行路径）</span><br><span class=\"line\">print(pathlib.Path.cwd().parent)  # 上一级</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.parent)  # 上上级</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parts = [&apos;first&apos;, &apos;second&apos;, &apos;third&apos;]</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pathlib import Path</span><br><span class=\"line\">Path.iterdir() # 遍历目录的子目录或者文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 判断是否是目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.glob() # 过滤目录(返回生成器)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.resolve() # 返回绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否存在</span><br><span class=\"line\"></span><br><span class=\"line\">Path.open() # 打开文件(支持with)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.unlink() # 删除文件或目录(目录非空触发异常)</span><br><span class=\"line\"></span><br><span class=\"line\"># 基本属性</span><br><span class=\"line\">Path.parts # 分割路径 类似os.path.split(), 不过返回元组</span><br><span class=\"line\"></span><br><span class=\"line\">Path.drive # 返回驱动器名称</span><br><span class=\"line\"></span><br><span class=\"line\">Path.root # 返回路径的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.anchor # 自动判断返回drive或root</span><br><span class=\"line\"></span><br><span class=\"line\">Path.parents # 返回所有上级目录的列表</span><br><span class=\"line\"></span><br><span class=\"line\"># 改变路径</span><br><span class=\"line\">Path.with_name() # 更改路径名称, 更改最后一级路径名</span><br><span class=\"line\"></span><br><span class=\"line\">Path.with_suffix() # 更改路径后缀</span><br><span class=\"line\"></span><br><span class=\"line\">#拼接路径</span><br><span class=\"line\">Path.joinpath() # 拼接路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.relative_to() # 计算相对路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试路径</span><br><span class=\"line\">Path.match() # 测试路径是否符合pattern</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 是否是文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_absolute() # 是否是绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_reserved() # 是否是预留路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否真实存在</span><br><span class=\"line\"></span><br><span class=\"line\"># 其他方法</span><br><span class=\"line\">Path.cwd() # 返回当前目录的路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.home() # 返回当前用户的home路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.stat()  # 返回路径信息, 同os.stat()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.chmod()  # 更改路径权限, 类似os.chmod()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.expanduser() # 展开~返回完整路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.mkdir() # 创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rename()  # 重命名路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rglob()  # 递归遍历所有子目录的文件</span><br></pre></td></tr></table></figure></p>\n"},{"title":"python判断是否json格式","date":"2019-10-09T03:05:31.000Z","_content":"\nis_json.py\n```\n#!/usr/bin/env python\n#-*-coding:utf-8-*-\nimport json\nimport sys\nimport os\nimport glob\n\nscript_path = os.path.split(os.path.realpath(__file__))[0]\ndef is_json(json_file):\n    try:\n        with open(json_file,'r') as f:\n            load_dict = json.load(f)\n            print(json_file +  ' True')\n    except Exception as e:\n        print(json_file +  ' ERROR')\n        print(e)\n\ndef json_list():\n    try:    \n        json_name = sys.argv[1]\n        json_list = []       \n        for json_name in sys.argv[1:]:\n            json_list.append(json_name)\n            \n    except:   \n        json_list = glob.glob(os.path.join(script_path,'*.json'))\n    return json_list\n\n[is_json(json_file) for json_file in json_list()]\n```","source":"_posts/python/is_json.md","raw":"---\ntitle: python判断是否json格式\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\nis_json.py\n```\n#!/usr/bin/env python\n#-*-coding:utf-8-*-\nimport json\nimport sys\nimport os\nimport glob\n\nscript_path = os.path.split(os.path.realpath(__file__))[0]\ndef is_json(json_file):\n    try:\n        with open(json_file,'r') as f:\n            load_dict = json.load(f)\n            print(json_file +  ' True')\n    except Exception as e:\n        print(json_file +  ' ERROR')\n        print(e)\n\ndef json_list():\n    try:    \n        json_name = sys.argv[1]\n        json_list = []       \n        for json_name in sys.argv[1:]:\n            json_list.append(json_name)\n            \n    except:   \n        json_list = glob.glob(os.path.join(script_path,'*.json'))\n    return json_list\n\n[is_json(json_file) for json_file in json_list()]\n```","slug":"python/is_json","published":1,"updated":"2020-04-10T16:46:16.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuee002f74ux0xdfwzst","content":"<p>is_json.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*-coding:utf-8-*-</span><br><span class=\"line\">import json</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">import glob</span><br><span class=\"line\"></span><br><span class=\"line\">script_path = os.path.split(os.path.realpath(__file__))[0]</span><br><span class=\"line\">def is_json(json_file):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with open(json_file,&apos;r&apos;) as f:</span><br><span class=\"line\">            load_dict = json.load(f)</span><br><span class=\"line\">            print(json_file +  &apos; True&apos;)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(json_file +  &apos; ERROR&apos;)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">def json_list():</span><br><span class=\"line\">    try:    </span><br><span class=\"line\">        json_name = sys.argv[1]</span><br><span class=\"line\">        json_list = []       </span><br><span class=\"line\">        for json_name in sys.argv[1:]:</span><br><span class=\"line\">            json_list.append(json_name)</span><br><span class=\"line\">            </span><br><span class=\"line\">    except:   </span><br><span class=\"line\">        json_list = glob.glob(os.path.join(script_path,&apos;*.json&apos;))</span><br><span class=\"line\">    return json_list</span><br><span class=\"line\"></span><br><span class=\"line\">[is_json(json_file) for json_file in json_list()]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>is_json.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*-coding:utf-8-*-</span><br><span class=\"line\">import json</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">import glob</span><br><span class=\"line\"></span><br><span class=\"line\">script_path = os.path.split(os.path.realpath(__file__))[0]</span><br><span class=\"line\">def is_json(json_file):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with open(json_file,&apos;r&apos;) as f:</span><br><span class=\"line\">            load_dict = json.load(f)</span><br><span class=\"line\">            print(json_file +  &apos; True&apos;)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(json_file +  &apos; ERROR&apos;)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">def json_list():</span><br><span class=\"line\">    try:    </span><br><span class=\"line\">        json_name = sys.argv[1]</span><br><span class=\"line\">        json_list = []       </span><br><span class=\"line\">        for json_name in sys.argv[1:]:</span><br><span class=\"line\">            json_list.append(json_name)</span><br><span class=\"line\">            </span><br><span class=\"line\">    except:   </span><br><span class=\"line\">        json_list = glob.glob(os.path.join(script_path,&apos;*.json&apos;))</span><br><span class=\"line\">    return json_list</span><br><span class=\"line\"></span><br><span class=\"line\">[is_json(json_file) for json_file in json_list()]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"psutil模块","date":"2019-07-09T03:05:31.000Z","_content":"\n# 三大模块\n1. System related function\n2. Processes\n3. Windows Service\n\n# 安装方法\n`pip install psutil`\n\n`pip install -user psutil `\n\n# 使用方法\n```\nimport psutil\n\n'''\n待探索\n'''\n# cpu 节选\npsutil.cpu_times() # 将系统cpu时间作为命名元组返回\npsutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比\npsutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率\npsutil.cpu_count()  # cpu 逻辑核心数\npsutil.cpu_count(logical=True) # cpu 物理核心数\n\n\nfor i in range(10):\n    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率\n\n# 内存节选\npsutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回\n\n# 当内存不足，发出提示\ndan = 300 * 1024 * 1024 # 单位为b\nif psutil.virtual_memory().available <= dan:\n    print('memory warning')\n\n# 进程信息\npsutil.pids()\n[p.info for p in psutil.process_iter(attrs=['pid', 'name']) if 'python' in p.info['name']]\n```\n\n# 更多\n单个进程信息\n```\np = psutil.Process(2423) \np.name()   #进程名\np.exe()    #进程的bin路径\np.cwd()    #进程的工作目录绝对路径\np.status()   #进程状态\np.create_time()  #进程创建时间\np.uids()    #进程uid信息\np.gids()    #进程的gid信息\np.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息\np.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好\np.memory_percent()  #进程内存利用率\np.memory_info()    #进程内存rss,vms信息\np.io_counters()    #进程的IO信息,包括读写IO数字及参数\np.connectios()   #返回进程列表\np.num_threads()  #进程开启的线程数\n听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息\nfrom subprocess import PIPE\np = psutil.Popen([\"/usr/bin/python\", \"-c\", \"print('hello')\"],stdout=PIPE)\np.name()\np.username()\n```\n\n# 获取开机时间\n```\npsutil.boot_time() # 时间戳\n\ndatetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(\"%Y-%m-%d %H: %M: %S\") #转换成自然时间格式\n``\n","source":"_posts/python/psutil获取系统运行的进程和系统利用率.md","raw":"---\ntitle: psutil模块\ndate: 2019-07-09 11:05:31\ntags:\ncategories: python练习\n---\n\n# 三大模块\n1. System related function\n2. Processes\n3. Windows Service\n\n# 安装方法\n`pip install psutil`\n\n`pip install -user psutil `\n\n# 使用方法\n```\nimport psutil\n\n'''\n待探索\n'''\n# cpu 节选\npsutil.cpu_times() # 将系统cpu时间作为命名元组返回\npsutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比\npsutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率\npsutil.cpu_count()  # cpu 逻辑核心数\npsutil.cpu_count(logical=True) # cpu 物理核心数\n\n\nfor i in range(10):\n    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率\n\n# 内存节选\npsutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回\n\n# 当内存不足，发出提示\ndan = 300 * 1024 * 1024 # 单位为b\nif psutil.virtual_memory().available <= dan:\n    print('memory warning')\n\n# 进程信息\npsutil.pids()\n[p.info for p in psutil.process_iter(attrs=['pid', 'name']) if 'python' in p.info['name']]\n```\n\n# 更多\n单个进程信息\n```\np = psutil.Process(2423) \np.name()   #进程名\np.exe()    #进程的bin路径\np.cwd()    #进程的工作目录绝对路径\np.status()   #进程状态\np.create_time()  #进程创建时间\np.uids()    #进程uid信息\np.gids()    #进程的gid信息\np.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息\np.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好\np.memory_percent()  #进程内存利用率\np.memory_info()    #进程内存rss,vms信息\np.io_counters()    #进程的IO信息,包括读写IO数字及参数\np.connectios()   #返回进程列表\np.num_threads()  #进程开启的线程数\n听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息\nfrom subprocess import PIPE\np = psutil.Popen([\"/usr/bin/python\", \"-c\", \"print('hello')\"],stdout=PIPE)\np.name()\np.username()\n```\n\n# 获取开机时间\n```\npsutil.boot_time() # 时间戳\n\ndatetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(\"%Y-%m-%d %H: %M: %S\") #转换成自然时间格式\n``\n","slug":"python/psutil获取系统运行的进程和系统利用率","published":1,"updated":"2020-04-10T16:46:16.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuek002j74ux7kk469d3","content":"<h1 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h1><ol>\n<li>System related function</li>\n<li>Processes</li>\n<li>Windows Service</li>\n</ol>\n<h1 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h1><p><code>pip install psutil</code></p>\n<p><code>pip install -user psutil</code></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import psutil</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">待探索</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># cpu 节选</span><br><span class=\"line\">psutil.cpu_times() # 将系统cpu时间作为命名元组返回</span><br><span class=\"line\">psutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比</span><br><span class=\"line\">psutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\">psutil.cpu_count()  # cpu 逻辑核心数</span><br><span class=\"line\">psutil.cpu_count(logical=True) # cpu 物理核心数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存节选</span><br><span class=\"line\">psutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回</span><br><span class=\"line\"></span><br><span class=\"line\"># 当内存不足，发出提示</span><br><span class=\"line\">dan = 300 * 1024 * 1024 # 单位为b</span><br><span class=\"line\">if psutil.virtual_memory().available &lt;= dan:</span><br><span class=\"line\">    print(&apos;memory warning&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程信息</span><br><span class=\"line\">psutil.pids()</span><br><span class=\"line\">[p.info for p in psutil.process_iter(attrs=[&apos;pid&apos;, &apos;name&apos;]) if &apos;python&apos; in p.info[&apos;name&apos;]]</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>单个进程信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = psutil.Process(2423) </span><br><span class=\"line\">p.name()   #进程名</span><br><span class=\"line\">p.exe()    #进程的bin路径</span><br><span class=\"line\">p.cwd()    #进程的工作目录绝对路径</span><br><span class=\"line\">p.status()   #进程状态</span><br><span class=\"line\">p.create_time()  #进程创建时间</span><br><span class=\"line\">p.uids()    #进程uid信息</span><br><span class=\"line\">p.gids()    #进程的gid信息</span><br><span class=\"line\">p.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息</span><br><span class=\"line\">p.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好</span><br><span class=\"line\">p.memory_percent()  #进程内存利用率</span><br><span class=\"line\">p.memory_info()    #进程内存rss,vms信息</span><br><span class=\"line\">p.io_counters()    #进程的IO信息,包括读写IO数字及参数</span><br><span class=\"line\">p.connectios()   #返回进程列表</span><br><span class=\"line\">p.num_threads()  #进程开启的线程数</span><br><span class=\"line\">听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息</span><br><span class=\"line\">from subprocess import PIPE</span><br><span class=\"line\">p = psutil.Popen([&quot;/usr/bin/python&quot;, &quot;-c&quot;, &quot;print(&apos;hello&apos;)&quot;],stdout=PIPE)</span><br><span class=\"line\">p.name()</span><br><span class=\"line\">p.username()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取开机时间\"><a href=\"#获取开机时间\" class=\"headerlink\" title=\"获取开机时间\"></a>获取开机时间</h1><p><code>`</code><br>psutil.boot_time() # 时间戳</p>\n<p>datetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(“%Y-%m-%d %H: %M: %S”) #转换成自然时间格式<br><code></code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h1><ol>\n<li>System related function</li>\n<li>Processes</li>\n<li>Windows Service</li>\n</ol>\n<h1 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h1><p><code>pip install psutil</code></p>\n<p><code>pip install -user psutil</code></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import psutil</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">待探索</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># cpu 节选</span><br><span class=\"line\">psutil.cpu_times() # 将系统cpu时间作为命名元组返回</span><br><span class=\"line\">psutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比</span><br><span class=\"line\">psutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\">psutil.cpu_count()  # cpu 逻辑核心数</span><br><span class=\"line\">psutil.cpu_count(logical=True) # cpu 物理核心数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存节选</span><br><span class=\"line\">psutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回</span><br><span class=\"line\"></span><br><span class=\"line\"># 当内存不足，发出提示</span><br><span class=\"line\">dan = 300 * 1024 * 1024 # 单位为b</span><br><span class=\"line\">if psutil.virtual_memory().available &lt;= dan:</span><br><span class=\"line\">    print(&apos;memory warning&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程信息</span><br><span class=\"line\">psutil.pids()</span><br><span class=\"line\">[p.info for p in psutil.process_iter(attrs=[&apos;pid&apos;, &apos;name&apos;]) if &apos;python&apos; in p.info[&apos;name&apos;]]</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>单个进程信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = psutil.Process(2423) </span><br><span class=\"line\">p.name()   #进程名</span><br><span class=\"line\">p.exe()    #进程的bin路径</span><br><span class=\"line\">p.cwd()    #进程的工作目录绝对路径</span><br><span class=\"line\">p.status()   #进程状态</span><br><span class=\"line\">p.create_time()  #进程创建时间</span><br><span class=\"line\">p.uids()    #进程uid信息</span><br><span class=\"line\">p.gids()    #进程的gid信息</span><br><span class=\"line\">p.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息</span><br><span class=\"line\">p.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好</span><br><span class=\"line\">p.memory_percent()  #进程内存利用率</span><br><span class=\"line\">p.memory_info()    #进程内存rss,vms信息</span><br><span class=\"line\">p.io_counters()    #进程的IO信息,包括读写IO数字及参数</span><br><span class=\"line\">p.connectios()   #返回进程列表</span><br><span class=\"line\">p.num_threads()  #进程开启的线程数</span><br><span class=\"line\">听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息</span><br><span class=\"line\">from subprocess import PIPE</span><br><span class=\"line\">p = psutil.Popen([&quot;/usr/bin/python&quot;, &quot;-c&quot;, &quot;print(&apos;hello&apos;)&quot;],stdout=PIPE)</span><br><span class=\"line\">p.name()</span><br><span class=\"line\">p.username()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取开机时间\"><a href=\"#获取开机时间\" class=\"headerlink\" title=\"获取开机时间\"></a>获取开机时间</h1><p><code>`</code><br>psutil.boot_time() # 时间戳</p>\n<p>datetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(“%Y-%m-%d %H: %M: %S”) #转换成自然时间格式<br><code></code></p>\n"},{"title":"python的一些技巧","date":"2019-07-09T03:05:31.000Z","_content":"## 变量\n[有关于变量](https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md)\n```\n\n\n\n1. 定义 `__str__` 方法的对象，可以使用 `str()` 函数 返回可读名称\n2. 定义 `__next__` 和 `__iter__` 方法的对象，就可以被循环迭代\n3. 定义 `__bool` 方法的对象，进行布尔值的判断时就会使用自定义的逻辑\n","source":"_posts/python/python一些规则.md","raw":"\n---\ntitle: python的一些技巧\ndate: 2019-07-09 11:05:31\ntags:\ncategories: python练习\n---\n## 变量\n[有关于变量](https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md)\n```\n\n\n\n1. 定义 `__str__` 方法的对象，可以使用 `str()` 函数 返回可读名称\n2. 定义 `__next__` 和 `__iter__` 方法的对象，就可以被循环迭代\n3. 定义 `__bool` 方法的对象，进行布尔值的判断时就会使用自定义的逻辑\n","slug":"python/python一些规则","published":1,"updated":"2020-04-10T16:46:16.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtueo002l74uxleq2imij","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><a href=\"https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md\" target=\"_blank\" rel=\"noopener\">有关于变量</a><br><code>`</code></p>\n<ol>\n<li>定义 <code>__str__</code> 方法的对象，可以使用 <code>str()</code> 函数 返回可读名称</li>\n<li>定义 <code>__next__</code> 和 <code>__iter__</code> 方法的对象，就可以被循环迭代</li>\n<li>定义 <code>__bool</code> 方法的对象，进行布尔值的判断时就会使用自定义的逻辑</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><a href=\"https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md\" target=\"_blank\" rel=\"noopener\">有关于变量</a><br><code>`</code></p>\n<ol>\n<li>定义 <code>__str__</code> 方法的对象，可以使用 <code>str()</code> 函数 返回可读名称</li>\n<li>定义 <code>__next__</code> 和 <code>__iter__</code> 方法的对象，就可以被循环迭代</li>\n<li>定义 <code>__bool</code> 方法的对象，进行布尔值的判断时就会使用自定义的逻辑</li>\n</ol>\n"},{"title":"python拾遗_函数","date":"2019-10-08T03:05:31.000Z","_content":"## 函数\n\n1. 函数有机会给一组语句命名\n2. 函数可以减少重复代码\n3. 一长段程序可以拆分为多个函数，组合起来使用\n4. 一次书写, 多次调用。\n\n\n在函数内部 **实参**会赋值给**形参**的变量\n\n```\ndef print_twice(x):\n    print(x)\n    print(x)\na = print_twice('haha')\na == None  # True # 没有return,返回None  只会实现函数作用\n```\n#### 增量开发\n每次只增加和测试一小部分代码，来避免长时间的调试过程\n\neg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。\n\n1. 圆的面积\n```\nimport math\ndef area(radius):\n    return math.pi * radius **2\na = area(2)  # a 等于return的值\nprint(area(2),a)\n```\n2. 圆的半径\n```\ndef distance(x1, y1, x2, y2):\n   '''\n   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的\n   '''\n   dx = x2 -x1\n   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值\n   dsquared = dx ** 2 + dy ** 2  \n   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除\n   return result\n```\n3. 计算结果\n```\nradius = distance(x1, y1, x2, y2)\nresult = area(radius)\n```\n封装成一个函数\n```\ndef circle_area(x1, y1, x2, y2):\n    radius = distance(x1, y1, x2, y2)\n    result = area(radius)\n    return result\n```\n简化  \n```\ndef circle_area(x1, y1, x2, y2):\n    return area(distance(x1, y1, x2, y2))\ncircle_area(0, 0, 2, 2)  # 25.132741228718352\n```\n\n### 递归\n调用自己的函数称为 **递归的函数**，执行过程称为**递归**\n\n无限递归,会在递归深度到上限时报错\n```\ndef recurse():\n    recurse()\nrecurse()  # RecursionError: maximum recursion depth exceeded\n```\n\n```\ndef print_n(s, n):\n    if n <= 0:\n        retrun\n    print(s)\n    print_n(s,n-1)\nprint_n('haha', 5)\n```\n\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    elif n <= 0:\n        print('haha')\n    else:\n        print(n)\n        countdown(n-1)\ncountdown(10000000000000)  \n```\n\nwhile 循环\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    while n > 0:\n        print(n)\n        n -= 1\n    print('haha')\ncountdown(10000000000000)  \n```\n\n```\nwhile 1:\n    line = input('>')\n    if line == 'done':\n        break   #  使用 break 退出循环\n    print(line)\n```\n","source":"_posts/python/python拾遗_函数.md","raw":"\n---\ntitle: python拾遗_函数\ndate: 2019-10-08 11:05:31\ntags:\ncategories: python练习\n---\n## 函数\n\n1. 函数有机会给一组语句命名\n2. 函数可以减少重复代码\n3. 一长段程序可以拆分为多个函数，组合起来使用\n4. 一次书写, 多次调用。\n\n\n在函数内部 **实参**会赋值给**形参**的变量\n\n```\ndef print_twice(x):\n    print(x)\n    print(x)\na = print_twice('haha')\na == None  # True # 没有return,返回None  只会实现函数作用\n```\n#### 增量开发\n每次只增加和测试一小部分代码，来避免长时间的调试过程\n\neg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。\n\n1. 圆的面积\n```\nimport math\ndef area(radius):\n    return math.pi * radius **2\na = area(2)  # a 等于return的值\nprint(area(2),a)\n```\n2. 圆的半径\n```\ndef distance(x1, y1, x2, y2):\n   '''\n   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的\n   '''\n   dx = x2 -x1\n   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值\n   dsquared = dx ** 2 + dy ** 2  \n   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除\n   return result\n```\n3. 计算结果\n```\nradius = distance(x1, y1, x2, y2)\nresult = area(radius)\n```\n封装成一个函数\n```\ndef circle_area(x1, y1, x2, y2):\n    radius = distance(x1, y1, x2, y2)\n    result = area(radius)\n    return result\n```\n简化  \n```\ndef circle_area(x1, y1, x2, y2):\n    return area(distance(x1, y1, x2, y2))\ncircle_area(0, 0, 2, 2)  # 25.132741228718352\n```\n\n### 递归\n调用自己的函数称为 **递归的函数**，执行过程称为**递归**\n\n无限递归,会在递归深度到上限时报错\n```\ndef recurse():\n    recurse()\nrecurse()  # RecursionError: maximum recursion depth exceeded\n```\n\n```\ndef print_n(s, n):\n    if n <= 0:\n        retrun\n    print(s)\n    print_n(s,n-1)\nprint_n('haha', 5)\n```\n\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    elif n <= 0:\n        print('haha')\n    else:\n        print(n)\n        countdown(n-1)\ncountdown(10000000000000)  \n```\n\nwhile 循环\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    while n > 0:\n        print(n)\n        n -= 1\n    print('haha')\ncountdown(10000000000000)  \n```\n\n```\nwhile 1:\n    line = input('>')\n    if line == 'done':\n        break   #  使用 break 退出循环\n    print(line)\n```\n","slug":"python/python拾遗_函数","published":1,"updated":"2020-04-10T16:46:16.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtueu002o74ux2dz4ibxz","content":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数有机会给一组语句命名</li>\n<li>函数可以减少重复代码</li>\n<li>一长段程序可以拆分为多个函数，组合起来使用</li>\n<li>一次书写, 多次调用。</li>\n</ol>\n<p>在函数内部 <strong>实参</strong>会赋值给<strong>形参</strong>的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_twice(x):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">a = print_twice(&apos;haha&apos;)</span><br><span class=\"line\">a == None  # True # 没有return,返回None  只会实现函数作用</span><br></pre></td></tr></table></figure>\n<h4 id=\"增量开发\"><a href=\"#增量开发\" class=\"headerlink\" title=\"增量开发\"></a>增量开发</h4><p>每次只增加和测试一小部分代码，来避免长时间的调试过程</p>\n<p>eg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。</p>\n<ol>\n<li><p>圆的面积</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">def area(radius):</span><br><span class=\"line\">    return math.pi * radius **2</span><br><span class=\"line\">a = area(2)  # a 等于return的值</span><br><span class=\"line\">print(area(2),a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>圆的半径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def distance(x1, y1, x2, y2):</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   dx = x2 -x1</span><br><span class=\"line\">   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值</span><br><span class=\"line\">   dsquared = dx ** 2 + dy ** 2  </span><br><span class=\"line\">   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除</span><br><span class=\"line\">   return result</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">result = area(radius)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>封装成一个函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">    result = area(radius)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<p>简化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    return area(distance(x1, y1, x2, y2))</span><br><span class=\"line\">circle_area(0, 0, 2, 2)  # 25.132741228718352</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>调用自己的函数称为 <strong>递归的函数</strong>，执行过程称为<strong>递归</strong></p>\n<p>无限递归,会在递归深度到上限时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def recurse():</span><br><span class=\"line\">    recurse()</span><br><span class=\"line\">recurse()  # RecursionError: maximum recursion depth exceeded</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_n(s, n):</span><br><span class=\"line\">    if n &lt;= 0:</span><br><span class=\"line\">        retrun</span><br><span class=\"line\">    print(s)</span><br><span class=\"line\">    print_n(s,n-1)</span><br><span class=\"line\">print_n(&apos;haha&apos;, 5)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    elif n &lt;= 0:</span><br><span class=\"line\">        print(&apos;haha&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        countdown(n-1)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure>\n<p>while 循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\">    print(&apos;haha&apos;)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 1:</span><br><span class=\"line\">    line = input(&apos;&gt;&apos;)</span><br><span class=\"line\">    if line == &apos;done&apos;:</span><br><span class=\"line\">        break   #  使用 break 退出循环</span><br><span class=\"line\">    print(line)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数有机会给一组语句命名</li>\n<li>函数可以减少重复代码</li>\n<li>一长段程序可以拆分为多个函数，组合起来使用</li>\n<li>一次书写, 多次调用。</li>\n</ol>\n<p>在函数内部 <strong>实参</strong>会赋值给<strong>形参</strong>的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_twice(x):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">a = print_twice(&apos;haha&apos;)</span><br><span class=\"line\">a == None  # True # 没有return,返回None  只会实现函数作用</span><br></pre></td></tr></table></figure>\n<h4 id=\"增量开发\"><a href=\"#增量开发\" class=\"headerlink\" title=\"增量开发\"></a>增量开发</h4><p>每次只增加和测试一小部分代码，来避免长时间的调试过程</p>\n<p>eg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。</p>\n<ol>\n<li><p>圆的面积</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">def area(radius):</span><br><span class=\"line\">    return math.pi * radius **2</span><br><span class=\"line\">a = area(2)  # a 等于return的值</span><br><span class=\"line\">print(area(2),a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>圆的半径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def distance(x1, y1, x2, y2):</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   dx = x2 -x1</span><br><span class=\"line\">   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值</span><br><span class=\"line\">   dsquared = dx ** 2 + dy ** 2  </span><br><span class=\"line\">   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除</span><br><span class=\"line\">   return result</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">result = area(radius)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>封装成一个函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">    result = area(radius)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<p>简化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    return area(distance(x1, y1, x2, y2))</span><br><span class=\"line\">circle_area(0, 0, 2, 2)  # 25.132741228718352</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>调用自己的函数称为 <strong>递归的函数</strong>，执行过程称为<strong>递归</strong></p>\n<p>无限递归,会在递归深度到上限时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def recurse():</span><br><span class=\"line\">    recurse()</span><br><span class=\"line\">recurse()  # RecursionError: maximum recursion depth exceeded</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_n(s, n):</span><br><span class=\"line\">    if n &lt;= 0:</span><br><span class=\"line\">        retrun</span><br><span class=\"line\">    print(s)</span><br><span class=\"line\">    print_n(s,n-1)</span><br><span class=\"line\">print_n(&apos;haha&apos;, 5)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    elif n &lt;= 0:</span><br><span class=\"line\">        print(&apos;haha&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        countdown(n-1)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure>\n<p>while 循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\">    print(&apos;haha&apos;)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 1:</span><br><span class=\"line\">    line = input(&apos;&gt;&apos;)</span><br><span class=\"line\">    if line == &apos;done&apos;:</span><br><span class=\"line\">        break   #  使用 break 退出循环</span><br><span class=\"line\">    print(line)</span><br></pre></td></tr></table></figure>\n"},{"title":"python列表操作","date":"2019-07-10T03:05:31.000Z","_content":"\n## 1、迭代列表，如何访问列表下标索引\n普通版：\n```\nitems = [8, 23, 45]\nfor index in range(len(items)):\n    print(index, \"-->\", items[index])\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n```\n优雅版：\n```\nfor index, item in enumerate(items):\n    print(index, \"-->\", item)\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n```\n`enumerate` 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：\n```\nfor index, item in enumerate(items, start=1):\n    print(index, \"-->\", item)\n\n>>>\n1 --> 8\n2 --> 23\n3 --> 45\n```\n## 2、append 与 extend 方法有什么区别\nappend表示把某个数据当做新元素追加到列表的最后面，它的参数可以是任意对象\n```\nx = [1, 2, 3]\ny = [4, 5]\nx.append(y)\nprint(x)\n\n>>>\n[1, 2, 3, [4, 5]]\n```\n`extend` 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面\n```\nx = [1, 2, 3]\ny = [4, 5]\nx.extend(y)\nprint(x)\n\n>>>\n[1, 2, 3, 4, 5]\n\n# 等价于：\nfor i in y:\n    x.append(i)\n```\n## 3、检查列表是否为空\n普通版：\n```\nif len(items) == 0:\n    print(\"空列表\")\n```\n或者\n```\nif items == []:\n    print(\"空列表\")\n```\n优雅版：\n```\nif not items:\n    print(\"空列表\")\n```\n\n## 4、如何理解切片\n切片用于获取列表中指定范围的子集，语法非常简单\n\n`items[start:end:step]`\n\n从 `start` 到 `end-1` 位置之间的元素。`step` 表示步长，默认为`1`，表示连续获取，如果 `step `为` 2` 就表示每隔一个元素获取。\n```\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n>>> a[3:8] # 第3到第8位置之间的元素\n[4, 5, 6, 7, 8]\n\n>>> a[3:8:2] # 第3到第8位置之间的元素，每隔一个元素获取\n[4, 6, 8]\n\n>>> a[:5]   # 省略start表示从第0个元素开始\n[1, 2, 3, 4, 5]\n\n>>> a[3:]  # 省略end表示到最后一个元素\n[4, 5, 6, 7, 8, 9, 10]\n\n>>> a[::]  # 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n## 5、如何拷贝一个列表对象\n第一种方法：\n```\nnew_list = old_list[:]\n```\n第二种方法：\n```\nnew_list = list(old_list)\n```\n第三种方法：\n```\nimport copy\n# 浅拷贝\nnew_list = copy.copy(old_list)\n# 深拷贝\nnew_list = copy.deepcopy(old_list)\n```\n## 6、如何获取列表中的最后一个元素\n索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。\n```\n>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> a[len(a)-1]\n10\n>>> a[-1]\n10\n```\n## 7、如何对列表进行排序\n列表排序有两种方式，一种是列表自带的方法 `list.sort()`，一种是内建函数 `sorted(list)`。复杂的数据类型可通过指定 key参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：\n\n```\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nitems.sort(key=lambda item: item.get(\"age\"))\n\nprint(items)\n\n>>>\n[{'age': 10, 'name': 'Bart'}, {'age': 20, 'name': 'cater'}, {'age': 39, 'name': 'Homer'}]\n```\n列表有` sort`方法，用于对原列表进行重新排序，指定` key` 参数，`key `是匿名函数，`item `是列表中的字典元素，我们根据字典中的`age`进行排序，默认是按升序排列，指定` reverse=True` 按降序排列\n```\nitems.sort(key=lambda item: item.get(\"age\"), reverse=True)\n\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'cater', 'age': 20}, {'name': 'Bart', 'age': 10}]\n```\n如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 `sorted `，该函数返回新列表\n```\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nnew_items = sorted(items, key=lambda item: item.get(\"age\"))\n\nprint(items)\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}]\n\nprint(new_items)\n>>>\n[{'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}, {'name': 'Homer', 'age': 39}]\n```\n## 8、如何移除列表中的元素\n删除列表中的元素有三种方式\n\n`remove` 移除某个元素，而且只能移除第一次出现的元素\n```\n>>> a = [0, 2, 2, 3]\n>>> a.remove(2)\n>>> a\n[0, 2, 3]\n\n# 如果要移除的元素不在列表中，则抛出 ValueError 异常\n>>> a.remove(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list·\ndel指令：根据指定的位置移除某元素\n\n>>> a = [3, 2, 2, 1]\n# 移除第一个元素\n>>> del a[1]\n[3, 2, 1]\n\n# 当超出列表的下表索引时，抛出IndexError的异常\n>>> del a[7]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\npop函数 与del 类似，但是 pop 函数可以返回移除的元素\n\n>>> a = [4, 3, 5]\n>>> a.pop(1)\n3\n>>> a\n[4, 5]\n\n# 同样，当超出列表的下表索引时，抛出IndexError的异常\n>>> a.pop(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop index out of range\n```\n## 9、如何连接两个列表\n```\nlistone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n\nmergedlist = listone + listtwo\n\nprint(mergelist)\n>>>\n[1, 2, 3, 4, 5, 6]\n```\n列表实现了 `+` 的运算符重载，使得 `+` 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的` __add__`操作，任何对象都可以实现 `+` 操作，例如：\n```\nclass User(object):\n    def __init__(self, age):\n        self.age = age\n\n    def __repr__(self):\n        return 'User(%d)' % self.age\n\n    def __add__(self, other):\n        age = self.age + other.age\n        return User(age)\n\nuser_a = User(10)\nuser_b = User(20)\n\nc = user_a + user_b\n\nprint(c)\n\n>>>\nUser(30)\n```\n\n## 10、如何随机获取列表中的某个元素\n```\nimport random\nitems = [8, 23, 45, 12, 78]\n\n>>> random.choice(items)\n78\n>>> random.choice(items)\n45\n>>> random.choice(items)\n12\n```\n[转载](https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&mid=2650371678&idx=1&sn=de791b0341e9075064b02124af1fe864&chksm=be9ccd0a89eb441c54837140cfa0c3070431dc2c4fa0fb8a64a91419dd7923490273dff305c8&mpshare=1&)\n","source":"_posts/python/python列表操作.md","raw":"\n---\ntitle: python列表操作\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## 1、迭代列表，如何访问列表下标索引\n普通版：\n```\nitems = [8, 23, 45]\nfor index in range(len(items)):\n    print(index, \"-->\", items[index])\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n```\n优雅版：\n```\nfor index, item in enumerate(items):\n    print(index, \"-->\", item)\n\n>>>\n0 --> 8\n1 --> 23\n2 --> 45\n```\n`enumerate` 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：\n```\nfor index, item in enumerate(items, start=1):\n    print(index, \"-->\", item)\n\n>>>\n1 --> 8\n2 --> 23\n3 --> 45\n```\n## 2、append 与 extend 方法有什么区别\nappend表示把某个数据当做新元素追加到列表的最后面，它的参数可以是任意对象\n```\nx = [1, 2, 3]\ny = [4, 5]\nx.append(y)\nprint(x)\n\n>>>\n[1, 2, 3, [4, 5]]\n```\n`extend` 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面\n```\nx = [1, 2, 3]\ny = [4, 5]\nx.extend(y)\nprint(x)\n\n>>>\n[1, 2, 3, 4, 5]\n\n# 等价于：\nfor i in y:\n    x.append(i)\n```\n## 3、检查列表是否为空\n普通版：\n```\nif len(items) == 0:\n    print(\"空列表\")\n```\n或者\n```\nif items == []:\n    print(\"空列表\")\n```\n优雅版：\n```\nif not items:\n    print(\"空列表\")\n```\n\n## 4、如何理解切片\n切片用于获取列表中指定范围的子集，语法非常简单\n\n`items[start:end:step]`\n\n从 `start` 到 `end-1` 位置之间的元素。`step` 表示步长，默认为`1`，表示连续获取，如果 `step `为` 2` 就表示每隔一个元素获取。\n```\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n>>> a[3:8] # 第3到第8位置之间的元素\n[4, 5, 6, 7, 8]\n\n>>> a[3:8:2] # 第3到第8位置之间的元素，每隔一个元素获取\n[4, 6, 8]\n\n>>> a[:5]   # 省略start表示从第0个元素开始\n[1, 2, 3, 4, 5]\n\n>>> a[3:]  # 省略end表示到最后一个元素\n[4, 5, 6, 7, 8, 9, 10]\n\n>>> a[::]  # 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n## 5、如何拷贝一个列表对象\n第一种方法：\n```\nnew_list = old_list[:]\n```\n第二种方法：\n```\nnew_list = list(old_list)\n```\n第三种方法：\n```\nimport copy\n# 浅拷贝\nnew_list = copy.copy(old_list)\n# 深拷贝\nnew_list = copy.deepcopy(old_list)\n```\n## 6、如何获取列表中的最后一个元素\n索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。\n```\n>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> a[len(a)-1]\n10\n>>> a[-1]\n10\n```\n## 7、如何对列表进行排序\n列表排序有两种方式，一种是列表自带的方法 `list.sort()`，一种是内建函数 `sorted(list)`。复杂的数据类型可通过指定 key参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：\n\n```\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nitems.sort(key=lambda item: item.get(\"age\"))\n\nprint(items)\n\n>>>\n[{'age': 10, 'name': 'Bart'}, {'age': 20, 'name': 'cater'}, {'age': 39, 'name': 'Homer'}]\n```\n列表有` sort`方法，用于对原列表进行重新排序，指定` key` 参数，`key `是匿名函数，`item `是列表中的字典元素，我们根据字典中的`age`进行排序，默认是按升序排列，指定` reverse=True` 按降序排列\n```\nitems.sort(key=lambda item: item.get(\"age\"), reverse=True)\n\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'cater', 'age': 20}, {'name': 'Bart', 'age': 10}]\n```\n如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 `sorted `，该函数返回新列表\n```\nitems = [{'name': 'Homer', 'age': 39},\n         {'name': 'Bart', 'age': 10},\n         {\"name\": 'cater', 'age': 20}]\n\nnew_items = sorted(items, key=lambda item: item.get(\"age\"))\n\nprint(items)\n>>>\n[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}]\n\nprint(new_items)\n>>>\n[{'name': 'Bart', 'age': 10}, {'name': 'cater', 'age': 20}, {'name': 'Homer', 'age': 39}]\n```\n## 8、如何移除列表中的元素\n删除列表中的元素有三种方式\n\n`remove` 移除某个元素，而且只能移除第一次出现的元素\n```\n>>> a = [0, 2, 2, 3]\n>>> a.remove(2)\n>>> a\n[0, 2, 3]\n\n# 如果要移除的元素不在列表中，则抛出 ValueError 异常\n>>> a.remove(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list·\ndel指令：根据指定的位置移除某元素\n\n>>> a = [3, 2, 2, 1]\n# 移除第一个元素\n>>> del a[1]\n[3, 2, 1]\n\n# 当超出列表的下表索引时，抛出IndexError的异常\n>>> del a[7]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\npop函数 与del 类似，但是 pop 函数可以返回移除的元素\n\n>>> a = [4, 3, 5]\n>>> a.pop(1)\n3\n>>> a\n[4, 5]\n\n# 同样，当超出列表的下表索引时，抛出IndexError的异常\n>>> a.pop(7)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: pop index out of range\n```\n## 9、如何连接两个列表\n```\nlistone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n\nmergedlist = listone + listtwo\n\nprint(mergelist)\n>>>\n[1, 2, 3, 4, 5, 6]\n```\n列表实现了 `+` 的运算符重载，使得 `+` 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的` __add__`操作，任何对象都可以实现 `+` 操作，例如：\n```\nclass User(object):\n    def __init__(self, age):\n        self.age = age\n\n    def __repr__(self):\n        return 'User(%d)' % self.age\n\n    def __add__(self, other):\n        age = self.age + other.age\n        return User(age)\n\nuser_a = User(10)\nuser_b = User(20)\n\nc = user_a + user_b\n\nprint(c)\n\n>>>\nUser(30)\n```\n\n## 10、如何随机获取列表中的某个元素\n```\nimport random\nitems = [8, 23, 45, 12, 78]\n\n>>> random.choice(items)\n78\n>>> random.choice(items)\n45\n>>> random.choice(items)\n12\n```\n[转载](https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&mid=2650371678&idx=1&sn=de791b0341e9075064b02124af1fe864&chksm=be9ccd0a89eb441c54837140cfa0c3070431dc2c4fa0fb8a64a91419dd7923490273dff305c8&mpshare=1&)\n","slug":"python/python列表操作","published":1,"updated":"2020-04-10T16:46:16.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuey002p74uxyvfcc52t","content":"<h2 id=\"1、迭代列表，如何访问列表下标索引\"><a href=\"#1、迭代列表，如何访问列表下标索引\" class=\"headerlink\" title=\"1、迭代列表，如何访问列表下标索引\"></a>1、迭代列表，如何访问列表下标索引</h2><p>普通版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [8, 23, 45]</span><br><span class=\"line\">for index in range(len(items)):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, items[index])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">0 --&gt; 8</span><br><span class=\"line\">1 --&gt; 23</span><br><span class=\"line\">2 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<p>优雅版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for index, item in enumerate(items):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, item)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">0 --&gt; 8</span><br><span class=\"line\">1 --&gt; 23</span><br><span class=\"line\">2 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<p><code>enumerate</code> 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for index, item in enumerate(items, start=1):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, item)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">1 --&gt; 8</span><br><span class=\"line\">2 --&gt; 23</span><br><span class=\"line\">3 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、append-与-extend-方法有什么区别\"><a href=\"#2、append-与-extend-方法有什么区别\" class=\"headerlink\" title=\"2、append 与 extend 方法有什么区别\"></a>2、append 与 extend 方法有什么区别</h2><p>append表示把某个数据当做新元素追加到列表的最后面，它的参数可以是任意对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = [4, 5]</span><br><span class=\"line\">x.append(y)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, [4, 5]]</span><br></pre></td></tr></table></figure></p>\n<p><code>extend</code> 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = [4, 5]</span><br><span class=\"line\">x.extend(y)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于：</span><br><span class=\"line\">for i in y:</span><br><span class=\"line\">    x.append(i)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、检查列表是否为空\"><a href=\"#3、检查列表是否为空\" class=\"headerlink\" title=\"3、检查列表是否为空\"></a>3、检查列表是否为空</h2><p>普通版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if len(items) == 0:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if items == []:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>优雅版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if not items:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、如何理解切片\"><a href=\"#4、如何理解切片\" class=\"headerlink\" title=\"4、如何理解切片\"></a>4、如何理解切片</h2><p>切片用于获取列表中指定范围的子集，语法非常简单</p>\n<p><code>items[start:end:step]</code></p>\n<p>从 <code>start</code> 到 <code>end-1</code> 位置之间的元素。<code>step</code> 表示步长，默认为<code>1</code>，表示连续获取，如果 <code>step</code>为<code>2</code> 就表示每隔一个元素获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:8] # 第3到第8位置之间的元素</span><br><span class=\"line\">[4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:8:2] # 第3到第8位置之间的元素，每隔一个元素获取</span><br><span class=\"line\">[4, 6, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[:5]   # 省略start表示从第0个元素开始</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:]  # 省略end表示到最后一个元素</span><br><span class=\"line\">[4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[::]  # 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5、如何拷贝一个列表对象\"><a href=\"#5、如何拷贝一个列表对象\" class=\"headerlink\" title=\"5、如何拷贝一个列表对象\"></a>5、如何拷贝一个列表对象</h2><p>第一种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_list = old_list[:]</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_list = list(old_list)</span><br></pre></td></tr></table></figure></p>\n<p>第三种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\"># 浅拷贝</span><br><span class=\"line\">new_list = copy.copy(old_list)</span><br><span class=\"line\"># 深拷贝</span><br><span class=\"line\">new_list = copy.deepcopy(old_list)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6、如何获取列表中的最后一个元素\"><a href=\"#6、如何获取列表中的最后一个元素\" class=\"headerlink\" title=\"6、如何获取列表中的最后一个元素\"></a>6、如何获取列表中的最后一个元素</h2><p>索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\">&gt;&gt;&gt; a[len(a)-1]</span><br><span class=\"line\">10</span><br><span class=\"line\">&gt;&gt;&gt; a[-1]</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7、如何对列表进行排序\"><a href=\"#7、如何对列表进行排序\" class=\"headerlink\" title=\"7、如何对列表进行排序\"></a>7、如何对列表进行排序</h2><p>列表排序有两种方式，一种是列表自带的方法 <code>list.sort()</code>，一种是内建函数 <code>sorted(list)</code>。复杂的数据类型可通过指定 key参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;,</span><br><span class=\"line\">         &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;,</span><br><span class=\"line\">         &#123;&quot;name&quot;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">items.sort(key=lambda item: item.get(&quot;age&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;Bart&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;cater&apos;&#125;, &#123;&apos;age&apos;: 39, &apos;name&apos;: &apos;Homer&apos;&#125;]</span><br></pre></td></tr></table></figure>\n<p>列表有<code>sort</code>方法，用于对原列表进行重新排序，指定<code>key</code> 参数，<code>key</code>是匿名函数，<code>item</code>是列表中的字典元素，我们根据字典中的<code>age</code>进行排序，默认是按升序排列，指定<code>reverse=True</code> 按降序排列<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items.sort(key=lambda item: item.get(&quot;age&quot;), reverse=True)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;, &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 <code>sorted</code>，该函数返回新列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;,</span><br><span class=\"line\">         &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;,</span><br><span class=\"line\">         &#123;&quot;name&quot;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">new_items = sorted(items, key=lambda item: item.get(&quot;age&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;, &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(new_items)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;, &#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8、如何移除列表中的元素\"><a href=\"#8、如何移除列表中的元素\" class=\"headerlink\" title=\"8、如何移除列表中的元素\"></a>8、如何移除列表中的元素</h2><p>删除列表中的元素有三种方式</p>\n<p><code>remove</code> 移除某个元素，而且只能移除第一次出现的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = [0, 2, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; a.remove(2)</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[0, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果要移除的元素不在列表中，则抛出 ValueError 异常</span><br><span class=\"line\">&gt;&gt;&gt; a.remove(7)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">ValueError: list.remove(x): x not in list·</span><br><span class=\"line\">del指令：根据指定的位置移除某元素</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = [3, 2, 2, 1]</span><br><span class=\"line\"># 移除第一个元素</span><br><span class=\"line\">&gt;&gt;&gt; del a[1]</span><br><span class=\"line\">[3, 2, 1]</span><br><span class=\"line\"></span><br><span class=\"line\"># 当超出列表的下表索引时，抛出IndexError的异常</span><br><span class=\"line\">&gt;&gt;&gt; del a[7]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">IndexError: list assignment index out of range</span><br><span class=\"line\">pop函数 与del 类似，但是 pop 函数可以返回移除的元素</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = [4, 3, 5]</span><br><span class=\"line\">&gt;&gt;&gt; a.pop(1)</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\"># 同样，当超出列表的下表索引时，抛出IndexError的异常</span><br><span class=\"line\">&gt;&gt;&gt; a.pop(7)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">IndexError: pop index out of range</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9、如何连接两个列表\"><a href=\"#9、如何连接两个列表\" class=\"headerlink\" title=\"9、如何连接两个列表\"></a>9、如何连接两个列表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listone = [1, 2, 3]</span><br><span class=\"line\">listtwo = [4, 5, 6]</span><br><span class=\"line\"></span><br><span class=\"line\">mergedlist = listone + listtwo</span><br><span class=\"line\"></span><br><span class=\"line\">print(mergelist)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n<p>列表实现了 <code>+</code> 的运算符重载，使得 <code>+</code> 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的<code>__add__</code>操作，任何对象都可以实现 <code>+</code> 操作，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(object):</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;User(%d)&apos; % self.age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        age = self.age + other.age</span><br><span class=\"line\">        return User(age)</span><br><span class=\"line\"></span><br><span class=\"line\">user_a = User(10)</span><br><span class=\"line\">user_b = User(20)</span><br><span class=\"line\"></span><br><span class=\"line\">c = user_a + user_b</span><br><span class=\"line\"></span><br><span class=\"line\">print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">User(30)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10、如何随机获取列表中的某个元素\"><a href=\"#10、如何随机获取列表中的某个元素\" class=\"headerlink\" title=\"10、如何随机获取列表中的某个元素\"></a>10、如何随机获取列表中的某个元素</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">items = [8, 23, 45, 12, 78]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">78</span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">45</span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&amp;mid=2650371678&amp;idx=1&amp;sn=de791b0341e9075064b02124af1fe864&amp;chksm=be9ccd0a89eb441c54837140cfa0c3070431dc2c4fa0fb8a64a91419dd7923490273dff305c8&amp;mpshare=1&amp;\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、迭代列表，如何访问列表下标索引\"><a href=\"#1、迭代列表，如何访问列表下标索引\" class=\"headerlink\" title=\"1、迭代列表，如何访问列表下标索引\"></a>1、迭代列表，如何访问列表下标索引</h2><p>普通版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [8, 23, 45]</span><br><span class=\"line\">for index in range(len(items)):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, items[index])</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">0 --&gt; 8</span><br><span class=\"line\">1 --&gt; 23</span><br><span class=\"line\">2 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<p>优雅版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for index, item in enumerate(items):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, item)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">0 --&gt; 8</span><br><span class=\"line\">1 --&gt; 23</span><br><span class=\"line\">2 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<p><code>enumerate</code> 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for index, item in enumerate(items, start=1):</span><br><span class=\"line\">    print(index, &quot;--&gt;&quot;, item)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">1 --&gt; 8</span><br><span class=\"line\">2 --&gt; 23</span><br><span class=\"line\">3 --&gt; 45</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、append-与-extend-方法有什么区别\"><a href=\"#2、append-与-extend-方法有什么区别\" class=\"headerlink\" title=\"2、append 与 extend 方法有什么区别\"></a>2、append 与 extend 方法有什么区别</h2><p>append表示把某个数据当做新元素追加到列表的最后面，它的参数可以是任意对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = [4, 5]</span><br><span class=\"line\">x.append(y)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, [4, 5]]</span><br></pre></td></tr></table></figure></p>\n<p><code>extend</code> 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = [4, 5]</span><br><span class=\"line\">x.extend(y)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\"># 等价于：</span><br><span class=\"line\">for i in y:</span><br><span class=\"line\">    x.append(i)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3、检查列表是否为空\"><a href=\"#3、检查列表是否为空\" class=\"headerlink\" title=\"3、检查列表是否为空\"></a>3、检查列表是否为空</h2><p>普通版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if len(items) == 0:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if items == []:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>优雅版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if not items:</span><br><span class=\"line\">    print(&quot;空列表&quot;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4、如何理解切片\"><a href=\"#4、如何理解切片\" class=\"headerlink\" title=\"4、如何理解切片\"></a>4、如何理解切片</h2><p>切片用于获取列表中指定范围的子集，语法非常简单</p>\n<p><code>items[start:end:step]</code></p>\n<p>从 <code>start</code> 到 <code>end-1</code> 位置之间的元素。<code>step</code> 表示步长，默认为<code>1</code>，表示连续获取，如果 <code>step</code>为<code>2</code> 就表示每隔一个元素获取。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:8] # 第3到第8位置之间的元素</span><br><span class=\"line\">[4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:8:2] # 第3到第8位置之间的元素，每隔一个元素获取</span><br><span class=\"line\">[4, 6, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[:5]   # 省略start表示从第0个元素开始</span><br><span class=\"line\">[1, 2, 3, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[3:]  # 省略end表示到最后一个元素</span><br><span class=\"line\">[4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a[::]  # 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5、如何拷贝一个列表对象\"><a href=\"#5、如何拷贝一个列表对象\" class=\"headerlink\" title=\"5、如何拷贝一个列表对象\"></a>5、如何拷贝一个列表对象</h2><p>第一种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_list = old_list[:]</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_list = list(old_list)</span><br></pre></td></tr></table></figure></p>\n<p>第三种方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\"># 浅拷贝</span><br><span class=\"line\">new_list = copy.copy(old_list)</span><br><span class=\"line\"># 深拷贝</span><br><span class=\"line\">new_list = copy.deepcopy(old_list)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6、如何获取列表中的最后一个元素\"><a href=\"#6、如何获取列表中的最后一个元素\" class=\"headerlink\" title=\"6、如何获取列表中的最后一个元素\"></a>6、如何获取列表中的最后一个元素</h2><p>索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class=\"line\">&gt;&gt;&gt; a[len(a)-1]</span><br><span class=\"line\">10</span><br><span class=\"line\">&gt;&gt;&gt; a[-1]</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7、如何对列表进行排序\"><a href=\"#7、如何对列表进行排序\" class=\"headerlink\" title=\"7、如何对列表进行排序\"></a>7、如何对列表进行排序</h2><p>列表排序有两种方式，一种是列表自带的方法 <code>list.sort()</code>，一种是内建函数 <code>sorted(list)</code>。复杂的数据类型可通过指定 key参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;,</span><br><span class=\"line\">         &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;,</span><br><span class=\"line\">         &#123;&quot;name&quot;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">items.sort(key=lambda item: item.get(&quot;age&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;age&apos;: 10, &apos;name&apos;: &apos;Bart&apos;&#125;, &#123;&apos;age&apos;: 20, &apos;name&apos;: &apos;cater&apos;&#125;, &#123;&apos;age&apos;: 39, &apos;name&apos;: &apos;Homer&apos;&#125;]</span><br></pre></td></tr></table></figure>\n<p>列表有<code>sort</code>方法，用于对原列表进行重新排序，指定<code>key</code> 参数，<code>key</code>是匿名函数，<code>item</code>是列表中的字典元素，我们根据字典中的<code>age</code>进行排序，默认是按升序排列，指定<code>reverse=True</code> 按降序排列<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items.sort(key=lambda item: item.get(&quot;age&quot;), reverse=True)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;, &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 <code>sorted</code>，该函数返回新列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;,</span><br><span class=\"line\">         &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;,</span><br><span class=\"line\">         &#123;&quot;name&quot;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">new_items = sorted(items, key=lambda item: item.get(&quot;age&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;, &#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(new_items)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[&#123;&apos;name&apos;: &apos;Bart&apos;, &apos;age&apos;: 10&#125;, &#123;&apos;name&apos;: &apos;cater&apos;, &apos;age&apos;: 20&#125;, &#123;&apos;name&apos;: &apos;Homer&apos;, &apos;age&apos;: 39&#125;]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8、如何移除列表中的元素\"><a href=\"#8、如何移除列表中的元素\" class=\"headerlink\" title=\"8、如何移除列表中的元素\"></a>8、如何移除列表中的元素</h2><p>删除列表中的元素有三种方式</p>\n<p><code>remove</code> 移除某个元素，而且只能移除第一次出现的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = [0, 2, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; a.remove(2)</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[0, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果要移除的元素不在列表中，则抛出 ValueError 异常</span><br><span class=\"line\">&gt;&gt;&gt; a.remove(7)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">ValueError: list.remove(x): x not in list·</span><br><span class=\"line\">del指令：根据指定的位置移除某元素</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = [3, 2, 2, 1]</span><br><span class=\"line\"># 移除第一个元素</span><br><span class=\"line\">&gt;&gt;&gt; del a[1]</span><br><span class=\"line\">[3, 2, 1]</span><br><span class=\"line\"></span><br><span class=\"line\"># 当超出列表的下表索引时，抛出IndexError的异常</span><br><span class=\"line\">&gt;&gt;&gt; del a[7]</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">IndexError: list assignment index out of range</span><br><span class=\"line\">pop函数 与del 类似，但是 pop 函数可以返回移除的元素</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = [4, 3, 5]</span><br><span class=\"line\">&gt;&gt;&gt; a.pop(1)</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\"># 同样，当超出列表的下表索引时，抛出IndexError的异常</span><br><span class=\"line\">&gt;&gt;&gt; a.pop(7)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">IndexError: pop index out of range</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9、如何连接两个列表\"><a href=\"#9、如何连接两个列表\" class=\"headerlink\" title=\"9、如何连接两个列表\"></a>9、如何连接两个列表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listone = [1, 2, 3]</span><br><span class=\"line\">listtwo = [4, 5, 6]</span><br><span class=\"line\"></span><br><span class=\"line\">mergedlist = listone + listtwo</span><br><span class=\"line\"></span><br><span class=\"line\">print(mergelist)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n<p>列表实现了 <code>+</code> 的运算符重载，使得 <code>+</code> 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的<code>__add__</code>操作，任何对象都可以实现 <code>+</code> 操作，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(object):</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;User(%d)&apos; % self.age</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        age = self.age + other.age</span><br><span class=\"line\">        return User(age)</span><br><span class=\"line\"></span><br><span class=\"line\">user_a = User(10)</span><br><span class=\"line\">user_b = User(20)</span><br><span class=\"line\"></span><br><span class=\"line\">c = user_a + user_b</span><br><span class=\"line\"></span><br><span class=\"line\">print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">User(30)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"10、如何随机获取列表中的某个元素\"><a href=\"#10、如何随机获取列表中的某个元素\" class=\"headerlink\" title=\"10、如何随机获取列表中的某个元素\"></a>10、如何随机获取列表中的某个元素</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">items = [8, 23, 45, 12, 78]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">78</span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">45</span><br><span class=\"line\">&gt;&gt;&gt; random.choice(items)</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&amp;mid=2650371678&amp;idx=1&amp;sn=de791b0341e9075064b02124af1fe864&amp;chksm=be9ccd0a89eb441c54837140cfa0c3070431dc2c4fa0fb8a64a91419dd7923490273dff305c8&amp;mpshare=1&amp;\" target=\"_blank\" rel=\"noopener\">转载</a></p>\n"},{"title":"杂","date":"2019-07-06T03:05:31.000Z","_content":"\n\n\n**python中变量名   指向的  是 对象的地址，不是对象的值**\n","source":"_posts/python/readme.md","raw":"---\ntitle: 杂\ndate: 2019-07-06 11:05:31\ntags:\ncategories: python\n---\n\n\n\n**python中变量名   指向的  是 对象的地址，不是对象的值**\n","slug":"python/readme","published":1,"updated":"2020-04-10T16:46:16.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuf4002s74uxg0rqvhgn","content":"<p><strong>python中变量名   指向的  是 对象的地址，不是对象的值</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>python中变量名   指向的  是 对象的地址，不是对象的值</strong></p>\n"},{"title":"python的日志模块","date":"2019-07-10T03:05:31.000Z","_content":"\n## 日志概述\n1. 日志会记录下操作，运行的一些相关内容\n2. 查看日志是获取信息，排查异常，发现问题的最好途径\n3. 日志可在控制台显示，也可以记录到文件中，或者同时输出\n4. 日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分\n5. python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。\n\n```\nDEBUG : 详细信息一般只在调试问题时使用\nINFO : 事情按预期进行\nWARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。\nERROR : 更严重的问题，软件的一部分功能已不能被执行\nCRITICAL ： 严重错误，表明软件不能继续运行\n```\n6. logging 的四大组件\n```\n日志器  Logger     提供了应用程序一直使用的接口\n处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出\n过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n格式器  Formatter  决定日志记录的最终输出格式\n\nlogger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理\n```\n\n## 日志输出\n### 输出到控制台\npython 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。\n```\nimport logging\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\nlogging 提供 basciConfig 让使用者可以适时调整默认日志级别\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n### 输出到文件\n在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    filename='test.log',\n                    filemode='a')\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n## 同时输出到文件及控制器\n[对比](https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py)\n```\nimport os\nimport logging\nimport uuid\nfrom logging import Handler, FileHandler, StreamHandler\n\n\nclass PathFileHandler(FileHandler):\n    def __init__(self, path, filename, mode = 'a', encoding = None, delay = False):\n        filename = os.fspath(filename)\n        if not os.path.exists(path):\n            os.mkdir(path)\n        self.baseFilename = os.path.join(path, filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay =delay\n        if delay:\n            Handler.__init__(self)\n            self.stream = None\n        else:\n            StreamHandler.__init__(self, self._open())\n\n\nclass Loggers():\n    level_relations = {\n        'debug' : logging.DEBUG, 'info' : logging.INFO, 'warning' : logging.WARNING,\n        'error' : logging.ERROR, 'critical' : logging.CRITICAL\n    }\n    uid = uuid.uuid4()\n    def __init__(self, filename = f'{uid}.log', level = 'info', log_dir = 'log',\n                 fmt = \"[%(asctime)s] [%(levelname)8s]  %(message)s\"\n                 ):\n        self.logger =logging.getLogger(filename)\n        abspath = os.path.dirname(os.path.abspath(__file__))\n        self.directory = os.path.join(abspath, log_dir)\n        format_str = logging.Formatter(fmt)\n        self.logger.setLevel(self.level_relations.get(level))\n        stream_handler = logging.StreamHandler()\n        stream_handler.setFormatter(format_str)\n        file_handler = PathFileHandler(path=self.directory, filename=filename, mode='a')\n        file_handler.setFormatter(format_str)\n        self.logger.addHandler(stream_handler)\n        self.logger.addHandler(file_handler)\n\n\nif __name__ == '__main__':\n    text = 'hahaha'\n    log = Loggers(level='debug')\n    log.logger.info(4)\n    log.logger.info(5)\n    log.logger.info(text)\n```\n\n","source":"_posts/python/python日志模块.md","raw":"\n---\ntitle: python的日志模块\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## 日志概述\n1. 日志会记录下操作，运行的一些相关内容\n2. 查看日志是获取信息，排查异常，发现问题的最好途径\n3. 日志可在控制台显示，也可以记录到文件中，或者同时输出\n4. 日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分\n5. python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。\n\n```\nDEBUG : 详细信息一般只在调试问题时使用\nINFO : 事情按预期进行\nWARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。\nERROR : 更严重的问题，软件的一部分功能已不能被执行\nCRITICAL ： 严重错误，表明软件不能继续运行\n```\n6. logging 的四大组件\n```\n日志器  Logger     提供了应用程序一直使用的接口\n处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出\n过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n格式器  Formatter  决定日志记录的最终输出格式\n\nlogger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理\n```\n\n## 日志输出\n### 输出到控制台\npython 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。\n```\nimport logging\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\nlogging 提供 basciConfig 让使用者可以适时调整默认日志级别\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n### 输出到文件\n在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    filename='test.log',\n                    filemode='a')\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n## 同时输出到文件及控制器\n[对比](https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py)\n```\nimport os\nimport logging\nimport uuid\nfrom logging import Handler, FileHandler, StreamHandler\n\n\nclass PathFileHandler(FileHandler):\n    def __init__(self, path, filename, mode = 'a', encoding = None, delay = False):\n        filename = os.fspath(filename)\n        if not os.path.exists(path):\n            os.mkdir(path)\n        self.baseFilename = os.path.join(path, filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay =delay\n        if delay:\n            Handler.__init__(self)\n            self.stream = None\n        else:\n            StreamHandler.__init__(self, self._open())\n\n\nclass Loggers():\n    level_relations = {\n        'debug' : logging.DEBUG, 'info' : logging.INFO, 'warning' : logging.WARNING,\n        'error' : logging.ERROR, 'critical' : logging.CRITICAL\n    }\n    uid = uuid.uuid4()\n    def __init__(self, filename = f'{uid}.log', level = 'info', log_dir = 'log',\n                 fmt = \"[%(asctime)s] [%(levelname)8s]  %(message)s\"\n                 ):\n        self.logger =logging.getLogger(filename)\n        abspath = os.path.dirname(os.path.abspath(__file__))\n        self.directory = os.path.join(abspath, log_dir)\n        format_str = logging.Formatter(fmt)\n        self.logger.setLevel(self.level_relations.get(level))\n        stream_handler = logging.StreamHandler()\n        stream_handler.setFormatter(format_str)\n        file_handler = PathFileHandler(path=self.directory, filename=filename, mode='a')\n        file_handler.setFormatter(format_str)\n        self.logger.addHandler(stream_handler)\n        self.logger.addHandler(file_handler)\n\n\nif __name__ == '__main__':\n    text = 'hahaha'\n    log = Loggers(level='debug')\n    log.logger.info(4)\n    log.logger.info(5)\n    log.logger.info(text)\n```\n\n","slug":"python/python日志模块","published":1,"updated":"2020-04-10T16:46:16.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuf7002t74uxz0wduk1k","content":"<h2 id=\"日志概述\"><a href=\"#日志概述\" class=\"headerlink\" title=\"日志概述\"></a>日志概述</h2><ol>\n<li>日志会记录下操作，运行的一些相关内容</li>\n<li>查看日志是获取信息，排查异常，发现问题的最好途径</li>\n<li>日志可在控制台显示，也可以记录到文件中，或者同时输出</li>\n<li>日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分</li>\n<li>python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG : 详细信息一般只在调试问题时使用</span><br><span class=\"line\">INFO : 事情按预期进行</span><br><span class=\"line\">WARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。</span><br><span class=\"line\">ERROR : 更严重的问题，软件的一部分功能已不能被执行</span><br><span class=\"line\">CRITICAL ： 严重错误，表明软件不能继续运行</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>logging 的四大组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志器  Logger     提供了应用程序一直使用的接口</span><br><span class=\"line\">处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出</span><br><span class=\"line\">过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</span><br><span class=\"line\">格式器  Formatter  决定日志记录的最终输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">logger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日志输出\"><a href=\"#日志输出\" class=\"headerlink\" title=\"日志输出\"></a>日志输出</h2><h3 id=\"输出到控制台\"><a href=\"#输出到控制台\" class=\"headerlink\" title=\"输出到控制台\"></a>输出到控制台</h3><p>python 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>logging 提供 basciConfig 让使用者可以适时调整默认日志级别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h3><p>在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG,</span><br><span class=\"line\">                    filename=&apos;test.log&apos;,</span><br><span class=\"line\">                    filemode=&apos;a&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"同时输出到文件及控制器\"><a href=\"#同时输出到文件及控制器\" class=\"headerlink\" title=\"同时输出到文件及控制器\"></a>同时输出到文件及控制器</h2><p><a href=\"https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py\" target=\"_blank\" rel=\"noopener\">对比</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import uuid</span><br><span class=\"line\">from logging import Handler, FileHandler, StreamHandler</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PathFileHandler(FileHandler):</span><br><span class=\"line\">    def __init__(self, path, filename, mode = &apos;a&apos;, encoding = None, delay = False):</span><br><span class=\"line\">        filename = os.fspath(filename)</span><br><span class=\"line\">        if not os.path.exists(path):</span><br><span class=\"line\">            os.mkdir(path)</span><br><span class=\"line\">        self.baseFilename = os.path.join(path, filename)</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\">        self.encoding = encoding</span><br><span class=\"line\">        self.delay =delay</span><br><span class=\"line\">        if delay:</span><br><span class=\"line\">            Handler.__init__(self)</span><br><span class=\"line\">            self.stream = None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            StreamHandler.__init__(self, self._open())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Loggers():</span><br><span class=\"line\">    level_relations = &#123;</span><br><span class=\"line\">        &apos;debug&apos; : logging.DEBUG, &apos;info&apos; : logging.INFO, &apos;warning&apos; : logging.WARNING,</span><br><span class=\"line\">        &apos;error&apos; : logging.ERROR, &apos;critical&apos; : logging.CRITICAL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    uid = uuid.uuid4()</span><br><span class=\"line\">    def __init__(self, filename = f&apos;&#123;uid&#125;.log&apos;, level = &apos;info&apos;, log_dir = &apos;log&apos;,</span><br><span class=\"line\">                 fmt = &quot;[%(asctime)s] [%(levelname)8s]  %(message)s&quot;</span><br><span class=\"line\">                 ):</span><br><span class=\"line\">        self.logger =logging.getLogger(filename)</span><br><span class=\"line\">        abspath = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">        self.directory = os.path.join(abspath, log_dir)</span><br><span class=\"line\">        format_str = logging.Formatter(fmt)</span><br><span class=\"line\">        self.logger.setLevel(self.level_relations.get(level))</span><br><span class=\"line\">        stream_handler = logging.StreamHandler()</span><br><span class=\"line\">        stream_handler.setFormatter(format_str)</span><br><span class=\"line\">        file_handler = PathFileHandler(path=self.directory, filename=filename, mode=&apos;a&apos;)</span><br><span class=\"line\">        file_handler.setFormatter(format_str)</span><br><span class=\"line\">        self.logger.addHandler(stream_handler)</span><br><span class=\"line\">        self.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    text = &apos;hahaha&apos;</span><br><span class=\"line\">    log = Loggers(level=&apos;debug&apos;)</span><br><span class=\"line\">    log.logger.info(4)</span><br><span class=\"line\">    log.logger.info(5)</span><br><span class=\"line\">    log.logger.info(text)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日志概述\"><a href=\"#日志概述\" class=\"headerlink\" title=\"日志概述\"></a>日志概述</h2><ol>\n<li>日志会记录下操作，运行的一些相关内容</li>\n<li>查看日志是获取信息，排查异常，发现问题的最好途径</li>\n<li>日志可在控制台显示，也可以记录到文件中，或者同时输出</li>\n<li>日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分</li>\n<li>python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG : 详细信息一般只在调试问题时使用</span><br><span class=\"line\">INFO : 事情按预期进行</span><br><span class=\"line\">WARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。</span><br><span class=\"line\">ERROR : 更严重的问题，软件的一部分功能已不能被执行</span><br><span class=\"line\">CRITICAL ： 严重错误，表明软件不能继续运行</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>logging 的四大组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志器  Logger     提供了应用程序一直使用的接口</span><br><span class=\"line\">处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出</span><br><span class=\"line\">过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</span><br><span class=\"line\">格式器  Formatter  决定日志记录的最终输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">logger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日志输出\"><a href=\"#日志输出\" class=\"headerlink\" title=\"日志输出\"></a>日志输出</h2><h3 id=\"输出到控制台\"><a href=\"#输出到控制台\" class=\"headerlink\" title=\"输出到控制台\"></a>输出到控制台</h3><p>python 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>logging 提供 basciConfig 让使用者可以适时调整默认日志级别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h3><p>在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG,</span><br><span class=\"line\">                    filename=&apos;test.log&apos;,</span><br><span class=\"line\">                    filemode=&apos;a&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"同时输出到文件及控制器\"><a href=\"#同时输出到文件及控制器\" class=\"headerlink\" title=\"同时输出到文件及控制器\"></a>同时输出到文件及控制器</h2><p><a href=\"https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py\" target=\"_blank\" rel=\"noopener\">对比</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import uuid</span><br><span class=\"line\">from logging import Handler, FileHandler, StreamHandler</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PathFileHandler(FileHandler):</span><br><span class=\"line\">    def __init__(self, path, filename, mode = &apos;a&apos;, encoding = None, delay = False):</span><br><span class=\"line\">        filename = os.fspath(filename)</span><br><span class=\"line\">        if not os.path.exists(path):</span><br><span class=\"line\">            os.mkdir(path)</span><br><span class=\"line\">        self.baseFilename = os.path.join(path, filename)</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\">        self.encoding = encoding</span><br><span class=\"line\">        self.delay =delay</span><br><span class=\"line\">        if delay:</span><br><span class=\"line\">            Handler.__init__(self)</span><br><span class=\"line\">            self.stream = None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            StreamHandler.__init__(self, self._open())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Loggers():</span><br><span class=\"line\">    level_relations = &#123;</span><br><span class=\"line\">        &apos;debug&apos; : logging.DEBUG, &apos;info&apos; : logging.INFO, &apos;warning&apos; : logging.WARNING,</span><br><span class=\"line\">        &apos;error&apos; : logging.ERROR, &apos;critical&apos; : logging.CRITICAL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    uid = uuid.uuid4()</span><br><span class=\"line\">    def __init__(self, filename = f&apos;&#123;uid&#125;.log&apos;, level = &apos;info&apos;, log_dir = &apos;log&apos;,</span><br><span class=\"line\">                 fmt = &quot;[%(asctime)s] [%(levelname)8s]  %(message)s&quot;</span><br><span class=\"line\">                 ):</span><br><span class=\"line\">        self.logger =logging.getLogger(filename)</span><br><span class=\"line\">        abspath = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">        self.directory = os.path.join(abspath, log_dir)</span><br><span class=\"line\">        format_str = logging.Formatter(fmt)</span><br><span class=\"line\">        self.logger.setLevel(self.level_relations.get(level))</span><br><span class=\"line\">        stream_handler = logging.StreamHandler()</span><br><span class=\"line\">        stream_handler.setFormatter(format_str)</span><br><span class=\"line\">        file_handler = PathFileHandler(path=self.directory, filename=filename, mode=&apos;a&apos;)</span><br><span class=\"line\">        file_handler.setFormatter(format_str)</span><br><span class=\"line\">        self.logger.addHandler(stream_handler)</span><br><span class=\"line\">        self.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    text = &apos;hahaha&apos;</span><br><span class=\"line\">    log = Loggers(level=&apos;debug&apos;)</span><br><span class=\"line\">    log.logger.info(4)</span><br><span class=\"line\">    log.logger.info(5)</span><br><span class=\"line\">    log.logger.info(text)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"关于import","date":"2019-07-08T03:05:31.000Z","_content":"```\nimport sys\nsys.path.append(\"..\") # 将上层目录加入路径.\nsys.path.append(\"/home\") # 将/home 加入路径.\n\n\n## 一个模块只能被导入一次\nfrom imp import *\nreload(sys) # 重新导入某模块\n```","source":"_posts/python/关于import路径.md","raw":"---\ntitle: 关于import\ndate: 2019-07-08 11:05:31\ntags:\ncategories: python练习\n---\n```\nimport sys\nsys.path.append(\"..\") # 将上层目录加入路径.\nsys.path.append(\"/home\") # 将/home 加入路径.\n\n\n## 一个模块只能被导入一次\nfrom imp import *\nreload(sys) # 重新导入某模块\n```","slug":"python/关于import路径","published":1,"updated":"2020-04-10T16:46:16.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtufc002w74ux29o3r52l","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.append(&quot;..&quot;) # 将上层目录加入路径.</span><br><span class=\"line\">sys.path.append(&quot;/home&quot;) # 将/home 加入路径.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 一个模块只能被导入一次</span><br><span class=\"line\">from imp import *</span><br><span class=\"line\">reload(sys) # 重新导入某模块</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.append(&quot;..&quot;) # 将上层目录加入路径.</span><br><span class=\"line\">sys.path.append(&quot;/home&quot;) # 将/home 加入路径.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 一个模块只能被导入一次</span><br><span class=\"line\">from imp import *</span><br><span class=\"line\">reload(sys) # 重新导入某模块</span><br></pre></td></tr></table></figure>"},{"title":"python里的一些函数","date":"2019-10-09T03:05:31.000Z","_content":"\n[参考](https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/)\n\n## 1. lambda 函数 （匿名函数）\n没有函数名的函数\n```\nx = lambda a,b : a*b\nprint(x(2,3))\n```\n## 2. Map 函数\nMap() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素\n```\nx = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])\nprint(x)  # <map object at 0x00000255474D24A8>  迭代器\nprint(list(x))  # [3, 7, 11, 15, 19] \n```\n## 3. filter 函数\n与 map()类似，但只返回True的元素\n```\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef filter_odd_numbers(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \nfiltered_numbers = filter(filter_odd_numbers, numbers)\nprint(filtered_numbers) # <filter object at 0x00000237EFD62438> \nprint(list(filtered_numbers))  # [2, 4, 6, 8]\n```\n## 4. any(),all()\n```\nx = [0, 2, 1]\nprint(all(x))  # False\nprint(any(x))  # True\n```\n## 5. zip()\nzip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表\n```\nkeys = ['a', 'b', 'c', 'd', 'e']\nvalues = [1, 2, 3, 3]\nzipped = dict(zip(keys, values))\nprint(zipped)  #  {'a': 1, 'b': 2, 'c': 3, 'd': 3}\n\nd = {k:v for k,v in zip(zipped.values(),zipped.keys())}\nprint(d)  # {1: 'a', 2: 'b', 3: 'd'}\n\n# 根据字典值的大小，对字典的项从大到小排序\nprint(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # {3: 'd', 2: 'b', 1: 'a'}\n```\n","source":"_posts/python/python的一些函数.md","raw":"---\ntitle: python里的一些函数\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n[参考](https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/)\n\n## 1. lambda 函数 （匿名函数）\n没有函数名的函数\n```\nx = lambda a,b : a*b\nprint(x(2,3))\n```\n## 2. Map 函数\nMap() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素\n```\nx = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])\nprint(x)  # <map object at 0x00000255474D24A8>  迭代器\nprint(list(x))  # [3, 7, 11, 15, 19] \n```\n## 3. filter 函数\n与 map()类似，但只返回True的元素\n```\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef filter_odd_numbers(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \nfiltered_numbers = filter(filter_odd_numbers, numbers)\nprint(filtered_numbers) # <filter object at 0x00000237EFD62438> \nprint(list(filtered_numbers))  # [2, 4, 6, 8]\n```\n## 4. any(),all()\n```\nx = [0, 2, 1]\nprint(all(x))  # False\nprint(any(x))  # True\n```\n## 5. zip()\nzip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表\n```\nkeys = ['a', 'b', 'c', 'd', 'e']\nvalues = [1, 2, 3, 3]\nzipped = dict(zip(keys, values))\nprint(zipped)  #  {'a': 1, 'b': 2, 'c': 3, 'd': 3}\n\nd = {k:v for k,v in zip(zipped.values(),zipped.keys())}\nprint(d)  # {1: 'a', 2: 'b', 3: 'd'}\n\n# 根据字典值的大小，对字典的项从大到小排序\nprint(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # {3: 'd', 2: 'b', 1: 'a'}\n```\n","slug":"python/python的一些函数","published":1,"updated":"2020-04-10T16:46:16.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtufi002x74uxqjnql9er","content":"<p><a href=\"https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h2 id=\"1-lambda-函数-（匿名函数）\"><a href=\"#1-lambda-函数-（匿名函数）\" class=\"headerlink\" title=\"1. lambda 函数 （匿名函数）\"></a>1. lambda 函数 （匿名函数）</h2><p>没有函数名的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = lambda a,b : a*b</span><br><span class=\"line\">print(x(2,3))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Map-函数\"><a href=\"#2-Map-函数\" class=\"headerlink\" title=\"2. Map 函数\"></a>2. Map 函数</h2><p>Map() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])</span><br><span class=\"line\">print(x)  # &lt;map object at 0x00000255474D24A8&gt;  迭代器</span><br><span class=\"line\">print(list(x))  # [3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-filter-函数\"><a href=\"#3-filter-函数\" class=\"headerlink\" title=\"3. filter 函数\"></a>3. filter 函数</h2><p>与 map()类似，但只返回True的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">def filter_odd_numbers(num):</span><br><span class=\"line\">    if num % 2 == 0:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">        </span><br><span class=\"line\">filtered_numbers = filter(filter_odd_numbers, numbers)</span><br><span class=\"line\">print(filtered_numbers) # &lt;filter object at 0x00000237EFD62438&gt; </span><br><span class=\"line\">print(list(filtered_numbers))  # [2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-any-all\"><a href=\"#4-any-all\" class=\"headerlink\" title=\"4. any(),all()\"></a>4. any(),all()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [0, 2, 1]</span><br><span class=\"line\">print(all(x))  # False</span><br><span class=\"line\">print(any(x))  # True</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-zip\"><a href=\"#5-zip\" class=\"headerlink\" title=\"5. zip()\"></a>5. zip()</h2><p>zip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">values = [1, 2, 3, 3]</span><br><span class=\"line\">zipped = dict(zip(keys, values))</span><br><span class=\"line\">print(zipped)  #  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;k:v for k,v in zip(zipped.values(),zipped.keys())&#125;</span><br><span class=\"line\">print(d)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;d&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据字典值的大小，对字典的项从大到小排序</span><br><span class=\"line\">print(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # &#123;3: &apos;d&apos;, 2: &apos;b&apos;, 1: &apos;a&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h2 id=\"1-lambda-函数-（匿名函数）\"><a href=\"#1-lambda-函数-（匿名函数）\" class=\"headerlink\" title=\"1. lambda 函数 （匿名函数）\"></a>1. lambda 函数 （匿名函数）</h2><p>没有函数名的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = lambda a,b : a*b</span><br><span class=\"line\">print(x(2,3))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Map-函数\"><a href=\"#2-Map-函数\" class=\"headerlink\" title=\"2. Map 函数\"></a>2. Map 函数</h2><p>Map() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])</span><br><span class=\"line\">print(x)  # &lt;map object at 0x00000255474D24A8&gt;  迭代器</span><br><span class=\"line\">print(list(x))  # [3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-filter-函数\"><a href=\"#3-filter-函数\" class=\"headerlink\" title=\"3. filter 函数\"></a>3. filter 函数</h2><p>与 map()类似，但只返回True的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">def filter_odd_numbers(num):</span><br><span class=\"line\">    if num % 2 == 0:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">        </span><br><span class=\"line\">filtered_numbers = filter(filter_odd_numbers, numbers)</span><br><span class=\"line\">print(filtered_numbers) # &lt;filter object at 0x00000237EFD62438&gt; </span><br><span class=\"line\">print(list(filtered_numbers))  # [2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-any-all\"><a href=\"#4-any-all\" class=\"headerlink\" title=\"4. any(),all()\"></a>4. any(),all()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [0, 2, 1]</span><br><span class=\"line\">print(all(x))  # False</span><br><span class=\"line\">print(any(x))  # True</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-zip\"><a href=\"#5-zip\" class=\"headerlink\" title=\"5. zip()\"></a>5. zip()</h2><p>zip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">values = [1, 2, 3, 3]</span><br><span class=\"line\">zipped = dict(zip(keys, values))</span><br><span class=\"line\">print(zipped)  #  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;k:v for k,v in zip(zipped.values(),zipped.keys())&#125;</span><br><span class=\"line\">print(d)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;d&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据字典值的大小，对字典的项从大到小排序</span><br><span class=\"line\">print(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # &#123;3: &apos;d&apos;, 2: &apos;b&apos;, 1: &apos;a&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"优雅的python写法","date":"2019-07-11T03:05:31.000Z","_content":"\n# 学习python cook book 有感\n\n## 1. 交换变量\n```\na, b = b, a \n```\n## 2. 循环遍历区间\n```\nfor i in range(6):\n    print (i)\n```    \n## 3. 带有索引位置的集合遍历\n```\nfor i, color in enumerate(colors):\n    print (i ,colors[i])\n```\n## 4. 字符串拼接\n```\nprint '. ' .join(names)  \n'''\njoin 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象\n'''\n```\n现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）\n## 5. 打开/关闭文件\n```\nwith open ('xxx.xxx','r') as f:\n    data = f.read()\n```   \n## 6. 列表推导式\n```\n[i for i in range(10)]\n```\n## 7. 善用装饰器\n```\n'''\n装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用\nurl 曾使用过直接从cache读出，没有的话存到saved中\n'''\nimport urllib.request as urllib\n\ndef cache(func):\n    saved = {}\n    \n    def wrapper(url):\n        if url in saved:\n            return saved[url]\n        else:\n            page = func(url)\n            saved[url] = page\n            return page\n        \n        return wrapper \n        \n@cache\ndef web_lookup(url):\n    return urllib.urlopen(url).read()\n```\n## 8. 合理使用列表\n```\n'''\nlist是一个查询效率高于更新操作的数据结构,\n删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动\n'''\nfrom collections import deque\nnames = deque([1, 2, 3, 4, 'haha'])\nnames.popleft()\nnames.appendleft('mark')\n\n'''\ndeque 是一个双向队列的数据结构，删除元素和插入元素会很快\n'''\n```\n## 9. 序列解包\n```\np = '1' ,  '2' , '3' , 4 \na, b, c, d, = p\n```\n\n## 10. 遍历字典的 key 和 value\n```\ndict ={1:'haha',2:'xixi'}\nfor key, value in dict.items():\n    print(key ,' + ', value)\n'''\ndict.items 返回迭代器对象，可节省更多的内存\n'''\n```\n## 11. 链式比较操作\n```\nage = 18\nif 18 < age < 60:\n    print('young man')\n    \nFalse == True == True == True\n# False \n```\n## 12. if/else\n```\ntext = '男' if gender == 'male' else '女'\n```\n## 13. True/Fales 值判断\n```\nif a:\n    do_someting()\nif b:\n    do_someting()\n'''\na,b 的值有就是True, 没有就是False\n'''\n```\n## 14. 字符串格式化\n```\na,b = 'haha', [1,2,3]\ns = f'str is {a}, list is {b}' \n'''\n不支持python2\n'''\n```\n## 15. 列表切片\n```\nitems = range(10)\nsub_items = items[1:4]  # 取第1号到第4号元素\nodd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）\ncopy_items = items[::]  # 或者 items[:]\n```\n## 16. 善用生成器\n```\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        yeild a \n        a ,b = b, a + b\n'''\n生成器的好处是无需一次性把所有元素加载到内存，\n只有迭代获取元素时才返回该元素，\n而列表是预先一次性把全部元素加载到内存中\n遇到 yield 会暂停执行另一个函数\n'''\n```\n# 17. 获取字典元素\n```\nd = {'name':'foo'}\nd.get('name','unknow')\nd.get('age','unknow')\n```\n# 18. 预设字典默认值\n```\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n\nfrom collections import defaultdict\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n```\n\n## 19 字典/列表/集合 推导式\n```\nnumbers = [1, 2, 3, 4]\nmy_dict = {number: number*2 for number in numbers}\nprint(my_dict)\n```\n\n## 20. for/else\n'''\npython 特有的语法格式，else中的代码在for 循环完所有元素成后执行\n'''\n```\nflagfound = False\nmylist = [1, 2, 3, 'theflag', 4, 5, 6]\nfor i in mylist:\n    if i == 'theflag':\n        flagfound = True\n        break\n    print(i)    \nelse:\n    raisd ValueError('list argument missing terminal flag')\n```\n## 21 一些特性\n### 给数字加\\_分组并不影响实际\n```\na = 11_22_33_44\nerror = 0xbad_c0ffee\n```\n### 将类型注释添加到函数和方法中\n```\ndef my_add(a:str,b:int) -> str:\n    return a + b\nmy_add(1,2)\n```\n### 直接操作数字\n```\nPI =3.141592653\nf'PI is {PI:.4f}'\n```\n","source":"_posts/python/优雅的python写法.md","raw":"\n---\ntitle: 优雅的python写法\ndate: 2019-07-11 11:05:31\ntags:\ncategories: python练习\n---\n\n# 学习python cook book 有感\n\n## 1. 交换变量\n```\na, b = b, a \n```\n## 2. 循环遍历区间\n```\nfor i in range(6):\n    print (i)\n```    \n## 3. 带有索引位置的集合遍历\n```\nfor i, color in enumerate(colors):\n    print (i ,colors[i])\n```\n## 4. 字符串拼接\n```\nprint '. ' .join(names)  \n'''\njoin 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象\n'''\n```\n现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）\n## 5. 打开/关闭文件\n```\nwith open ('xxx.xxx','r') as f:\n    data = f.read()\n```   \n## 6. 列表推导式\n```\n[i for i in range(10)]\n```\n## 7. 善用装饰器\n```\n'''\n装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用\nurl 曾使用过直接从cache读出，没有的话存到saved中\n'''\nimport urllib.request as urllib\n\ndef cache(func):\n    saved = {}\n    \n    def wrapper(url):\n        if url in saved:\n            return saved[url]\n        else:\n            page = func(url)\n            saved[url] = page\n            return page\n        \n        return wrapper \n        \n@cache\ndef web_lookup(url):\n    return urllib.urlopen(url).read()\n```\n## 8. 合理使用列表\n```\n'''\nlist是一个查询效率高于更新操作的数据结构,\n删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动\n'''\nfrom collections import deque\nnames = deque([1, 2, 3, 4, 'haha'])\nnames.popleft()\nnames.appendleft('mark')\n\n'''\ndeque 是一个双向队列的数据结构，删除元素和插入元素会很快\n'''\n```\n## 9. 序列解包\n```\np = '1' ,  '2' , '3' , 4 \na, b, c, d, = p\n```\n\n## 10. 遍历字典的 key 和 value\n```\ndict ={1:'haha',2:'xixi'}\nfor key, value in dict.items():\n    print(key ,' + ', value)\n'''\ndict.items 返回迭代器对象，可节省更多的内存\n'''\n```\n## 11. 链式比较操作\n```\nage = 18\nif 18 < age < 60:\n    print('young man')\n    \nFalse == True == True == True\n# False \n```\n## 12. if/else\n```\ntext = '男' if gender == 'male' else '女'\n```\n## 13. True/Fales 值判断\n```\nif a:\n    do_someting()\nif b:\n    do_someting()\n'''\na,b 的值有就是True, 没有就是False\n'''\n```\n## 14. 字符串格式化\n```\na,b = 'haha', [1,2,3]\ns = f'str is {a}, list is {b}' \n'''\n不支持python2\n'''\n```\n## 15. 列表切片\n```\nitems = range(10)\nsub_items = items[1:4]  # 取第1号到第4号元素\nodd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）\ncopy_items = items[::]  # 或者 items[:]\n```\n## 16. 善用生成器\n```\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        yeild a \n        a ,b = b, a + b\n'''\n生成器的好处是无需一次性把所有元素加载到内存，\n只有迭代获取元素时才返回该元素，\n而列表是预先一次性把全部元素加载到内存中\n遇到 yield 会暂停执行另一个函数\n'''\n```\n# 17. 获取字典元素\n```\nd = {'name':'foo'}\nd.get('name','unknow')\nd.get('age','unknow')\n```\n# 18. 预设字典默认值\n```\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n\nfrom collections import defaultdict\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n```\n\n## 19 字典/列表/集合 推导式\n```\nnumbers = [1, 2, 3, 4]\nmy_dict = {number: number*2 for number in numbers}\nprint(my_dict)\n```\n\n## 20. for/else\n'''\npython 特有的语法格式，else中的代码在for 循环完所有元素成后执行\n'''\n```\nflagfound = False\nmylist = [1, 2, 3, 'theflag', 4, 5, 6]\nfor i in mylist:\n    if i == 'theflag':\n        flagfound = True\n        break\n    print(i)    \nelse:\n    raisd ValueError('list argument missing terminal flag')\n```\n## 21 一些特性\n### 给数字加\\_分组并不影响实际\n```\na = 11_22_33_44\nerror = 0xbad_c0ffee\n```\n### 将类型注释添加到函数和方法中\n```\ndef my_add(a:str,b:int) -> str:\n    return a + b\nmy_add(1,2)\n```\n### 直接操作数字\n```\nPI =3.141592653\nf'PI is {PI:.4f}'\n```\n","slug":"python/优雅的python写法","published":1,"updated":"2020-04-10T16:46:16.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtufw003074uxrmtm8fup","content":"<h1 id=\"学习python-cook-book-有感\"><a href=\"#学习python-cook-book-有感\" class=\"headerlink\" title=\"学习python cook book 有感\"></a>学习python cook book 有感</h1><h2 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-循环遍历区间\"><a href=\"#2-循环遍历区间\" class=\"headerlink\" title=\"2. 循环遍历区间\"></a>2. 循环遍历区间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    print (i)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 3. 带有索引位置的集合遍历</span><br></pre></td></tr></table></figure>\n<p>for i, color in enumerate(colors):<br>    print (i ,colors[i])<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 4. 字符串拼接</span><br></pre></td></tr></table></figure></p>\n<p>print ‘. ‘ .join(names)<br>‘’’<br>join 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）</span><br><span class=\"line\">## 5. 打开/关闭文件</span><br></pre></td></tr></table></figure></p>\n<p>with open (‘xxx.xxx’,’r’) as f:<br>    data = f.read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6. 列表推导式</span><br></pre></td></tr></table></figure></p>\n<p>[i for i in range(10)]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 7. 善用装饰器</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用<br>url 曾使用过直接从cache读出，没有的话存到saved中<br>‘’’<br>import urllib.request as urllib</p>\n<p>def cache(func):<br>    saved = {}</p>\n<pre><code>def wrapper(url):\n    if url in saved:\n        return saved[url]\n    else:\n        page = func(url)\n        saved[url] = page\n        return page\n\n    return wrapper \n</code></pre><p>@cache<br>def web_lookup(url):<br>    return urllib.urlopen(url).read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 8. 合理使用列表</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>list是一个查询效率高于更新操作的数据结构,<br>删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动<br>‘’’<br>from collections import deque<br>names = deque([1, 2, 3, 4, ‘haha’])<br>names.popleft()<br>names.appendleft(‘mark’)</p>\n<p>‘’’<br>deque 是一个双向队列的数据结构，删除元素和插入元素会很快<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 9. 序列解包</span><br></pre></td></tr></table></figure></p>\n<p>p = ‘1’ ,  ‘2’ , ‘3’ , 4<br>a, b, c, d, = p<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 10. 遍历字典的 key 和 value</span><br></pre></td></tr></table></figure></p>\n<p>dict ={1:’haha’,2:’xixi’}<br>for key, value in dict.items():<br>    print(key ,’ + ‘, value)<br>‘’’<br>dict.items 返回迭代器对象，可节省更多的内存<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 11. 链式比较操作</span><br></pre></td></tr></table></figure></p>\n<p>age = 18<br>if 18 &lt; age &lt; 60:<br>    print(‘young man’)</p>\n<p>False == True == True == True</p>\n<h1 id=\"False\"><a href=\"#False\" class=\"headerlink\" title=\"False\"></a>False</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 12. if/else</span><br></pre></td></tr></table></figure>\n<p>text = ‘男’ if gender == ‘male’ else ‘女’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 13. True/Fales 值判断</span><br></pre></td></tr></table></figure></p>\n<p>if a:<br>    do_someting()<br>if b:<br>    do_someting()<br>‘’’<br>a,b 的值有就是True, 没有就是False<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 14. 字符串格式化</span><br></pre></td></tr></table></figure></p>\n<p>a,b = ‘haha’, [1,2,3]<br>s = f’str is {a}, list is {b}’<br>‘’’<br>不支持python2<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 15. 列表切片</span><br></pre></td></tr></table></figure></p>\n<p>items = range(10)<br>sub_items = items[1:4]  # 取第1号到第4号元素<br>odd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）<br>copy_items = items[::]  # 或者 items[:]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 16. 善用生成器</span><br></pre></td></tr></table></figure></p>\n<p>def fib(n):<br>    a, b = 0, 1<br>    while a &lt; n:<br>        yeild a<br>        a ,b = b, a + b<br>‘’’<br>生成器的好处是无需一次性把所有元素加载到内存，<br>只有迭代获取元素时才返回该元素，<br>而列表是预先一次性把全部元素加载到内存中<br>遇到 yield 会暂停执行另一个函数<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17. 获取字典元素</span><br></pre></td></tr></table></figure></p>\n<p>d = {‘name’:’foo’}<br>d.get(‘name’,’unknow’)<br>d.get(‘age’,’unknow’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 18. 预设字典默认值</span><br></pre></td></tr></table></figure></p>\n<p>groups = {}<br>for (key, value) in data:<br>    groups.setdefault(key, []).append(value)</p>\n<p>from collections import defaultdict<br>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 19 字典/列表/集合 推导式</span><br></pre></td></tr></table></figure></p>\n<p>numbers = [1, 2, 3, 4]<br>my_dict = {number: number*2 for number in numbers}<br>print(my_dict)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 20. for/else</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">python 特有的语法格式，else中的代码在for 循环完所有元素成后执行</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>flagfound = False<br>mylist = [1, 2, 3, ‘theflag’, 4, 5, 6]<br>for i in mylist:<br>    if i == ‘theflag’:<br>        flagfound = True<br>        break<br>    print(i)<br>else:<br>    raisd ValueError(‘list argument missing terminal flag’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 21 一些特性</span><br><span class=\"line\">### 给数字加\\_分组并不影响实际</span><br></pre></td></tr></table></figure></p>\n<p>a = 11_22_33_44<br>error = 0xbad_c0ffee<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 将类型注释添加到函数和方法中</span><br></pre></td></tr></table></figure></p>\n<p>def my_add(a:str,b:int) -&gt; str:<br>    return a + b<br>my_add(1,2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 直接操作数字</span><br></pre></td></tr></table></figure></p>\n<p>PI =3.141592653<br>f’PI is {PI:.4f}’<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习python-cook-book-有感\"><a href=\"#学习python-cook-book-有感\" class=\"headerlink\" title=\"学习python cook book 有感\"></a>学习python cook book 有感</h1><h2 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-循环遍历区间\"><a href=\"#2-循环遍历区间\" class=\"headerlink\" title=\"2. 循环遍历区间\"></a>2. 循环遍历区间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    print (i)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 3. 带有索引位置的集合遍历</span><br></pre></td></tr></table></figure>\n<p>for i, color in enumerate(colors):<br>    print (i ,colors[i])<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 4. 字符串拼接</span><br></pre></td></tr></table></figure></p>\n<p>print ‘. ‘ .join(names)<br>‘’’<br>join 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）</span><br><span class=\"line\">## 5. 打开/关闭文件</span><br></pre></td></tr></table></figure></p>\n<p>with open (‘xxx.xxx’,’r’) as f:<br>    data = f.read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6. 列表推导式</span><br></pre></td></tr></table></figure></p>\n<p>[i for i in range(10)]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 7. 善用装饰器</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用<br>url 曾使用过直接从cache读出，没有的话存到saved中<br>‘’’<br>import urllib.request as urllib</p>\n<p>def cache(func):<br>    saved = {}</p>\n<pre><code>def wrapper(url):\n    if url in saved:\n        return saved[url]\n    else:\n        page = func(url)\n        saved[url] = page\n        return page\n\n    return wrapper \n</code></pre><p>@cache<br>def web_lookup(url):<br>    return urllib.urlopen(url).read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 8. 合理使用列表</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>list是一个查询效率高于更新操作的数据结构,<br>删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动<br>‘’’<br>from collections import deque<br>names = deque([1, 2, 3, 4, ‘haha’])<br>names.popleft()<br>names.appendleft(‘mark’)</p>\n<p>‘’’<br>deque 是一个双向队列的数据结构，删除元素和插入元素会很快<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 9. 序列解包</span><br></pre></td></tr></table></figure></p>\n<p>p = ‘1’ ,  ‘2’ , ‘3’ , 4<br>a, b, c, d, = p<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 10. 遍历字典的 key 和 value</span><br></pre></td></tr></table></figure></p>\n<p>dict ={1:’haha’,2:’xixi’}<br>for key, value in dict.items():<br>    print(key ,’ + ‘, value)<br>‘’’<br>dict.items 返回迭代器对象，可节省更多的内存<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 11. 链式比较操作</span><br></pre></td></tr></table></figure></p>\n<p>age = 18<br>if 18 &lt; age &lt; 60:<br>    print(‘young man’)</p>\n<p>False == True == True == True</p>\n<h1 id=\"False\"><a href=\"#False\" class=\"headerlink\" title=\"False\"></a>False</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 12. if/else</span><br></pre></td></tr></table></figure>\n<p>text = ‘男’ if gender == ‘male’ else ‘女’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 13. True/Fales 值判断</span><br></pre></td></tr></table></figure></p>\n<p>if a:<br>    do_someting()<br>if b:<br>    do_someting()<br>‘’’<br>a,b 的值有就是True, 没有就是False<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 14. 字符串格式化</span><br></pre></td></tr></table></figure></p>\n<p>a,b = ‘haha’, [1,2,3]<br>s = f’str is {a}, list is {b}’<br>‘’’<br>不支持python2<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 15. 列表切片</span><br></pre></td></tr></table></figure></p>\n<p>items = range(10)<br>sub_items = items[1:4]  # 取第1号到第4号元素<br>odd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）<br>copy_items = items[::]  # 或者 items[:]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 16. 善用生成器</span><br></pre></td></tr></table></figure></p>\n<p>def fib(n):<br>    a, b = 0, 1<br>    while a &lt; n:<br>        yeild a<br>        a ,b = b, a + b<br>‘’’<br>生成器的好处是无需一次性把所有元素加载到内存，<br>只有迭代获取元素时才返回该元素，<br>而列表是预先一次性把全部元素加载到内存中<br>遇到 yield 会暂停执行另一个函数<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17. 获取字典元素</span><br></pre></td></tr></table></figure></p>\n<p>d = {‘name’:’foo’}<br>d.get(‘name’,’unknow’)<br>d.get(‘age’,’unknow’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 18. 预设字典默认值</span><br></pre></td></tr></table></figure></p>\n<p>groups = {}<br>for (key, value) in data:<br>    groups.setdefault(key, []).append(value)</p>\n<p>from collections import defaultdict<br>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 19 字典/列表/集合 推导式</span><br></pre></td></tr></table></figure></p>\n<p>numbers = [1, 2, 3, 4]<br>my_dict = {number: number*2 for number in numbers}<br>print(my_dict)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 20. for/else</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">python 特有的语法格式，else中的代码在for 循环完所有元素成后执行</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>flagfound = False<br>mylist = [1, 2, 3, ‘theflag’, 4, 5, 6]<br>for i in mylist:<br>    if i == ‘theflag’:<br>        flagfound = True<br>        break<br>    print(i)<br>else:<br>    raisd ValueError(‘list argument missing terminal flag’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 21 一些特性</span><br><span class=\"line\">### 给数字加\\_分组并不影响实际</span><br></pre></td></tr></table></figure></p>\n<p>a = 11_22_33_44<br>error = 0xbad_c0ffee<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 将类型注释添加到函数和方法中</span><br></pre></td></tr></table></figure></p>\n<p>def my_add(a:str,b:int) -&gt; str:<br>    return a + b<br>my_add(1,2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 直接操作数字</span><br></pre></td></tr></table></figure></p>\n<p>PI =3.141592653<br>f’PI is {PI:.4f}’<br><code>`</code></p>\n"},{"title":"python里的特殊方法","date":"2019-10-09T03:05:31.000Z","_content":"\n## 特殊方法是什么\n是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。\n\n这些魔法方法 都是以双下划线`__`作为 前缀和后缀。\n\n## 初始化\n\n**`__new__()`创造实例， `__init__()`初始化实例。**\n\n`__init__()` 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。\n\n`__new__()` 才是最早被调用的方法 \n\n\n\n1. `__new__()`  : 先读取参数( 如类名称,args,和kwargs）, 然后 __new__() 方法把这些参数传递给 `__init__()` , `__new__(class_name, args, kwargs)`\n2. `__init__()` : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 `__init__(slef, args, kwargs)` \n3. `__del__()`  : 类的析构函数，定义一个对象被垃圾回收的行为。 `__del__(self)`\n\n```\nclass SimpleInit:\n    def __new__(cls):\n        print(\"__new__ is called\")\n        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下\n\n    def __init__(self, value=10):\n        print('__init__ is called')\n        print(\"self is: \", self)\n        self._list = [value]\n\n    def __del__(self):\n        print(self._list)\n        del self._list\n        print(self._list)\n\na = SimpleInit()\na.__del__()\n'''\n输出如下：\n__new__ is called   # __new__()创造实例， __init__()初始化实例\n__init__ is called\nself is:  <__main__.SimpleInit object at 0x0000017E8A132470>\n[10]\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-22-3666a9307d4d> in <module>\n----> 1 a.__del__()\n\n<ipython-input-21-cb926d3eed30> in __del__(self)\n     12         print(self._list)\n     13         del self._list\n---> 14         print(self._list)\n     15\n     16 a = SimpleInit()\n\nAttributeError: 'SimpleInit' object has no attribute '_list'\n'''\n```\n\n## 算术运算,增量赋值\n\n1.  `__add__(self.other)  +    __iadd__(self.other)  +=`\n2.  `__sub__(self.other)  -    __isub__(self.other)  -=`\n3.  `__mul__(self.other)  *    __imul__(self.other)  *=`\n4.  `__floordiv__(self.other) //   __ifloordiv__(self.other) //=`\n5.  `__div__(self.other) /   __idiv__(self.other) /=`\n5.  `__mod__(self.other)  %   __imod__(self.other)  %=`\n6.  `__and__(self.other)  &   __iand__(self.other)  &=`\n7.  `__or__(self.other)  |    __ior__(self.other)  |=`\n8.  `__xor__(self.other)  ^   __ixor__(self.other)  ^=`\n9.  `__pow__(self.other)  **   __ipow__(self.other)  **=`\n10. `__lshift__(self.other)  <<   __ilshift__(self.other)  <<=`\n11. `__rshift__(self.other)  >>   __irshift__(self.other)  >>=`\n```\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Simpleadder:\n    _elements:list = list\n\n    def __add__(self, other):\n        return self._elements + other._elements\n\n\na = Simpleadder([1,2,3,4,5])\nb = Simpleadder([4,5,6,7,8])\nprint(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])\nprint(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]\n```\n## 比较运算\n**python3.7 可使用dataclass**\n\n1. `__eq__(self.other)  ==`\n2. `__ne__(self.other)  !=`\n3. `__lt__(self.other)  <`\n4. `__gt__(self.other)  >`\n5. `__le__(self.other)  <=`\n6. `__ge__(self.other)  >=`\n\n## 类型转换\n1. `__int__(self)`      int\n2. `__long__(self)`     long\n3. `__float__(self) `   float\n4. `__complex__(self)`  complex\n5. `__oct__(self)`      octal (八进制)\n6. `__hex__(self)`      (十六进制)\n7. `__index__(self)`    转为int, 当对象被用于切片表达式\n\n## 最常用\n1. `__str__(self)` \n2. `__repr__(self)`  类似`__str__()`  str()主要用于人类可读, repr() 机器可读\n3. `__hash__(self)`  定义了行为调用hash()\n4. `__len__(self)`   返回容器长度\n5. `__getitem__(self)` __setitem__(self)\n6. `__delitem__(self)`  定义一个删除一个项目的行为\n7. `__iter__(self)`    返回一个迭代容器\n8. `__call__(self)`    使实例能够像函数一样被调用，同时不影响实例本身的生命周期\n\n**`__call__()`不影响一个实例的构造和析构。但是`__call__()`可以用来改变实例的内部成员的值**\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self):\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n\nx = X(1,2,3)\nprint(x)\nx()   #  把实例直接当函数调用\n```\n","source":"_posts/python/python里的特殊方法.md","raw":"---\ntitle: python里的特殊方法\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n## 特殊方法是什么\n是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。\n\n这些魔法方法 都是以双下划线`__`作为 前缀和后缀。\n\n## 初始化\n\n**`__new__()`创造实例， `__init__()`初始化实例。**\n\n`__init__()` 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。\n\n`__new__()` 才是最早被调用的方法 \n\n\n\n1. `__new__()`  : 先读取参数( 如类名称,args,和kwargs）, 然后 __new__() 方法把这些参数传递给 `__init__()` , `__new__(class_name, args, kwargs)`\n2. `__init__()` : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 `__init__(slef, args, kwargs)` \n3. `__del__()`  : 类的析构函数，定义一个对象被垃圾回收的行为。 `__del__(self)`\n\n```\nclass SimpleInit:\n    def __new__(cls):\n        print(\"__new__ is called\")\n        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下\n\n    def __init__(self, value=10):\n        print('__init__ is called')\n        print(\"self is: \", self)\n        self._list = [value]\n\n    def __del__(self):\n        print(self._list)\n        del self._list\n        print(self._list)\n\na = SimpleInit()\na.__del__()\n'''\n输出如下：\n__new__ is called   # __new__()创造实例， __init__()初始化实例\n__init__ is called\nself is:  <__main__.SimpleInit object at 0x0000017E8A132470>\n[10]\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-22-3666a9307d4d> in <module>\n----> 1 a.__del__()\n\n<ipython-input-21-cb926d3eed30> in __del__(self)\n     12         print(self._list)\n     13         del self._list\n---> 14         print(self._list)\n     15\n     16 a = SimpleInit()\n\nAttributeError: 'SimpleInit' object has no attribute '_list'\n'''\n```\n\n## 算术运算,增量赋值\n\n1.  `__add__(self.other)  +    __iadd__(self.other)  +=`\n2.  `__sub__(self.other)  -    __isub__(self.other)  -=`\n3.  `__mul__(self.other)  *    __imul__(self.other)  *=`\n4.  `__floordiv__(self.other) //   __ifloordiv__(self.other) //=`\n5.  `__div__(self.other) /   __idiv__(self.other) /=`\n5.  `__mod__(self.other)  %   __imod__(self.other)  %=`\n6.  `__and__(self.other)  &   __iand__(self.other)  &=`\n7.  `__or__(self.other)  |    __ior__(self.other)  |=`\n8.  `__xor__(self.other)  ^   __ixor__(self.other)  ^=`\n9.  `__pow__(self.other)  **   __ipow__(self.other)  **=`\n10. `__lshift__(self.other)  <<   __ilshift__(self.other)  <<=`\n11. `__rshift__(self.other)  >>   __irshift__(self.other)  >>=`\n```\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Simpleadder:\n    _elements:list = list\n\n    def __add__(self, other):\n        return self._elements + other._elements\n\n\na = Simpleadder([1,2,3,4,5])\nb = Simpleadder([4,5,6,7,8])\nprint(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])\nprint(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]\n```\n## 比较运算\n**python3.7 可使用dataclass**\n\n1. `__eq__(self.other)  ==`\n2. `__ne__(self.other)  !=`\n3. `__lt__(self.other)  <`\n4. `__gt__(self.other)  >`\n5. `__le__(self.other)  <=`\n6. `__ge__(self.other)  >=`\n\n## 类型转换\n1. `__int__(self)`      int\n2. `__long__(self)`     long\n3. `__float__(self) `   float\n4. `__complex__(self)`  complex\n5. `__oct__(self)`      octal (八进制)\n6. `__hex__(self)`      (十六进制)\n7. `__index__(self)`    转为int, 当对象被用于切片表达式\n\n## 最常用\n1. `__str__(self)` \n2. `__repr__(self)`  类似`__str__()`  str()主要用于人类可读, repr() 机器可读\n3. `__hash__(self)`  定义了行为调用hash()\n4. `__len__(self)`   返回容器长度\n5. `__getitem__(self)` __setitem__(self)\n6. `__delitem__(self)`  定义一个删除一个项目的行为\n7. `__iter__(self)`    返回一个迭代容器\n8. `__call__(self)`    使实例能够像函数一样被调用，同时不影响实例本身的生命周期\n\n**`__call__()`不影响一个实例的构造和析构。但是`__call__()`可以用来改变实例的内部成员的值**\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self):\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n\nx = X(1,2,3)\nprint(x)\nx()   #  把实例直接当函数调用\n```\n","slug":"python/python里的特殊方法","published":1,"updated":"2020-04-10T16:46:16.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtug1003174ux7836rdpu","content":"<h2 id=\"特殊方法是什么\"><a href=\"#特殊方法是什么\" class=\"headerlink\" title=\"特殊方法是什么\"></a>特殊方法是什么</h2><p>是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。</p>\n<p>这些魔法方法 都是以双下划线<code>__</code>作为 前缀和后缀。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p><strong><code>__new__()</code>创造实例， <code>__init__()</code>初始化实例。</strong></p>\n<p><code>__init__()</code> 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。</p>\n<p><code>__new__()</code> 才是最早被调用的方法 </p>\n<ol>\n<li><code>__new__()</code>  : 先读取参数( 如类名称,args,和kwargs）, 然后 <strong>new</strong>() 方法把这些参数传递给 <code>__init__()</code> , <code>__new__(class_name, args, kwargs)</code></li>\n<li><code>__init__()</code> : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 <code>__init__(slef, args, kwargs)</code> </li>\n<li><code>__del__()</code>  : 类的析构函数，定义一个对象被垃圾回收的行为。 <code>__del__(self)</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SimpleInit:</span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        print(&quot;__new__ is called&quot;)</span><br><span class=\"line\">        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, value=10):</span><br><span class=\"line\">        print(&apos;__init__ is called&apos;)</span><br><span class=\"line\">        print(&quot;self is: &quot;, self)</span><br><span class=\"line\">        self._list = [value]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\">        del self._list</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\"></span><br><span class=\"line\">a = SimpleInit()</span><br><span class=\"line\">a.__del__()</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">__new__ is called   # __new__()创造实例， __init__()初始化实例</span><br><span class=\"line\">__init__ is called</span><br><span class=\"line\">self is:  &lt;__main__.SimpleInit object at 0x0000017E8A132470&gt;</span><br><span class=\"line\">[10]</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">AttributeError                            Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input-22-3666a9307d4d&gt; in &lt;module&gt;</span><br><span class=\"line\">----&gt; 1 a.__del__()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-21-cb926d3eed30&gt; in __del__(self)</span><br><span class=\"line\">     12         print(self._list)</span><br><span class=\"line\">     13         del self._list</span><br><span class=\"line\">---&gt; 14         print(self._list)</span><br><span class=\"line\">     15</span><br><span class=\"line\">     16 a = SimpleInit()</span><br><span class=\"line\"></span><br><span class=\"line\">AttributeError: &apos;SimpleInit&apos; object has no attribute &apos;_list&apos;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算-增量赋值\"><a href=\"#算术运算-增量赋值\" class=\"headerlink\" title=\"算术运算,增量赋值\"></a>算术运算,增量赋值</h2><ol>\n<li><code>__add__(self.other)  +    __iadd__(self.other)  +=</code></li>\n<li><code>__sub__(self.other)  -    __isub__(self.other)  -=</code></li>\n<li><code>__mul__(self.other)  *    __imul__(self.other)  *=</code></li>\n<li><code>__floordiv__(self.other) //   __ifloordiv__(self.other) //=</code></li>\n<li><code>__div__(self.other) /   __idiv__(self.other) /=</code></li>\n<li><code>__mod__(self.other)  %   __imod__(self.other)  %=</code></li>\n<li><code>__and__(self.other)  &amp;   __iand__(self.other)  &amp;=</code></li>\n<li><code>__or__(self.other)  |    __ior__(self.other)  |=</code></li>\n<li><code>__xor__(self.other)  ^   __ixor__(self.other)  ^=</code></li>\n<li><code>__pow__(self.other)  **   __ipow__(self.other)  **=</code></li>\n<li><code>__lshift__(self.other)  &lt;&lt;   __ilshift__(self.other)  &lt;&lt;=</code></li>\n<li><code>__rshift__(self.other)  &gt;&gt;   __irshift__(self.other)  &gt;&gt;=</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Simpleadder:</span><br><span class=\"line\">    _elements:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        return self._elements + other._elements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Simpleadder([1,2,3,4,5])</span><br><span class=\"line\">b = Simpleadder([4,5,6,7,8])</span><br><span class=\"line\">print(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])</span><br><span class=\"line\">print(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h2><p><strong>python3.7 可使用dataclass</strong></p>\n<ol>\n<li><code>__eq__(self.other)  ==</code></li>\n<li><code>__ne__(self.other)  !=</code></li>\n<li><code>__lt__(self.other)  &lt;</code></li>\n<li><code>__gt__(self.other)  &gt;</code></li>\n<li><code>__le__(self.other)  &lt;=</code></li>\n<li><code>__ge__(self.other)  &gt;=</code></li>\n</ol>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li><code>__int__(self)</code>      int</li>\n<li><code>__long__(self)</code>     long</li>\n<li><code>__float__(self)</code>   float</li>\n<li><code>__complex__(self)</code>  complex</li>\n<li><code>__oct__(self)</code>      octal (八进制)</li>\n<li><code>__hex__(self)</code>      (十六进制)</li>\n<li><code>__index__(self)</code>    转为int, 当对象被用于切片表达式</li>\n</ol>\n<h2 id=\"最常用\"><a href=\"#最常用\" class=\"headerlink\" title=\"最常用\"></a>最常用</h2><ol>\n<li><code>__str__(self)</code> </li>\n<li><code>__repr__(self)</code>  类似<code>__str__()</code>  str()主要用于人类可读, repr() 机器可读</li>\n<li><code>__hash__(self)</code>  定义了行为调用hash()</li>\n<li><code>__len__(self)</code>   返回容器长度</li>\n<li><code>__getitem__(self)</code> <strong>setitem</strong>(self)</li>\n<li><code>__delitem__(self)</code>  定义一个删除一个项目的行为</li>\n<li><code>__iter__(self)</code>    返回一个迭代容器</li>\n<li><code>__call__(self)</code>    使实例能够像函数一样被调用，同时不影响实例本身的生命周期</li>\n</ol>\n<p><strong><code>__call__()</code>不影响一个实例的构造和析构。但是<code>__call__()</code>可以用来改变实例的内部成员的值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self):</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x()   #  把实例直接当函数调用</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"特殊方法是什么\"><a href=\"#特殊方法是什么\" class=\"headerlink\" title=\"特殊方法是什么\"></a>特殊方法是什么</h2><p>是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。</p>\n<p>这些魔法方法 都是以双下划线<code>__</code>作为 前缀和后缀。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p><strong><code>__new__()</code>创造实例， <code>__init__()</code>初始化实例。</strong></p>\n<p><code>__init__()</code> 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。</p>\n<p><code>__new__()</code> 才是最早被调用的方法 </p>\n<ol>\n<li><code>__new__()</code>  : 先读取参数( 如类名称,args,和kwargs）, 然后 <strong>new</strong>() 方法把这些参数传递给 <code>__init__()</code> , <code>__new__(class_name, args, kwargs)</code></li>\n<li><code>__init__()</code> : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 <code>__init__(slef, args, kwargs)</code> </li>\n<li><code>__del__()</code>  : 类的析构函数，定义一个对象被垃圾回收的行为。 <code>__del__(self)</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SimpleInit:</span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        print(&quot;__new__ is called&quot;)</span><br><span class=\"line\">        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, value=10):</span><br><span class=\"line\">        print(&apos;__init__ is called&apos;)</span><br><span class=\"line\">        print(&quot;self is: &quot;, self)</span><br><span class=\"line\">        self._list = [value]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\">        del self._list</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\"></span><br><span class=\"line\">a = SimpleInit()</span><br><span class=\"line\">a.__del__()</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">__new__ is called   # __new__()创造实例， __init__()初始化实例</span><br><span class=\"line\">__init__ is called</span><br><span class=\"line\">self is:  &lt;__main__.SimpleInit object at 0x0000017E8A132470&gt;</span><br><span class=\"line\">[10]</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">AttributeError                            Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input-22-3666a9307d4d&gt; in &lt;module&gt;</span><br><span class=\"line\">----&gt; 1 a.__del__()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-21-cb926d3eed30&gt; in __del__(self)</span><br><span class=\"line\">     12         print(self._list)</span><br><span class=\"line\">     13         del self._list</span><br><span class=\"line\">---&gt; 14         print(self._list)</span><br><span class=\"line\">     15</span><br><span class=\"line\">     16 a = SimpleInit()</span><br><span class=\"line\"></span><br><span class=\"line\">AttributeError: &apos;SimpleInit&apos; object has no attribute &apos;_list&apos;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算-增量赋值\"><a href=\"#算术运算-增量赋值\" class=\"headerlink\" title=\"算术运算,增量赋值\"></a>算术运算,增量赋值</h2><ol>\n<li><code>__add__(self.other)  +    __iadd__(self.other)  +=</code></li>\n<li><code>__sub__(self.other)  -    __isub__(self.other)  -=</code></li>\n<li><code>__mul__(self.other)  *    __imul__(self.other)  *=</code></li>\n<li><code>__floordiv__(self.other) //   __ifloordiv__(self.other) //=</code></li>\n<li><code>__div__(self.other) /   __idiv__(self.other) /=</code></li>\n<li><code>__mod__(self.other)  %   __imod__(self.other)  %=</code></li>\n<li><code>__and__(self.other)  &amp;   __iand__(self.other)  &amp;=</code></li>\n<li><code>__or__(self.other)  |    __ior__(self.other)  |=</code></li>\n<li><code>__xor__(self.other)  ^   __ixor__(self.other)  ^=</code></li>\n<li><code>__pow__(self.other)  **   __ipow__(self.other)  **=</code></li>\n<li><code>__lshift__(self.other)  &lt;&lt;   __ilshift__(self.other)  &lt;&lt;=</code></li>\n<li><code>__rshift__(self.other)  &gt;&gt;   __irshift__(self.other)  &gt;&gt;=</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Simpleadder:</span><br><span class=\"line\">    _elements:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        return self._elements + other._elements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Simpleadder([1,2,3,4,5])</span><br><span class=\"line\">b = Simpleadder([4,5,6,7,8])</span><br><span class=\"line\">print(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])</span><br><span class=\"line\">print(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h2><p><strong>python3.7 可使用dataclass</strong></p>\n<ol>\n<li><code>__eq__(self.other)  ==</code></li>\n<li><code>__ne__(self.other)  !=</code></li>\n<li><code>__lt__(self.other)  &lt;</code></li>\n<li><code>__gt__(self.other)  &gt;</code></li>\n<li><code>__le__(self.other)  &lt;=</code></li>\n<li><code>__ge__(self.other)  &gt;=</code></li>\n</ol>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li><code>__int__(self)</code>      int</li>\n<li><code>__long__(self)</code>     long</li>\n<li><code>__float__(self)</code>   float</li>\n<li><code>__complex__(self)</code>  complex</li>\n<li><code>__oct__(self)</code>      octal (八进制)</li>\n<li><code>__hex__(self)</code>      (十六进制)</li>\n<li><code>__index__(self)</code>    转为int, 当对象被用于切片表达式</li>\n</ol>\n<h2 id=\"最常用\"><a href=\"#最常用\" class=\"headerlink\" title=\"最常用\"></a>最常用</h2><ol>\n<li><code>__str__(self)</code> </li>\n<li><code>__repr__(self)</code>  类似<code>__str__()</code>  str()主要用于人类可读, repr() 机器可读</li>\n<li><code>__hash__(self)</code>  定义了行为调用hash()</li>\n<li><code>__len__(self)</code>   返回容器长度</li>\n<li><code>__getitem__(self)</code> <strong>setitem</strong>(self)</li>\n<li><code>__delitem__(self)</code>  定义一个删除一个项目的行为</li>\n<li><code>__iter__(self)</code>    返回一个迭代容器</li>\n<li><code>__call__(self)</code>    使实例能够像函数一样被调用，同时不影响实例本身的生命周期</li>\n</ol>\n<p><strong><code>__call__()</code>不影响一个实例的构造和析构。但是<code>__call__()</code>可以用来改变实例的内部成员的值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self):</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x()   #  把实例直接当函数调用</span><br></pre></td></tr></table></figure></p>\n"},{"title":"多线程","date":"2019-10-10T03:05:31.000Z","_content":"\n## 添加线程\n```\nimport threading\n\ndef main1():\n    print(threading.active_count())   # 获取已激活的线程数\n    print(threading.enumerate()) # 查看所有线程信息\n    print(threading.current_thread())  # 查看现在正在运行的线程\n\ndef thread_job():\n    print('This is a thread of %s' % threading.current_thread())\n\ndef main():\n    thread = threading.Thread(target=thread_job,)  # 定义线程\n    thread.start()  # 让线程开始工作\n    \nif __name__ == '__main__':\n    main1()\n    main()\n\n```\n## join功能\n使用`join()`主线程一直等待全部的子线程结束之后，主线程自身才结束( `print('all done\\n')`)，程序退出\n```\nimport threading\nimport time\ndef T1_job():\n    print('T1 start\\n')\n    for i in range(10):\n        time.sleep(0.1)\n    print('T1 finish\\n')\n\ndef T2_job():\n    print('T2 start\\n')\n    print('T2 finish\\n')\n\ndef main():\n    T1_thread = threading.Thread(target=T1_job, name='T1')\n    T2_thread = threading.Thread(target=T2_job, name='T2')\n    T1_thread.start()\n    T2_thread.start()\n    T1_thread.join()\n    T2_thread.join()\n\n    print('all done\\n')\n    \nif __name__ == '__main__':\n    main()\n```\n### 线程锁\n不使用线程锁\n```\nimport threading\n\ndef job1():\n    global A\n    for i in range(10):\n        A+=1\n        print('job1',A)\n\ndef job2():\n    global A\n    for i in range(10):\n        A+=10\n        print('job2',A)\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果,很杂乱\n```\njob1 job21\n11job1\n job212\n22job1\njob2  3323\n\njob2job1  4344\n\njob2job1  5554\n\njob2job1  6566\n\njob2job1  7677\n\njob2job1  8788\n\njob2job1  9899\n\njob2job1  110109\n```\n#### 使用线程锁\n**lock在不同线程使用同一共享内存时，能够确保线程之间互不影响**\n```\nimport threading\n\ndef job1():\n    global A,lock\n    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问\n    for i in range(10):\n        A+=1\n        print('job1',A)\n    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存\n\ndef job2():\n    global A,lock\n    lock.acquire()\n    for i in range(10):\n        A+=10\n        print('job2',A)\n    lock.release()\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果\n```\njob1 1\njob1 2\njob1 3\njob1 4\njob1 5\njob1 6\njob1 7\njob1 8\njob1 9\njob1 10\njob2 20\njob2 30\njob2 40\njob2 50\njob2 60\njob2 70\njob2 80\njob2 90\njob2 100\njob2 110\n```\n### 储存进程结果 Queue\n```\nimport threading\nimport time\n\nfrom queue import Queue\n\ndef job(l,q):\n    '''\n    对列表的每个元素进行平方计算，将结果保存在队列中\n    '''\n    for i in range (len(l)):\n        l[i] = l[i]**2\n    q.put(l)  # 多线程调用的函数不能用return返回值\n\ndef multithreading():\n    q = Queue()   #  q 中存放返回值，代替return的返回值\n    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]\n    threads = []\n    \n    for i in range(4):\n        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面\n        t.start()  # 开始线程\n        threads.append(t)  # 把每个线程append到线程列表中\n        \n    for thread in threads:\n        thread.join()  # 分别join四个线程到主线程\n        \n    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results\n    for _ in range(4):\n        results.append(q.get())\n    print(results)\n\nif __name___=='__main__':\n    multithreading()\n```\n","source":"_posts/python/多线程.md","raw":"---\ntitle: 多线程\ndate: 2019-10-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## 添加线程\n```\nimport threading\n\ndef main1():\n    print(threading.active_count())   # 获取已激活的线程数\n    print(threading.enumerate()) # 查看所有线程信息\n    print(threading.current_thread())  # 查看现在正在运行的线程\n\ndef thread_job():\n    print('This is a thread of %s' % threading.current_thread())\n\ndef main():\n    thread = threading.Thread(target=thread_job,)  # 定义线程\n    thread.start()  # 让线程开始工作\n    \nif __name__ == '__main__':\n    main1()\n    main()\n\n```\n## join功能\n使用`join()`主线程一直等待全部的子线程结束之后，主线程自身才结束( `print('all done\\n')`)，程序退出\n```\nimport threading\nimport time\ndef T1_job():\n    print('T1 start\\n')\n    for i in range(10):\n        time.sleep(0.1)\n    print('T1 finish\\n')\n\ndef T2_job():\n    print('T2 start\\n')\n    print('T2 finish\\n')\n\ndef main():\n    T1_thread = threading.Thread(target=T1_job, name='T1')\n    T2_thread = threading.Thread(target=T2_job, name='T2')\n    T1_thread.start()\n    T2_thread.start()\n    T1_thread.join()\n    T2_thread.join()\n\n    print('all done\\n')\n    \nif __name__ == '__main__':\n    main()\n```\n### 线程锁\n不使用线程锁\n```\nimport threading\n\ndef job1():\n    global A\n    for i in range(10):\n        A+=1\n        print('job1',A)\n\ndef job2():\n    global A\n    for i in range(10):\n        A+=10\n        print('job2',A)\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果,很杂乱\n```\njob1 job21\n11job1\n job212\n22job1\njob2  3323\n\njob2job1  4344\n\njob2job1  5554\n\njob2job1  6566\n\njob2job1  7677\n\njob2job1  8788\n\njob2job1  9899\n\njob2job1  110109\n```\n#### 使用线程锁\n**lock在不同线程使用同一共享内存时，能够确保线程之间互不影响**\n```\nimport threading\n\ndef job1():\n    global A,lock\n    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问\n    for i in range(10):\n        A+=1\n        print('job1',A)\n    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存\n\ndef job2():\n    global A,lock\n    lock.acquire()\n    for i in range(10):\n        A+=10\n        print('job2',A)\n    lock.release()\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果\n```\njob1 1\njob1 2\njob1 3\njob1 4\njob1 5\njob1 6\njob1 7\njob1 8\njob1 9\njob1 10\njob2 20\njob2 30\njob2 40\njob2 50\njob2 60\njob2 70\njob2 80\njob2 90\njob2 100\njob2 110\n```\n### 储存进程结果 Queue\n```\nimport threading\nimport time\n\nfrom queue import Queue\n\ndef job(l,q):\n    '''\n    对列表的每个元素进行平方计算，将结果保存在队列中\n    '''\n    for i in range (len(l)):\n        l[i] = l[i]**2\n    q.put(l)  # 多线程调用的函数不能用return返回值\n\ndef multithreading():\n    q = Queue()   #  q 中存放返回值，代替return的返回值\n    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]\n    threads = []\n    \n    for i in range(4):\n        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面\n        t.start()  # 开始线程\n        threads.append(t)  # 把每个线程append到线程列表中\n        \n    for thread in threads:\n        thread.join()  # 分别join四个线程到主线程\n        \n    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results\n    for _ in range(4):\n        results.append(q.get())\n    print(results)\n\nif __name___=='__main__':\n    multithreading()\n```\n","slug":"python/多线程","published":1,"updated":"2020-04-10T16:46:16.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtug6003474uxqx15w20j","content":"<h2 id=\"添加线程\"><a href=\"#添加线程\" class=\"headerlink\" title=\"添加线程\"></a>添加线程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def main1():</span><br><span class=\"line\">    print(threading.active_count())   # 获取已激活的线程数</span><br><span class=\"line\">    print(threading.enumerate()) # 查看所有线程信息</span><br><span class=\"line\">    print(threading.current_thread())  # 查看现在正在运行的线程</span><br><span class=\"line\"></span><br><span class=\"line\">def thread_job():</span><br><span class=\"line\">    print(&apos;This is a thread of %s&apos; % threading.current_thread())</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    thread = threading.Thread(target=thread_job,)  # 定义线程</span><br><span class=\"line\">    thread.start()  # 让线程开始工作</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main1()</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"join功能\"><a href=\"#join功能\" class=\"headerlink\" title=\"join功能\"></a>join功能</h2><p>使用<code>join()</code>主线程一直等待全部的子线程结束之后，主线程自身才结束( <code>print(&#39;all done\\n&#39;)</code>)，程序退出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\">def T1_job():</span><br><span class=\"line\">    print(&apos;T1 start\\n&apos;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">    print(&apos;T1 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def T2_job():</span><br><span class=\"line\">    print(&apos;T2 start\\n&apos;)</span><br><span class=\"line\">    print(&apos;T2 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    T1_thread = threading.Thread(target=T1_job, name=&apos;T1&apos;)</span><br><span class=\"line\">    T2_thread = threading.Thread(target=T2_job, name=&apos;T2&apos;)</span><br><span class=\"line\">    T1_thread.start()</span><br><span class=\"line\">    T2_thread.start()</span><br><span class=\"line\">    T1_thread.join()</span><br><span class=\"line\">    T2_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;all done\\n&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"线程锁\"><a href=\"#线程锁\" class=\"headerlink\" title=\"线程锁\"></a>线程锁</h3><p>不使用线程锁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果,很杂乱<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 job21</span><br><span class=\"line\">11job1</span><br><span class=\"line\"> job212</span><br><span class=\"line\">22job1</span><br><span class=\"line\">job2  3323</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  4344</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  5554</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  6566</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  7677</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  8788</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  9899</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  110109</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用线程锁\"><a href=\"#使用线程锁\" class=\"headerlink\" title=\"使用线程锁\"></a>使用线程锁</h4><p><strong>lock在不同线程使用同一共享内存时，能够确保线程之间互不影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\">    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 1</span><br><span class=\"line\">job1 2</span><br><span class=\"line\">job1 3</span><br><span class=\"line\">job1 4</span><br><span class=\"line\">job1 5</span><br><span class=\"line\">job1 6</span><br><span class=\"line\">job1 7</span><br><span class=\"line\">job1 8</span><br><span class=\"line\">job1 9</span><br><span class=\"line\">job1 10</span><br><span class=\"line\">job2 20</span><br><span class=\"line\">job2 30</span><br><span class=\"line\">job2 40</span><br><span class=\"line\">job2 50</span><br><span class=\"line\">job2 60</span><br><span class=\"line\">job2 70</span><br><span class=\"line\">job2 80</span><br><span class=\"line\">job2 90</span><br><span class=\"line\">job2 100</span><br><span class=\"line\">job2 110</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"储存进程结果-Queue\"><a href=\"#储存进程结果-Queue\" class=\"headerlink\" title=\"储存进程结果 Queue\"></a>储存进程结果 Queue</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from queue import Queue</span><br><span class=\"line\"></span><br><span class=\"line\">def job(l,q):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    对列表的每个元素进行平方计算，将结果保存在队列中</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    for i in range (len(l)):</span><br><span class=\"line\">        l[i] = l[i]**2</span><br><span class=\"line\">    q.put(l)  # 多线程调用的函数不能用return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">def multithreading():</span><br><span class=\"line\">    q = Queue()   #  q 中存放返回值，代替return的返回值</span><br><span class=\"line\">    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(4):</span><br><span class=\"line\">        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面</span><br><span class=\"line\">        t.start()  # 开始线程</span><br><span class=\"line\">        threads.append(t)  # 把每个线程append到线程列表中</span><br><span class=\"line\">        </span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.join()  # 分别join四个线程到主线程</span><br><span class=\"line\">        </span><br><span class=\"line\">    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results</span><br><span class=\"line\">    for _ in range(4):</span><br><span class=\"line\">        results.append(q.get())</span><br><span class=\"line\">    print(results)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name___==&apos;__main__&apos;:</span><br><span class=\"line\">    multithreading()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加线程\"><a href=\"#添加线程\" class=\"headerlink\" title=\"添加线程\"></a>添加线程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def main1():</span><br><span class=\"line\">    print(threading.active_count())   # 获取已激活的线程数</span><br><span class=\"line\">    print(threading.enumerate()) # 查看所有线程信息</span><br><span class=\"line\">    print(threading.current_thread())  # 查看现在正在运行的线程</span><br><span class=\"line\"></span><br><span class=\"line\">def thread_job():</span><br><span class=\"line\">    print(&apos;This is a thread of %s&apos; % threading.current_thread())</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    thread = threading.Thread(target=thread_job,)  # 定义线程</span><br><span class=\"line\">    thread.start()  # 让线程开始工作</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main1()</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"join功能\"><a href=\"#join功能\" class=\"headerlink\" title=\"join功能\"></a>join功能</h2><p>使用<code>join()</code>主线程一直等待全部的子线程结束之后，主线程自身才结束( <code>print(&#39;all done\\n&#39;)</code>)，程序退出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\">def T1_job():</span><br><span class=\"line\">    print(&apos;T1 start\\n&apos;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">    print(&apos;T1 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def T2_job():</span><br><span class=\"line\">    print(&apos;T2 start\\n&apos;)</span><br><span class=\"line\">    print(&apos;T2 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    T1_thread = threading.Thread(target=T1_job, name=&apos;T1&apos;)</span><br><span class=\"line\">    T2_thread = threading.Thread(target=T2_job, name=&apos;T2&apos;)</span><br><span class=\"line\">    T1_thread.start()</span><br><span class=\"line\">    T2_thread.start()</span><br><span class=\"line\">    T1_thread.join()</span><br><span class=\"line\">    T2_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;all done\\n&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"线程锁\"><a href=\"#线程锁\" class=\"headerlink\" title=\"线程锁\"></a>线程锁</h3><p>不使用线程锁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果,很杂乱<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 job21</span><br><span class=\"line\">11job1</span><br><span class=\"line\"> job212</span><br><span class=\"line\">22job1</span><br><span class=\"line\">job2  3323</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  4344</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  5554</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  6566</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  7677</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  8788</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  9899</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  110109</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用线程锁\"><a href=\"#使用线程锁\" class=\"headerlink\" title=\"使用线程锁\"></a>使用线程锁</h4><p><strong>lock在不同线程使用同一共享内存时，能够确保线程之间互不影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\">    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 1</span><br><span class=\"line\">job1 2</span><br><span class=\"line\">job1 3</span><br><span class=\"line\">job1 4</span><br><span class=\"line\">job1 5</span><br><span class=\"line\">job1 6</span><br><span class=\"line\">job1 7</span><br><span class=\"line\">job1 8</span><br><span class=\"line\">job1 9</span><br><span class=\"line\">job1 10</span><br><span class=\"line\">job2 20</span><br><span class=\"line\">job2 30</span><br><span class=\"line\">job2 40</span><br><span class=\"line\">job2 50</span><br><span class=\"line\">job2 60</span><br><span class=\"line\">job2 70</span><br><span class=\"line\">job2 80</span><br><span class=\"line\">job2 90</span><br><span class=\"line\">job2 100</span><br><span class=\"line\">job2 110</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"储存进程结果-Queue\"><a href=\"#储存进程结果-Queue\" class=\"headerlink\" title=\"储存进程结果 Queue\"></a>储存进程结果 Queue</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from queue import Queue</span><br><span class=\"line\"></span><br><span class=\"line\">def job(l,q):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    对列表的每个元素进行平方计算，将结果保存在队列中</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    for i in range (len(l)):</span><br><span class=\"line\">        l[i] = l[i]**2</span><br><span class=\"line\">    q.put(l)  # 多线程调用的函数不能用return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">def multithreading():</span><br><span class=\"line\">    q = Queue()   #  q 中存放返回值，代替return的返回值</span><br><span class=\"line\">    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(4):</span><br><span class=\"line\">        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面</span><br><span class=\"line\">        t.start()  # 开始线程</span><br><span class=\"line\">        threads.append(t)  # 把每个线程append到线程列表中</span><br><span class=\"line\">        </span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.join()  # 分别join四个线程到主线程</span><br><span class=\"line\">        </span><br><span class=\"line\">    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results</span><br><span class=\"line\">    for _ in range(4):</span><br><span class=\"line\">        results.append(q.get())</span><br><span class=\"line\">    print(results)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name___==&apos;__main__&apos;:</span><br><span class=\"line\">    multithreading()</span><br></pre></td></tr></table></figure>\n"},{"title":"多线程的鸡肋","date":"2019-07-12T03:05:31.000Z","_content":"\n\n```\nfrom contextlib import contextmanager\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n@contextmanager\ndef _cost_time():\n    start_time = time.time()\n    print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    yield\n    end_time = time.time()\n    seconds = end_time - start_time\n    m, s = divmod(seconds, 60)\n    h, m = divmod(m, 60)\n    print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    print('time cost  %d:%02d:%02d ' % (h, m, s))\n\n\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\n\nwith _cost_time():\n    decrement(100000000)\n\n#\nimport threading\nwith _cost_time():\n    t1 = threading.Thread(target=decrement,args=[50000000])\n    t2 = threading.Thread(target=decrement,args=[50000000])\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n```\n\n## 修改一下\n\n```\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n\n\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        func(*args,**kw)\n        end_time = time.time()\n        seconds = end_time - start_time\n        m, s = divmod(seconds, 60)\n        h, m = divmod(m, 60)\n        print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        print('time cost  %d:%02d:%02d ' % (h, m, s))\n    return warpper\n\n@_cost_time\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\ndecrement(100000000)\n\n# Multithreading\nimport threading\nt1 = threading.Thread(target=decrement,args=[50000000])\nt2 = threading.Thread(target=decrement,args=[50000000])\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n\n```\n\n","source":"_posts/python/多线程的鸡肋.md","raw":"\n---\ntitle: 多线程的鸡肋\ndate: 2019-07-12 11:05:31\ntags:\ncategories: python练习\n---\n\n\n```\nfrom contextlib import contextmanager\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n@contextmanager\ndef _cost_time():\n    start_time = time.time()\n    print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    yield\n    end_time = time.time()\n    seconds = end_time - start_time\n    m, s = divmod(seconds, 60)\n    h, m = divmod(m, 60)\n    print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    print('time cost  %d:%02d:%02d ' % (h, m, s))\n\n\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\n\nwith _cost_time():\n    decrement(100000000)\n\n#\nimport threading\nwith _cost_time():\n    t1 = threading.Thread(target=decrement,args=[50000000])\n    t2 = threading.Thread(target=decrement,args=[50000000])\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n```\n\n## 修改一下\n\n```\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n\n\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        func(*args,**kw)\n        end_time = time.time()\n        seconds = end_time - start_time\n        m, s = divmod(seconds, 60)\n        h, m = divmod(m, 60)\n        print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        print('time cost  %d:%02d:%02d ' % (h, m, s))\n    return warpper\n\n@_cost_time\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\ndecrement(100000000)\n\n# Multithreading\nimport threading\nt1 = threading.Thread(target=decrement,args=[50000000])\nt2 = threading.Thread(target=decrement,args=[50000000])\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n\n```\n\n","slug":"python/多线程的鸡肋","published":1,"updated":"2020-04-10T16:46:16.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtugb003574uxfb9rwxsi","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def _cost_time():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    seconds = end_time - start_time</span><br><span class=\"line\">    m, s = divmod(seconds, 60)</span><br><span class=\"line\">    h, m = divmod(m, 60)</span><br><span class=\"line\">    print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\"></span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">import threading</span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一下\"><a href=\"#修改一下\" class=\"headerlink\" title=\"修改一下\"></a>修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        seconds = end_time - start_time</span><br><span class=\"line\">        m, s = divmod(seconds, 60)</span><br><span class=\"line\">        h, m = divmod(m, 60)</span><br><span class=\"line\">        print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\">decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\"># Multithreading</span><br><span class=\"line\">import threading</span><br><span class=\"line\">t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">t2.start()</span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">t2.join()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def _cost_time():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    seconds = end_time - start_time</span><br><span class=\"line\">    m, s = divmod(seconds, 60)</span><br><span class=\"line\">    h, m = divmod(m, 60)</span><br><span class=\"line\">    print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\"></span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">import threading</span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一下\"><a href=\"#修改一下\" class=\"headerlink\" title=\"修改一下\"></a>修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        seconds = end_time - start_time</span><br><span class=\"line\">        m, s = divmod(seconds, 60)</span><br><span class=\"line\">        h, m = divmod(m, 60)</span><br><span class=\"line\">        print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\">decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\"># Multithreading</span><br><span class=\"line\">import threading</span><br><span class=\"line\">t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">t2.start()</span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">t2.join()</span><br></pre></td></tr></table></figure>\n"},{"title":"多进程","date":"2019-10-11T03:05:31.000Z","_content":"## 多进程\n多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing\n\n### 多进程与多线程\n使用方法几乎一致\n```\nimport multiprocessing\nimport threading\n\ndef job_t(a,d):\n    print('tttt')\n\ndef job_p(a,d):\n    print('pppp')\n\n\nt1 = threading.Thread(target=job_t,args=(1,2))\np1 = multiprocessing.Process(target=job_p,args=(1,2))\nt1.start()\np1.start()\n\nt1.join()\np1.join()\n```\n### 进程结果 Queue()\n```\nimport multiprocessing as mp\n\ndef job(q):\n    res=0\n    for i in range(1000):\n        res+=i+i**2+i**3\n    q.put(res)    #queue\n\nif __name__=='__main__':\n    q = mp.Queue()\n    p1 = mp.Process(target=job,args=(q,))\n    p2 = mp.Process(target=job,args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    print(res1)\n    res2 = q.get()\n    print(res2)\n    print(res1+res2)\n```\n###  效率对比\n```\nimport time\nimport multiprocessing \nimport threading\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        func(*args,**kw)\n        end_time = time.time()\n        print('cost time :',end_time - start_time)\n    return warpper\n    \n\ndef job(q):\n    res = 0\n    for i in range(1000000):\n        res += i + i**2 + i**3\n    q.put(res) # queue\n\n@_cost_time\ndef normal():\n    res = 0\n    for _ in range(2):\n        for i in range(1000000):\n            res += i + i**2 + i**3\n    print('normal:', res)\n    \n\n@_cost_time\ndef multithread():\n    q = multiprocessing.Queue() \n    t1 = threading.Thread(target=job, args=(q,))\n    t2 = threading.Thread(target=job, args=(q,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multithread:', res1 + res2)\n\n\n@_cost_time\ndef multicore():\n    q =  multiprocessing.Queue()\n    p1 = multiprocessing .Process(target=job, args=(q,))\n    p2 =  multiprocessing .Process(target=job, args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multicore:',res1 + res2)\n\n\nnormal()\nmultithread()\nmulticore()\n```\n打印结果\n```\n('normal:', 499999666667166666000000L)\n('cost time :', 0.8630490303039551)\n('multithread:', 499999666667166666000000L)\n('cost time :', 1.8854999542236328)\n('multicore:', 499999666667166666000000L)\n('cost time :', 0.47038793563842773)\n```\n耗时 `多进程 < 普通 < 多线程` 。\n\n多线程不适合计算密集型\n","source":"_posts/python/多进程.md","raw":"---\ntitle: 多进程\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n## 多进程\n多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing\n\n### 多进程与多线程\n使用方法几乎一致\n```\nimport multiprocessing\nimport threading\n\ndef job_t(a,d):\n    print('tttt')\n\ndef job_p(a,d):\n    print('pppp')\n\n\nt1 = threading.Thread(target=job_t,args=(1,2))\np1 = multiprocessing.Process(target=job_p,args=(1,2))\nt1.start()\np1.start()\n\nt1.join()\np1.join()\n```\n### 进程结果 Queue()\n```\nimport multiprocessing as mp\n\ndef job(q):\n    res=0\n    for i in range(1000):\n        res+=i+i**2+i**3\n    q.put(res)    #queue\n\nif __name__=='__main__':\n    q = mp.Queue()\n    p1 = mp.Process(target=job,args=(q,))\n    p2 = mp.Process(target=job,args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    print(res1)\n    res2 = q.get()\n    print(res2)\n    print(res1+res2)\n```\n###  效率对比\n```\nimport time\nimport multiprocessing \nimport threading\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        func(*args,**kw)\n        end_time = time.time()\n        print('cost time :',end_time - start_time)\n    return warpper\n    \n\ndef job(q):\n    res = 0\n    for i in range(1000000):\n        res += i + i**2 + i**3\n    q.put(res) # queue\n\n@_cost_time\ndef normal():\n    res = 0\n    for _ in range(2):\n        for i in range(1000000):\n            res += i + i**2 + i**3\n    print('normal:', res)\n    \n\n@_cost_time\ndef multithread():\n    q = multiprocessing.Queue() \n    t1 = threading.Thread(target=job, args=(q,))\n    t2 = threading.Thread(target=job, args=(q,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multithread:', res1 + res2)\n\n\n@_cost_time\ndef multicore():\n    q =  multiprocessing.Queue()\n    p1 = multiprocessing .Process(target=job, args=(q,))\n    p2 =  multiprocessing .Process(target=job, args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multicore:',res1 + res2)\n\n\nnormal()\nmultithread()\nmulticore()\n```\n打印结果\n```\n('normal:', 499999666667166666000000L)\n('cost time :', 0.8630490303039551)\n('multithread:', 499999666667166666000000L)\n('cost time :', 1.8854999542236328)\n('multicore:', 499999666667166666000000L)\n('cost time :', 0.47038793563842773)\n```\n耗时 `多进程 < 普通 < 多线程` 。\n\n多线程不适合计算密集型\n","slug":"python/多进程","published":1,"updated":"2020-04-10T16:46:16.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtugg003874uxxxpuwrjz","content":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing</p>\n<h3 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h3><p>使用方法几乎一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job_t(a,d):</span><br><span class=\"line\">    print(&apos;tttt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def job_p(a,d):</span><br><span class=\"line\">    print(&apos;pppp&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t1 = threading.Thread(target=job_t,args=(1,2))</span><br><span class=\"line\">p1 = multiprocessing.Process(target=job_p,args=(1,2))</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">p1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">p1.join()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进程结果-Queue\"><a href=\"#进程结果-Queue\" class=\"headerlink\" title=\"进程结果 Queue()\"></a>进程结果 Queue()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res=0</span><br><span class=\"line\">    for i in range(1000):</span><br><span class=\"line\">        res+=i+i**2+i**3</span><br><span class=\"line\">    q.put(res)    #queue</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    q = mp.Queue()</span><br><span class=\"line\">    p1 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p2 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    print(res1)</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(res2)</span><br><span class=\"line\">    print(res1+res2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import multiprocessing </span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        print(&apos;cost time :&apos;,end_time - start_time)</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for i in range(1000000):</span><br><span class=\"line\">        res += i + i**2 + i**3</span><br><span class=\"line\">    q.put(res) # queue</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def normal():</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for _ in range(2):</span><br><span class=\"line\">        for i in range(1000000):</span><br><span class=\"line\">            res += i + i**2 + i**3</span><br><span class=\"line\">    print(&apos;normal:&apos;, res)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multithread():</span><br><span class=\"line\">    q = multiprocessing.Queue() </span><br><span class=\"line\">    t1 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t2 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multithread:&apos;, res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multicore():</span><br><span class=\"line\">    q =  multiprocessing.Queue()</span><br><span class=\"line\">    p1 = multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p2 =  multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multicore:&apos;,res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normal()</span><br><span class=\"line\">multithread()</span><br><span class=\"line\">multicore()</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;normal:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.8630490303039551)</span><br><span class=\"line\">(&apos;multithread:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 1.8854999542236328)</span><br><span class=\"line\">(&apos;multicore:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.47038793563842773)</span><br></pre></td></tr></table></figure></p>\n<p>耗时 <code>多进程 &lt; 普通 &lt; 多线程</code> 。</p>\n<p>多线程不适合计算密集型</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing</p>\n<h3 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h3><p>使用方法几乎一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job_t(a,d):</span><br><span class=\"line\">    print(&apos;tttt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def job_p(a,d):</span><br><span class=\"line\">    print(&apos;pppp&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t1 = threading.Thread(target=job_t,args=(1,2))</span><br><span class=\"line\">p1 = multiprocessing.Process(target=job_p,args=(1,2))</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">p1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">p1.join()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进程结果-Queue\"><a href=\"#进程结果-Queue\" class=\"headerlink\" title=\"进程结果 Queue()\"></a>进程结果 Queue()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res=0</span><br><span class=\"line\">    for i in range(1000):</span><br><span class=\"line\">        res+=i+i**2+i**3</span><br><span class=\"line\">    q.put(res)    #queue</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    q = mp.Queue()</span><br><span class=\"line\">    p1 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p2 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    print(res1)</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(res2)</span><br><span class=\"line\">    print(res1+res2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import multiprocessing </span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        print(&apos;cost time :&apos;,end_time - start_time)</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for i in range(1000000):</span><br><span class=\"line\">        res += i + i**2 + i**3</span><br><span class=\"line\">    q.put(res) # queue</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def normal():</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for _ in range(2):</span><br><span class=\"line\">        for i in range(1000000):</span><br><span class=\"line\">            res += i + i**2 + i**3</span><br><span class=\"line\">    print(&apos;normal:&apos;, res)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multithread():</span><br><span class=\"line\">    q = multiprocessing.Queue() </span><br><span class=\"line\">    t1 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t2 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multithread:&apos;, res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multicore():</span><br><span class=\"line\">    q =  multiprocessing.Queue()</span><br><span class=\"line\">    p1 = multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p2 =  multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multicore:&apos;,res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normal()</span><br><span class=\"line\">multithread()</span><br><span class=\"line\">multicore()</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;normal:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.8630490303039551)</span><br><span class=\"line\">(&apos;multithread:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 1.8854999542236328)</span><br><span class=\"line\">(&apos;multicore:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.47038793563842773)</span><br></pre></td></tr></table></figure></p>\n<p>耗时 <code>多进程 &lt; 普通 &lt; 多线程</code> 。</p>\n<p>多线程不适合计算密集型</p>\n"},{"title":"慕课网数据采集总结","date":"2018-12-25T03:05:31.000Z","_content":"\n\n\nhttps://www.imooc.com/video/12637   课程地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/python/慕课网数据采集总结.md","raw":"---\ntitle: 慕课网数据采集总结\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\nhttps://www.imooc.com/video/12637   课程地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"python/慕课网数据采集总结","published":1,"updated":"2020-04-10T16:46:16.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtugl003974uxt5jxy1dm","content":"<p><a href=\"https://www.imooc.com/video/12637\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/12637</a>   课程地址</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.imooc.com/video/12637\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/12637</a>   课程地址</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"title":"爬虫整理（四）多进程分布式与异步","date":"2018-12-25T03:33:19.000Z","_content":"\n有的时候，爬取速度不快，就要想一些其他的办法。\n比如多进程多线程以及异步。\n不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。\n爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。\n\n多进程分布式与异步的代码如下：\n\n```\nfrom urllib.request import urlopen, urljoin\nfrom bs4 import BeautifulSoup\nimport multiprocessing as mp\nimport re\nimport time\n\n\ndef crawl(url):\n    response = urlopen(url)\n    time.sleep(0.1)             # slightly delay for downloading\n    return response.read().decode()\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])   # remove duplication\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nif __name__ == '__main__':\n    base_url = 'https://morvanzhou.github.io/'\n    # base_url = \"http://127.0.0.1:4000/\"\n\n    # DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\n    if base_url != \"http://127.0.0.1:4000/\":\n        restricted_crawl = True\n    else:\n        restricted_crawl = False\n\n    unseen = set([base_url,])\n    seen = set()\n\n    pool = mp.Pool(4)                       # number strongly affected\n    count, t1 = 1, time.time()\n\n    while len(unseen) != 0:              # still get some url to visit\n        if restricted_crawl and len(seen) > 20:\n            break\n        print('\\nDistributed Crawling...')\n        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]\n        htmls = [j.get() for j in crawl_jobs]                                       # request connection\n        htmls = [h for h in htmls if h is not None]     # remove None\n\n        print('\\nDistributed Parsing...')\n        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n        results = [j.get() for j in parse_jobs]                                     # parse html\n\n        print('\\nAnalysing...')\n        seen.update(unseen)\n        unseen.clear()\n\n        for title, page_urls, url in results:\n                print(count, title, url)\n                count += 1\n                unseen.update(page_urls - seen)\n\n    print('Total time: %.1f s' % (time.time()-t1, ))\n\n```\n\n```\nimport aiohttp\nimport asyncio\nimport time\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urljoin\nimport re\nimport multiprocessing as mp\n\nbase_url = \"https://morvanzhou.github.io/\"\n# base_url = \"http://127.0.0.1:4000/\"\n\n# DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\nif base_url != \"http://127.0.0.1:4000/\":\n    restricted_crawl = True\nelse:\n    restricted_crawl = False\n\nseen = set()\nunseen = set([base_url])\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nasync def crawl(url, session):\n    r = await session.get(url)\n    html = await r.text()\n    await asyncio.sleep(0.1)        # slightly delay for downloading\n    return html\n\n\nasync def main(loop):\n    pool = mp.Pool(2)               # slightly affected\n    async with aiohttp.ClientSession() as session:\n        count = 1\n        while len(unseen) != 0:\n            if restricted_crawl and len(seen) > 20:\n                break\n            tasks = [loop.create_task(crawl(url, session)) for url in unseen]\n            finished, unfinished = await asyncio.wait(tasks)\n            htmls = [f.result() for f in finished]\n\n            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n            results = [j.get() for j in parse_jobs]\n\n            seen.update(unseen)\n            unseen.clear()\n            for title, page_urls, url in results:\n                print(count, title, url)\n                unseen.update(page_urls - seen)\n                count += 1\n\nif __name__ == \"__main__\":\n    t1 = time.time()\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main(loop))\n    loop.close()\n    print(\"Async total time: \", time.time() - t1)\n```\n","source":"_posts/python/爬虫整理-(四)-多进程分布式与异步.md","raw":"---\ntitle: 爬虫整理（四）多进程分布式与异步\ndate: 2018-12-25 11:33:19\ntags:\ncategories: python练习\n---\n\n有的时候，爬取速度不快，就要想一些其他的办法。\n比如多进程多线程以及异步。\n不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。\n爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。\n\n多进程分布式与异步的代码如下：\n\n```\nfrom urllib.request import urlopen, urljoin\nfrom bs4 import BeautifulSoup\nimport multiprocessing as mp\nimport re\nimport time\n\n\ndef crawl(url):\n    response = urlopen(url)\n    time.sleep(0.1)             # slightly delay for downloading\n    return response.read().decode()\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])   # remove duplication\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nif __name__ == '__main__':\n    base_url = 'https://morvanzhou.github.io/'\n    # base_url = \"http://127.0.0.1:4000/\"\n\n    # DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\n    if base_url != \"http://127.0.0.1:4000/\":\n        restricted_crawl = True\n    else:\n        restricted_crawl = False\n\n    unseen = set([base_url,])\n    seen = set()\n\n    pool = mp.Pool(4)                       # number strongly affected\n    count, t1 = 1, time.time()\n\n    while len(unseen) != 0:              # still get some url to visit\n        if restricted_crawl and len(seen) > 20:\n            break\n        print('\\nDistributed Crawling...')\n        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]\n        htmls = [j.get() for j in crawl_jobs]                                       # request connection\n        htmls = [h for h in htmls if h is not None]     # remove None\n\n        print('\\nDistributed Parsing...')\n        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n        results = [j.get() for j in parse_jobs]                                     # parse html\n\n        print('\\nAnalysing...')\n        seen.update(unseen)\n        unseen.clear()\n\n        for title, page_urls, url in results:\n                print(count, title, url)\n                count += 1\n                unseen.update(page_urls - seen)\n\n    print('Total time: %.1f s' % (time.time()-t1, ))\n\n```\n\n```\nimport aiohttp\nimport asyncio\nimport time\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urljoin\nimport re\nimport multiprocessing as mp\n\nbase_url = \"https://morvanzhou.github.io/\"\n# base_url = \"http://127.0.0.1:4000/\"\n\n# DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\nif base_url != \"http://127.0.0.1:4000/\":\n    restricted_crawl = True\nelse:\n    restricted_crawl = False\n\nseen = set()\nunseen = set([base_url])\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nasync def crawl(url, session):\n    r = await session.get(url)\n    html = await r.text()\n    await asyncio.sleep(0.1)        # slightly delay for downloading\n    return html\n\n\nasync def main(loop):\n    pool = mp.Pool(2)               # slightly affected\n    async with aiohttp.ClientSession() as session:\n        count = 1\n        while len(unseen) != 0:\n            if restricted_crawl and len(seen) > 20:\n                break\n            tasks = [loop.create_task(crawl(url, session)) for url in unseen]\n            finished, unfinished = await asyncio.wait(tasks)\n            htmls = [f.result() for f in finished]\n\n            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n            results = [j.get() for j in parse_jobs]\n\n            seen.update(unseen)\n            unseen.clear()\n            for title, page_urls, url in results:\n                print(count, title, url)\n                unseen.update(page_urls - seen)\n                count += 1\n\nif __name__ == \"__main__\":\n    t1 = time.time()\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main(loop))\n    loop.close()\n    print(\"Async total time: \", time.time() - t1)\n```\n","slug":"python/爬虫整理-(四)-多进程分布式与异步","published":1,"updated":"2020-04-10T16:46:16.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtugv003c74ux0hw10tb7","content":"<p>有的时候，爬取速度不快，就要想一些其他的办法。<br>比如多进程多线程以及异步。<br>不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。<br>爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。</p>\n<p>多进程分布式与异步的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen, urljoin</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\">import re</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def crawl(url):</span><br><span class=\"line\">    response = urlopen(url)</span><br><span class=\"line\">    time.sleep(0.1)             # slightly delay for downloading</span><br><span class=\"line\">    return response.read().decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])   # remove duplication</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    base_url = &apos;https://morvanzhou.github.io/&apos;</span><br><span class=\"line\">    # base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    # DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">    if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">        restricted_crawl = True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">    unseen = set([base_url,])</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\"></span><br><span class=\"line\">    pool = mp.Pool(4)                       # number strongly affected</span><br><span class=\"line\">    count, t1 = 1, time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    while len(unseen) != 0:              # still get some url to visit</span><br><span class=\"line\">        if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;\\nDistributed Crawling...&apos;)</span><br><span class=\"line\">        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]</span><br><span class=\"line\">        htmls = [j.get() for j in crawl_jobs]                                       # request connection</span><br><span class=\"line\">        htmls = [h for h in htmls if h is not None]     # remove None</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nDistributed Parsing...&apos;)</span><br><span class=\"line\">        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">        results = [j.get() for j in parse_jobs]                                     # parse html</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nAnalysing...&apos;)</span><br><span class=\"line\">        seen.update(unseen)</span><br><span class=\"line\">        unseen.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">        for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Total time: %.1f s&apos; % (time.time()-t1, ))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import aiohttp</span><br><span class=\"line\">import asyncio</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urljoin</span><br><span class=\"line\">import re</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://morvanzhou.github.io/&quot;</span><br><span class=\"line\"># base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">    restricted_crawl = True</span><br><span class=\"line\">else:</span><br><span class=\"line\">    restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">seen = set()</span><br><span class=\"line\">unseen = set([base_url])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def crawl(url, session):</span><br><span class=\"line\">    r = await session.get(url)</span><br><span class=\"line\">    html = await r.text()</span><br><span class=\"line\">    await asyncio.sleep(0.1)        # slightly delay for downloading</span><br><span class=\"line\">    return html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def main(loop):</span><br><span class=\"line\">    pool = mp.Pool(2)               # slightly affected</span><br><span class=\"line\">    async with aiohttp.ClientSession() as session:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        while len(unseen) != 0:</span><br><span class=\"line\">            if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">                break</span><br><span class=\"line\">            tasks = [loop.create_task(crawl(url, session)) for url in unseen]</span><br><span class=\"line\">            finished, unfinished = await asyncio.wait(tasks)</span><br><span class=\"line\">            htmls = [f.result() for f in finished]</span><br><span class=\"line\"></span><br><span class=\"line\">            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">            results = [j.get() for j in parse_jobs]</span><br><span class=\"line\"></span><br><span class=\"line\">            seen.update(unseen)</span><br><span class=\"line\">            unseen.clear()</span><br><span class=\"line\">            for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    t1 = time.time()</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete(main(loop))</span><br><span class=\"line\">    loop.close()</span><br><span class=\"line\">    print(&quot;Async total time: &quot;, time.time() - t1)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有的时候，爬取速度不快，就要想一些其他的办法。<br>比如多进程多线程以及异步。<br>不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。<br>爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。</p>\n<p>多进程分布式与异步的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen, urljoin</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\">import re</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def crawl(url):</span><br><span class=\"line\">    response = urlopen(url)</span><br><span class=\"line\">    time.sleep(0.1)             # slightly delay for downloading</span><br><span class=\"line\">    return response.read().decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])   # remove duplication</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    base_url = &apos;https://morvanzhou.github.io/&apos;</span><br><span class=\"line\">    # base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    # DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">    if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">        restricted_crawl = True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">    unseen = set([base_url,])</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\"></span><br><span class=\"line\">    pool = mp.Pool(4)                       # number strongly affected</span><br><span class=\"line\">    count, t1 = 1, time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    while len(unseen) != 0:              # still get some url to visit</span><br><span class=\"line\">        if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;\\nDistributed Crawling...&apos;)</span><br><span class=\"line\">        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]</span><br><span class=\"line\">        htmls = [j.get() for j in crawl_jobs]                                       # request connection</span><br><span class=\"line\">        htmls = [h for h in htmls if h is not None]     # remove None</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nDistributed Parsing...&apos;)</span><br><span class=\"line\">        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">        results = [j.get() for j in parse_jobs]                                     # parse html</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nAnalysing...&apos;)</span><br><span class=\"line\">        seen.update(unseen)</span><br><span class=\"line\">        unseen.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">        for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Total time: %.1f s&apos; % (time.time()-t1, ))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import aiohttp</span><br><span class=\"line\">import asyncio</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urljoin</span><br><span class=\"line\">import re</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://morvanzhou.github.io/&quot;</span><br><span class=\"line\"># base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">    restricted_crawl = True</span><br><span class=\"line\">else:</span><br><span class=\"line\">    restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">seen = set()</span><br><span class=\"line\">unseen = set([base_url])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def crawl(url, session):</span><br><span class=\"line\">    r = await session.get(url)</span><br><span class=\"line\">    html = await r.text()</span><br><span class=\"line\">    await asyncio.sleep(0.1)        # slightly delay for downloading</span><br><span class=\"line\">    return html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def main(loop):</span><br><span class=\"line\">    pool = mp.Pool(2)               # slightly affected</span><br><span class=\"line\">    async with aiohttp.ClientSession() as session:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        while len(unseen) != 0:</span><br><span class=\"line\">            if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">                break</span><br><span class=\"line\">            tasks = [loop.create_task(crawl(url, session)) for url in unseen]</span><br><span class=\"line\">            finished, unfinished = await asyncio.wait(tasks)</span><br><span class=\"line\">            htmls = [f.result() for f in finished]</span><br><span class=\"line\"></span><br><span class=\"line\">            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">            results = [j.get() for j in parse_jobs]</span><br><span class=\"line\"></span><br><span class=\"line\">            seen.update(unseen)</span><br><span class=\"line\">            unseen.clear()</span><br><span class=\"line\">            for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    t1 = time.time()</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete(main(loop))</span><br><span class=\"line\">    loop.close()</span><br><span class=\"line\">    print(&quot;Async total time: &quot;, time.time() - t1)</span><br></pre></td></tr></table></figure>\n"},{"title":"时间格式","date":"2019-07-10T03:05:31.000Z","_content":"\n## mysql 中的时间格式\n1. TIME [3 bytes] : [HH:MM:SS]     [-838:59:59 ~ + 838:59:59]\n2. DATE [3 bytes] : [YYYY-MM-DD]   [1000-01-01 ~ 9999-12-31]\n3. DATETIME [8 bytes] : [YYYY-MM-DD HH:MM:SS]  [1000-01-01 00:00:00 ~ 9999-12-31 23:59:59]\n4. TIMESTAMP [4 bytes] : [1970-01-01 00:00:01 ~ 2038-01-19 03:14:07]\n5. YEAR [1 bytes] : [YYYY]  [1901 ~ 2155]\n\n**常用的是 DATE, DATETIME, 和时间戳 TIMESTAMP**\n\n## python中的 time\n1. 时间模块 time\n2. 基本时间日期模块 datetime\n3. 日历模块 Calendar (用的较少)\n\n```\nimport time， datetime\ntimestamp = time.time()\nprint(timestamp,type(timestamp))  # 1563432562.7813718 <class 'float'>  获取当前时间戳，数据类型\nprint(datetime.datetime.now())  # 2019-07-18 14:51:57.888187\n\n```\n\n","source":"_posts/python/时间格式.md","raw":"\n---\ntitle: 时间格式\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## mysql 中的时间格式\n1. TIME [3 bytes] : [HH:MM:SS]     [-838:59:59 ~ + 838:59:59]\n2. DATE [3 bytes] : [YYYY-MM-DD]   [1000-01-01 ~ 9999-12-31]\n3. DATETIME [8 bytes] : [YYYY-MM-DD HH:MM:SS]  [1000-01-01 00:00:00 ~ 9999-12-31 23:59:59]\n4. TIMESTAMP [4 bytes] : [1970-01-01 00:00:01 ~ 2038-01-19 03:14:07]\n5. YEAR [1 bytes] : [YYYY]  [1901 ~ 2155]\n\n**常用的是 DATE, DATETIME, 和时间戳 TIMESTAMP**\n\n## python中的 time\n1. 时间模块 time\n2. 基本时间日期模块 datetime\n3. 日历模块 Calendar (用的较少)\n\n```\nimport time， datetime\ntimestamp = time.time()\nprint(timestamp,type(timestamp))  # 1563432562.7813718 <class 'float'>  获取当前时间戳，数据类型\nprint(datetime.datetime.now())  # 2019-07-18 14:51:57.888187\n\n```\n\n","slug":"python/时间格式","published":1,"updated":"2020-04-10T16:46:16.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuh1003d74uxbrnp5f2t","content":"<h2 id=\"mysql-中的时间格式\"><a href=\"#mysql-中的时间格式\" class=\"headerlink\" title=\"mysql 中的时间格式\"></a>mysql 中的时间格式</h2><ol>\n<li>TIME [3 bytes] : [HH:MM:SS]     [-838:59:59 ~ + 838:59:59]</li>\n<li>DATE [3 bytes] : [YYYY-MM-DD]   [1000-01-01 ~ 9999-12-31]</li>\n<li>DATETIME [8 bytes] : [YYYY-MM-DD HH:MM:SS]  [1000-01-01 00:00:00 ~ 9999-12-31 23:59:59]</li>\n<li>TIMESTAMP [4 bytes] : [1970-01-01 00:00:01 ~ 2038-01-19 03:14:07]</li>\n<li>YEAR [1 bytes] : [YYYY]  [1901 ~ 2155]</li>\n</ol>\n<p><strong>常用的是 DATE, DATETIME, 和时间戳 TIMESTAMP</strong></p>\n<h2 id=\"python中的-time\"><a href=\"#python中的-time\" class=\"headerlink\" title=\"python中的 time\"></a>python中的 time</h2><ol>\n<li>时间模块 time</li>\n<li>基本时间日期模块 datetime</li>\n<li>日历模块 Calendar (用的较少)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time， datetime</span><br><span class=\"line\">timestamp = time.time()</span><br><span class=\"line\">print(timestamp,type(timestamp))  # 1563432562.7813718 &lt;class &apos;float&apos;&gt;  获取当前时间戳，数据类型</span><br><span class=\"line\">print(datetime.datetime.now())  # 2019-07-18 14:51:57.888187</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mysql-中的时间格式\"><a href=\"#mysql-中的时间格式\" class=\"headerlink\" title=\"mysql 中的时间格式\"></a>mysql 中的时间格式</h2><ol>\n<li>TIME [3 bytes] : [HH:MM:SS]     [-838:59:59 ~ + 838:59:59]</li>\n<li>DATE [3 bytes] : [YYYY-MM-DD]   [1000-01-01 ~ 9999-12-31]</li>\n<li>DATETIME [8 bytes] : [YYYY-MM-DD HH:MM:SS]  [1000-01-01 00:00:00 ~ 9999-12-31 23:59:59]</li>\n<li>TIMESTAMP [4 bytes] : [1970-01-01 00:00:01 ~ 2038-01-19 03:14:07]</li>\n<li>YEAR [1 bytes] : [YYYY]  [1901 ~ 2155]</li>\n</ol>\n<p><strong>常用的是 DATE, DATETIME, 和时间戳 TIMESTAMP</strong></p>\n<h2 id=\"python中的-time\"><a href=\"#python中的-time\" class=\"headerlink\" title=\"python中的 time\"></a>python中的 time</h2><ol>\n<li>时间模块 time</li>\n<li>基本时间日期模块 datetime</li>\n<li>日历模块 Calendar (用的较少)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time， datetime</span><br><span class=\"line\">timestamp = time.time()</span><br><span class=\"line\">print(timestamp,type(timestamp))  # 1563432562.7813718 &lt;class &apos;float&apos;&gt;  获取当前时间戳，数据类型</span><br><span class=\"line\">print(datetime.datetime.now())  # 2019-07-18 14:51:57.888187</span><br></pre></td></tr></table></figure>\n"},{"title":"爬取百度百科词条写入数据库","date":"2018-12-25T03:30:41.000Z","_content":"\n这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。\n如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。\n**数据库中可以设置url唯一**\n数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。\n\n代码如下：\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\nimport pymysql.cursors   # 数据库\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E5%8F%B2%E8%AE%B0\"]\n\nfor i in range(1000):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n\n# 链接数据库\n    connection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\n\n    try:\n        # 获取会话指针\n        with connection.cursor() as cursor:\n            # 创建sql 语句\n            sql = 'insert into `urls`(`urlname`,`urlhref`)values(%s,%s)'\n            # 执行sql 语句\n            cursor.execute(sql,(soup.find('h1').get_text(),url))\n            # 提交\n            connection.commit()\n    except:\n        pass \n    finally:\n        connection.close()\n```\n\n**读取数据库**\n```\nimport pymysql.cursors\n\nconnection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\ntry:\n    # 获取会话指针\n    with connection.cursor() as cursor:\n        # 查询sql 语句\n        sql = 'select `urlname` , `urlhref` from `urls` where `id` is not null'\n        # 执行sql 语句\n        conut = cursor.execute(sql)\n        print(conut)\n\n        # result = cursor.fetchall()\n        # print(result)\n\nfinally:\n    connection.close()\n\n```\n","source":"_posts/python/爬取百度百科词条写入数据库.md","raw":"\n---\ntitle: 爬取百度百科词条写入数据库\ndate: 2018-12-25 11:30:41\ntags:\ncategories: python练习\n---\n\n这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。\n如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。\n**数据库中可以设置url唯一**\n数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。\n\n代码如下：\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\nimport pymysql.cursors   # 数据库\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E5%8F%B2%E8%AE%B0\"]\n\nfor i in range(1000):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n\n# 链接数据库\n    connection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\n\n    try:\n        # 获取会话指针\n        with connection.cursor() as cursor:\n            # 创建sql 语句\n            sql = 'insert into `urls`(`urlname`,`urlhref`)values(%s,%s)'\n            # 执行sql 语句\n            cursor.execute(sql,(soup.find('h1').get_text(),url))\n            # 提交\n            connection.commit()\n    except:\n        pass \n    finally:\n        connection.close()\n```\n\n**读取数据库**\n```\nimport pymysql.cursors\n\nconnection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\ntry:\n    # 获取会话指针\n    with connection.cursor() as cursor:\n        # 查询sql 语句\n        sql = 'select `urlname` , `urlhref` from `urls` where `id` is not null'\n        # 执行sql 语句\n        conut = cursor.execute(sql)\n        print(conut)\n\n        # result = cursor.fetchall()\n        # print(result)\n\nfinally:\n    connection.close()\n\n```\n","slug":"python/爬取百度百科词条写入数据库","published":1,"updated":"2020-04-10T16:46:16.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuh8003g74uxsgmaz031","content":"<p>这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。<br>如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。<br><strong>数据库中可以设置url唯一</strong><br>数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql.cursors   # 数据库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E5%8F%B2%E8%AE%B0&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(1000):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(&quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接数据库</span><br><span class=\"line\">    connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获取会话指针</span><br><span class=\"line\">        with connection.cursor() as cursor:</span><br><span class=\"line\">            # 创建sql 语句</span><br><span class=\"line\">            sql = &apos;insert into `urls`(`urlname`,`urlhref`)values(%s,%s)&apos;</span><br><span class=\"line\">            # 执行sql 语句</span><br><span class=\"line\">            cursor.execute(sql,(soup.find(&apos;h1&apos;).get_text(),url))</span><br><span class=\"line\">            # 提交</span><br><span class=\"line\">            connection.commit()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass </span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>读取数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql.cursors</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\">try:</span><br><span class=\"line\">    # 获取会话指针</span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # 查询sql 语句</span><br><span class=\"line\">        sql = &apos;select `urlname` , `urlhref` from `urls` where `id` is not null&apos;</span><br><span class=\"line\">        # 执行sql 语句</span><br><span class=\"line\">        conut = cursor.execute(sql)</span><br><span class=\"line\">        print(conut)</span><br><span class=\"line\"></span><br><span class=\"line\">        # result = cursor.fetchall()</span><br><span class=\"line\">        # print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。<br>如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。<br><strong>数据库中可以设置url唯一</strong><br>数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql.cursors   # 数据库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E5%8F%B2%E8%AE%B0&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(1000):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(&quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接数据库</span><br><span class=\"line\">    connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获取会话指针</span><br><span class=\"line\">        with connection.cursor() as cursor:</span><br><span class=\"line\">            # 创建sql 语句</span><br><span class=\"line\">            sql = &apos;insert into `urls`(`urlname`,`urlhref`)values(%s,%s)&apos;</span><br><span class=\"line\">            # 执行sql 语句</span><br><span class=\"line\">            cursor.execute(sql,(soup.find(&apos;h1&apos;).get_text(),url))</span><br><span class=\"line\">            # 提交</span><br><span class=\"line\">            connection.commit()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass </span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>读取数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql.cursors</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\">try:</span><br><span class=\"line\">    # 获取会话指针</span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # 查询sql 语句</span><br><span class=\"line\">        sql = &apos;select `urlname` , `urlhref` from `urls` where `id` is not null&apos;</span><br><span class=\"line\">        # 执行sql 语句</span><br><span class=\"line\">        conut = cursor.execute(sql)</span><br><span class=\"line\">        print(conut)</span><br><span class=\"line\"></span><br><span class=\"line\">        # result = cursor.fetchall()</span><br><span class=\"line\">        # print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"爬虫整理（五）slenium","date":"2018-12-25T03:15:09.000Z","_content":"\n\n\n首先使用pip安装并加入环境变量\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# firefox plugin\n# https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu\n\n# hide browser window\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")       # define headless\n\n# add the option when creating driver\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.get(\"https://morvanzhou.github.io/\")\ndriver.find_element_by_xpath(u\"//img[@alt='强化学习 (Reinforcement Learning)']\").click()\ndriver.find_element_by_link_text(\"About\").click()\ndriver.find_element_by_link_text(u\"赞助\").click()\ndriver.find_element_by_link_text(u\"教程 ▾\").click()\ndriver.find_element_by_link_text(u\"数据处理 ▾\").click()\ndriver.find_element_by_link_text(u\"网页爬虫\").click()\n\nprint(driver.page_source[:200])\ndriver.get_screenshot_as_file(\"./img/sreenshot2.png\")\ndriver.close()\nprint('finish')\n```\n","source":"_posts/python/爬虫整理-(五)--slenium.md","raw":"\n---\ntitle: 爬虫整理（五）slenium\ndate: 2018-12-25 11:15:09\ntags:\ncategories: python练习\n---\n\n\n\n首先使用pip安装并加入环境变量\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# firefox plugin\n# https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu\n\n# hide browser window\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")       # define headless\n\n# add the option when creating driver\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.get(\"https://morvanzhou.github.io/\")\ndriver.find_element_by_xpath(u\"//img[@alt='强化学习 (Reinforcement Learning)']\").click()\ndriver.find_element_by_link_text(\"About\").click()\ndriver.find_element_by_link_text(u\"赞助\").click()\ndriver.find_element_by_link_text(u\"教程 ▾\").click()\ndriver.find_element_by_link_text(u\"数据处理 ▾\").click()\ndriver.find_element_by_link_text(u\"网页爬虫\").click()\n\nprint(driver.page_source[:200])\ndriver.get_screenshot_as_file(\"./img/sreenshot2.png\")\ndriver.close()\nprint('finish')\n```\n","slug":"python/爬虫整理-(五)--slenium","published":1,"updated":"2020-04-10T16:46:16.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuhd003h74uxe39n2c7n","content":"<p>首先使用pip安装并加入环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.chrome.options import Options</span><br><span class=\"line\"></span><br><span class=\"line\"># firefox plugin</span><br><span class=\"line\"># https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"># hide browser window</span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)       # define headless</span><br><span class=\"line\"></span><br><span class=\"line\"># add the option when creating driver</span><br><span class=\"line\">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class=\"line\">driver.get(&quot;https://morvanzhou.github.io/&quot;)</span><br><span class=\"line\">driver.find_element_by_xpath(u&quot;//img[@alt=&apos;强化学习 (Reinforcement Learning)&apos;]&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(&quot;About&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;赞助&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;教程 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;数据处理 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;网页爬虫&quot;).click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.page_source[:200])</span><br><span class=\"line\">driver.get_screenshot_as_file(&quot;./img/sreenshot2.png&quot;)</span><br><span class=\"line\">driver.close()</span><br><span class=\"line\">print(&apos;finish&apos;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先使用pip安装并加入环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.chrome.options import Options</span><br><span class=\"line\"></span><br><span class=\"line\"># firefox plugin</span><br><span class=\"line\"># https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"># hide browser window</span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)       # define headless</span><br><span class=\"line\"></span><br><span class=\"line\"># add the option when creating driver</span><br><span class=\"line\">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class=\"line\">driver.get(&quot;https://morvanzhou.github.io/&quot;)</span><br><span class=\"line\">driver.find_element_by_xpath(u&quot;//img[@alt=&apos;强化学习 (Reinforcement Learning)&apos;]&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(&quot;About&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;赞助&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;教程 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;数据处理 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;网页爬虫&quot;).click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.page_source[:200])</span><br><span class=\"line\">driver.get_screenshot_as_file(&quot;./img/sreenshot2.png&quot;)</span><br><span class=\"line\">driver.close()</span><br><span class=\"line\">print(&apos;finish&apos;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"爬虫整理（一）使用re和urllib","date":"2018-12-25T03:05:31.000Z","_content":"\n\n\n### 完整代码\n```\nfrom urllib.request import urlopen\n\n\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n        \n    ).decode('utf-8')\nprint(html)\n\n\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html)\nprint(\"\\nPage title is: \", res[0])\n\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \nprint(\"\\nPage paragraph is: \", res[0])\n\n\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n## 正文\n### 使用re和urllib\n```\nfrom urllib.request import urlopen\n# if has Chinese, apply decode()\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\"\n).read().decode('utf-8')  \nprint(html) # 打开，读取，转换可显示中文，最后打印出来\n```\n**结果显示**\n![print(html)](https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 接下来，使用re筛选数据\n```\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html) \nprint(res)  # ['Scraping tutorial 1 | 莫烦Python'] # 列表\nprint(res[0]) # Scraping tutorial 1 | 莫烦Python\nres = re.findall(r\"<p>(.*?)</p>\", html)\nprint(res)  # []\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \n# re.DOTALL if multi line\nprnt(res)\nprint(res[0]) \n```\n![以上五个的print数据](https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n![筛选链接](https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/python/爬虫整理（一）使用re和urllib.md","raw":"\n---\ntitle: 爬虫整理（一）使用re和urllib\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n### 完整代码\n```\nfrom urllib.request import urlopen\n\n\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n        \n    ).decode('utf-8')\nprint(html)\n\n\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html)\nprint(\"\\nPage title is: \", res[0])\n\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \nprint(\"\\nPage paragraph is: \", res[0])\n\n\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n## 正文\n### 使用re和urllib\n```\nfrom urllib.request import urlopen\n# if has Chinese, apply decode()\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\"\n).read().decode('utf-8')  \nprint(html) # 打开，读取，转换可显示中文，最后打印出来\n```\n**结果显示**\n![print(html)](https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 接下来，使用re筛选数据\n```\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html) \nprint(res)  # ['Scraping tutorial 1 | 莫烦Python'] # 列表\nprint(res[0]) # Scraping tutorial 1 | 莫烦Python\nres = re.findall(r\"<p>(.*?)</p>\", html)\nprint(res)  # []\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \n# re.DOTALL if multi line\nprnt(res)\nprint(res[0]) \n```\n![以上五个的print数据](https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n![筛选链接](https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"python/爬虫整理（一）使用re和urllib","published":1,"updated":"2020-04-10T16:46:16.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuhp003k74uxj5do8sju","content":"<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">        </span><br><span class=\"line\">    ).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html)</span><br><span class=\"line\">print(&quot;\\nPage title is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\">print(&quot;\\nPage paragraph is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用re和urllib\"><a href=\"#使用re和urllib\" class=\"headerlink\" title=\"使用re和urllib\"></a>使用re和urllib</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;</span><br><span class=\"line\">).read().decode(&apos;utf-8&apos;)  </span><br><span class=\"line\">print(html) # 打开，读取，转换可显示中文，最后打印出来</span><br></pre></td></tr></table></figure>\n<p><strong>结果显示</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print(html)\"></p>\n<h4 id=\"接下来，使用re筛选数据\"><a href=\"#接下来，使用re筛选数据\" class=\"headerlink\" title=\"接下来，使用re筛选数据\"></a>接下来，使用re筛选数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html) </span><br><span class=\"line\">print(res)  # [&apos;Scraping tutorial 1 | 莫烦Python&apos;] # 列表</span><br><span class=\"line\">print(res[0]) # Scraping tutorial 1 | 莫烦Python</span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html)</span><br><span class=\"line\">print(res)  # []</span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\"># re.DOTALL if multi line</span><br><span class=\"line\">prnt(res)</span><br><span class=\"line\">print(res[0])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"以上五个的print数据\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"筛选链接\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">        </span><br><span class=\"line\">    ).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html)</span><br><span class=\"line\">print(&quot;\\nPage title is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\">print(&quot;\\nPage paragraph is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用re和urllib\"><a href=\"#使用re和urllib\" class=\"headerlink\" title=\"使用re和urllib\"></a>使用re和urllib</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;</span><br><span class=\"line\">).read().decode(&apos;utf-8&apos;)  </span><br><span class=\"line\">print(html) # 打开，读取，转换可显示中文，最后打印出来</span><br></pre></td></tr></table></figure>\n<p><strong>结果显示</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print(html)\"></p>\n<h4 id=\"接下来，使用re筛选数据\"><a href=\"#接下来，使用re筛选数据\" class=\"headerlink\" title=\"接下来，使用re筛选数据\"></a>接下来，使用re筛选数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html) </span><br><span class=\"line\">print(res)  # [&apos;Scraping tutorial 1 | 莫烦Python&apos;] # 列表</span><br><span class=\"line\">print(res[0]) # Scraping tutorial 1 | 莫烦Python</span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html)</span><br><span class=\"line\">print(res)  # []</span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\"># re.DOTALL if multi line</span><br><span class=\"line\">prnt(res)</span><br><span class=\"line\">print(res[0])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"以上五个的print数据\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"筛选链接\"></p>\n"},{"title":"给博客加日期","date":"2019-02-28T13:20:41.000Z","_content":"\n之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。\n原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。\n![](https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**代码如下**\n```\nimport os\nimport sys\nimport time\n\npath = r'E:\\WeiLai\\OneDrive\\blog\\source\\_posts'\nfor root, dir, files in os.walk(path):\n    for file in files:\n        full_path = os.path.join(root, file)\n        if '.md' in full_path:\n            mtime = os.stat(full_path).st_mtime\n            file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))\n            date = 'date: '+file_modify_time\n\n            with open (full_path,'r', encoding='UTF-8') as f:\n                s = f.read()\n                q = s.partition('tags:')       \n                t = q[0] + date +'\\n' + q [1] + q[2]\n                with open (full_path,'w', encoding='UTF-8') as f:\n                    f.write(t)\n```\n![修改前](https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![修改后](https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","source":"_posts/python/给博客加日期.md","raw":"---\ntitle: 给博客加日期\ndate: 2019-02-28 21:20:41\ntags:\ncategories: python练习\n---\n\n之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。\n原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。\n![](https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**代码如下**\n```\nimport os\nimport sys\nimport time\n\npath = r'E:\\WeiLai\\OneDrive\\blog\\source\\_posts'\nfor root, dir, files in os.walk(path):\n    for file in files:\n        full_path = os.path.join(root, file)\n        if '.md' in full_path:\n            mtime = os.stat(full_path).st_mtime\n            file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))\n            date = 'date: '+file_modify_time\n\n            with open (full_path,'r', encoding='UTF-8') as f:\n                s = f.read()\n                q = s.partition('tags:')       \n                t = q[0] + date +'\\n' + q [1] + q[2]\n                with open (full_path,'w', encoding='UTF-8') as f:\n                    f.write(t)\n```\n![修改前](https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![修改后](https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","slug":"python/给博客加日期","published":1,"updated":"2020-04-10T16:46:16.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuhu003l74uxtcstxygn","content":"<p>之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。<br>原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">path = r&apos;E:\\WeiLai\\OneDrive\\blog\\source\\_posts&apos;</span><br><span class=\"line\">for root, dir, files in os.walk(path):</span><br><span class=\"line\">    for file in files:</span><br><span class=\"line\">        full_path = os.path.join(root, file)</span><br><span class=\"line\">        if &apos;.md&apos; in full_path:</span><br><span class=\"line\">            mtime = os.stat(full_path).st_mtime</span><br><span class=\"line\">            file_modify_time = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(mtime))</span><br><span class=\"line\">            date = &apos;date: &apos;+file_modify_time</span><br><span class=\"line\"></span><br><span class=\"line\">            with open (full_path,&apos;r&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                s = f.read()</span><br><span class=\"line\">                q = s.partition(&apos;tags:&apos;)       </span><br><span class=\"line\">                t = q[0] + date +&apos;\\n&apos; + q [1] + q[2]</span><br><span class=\"line\">                with open (full_path,&apos;w&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                    f.write(t)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改前\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。<br>原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">path = r&apos;E:\\WeiLai\\OneDrive\\blog\\source\\_posts&apos;</span><br><span class=\"line\">for root, dir, files in os.walk(path):</span><br><span class=\"line\">    for file in files:</span><br><span class=\"line\">        full_path = os.path.join(root, file)</span><br><span class=\"line\">        if &apos;.md&apos; in full_path:</span><br><span class=\"line\">            mtime = os.stat(full_path).st_mtime</span><br><span class=\"line\">            file_modify_time = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(mtime))</span><br><span class=\"line\">            date = &apos;date: &apos;+file_modify_time</span><br><span class=\"line\"></span><br><span class=\"line\">            with open (full_path,&apos;r&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                s = f.read()</span><br><span class=\"line\">                q = s.partition(&apos;tags:&apos;)       </span><br><span class=\"line\">                t = q[0] + date +&apos;\\n&apos; + q [1] + q[2]</span><br><span class=\"line\">                with open (full_path,&apos;w&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                    f.write(t)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改前\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后\"></p>\n"},{"title":"爬虫整理（二）BeautifulSoup","date":"2018-12-25T03:05:31.000Z","_content":"\n#### BeautifulSoup 解析：基础\n[本段完整代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb)\n\n![安装命令行](https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n具体安装过程可自行搜索。\n**beautifulSoup使用过程**\n1. 选择要爬的网址 (url)\n2. 使用 python 打开这个网址 (urlopen等)\n3. 读取网页信息 (read() 出来)\n4. 将读取的信息放入 BeautifulSoup\n5. 使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)\n```\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n).decode('utf-8')\n```\n![与上章同一个网页](https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用BeautifulSoup筛选数据**\n```\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, features='lxml')  #以 lxml 的这种形式加载\nprint(soup)\n```\n![可以看到原格式转为如上形式](https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nprint(soup.h1)   # 输出<h1> 标题\nprint(soup.p)  # 输出<p> 标题\n\nall_href = soup.find_all('a')\nprint('\\n',all_href)\nall_href = [l['href'] for l in all_href] \n#像 Python 字典的形式, 用 key 来读取 l[\"href\"]\nprint('\\n', all_href)\n```\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页:CSS\n\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb)\n![网页源码](https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/list.html\").read(\n).decode('utf-8')\n\nsoup = BeautifulSoup(html, features='lxml')\n\n# use class to narrow search\nmonth = soup.find_all('li', {\"class\": \"month\"})\nprint(month)\n\n#要找所有 class=month 的信息. 并打印出它们的 tag 内文字\nfor m in month:\n    print(m.get_text())   # 打印tag中的文字\n\n\njan = soup.find('ul', {\"class\": 'jan'})\nprint('\\n',jan)\nd_jan = jan.find_all('li')              # use jan as a parent\nprint('\\n',d_jan)\nfor d in d_jan:\n    print('\\n',d.get_text())\n```\n![get_txt()](https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![详细情况](https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页正则表达式\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb)\n```\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/table.html\").read(\n).decode('utf-8')\nprint(html)\n\nsoup = BeautifulSoup(html, features='lxml')\n\nimg_links = soup.find_all(\"img\", {\"src\": re.compile('.*?\\.jpg')})\nfor link in img_links:\n    print(link['src'])\n\nprint('\\n')\n\ncourse_links = soup.find_all('a', {'href': re.compile('https://morvan.*')})\nfor link in course_links:\n    print(link['href'])\n```\n我们发现, 如果是图片, 它们都藏在这样一个 tag 中:\n```\n<td>\n    <img src=\"https://morvanzhou.github.io/static/img/course_cover/tf.jpg\">\n</td>\n```\n用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r'.*?\\.jpg' 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.\n想要的链接都有统一的形式, 就是开头都会有 https://morvan., 定一个正则, 让 BeautifulSoup 找到符合规则的链接.\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 一个小练习来熟悉\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711\"]\n\nfor i in range(20):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\n      \"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n```\n","source":"_posts/python/爬虫整理（二）BeautifulSoup.md","raw":"---\ntitle: 爬虫整理（二）BeautifulSoup\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n#### BeautifulSoup 解析：基础\n[本段完整代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb)\n\n![安装命令行](https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n具体安装过程可自行搜索。\n**beautifulSoup使用过程**\n1. 选择要爬的网址 (url)\n2. 使用 python 打开这个网址 (urlopen等)\n3. 读取网页信息 (read() 出来)\n4. 将读取的信息放入 BeautifulSoup\n5. 使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)\n```\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n).decode('utf-8')\n```\n![与上章同一个网页](https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用BeautifulSoup筛选数据**\n```\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, features='lxml')  #以 lxml 的这种形式加载\nprint(soup)\n```\n![可以看到原格式转为如上形式](https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nprint(soup.h1)   # 输出<h1> 标题\nprint(soup.p)  # 输出<p> 标题\n\nall_href = soup.find_all('a')\nprint('\\n',all_href)\nall_href = [l['href'] for l in all_href] \n#像 Python 字典的形式, 用 key 来读取 l[\"href\"]\nprint('\\n', all_href)\n```\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页:CSS\n\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb)\n![网页源码](https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/list.html\").read(\n).decode('utf-8')\n\nsoup = BeautifulSoup(html, features='lxml')\n\n# use class to narrow search\nmonth = soup.find_all('li', {\"class\": \"month\"})\nprint(month)\n\n#要找所有 class=month 的信息. 并打印出它们的 tag 内文字\nfor m in month:\n    print(m.get_text())   # 打印tag中的文字\n\n\njan = soup.find('ul', {\"class\": 'jan'})\nprint('\\n',jan)\nd_jan = jan.find_all('li')              # use jan as a parent\nprint('\\n',d_jan)\nfor d in d_jan:\n    print('\\n',d.get_text())\n```\n![get_txt()](https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![详细情况](https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页正则表达式\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb)\n```\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/table.html\").read(\n).decode('utf-8')\nprint(html)\n\nsoup = BeautifulSoup(html, features='lxml')\n\nimg_links = soup.find_all(\"img\", {\"src\": re.compile('.*?\\.jpg')})\nfor link in img_links:\n    print(link['src'])\n\nprint('\\n')\n\ncourse_links = soup.find_all('a', {'href': re.compile('https://morvan.*')})\nfor link in course_links:\n    print(link['href'])\n```\n我们发现, 如果是图片, 它们都藏在这样一个 tag 中:\n```\n<td>\n    <img src=\"https://morvanzhou.github.io/static/img/course_cover/tf.jpg\">\n</td>\n```\n用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r'.*?\\.jpg' 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.\n想要的链接都有统一的形式, 就是开头都会有 https://morvan., 定一个正则, 让 BeautifulSoup 找到符合规则的链接.\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 一个小练习来熟悉\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711\"]\n\nfor i in range(20):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\n      \"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n```\n","slug":"python/爬虫整理（二）BeautifulSoup","published":1,"updated":"2020-04-10T16:46:16.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtui0003n74ux3kicdcli","content":"<h4 id=\"BeautifulSoup-解析：基础\"><a href=\"#BeautifulSoup-解析：基础\" class=\"headerlink\" title=\"BeautifulSoup 解析：基础\"></a>BeautifulSoup 解析：基础</h4><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb\" target=\"_blank\" rel=\"noopener\">本段完整代码</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装命令行\"><br>具体安装过程可自行搜索。<br><strong>beautifulSoup使用过程</strong></p>\n<ol>\n<li>选择要爬的网址 (url)</li>\n<li>使用 python 打开这个网址 (urlopen等)</li>\n<li>读取网页信息 (read() 出来)</li>\n<li>将读取的信息放入 BeautifulSoup</li>\n<li>使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与上章同一个网页\"></p>\n<p><strong>使用BeautifulSoup筛选数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)  #以 lxml 的这种形式加载</span><br><span class=\"line\">print(soup)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可以看到原格式转为如上形式\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.h1)   # 输出&lt;h1&gt; 标题</span><br><span class=\"line\">print(soup.p)  # 输出&lt;p&gt; 标题</span><br><span class=\"line\"></span><br><span class=\"line\">all_href = soup.find_all(&apos;a&apos;)</span><br><span class=\"line\">print(&apos;\\n&apos;,all_href)</span><br><span class=\"line\">all_href = [l[&apos;href&apos;] for l in all_href] </span><br><span class=\"line\">#像 Python 字典的形式, 用 key 来读取 l[&quot;href&quot;]</span><br><span class=\"line\">print(&apos;\\n&apos;, all_href)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"BeautifulSoup-解析网页-CSS\"><a href=\"#BeautifulSoup-解析网页-CSS\" class=\"headerlink\" title=\"BeautifulSoup 解析网页:CSS\"></a>BeautifulSoup 解析网页:CSS</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网页源码\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/list.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># use class to narrow search</span><br><span class=\"line\">month = soup.find_all(&apos;li&apos;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</span><br><span class=\"line\">print(month)</span><br><span class=\"line\"></span><br><span class=\"line\">#要找所有 class=month 的信息. 并打印出它们的 tag 内文字</span><br><span class=\"line\">for m in month:</span><br><span class=\"line\">    print(m.get_text())   # 打印tag中的文字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jan = soup.find(&apos;ul&apos;, &#123;&quot;class&quot;: &apos;jan&apos;&#125;)</span><br><span class=\"line\">print(&apos;\\n&apos;,jan)</span><br><span class=\"line\">d_jan = jan.find_all(&apos;li&apos;)              # use jan as a parent</span><br><span class=\"line\">print(&apos;\\n&apos;,d_jan)</span><br><span class=\"line\">for d in d_jan:</span><br><span class=\"line\">    print(&apos;\\n&apos;,d.get_text())</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"get_txt()\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"详细情况\"></p>\n<h3 id=\"BeautifulSoup-解析网页正则表达式\"><a href=\"#BeautifulSoup-解析网页正则表达式\" class=\"headerlink\" title=\"BeautifulSoup 解析网页正则表达式\"></a>BeautifulSoup 解析网页正则表达式</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/table.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">img_links = soup.find_all(&quot;img&quot;, &#123;&quot;src&quot;: re.compile(&apos;.*?\\.jpg&apos;)&#125;)</span><br><span class=\"line\">for link in img_links:</span><br><span class=\"line\">    print(link[&apos;src&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">print(&apos;\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">course_links = soup.find_all(&apos;a&apos;, &#123;&apos;href&apos;: re.compile(&apos;https://morvan.*&apos;)&#125;)</span><br><span class=\"line\">for link in course_links:</span><br><span class=\"line\">    print(link[&apos;href&apos;])</span><br></pre></td></tr></table></figure></p>\n<p>我们发现, 如果是图片, 它们都藏在这样一个 tag 中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    &lt;img src=&quot;https://morvanzhou.github.io/static/img/course_cover/tf.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r’.*?.jpg’ 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.<br>想要的链接都有统一的形式, 就是开头都会有 <a href=\"https://morvan.\" target=\"_blank\" rel=\"noopener\">https://morvan.</a>, 定一个正则, 让 BeautifulSoup 找到符合规则的链接.<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"一个小练习来熟悉\"><a href=\"#一个小练习来熟悉\" class=\"headerlink\" title=\"一个小练习来熟悉\"></a>一个小练习来熟悉</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(20):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(</span><br><span class=\"line\">      &quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"BeautifulSoup-解析：基础\"><a href=\"#BeautifulSoup-解析：基础\" class=\"headerlink\" title=\"BeautifulSoup 解析：基础\"></a>BeautifulSoup 解析：基础</h4><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb\" target=\"_blank\" rel=\"noopener\">本段完整代码</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装命令行\"><br>具体安装过程可自行搜索。<br><strong>beautifulSoup使用过程</strong></p>\n<ol>\n<li>选择要爬的网址 (url)</li>\n<li>使用 python 打开这个网址 (urlopen等)</li>\n<li>读取网页信息 (read() 出来)</li>\n<li>将读取的信息放入 BeautifulSoup</li>\n<li>使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与上章同一个网页\"></p>\n<p><strong>使用BeautifulSoup筛选数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)  #以 lxml 的这种形式加载</span><br><span class=\"line\">print(soup)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可以看到原格式转为如上形式\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.h1)   # 输出&lt;h1&gt; 标题</span><br><span class=\"line\">print(soup.p)  # 输出&lt;p&gt; 标题</span><br><span class=\"line\"></span><br><span class=\"line\">all_href = soup.find_all(&apos;a&apos;)</span><br><span class=\"line\">print(&apos;\\n&apos;,all_href)</span><br><span class=\"line\">all_href = [l[&apos;href&apos;] for l in all_href] </span><br><span class=\"line\">#像 Python 字典的形式, 用 key 来读取 l[&quot;href&quot;]</span><br><span class=\"line\">print(&apos;\\n&apos;, all_href)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"BeautifulSoup-解析网页-CSS\"><a href=\"#BeautifulSoup-解析网页-CSS\" class=\"headerlink\" title=\"BeautifulSoup 解析网页:CSS\"></a>BeautifulSoup 解析网页:CSS</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网页源码\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/list.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># use class to narrow search</span><br><span class=\"line\">month = soup.find_all(&apos;li&apos;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</span><br><span class=\"line\">print(month)</span><br><span class=\"line\"></span><br><span class=\"line\">#要找所有 class=month 的信息. 并打印出它们的 tag 内文字</span><br><span class=\"line\">for m in month:</span><br><span class=\"line\">    print(m.get_text())   # 打印tag中的文字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jan = soup.find(&apos;ul&apos;, &#123;&quot;class&quot;: &apos;jan&apos;&#125;)</span><br><span class=\"line\">print(&apos;\\n&apos;,jan)</span><br><span class=\"line\">d_jan = jan.find_all(&apos;li&apos;)              # use jan as a parent</span><br><span class=\"line\">print(&apos;\\n&apos;,d_jan)</span><br><span class=\"line\">for d in d_jan:</span><br><span class=\"line\">    print(&apos;\\n&apos;,d.get_text())</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"get_txt()\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"详细情况\"></p>\n<h3 id=\"BeautifulSoup-解析网页正则表达式\"><a href=\"#BeautifulSoup-解析网页正则表达式\" class=\"headerlink\" title=\"BeautifulSoup 解析网页正则表达式\"></a>BeautifulSoup 解析网页正则表达式</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/table.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">img_links = soup.find_all(&quot;img&quot;, &#123;&quot;src&quot;: re.compile(&apos;.*?\\.jpg&apos;)&#125;)</span><br><span class=\"line\">for link in img_links:</span><br><span class=\"line\">    print(link[&apos;src&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">print(&apos;\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">course_links = soup.find_all(&apos;a&apos;, &#123;&apos;href&apos;: re.compile(&apos;https://morvan.*&apos;)&#125;)</span><br><span class=\"line\">for link in course_links:</span><br><span class=\"line\">    print(link[&apos;href&apos;])</span><br></pre></td></tr></table></figure></p>\n<p>我们发现, 如果是图片, 它们都藏在这样一个 tag 中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    &lt;img src=&quot;https://morvanzhou.github.io/static/img/course_cover/tf.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r’.*?.jpg’ 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.<br>想要的链接都有统一的形式, 就是开头都会有 <a href=\"https://morvan.\" target=\"_blank\" rel=\"noopener\">https://morvan.</a>, 定一个正则, 让 BeautifulSoup 找到符合规则的链接.<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"一个小练习来熟悉\"><a href=\"#一个小练习来熟悉\" class=\"headerlink\" title=\"一个小练习来熟悉\"></a>一个小练习来熟悉</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(20):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(</span><br><span class=\"line\">      &quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br></pre></td></tr></table></figure>\n"},{"title":"网络请求","date":"2019-07-13T03:05:31.000Z","_content":"\n## url 与 ip\nip : Internet Protocol\n\n1. 如果 '域名-ip' 已被记录，则直接访问目标ip\n浏览器缓存，系统缓存，路由缓存\n\n2. 没有被记录，则 依靠 DNS\nDNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。\n\n网卡上，有 'DNS 服务器' 配置项\n\n3. DNS 劫持\n访问 A 结果 访问了 B\n\n4. DNS 投毒(污染)\n从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源\n\n5. DNS 正常解析\n返回正常的 ip 地址\n","source":"_posts/python/网络请求.md","raw":"\n---\ntitle: 网络请求\ndate: 2019-07-13 11:05:31\ntags:\ncategories: flask\n---\n\n## url 与 ip\nip : Internet Protocol\n\n1. 如果 '域名-ip' 已被记录，则直接访问目标ip\n浏览器缓存，系统缓存，路由缓存\n\n2. 没有被记录，则 依靠 DNS\nDNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。\n\n网卡上，有 'DNS 服务器' 配置项\n\n3. DNS 劫持\n访问 A 结果 访问了 B\n\n4. DNS 投毒(污染)\n从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源\n\n5. DNS 正常解析\n返回正常的 ip 地址\n","slug":"python/网络请求","published":1,"updated":"2020-04-10T16:46:16.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtui5003p74uxy8hqm3xw","content":"<h2 id=\"url-与-ip\"><a href=\"#url-与-ip\" class=\"headerlink\" title=\"url 与 ip\"></a>url 与 ip</h2><p>ip : Internet Protocol</p>\n<ol>\n<li><p>如果 ‘域名-ip’ 已被记录，则直接访问目标ip<br>浏览器缓存，系统缓存，路由缓存</p>\n</li>\n<li><p>没有被记录，则 依靠 DNS<br>DNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。</p>\n</li>\n</ol>\n<p>网卡上，有 ‘DNS 服务器’ 配置项</p>\n<ol start=\"3\">\n<li><p>DNS 劫持<br>访问 A 结果 访问了 B</p>\n</li>\n<li><p>DNS 投毒(污染)<br>从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源</p>\n</li>\n<li><p>DNS 正常解析<br>返回正常的 ip 地址</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"url-与-ip\"><a href=\"#url-与-ip\" class=\"headerlink\" title=\"url 与 ip\"></a>url 与 ip</h2><p>ip : Internet Protocol</p>\n<ol>\n<li><p>如果 ‘域名-ip’ 已被记录，则直接访问目标ip<br>浏览器缓存，系统缓存，路由缓存</p>\n</li>\n<li><p>没有被记录，则 依靠 DNS<br>DNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。</p>\n</li>\n</ol>\n<p>网卡上，有 ‘DNS 服务器’ 配置项</p>\n<ol start=\"3\">\n<li><p>DNS 劫持<br>访问 A 结果 访问了 B</p>\n</li>\n<li><p>DNS 投毒(污染)<br>从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源</p>\n</li>\n<li><p>DNS 正常解析<br>返回正常的 ip 地址</p>\n</li>\n</ol>\n"},{"title":"爬虫整理（三）Requests","date":"2018-12-25T03:05:31.000Z","_content":"\n\n[Requests](http://docs.python-requests.org/en/master/) 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.\n\n\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('https://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\n# https://www.baidu.com/s?wd=itswl.github\n```\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('http://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\ndef get():\n    print('\\nget')\n    param = {\"wd\": \"itswl.github\"}\n    r = requests.get('https://www.baidu.com/s', params=param)\n    print(r.url)\n    print(r.text)\n\n# get()\ndef post_name():\n    print('\\npost name')\n    # http://pythonscraping.com/pages/files/form.html\n    data = {'firstname': 'laii', 'lastname': 'weii'}\n    r = requests.post('http://pythonscraping.com/files/processing.php', data=data)\n    print(r.text)\npost_name()\n\ndef post_image():\n    print('\\npost image')\n    # http://pythonscraping.com/files/form2.html\n    file = {'uploadFile': open('./image.png', 'rb')}\n    r = requests.post('http://pythonscraping.com/files/processing2.php', files=file)\n    print(r.text)\n\n\ndef post_login():\n    print('\\npost login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = requests.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    # http://pythonscraping.com/pages/cookies/profile.php\n    r = requests.get('http://pythonscraping.com/pages/cookies/profile.php', cookies=r.cookies)\n    print(r.text)\n\n\ndef session_login():   # 使用cookie\n    print('\\nsession login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    session = requests.Session()\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = session.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    r = session.get(\"http://pythonscraping.com/pages/cookies/profile.php\")\n    print(r.text)\n\n\n\npost_name()\npost_image()\npost_login()\nsession_login()\n```\n### 下载文件\n```\nimport os\nos.makedirs('./img/', exist_ok=True)\n\nIMAGE_URL = \"https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png\"\n\n\ndef urllib_download():\n    from urllib.request import urlretrieve\n    urlretrieve(IMAGE_URL, './img/image1.png')      # whole document\n\n\ndef request_download():\n    import requests\n    r = requests.get(IMAGE_URL)\n    with open('./img/image2.png', 'wb') as f:\n        f.write(r.content)                      # whole document\n\n\ndef chunk_download():\n    import requests\n    r = requests.get(IMAGE_URL, stream=True)    # stream loading\n\n    with open('./img/image3.png', 'wb') as f:\n        for chunk in r.iter_content(chunk_size=32):\n            f.write(chunk)\n\n\nurllib_download()\nprint('download image1')\nrequest_download()\nprint('download image2')\nchunk_download()\nprint('download image3')\n```\n###  一个小练习，抓取美女吧图片\n```\n# coding=utf-8\nimport requests\nfrom lxml import etree\nimport os\nimport re\n\n\nclass TieBa(object):\n    \"\"\"抓取百度贴吧美女图片\"\"\"\n    def __init__(self, word):\n        self.url = 'https://tieba.baidu.com/f?kw={}'.format(word) # word 美女\n        self.headers = {\n            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) '\n        }\n\n    def get_data(self, url):\n        # 构造请求\n        response = requests.get(url, headers=self.headers)\n        data = response.content\n        # print(data)\n        return data\n\n    def parse_page(self, data):\n        \"\"\"解析数据\"\"\"\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # 提取当前页标题，url数据\n        node_list = html.xpath('//*[@id=\"thread_list\"]/li/div/div[2]/div[1]/div[1]/a')\n        detail_list = []\n        for node in node_list:\n            temp = dict()\n            temp['title'] = node.xpath('./text()')[0]\n            temp['url'] = 'https://tieba.baidu.com' + node.xpath('./@href')[0]\n            detail_list.append(temp)\n            # print(temp)\n        # 提取下一页连接\n        next_url = html.xpath('//*[@id=\"frs_list_pager\"]/a[contains(text(), \"下一页\")]/@href')[0]\n        next_url = 'http:' + next_url if len(next_url) > 0 else None\n        # print(next_url)\n        return detail_list, next_url\n\n    def parse_detail(self, detail_list):\n        \"\"\"提取详情页url\"\"\"\n        data_url = []\n        for detail in detail_list:\n            data_url.append(detail['url'])\n        return data_url\n\n    def save_data(self, url):\n        \"\"\"保存数据\"\"\"\n        # 请求标题连接地址\n        data = self.get_data(url)\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # print(html)\n        # print(url)\n        # 获取图片url\n        try:\n            image_url = html.xpath('//*[contains(@id,\"post_content\")]/img[1]/@src')[0]\n        except Exception as e:\n            return\n        print(image_url)\n        # 判断图片地址是否已jpg结尾\n        if re.match(r'.*\\.jpg$', image_url):\n            # 请求图片地址，获取图片\n            image_data = self.get_data(image_url)\n            filename = 'image/' + image_url.split('/')[-1]\n            # print(filename)\n            # 保存图片\n            with open(filename, 'wb') as f:\n                f.write(image_data)\n\n    def run(self):\n        # 判断是否有image文件夹\n        if not os.path.exists('image'):\n            # 创建文件夹\n            os.mkdir('image')\n        next_url = self.url\n        # 请求美女吧首页\n        data = self.get_data(next_url)\n        # 保存首页文件，观察数据，是否有需要的数据\n        with open('tieba.json', 'wb') as f:\n            f.write(data)\n        # 如果有下一页就执行\n        while next_url:\n            # 获取每页标题和对应的连接地址\n            detail_list, next_url = self.parse_page(data)\n            # 提取每页的详情页的url\n            data_url = self.parse_detail(detail_list)\n            # 遍历每个url\n            for url in data_url:\n                # 保存图片\n                self.save_data(url)\n            # 构造下一页请求\n            data = self.get_data(next_url)\n\n\nif __name__ == '__main__':\n    tb = TieBa('美女')\n    tb.run()\n\n```\n","source":"_posts/python/爬虫整理（三）Requests.md","raw":"---\ntitle: 爬虫整理（三）Requests\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n[Requests](http://docs.python-requests.org/en/master/) 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.\n\n\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('https://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\n# https://www.baidu.com/s?wd=itswl.github\n```\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('http://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\ndef get():\n    print('\\nget')\n    param = {\"wd\": \"itswl.github\"}\n    r = requests.get('https://www.baidu.com/s', params=param)\n    print(r.url)\n    print(r.text)\n\n# get()\ndef post_name():\n    print('\\npost name')\n    # http://pythonscraping.com/pages/files/form.html\n    data = {'firstname': 'laii', 'lastname': 'weii'}\n    r = requests.post('http://pythonscraping.com/files/processing.php', data=data)\n    print(r.text)\npost_name()\n\ndef post_image():\n    print('\\npost image')\n    # http://pythonscraping.com/files/form2.html\n    file = {'uploadFile': open('./image.png', 'rb')}\n    r = requests.post('http://pythonscraping.com/files/processing2.php', files=file)\n    print(r.text)\n\n\ndef post_login():\n    print('\\npost login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = requests.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    # http://pythonscraping.com/pages/cookies/profile.php\n    r = requests.get('http://pythonscraping.com/pages/cookies/profile.php', cookies=r.cookies)\n    print(r.text)\n\n\ndef session_login():   # 使用cookie\n    print('\\nsession login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    session = requests.Session()\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = session.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    r = session.get(\"http://pythonscraping.com/pages/cookies/profile.php\")\n    print(r.text)\n\n\n\npost_name()\npost_image()\npost_login()\nsession_login()\n```\n### 下载文件\n```\nimport os\nos.makedirs('./img/', exist_ok=True)\n\nIMAGE_URL = \"https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png\"\n\n\ndef urllib_download():\n    from urllib.request import urlretrieve\n    urlretrieve(IMAGE_URL, './img/image1.png')      # whole document\n\n\ndef request_download():\n    import requests\n    r = requests.get(IMAGE_URL)\n    with open('./img/image2.png', 'wb') as f:\n        f.write(r.content)                      # whole document\n\n\ndef chunk_download():\n    import requests\n    r = requests.get(IMAGE_URL, stream=True)    # stream loading\n\n    with open('./img/image3.png', 'wb') as f:\n        for chunk in r.iter_content(chunk_size=32):\n            f.write(chunk)\n\n\nurllib_download()\nprint('download image1')\nrequest_download()\nprint('download image2')\nchunk_download()\nprint('download image3')\n```\n###  一个小练习，抓取美女吧图片\n```\n# coding=utf-8\nimport requests\nfrom lxml import etree\nimport os\nimport re\n\n\nclass TieBa(object):\n    \"\"\"抓取百度贴吧美女图片\"\"\"\n    def __init__(self, word):\n        self.url = 'https://tieba.baidu.com/f?kw={}'.format(word) # word 美女\n        self.headers = {\n            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) '\n        }\n\n    def get_data(self, url):\n        # 构造请求\n        response = requests.get(url, headers=self.headers)\n        data = response.content\n        # print(data)\n        return data\n\n    def parse_page(self, data):\n        \"\"\"解析数据\"\"\"\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # 提取当前页标题，url数据\n        node_list = html.xpath('//*[@id=\"thread_list\"]/li/div/div[2]/div[1]/div[1]/a')\n        detail_list = []\n        for node in node_list:\n            temp = dict()\n            temp['title'] = node.xpath('./text()')[0]\n            temp['url'] = 'https://tieba.baidu.com' + node.xpath('./@href')[0]\n            detail_list.append(temp)\n            # print(temp)\n        # 提取下一页连接\n        next_url = html.xpath('//*[@id=\"frs_list_pager\"]/a[contains(text(), \"下一页\")]/@href')[0]\n        next_url = 'http:' + next_url if len(next_url) > 0 else None\n        # print(next_url)\n        return detail_list, next_url\n\n    def parse_detail(self, detail_list):\n        \"\"\"提取详情页url\"\"\"\n        data_url = []\n        for detail in detail_list:\n            data_url.append(detail['url'])\n        return data_url\n\n    def save_data(self, url):\n        \"\"\"保存数据\"\"\"\n        # 请求标题连接地址\n        data = self.get_data(url)\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # print(html)\n        # print(url)\n        # 获取图片url\n        try:\n            image_url = html.xpath('//*[contains(@id,\"post_content\")]/img[1]/@src')[0]\n        except Exception as e:\n            return\n        print(image_url)\n        # 判断图片地址是否已jpg结尾\n        if re.match(r'.*\\.jpg$', image_url):\n            # 请求图片地址，获取图片\n            image_data = self.get_data(image_url)\n            filename = 'image/' + image_url.split('/')[-1]\n            # print(filename)\n            # 保存图片\n            with open(filename, 'wb') as f:\n                f.write(image_data)\n\n    def run(self):\n        # 判断是否有image文件夹\n        if not os.path.exists('image'):\n            # 创建文件夹\n            os.mkdir('image')\n        next_url = self.url\n        # 请求美女吧首页\n        data = self.get_data(next_url)\n        # 保存首页文件，观察数据，是否有需要的数据\n        with open('tieba.json', 'wb') as f:\n            f.write(data)\n        # 如果有下一页就执行\n        while next_url:\n            # 获取每页标题和对应的连接地址\n            detail_list, next_url = self.parse_page(data)\n            # 提取每页的详情页的url\n            data_url = self.parse_detail(detail_list)\n            # 遍历每个url\n            for url in data_url:\n                # 保存图片\n                self.save_data(url)\n            # 构造下一页请求\n            data = self.get_data(next_url)\n\n\nif __name__ == '__main__':\n    tb = TieBa('美女')\n    tb.run()\n\n```\n","slug":"python/爬虫整理（三）Requests","published":1,"updated":"2020-04-10T16:46:16.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuia003q74ux1xsbsed0","content":"<p><a href=\"http://docs.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">Requests</a> 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\"># https://www.baidu.com/s?wd=itswl.github</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;http://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\">def get():</span><br><span class=\"line\">    print(&apos;\\nget&apos;)</span><br><span class=\"line\">    param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;</span><br><span class=\"line\">    r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">    print(r.url)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"># get()</span><br><span class=\"line\">def post_name():</span><br><span class=\"line\">    print(&apos;\\npost name&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/files/form.html</span><br><span class=\"line\">    data = &#123;&apos;firstname&apos;: &apos;laii&apos;, &apos;lastname&apos;: &apos;weii&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing.php&apos;, data=data)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\">post_name()</span><br><span class=\"line\"></span><br><span class=\"line\">def post_image():</span><br><span class=\"line\">    print(&apos;\\npost image&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/files/form2.html</span><br><span class=\"line\">    file = &#123;&apos;uploadFile&apos;: open(&apos;./image.png&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing2.php&apos;, files=file)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def post_login():</span><br><span class=\"line\">    print(&apos;\\npost login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/profile.php</span><br><span class=\"line\">    r = requests.get(&apos;http://pythonscraping.com/pages/cookies/profile.php&apos;, cookies=r.cookies)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def session_login():   # 使用cookie</span><br><span class=\"line\">    print(&apos;\\nsession login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = session.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    r = session.get(&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">post_name()</span><br><span class=\"line\">post_image()</span><br><span class=\"line\">post_login()</span><br><span class=\"line\">session_login()</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.makedirs(&apos;./img/&apos;, exist_ok=True)</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_URL = &quot;https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def urllib_download():</span><br><span class=\"line\">    from urllib.request import urlretrieve</span><br><span class=\"line\">    urlretrieve(IMAGE_URL, &apos;./img/image1.png&apos;)      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL)</span><br><span class=\"line\">    with open(&apos;./img/image2.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(r.content)                      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def chunk_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL, stream=True)    # stream loading</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;./img/image3.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        for chunk in r.iter_content(chunk_size=32):</span><br><span class=\"line\">            f.write(chunk)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">urllib_download()</span><br><span class=\"line\">print(&apos;download image1&apos;)</span><br><span class=\"line\">request_download()</span><br><span class=\"line\">print(&apos;download image2&apos;)</span><br><span class=\"line\">chunk_download()</span><br><span class=\"line\">print(&apos;download image3&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个小练习，抓取美女吧图片\"><a href=\"#一个小练习，抓取美女吧图片\" class=\"headerlink\" title=\"一个小练习，抓取美女吧图片\"></a>一个小练习，抓取美女吧图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class TieBa(object):</span><br><span class=\"line\">    &quot;&quot;&quot;抓取百度贴吧美女图片&quot;&quot;&quot;</span><br><span class=\"line\">    def __init__(self, word):</span><br><span class=\"line\">        self.url = &apos;https://tieba.baidu.com/f?kw=&#123;&#125;&apos;.format(word) # word 美女</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            &apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) &apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_data(self, url):</span><br><span class=\"line\">        # 构造请求</span><br><span class=\"line\">        response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        data = response.content</span><br><span class=\"line\">        # print(data)</span><br><span class=\"line\">        return data</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_page(self, data):</span><br><span class=\"line\">        &quot;&quot;&quot;解析数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # 提取当前页标题，url数据</span><br><span class=\"line\">        node_list = html.xpath(&apos;//*[@id=&quot;thread_list&quot;]/li/div/div[2]/div[1]/div[1]/a&apos;)</span><br><span class=\"line\">        detail_list = []</span><br><span class=\"line\">        for node in node_list:</span><br><span class=\"line\">            temp = dict()</span><br><span class=\"line\">            temp[&apos;title&apos;] = node.xpath(&apos;./text()&apos;)[0]</span><br><span class=\"line\">            temp[&apos;url&apos;] = &apos;https://tieba.baidu.com&apos; + node.xpath(&apos;./@href&apos;)[0]</span><br><span class=\"line\">            detail_list.append(temp)</span><br><span class=\"line\">            # print(temp)</span><br><span class=\"line\">        # 提取下一页连接</span><br><span class=\"line\">        next_url = html.xpath(&apos;//*[@id=&quot;frs_list_pager&quot;]/a[contains(text(), &quot;下一页&quot;)]/@href&apos;)[0]</span><br><span class=\"line\">        next_url = &apos;http:&apos; + next_url if len(next_url) &gt; 0 else None</span><br><span class=\"line\">        # print(next_url)</span><br><span class=\"line\">        return detail_list, next_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_detail(self, detail_list):</span><br><span class=\"line\">        &quot;&quot;&quot;提取详情页url&quot;&quot;&quot;</span><br><span class=\"line\">        data_url = []</span><br><span class=\"line\">        for detail in detail_list:</span><br><span class=\"line\">            data_url.append(detail[&apos;url&apos;])</span><br><span class=\"line\">        return data_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def save_data(self, url):</span><br><span class=\"line\">        &quot;&quot;&quot;保存数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 请求标题连接地址</span><br><span class=\"line\">        data = self.get_data(url)</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # print(html)</span><br><span class=\"line\">        # print(url)</span><br><span class=\"line\">        # 获取图片url</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            image_url = html.xpath(&apos;//*[contains(@id,&quot;post_content&quot;)]/img[1]/@src&apos;)[0]</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            return</span><br><span class=\"line\">        print(image_url)</span><br><span class=\"line\">        # 判断图片地址是否已jpg结尾</span><br><span class=\"line\">        if re.match(r&apos;.*\\.jpg$&apos;, image_url):</span><br><span class=\"line\">            # 请求图片地址，获取图片</span><br><span class=\"line\">            image_data = self.get_data(image_url)</span><br><span class=\"line\">            filename = &apos;image/&apos; + image_url.split(&apos;/&apos;)[-1]</span><br><span class=\"line\">            # print(filename)</span><br><span class=\"line\">            # 保存图片</span><br><span class=\"line\">            with open(filename, &apos;wb&apos;) as f:</span><br><span class=\"line\">                f.write(image_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        # 判断是否有image文件夹</span><br><span class=\"line\">        if not os.path.exists(&apos;image&apos;):</span><br><span class=\"line\">            # 创建文件夹</span><br><span class=\"line\">            os.mkdir(&apos;image&apos;)</span><br><span class=\"line\">        next_url = self.url</span><br><span class=\"line\">        # 请求美女吧首页</span><br><span class=\"line\">        data = self.get_data(next_url)</span><br><span class=\"line\">        # 保存首页文件，观察数据，是否有需要的数据</span><br><span class=\"line\">        with open(&apos;tieba.json&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">        # 如果有下一页就执行</span><br><span class=\"line\">        while next_url:</span><br><span class=\"line\">            # 获取每页标题和对应的连接地址</span><br><span class=\"line\">            detail_list, next_url = self.parse_page(data)</span><br><span class=\"line\">            # 提取每页的详情页的url</span><br><span class=\"line\">            data_url = self.parse_detail(detail_list)</span><br><span class=\"line\">            # 遍历每个url</span><br><span class=\"line\">            for url in data_url:</span><br><span class=\"line\">                # 保存图片</span><br><span class=\"line\">                self.save_data(url)</span><br><span class=\"line\">            # 构造下一页请求</span><br><span class=\"line\">            data = self.get_data(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    tb = TieBa(&apos;美女&apos;)</span><br><span class=\"line\">    tb.run()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://docs.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">Requests</a> 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\"># https://www.baidu.com/s?wd=itswl.github</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;http://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\">def get():</span><br><span class=\"line\">    print(&apos;\\nget&apos;)</span><br><span class=\"line\">    param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;</span><br><span class=\"line\">    r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">    print(r.url)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"># get()</span><br><span class=\"line\">def post_name():</span><br><span class=\"line\">    print(&apos;\\npost name&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/files/form.html</span><br><span class=\"line\">    data = &#123;&apos;firstname&apos;: &apos;laii&apos;, &apos;lastname&apos;: &apos;weii&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing.php&apos;, data=data)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\">post_name()</span><br><span class=\"line\"></span><br><span class=\"line\">def post_image():</span><br><span class=\"line\">    print(&apos;\\npost image&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/files/form2.html</span><br><span class=\"line\">    file = &#123;&apos;uploadFile&apos;: open(&apos;./image.png&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing2.php&apos;, files=file)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def post_login():</span><br><span class=\"line\">    print(&apos;\\npost login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/profile.php</span><br><span class=\"line\">    r = requests.get(&apos;http://pythonscraping.com/pages/cookies/profile.php&apos;, cookies=r.cookies)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def session_login():   # 使用cookie</span><br><span class=\"line\">    print(&apos;\\nsession login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = session.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    r = session.get(&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">post_name()</span><br><span class=\"line\">post_image()</span><br><span class=\"line\">post_login()</span><br><span class=\"line\">session_login()</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.makedirs(&apos;./img/&apos;, exist_ok=True)</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_URL = &quot;https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def urllib_download():</span><br><span class=\"line\">    from urllib.request import urlretrieve</span><br><span class=\"line\">    urlretrieve(IMAGE_URL, &apos;./img/image1.png&apos;)      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL)</span><br><span class=\"line\">    with open(&apos;./img/image2.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(r.content)                      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def chunk_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL, stream=True)    # stream loading</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;./img/image3.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        for chunk in r.iter_content(chunk_size=32):</span><br><span class=\"line\">            f.write(chunk)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">urllib_download()</span><br><span class=\"line\">print(&apos;download image1&apos;)</span><br><span class=\"line\">request_download()</span><br><span class=\"line\">print(&apos;download image2&apos;)</span><br><span class=\"line\">chunk_download()</span><br><span class=\"line\">print(&apos;download image3&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个小练习，抓取美女吧图片\"><a href=\"#一个小练习，抓取美女吧图片\" class=\"headerlink\" title=\"一个小练习，抓取美女吧图片\"></a>一个小练习，抓取美女吧图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class TieBa(object):</span><br><span class=\"line\">    &quot;&quot;&quot;抓取百度贴吧美女图片&quot;&quot;&quot;</span><br><span class=\"line\">    def __init__(self, word):</span><br><span class=\"line\">        self.url = &apos;https://tieba.baidu.com/f?kw=&#123;&#125;&apos;.format(word) # word 美女</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            &apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) &apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_data(self, url):</span><br><span class=\"line\">        # 构造请求</span><br><span class=\"line\">        response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        data = response.content</span><br><span class=\"line\">        # print(data)</span><br><span class=\"line\">        return data</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_page(self, data):</span><br><span class=\"line\">        &quot;&quot;&quot;解析数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # 提取当前页标题，url数据</span><br><span class=\"line\">        node_list = html.xpath(&apos;//*[@id=&quot;thread_list&quot;]/li/div/div[2]/div[1]/div[1]/a&apos;)</span><br><span class=\"line\">        detail_list = []</span><br><span class=\"line\">        for node in node_list:</span><br><span class=\"line\">            temp = dict()</span><br><span class=\"line\">            temp[&apos;title&apos;] = node.xpath(&apos;./text()&apos;)[0]</span><br><span class=\"line\">            temp[&apos;url&apos;] = &apos;https://tieba.baidu.com&apos; + node.xpath(&apos;./@href&apos;)[0]</span><br><span class=\"line\">            detail_list.append(temp)</span><br><span class=\"line\">            # print(temp)</span><br><span class=\"line\">        # 提取下一页连接</span><br><span class=\"line\">        next_url = html.xpath(&apos;//*[@id=&quot;frs_list_pager&quot;]/a[contains(text(), &quot;下一页&quot;)]/@href&apos;)[0]</span><br><span class=\"line\">        next_url = &apos;http:&apos; + next_url if len(next_url) &gt; 0 else None</span><br><span class=\"line\">        # print(next_url)</span><br><span class=\"line\">        return detail_list, next_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_detail(self, detail_list):</span><br><span class=\"line\">        &quot;&quot;&quot;提取详情页url&quot;&quot;&quot;</span><br><span class=\"line\">        data_url = []</span><br><span class=\"line\">        for detail in detail_list:</span><br><span class=\"line\">            data_url.append(detail[&apos;url&apos;])</span><br><span class=\"line\">        return data_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def save_data(self, url):</span><br><span class=\"line\">        &quot;&quot;&quot;保存数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 请求标题连接地址</span><br><span class=\"line\">        data = self.get_data(url)</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # print(html)</span><br><span class=\"line\">        # print(url)</span><br><span class=\"line\">        # 获取图片url</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            image_url = html.xpath(&apos;//*[contains(@id,&quot;post_content&quot;)]/img[1]/@src&apos;)[0]</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            return</span><br><span class=\"line\">        print(image_url)</span><br><span class=\"line\">        # 判断图片地址是否已jpg结尾</span><br><span class=\"line\">        if re.match(r&apos;.*\\.jpg$&apos;, image_url):</span><br><span class=\"line\">            # 请求图片地址，获取图片</span><br><span class=\"line\">            image_data = self.get_data(image_url)</span><br><span class=\"line\">            filename = &apos;image/&apos; + image_url.split(&apos;/&apos;)[-1]</span><br><span class=\"line\">            # print(filename)</span><br><span class=\"line\">            # 保存图片</span><br><span class=\"line\">            with open(filename, &apos;wb&apos;) as f:</span><br><span class=\"line\">                f.write(image_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        # 判断是否有image文件夹</span><br><span class=\"line\">        if not os.path.exists(&apos;image&apos;):</span><br><span class=\"line\">            # 创建文件夹</span><br><span class=\"line\">            os.mkdir(&apos;image&apos;)</span><br><span class=\"line\">        next_url = self.url</span><br><span class=\"line\">        # 请求美女吧首页</span><br><span class=\"line\">        data = self.get_data(next_url)</span><br><span class=\"line\">        # 保存首页文件，观察数据，是否有需要的数据</span><br><span class=\"line\">        with open(&apos;tieba.json&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">        # 如果有下一页就执行</span><br><span class=\"line\">        while next_url:</span><br><span class=\"line\">            # 获取每页标题和对应的连接地址</span><br><span class=\"line\">            detail_list, next_url = self.parse_page(data)</span><br><span class=\"line\">            # 提取每页的详情页的url</span><br><span class=\"line\">            data_url = self.parse_detail(detail_list)</span><br><span class=\"line\">            # 遍历每个url</span><br><span class=\"line\">            for url in data_url:</span><br><span class=\"line\">                # 保存图片</span><br><span class=\"line\">                self.save_data(url)</span><br><span class=\"line\">            # 构造下一页请求</span><br><span class=\"line\">            data = self.get_data(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    tb = TieBa(&apos;美女&apos;)</span><br><span class=\"line\">    tb.run()</span><br></pre></td></tr></table></figure>\n"},{"title":"迭代对象，迭代器，生成器","date":"2019-07-14T03:05:31.000Z","_content":"\n\n\n## 容器\n**容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中**\n\n`assert` 如果为Fasle, 那么raise一个AssertionError\n```\nassert False, 'error'\nassert True, 'error'\nassert 1 in [1, 2, 3, 4],'error'\n```\n\n大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）\n\n## 可迭代对象 （iterable）\n**凡是可以返回一个迭代器的对象都可以称之为可迭代对象**\n\n**可迭代对象实现了 __iter__ (返回可迭代对象本身) 和 __next__ 方法，**\n```\nx = [1, 2, 3]\ny = iter(x)\nz = iter(x) #两个不同的迭代器\nnext(y) \nnext(y)\nnext(z)\ntype(x) # list  可迭代对象\ntype(y) # list_iterator  具体的迭代类型\n\na = 'hahaha'\nb = iter(a)\ntype(b)  # str_iterator\n```\n\n## 迭代器 (iterator)\n**迭代器**是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.\n\n迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。\n\n## 生成器（generator）\n**相比其他容器对象，它更能节省内存和cpu。**\n\n```\n sum(i for i in range(100_000_000)) # 生成器\n sum[i for i in range(100_000_000)] # 列表推导式\n \n\n```\n**生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。**\n\n\n```\ndef someting():\n    result = []\n    for x in ..:\n        result.append(x)\n    return result\n```\n都可以改写\n```\ndef iter_something():\n    for x in ..:\n        yield x \n```\n## 生成器表达式（generator expression）\n**列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象**\n```\na = (x * x for x in range(10))\n```\n生成器只能遍历一次\n","source":"_posts/python/迭代对象，迭代器，生成器.md","raw":"\n---\ntitle: 迭代对象，迭代器，生成器\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n## 容器\n**容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中**\n\n`assert` 如果为Fasle, 那么raise一个AssertionError\n```\nassert False, 'error'\nassert True, 'error'\nassert 1 in [1, 2, 3, 4],'error'\n```\n\n大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）\n\n## 可迭代对象 （iterable）\n**凡是可以返回一个迭代器的对象都可以称之为可迭代对象**\n\n**可迭代对象实现了 __iter__ (返回可迭代对象本身) 和 __next__ 方法，**\n```\nx = [1, 2, 3]\ny = iter(x)\nz = iter(x) #两个不同的迭代器\nnext(y) \nnext(y)\nnext(z)\ntype(x) # list  可迭代对象\ntype(y) # list_iterator  具体的迭代类型\n\na = 'hahaha'\nb = iter(a)\ntype(b)  # str_iterator\n```\n\n## 迭代器 (iterator)\n**迭代器**是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.\n\n迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。\n\n## 生成器（generator）\n**相比其他容器对象，它更能节省内存和cpu。**\n\n```\n sum(i for i in range(100_000_000)) # 生成器\n sum[i for i in range(100_000_000)] # 列表推导式\n \n\n```\n**生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。**\n\n\n```\ndef someting():\n    result = []\n    for x in ..:\n        result.append(x)\n    return result\n```\n都可以改写\n```\ndef iter_something():\n    for x in ..:\n        yield x \n```\n## 生成器表达式（generator expression）\n**列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象**\n```\na = (x * x for x in range(10))\n```\n生成器只能遍历一次\n","slug":"python/迭代对象，迭代器，生成器","published":1,"updated":"2020-04-10T16:46:16.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuig003t74uxum5xa6v9","content":"<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong>容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中</strong></p>\n<p><code>assert</code> 如果为Fasle, 那么raise一个AssertionError<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert False, &apos;error&apos;</span><br><span class=\"line\">assert True, &apos;error&apos;</span><br><span class=\"line\">assert 1 in [1, 2, 3, 4],&apos;error&apos;</span><br></pre></td></tr></table></figure></p>\n<p>大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）</p>\n<h2 id=\"可迭代对象-（iterable）\"><a href=\"#可迭代对象-（iterable）\" class=\"headerlink\" title=\"可迭代对象 （iterable）\"></a>可迭代对象 （iterable）</h2><p><strong>凡是可以返回一个迭代器的对象都可以称之为可迭代对象</strong></p>\n<p><strong>可迭代对象实现了 <strong>iter</strong> (返回可迭代对象本身) 和 <strong>next</strong> 方法，</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = iter(x)</span><br><span class=\"line\">z = iter(x) #两个不同的迭代器</span><br><span class=\"line\">next(y) </span><br><span class=\"line\">next(y)</span><br><span class=\"line\">next(z)</span><br><span class=\"line\">type(x) # list  可迭代对象</span><br><span class=\"line\">type(y) # list_iterator  具体的迭代类型</span><br><span class=\"line\"></span><br><span class=\"line\">a = &apos;hahaha&apos;</span><br><span class=\"line\">b = iter(a)</span><br><span class=\"line\">type(b)  # str_iterator</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 (iterator)\"></a>迭代器 (iterator)</h2><p><strong>迭代器</strong>是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.</p>\n<p>迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。</p>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p><strong>相比其他容器对象，它更能节省内存和cpu。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(i for i in range(100_000_000)) # 生成器</span><br><span class=\"line\">sum[i for i in range(100_000_000)] # 列表推导式</span><br></pre></td></tr></table></figure>\n<p><strong>生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def someting():</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure>\n<p>都可以改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def iter_something():</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        yield x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成器表达式（generator-expression）\"><a href=\"#生成器表达式（generator-expression）\" class=\"headerlink\" title=\"生成器表达式（generator expression）\"></a>生成器表达式（generator expression）</h2><p><strong>列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (x * x for x in range(10))</span><br></pre></td></tr></table></figure></p>\n<p>生成器只能遍历一次</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong>容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中</strong></p>\n<p><code>assert</code> 如果为Fasle, 那么raise一个AssertionError<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert False, &apos;error&apos;</span><br><span class=\"line\">assert True, &apos;error&apos;</span><br><span class=\"line\">assert 1 in [1, 2, 3, 4],&apos;error&apos;</span><br></pre></td></tr></table></figure></p>\n<p>大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）</p>\n<h2 id=\"可迭代对象-（iterable）\"><a href=\"#可迭代对象-（iterable）\" class=\"headerlink\" title=\"可迭代对象 （iterable）\"></a>可迭代对象 （iterable）</h2><p><strong>凡是可以返回一个迭代器的对象都可以称之为可迭代对象</strong></p>\n<p><strong>可迭代对象实现了 <strong>iter</strong> (返回可迭代对象本身) 和 <strong>next</strong> 方法，</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = iter(x)</span><br><span class=\"line\">z = iter(x) #两个不同的迭代器</span><br><span class=\"line\">next(y) </span><br><span class=\"line\">next(y)</span><br><span class=\"line\">next(z)</span><br><span class=\"line\">type(x) # list  可迭代对象</span><br><span class=\"line\">type(y) # list_iterator  具体的迭代类型</span><br><span class=\"line\"></span><br><span class=\"line\">a = &apos;hahaha&apos;</span><br><span class=\"line\">b = iter(a)</span><br><span class=\"line\">type(b)  # str_iterator</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 (iterator)\"></a>迭代器 (iterator)</h2><p><strong>迭代器</strong>是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.</p>\n<p>迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。</p>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p><strong>相比其他容器对象，它更能节省内存和cpu。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(i for i in range(100_000_000)) # 生成器</span><br><span class=\"line\">sum[i for i in range(100_000_000)] # 列表推导式</span><br></pre></td></tr></table></figure>\n<p><strong>生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def someting():</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure>\n<p>都可以改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def iter_something():</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        yield x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成器表达式（generator-expression）\"><a href=\"#生成器表达式（generator-expression）\" class=\"headerlink\" title=\"生成器表达式（generator expression）\"></a>生成器表达式（generator expression）</h2><p><strong>列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (x * x for x in range(10))</span><br></pre></td></tr></table></figure></p>\n<p>生成器只能遍历一次</p>\n"},{"title":"读取TXT_PDF","date":"2018-12-25T03:26:55.000Z","_content":"\n这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。\n`pip install pdfminer3k`。PDF其中注释掉的为读取网络上的PDF文档。\n代码如下：\n\n```\nfrom urllib import request\n\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager\nfrom pdfminer.pdfparser import PDFDocument, PDFParser\nfrom pdfminer.converter import PDFPageAggregator\nfrom pdfminer.layout import LAParams\n\n\n# html = request.urlopen(\n# 'https://en.wikipedia.org/robots.txt'\n# ).read().decode('utf-8')\n# print(html)   # 读取txt\n\n\n# fp = open('./practice/byte-of-python-chinese-edition.pdf','rb')  # 获取文档对象\nfp = request.urlopen('https://q.stock.sohu.com/newpdf/201831703172.pdf')  # 读取网络pdf\nparser = PDFParser(fp)   # 创建一个与文档关联的解释器\ndoc = PDFDocument() # 文档对象\n\n# 链接解释器和文档对象\nparser.set_document(doc)\ndoc.set_parser(parser)\n\n# 初始化文档\ndoc.initialize()   # 可接收文档密码\n\nresource = PDFResourceManager()  # 创建PDF资源管理器\n\nlaparam = LAParams()   # 参数分析器\n\ndevice = PDFPageAggregator(resource,laparams=laparam)\n# 创建一个聚合器\n\ninterpreter = PDFPageInterpreter(resource,device)\n# 创建 PDF页面解释器\n\n# 使用文档对象得到页面的集合\nfor page in doc.get_pages():\n    # 使用页面解释器来读取\n    interpreter.process_page(page)\n\n    # 使用聚合器来获取内容\n    layout = device.get_result()\n\n    for out in layout:\n        if hasattr(out,'get_text'):   # 有没有这个属性\n            print(out.get_text())\n\n\n```\n","source":"_posts/python/读取TXT_PDF.md","raw":"\n---\ntitle: 读取TXT_PDF\ndate: 2018-12-25 11:26:55\ntags:\ncategories: python练习\n---\n\n这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。\n`pip install pdfminer3k`。PDF其中注释掉的为读取网络上的PDF文档。\n代码如下：\n\n```\nfrom urllib import request\n\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager\nfrom pdfminer.pdfparser import PDFDocument, PDFParser\nfrom pdfminer.converter import PDFPageAggregator\nfrom pdfminer.layout import LAParams\n\n\n# html = request.urlopen(\n# 'https://en.wikipedia.org/robots.txt'\n# ).read().decode('utf-8')\n# print(html)   # 读取txt\n\n\n# fp = open('./practice/byte-of-python-chinese-edition.pdf','rb')  # 获取文档对象\nfp = request.urlopen('https://q.stock.sohu.com/newpdf/201831703172.pdf')  # 读取网络pdf\nparser = PDFParser(fp)   # 创建一个与文档关联的解释器\ndoc = PDFDocument() # 文档对象\n\n# 链接解释器和文档对象\nparser.set_document(doc)\ndoc.set_parser(parser)\n\n# 初始化文档\ndoc.initialize()   # 可接收文档密码\n\nresource = PDFResourceManager()  # 创建PDF资源管理器\n\nlaparam = LAParams()   # 参数分析器\n\ndevice = PDFPageAggregator(resource,laparams=laparam)\n# 创建一个聚合器\n\ninterpreter = PDFPageInterpreter(resource,device)\n# 创建 PDF页面解释器\n\n# 使用文档对象得到页面的集合\nfor page in doc.get_pages():\n    # 使用页面解释器来读取\n    interpreter.process_page(page)\n\n    # 使用聚合器来获取内容\n    layout = device.get_result()\n\n    for out in layout:\n        if hasattr(out,'get_text'):   # 有没有这个属性\n            print(out.get_text())\n\n\n```\n","slug":"python/读取TXT_PDF","published":1,"updated":"2020-04-10T16:46:16.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuil003v74uxk3yvg1az","content":"<p>这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。<br><code>pip install pdfminer3k</code>。PDF其中注释掉的为读取网络上的PDF文档。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib import request</span><br><span class=\"line\"></span><br><span class=\"line\">from pdfminer.pdfdevice import PDFDevice</span><br><span class=\"line\">from pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager</span><br><span class=\"line\">from pdfminer.pdfparser import PDFDocument, PDFParser</span><br><span class=\"line\">from pdfminer.converter import PDFPageAggregator</span><br><span class=\"line\">from pdfminer.layout import LAParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># html = request.urlopen(</span><br><span class=\"line\"># &apos;https://en.wikipedia.org/robots.txt&apos;</span><br><span class=\"line\"># ).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\"># print(html)   # 读取txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># fp = open(&apos;./practice/byte-of-python-chinese-edition.pdf&apos;,&apos;rb&apos;)  # 获取文档对象</span><br><span class=\"line\">fp = request.urlopen(&apos;https://q.stock.sohu.com/newpdf/201831703172.pdf&apos;)  # 读取网络pdf</span><br><span class=\"line\">parser = PDFParser(fp)   # 创建一个与文档关联的解释器</span><br><span class=\"line\">doc = PDFDocument() # 文档对象</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接解释器和文档对象</span><br><span class=\"line\">parser.set_document(doc)</span><br><span class=\"line\">doc.set_parser(parser)</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化文档</span><br><span class=\"line\">doc.initialize()   # 可接收文档密码</span><br><span class=\"line\"></span><br><span class=\"line\">resource = PDFResourceManager()  # 创建PDF资源管理器</span><br><span class=\"line\"></span><br><span class=\"line\">laparam = LAParams()   # 参数分析器</span><br><span class=\"line\"></span><br><span class=\"line\">device = PDFPageAggregator(resource,laparams=laparam)</span><br><span class=\"line\"># 创建一个聚合器</span><br><span class=\"line\"></span><br><span class=\"line\">interpreter = PDFPageInterpreter(resource,device)</span><br><span class=\"line\"># 创建 PDF页面解释器</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用文档对象得到页面的集合</span><br><span class=\"line\">for page in doc.get_pages():</span><br><span class=\"line\">    # 使用页面解释器来读取</span><br><span class=\"line\">    interpreter.process_page(page)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用聚合器来获取内容</span><br><span class=\"line\">    layout = device.get_result()</span><br><span class=\"line\"></span><br><span class=\"line\">    for out in layout:</span><br><span class=\"line\">        if hasattr(out,&apos;get_text&apos;):   # 有没有这个属性</span><br><span class=\"line\">            print(out.get_text())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。<br><code>pip install pdfminer3k</code>。PDF其中注释掉的为读取网络上的PDF文档。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib import request</span><br><span class=\"line\"></span><br><span class=\"line\">from pdfminer.pdfdevice import PDFDevice</span><br><span class=\"line\">from pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager</span><br><span class=\"line\">from pdfminer.pdfparser import PDFDocument, PDFParser</span><br><span class=\"line\">from pdfminer.converter import PDFPageAggregator</span><br><span class=\"line\">from pdfminer.layout import LAParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># html = request.urlopen(</span><br><span class=\"line\"># &apos;https://en.wikipedia.org/robots.txt&apos;</span><br><span class=\"line\"># ).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\"># print(html)   # 读取txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># fp = open(&apos;./practice/byte-of-python-chinese-edition.pdf&apos;,&apos;rb&apos;)  # 获取文档对象</span><br><span class=\"line\">fp = request.urlopen(&apos;https://q.stock.sohu.com/newpdf/201831703172.pdf&apos;)  # 读取网络pdf</span><br><span class=\"line\">parser = PDFParser(fp)   # 创建一个与文档关联的解释器</span><br><span class=\"line\">doc = PDFDocument() # 文档对象</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接解释器和文档对象</span><br><span class=\"line\">parser.set_document(doc)</span><br><span class=\"line\">doc.set_parser(parser)</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化文档</span><br><span class=\"line\">doc.initialize()   # 可接收文档密码</span><br><span class=\"line\"></span><br><span class=\"line\">resource = PDFResourceManager()  # 创建PDF资源管理器</span><br><span class=\"line\"></span><br><span class=\"line\">laparam = LAParams()   # 参数分析器</span><br><span class=\"line\"></span><br><span class=\"line\">device = PDFPageAggregator(resource,laparams=laparam)</span><br><span class=\"line\"># 创建一个聚合器</span><br><span class=\"line\"></span><br><span class=\"line\">interpreter = PDFPageInterpreter(resource,device)</span><br><span class=\"line\"># 创建 PDF页面解释器</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用文档对象得到页面的集合</span><br><span class=\"line\">for page in doc.get_pages():</span><br><span class=\"line\">    # 使用页面解释器来读取</span><br><span class=\"line\">    interpreter.process_page(page)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用聚合器来获取内容</span><br><span class=\"line\">    layout = device.get_result()</span><br><span class=\"line\"></span><br><span class=\"line\">    for out in layout:</span><br><span class=\"line\">        if hasattr(out,&apos;get_text&apos;):   # 有没有这个属性</span><br><span class=\"line\">            print(out.get_text())</span><br></pre></td></tr></table></figure>\n"},{"title":"鸭子类型","date":"2019-07-10T03:05:31.000Z","_content":"\n\n```\nclass Duck: \n    @classmethod\n    def fly(cls): \n        print(\"Duck flying\") \n\n\nclass Airplane:\n    @staticmethod\n    def fly(): \n        print(\"Airplane flying\") \n \nclass Bird:\n    def fly(self):\n        print('Bird is flying')\n \n\ndef lift_off(entity): \n    entity.fly() \n\nif __name__ == \"__main__\":\n    lift_off(Duck)\n    lift_off(Airplane)\n    bird = Bird()\n    lift_off(bird)\n    \n ```\n \n \n \n \n \n","source":"_posts/python/鸭子类型.md","raw":"\n---\ntitle: 鸭子类型\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n\n```\nclass Duck: \n    @classmethod\n    def fly(cls): \n        print(\"Duck flying\") \n\n\nclass Airplane:\n    @staticmethod\n    def fly(): \n        print(\"Airplane flying\") \n \nclass Bird:\n    def fly(self):\n        print('Bird is flying')\n \n\ndef lift_off(entity): \n    entity.fly() \n\nif __name__ == \"__main__\":\n    lift_off(Duck)\n    lift_off(Airplane)\n    bird = Bird()\n    lift_off(bird)\n    \n ```\n \n \n \n \n \n","slug":"python/鸭子类型","published":1,"updated":"2020-04-10T16:46:16.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuir003y74uxtyx1amil","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Duck: </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def fly(cls): </span><br><span class=\"line\">        print(&quot;Duck flying&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Airplane:</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def fly(): </span><br><span class=\"line\">        print(&quot;Airplane flying&quot;) </span><br><span class=\"line\"> </span><br><span class=\"line\">class Bird:</span><br><span class=\"line\">    def fly(self):</span><br><span class=\"line\">        print(&apos;Bird is flying&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def lift_off(entity): </span><br><span class=\"line\">    entity.fly() </span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    lift_off(Duck)</span><br><span class=\"line\">    lift_off(Airplane)</span><br><span class=\"line\">    bird = Bird()</span><br><span class=\"line\">    lift_off(bird)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Duck: </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def fly(cls): </span><br><span class=\"line\">        print(&quot;Duck flying&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Airplane:</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def fly(): </span><br><span class=\"line\">        print(&quot;Airplane flying&quot;) </span><br><span class=\"line\"> </span><br><span class=\"line\">class Bird:</span><br><span class=\"line\">    def fly(self):</span><br><span class=\"line\">        print(&apos;Bird is flying&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">def lift_off(entity): </span><br><span class=\"line\">    entity.fly() </span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    lift_off(Duck)</span><br><span class=\"line\">    lift_off(Airplane)</span><br><span class=\"line\">    bird = Bird()</span><br><span class=\"line\">    lift_off(bird)</span><br></pre></td></tr></table></figure>\n"},{"title":"(1) python","date":"2018-11-14T13:57:47.000Z","_content":"\n\n\n编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。\n\n解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。\n\nPython 是一门先编译后解释的语言。\n\n当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。\n\n当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。\n\n pyc 文件其实是 PyCodeObject 的一种持久化保存方式。\n\n**执行 Python 程序的三种方式：\n解释器、交互式运行、IDE运行**\n\n","source":"_posts/python基础/python.md","raw":"\n---\ntitle: (1) python\ndate: 2018-11-14 21:57:47\ntags:\ncategories: python基础\n---\n\n\n\n编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。\n\n解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。\n\nPython 是一门先编译后解释的语言。\n\n当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。\n\n当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。\n\n pyc 文件其实是 PyCodeObject 的一种持久化保存方式。\n\n**执行 Python 程序的三种方式：\n解释器、交互式运行、IDE运行**\n\n","slug":"python基础/python","published":1,"updated":"2020-04-10T16:46:16.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuiz004074uxt0wqnuln","content":"<p>编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。</p>\n<p>解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。</p>\n<p>Python 是一门先编译后解释的语言。</p>\n<p>当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。</p>\n<p>当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。</p>\n<p> pyc 文件其实是 PyCodeObject 的一种持久化保存方式。</p>\n<p><strong>执行 Python 程序的三种方式：<br>解释器、交互式运行、IDE运行</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。</p>\n<p>解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。</p>\n<p>Python 是一门先编译后解释的语言。</p>\n<p>当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。</p>\n<p>当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。</p>\n<p> pyc 文件其实是 PyCodeObject 的一种持久化保存方式。</p>\n<p><strong>执行 Python 程序的三种方式：<br>解释器、交互式运行、IDE运行</strong></p>\n"},{"title":"装饰器","date":"2019-10-09T03:05:31.000Z","_content":"\n绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.\n\nPython 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象\n```\ndef foo(): pass\ntype(foo)  # function\ncallable(foo)  # True\n```\n\n只要自定义类的 `__call__` 魔法方法即可让任意类变成可被调用\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self): # 定义类的 `__call__` 方法\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n    def __del__(self):\n        del self.a\n        del self.b\n        del self.range\n\nx = X(1,2,3)\nx() # 像函数一样调用\n```\n\n```\nimport time\nimport random\nimport functools\n\ndef timer(wrapped):\n    \"\"\"装饰器：记录并打印函数耗时\"\"\"\n\n    @functools.wraps(wrapped)  #  可以使函数保持原有签名\n    def decorated(*args, **kwargs):\n        st = time.time()\n        ret = wrapped(*args, **kwargs)\n        print('execution take: {} seconds'.format(time.time() - st))\n        return ret\n    return decorated\n\ndef counter(func):\n    \"\"\"装饰器：记录并打印调用次数\"\"\"\n    count = 0\n    @functools.wraps(func)\n    def decorated(*args, **kwargs):\n        # 次数累加\n        nonlocal count\n        count += 1\n        print(f\"Count: {count}\")\n        return func(*args, **kwargs)\n    return decorated\n\n@counter\n@timer\ndef random_sleep():\n    '德玛西亚'\n    time.sleep(random.random())\n\n\nrandom_sleep()\nrandom_sleep()\nprint(random_sleep.__name__)\nprint(random_sleep.__doc__)\n```\n\n```\n\n\ndef provide_number(min_num, max_num):\n    \"\"\"装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数\n    \"\"\"\n\n    def wrapper(func):\n        def decorated(*args, **kwargs):\n            num = random.randint(min_num, max_num)\n            # 将 num 作为第一个参数追加后调用函数\n            return func(num, *args, **kwargs)\n\n        return decorated\n\n    return wrapper\n\n\n@provide_number(1, 100)\ndef print_random_number(num):\n    print(num)\n```\nwrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决**“嵌套层级深”和“无法通用”**两个问题\n```\nimport wrapt\nimport random\n\n\ndef provide_number(min_num, max_num):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        # 参数含义：\n        #\n        # - wrapped：被装饰的函数或类方法\n        # - instance：\n        #   - 如果被装饰者为普通类方法，该值为类实例\n        #   - 如果被装饰者为 classmethod 类方法，该值为类\n        #   - 如果被装饰者为类/函数/静态方法，该值为 None\n        #\n        # - args：调用时的位置参数（注意没有 * 符号）\n        # - kwargs：调用时的关键字参数（注意没有 ** 符号）\n        #\n        num = random.randint(min_num, max_num)\n        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数\n        args = (num,) + args\n        return wrapped(*args, **kwargs)\n\n    return wrapper\n\n@provide_number(1,100)\ndef number(num):\n    print(num)\n\nnumber()\n```\n```\nimport time\nimport functools\n\n\nclass DelayFunc:\n    def __init__(self,  duration, func):\n        self.duration = duration\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print(f'Wait for {self.duration} seconds...')\n        time.sleep(self.duration)\n        return self.func(*args, **kwargs)\n\n    def eager_call(self, *args, **kwargs):\n        print('Call without delay')\n        return self.func(*args, **kwargs)\n\n\ndef delay(duration):\n    \"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行\n    \"\"\"\n    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造\n    # DelayFunc 实例\n    return functools.partial(DelayFunc, duration)\n\n@delay(duration=2)\ndef add(a, b):\n    return a + b\n\n\n# 这次调用将会延迟 2 秒\nprint(add(1, 2))\n# 这次调用将会立即执行\nprint(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数\n```\n```\ndef add(a, b):\n    return a + b\n\nimport functools\nadd_3 = functools.partial(add, 3)\nprint(add_3(1))\n```\n","source":"_posts/python/装饰器.md","raw":"---\ntitle: 装饰器\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.\n\nPython 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象\n```\ndef foo(): pass\ntype(foo)  # function\ncallable(foo)  # True\n```\n\n只要自定义类的 `__call__` 魔法方法即可让任意类变成可被调用\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self): # 定义类的 `__call__` 方法\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n    def __del__(self):\n        del self.a\n        del self.b\n        del self.range\n\nx = X(1,2,3)\nx() # 像函数一样调用\n```\n\n```\nimport time\nimport random\nimport functools\n\ndef timer(wrapped):\n    \"\"\"装饰器：记录并打印函数耗时\"\"\"\n\n    @functools.wraps(wrapped)  #  可以使函数保持原有签名\n    def decorated(*args, **kwargs):\n        st = time.time()\n        ret = wrapped(*args, **kwargs)\n        print('execution take: {} seconds'.format(time.time() - st))\n        return ret\n    return decorated\n\ndef counter(func):\n    \"\"\"装饰器：记录并打印调用次数\"\"\"\n    count = 0\n    @functools.wraps(func)\n    def decorated(*args, **kwargs):\n        # 次数累加\n        nonlocal count\n        count += 1\n        print(f\"Count: {count}\")\n        return func(*args, **kwargs)\n    return decorated\n\n@counter\n@timer\ndef random_sleep():\n    '德玛西亚'\n    time.sleep(random.random())\n\n\nrandom_sleep()\nrandom_sleep()\nprint(random_sleep.__name__)\nprint(random_sleep.__doc__)\n```\n\n```\n\n\ndef provide_number(min_num, max_num):\n    \"\"\"装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数\n    \"\"\"\n\n    def wrapper(func):\n        def decorated(*args, **kwargs):\n            num = random.randint(min_num, max_num)\n            # 将 num 作为第一个参数追加后调用函数\n            return func(num, *args, **kwargs)\n\n        return decorated\n\n    return wrapper\n\n\n@provide_number(1, 100)\ndef print_random_number(num):\n    print(num)\n```\nwrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决**“嵌套层级深”和“无法通用”**两个问题\n```\nimport wrapt\nimport random\n\n\ndef provide_number(min_num, max_num):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        # 参数含义：\n        #\n        # - wrapped：被装饰的函数或类方法\n        # - instance：\n        #   - 如果被装饰者为普通类方法，该值为类实例\n        #   - 如果被装饰者为 classmethod 类方法，该值为类\n        #   - 如果被装饰者为类/函数/静态方法，该值为 None\n        #\n        # - args：调用时的位置参数（注意没有 * 符号）\n        # - kwargs：调用时的关键字参数（注意没有 ** 符号）\n        #\n        num = random.randint(min_num, max_num)\n        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数\n        args = (num,) + args\n        return wrapped(*args, **kwargs)\n\n    return wrapper\n\n@provide_number(1,100)\ndef number(num):\n    print(num)\n\nnumber()\n```\n```\nimport time\nimport functools\n\n\nclass DelayFunc:\n    def __init__(self,  duration, func):\n        self.duration = duration\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print(f'Wait for {self.duration} seconds...')\n        time.sleep(self.duration)\n        return self.func(*args, **kwargs)\n\n    def eager_call(self, *args, **kwargs):\n        print('Call without delay')\n        return self.func(*args, **kwargs)\n\n\ndef delay(duration):\n    \"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行\n    \"\"\"\n    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造\n    # DelayFunc 实例\n    return functools.partial(DelayFunc, duration)\n\n@delay(duration=2)\ndef add(a, b):\n    return a + b\n\n\n# 这次调用将会延迟 2 秒\nprint(add(1, 2))\n# 这次调用将会立即执行\nprint(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数\n```\n```\ndef add(a, b):\n    return a + b\n\nimport functools\nadd_3 = functools.partial(add, 3)\nprint(add_3(1))\n```\n","slug":"python/装饰器","published":1,"updated":"2020-04-10T16:46:16.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuj5004374uxrq5w3vx7","content":"<p>绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.</p>\n<p>Python 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(): pass</span><br><span class=\"line\">type(foo)  # function</span><br><span class=\"line\">callable(foo)  # True</span><br></pre></td></tr></table></figure></p>\n<p>只要自定义类的 <code>__call__</code> 魔法方法即可让任意类变成可被调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self): # 定义类的 `__call__` 方法</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        del self.a</span><br><span class=\"line\">        del self.b</span><br><span class=\"line\">        del self.range</span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">x() # 像函数一样调用</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\">def timer(wrapped):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印函数耗时&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @functools.wraps(wrapped)  #  可以使函数保持原有签名</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        st = time.time()</span><br><span class=\"line\">        ret = wrapped(*args, **kwargs)</span><br><span class=\"line\">        print(&apos;execution take: &#123;&#125; seconds&apos;.format(time.time() - st))</span><br><span class=\"line\">        return ret</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">def counter(func):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印调用次数&quot;&quot;&quot;</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    @functools.wraps(func)</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        # 次数累加</span><br><span class=\"line\">        nonlocal count</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">        print(f&quot;Count: &#123;count&#125;&quot;)</span><br><span class=\"line\">        return func(*args, **kwargs)</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">@counter</span><br><span class=\"line\">@timer</span><br><span class=\"line\">def random_sleep():</span><br><span class=\"line\">    &apos;德玛西亚&apos;</span><br><span class=\"line\">    time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">print(random_sleep.__name__)</span><br><span class=\"line\">print(random_sleep.__doc__)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def wrapper(func):</span><br><span class=\"line\">        def decorated(*args, **kwargs):</span><br><span class=\"line\">            num = random.randint(min_num, max_num)</span><br><span class=\"line\">            # 将 num 作为第一个参数追加后调用函数</span><br><span class=\"line\">            return func(num, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1, 100)</span><br><span class=\"line\">def print_random_number(num):</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n<p>wrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决<strong>“嵌套层级深”和“无法通用”</strong>两个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import wrapt</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    @wrapt.decorator</span><br><span class=\"line\">    def wrapper(wrapped, instance, args, kwargs):</span><br><span class=\"line\">        # 参数含义：</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - wrapped：被装饰的函数或类方法</span><br><span class=\"line\">        # - instance：</span><br><span class=\"line\">        #   - 如果被装饰者为普通类方法，该值为类实例</span><br><span class=\"line\">        #   - 如果被装饰者为 classmethod 类方法，该值为类</span><br><span class=\"line\">        #   - 如果被装饰者为类/函数/静态方法，该值为 None</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - args：调用时的位置参数（注意没有 * 符号）</span><br><span class=\"line\">        # - kwargs：调用时的关键字参数（注意没有 ** 符号）</span><br><span class=\"line\">        #</span><br><span class=\"line\">        num = random.randint(min_num, max_num)</span><br><span class=\"line\">        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span><br><span class=\"line\">        args = (num,) + args</span><br><span class=\"line\">        return wrapped(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1,100)</span><br><span class=\"line\">def number(num):</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">number()</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class DelayFunc:</span><br><span class=\"line\">    def __init__(self,  duration, func):</span><br><span class=\"line\">        self.duration = duration</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(f&apos;Wait for &#123;self.duration&#125; seconds...&apos;)</span><br><span class=\"line\">        time.sleep(self.duration)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    def eager_call(self, *args, **kwargs):</span><br><span class=\"line\">        print(&apos;Call without delay&apos;)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def delay(duration):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span><br><span class=\"line\">    # DelayFunc 实例</span><br><span class=\"line\">    return functools.partial(DelayFunc, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">@delay(duration=2)</span><br><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这次调用将会延迟 2 秒</span><br><span class=\"line\">print(add(1, 2))</span><br><span class=\"line\"># 这次调用将会立即执行</span><br><span class=\"line\">print(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">import functools</span><br><span class=\"line\">add_3 = functools.partial(add, 3)</span><br><span class=\"line\">print(add_3(1))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.</p>\n<p>Python 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(): pass</span><br><span class=\"line\">type(foo)  # function</span><br><span class=\"line\">callable(foo)  # True</span><br></pre></td></tr></table></figure></p>\n<p>只要自定义类的 <code>__call__</code> 魔法方法即可让任意类变成可被调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self): # 定义类的 `__call__` 方法</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        del self.a</span><br><span class=\"line\">        del self.b</span><br><span class=\"line\">        del self.range</span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">x() # 像函数一样调用</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\">def timer(wrapped):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印函数耗时&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @functools.wraps(wrapped)  #  可以使函数保持原有签名</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        st = time.time()</span><br><span class=\"line\">        ret = wrapped(*args, **kwargs)</span><br><span class=\"line\">        print(&apos;execution take: &#123;&#125; seconds&apos;.format(time.time() - st))</span><br><span class=\"line\">        return ret</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">def counter(func):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印调用次数&quot;&quot;&quot;</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    @functools.wraps(func)</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        # 次数累加</span><br><span class=\"line\">        nonlocal count</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">        print(f&quot;Count: &#123;count&#125;&quot;)</span><br><span class=\"line\">        return func(*args, **kwargs)</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">@counter</span><br><span class=\"line\">@timer</span><br><span class=\"line\">def random_sleep():</span><br><span class=\"line\">    &apos;德玛西亚&apos;</span><br><span class=\"line\">    time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">print(random_sleep.__name__)</span><br><span class=\"line\">print(random_sleep.__doc__)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def wrapper(func):</span><br><span class=\"line\">        def decorated(*args, **kwargs):</span><br><span class=\"line\">            num = random.randint(min_num, max_num)</span><br><span class=\"line\">            # 将 num 作为第一个参数追加后调用函数</span><br><span class=\"line\">            return func(num, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1, 100)</span><br><span class=\"line\">def print_random_number(num):</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n<p>wrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决<strong>“嵌套层级深”和“无法通用”</strong>两个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import wrapt</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    @wrapt.decorator</span><br><span class=\"line\">    def wrapper(wrapped, instance, args, kwargs):</span><br><span class=\"line\">        # 参数含义：</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - wrapped：被装饰的函数或类方法</span><br><span class=\"line\">        # - instance：</span><br><span class=\"line\">        #   - 如果被装饰者为普通类方法，该值为类实例</span><br><span class=\"line\">        #   - 如果被装饰者为 classmethod 类方法，该值为类</span><br><span class=\"line\">        #   - 如果被装饰者为类/函数/静态方法，该值为 None</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - args：调用时的位置参数（注意没有 * 符号）</span><br><span class=\"line\">        # - kwargs：调用时的关键字参数（注意没有 ** 符号）</span><br><span class=\"line\">        #</span><br><span class=\"line\">        num = random.randint(min_num, max_num)</span><br><span class=\"line\">        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span><br><span class=\"line\">        args = (num,) + args</span><br><span class=\"line\">        return wrapped(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1,100)</span><br><span class=\"line\">def number(num):</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">number()</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class DelayFunc:</span><br><span class=\"line\">    def __init__(self,  duration, func):</span><br><span class=\"line\">        self.duration = duration</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(f&apos;Wait for &#123;self.duration&#125; seconds...&apos;)</span><br><span class=\"line\">        time.sleep(self.duration)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    def eager_call(self, *args, **kwargs):</span><br><span class=\"line\">        print(&apos;Call without delay&apos;)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def delay(duration):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span><br><span class=\"line\">    # DelayFunc 实例</span><br><span class=\"line\">    return functools.partial(DelayFunc, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">@delay(duration=2)</span><br><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这次调用将会延迟 2 秒</span><br><span class=\"line\">print(add(1, 2))</span><br><span class=\"line\"># 这次调用将会立即执行</span><br><span class=\"line\">print(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">import functools</span><br><span class=\"line\">add_3 = functools.partial(add, 3)</span><br><span class=\"line\">print(add_3(1))</span><br></pre></td></tr></table></figure>\n"},{"title":"(3) python中变量与运算符","date":"2018-11-14T13:58:39.000Z","_content":"**变量的命名规则**\n字母，数字，下划线_和他们的组合\n注意：\n```\n1、首字母不能为数字\n2、只有下划线_这一种特殊字符\n3、系统关键字不能作为变量名#True = 1\n  #报错can't assign to keyword\n4、变量是区分大小写的\ncat_name=1\ncatName=1    #变量的两种命名方式\n```\n**运算符**\npython运算符有：\n算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级\n\nPython算术运算符\n```\n+\t加 - 两个对象相加\ta + b 输出结果 31\n-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11\n*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210\n/\t除 - x 除以 y\tb / a 输出结果 2.1\n%\t取模 - 返回除法的余数\tb % a 输出结果 1\n**\t幂 - 返回x的y次幂\ta**b 为10的21次方\n//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0\n```\nPython比较运算符\n```\n==\t等于 - 比较对象是否相等\t(a == b) 返回 False。\n!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。\n>\t大于 - 返回x是否大于y\t(a > b) 返回 False。\n<\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a < b) 返回 True。\n>=\t大于等于 - 返回x是否大于等于y。\t(a >= b) 返回 False。\n<=\t小于等于 - 返回x是否小于等于y。\t(a <= b) 返回 True。\n```\nPython赋值运算符\n```\n=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c\n+=\t加法赋值运算符\tc += a 等效于 c = c + a\n-=\t减法赋值运算符\tc -= a 等效于 c = c - a\n*=\t乘法赋值运算符\tc *= a 等效于 c = c * a\n/=\t除法赋值运算符\tc /= a 等效于 c = c / a\n%=\t取模赋值运算符\tc %= a 等效于 c = c % a\n**=\t幂赋值运算符\tc **= a 等效于 c = c ** a\n//=\t取整除赋值运算符\tc //= a 等效于 c = c // a\n```\nPython位运算符\n\n按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：\n```\n下表中变量 a 为 60，b 为 13二进制格式如下：\n\na = 0011 1100\n\nb = 0000 1101\n\n-----------------\n\na&b = 0000 1100\n\na|b = 0011 1101\n\na^b = 0011 0001\n\n~a  = 1100 0011\n运算符\t\n&\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<\t左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。\ta << 2 输出结果 240 ，二进制解释： 1111 0000\n>>\t右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数\ta >> 2 输出结果 15 ，二进制解释： 0000 1111\n以下实例演示了Python所有位运算符的操作：\n\n实例(Python 3.0+)\n \n#!/usr/bin/python3\n \na = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n \nc = a & b;        # 12 = 0000 1100\nprint (\"1 - c 的值为：\", c)\n \nc = a | b;        # 61 = 0011 1101 \nprint (\"2 - c 的值为：\", c)\n \nc = a ^ b;        # 49 = 0011 0001\nprint (\"3 - c 的值为：\", c)\n \nc = ~a;           # -61 = 1100 0011\nprint (\"4 - c 的值为：\", c)\n \nc = a << 2;       # 240 = 1111 0000\nprint (\"5 - c 的值为：\", c)\n \nc = a >> 2;       # 15 = 0000 1111\nprint (\"6 - c 的值为：\", c)\n以上实例输出结果：\n\n1 - c 的值为： 12\n2 - c 的值为： 61\n3 - c 的值为： 49\n4 - c 的值为： -61\n5 - c 的值为： 240\n6 - c 的值为： 15\n```\nPython逻辑运算符\n```\nand\tx and y\t布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。\nor\tx or y\t布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。\nnot\tnot x\t布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False\n```\nPython成员运算符\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n```\nin\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n```\nPython身份运算符\n身份运算符用于比较两个对象的存储单元\n```\nis\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n注： id() 函数用于获取对象内存地址。\n\nis 与 == 区别：\n\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n\n>>>a = [1, 2, 3] >>> b = a >>> b is a True >>> b == a True >>> b = a[:] >>> b is a False >>> b == a True\n```\nPython运算符优先级\n以下表格列出了从最高到最低优先级的所有运算符：\n```\n**\t指数 (最高优先级)\n~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)\n* / % //\t乘，除，取模和取整除\n+ -\t加法减法\n>> <<\t右移，左移运算符\n&\t位 'AND'\n^ |\t位运算符\n<= < > >=\t比较运算符\n<> == !=\t等于运算符\n= %= /= //= -= += *= **=\t赋值运算符\nis is not\t身份运算符\nin not in\t成员运算符\nand or not\t逻辑运算符\n```\n**一些杂项**\n ```\n3+2-1      #4   同优先级  左集合\nc=a+b     #先算a+b然后赋值给c  右集合\nnot (1 or 2)+2==3   #True  建议括号只用来改变优先级关系\n","source":"_posts/python基础/python中变量与运算符.md","raw":"---\ntitle: (3) python中变量与运算符\ndate: 2018-11-14 21:58:39\ntags:\ncategories: python基础\n---\n**变量的命名规则**\n字母，数字，下划线_和他们的组合\n注意：\n```\n1、首字母不能为数字\n2、只有下划线_这一种特殊字符\n3、系统关键字不能作为变量名#True = 1\n  #报错can't assign to keyword\n4、变量是区分大小写的\ncat_name=1\ncatName=1    #变量的两种命名方式\n```\n**运算符**\npython运算符有：\n算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级\n\nPython算术运算符\n```\n+\t加 - 两个对象相加\ta + b 输出结果 31\n-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11\n*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210\n/\t除 - x 除以 y\tb / a 输出结果 2.1\n%\t取模 - 返回除法的余数\tb % a 输出结果 1\n**\t幂 - 返回x的y次幂\ta**b 为10的21次方\n//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0\n```\nPython比较运算符\n```\n==\t等于 - 比较对象是否相等\t(a == b) 返回 False。\n!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。\n>\t大于 - 返回x是否大于y\t(a > b) 返回 False。\n<\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a < b) 返回 True。\n>=\t大于等于 - 返回x是否大于等于y。\t(a >= b) 返回 False。\n<=\t小于等于 - 返回x是否小于等于y。\t(a <= b) 返回 True。\n```\nPython赋值运算符\n```\n=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c\n+=\t加法赋值运算符\tc += a 等效于 c = c + a\n-=\t减法赋值运算符\tc -= a 等效于 c = c - a\n*=\t乘法赋值运算符\tc *= a 等效于 c = c * a\n/=\t除法赋值运算符\tc /= a 等效于 c = c / a\n%=\t取模赋值运算符\tc %= a 等效于 c = c % a\n**=\t幂赋值运算符\tc **= a 等效于 c = c ** a\n//=\t取整除赋值运算符\tc //= a 等效于 c = c // a\n```\nPython位运算符\n\n按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：\n```\n下表中变量 a 为 60，b 为 13二进制格式如下：\n\na = 0011 1100\n\nb = 0000 1101\n\n-----------------\n\na&b = 0000 1100\n\na|b = 0011 1101\n\na^b = 0011 0001\n\n~a  = 1100 0011\n运算符\t\n&\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<\t左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。\ta << 2 输出结果 240 ，二进制解释： 1111 0000\n>>\t右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数\ta >> 2 输出结果 15 ，二进制解释： 0000 1111\n以下实例演示了Python所有位运算符的操作：\n\n实例(Python 3.0+)\n \n#!/usr/bin/python3\n \na = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n \nc = a & b;        # 12 = 0000 1100\nprint (\"1 - c 的值为：\", c)\n \nc = a | b;        # 61 = 0011 1101 \nprint (\"2 - c 的值为：\", c)\n \nc = a ^ b;        # 49 = 0011 0001\nprint (\"3 - c 的值为：\", c)\n \nc = ~a;           # -61 = 1100 0011\nprint (\"4 - c 的值为：\", c)\n \nc = a << 2;       # 240 = 1111 0000\nprint (\"5 - c 的值为：\", c)\n \nc = a >> 2;       # 15 = 0000 1111\nprint (\"6 - c 的值为：\", c)\n以上实例输出结果：\n\n1 - c 的值为： 12\n2 - c 的值为： 61\n3 - c 的值为： 49\n4 - c 的值为： -61\n5 - c 的值为： 240\n6 - c 的值为： 15\n```\nPython逻辑运算符\n```\nand\tx and y\t布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。\nor\tx or y\t布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。\nnot\tnot x\t布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False\n```\nPython成员运算符\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n```\nin\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n```\nPython身份运算符\n身份运算符用于比较两个对象的存储单元\n```\nis\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n注： id() 函数用于获取对象内存地址。\n\nis 与 == 区别：\n\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n\n>>>a = [1, 2, 3] >>> b = a >>> b is a True >>> b == a True >>> b = a[:] >>> b is a False >>> b == a True\n```\nPython运算符优先级\n以下表格列出了从最高到最低优先级的所有运算符：\n```\n**\t指数 (最高优先级)\n~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)\n* / % //\t乘，除，取模和取整除\n+ -\t加法减法\n>> <<\t右移，左移运算符\n&\t位 'AND'\n^ |\t位运算符\n<= < > >=\t比较运算符\n<> == !=\t等于运算符\n= %= /= //= -= += *= **=\t赋值运算符\nis is not\t身份运算符\nin not in\t成员运算符\nand or not\t逻辑运算符\n```\n**一些杂项**\n ```\n3+2-1      #4   同优先级  左集合\nc=a+b     #先算a+b然后赋值给c  右集合\nnot (1 or 2)+2==3   #True  建议括号只用来改变优先级关系\n","slug":"python基础/python中变量与运算符","published":1,"updated":"2020-04-10T16:46:16.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuja004574uxj7dqr2r9","content":"<p><strong>变量的命名规则</strong><br>字母，数字，下划线_和他们的组合<br>注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首字母不能为数字</span><br><span class=\"line\">2、只有下划线_这一种特殊字符</span><br><span class=\"line\">3、系统关键字不能作为变量名#True = 1</span><br><span class=\"line\">  #报错can&apos;t assign to keyword</span><br><span class=\"line\">4、变量是区分大小写的</span><br><span class=\"line\">cat_name=1</span><br><span class=\"line\">catName=1    #变量的两种命名方式</span><br></pre></td></tr></table></figure></p>\n<p><strong>运算符</strong><br>python运算符有：<br>算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级</p>\n<p>Python算术运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+\t加 - 两个对象相加\ta + b 输出结果 31</span><br><span class=\"line\">-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11</span><br><span class=\"line\">*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210</span><br><span class=\"line\">/\t除 - x 除以 y\tb / a 输出结果 2.1</span><br><span class=\"line\">%\t取模 - 返回除法的余数\tb % a 输出结果 1</span><br><span class=\"line\">**\t幂 - 返回x的y次幂\ta**b 为10的21次方</span><br><span class=\"line\">//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</span><br></pre></td></tr></table></figure></p>\n<p>Python比较运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==\t等于 - 比较对象是否相等\t(a == b) 返回 False。</span><br><span class=\"line\">!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。</span><br><span class=\"line\">&gt;\t大于 - 返回x是否大于y\t(a &gt; b) 返回 False。</span><br><span class=\"line\">&lt;\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a &lt; b) 返回 True。</span><br><span class=\"line\">&gt;=\t大于等于 - 返回x是否大于等于y。\t(a &gt;= b) 返回 False。</span><br><span class=\"line\">&lt;=\t小于等于 - 返回x是否小于等于y。\t(a &lt;= b) 返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python赋值运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c</span><br><span class=\"line\">+=\t加法赋值运算符\tc += a 等效于 c = c + a</span><br><span class=\"line\">-=\t减法赋值运算符\tc -= a 等效于 c = c - a</span><br><span class=\"line\">*=\t乘法赋值运算符\tc *= a 等效于 c = c * a</span><br><span class=\"line\">/=\t除法赋值运算符\tc /= a 等效于 c = c / a</span><br><span class=\"line\">%=\t取模赋值运算符\tc %= a 等效于 c = c % a</span><br><span class=\"line\">**=\t幂赋值运算符\tc **= a 等效于 c = c ** a</span><br><span class=\"line\">//=\t取整除赋值运算符\tc //= a 等效于 c = c // a</span><br></pre></td></tr></table></figure></p>\n<p>Python位运算符</p>\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下表中变量 a 为 60，b 为 13二进制格式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">a = 0011 1100</span><br><span class=\"line\"></span><br><span class=\"line\">b = 0000 1101</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">a&amp;b = 0000 1100</span><br><span class=\"line\"></span><br><span class=\"line\">a|b = 0011 1101</span><br><span class=\"line\"></span><br><span class=\"line\">a^b = 0011 0001</span><br><span class=\"line\"></span><br><span class=\"line\">~a  = 1100 0011</span><br><span class=\"line\">运算符\t</span><br><span class=\"line\">&amp;\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</span><br><span class=\"line\">|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101</span><br><span class=\"line\">^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</span><br><span class=\"line\">~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</span><br><span class=\"line\">&lt;&lt;\t左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。\ta &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</span><br><span class=\"line\">&gt;&gt;\t右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数\ta &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</span><br><span class=\"line\">以下实例演示了Python所有位运算符的操作：</span><br><span class=\"line\"></span><br><span class=\"line\">实例(Python 3.0+)</span><br><span class=\"line\"> </span><br><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 60            # 60 = 0011 1100 </span><br><span class=\"line\">b = 13            # 13 = 0000 1101 </span><br><span class=\"line\">c = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &amp; b;        # 12 = 0000 1100</span><br><span class=\"line\">print (&quot;1 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a | b;        # 61 = 0011 1101 </span><br><span class=\"line\">print (&quot;2 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a ^ b;        # 49 = 0011 0001</span><br><span class=\"line\">print (&quot;3 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = ~a;           # -61 = 1100 0011</span><br><span class=\"line\">print (&quot;4 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &lt;&lt; 2;       # 240 = 1111 0000</span><br><span class=\"line\">print (&quot;5 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &gt;&gt; 2;       # 15 = 0000 1111</span><br><span class=\"line\">print (&quot;6 - c 的值为：&quot;, c)</span><br><span class=\"line\">以上实例输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\">1 - c 的值为： 12</span><br><span class=\"line\">2 - c 的值为： 61</span><br><span class=\"line\">3 - c 的值为： 49</span><br><span class=\"line\">4 - c 的值为： -61</span><br><span class=\"line\">5 - c 的值为： 240</span><br><span class=\"line\">6 - c 的值为： 15</span><br></pre></td></tr></table></figure></p>\n<p>Python逻辑运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and\tx and y\t布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。</span><br><span class=\"line\">or\tx or y\t布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。</span><br><span class=\"line\">not\tnot x\t布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False</span><br></pre></td></tr></table></figure></p>\n<p>Python成员运算符<br>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。</span><br><span class=\"line\">not in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python身份运算符<br>身份运算符用于比较两个对象的存储单元<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</span><br><span class=\"line\">is not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</span><br><span class=\"line\">注： id() 函数用于获取对象内存地址。</span><br><span class=\"line\"></span><br><span class=\"line\">is 与 == 区别：</span><br><span class=\"line\"></span><br><span class=\"line\">is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</span><br></pre></td></tr></table></figure></p>\n<p>Python运算符优先级<br>以下表格列出了从最高到最低优先级的所有运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**\t指数 (最高优先级)</span><br><span class=\"line\">~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</span><br><span class=\"line\">* / % //\t乘，除，取模和取整除</span><br><span class=\"line\">+ -\t加法减法</span><br><span class=\"line\">&gt;&gt; &lt;&lt;\t右移，左移运算符</span><br><span class=\"line\">&amp;\t位 &apos;AND&apos;</span><br><span class=\"line\">^ |\t位运算符</span><br><span class=\"line\">&lt;= &lt; &gt; &gt;=\t比较运算符</span><br><span class=\"line\">&lt;&gt; == !=\t等于运算符</span><br><span class=\"line\">= %= /= //= -= += *= **=\t赋值运算符</span><br><span class=\"line\">is is not\t身份运算符</span><br><span class=\"line\">in not in\t成员运算符</span><br><span class=\"line\">and or not\t逻辑运算符</span><br></pre></td></tr></table></figure></p>\n<p><strong>一些杂项</strong><br> <code>`</code><br>3+2-1      #4   同优先级  左集合<br>c=a+b     #先算a+b然后赋值给c  右集合<br>not (1 or 2)+2==3   #True  建议括号只用来改变优先级关系</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>变量的命名规则</strong><br>字母，数字，下划线_和他们的组合<br>注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首字母不能为数字</span><br><span class=\"line\">2、只有下划线_这一种特殊字符</span><br><span class=\"line\">3、系统关键字不能作为变量名#True = 1</span><br><span class=\"line\">  #报错can&apos;t assign to keyword</span><br><span class=\"line\">4、变量是区分大小写的</span><br><span class=\"line\">cat_name=1</span><br><span class=\"line\">catName=1    #变量的两种命名方式</span><br></pre></td></tr></table></figure></p>\n<p><strong>运算符</strong><br>python运算符有：<br>算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级</p>\n<p>Python算术运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+\t加 - 两个对象相加\ta + b 输出结果 31</span><br><span class=\"line\">-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11</span><br><span class=\"line\">*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210</span><br><span class=\"line\">/\t除 - x 除以 y\tb / a 输出结果 2.1</span><br><span class=\"line\">%\t取模 - 返回除法的余数\tb % a 输出结果 1</span><br><span class=\"line\">**\t幂 - 返回x的y次幂\ta**b 为10的21次方</span><br><span class=\"line\">//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</span><br></pre></td></tr></table></figure></p>\n<p>Python比较运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==\t等于 - 比较对象是否相等\t(a == b) 返回 False。</span><br><span class=\"line\">!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。</span><br><span class=\"line\">&gt;\t大于 - 返回x是否大于y\t(a &gt; b) 返回 False。</span><br><span class=\"line\">&lt;\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a &lt; b) 返回 True。</span><br><span class=\"line\">&gt;=\t大于等于 - 返回x是否大于等于y。\t(a &gt;= b) 返回 False。</span><br><span class=\"line\">&lt;=\t小于等于 - 返回x是否小于等于y。\t(a &lt;= b) 返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python赋值运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c</span><br><span class=\"line\">+=\t加法赋值运算符\tc += a 等效于 c = c + a</span><br><span class=\"line\">-=\t减法赋值运算符\tc -= a 等效于 c = c - a</span><br><span class=\"line\">*=\t乘法赋值运算符\tc *= a 等效于 c = c * a</span><br><span class=\"line\">/=\t除法赋值运算符\tc /= a 等效于 c = c / a</span><br><span class=\"line\">%=\t取模赋值运算符\tc %= a 等效于 c = c % a</span><br><span class=\"line\">**=\t幂赋值运算符\tc **= a 等效于 c = c ** a</span><br><span class=\"line\">//=\t取整除赋值运算符\tc //= a 等效于 c = c // a</span><br></pre></td></tr></table></figure></p>\n<p>Python位运算符</p>\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下表中变量 a 为 60，b 为 13二进制格式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">a = 0011 1100</span><br><span class=\"line\"></span><br><span class=\"line\">b = 0000 1101</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">a&amp;b = 0000 1100</span><br><span class=\"line\"></span><br><span class=\"line\">a|b = 0011 1101</span><br><span class=\"line\"></span><br><span class=\"line\">a^b = 0011 0001</span><br><span class=\"line\"></span><br><span class=\"line\">~a  = 1100 0011</span><br><span class=\"line\">运算符\t</span><br><span class=\"line\">&amp;\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</span><br><span class=\"line\">|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101</span><br><span class=\"line\">^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</span><br><span class=\"line\">~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</span><br><span class=\"line\">&lt;&lt;\t左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。\ta &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</span><br><span class=\"line\">&gt;&gt;\t右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数\ta &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</span><br><span class=\"line\">以下实例演示了Python所有位运算符的操作：</span><br><span class=\"line\"></span><br><span class=\"line\">实例(Python 3.0+)</span><br><span class=\"line\"> </span><br><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 60            # 60 = 0011 1100 </span><br><span class=\"line\">b = 13            # 13 = 0000 1101 </span><br><span class=\"line\">c = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &amp; b;        # 12 = 0000 1100</span><br><span class=\"line\">print (&quot;1 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a | b;        # 61 = 0011 1101 </span><br><span class=\"line\">print (&quot;2 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a ^ b;        # 49 = 0011 0001</span><br><span class=\"line\">print (&quot;3 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = ~a;           # -61 = 1100 0011</span><br><span class=\"line\">print (&quot;4 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &lt;&lt; 2;       # 240 = 1111 0000</span><br><span class=\"line\">print (&quot;5 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &gt;&gt; 2;       # 15 = 0000 1111</span><br><span class=\"line\">print (&quot;6 - c 的值为：&quot;, c)</span><br><span class=\"line\">以上实例输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\">1 - c 的值为： 12</span><br><span class=\"line\">2 - c 的值为： 61</span><br><span class=\"line\">3 - c 的值为： 49</span><br><span class=\"line\">4 - c 的值为： -61</span><br><span class=\"line\">5 - c 的值为： 240</span><br><span class=\"line\">6 - c 的值为： 15</span><br></pre></td></tr></table></figure></p>\n<p>Python逻辑运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and\tx and y\t布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。</span><br><span class=\"line\">or\tx or y\t布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。</span><br><span class=\"line\">not\tnot x\t布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False</span><br></pre></td></tr></table></figure></p>\n<p>Python成员运算符<br>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。</span><br><span class=\"line\">not in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python身份运算符<br>身份运算符用于比较两个对象的存储单元<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</span><br><span class=\"line\">is not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</span><br><span class=\"line\">注： id() 函数用于获取对象内存地址。</span><br><span class=\"line\"></span><br><span class=\"line\">is 与 == 区别：</span><br><span class=\"line\"></span><br><span class=\"line\">is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</span><br></pre></td></tr></table></figure></p>\n<p>Python运算符优先级<br>以下表格列出了从最高到最低优先级的所有运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**\t指数 (最高优先级)</span><br><span class=\"line\">~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</span><br><span class=\"line\">* / % //\t乘，除，取模和取整除</span><br><span class=\"line\">+ -\t加法减法</span><br><span class=\"line\">&gt;&gt; &lt;&lt;\t右移，左移运算符</span><br><span class=\"line\">&amp;\t位 &apos;AND&apos;</span><br><span class=\"line\">^ |\t位运算符</span><br><span class=\"line\">&lt;= &lt; &gt; &gt;=\t比较运算符</span><br><span class=\"line\">&lt;&gt; == !=\t等于运算符</span><br><span class=\"line\">= %= /= //= -= += *= **=\t赋值运算符</span><br><span class=\"line\">is is not\t身份运算符</span><br><span class=\"line\">in not in\t成员运算符</span><br><span class=\"line\">and or not\t逻辑运算符</span><br></pre></td></tr></table></figure></p>\n<p><strong>一些杂项</strong><br> <code>`</code><br>3+2-1      #4   同优先级  左集合<br>c=a+b     #先算a+b然后赋值给c  右集合<br>not (1 or 2)+2==3   #True  建议括号只用来改变优先级关系</p>\n"},{"title":"(4) python中流程控制语句","date":"2018-11-14T13:58:54.000Z","_content":"\n**条件语句**\nif elif else都是关键字，需要能读和写\n\n基本格式：\n```\n  if 条件语句1：\n    执行语句块1\n  elif 条件语句2：\n    执行语句块2\n  else：\n    执行语句块3\n```\n执行过程：\n```\na.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。\nb.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。\n```\n注意：冒号后边语句块和冒号所在得语句要保持一个缩进。\n\n**if**\n判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。\n```\n  if 条件语句：\n      执行语句块\n  \n  age=20\n  要求判断年龄是否大于18，如果大于18就输出'成年人'\n  if age>18:\n      print('成年人')\n  \n  练习：判断一个数是否是偶数，如果是就打印'xxx是偶数'\n  n=18\n  if n%2==0:\n      print('%d是偶数'%(n))\n```\n2.if-else\n判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.\n```\n  if 条件语句：\n      执行语句块1\n  else：\n      执行语句块2\n  n=17\n  if n%2==0:\n      print('%d是偶数'%(n))\n  else:\n      print('%d是奇数'%(n))\n  练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。\n  input():从控制台获取键盘输入的一个字符串，以回车结束。\n  \n  inputvalue=input('请输入一个数：')\n  print(inputvalue)\n  n=int(inputvalue)\n  比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。\n  if n>10:\n  num=n*2\n      print(num)\n  else:\n  num=n**2\n      print(num)\n```\n3.if-elif-elif-else\n总结:\n\na.如果要求中需要多个判断，可以使用多个elif的if语句。\nb.一个if/elif/else语句中可以嵌套其他的if语句。\n```\n（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)\n方法一：\ngrade=96\nif grade>=90:\n    if grade>100:\n        print('成绩有误')\n    else:\n        print('优秀')\nelif grade>=80:\n    print('良好')\nelif grade>=60:\n      print('中等')\nelif grade>=0:\n      print('不及格')\nelse:\n      print('成绩有误')\n方法二：\ngrade=67\nif 100>=grade>=90:\n  print('优秀')\nelif 90>grade>=80:\n  print('良好')\nelif 80>grade>=60:\n  print('中等')\nelif 60>grade>=0:\n  print('不及格')\nelse:\n  print('成绩有误')\n  \n（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）\nage=1\nif age<2:\n  if age<=0:\n      print('年龄输入错误')\n  else:\n      print('婴儿')\nelif age<5:\n  print('儿童')\nelif age<13:\n  print('少年')\nelif age<19:\n  print('青年')\nelif age<41:\n  print('成年')\nelif age<61:\n  print('中年')\nelse:\n  print('老年')\n说明：Python中没有switch语法。\n\npass：占位，防止因为没有写块结构而出现语法错误。\n\nif n==10:\n    pass\n```\n**转换函数**\n\n1.int()\nint():将其他的数据转换成int类型的数据\n```\nnum=12.56\nprint(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）\nbool1=True\nprint(int(bool1))  # 1 将布尔值转换成整数，True->1  False->0\nstr1='123'\nprint(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。\n```\n2.flot()\nflot():将其他数据转换成浮点型\n3.bool()\nbool()：将其他的数据转换成布尔值\n\n数字转换成布尔，非0是True，0是False。\n```\nprint(bool(12))     # True\nprint(bool(-12.3))  # True\nprint(bool(0))      # False\n字符串转换成布尔，除了空串是False，其他的都是True。\n\nprint(bool('abc'))  # True\nprint(bool(''))     # False\n```\n注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。\n```\nif 10:\n  print('aaa')   # aaa （10转换成bool后是True) \nif 0:\n  print('aaa')   #  （0转换成bool后是False）\n```\n练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”\n```\n方法1：\nstr1=''\nif str1:\n  print(str1)\nelse:\n  print('空串')\n方法2：\nstr1='abc'\nif str1!='':\n  print(str1)\nelse:\n  print('空串')\n```\n4.str()\nstr()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。\n**循环**\npython中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）\n**for循环**\npython中的for循环只有for-in循环：\n```\n格式：\nfor 变量名 in 列表：\n  循环体\n执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。\n\n循环次数：由列表中的数据的个数决定。\n\n去获取字符串中的每一个字符\nstr1='abcdef'\nfor char in str1:\n  print(char)\n\n去统计字符串中'a'出现的次数\nstr1='avaadafvaavafaaa'\nn=0\nfor char in str1:\n  if char=='a':\n      n=n+1       \nprint(n)\nrange（）函数：可以生成一个数值范围\n````\n```\n打印1-100\nfor n in range(1,101):\n  print(n)\n用法1：range(n),生成0~n-1的值\nfor x in range(9):\n  print(x)\n````\n用法2：range(m,n),生成m~n-1的数\n```\nfor n in range(5,9):\n  print(n)\n打印0-100之间所有的偶数\nfor x in range(101):\n  if x%2==0:\n      print(x)\n```\n用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。\n```\nfor x in range(1,8,2):\n  print(x)   # 1,3,5,7 \n\n不通过字符串相乘，打印10次“=”,并且打印在同一行。\nfor _ in range(10):\n  print('=',end=' ')\n```\n求1+2+3...+100\n```\nn=0\nfor x in range(1,101):\n  n=n+x\nprint(n)\n```\n注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。\n\n**while循环**\n``` \n格式：\n while 条件语句：\n    循环体\n```\n执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False\n\nfor循环可以实现的操作，while循环都可以\n\n打印1-100\n```\n方法1：\nx=0\nwhile x<100:\n  x+=1\n  print(x) \n方法2：\nx=1\nwhile x<=100:\n  print(x)\n  x+=1\n```\n计算1+2+3+...+100\n```\nx=0\nn=0\nwhile n<100:\n  n+=1\n  x+=n\n  print(x)\n```\n求1-100中所有偶数的和\n```\n方法1：\nn=0\nx=0\nwhile n<=100:\n  if n%2==0:\n      x=x+n\n      n=n+1\n  print(x)\n方法2：\nn=0\nx=0\nwhile n<100:\n  n+=2\n  x=x+n\nprint(x)\n```\n**break和continue**\n1、break\nbreak是一个让循环提前结束的关键字\n\n如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。\n\n练习:找到1000~9999中第一个能够被13整除的数，打印出来\n```\nfor x in range(1000,10000):\n  if x%13==0:\n      print(x)\n      break    \n  \nfor x in range(1,100):\n  if x==50:\n      break\n      print(x)     # 1 2 3 ...  49\n```\n用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。\n\ninput()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。\n\n注意：break只能写在循环中\n```\n  sum1=0\n  while True:\n  num=int(input(\">>>\"))   # 获取键盘输入的内容，并且转换成int类型\n      sum1+=num   # 将当次输入的数字加起来\n      if num==0:   #  判断输入的数字是否是0，如果是就让循环结束\n          break   \n      print(num)\n  print(sum1)\n```\nfor循环的特点：次数确定，可以在序列中取数据\n\nwhile循环：循环次数不确定的（while True + break）\n\nrandint(m,n):产生一个m到n的随机整数\n\n产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。\n\n  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。\n```\n  import random\n  num=random.randint(0,100)   # 产生一个0到100的随机数\n  n=0\n  while True:\n  num1=int(input(\"请输入你猜的数字：\"))\n  n=n+1\n  if num1>num:\n      print('大了')\n  elif num1<num:\n      print('小了')\n  else:\n      print('恭喜你，猜对了！')       \n      print('一共猜了：%d次'%(n),end='  ')\n      if n<=5:\n          print('你太棒了，只猜了%d次就猜对了'%(n))\n      else:\n          print('下次加油！')\n      break\n```\n2、continue\ncontinue:结束当次循环，进入下次循环\n```\n  for x in range(1,10):\n      print('=')\n      continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断\n      print(x)\n  ````\n  求1~100中所有奇数的和\n```\n  sum=0\n  for x in range(1,100):\n      if x%2==0:\n          continue\n      sum=sum+x\n  print(sum)\n  ```\n  打印100~999中十位数上不是3的所有数：\n```\n  for x in range(100,1000):\n      if x//10%10==3:\n          continue\n      print(x)   \n ``` \n  统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）\n```\n  flag=True\n  n=0\n  while True:\n      num=int(input('请输入一个数：'))  # 输入数据\n      if num%2==1:  # 判断是否是奇数\n          continue\n      if num==0:\n          flag=False\n      n=n+1\n  print(n)\n````\n**else**\npython中循环语句后面可以加else语句。这个else语句会在循环结束后执行。\n```\n for 变量 in 序列：\n  循环体\n else：\n  循环结束后会执行的语句块\n ```\n```\n 1*2*3...*10\n sum1=1\n for x in range(1,11):\n  sum1*=x\n else:\n  print(sum1)\n```\n注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）\n\n  1*2*3...*10，当乘积大于10000就不在执行\n```\n  sum1=1\n  for x in range(1,11):\n      if sum1*x>10000:    \n          break\n      sum1*=x\n  print(sum1)\n  else:\n      print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行\n```\n**多重循环**\n在循环体里面可以有其他的循环语句，结构为：\n```\n for 变量 in 序列：\n     for 变量1 in 序列2：\n      循环体2\n  其它的循环语句\n \n for 变量 in 序列：\n  其他的循环语句1\n  while 条件语句：\n      循环体2\n  其他的循环语句2\n \n while 条件语句1：\n  while 条件语句2：\n      循环体2\n  其他的循环语句2\n```\n例如：\n```\n  如果n=5 打印\n  1\n  12\n  123\n  1234\n  12345\n\n  n=5\n  for x in range(1,n+1):   # 控制行数\n      for b in range(1,x+1):  # 控制当前行的数值\n          print(b,end='')\n      print()   # 一行结束换行\n\n  *****\n  ****\n  ***\n  **\n  *\n  n=5\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n  \n  n=10\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n```\n参考了简书中某人的记录，但找不到具体是谁了。侵删。\n","source":"_posts/python基础/python中流程控制语句.md","raw":"---\ntitle: (4) python中流程控制语句\ndate: 2018-11-14 21:58:54\ntags:\ncategories: python基础\n---\n\n**条件语句**\nif elif else都是关键字，需要能读和写\n\n基本格式：\n```\n  if 条件语句1：\n    执行语句块1\n  elif 条件语句2：\n    执行语句块2\n  else：\n    执行语句块3\n```\n执行过程：\n```\na.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。\nb.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。\n```\n注意：冒号后边语句块和冒号所在得语句要保持一个缩进。\n\n**if**\n判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。\n```\n  if 条件语句：\n      执行语句块\n  \n  age=20\n  要求判断年龄是否大于18，如果大于18就输出'成年人'\n  if age>18:\n      print('成年人')\n  \n  练习：判断一个数是否是偶数，如果是就打印'xxx是偶数'\n  n=18\n  if n%2==0:\n      print('%d是偶数'%(n))\n```\n2.if-else\n判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.\n```\n  if 条件语句：\n      执行语句块1\n  else：\n      执行语句块2\n  n=17\n  if n%2==0:\n      print('%d是偶数'%(n))\n  else:\n      print('%d是奇数'%(n))\n  练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。\n  input():从控制台获取键盘输入的一个字符串，以回车结束。\n  \n  inputvalue=input('请输入一个数：')\n  print(inputvalue)\n  n=int(inputvalue)\n  比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。\n  if n>10:\n  num=n*2\n      print(num)\n  else:\n  num=n**2\n      print(num)\n```\n3.if-elif-elif-else\n总结:\n\na.如果要求中需要多个判断，可以使用多个elif的if语句。\nb.一个if/elif/else语句中可以嵌套其他的if语句。\n```\n（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)\n方法一：\ngrade=96\nif grade>=90:\n    if grade>100:\n        print('成绩有误')\n    else:\n        print('优秀')\nelif grade>=80:\n    print('良好')\nelif grade>=60:\n      print('中等')\nelif grade>=0:\n      print('不及格')\nelse:\n      print('成绩有误')\n方法二：\ngrade=67\nif 100>=grade>=90:\n  print('优秀')\nelif 90>grade>=80:\n  print('良好')\nelif 80>grade>=60:\n  print('中等')\nelif 60>grade>=0:\n  print('不及格')\nelse:\n  print('成绩有误')\n  \n（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）\nage=1\nif age<2:\n  if age<=0:\n      print('年龄输入错误')\n  else:\n      print('婴儿')\nelif age<5:\n  print('儿童')\nelif age<13:\n  print('少年')\nelif age<19:\n  print('青年')\nelif age<41:\n  print('成年')\nelif age<61:\n  print('中年')\nelse:\n  print('老年')\n说明：Python中没有switch语法。\n\npass：占位，防止因为没有写块结构而出现语法错误。\n\nif n==10:\n    pass\n```\n**转换函数**\n\n1.int()\nint():将其他的数据转换成int类型的数据\n```\nnum=12.56\nprint(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）\nbool1=True\nprint(int(bool1))  # 1 将布尔值转换成整数，True->1  False->0\nstr1='123'\nprint(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。\n```\n2.flot()\nflot():将其他数据转换成浮点型\n3.bool()\nbool()：将其他的数据转换成布尔值\n\n数字转换成布尔，非0是True，0是False。\n```\nprint(bool(12))     # True\nprint(bool(-12.3))  # True\nprint(bool(0))      # False\n字符串转换成布尔，除了空串是False，其他的都是True。\n\nprint(bool('abc'))  # True\nprint(bool(''))     # False\n```\n注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。\n```\nif 10:\n  print('aaa')   # aaa （10转换成bool后是True) \nif 0:\n  print('aaa')   #  （0转换成bool后是False）\n```\n练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”\n```\n方法1：\nstr1=''\nif str1:\n  print(str1)\nelse:\n  print('空串')\n方法2：\nstr1='abc'\nif str1!='':\n  print(str1)\nelse:\n  print('空串')\n```\n4.str()\nstr()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。\n**循环**\npython中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）\n**for循环**\npython中的for循环只有for-in循环：\n```\n格式：\nfor 变量名 in 列表：\n  循环体\n执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。\n\n循环次数：由列表中的数据的个数决定。\n\n去获取字符串中的每一个字符\nstr1='abcdef'\nfor char in str1:\n  print(char)\n\n去统计字符串中'a'出现的次数\nstr1='avaadafvaavafaaa'\nn=0\nfor char in str1:\n  if char=='a':\n      n=n+1       \nprint(n)\nrange（）函数：可以生成一个数值范围\n````\n```\n打印1-100\nfor n in range(1,101):\n  print(n)\n用法1：range(n),生成0~n-1的值\nfor x in range(9):\n  print(x)\n````\n用法2：range(m,n),生成m~n-1的数\n```\nfor n in range(5,9):\n  print(n)\n打印0-100之间所有的偶数\nfor x in range(101):\n  if x%2==0:\n      print(x)\n```\n用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。\n```\nfor x in range(1,8,2):\n  print(x)   # 1,3,5,7 \n\n不通过字符串相乘，打印10次“=”,并且打印在同一行。\nfor _ in range(10):\n  print('=',end=' ')\n```\n求1+2+3...+100\n```\nn=0\nfor x in range(1,101):\n  n=n+x\nprint(n)\n```\n注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。\n\n**while循环**\n``` \n格式：\n while 条件语句：\n    循环体\n```\n执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False\n\nfor循环可以实现的操作，while循环都可以\n\n打印1-100\n```\n方法1：\nx=0\nwhile x<100:\n  x+=1\n  print(x) \n方法2：\nx=1\nwhile x<=100:\n  print(x)\n  x+=1\n```\n计算1+2+3+...+100\n```\nx=0\nn=0\nwhile n<100:\n  n+=1\n  x+=n\n  print(x)\n```\n求1-100中所有偶数的和\n```\n方法1：\nn=0\nx=0\nwhile n<=100:\n  if n%2==0:\n      x=x+n\n      n=n+1\n  print(x)\n方法2：\nn=0\nx=0\nwhile n<100:\n  n+=2\n  x=x+n\nprint(x)\n```\n**break和continue**\n1、break\nbreak是一个让循环提前结束的关键字\n\n如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。\n\n练习:找到1000~9999中第一个能够被13整除的数，打印出来\n```\nfor x in range(1000,10000):\n  if x%13==0:\n      print(x)\n      break    \n  \nfor x in range(1,100):\n  if x==50:\n      break\n      print(x)     # 1 2 3 ...  49\n```\n用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。\n\ninput()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。\n\n注意：break只能写在循环中\n```\n  sum1=0\n  while True:\n  num=int(input(\">>>\"))   # 获取键盘输入的内容，并且转换成int类型\n      sum1+=num   # 将当次输入的数字加起来\n      if num==0:   #  判断输入的数字是否是0，如果是就让循环结束\n          break   \n      print(num)\n  print(sum1)\n```\nfor循环的特点：次数确定，可以在序列中取数据\n\nwhile循环：循环次数不确定的（while True + break）\n\nrandint(m,n):产生一个m到n的随机整数\n\n产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。\n\n  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。\n```\n  import random\n  num=random.randint(0,100)   # 产生一个0到100的随机数\n  n=0\n  while True:\n  num1=int(input(\"请输入你猜的数字：\"))\n  n=n+1\n  if num1>num:\n      print('大了')\n  elif num1<num:\n      print('小了')\n  else:\n      print('恭喜你，猜对了！')       \n      print('一共猜了：%d次'%(n),end='  ')\n      if n<=5:\n          print('你太棒了，只猜了%d次就猜对了'%(n))\n      else:\n          print('下次加油！')\n      break\n```\n2、continue\ncontinue:结束当次循环，进入下次循环\n```\n  for x in range(1,10):\n      print('=')\n      continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断\n      print(x)\n  ````\n  求1~100中所有奇数的和\n```\n  sum=0\n  for x in range(1,100):\n      if x%2==0:\n          continue\n      sum=sum+x\n  print(sum)\n  ```\n  打印100~999中十位数上不是3的所有数：\n```\n  for x in range(100,1000):\n      if x//10%10==3:\n          continue\n      print(x)   \n ``` \n  统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）\n```\n  flag=True\n  n=0\n  while True:\n      num=int(input('请输入一个数：'))  # 输入数据\n      if num%2==1:  # 判断是否是奇数\n          continue\n      if num==0:\n          flag=False\n      n=n+1\n  print(n)\n````\n**else**\npython中循环语句后面可以加else语句。这个else语句会在循环结束后执行。\n```\n for 变量 in 序列：\n  循环体\n else：\n  循环结束后会执行的语句块\n ```\n```\n 1*2*3...*10\n sum1=1\n for x in range(1,11):\n  sum1*=x\n else:\n  print(sum1)\n```\n注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）\n\n  1*2*3...*10，当乘积大于10000就不在执行\n```\n  sum1=1\n  for x in range(1,11):\n      if sum1*x>10000:    \n          break\n      sum1*=x\n  print(sum1)\n  else:\n      print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行\n```\n**多重循环**\n在循环体里面可以有其他的循环语句，结构为：\n```\n for 变量 in 序列：\n     for 变量1 in 序列2：\n      循环体2\n  其它的循环语句\n \n for 变量 in 序列：\n  其他的循环语句1\n  while 条件语句：\n      循环体2\n  其他的循环语句2\n \n while 条件语句1：\n  while 条件语句2：\n      循环体2\n  其他的循环语句2\n```\n例如：\n```\n  如果n=5 打印\n  1\n  12\n  123\n  1234\n  12345\n\n  n=5\n  for x in range(1,n+1):   # 控制行数\n      for b in range(1,x+1):  # 控制当前行的数值\n          print(b,end='')\n      print()   # 一行结束换行\n\n  *****\n  ****\n  ***\n  **\n  *\n  n=5\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n  \n  n=10\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n```\n参考了简书中某人的记录，但找不到具体是谁了。侵删。\n","slug":"python基础/python中流程控制语句","published":1,"updated":"2020-04-10T16:46:16.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtujg004874uxclwwvc0v","content":"<p><strong>条件语句</strong><br>if elif else都是关键字，需要能读和写</p>\n<p>基本格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句1：</span><br><span class=\"line\">  执行语句块1</span><br><span class=\"line\">elif 条件语句2：</span><br><span class=\"line\">  执行语句块2</span><br><span class=\"line\">else：</span><br><span class=\"line\">  执行语句块3</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。</span><br><span class=\"line\">b.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。</span><br></pre></td></tr></table></figure></p>\n<p>注意：冒号后边语句块和冒号所在得语句要保持一个缩进。</p>\n<p><strong>if</strong><br>判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块</span><br><span class=\"line\"></span><br><span class=\"line\">age=20</span><br><span class=\"line\">要求判断年龄是否大于18，如果大于18就输出&apos;成年人&apos;</span><br><span class=\"line\">if age&gt;18:</span><br><span class=\"line\">    print(&apos;成年人&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">练习：判断一个数是否是偶数，如果是就打印&apos;xxx是偶数&apos;</span><br><span class=\"line\">n=18</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br></pre></td></tr></table></figure></p>\n<p>2.if-else<br>判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块1</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句块2</span><br><span class=\"line\">n=17</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;%d是奇数&apos;%(n))</span><br><span class=\"line\">练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。</span><br><span class=\"line\">input():从控制台获取键盘输入的一个字符串，以回车结束。</span><br><span class=\"line\"></span><br><span class=\"line\">inputvalue=input(&apos;请输入一个数：&apos;)</span><br><span class=\"line\">print(inputvalue)</span><br><span class=\"line\">n=int(inputvalue)</span><br><span class=\"line\">比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。</span><br><span class=\"line\">if n&gt;10:</span><br><span class=\"line\">num=n*2</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">else:</span><br><span class=\"line\">num=n**2</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure></p>\n<p>3.if-elif-elif-else<br>总结:</p>\n<p>a.如果要求中需要多个判断，可以使用多个elif的if语句。<br>b.一个if/elif/else语句中可以嵌套其他的if语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)</span><br><span class=\"line\">方法一：</span><br><span class=\"line\">grade=96</span><br><span class=\"line\">if grade&gt;=90:</span><br><span class=\"line\">    if grade&gt;100:</span><br><span class=\"line\">        print(&apos;成绩有误&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;优秀&apos;)</span><br><span class=\"line\">elif grade&gt;=80:</span><br><span class=\"line\">    print(&apos;良好&apos;)</span><br><span class=\"line\">elif grade&gt;=60:</span><br><span class=\"line\">      print(&apos;中等&apos;)</span><br><span class=\"line\">elif grade&gt;=0:</span><br><span class=\"line\">      print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">      print(&apos;成绩有误&apos;)</span><br><span class=\"line\">方法二：</span><br><span class=\"line\">grade=67</span><br><span class=\"line\">if 100&gt;=grade&gt;=90:</span><br><span class=\"line\">  print(&apos;优秀&apos;)</span><br><span class=\"line\">elif 90&gt;grade&gt;=80:</span><br><span class=\"line\">  print(&apos;良好&apos;)</span><br><span class=\"line\">elif 80&gt;grade&gt;=60:</span><br><span class=\"line\">  print(&apos;中等&apos;)</span><br><span class=\"line\">elif 60&gt;grade&gt;=0:</span><br><span class=\"line\">  print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;成绩有误&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）</span><br><span class=\"line\">age=1</span><br><span class=\"line\">if age&lt;2:</span><br><span class=\"line\">  if age&lt;=0:</span><br><span class=\"line\">      print(&apos;年龄输入错误&apos;)</span><br><span class=\"line\">  else:</span><br><span class=\"line\">      print(&apos;婴儿&apos;)</span><br><span class=\"line\">elif age&lt;5:</span><br><span class=\"line\">  print(&apos;儿童&apos;)</span><br><span class=\"line\">elif age&lt;13:</span><br><span class=\"line\">  print(&apos;少年&apos;)</span><br><span class=\"line\">elif age&lt;19:</span><br><span class=\"line\">  print(&apos;青年&apos;)</span><br><span class=\"line\">elif age&lt;41:</span><br><span class=\"line\">  print(&apos;成年&apos;)</span><br><span class=\"line\">elif age&lt;61:</span><br><span class=\"line\">  print(&apos;中年&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;老年&apos;)</span><br><span class=\"line\">说明：Python中没有switch语法。</span><br><span class=\"line\"></span><br><span class=\"line\">pass：占位，防止因为没有写块结构而出现语法错误。</span><br><span class=\"line\"></span><br><span class=\"line\">if n==10:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>转换函数</strong></p>\n<p>1.int()<br>int():将其他的数据转换成int类型的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=12.56</span><br><span class=\"line\">print(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）</span><br><span class=\"line\">bool1=True</span><br><span class=\"line\">print(int(bool1))  # 1 将布尔值转换成整数，True-&gt;1  False-&gt;0</span><br><span class=\"line\">str1=&apos;123&apos;</span><br><span class=\"line\">print(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。</span><br></pre></td></tr></table></figure></p>\n<p>2.flot()<br>flot():将其他数据转换成浮点型<br>3.bool()<br>bool()：将其他的数据转换成布尔值</p>\n<p>数字转换成布尔，非0是True，0是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(12))     # True</span><br><span class=\"line\">print(bool(-12.3))  # True</span><br><span class=\"line\">print(bool(0))      # False</span><br><span class=\"line\">字符串转换成布尔，除了空串是False，其他的都是True。</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&apos;abc&apos;))  # True</span><br><span class=\"line\">print(bool(&apos;&apos;))     # False</span><br></pre></td></tr></table></figure></p>\n<p>注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 10:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   # aaa （10转换成bool后是True) </span><br><span class=\"line\">if 0:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   #  （0转换成bool后是False）</span><br></pre></td></tr></table></figure></p>\n<p>练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">str1=&apos;&apos;</span><br><span class=\"line\">if str1:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">str1=&apos;abc&apos;</span><br><span class=\"line\">if str1!=&apos;&apos;:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>4.str()<br>str()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。<br><strong>循环</strong><br>python中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）<br><strong>for循环</strong><br>python中的for循环只有for-in循环：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">for 变量名 in 列表：</span><br><span class=\"line\">  循环体</span><br><span class=\"line\">执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。</span><br><span class=\"line\"></span><br><span class=\"line\">循环次数：由列表中的数据的个数决定。</span><br><span class=\"line\"></span><br><span class=\"line\">去获取字符串中的每一个字符</span><br><span class=\"line\">str1=&apos;abcdef&apos;</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  print(char)</span><br><span class=\"line\"></span><br><span class=\"line\">去统计字符串中&apos;a&apos;出现的次数</span><br><span class=\"line\">str1=&apos;avaadafvaavafaaa&apos;</span><br><span class=\"line\">n=0</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  if char==&apos;a&apos;:</span><br><span class=\"line\">      n=n+1       </span><br><span class=\"line\">print(n)</span><br><span class=\"line\">range（）函数：可以生成一个数值范围</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印1-100</span><br><span class=\"line\">for n in range(1,101):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">用法1：range(n),生成0~n-1的值</span><br><span class=\"line\">for x in range(9):</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>用法2：range(m,n),生成m~n-1的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(5,9):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">打印0-100之间所有的偶数</span><br><span class=\"line\">for x in range(101):</span><br><span class=\"line\">  if x%2==0:</span><br><span class=\"line\">      print(x)</span><br></pre></td></tr></table></figure></p>\n<p>用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,8,2):</span><br><span class=\"line\">  print(x)   # 1,3,5,7 </span><br><span class=\"line\"></span><br><span class=\"line\">不通过字符串相乘，打印10次“=”,并且打印在同一行。</span><br><span class=\"line\">for _ in range(10):</span><br><span class=\"line\">  print(&apos;=&apos;,end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>\n<p>求1+2+3…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0</span><br><span class=\"line\">for x in range(1,101):</span><br><span class=\"line\">  n=n+x</span><br><span class=\"line\">print(n)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。</p>\n<p><strong>while循环</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False</p>\n<p>for循环可以实现的操作，while循环都可以</p>\n<p>打印1-100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while x&lt;100:</span><br><span class=\"line\">  x+=1</span><br><span class=\"line\">  print(x) </span><br><span class=\"line\">方法2：</span><br><span class=\"line\">x=1</span><br><span class=\"line\">while x&lt;=100:</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">  x+=1</span><br></pre></td></tr></table></figure></p>\n<p>计算1+2+3+…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=1</span><br><span class=\"line\">  x+=n</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure></p>\n<p>求1-100中所有偶数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;=100:</span><br><span class=\"line\">  if n%2==0:</span><br><span class=\"line\">      x=x+n</span><br><span class=\"line\">      n=n+1</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=2</span><br><span class=\"line\">  x=x+n</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></figure></p>\n<p><strong>break和continue</strong><br>1、break<br>break是一个让循环提前结束的关键字</p>\n<p>如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。</p>\n<p>练习:找到1000~9999中第一个能够被13整除的数，打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1000,10000):</span><br><span class=\"line\">  if x%13==0:</span><br><span class=\"line\">      print(x)</span><br><span class=\"line\">      break    </span><br><span class=\"line\">  </span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">  if x==50:</span><br><span class=\"line\">      break</span><br><span class=\"line\">      print(x)     # 1 2 3 ...  49</span><br></pre></td></tr></table></figure></p>\n<p>用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。</p>\n<p>input()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。</p>\n<p>注意：break只能写在循环中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num=int(input(&quot;&gt;&gt;&gt;&quot;))   # 获取键盘输入的内容，并且转换成int类型</span><br><span class=\"line\">    sum1+=num   # 将当次输入的数字加起来</span><br><span class=\"line\">    if num==0:   #  判断输入的数字是否是0，如果是就让循环结束</span><br><span class=\"line\">        break   </span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>for循环的特点：次数确定，可以在序列中取数据</p>\n<p>while循环：循环次数不确定的（while True + break）</p>\n<p>randint(m,n):产生一个m到n的随机整数</p>\n<p>产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。</p>\n<p>  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">num=random.randint(0,100)   # 产生一个0到100的随机数</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num1=int(input(&quot;请输入你猜的数字：&quot;))</span><br><span class=\"line\">n=n+1</span><br><span class=\"line\">if num1&gt;num:</span><br><span class=\"line\">    print(&apos;大了&apos;)</span><br><span class=\"line\">elif num1&lt;num:</span><br><span class=\"line\">    print(&apos;小了&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;恭喜你，猜对了！&apos;)       </span><br><span class=\"line\">    print(&apos;一共猜了：%d次&apos;%(n),end=&apos;  &apos;)</span><br><span class=\"line\">    if n&lt;=5:</span><br><span class=\"line\">        print(&apos;你太棒了，只猜了%d次就猜对了&apos;%(n))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;下次加油！&apos;)</span><br><span class=\"line\">    break</span><br></pre></td></tr></table></figure></p>\n<p>2、continue<br>continue:结束当次循环，进入下次循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,10):</span><br><span class=\"line\">    print(&apos;=&apos;)</span><br><span class=\"line\">    continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>  求1~100中所有奇数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=0</span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">    if x%2==0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum=sum+x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure></p>\n<p>  打印100~999中十位数上不是3的所有数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> for x in range(100,1000):</span><br><span class=\"line\">     if x//10%10==3:</span><br><span class=\"line\">         continue</span><br><span class=\"line\">     print(x)   </span><br><span class=\"line\">``` </span><br><span class=\"line\"> 统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）</span><br></pre></td></tr></table></figure></p>\n<p>  flag=True<br>  n=0<br>  while True:<br>      num=int(input(‘请输入一个数：’))  # 输入数据<br>      if num%2==1:  # 判断是否是奇数<br>          continue<br>      if num==0:<br>          flag=False<br>      n=n+1<br>  print(n)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**else**</span><br><span class=\"line\">python中循环语句后面可以加else语句。这个else语句会在循环结束后执行。</span><br></pre></td></tr></table></figure></p>\n<p> for 变量 in 序列：<br>  循环体<br> else：<br>  循环结束后会执行的语句块<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"> 1*2*3...*10</span><br><span class=\"line\"> sum1=1</span><br><span class=\"line\"> for x in range(1,11):</span><br><span class=\"line\">  sum1*=x</span><br><span class=\"line\"> else:</span><br><span class=\"line\">  print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）</p>\n<p>  1<em>2</em>3…*10，当乘积大于10000就不在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=1</span><br><span class=\"line\">for x in range(1,11):</span><br><span class=\"line\">    if sum1*x&gt;10000:    </span><br><span class=\"line\">        break</span><br><span class=\"line\">    sum1*=x</span><br><span class=\"line\">print(sum1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行</span><br></pre></td></tr></table></figure></p>\n<p><strong>多重循环</strong><br>在循环体里面可以有其他的循环语句，结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\">    for 变量1 in 序列2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其它的循环语句</span><br><span class=\"line\"></span><br><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\"> 其他的循环语句1</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件语句1：</span><br><span class=\"line\"> while 条件语句2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果n=5 打印</span><br><span class=\"line\">1</span><br><span class=\"line\">12</span><br><span class=\"line\">123</span><br><span class=\"line\">1234</span><br><span class=\"line\">12345</span><br><span class=\"line\"></span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):   # 控制行数</span><br><span class=\"line\">    for b in range(1,x+1):  # 控制当前行的数值</span><br><span class=\"line\">        print(b,end=&apos;&apos;)</span><br><span class=\"line\">    print()   # 一行结束换行</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\">****</span><br><span class=\"line\">***</span><br><span class=\"line\">**</span><br><span class=\"line\">*</span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">n=10</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p>参考了简书中某人的记录，但找不到具体是谁了。侵删。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>条件语句</strong><br>if elif else都是关键字，需要能读和写</p>\n<p>基本格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句1：</span><br><span class=\"line\">  执行语句块1</span><br><span class=\"line\">elif 条件语句2：</span><br><span class=\"line\">  执行语句块2</span><br><span class=\"line\">else：</span><br><span class=\"line\">  执行语句块3</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。</span><br><span class=\"line\">b.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。</span><br></pre></td></tr></table></figure></p>\n<p>注意：冒号后边语句块和冒号所在得语句要保持一个缩进。</p>\n<p><strong>if</strong><br>判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块</span><br><span class=\"line\"></span><br><span class=\"line\">age=20</span><br><span class=\"line\">要求判断年龄是否大于18，如果大于18就输出&apos;成年人&apos;</span><br><span class=\"line\">if age&gt;18:</span><br><span class=\"line\">    print(&apos;成年人&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">练习：判断一个数是否是偶数，如果是就打印&apos;xxx是偶数&apos;</span><br><span class=\"line\">n=18</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br></pre></td></tr></table></figure></p>\n<p>2.if-else<br>判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块1</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句块2</span><br><span class=\"line\">n=17</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;%d是奇数&apos;%(n))</span><br><span class=\"line\">练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。</span><br><span class=\"line\">input():从控制台获取键盘输入的一个字符串，以回车结束。</span><br><span class=\"line\"></span><br><span class=\"line\">inputvalue=input(&apos;请输入一个数：&apos;)</span><br><span class=\"line\">print(inputvalue)</span><br><span class=\"line\">n=int(inputvalue)</span><br><span class=\"line\">比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。</span><br><span class=\"line\">if n&gt;10:</span><br><span class=\"line\">num=n*2</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">else:</span><br><span class=\"line\">num=n**2</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure></p>\n<p>3.if-elif-elif-else<br>总结:</p>\n<p>a.如果要求中需要多个判断，可以使用多个elif的if语句。<br>b.一个if/elif/else语句中可以嵌套其他的if语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)</span><br><span class=\"line\">方法一：</span><br><span class=\"line\">grade=96</span><br><span class=\"line\">if grade&gt;=90:</span><br><span class=\"line\">    if grade&gt;100:</span><br><span class=\"line\">        print(&apos;成绩有误&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;优秀&apos;)</span><br><span class=\"line\">elif grade&gt;=80:</span><br><span class=\"line\">    print(&apos;良好&apos;)</span><br><span class=\"line\">elif grade&gt;=60:</span><br><span class=\"line\">      print(&apos;中等&apos;)</span><br><span class=\"line\">elif grade&gt;=0:</span><br><span class=\"line\">      print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">      print(&apos;成绩有误&apos;)</span><br><span class=\"line\">方法二：</span><br><span class=\"line\">grade=67</span><br><span class=\"line\">if 100&gt;=grade&gt;=90:</span><br><span class=\"line\">  print(&apos;优秀&apos;)</span><br><span class=\"line\">elif 90&gt;grade&gt;=80:</span><br><span class=\"line\">  print(&apos;良好&apos;)</span><br><span class=\"line\">elif 80&gt;grade&gt;=60:</span><br><span class=\"line\">  print(&apos;中等&apos;)</span><br><span class=\"line\">elif 60&gt;grade&gt;=0:</span><br><span class=\"line\">  print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;成绩有误&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）</span><br><span class=\"line\">age=1</span><br><span class=\"line\">if age&lt;2:</span><br><span class=\"line\">  if age&lt;=0:</span><br><span class=\"line\">      print(&apos;年龄输入错误&apos;)</span><br><span class=\"line\">  else:</span><br><span class=\"line\">      print(&apos;婴儿&apos;)</span><br><span class=\"line\">elif age&lt;5:</span><br><span class=\"line\">  print(&apos;儿童&apos;)</span><br><span class=\"line\">elif age&lt;13:</span><br><span class=\"line\">  print(&apos;少年&apos;)</span><br><span class=\"line\">elif age&lt;19:</span><br><span class=\"line\">  print(&apos;青年&apos;)</span><br><span class=\"line\">elif age&lt;41:</span><br><span class=\"line\">  print(&apos;成年&apos;)</span><br><span class=\"line\">elif age&lt;61:</span><br><span class=\"line\">  print(&apos;中年&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;老年&apos;)</span><br><span class=\"line\">说明：Python中没有switch语法。</span><br><span class=\"line\"></span><br><span class=\"line\">pass：占位，防止因为没有写块结构而出现语法错误。</span><br><span class=\"line\"></span><br><span class=\"line\">if n==10:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>转换函数</strong></p>\n<p>1.int()<br>int():将其他的数据转换成int类型的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=12.56</span><br><span class=\"line\">print(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）</span><br><span class=\"line\">bool1=True</span><br><span class=\"line\">print(int(bool1))  # 1 将布尔值转换成整数，True-&gt;1  False-&gt;0</span><br><span class=\"line\">str1=&apos;123&apos;</span><br><span class=\"line\">print(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。</span><br></pre></td></tr></table></figure></p>\n<p>2.flot()<br>flot():将其他数据转换成浮点型<br>3.bool()<br>bool()：将其他的数据转换成布尔值</p>\n<p>数字转换成布尔，非0是True，0是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(12))     # True</span><br><span class=\"line\">print(bool(-12.3))  # True</span><br><span class=\"line\">print(bool(0))      # False</span><br><span class=\"line\">字符串转换成布尔，除了空串是False，其他的都是True。</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&apos;abc&apos;))  # True</span><br><span class=\"line\">print(bool(&apos;&apos;))     # False</span><br></pre></td></tr></table></figure></p>\n<p>注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 10:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   # aaa （10转换成bool后是True) </span><br><span class=\"line\">if 0:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   #  （0转换成bool后是False）</span><br></pre></td></tr></table></figure></p>\n<p>练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">str1=&apos;&apos;</span><br><span class=\"line\">if str1:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">str1=&apos;abc&apos;</span><br><span class=\"line\">if str1!=&apos;&apos;:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>4.str()<br>str()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。<br><strong>循环</strong><br>python中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）<br><strong>for循环</strong><br>python中的for循环只有for-in循环：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">for 变量名 in 列表：</span><br><span class=\"line\">  循环体</span><br><span class=\"line\">执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。</span><br><span class=\"line\"></span><br><span class=\"line\">循环次数：由列表中的数据的个数决定。</span><br><span class=\"line\"></span><br><span class=\"line\">去获取字符串中的每一个字符</span><br><span class=\"line\">str1=&apos;abcdef&apos;</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  print(char)</span><br><span class=\"line\"></span><br><span class=\"line\">去统计字符串中&apos;a&apos;出现的次数</span><br><span class=\"line\">str1=&apos;avaadafvaavafaaa&apos;</span><br><span class=\"line\">n=0</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  if char==&apos;a&apos;:</span><br><span class=\"line\">      n=n+1       </span><br><span class=\"line\">print(n)</span><br><span class=\"line\">range（）函数：可以生成一个数值范围</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印1-100</span><br><span class=\"line\">for n in range(1,101):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">用法1：range(n),生成0~n-1的值</span><br><span class=\"line\">for x in range(9):</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>用法2：range(m,n),生成m~n-1的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(5,9):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">打印0-100之间所有的偶数</span><br><span class=\"line\">for x in range(101):</span><br><span class=\"line\">  if x%2==0:</span><br><span class=\"line\">      print(x)</span><br></pre></td></tr></table></figure></p>\n<p>用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,8,2):</span><br><span class=\"line\">  print(x)   # 1,3,5,7 </span><br><span class=\"line\"></span><br><span class=\"line\">不通过字符串相乘，打印10次“=”,并且打印在同一行。</span><br><span class=\"line\">for _ in range(10):</span><br><span class=\"line\">  print(&apos;=&apos;,end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>\n<p>求1+2+3…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0</span><br><span class=\"line\">for x in range(1,101):</span><br><span class=\"line\">  n=n+x</span><br><span class=\"line\">print(n)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。</p>\n<p><strong>while循环</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False</p>\n<p>for循环可以实现的操作，while循环都可以</p>\n<p>打印1-100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while x&lt;100:</span><br><span class=\"line\">  x+=1</span><br><span class=\"line\">  print(x) </span><br><span class=\"line\">方法2：</span><br><span class=\"line\">x=1</span><br><span class=\"line\">while x&lt;=100:</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">  x+=1</span><br></pre></td></tr></table></figure></p>\n<p>计算1+2+3+…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=1</span><br><span class=\"line\">  x+=n</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure></p>\n<p>求1-100中所有偶数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;=100:</span><br><span class=\"line\">  if n%2==0:</span><br><span class=\"line\">      x=x+n</span><br><span class=\"line\">      n=n+1</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=2</span><br><span class=\"line\">  x=x+n</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></figure></p>\n<p><strong>break和continue</strong><br>1、break<br>break是一个让循环提前结束的关键字</p>\n<p>如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。</p>\n<p>练习:找到1000~9999中第一个能够被13整除的数，打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1000,10000):</span><br><span class=\"line\">  if x%13==0:</span><br><span class=\"line\">      print(x)</span><br><span class=\"line\">      break    </span><br><span class=\"line\">  </span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">  if x==50:</span><br><span class=\"line\">      break</span><br><span class=\"line\">      print(x)     # 1 2 3 ...  49</span><br></pre></td></tr></table></figure></p>\n<p>用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。</p>\n<p>input()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。</p>\n<p>注意：break只能写在循环中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num=int(input(&quot;&gt;&gt;&gt;&quot;))   # 获取键盘输入的内容，并且转换成int类型</span><br><span class=\"line\">    sum1+=num   # 将当次输入的数字加起来</span><br><span class=\"line\">    if num==0:   #  判断输入的数字是否是0，如果是就让循环结束</span><br><span class=\"line\">        break   </span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>for循环的特点：次数确定，可以在序列中取数据</p>\n<p>while循环：循环次数不确定的（while True + break）</p>\n<p>randint(m,n):产生一个m到n的随机整数</p>\n<p>产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。</p>\n<p>  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">num=random.randint(0,100)   # 产生一个0到100的随机数</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num1=int(input(&quot;请输入你猜的数字：&quot;))</span><br><span class=\"line\">n=n+1</span><br><span class=\"line\">if num1&gt;num:</span><br><span class=\"line\">    print(&apos;大了&apos;)</span><br><span class=\"line\">elif num1&lt;num:</span><br><span class=\"line\">    print(&apos;小了&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;恭喜你，猜对了！&apos;)       </span><br><span class=\"line\">    print(&apos;一共猜了：%d次&apos;%(n),end=&apos;  &apos;)</span><br><span class=\"line\">    if n&lt;=5:</span><br><span class=\"line\">        print(&apos;你太棒了，只猜了%d次就猜对了&apos;%(n))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;下次加油！&apos;)</span><br><span class=\"line\">    break</span><br></pre></td></tr></table></figure></p>\n<p>2、continue<br>continue:结束当次循环，进入下次循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,10):</span><br><span class=\"line\">    print(&apos;=&apos;)</span><br><span class=\"line\">    continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>  求1~100中所有奇数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=0</span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">    if x%2==0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum=sum+x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure></p>\n<p>  打印100~999中十位数上不是3的所有数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> for x in range(100,1000):</span><br><span class=\"line\">     if x//10%10==3:</span><br><span class=\"line\">         continue</span><br><span class=\"line\">     print(x)   </span><br><span class=\"line\">``` </span><br><span class=\"line\"> 统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）</span><br></pre></td></tr></table></figure></p>\n<p>  flag=True<br>  n=0<br>  while True:<br>      num=int(input(‘请输入一个数：’))  # 输入数据<br>      if num%2==1:  # 判断是否是奇数<br>          continue<br>      if num==0:<br>          flag=False<br>      n=n+1<br>  print(n)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**else**</span><br><span class=\"line\">python中循环语句后面可以加else语句。这个else语句会在循环结束后执行。</span><br></pre></td></tr></table></figure></p>\n<p> for 变量 in 序列：<br>  循环体<br> else：<br>  循环结束后会执行的语句块<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"> 1*2*3...*10</span><br><span class=\"line\"> sum1=1</span><br><span class=\"line\"> for x in range(1,11):</span><br><span class=\"line\">  sum1*=x</span><br><span class=\"line\"> else:</span><br><span class=\"line\">  print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）</p>\n<p>  1<em>2</em>3…*10，当乘积大于10000就不在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=1</span><br><span class=\"line\">for x in range(1,11):</span><br><span class=\"line\">    if sum1*x&gt;10000:    </span><br><span class=\"line\">        break</span><br><span class=\"line\">    sum1*=x</span><br><span class=\"line\">print(sum1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行</span><br></pre></td></tr></table></figure></p>\n<p><strong>多重循环</strong><br>在循环体里面可以有其他的循环语句，结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\">    for 变量1 in 序列2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其它的循环语句</span><br><span class=\"line\"></span><br><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\"> 其他的循环语句1</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件语句1：</span><br><span class=\"line\"> while 条件语句2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果n=5 打印</span><br><span class=\"line\">1</span><br><span class=\"line\">12</span><br><span class=\"line\">123</span><br><span class=\"line\">1234</span><br><span class=\"line\">12345</span><br><span class=\"line\"></span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):   # 控制行数</span><br><span class=\"line\">    for b in range(1,x+1):  # 控制当前行的数值</span><br><span class=\"line\">        print(b,end=&apos;&apos;)</span><br><span class=\"line\">    print()   # 一行结束换行</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\">****</span><br><span class=\"line\">***</span><br><span class=\"line\">**</span><br><span class=\"line\">*</span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">n=10</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p>参考了简书中某人的记录，但找不到具体是谁了。侵删。</p>\n"},{"title":"(13) python中用字典代替switch","date":"2018-11-14T14:02:16.000Z","_content":"**switch语句类型**\n```\n'''\nswitch(n)\n{\ncase 1:\n  执行代码块 1\n  break;\ncase 2:\n  执行代码块 2\n  break;\ndefault:\n  n 与 case 1 和 case 2 不同时执行的代码\n}\n'''\n```\n**例如：**\n```\n'''\nswitch (day)\n{\ncase 0:\n  x=\"Today it's Sunday\";\n  break;\ncase 1:\n  x=\"Today it's Monday\";\n  break;\ncase 2:\n  x=\"Today it's Tuesday\";\n  break;\ncase 3:\n  x=\"unknown\"\n}\n'''\n```\n**python中字典方式**\n```\nday = 3\nswitcher = {\n    0:'Today it\\'s Sunday',\n    1:'Today it\\'s Monday',\n    2:'Today it\\'s Tuesday'\n}\n#day_name =switcher[day]  #并不能显示default\nday_name = switcher.get(day,'Unknown')\nprint(day_name)\n```\n**函数**\n```\nday = 3\n\ndef get_monday():\n    return 'Monday'\n\ndef  get_sunday():\n    return 'Sunday'\n\ndef get_tuesday():\n    return 'Tuesday'\n\ndef get_default():\n    return 'Unknown'\n\nswitcher1 = {\n    0:get_sunday,\n    1:get_monday,\n    2:get_tuesday\n} \n\nday_name = switcher1.get(day,get_default)()\nprint(day_name)\n```\n","source":"_posts/python基础/python中用字典代替switch.md","raw":"---\ntitle: (13) python中用字典代替switch\ndate: 2018-11-14 22:02:16\ntags:\ncategories: python基础\n---\n**switch语句类型**\n```\n'''\nswitch(n)\n{\ncase 1:\n  执行代码块 1\n  break;\ncase 2:\n  执行代码块 2\n  break;\ndefault:\n  n 与 case 1 和 case 2 不同时执行的代码\n}\n'''\n```\n**例如：**\n```\n'''\nswitch (day)\n{\ncase 0:\n  x=\"Today it's Sunday\";\n  break;\ncase 1:\n  x=\"Today it's Monday\";\n  break;\ncase 2:\n  x=\"Today it's Tuesday\";\n  break;\ncase 3:\n  x=\"unknown\"\n}\n'''\n```\n**python中字典方式**\n```\nday = 3\nswitcher = {\n    0:'Today it\\'s Sunday',\n    1:'Today it\\'s Monday',\n    2:'Today it\\'s Tuesday'\n}\n#day_name =switcher[day]  #并不能显示default\nday_name = switcher.get(day,'Unknown')\nprint(day_name)\n```\n**函数**\n```\nday = 3\n\ndef get_monday():\n    return 'Monday'\n\ndef  get_sunday():\n    return 'Sunday'\n\ndef get_tuesday():\n    return 'Tuesday'\n\ndef get_default():\n    return 'Unknown'\n\nswitcher1 = {\n    0:get_sunday,\n    1:get_monday,\n    2:get_tuesday\n} \n\nday_name = switcher1.get(day,get_default)()\nprint(day_name)\n```\n","slug":"python基础/python中用字典代替switch","published":1,"updated":"2020-04-10T16:46:16.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtujl004a74uxhi5rd54z","content":"<p><strong>switch语句类型</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch(n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  执行代码块 1</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  执行代码块 2</span><br><span class=\"line\">  break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">  n 与 case 1 和 case 2 不同时执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch (day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 0:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Sunday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Monday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Tuesday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 3:</span><br><span class=\"line\">  x=&quot;unknown&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>python中字典方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\">switcher = &#123;</span><br><span class=\"line\">    0:&apos;Today it\\&apos;s Sunday&apos;,</span><br><span class=\"line\">    1:&apos;Today it\\&apos;s Monday&apos;,</span><br><span class=\"line\">    2:&apos;Today it\\&apos;s Tuesday&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#day_name =switcher[day]  #并不能显示default</span><br><span class=\"line\">day_name = switcher.get(day,&apos;Unknown&apos;)</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\"></span><br><span class=\"line\">def get_monday():</span><br><span class=\"line\">    return &apos;Monday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def  get_sunday():</span><br><span class=\"line\">    return &apos;Sunday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_tuesday():</span><br><span class=\"line\">    return &apos;Tuesday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_default():</span><br><span class=\"line\">    return &apos;Unknown&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">switcher1 = &#123;</span><br><span class=\"line\">    0:get_sunday,</span><br><span class=\"line\">    1:get_monday,</span><br><span class=\"line\">    2:get_tuesday</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">day_name = switcher1.get(day,get_default)()</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>switch语句类型</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch(n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  执行代码块 1</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  执行代码块 2</span><br><span class=\"line\">  break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">  n 与 case 1 和 case 2 不同时执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch (day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 0:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Sunday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Monday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Tuesday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 3:</span><br><span class=\"line\">  x=&quot;unknown&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>python中字典方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\">switcher = &#123;</span><br><span class=\"line\">    0:&apos;Today it\\&apos;s Sunday&apos;,</span><br><span class=\"line\">    1:&apos;Today it\\&apos;s Monday&apos;,</span><br><span class=\"line\">    2:&apos;Today it\\&apos;s Tuesday&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#day_name =switcher[day]  #并不能显示default</span><br><span class=\"line\">day_name = switcher.get(day,&apos;Unknown&apos;)</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\"></span><br><span class=\"line\">def get_monday():</span><br><span class=\"line\">    return &apos;Monday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def  get_sunday():</span><br><span class=\"line\">    return &apos;Sunday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_tuesday():</span><br><span class=\"line\">    return &apos;Tuesday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_default():</span><br><span class=\"line\">    return &apos;Unknown&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">switcher1 = &#123;</span><br><span class=\"line\">    0:get_sunday,</span><br><span class=\"line\">    1:get_monday,</span><br><span class=\"line\">    2:get_tuesday</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">day_name = switcher1.get(day,get_default)()</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(12) python中的装饰器","date":"2018-11-14T14:00:43.000Z","_content":"\n**对修改是封闭的，对扩展是开放的**\n####在原有函数上调用时加时间\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint_current_time(a)\nprint_current_time(b)\n```\n**等同于**\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint(time.time())\na()\nprint(time.time())\nb()\n```\n**更改了内部实现，不够优雅**\n\n####装饰器\n```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\ndef f1():\n    print('This is a function') \n\nf = decorator(f1)\nf()\n```\n**修改一下**\n ```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1():\n    print('This is a function') \n\nf1()   #并没有改变原有函数的调用方式\n#这才是装饰器  意义所在\n```\n**进一步优化，支持不同个数的参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args):\n        print(time.time())\n        func(*args)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\n```\n**进一步优化，加入关键字参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args,**kw):\n        print(time.time())\n        func(*args,**kw)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\n@decorator\ndef f3(func_name1,func_name2,**kw):\n    print('hello world'+ func_name1)\n    print('hello world'+ func_name2)\n    print(kw)\n\n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\nf3('tset func1','tset func2',a = 1,b = 2,c = '123')\n```\n\n**装饰器也可以用来控制访问**\n**一个函数上就可以加多个装饰器**\n","source":"_posts/python基础/python中的装饰器.md","raw":"---\ntitle: (12) python中的装饰器\ndate: 2018-11-14 22:00:43\ntags:\ncategories: python基础\n---\n\n**对修改是封闭的，对扩展是开放的**\n####在原有函数上调用时加时间\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint_current_time(a)\nprint_current_time(b)\n```\n**等同于**\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint(time.time())\na()\nprint(time.time())\nb()\n```\n**更改了内部实现，不够优雅**\n\n####装饰器\n```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\ndef f1():\n    print('This is a function') \n\nf = decorator(f1)\nf()\n```\n**修改一下**\n ```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1():\n    print('This is a function') \n\nf1()   #并没有改变原有函数的调用方式\n#这才是装饰器  意义所在\n```\n**进一步优化，支持不同个数的参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args):\n        print(time.time())\n        func(*args)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\n```\n**进一步优化，加入关键字参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args,**kw):\n        print(time.time())\n        func(*args,**kw)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\n@decorator\ndef f3(func_name1,func_name2,**kw):\n    print('hello world'+ func_name1)\n    print('hello world'+ func_name2)\n    print(kw)\n\n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\nf3('tset func1','tset func2',a = 1,b = 2,c = '123')\n```\n\n**装饰器也可以用来控制访问**\n**一个函数上就可以加多个装饰器**\n","slug":"python基础/python中的装饰器","published":1,"updated":"2020-04-10T16:46:16.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtujr004d74uxeh4hdp6s","content":"<p><strong>对修改是封闭的，对扩展是开放的</strong></p>\n<p>####在原有函数上调用时加时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print_current_time(a)</span><br><span class=\"line\">print_current_time(b)</span><br></pre></td></tr></table></figure></p>\n<p><strong>等同于</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">a()</span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改了内部实现，不够优雅</strong></p>\n<p>####装饰器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f = decorator(f1)</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改一下</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f1()   #并没有改变原有函数的调用方式</span><br><span class=\"line\">#这才是装饰器  意义所在</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，支持不同个数的参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，加入关键字参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args,**kw):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f3(func_name1,func_name2,**kw):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1)</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2)</span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br><span class=\"line\">f3(&apos;tset func1&apos;,&apos;tset func2&apos;,a = 1,b = 2,c = &apos;123&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>装饰器也可以用来控制访问</strong><br><strong>一个函数上就可以加多个装饰器</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>对修改是封闭的，对扩展是开放的</strong></p>\n<p>####在原有函数上调用时加时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print_current_time(a)</span><br><span class=\"line\">print_current_time(b)</span><br></pre></td></tr></table></figure></p>\n<p><strong>等同于</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">a()</span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改了内部实现，不够优雅</strong></p>\n<p>####装饰器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f = decorator(f1)</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改一下</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f1()   #并没有改变原有函数的调用方式</span><br><span class=\"line\">#这才是装饰器  意义所在</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，支持不同个数的参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，加入关键字参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args,**kw):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f3(func_name1,func_name2,**kw):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1)</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2)</span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br><span class=\"line\">f3(&apos;tset func1&apos;,&apos;tset func2&apos;,a = 1,b = 2,c = &apos;123&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>装饰器也可以用来控制访问</strong><br><strong>一个函数上就可以加多个装饰器</strong></p>\n"},{"title":"(14) python中的列表推导式","date":"2018-11-14T14:02:15.000Z","_content":"\n#####列表推导式\n#####集合字典也可\n#####元组也可\n\n```\na=[1,2,3,4,5,6,7,8,9]\nb=[i**3 for i in a if i <=5]\nprint(b)   #b={....}为集合，b(...)为元组，与a{[(...)]},什么的无关。\n#为b()时，是一个对象\n```\n\n**也可以map filter表示**\n```\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x*x,r)\nprint(list(s))\n```\n```\n#同上，不建议\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x**3,filter(lambda x:x if x<=5 else 0,list_a))\nprint(list(s))\n```\n#####当为字典时\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\nb = [key for key,value in students.items()]\nprint(b)#['wei', 'lai', 'wan']\nfor x in b:\n    print(x)#wei#lai#wan\n```\n**交换key和value\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\n\nb ={value:key for key,value in students.items()}\nprint(b)#{18: 'wei', 19: 'lai', 20: 'wan'}\n```\n","source":"_posts/python基础/python中的列表推导式.md","raw":"---\ntitle: (14) python中的列表推导式\ndate: 2018-11-14 22:02:15\ntags:\ncategories: python基础\n---\n\n#####列表推导式\n#####集合字典也可\n#####元组也可\n\n```\na=[1,2,3,4,5,6,7,8,9]\nb=[i**3 for i in a if i <=5]\nprint(b)   #b={....}为集合，b(...)为元组，与a{[(...)]},什么的无关。\n#为b()时，是一个对象\n```\n\n**也可以map filter表示**\n```\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x*x,r)\nprint(list(s))\n```\n```\n#同上，不建议\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x**3,filter(lambda x:x if x<=5 else 0,list_a))\nprint(list(s))\n```\n#####当为字典时\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\nb = [key for key,value in students.items()]\nprint(b)#['wei', 'lai', 'wan']\nfor x in b:\n    print(x)#wei#lai#wan\n```\n**交换key和value\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\n\nb ={value:key for key,value in students.items()}\nprint(b)#{18: 'wei', 19: 'lai', 20: 'wan'}\n```\n","slug":"python基础/python中的列表推导式","published":1,"updated":"2020-04-10T16:46:16.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtujz004f74uxr8yqgoyj","content":"<p>#####列表推导式</p>\n<p>#####集合字典也可</p>\n<p>#####元组也可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">b=[i**3 for i in a if i &lt;=5]</span><br><span class=\"line\">print(b)   #b=&#123;....&#125;为集合，b(...)为元组，与a&#123;[(...)]&#125;,什么的无关。</span><br><span class=\"line\">#为b()时，是一个对象</span><br></pre></td></tr></table></figure>\n<p><strong>也可以map filter表示</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x*x,r)</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#同上，不建议</span><br><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x**3,filter(lambda x:x if x&lt;=5 else 0,list_a))</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure>\n<p>#####当为字典时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b = [key for key,value in students.items()]</span><br><span class=\"line\">print(b)#[&apos;wei&apos;, &apos;lai&apos;, &apos;wan&apos;]</span><br><span class=\"line\">for x in b:</span><br><span class=\"line\">    print(x)#wei#lai#wan</span><br></pre></td></tr></table></figure></p>\n<p>**交换key和value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b =&#123;value:key for key,value in students.items()&#125;</span><br><span class=\"line\">print(b)#&#123;18: &apos;wei&apos;, 19: &apos;lai&apos;, 20: &apos;wan&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#####列表推导式</p>\n<p>#####集合字典也可</p>\n<p>#####元组也可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">b=[i**3 for i in a if i &lt;=5]</span><br><span class=\"line\">print(b)   #b=&#123;....&#125;为集合，b(...)为元组，与a&#123;[(...)]&#125;,什么的无关。</span><br><span class=\"line\">#为b()时，是一个对象</span><br></pre></td></tr></table></figure>\n<p><strong>也可以map filter表示</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x*x,r)</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#同上，不建议</span><br><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x**3,filter(lambda x:x if x&lt;=5 else 0,list_a))</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure>\n<p>#####当为字典时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b = [key for key,value in students.items()]</span><br><span class=\"line\">print(b)#[&apos;wei&apos;, &apos;lai&apos;, &apos;wan&apos;]</span><br><span class=\"line\">for x in b:</span><br><span class=\"line\">    print(x)#wei#lai#wan</span><br></pre></td></tr></table></figure></p>\n<p>**交换key和value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b =&#123;value:key for key,value in students.items()&#125;</span><br><span class=\"line\">print(b)#&#123;18: &apos;wei&apos;, 19: &apos;lai&apos;, 20: &apos;wan&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(10) python中的枚举","date":"2018-11-14T14:00:48.000Z","_content":"**在python中，枚举的本质是一个类，所有枚举类都是Enum的子类**\n**枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名**\n\n**表示类型的三种方式**\n```\nfrom enum import Enum\n\nclass VIP(Enum):       #所有枚举类都是Enum的子类\n    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）\n    GREEN = 2   \n    RED =  'str'\n    BLACK = 4\n    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，\n    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: 'YELLOW'\n  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: 'GREEN'\n\n#class Common():\n  #  YELLOW = 1       \n#VIP.YELLOW =6         #会报错，枚举中的值不能被更改\nprint(VIP.PINK)\nprint(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)\nprint(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名\nprint(type(VIP.YELLOW))   #<enum 'VIP'>  枚举类型\nprint(VIP.YELLOW.name)   #YELLOW 获取标签名字\nprint(type(VIP.YELLOW.name))  #<class 'str'> 字符串类型\n\nprint(VIP['YELLOW'])  #VIP.YELLOW\n\nprint(VIP.YELLOW.value)  #1   获取值\n\n#枚举类型、枚举的名字、枚举的值\n\nfor v in VIP:   #遍历枚举类型(并不会把别名打印出来)\n    print(v)    #VIP.YELLOW\n                #VIP.GREEN\n                #VIP.RED\n                #VIP.BLACK \n\n#枚举的比较运算\n#枚举不可以进行大小比较，但可以进行等值比较，身份比较\nresult = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True\nresult1 = VIP.YELLOW == 1    #False\n#result = VIP.YELLOW >= VIP.PINK  #枚举不能进行大小比较报错 \n                                 #'>=' not supported between instances of 'VIP' and 'VIP'\nresult2 = VIP.YELLOW is VIP.PINK #True   身份比较\nprint(result)  \nprint(result1)\nprint(result2)  \n\n\nclass VIP1(Enum):       \n    YELLOW = 1     \n    GREEN = 2   \n    RED = '3'\n    BLACK = 4\n    PINK = 1\n\nresult = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型\nprint(result) \n\nfor v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)\n    print(v)\n'''\n('YELLOW', <VIP.YELLOW: 1>)\n('GREEN', <VIP.GREEN: 2>)\n('RED', <VIP.RED: 3>)\n('BLACK', <VIP.BLACK: 4>)\n('PINK', <VIP.YELLOW: 1>)\n'''\n\nfor v in VIP.__members__:\n    print(v)   #枚举的名字（包括别名）\n'''\nYELLOW\nGREEN\nRED\nBLACK\nPINK\n'''\n\na = 1\na = VIP(a)         #把a变成一个枚举类型\nprint(a)   #VIP.YELLOW     \n\n\nfrom enum import IntEnum #(枚举的值得是int类型)\nfrom enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)\n\nclass VIP2(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n    PINK = 1    \n\n@unique\nclass VIP3(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n  #  PINK = 1       #会报错,取值重复\n\n\n\n#枚举  是单例模式    #23种设计模式        实践中\n```\n","source":"_posts/python基础/python中的枚举.md","raw":"---\ntitle: (10) python中的枚举\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**在python中，枚举的本质是一个类，所有枚举类都是Enum的子类**\n**枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名**\n\n**表示类型的三种方式**\n```\nfrom enum import Enum\n\nclass VIP(Enum):       #所有枚举类都是Enum的子类\n    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）\n    GREEN = 2   \n    RED =  'str'\n    BLACK = 4\n    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，\n    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: 'YELLOW'\n  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: 'GREEN'\n\n#class Common():\n  #  YELLOW = 1       \n#VIP.YELLOW =6         #会报错，枚举中的值不能被更改\nprint(VIP.PINK)\nprint(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)\nprint(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名\nprint(type(VIP.YELLOW))   #<enum 'VIP'>  枚举类型\nprint(VIP.YELLOW.name)   #YELLOW 获取标签名字\nprint(type(VIP.YELLOW.name))  #<class 'str'> 字符串类型\n\nprint(VIP['YELLOW'])  #VIP.YELLOW\n\nprint(VIP.YELLOW.value)  #1   获取值\n\n#枚举类型、枚举的名字、枚举的值\n\nfor v in VIP:   #遍历枚举类型(并不会把别名打印出来)\n    print(v)    #VIP.YELLOW\n                #VIP.GREEN\n                #VIP.RED\n                #VIP.BLACK \n\n#枚举的比较运算\n#枚举不可以进行大小比较，但可以进行等值比较，身份比较\nresult = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True\nresult1 = VIP.YELLOW == 1    #False\n#result = VIP.YELLOW >= VIP.PINK  #枚举不能进行大小比较报错 \n                                 #'>=' not supported between instances of 'VIP' and 'VIP'\nresult2 = VIP.YELLOW is VIP.PINK #True   身份比较\nprint(result)  \nprint(result1)\nprint(result2)  \n\n\nclass VIP1(Enum):       \n    YELLOW = 1     \n    GREEN = 2   \n    RED = '3'\n    BLACK = 4\n    PINK = 1\n\nresult = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型\nprint(result) \n\nfor v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)\n    print(v)\n'''\n('YELLOW', <VIP.YELLOW: 1>)\n('GREEN', <VIP.GREEN: 2>)\n('RED', <VIP.RED: 3>)\n('BLACK', <VIP.BLACK: 4>)\n('PINK', <VIP.YELLOW: 1>)\n'''\n\nfor v in VIP.__members__:\n    print(v)   #枚举的名字（包括别名）\n'''\nYELLOW\nGREEN\nRED\nBLACK\nPINK\n'''\n\na = 1\na = VIP(a)         #把a变成一个枚举类型\nprint(a)   #VIP.YELLOW     \n\n\nfrom enum import IntEnum #(枚举的值得是int类型)\nfrom enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)\n\nclass VIP2(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n    PINK = 1    \n\n@unique\nclass VIP3(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n  #  PINK = 1       #会报错,取值重复\n\n\n\n#枚举  是单例模式    #23种设计模式        实践中\n```\n","slug":"python基础/python中的枚举","published":1,"updated":"2020-04-10T16:46:16.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuk4004i74ux5mzjuupw","content":"<p><strong>在python中，枚举的本质是一个类，所有枚举类都是Enum的子类</strong><br><strong>枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名</strong></p>\n<p><strong>表示类型的三种方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP(Enum):       #所有枚举类都是Enum的子类</span><br><span class=\"line\">    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）</span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED =  &apos;str&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，</span><br><span class=\"line\">    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: &apos;YELLOW&apos;</span><br><span class=\"line\">  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: &apos;GREEN&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#class Common():</span><br><span class=\"line\">  #  YELLOW = 1       </span><br><span class=\"line\">#VIP.YELLOW =6         #会报错，枚举中的值不能被更改</span><br><span class=\"line\">print(VIP.PINK)</span><br><span class=\"line\">print(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)</span><br><span class=\"line\">print(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名</span><br><span class=\"line\">print(type(VIP.YELLOW))   #&lt;enum &apos;VIP&apos;&gt;  枚举类型</span><br><span class=\"line\">print(VIP.YELLOW.name)   #YELLOW 获取标签名字</span><br><span class=\"line\">print(type(VIP.YELLOW.name))  #&lt;class &apos;str&apos;&gt; 字符串类型</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP[&apos;YELLOW&apos;])  #VIP.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP.YELLOW.value)  #1   获取值</span><br><span class=\"line\"></span><br><span class=\"line\">#枚举类型、枚举的名字、枚举的值</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP:   #遍历枚举类型(并不会把别名打印出来)</span><br><span class=\"line\">    print(v)    #VIP.YELLOW</span><br><span class=\"line\">                #VIP.GREEN</span><br><span class=\"line\">                #VIP.RED</span><br><span class=\"line\">                #VIP.BLACK </span><br><span class=\"line\"></span><br><span class=\"line\">#枚举的比较运算</span><br><span class=\"line\">#枚举不可以进行大小比较，但可以进行等值比较，身份比较</span><br><span class=\"line\">result = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True</span><br><span class=\"line\">result1 = VIP.YELLOW == 1    #False</span><br><span class=\"line\">#result = VIP.YELLOW &gt;= VIP.PINK  #枚举不能进行大小比较报错 </span><br><span class=\"line\">                                 #&apos;&gt;=&apos; not supported between instances of &apos;VIP&apos; and &apos;VIP&apos;</span><br><span class=\"line\">result2 = VIP.YELLOW is VIP.PINK #True   身份比较</span><br><span class=\"line\">print(result)  </span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">print(result2)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class VIP1(Enum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED = &apos;3&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1</span><br><span class=\"line\"></span><br><span class=\"line\">result = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型</span><br><span class=\"line\">print(result) </span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">(&apos;YELLOW&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">(&apos;GREEN&apos;, &lt;VIP.GREEN: 2&gt;)</span><br><span class=\"line\">(&apos;RED&apos;, &lt;VIP.RED: 3&gt;)</span><br><span class=\"line\">(&apos;BLACK&apos;, &lt;VIP.BLACK: 4&gt;)</span><br><span class=\"line\">(&apos;PINK&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__:</span><br><span class=\"line\">    print(v)   #枚举的名字（包括别名）</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">YELLOW</span><br><span class=\"line\">GREEN</span><br><span class=\"line\">RED</span><br><span class=\"line\">BLACK</span><br><span class=\"line\">PINK</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">a = VIP(a)         #把a变成一个枚举类型</span><br><span class=\"line\">print(a)   #VIP.YELLOW     </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from enum import IntEnum #(枚举的值得是int类型)</span><br><span class=\"line\">from enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP2(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1    </span><br><span class=\"line\"></span><br><span class=\"line\">@unique</span><br><span class=\"line\">class VIP3(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">  #  PINK = 1       #会报错,取值重复</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#枚举  是单例模式    #23种设计模式        实践中</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>在python中，枚举的本质是一个类，所有枚举类都是Enum的子类</strong><br><strong>枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名</strong></p>\n<p><strong>表示类型的三种方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP(Enum):       #所有枚举类都是Enum的子类</span><br><span class=\"line\">    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）</span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED =  &apos;str&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，</span><br><span class=\"line\">    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: &apos;YELLOW&apos;</span><br><span class=\"line\">  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: &apos;GREEN&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#class Common():</span><br><span class=\"line\">  #  YELLOW = 1       </span><br><span class=\"line\">#VIP.YELLOW =6         #会报错，枚举中的值不能被更改</span><br><span class=\"line\">print(VIP.PINK)</span><br><span class=\"line\">print(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)</span><br><span class=\"line\">print(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名</span><br><span class=\"line\">print(type(VIP.YELLOW))   #&lt;enum &apos;VIP&apos;&gt;  枚举类型</span><br><span class=\"line\">print(VIP.YELLOW.name)   #YELLOW 获取标签名字</span><br><span class=\"line\">print(type(VIP.YELLOW.name))  #&lt;class &apos;str&apos;&gt; 字符串类型</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP[&apos;YELLOW&apos;])  #VIP.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP.YELLOW.value)  #1   获取值</span><br><span class=\"line\"></span><br><span class=\"line\">#枚举类型、枚举的名字、枚举的值</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP:   #遍历枚举类型(并不会把别名打印出来)</span><br><span class=\"line\">    print(v)    #VIP.YELLOW</span><br><span class=\"line\">                #VIP.GREEN</span><br><span class=\"line\">                #VIP.RED</span><br><span class=\"line\">                #VIP.BLACK </span><br><span class=\"line\"></span><br><span class=\"line\">#枚举的比较运算</span><br><span class=\"line\">#枚举不可以进行大小比较，但可以进行等值比较，身份比较</span><br><span class=\"line\">result = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True</span><br><span class=\"line\">result1 = VIP.YELLOW == 1    #False</span><br><span class=\"line\">#result = VIP.YELLOW &gt;= VIP.PINK  #枚举不能进行大小比较报错 </span><br><span class=\"line\">                                 #&apos;&gt;=&apos; not supported between instances of &apos;VIP&apos; and &apos;VIP&apos;</span><br><span class=\"line\">result2 = VIP.YELLOW is VIP.PINK #True   身份比较</span><br><span class=\"line\">print(result)  </span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">print(result2)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class VIP1(Enum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED = &apos;3&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1</span><br><span class=\"line\"></span><br><span class=\"line\">result = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型</span><br><span class=\"line\">print(result) </span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">(&apos;YELLOW&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">(&apos;GREEN&apos;, &lt;VIP.GREEN: 2&gt;)</span><br><span class=\"line\">(&apos;RED&apos;, &lt;VIP.RED: 3&gt;)</span><br><span class=\"line\">(&apos;BLACK&apos;, &lt;VIP.BLACK: 4&gt;)</span><br><span class=\"line\">(&apos;PINK&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__:</span><br><span class=\"line\">    print(v)   #枚举的名字（包括别名）</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">YELLOW</span><br><span class=\"line\">GREEN</span><br><span class=\"line\">RED</span><br><span class=\"line\">BLACK</span><br><span class=\"line\">PINK</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">a = VIP(a)         #把a变成一个枚举类型</span><br><span class=\"line\">print(a)   #VIP.YELLOW     </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from enum import IntEnum #(枚举的值得是int类型)</span><br><span class=\"line\">from enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP2(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1    </span><br><span class=\"line\"></span><br><span class=\"line\">@unique</span><br><span class=\"line\">class VIP3(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">  #  PINK = 1       #会报错,取值重复</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#枚举  是单例模式    #23种设计模式        实践中</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(15) python中的None","date":"2018-11-14T14:02:15.000Z","_content":"\n**None 表示空  不同于** 空字符串 空的列表 0 False\n\n**类型不同，值不同**\n```\nprint(type(None)) <class 'NoneType'>None是None类\na=''\nb=False\nc=[]\nprint(a==None)  #False\nprint(b==None) #False\nprint(c==None) #False  #值不相等\n```\n**深入**\n```\ndef fun():\n    return None\n\na = fun()\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#S\n```\n```\ndef fun():\n    return None\n\na = []\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#F\n```\n**类中默认非空**\n```\nclass Test():\n    pass\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#S\n```\n**类中为空的情况**\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#F\n```\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nprint(bool(None)) #False\nprint(bool({}))#False\nprint(bool([]))#False\nprint(bool(test))#False\n```\n**由__bool__决定True or False,与__len__无关**\n(即print 只有 bool call  True,或者bool call False ))\n```\nclass Test():\n\n    def __bool__(self):\n        print('bool called')\n        return False#(/True)\n\n    def __len__(self):\n        print('len called')\n        return True #(只能为int类型)\n\nprint(bool(Test()))\n#bool called\n#False#(/True)\n```\n","source":"_posts/python基础/python中的None.md","raw":"---\ntitle: (15) python中的None\ndate: 2018-11-14 22:02:15\ntags:\ncategories: python基础\n---\n\n**None 表示空  不同于** 空字符串 空的列表 0 False\n\n**类型不同，值不同**\n```\nprint(type(None)) <class 'NoneType'>None是None类\na=''\nb=False\nc=[]\nprint(a==None)  #False\nprint(b==None) #False\nprint(c==None) #False  #值不相等\n```\n**深入**\n```\ndef fun():\n    return None\n\na = fun()\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#S\n```\n```\ndef fun():\n    return None\n\na = []\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#F\n```\n**类中默认非空**\n```\nclass Test():\n    pass\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#S\n```\n**类中为空的情况**\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#F\n```\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nprint(bool(None)) #False\nprint(bool({}))#False\nprint(bool([]))#False\nprint(bool(test))#False\n```\n**由__bool__决定True or False,与__len__无关**\n(即print 只有 bool call  True,或者bool call False ))\n```\nclass Test():\n\n    def __bool__(self):\n        print('bool called')\n        return False#(/True)\n\n    def __len__(self):\n        print('len called')\n        return True #(只能为int类型)\n\nprint(bool(Test()))\n#bool called\n#False#(/True)\n```\n","slug":"python基础/python中的None","published":1,"updated":"2020-04-10T16:46:16.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuka004k74uxex8g3f2l","content":"<p><strong>None 表示空  不同于</strong> 空字符串 空的列表 0 False</p>\n<p><strong>类型不同，值不同</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(None)) &lt;class &apos;NoneType&apos;&gt;None是None类</span><br><span class=\"line\">a=&apos;&apos;</span><br><span class=\"line\">b=False</span><br><span class=\"line\">c=[]</span><br><span class=\"line\">print(a==None)  #False</span><br><span class=\"line\">print(b==None) #False</span><br><span class=\"line\">print(c==None) #False  #值不相等</span><br></pre></td></tr></table></figure></p>\n<p><strong>深入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = fun()</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = []</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure>\n<p><strong>类中默认非空</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<p><strong>类中为空的情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">print(bool(None)) #False</span><br><span class=\"line\">print(bool(&#123;&#125;))#False</span><br><span class=\"line\">print(bool([]))#False</span><br><span class=\"line\">print(bool(test))#False</span><br></pre></td></tr></table></figure>\n<p><strong>由<strong>bool</strong>决定True or False,与<strong>len</strong>无关</strong><br>(即print 只有 bool call  True,或者bool call False ))<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __bool__(self):</span><br><span class=\"line\">        print(&apos;bool called&apos;)</span><br><span class=\"line\">        return False#(/True)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        print(&apos;len called&apos;)</span><br><span class=\"line\">        return True #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(Test()))</span><br><span class=\"line\">#bool called</span><br><span class=\"line\">#False#(/True)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>None 表示空  不同于</strong> 空字符串 空的列表 0 False</p>\n<p><strong>类型不同，值不同</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(None)) &lt;class &apos;NoneType&apos;&gt;None是None类</span><br><span class=\"line\">a=&apos;&apos;</span><br><span class=\"line\">b=False</span><br><span class=\"line\">c=[]</span><br><span class=\"line\">print(a==None)  #False</span><br><span class=\"line\">print(b==None) #False</span><br><span class=\"line\">print(c==None) #False  #值不相等</span><br></pre></td></tr></table></figure></p>\n<p><strong>深入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = fun()</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = []</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure>\n<p><strong>类中默认非空</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<p><strong>类中为空的情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">print(bool(None)) #False</span><br><span class=\"line\">print(bool(&#123;&#125;))#False</span><br><span class=\"line\">print(bool([]))#False</span><br><span class=\"line\">print(bool(test))#False</span><br></pre></td></tr></table></figure>\n<p><strong>由<strong>bool</strong>决定True or False,与<strong>len</strong>无关</strong><br>(即print 只有 bool call  True,或者bool call False ))<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __bool__(self):</span><br><span class=\"line\">        print(&apos;bool called&apos;)</span><br><span class=\"line\">        return False#(/True)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        print(&apos;len called&apos;)</span><br><span class=\"line\">        return True #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(Test()))</span><br><span class=\"line\">#bool called</span><br><span class=\"line\">#False#(/True)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(8) python之初识JSON","date":"2018-11-14T13:59:58.000Z","_content":"\n**JSON是一种轻量级的数据交换格式**\n**JSON 是一种数据格式**\n**字符串是 JSON的表现形式**\n**符合JSON格式的字符串叫做 JSON字符串**\njson易于阅读，易于解析，网络传输效率高    跨语言交换数据\n json.loads()解码(反序列化),json.dumps()编码(序列化)\n```\nimport json   #反序列化\n\njson_str = '{\"name\":\"weilai\",\"age\":18,\"a\":true}'     #JSON字符串格式，双引号\njson_str1 = '[{\"name\":\"weilai\",\"age\":18,\"a\":false},{\"name\":\"weilai\",\"age\":18}]'\n\nstudent = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构\nstudent1 = json.loads(json_str1)     \n\nprint(type(student))  #字典格式  {'name': 'weilai', 'age': 18, 'a': True}\nprint(type(student1)) #列表形式  [{'name': 'weilai', 'age': 18, 'a': False}, {'name': 'weilai', 'age': 18}]\n\nprint(student)  \nprint(student1)\nprint(student['age']) \nprint(student['name']) \n```\n\n**序列化**\n```\nimport json\n\nstudent = [\n            {'name': 'weilai', 'age': 18,'a': False},\n            {'name': 'weilai', 'age': 18}\n          ]\n\njson_str = json.dumps(student)\nprint(type(json_str))  #<class 'str'>\nprint(json_str)        #[{\"name\": \"weilai\", \"age\": 18, \"a\": false}, {\"name\": \"weilai\", \"age\": 18}]\n```\n**JSON对象，json, json字符串**\n\n**在python中没有JSON对象**\n\n**json 是对ecmascript的一种实现  与Javascript相同**\n\n**json 是一种中间数据类型，有自己的数据类型，与JavaScript相似**\n\n**rest  服务的标准格式**\n","source":"_posts/python基础/python之初识JSON.md","raw":"---\ntitle: (8) python之初识JSON\ndate: 2018-11-14 21:59:58\ntags:\ncategories: python基础\n---\n\n**JSON是一种轻量级的数据交换格式**\n**JSON 是一种数据格式**\n**字符串是 JSON的表现形式**\n**符合JSON格式的字符串叫做 JSON字符串**\njson易于阅读，易于解析，网络传输效率高    跨语言交换数据\n json.loads()解码(反序列化),json.dumps()编码(序列化)\n```\nimport json   #反序列化\n\njson_str = '{\"name\":\"weilai\",\"age\":18,\"a\":true}'     #JSON字符串格式，双引号\njson_str1 = '[{\"name\":\"weilai\",\"age\":18,\"a\":false},{\"name\":\"weilai\",\"age\":18}]'\n\nstudent = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构\nstudent1 = json.loads(json_str1)     \n\nprint(type(student))  #字典格式  {'name': 'weilai', 'age': 18, 'a': True}\nprint(type(student1)) #列表形式  [{'name': 'weilai', 'age': 18, 'a': False}, {'name': 'weilai', 'age': 18}]\n\nprint(student)  \nprint(student1)\nprint(student['age']) \nprint(student['name']) \n```\n\n**序列化**\n```\nimport json\n\nstudent = [\n            {'name': 'weilai', 'age': 18,'a': False},\n            {'name': 'weilai', 'age': 18}\n          ]\n\njson_str = json.dumps(student)\nprint(type(json_str))  #<class 'str'>\nprint(json_str)        #[{\"name\": \"weilai\", \"age\": 18, \"a\": false}, {\"name\": \"weilai\", \"age\": 18}]\n```\n**JSON对象，json, json字符串**\n\n**在python中没有JSON对象**\n\n**json 是对ecmascript的一种实现  与Javascript相同**\n\n**json 是一种中间数据类型，有自己的数据类型，与JavaScript相似**\n\n**rest  服务的标准格式**\n","slug":"python基础/python之初识JSON","published":1,"updated":"2020-04-10T16:46:16.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtukj004n74ux1kukfjhi","content":"<p><strong>JSON是一种轻量级的数据交换格式</strong><br><strong>JSON 是一种数据格式</strong><br><strong>字符串是 JSON的表现形式</strong><br><strong>符合JSON格式的字符串叫做 JSON字符串</strong><br>json易于阅读，易于解析，网络传输效率高    跨语言交换数据<br> json.loads()解码(反序列化),json.dumps()编码(序列化)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json   #反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = &apos;&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:true&#125;&apos;     #JSON字符串格式，双引号</span><br><span class=\"line\">json_str1 = &apos;[&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:false&#125;,&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18&#125;]&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">student = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构</span><br><span class=\"line\">student1 = json.loads(json_str1)     </span><br><span class=\"line\"></span><br><span class=\"line\">print(type(student))  #字典格式  &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: True&#125;</span><br><span class=\"line\">print(type(student1)) #列表形式  [&#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: False&#125;, &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(student)  </span><br><span class=\"line\">print(student1)</span><br><span class=\"line\">print(student[&apos;age&apos;]) </span><br><span class=\"line\">print(student[&apos;name&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><strong>序列化</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">student = [</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18,&apos;a&apos;: False&#125;,</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = json.dumps(student)</span><br><span class=\"line\">print(type(json_str))  #&lt;class &apos;str&apos;&gt;</span><br><span class=\"line\">print(json_str)        #[&#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18, &quot;a&quot;: false&#125;, &#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON对象，json, json字符串</strong></p>\n<p><strong>在python中没有JSON对象</strong></p>\n<p><strong>json 是对ecmascript的一种实现  与Javascript相同</strong></p>\n<p><strong>json 是一种中间数据类型，有自己的数据类型，与JavaScript相似</strong></p>\n<p><strong>rest  服务的标准格式</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>JSON是一种轻量级的数据交换格式</strong><br><strong>JSON 是一种数据格式</strong><br><strong>字符串是 JSON的表现形式</strong><br><strong>符合JSON格式的字符串叫做 JSON字符串</strong><br>json易于阅读，易于解析，网络传输效率高    跨语言交换数据<br> json.loads()解码(反序列化),json.dumps()编码(序列化)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json   #反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = &apos;&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:true&#125;&apos;     #JSON字符串格式，双引号</span><br><span class=\"line\">json_str1 = &apos;[&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:false&#125;,&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18&#125;]&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">student = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构</span><br><span class=\"line\">student1 = json.loads(json_str1)     </span><br><span class=\"line\"></span><br><span class=\"line\">print(type(student))  #字典格式  &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: True&#125;</span><br><span class=\"line\">print(type(student1)) #列表形式  [&#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: False&#125;, &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(student)  </span><br><span class=\"line\">print(student1)</span><br><span class=\"line\">print(student[&apos;age&apos;]) </span><br><span class=\"line\">print(student[&apos;name&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><strong>序列化</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">student = [</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18,&apos;a&apos;: False&#125;,</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = json.dumps(student)</span><br><span class=\"line\">print(type(json_str))  #&lt;class &apos;str&apos;&gt;</span><br><span class=\"line\">print(json_str)        #[&#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18, &quot;a&quot;: false&#125;, &#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON对象，json, json字符串</strong></p>\n<p><strong>在python中没有JSON对象</strong></p>\n<p><strong>json 是对ecmascript的一种实现  与Javascript相同</strong></p>\n<p><strong>json 是一种中间数据类型，有自己的数据类型，与JavaScript相似</strong></p>\n<p><strong>rest  服务的标准格式</strong></p>\n"},{"title":"(6) python中面向对象","date":"2018-11-14T13:59:27.000Z","_content":"![变量上为 类变量，实例变量](https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有意义的面向对象的代码\n类  是面向对象最核心的观念\n类、对象\n实例化\n类最基本的作用：封装\n一定要用self,引用 self.\n类只负责定义，不会去运行\n类和对象。\n数据成员\n构造函数可以让模板生成不同的对象\n\n**类是现实世界或思维世界中的实体在计算机中的反馈**\n**它将数据以及这些数据上的操作封装在一起**\n\n**类 被   实例化后  就成了一个具体的对象** \n**类就像是一个模板，通过类  就可以产生很多对象。**\n```\n#比如这段代码为  1.py\nclass Human():\n    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）\n    def __init__(self,name,age):#构造函数 ，\n    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.\n    #初始化对象属性  \n        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 \n        self.age = age   #定义实例变量，实例变量只和对象相关 self.\n        #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def get_name(self):\n        print(self.name)\n\n    def do_homework(self):\n        print('This is a parent method')\n```\n```\nfrom 1.py import Human  \n\nclass Student(Human):     #Human是Student的父类，Student是Human的子类\n  \n    def __init__(self,school,name,age):\n        self.school = school \n\n        super(Student,self).__init__(name,age)  #建议以此方式调用父类\n        #super 不仅仅可用于构造函数，也可以用于普通的实例方法\n\n        # Human.__init__(self,name,age)   #子类里调用父类构造函数\n        #self   用类调用实例方法没意义，所以加self\n\n    #     self.age = age \n  \n\n    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类\n        #super(Student,self).do_homework()  #This is a parent method\n        print('English homework')\n        \nstudent1 = Student('jinan university','wei',18) #实例化\nstudent1.do_homework() #English homework\nprint(student1.name) #wei\nprint(student1.age)#18\n#继承   单继承  多继承\n```\n**定义一个类**\n```\nclass Student():\n    name = ''   #在class内部定义变量    类变量 （和类相关联在一起的）\n    age = 0   \n    #行为 与  特征   \n         \n    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)\n        #初始化对象属性\n        self.neme = name \n        self.age = age        #定义实例变量，实例变量只和对象相关 self.\n\n    #    #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def print_files(self):        #在class内部定义函数\n        print('name:'+ self.name)\n        print('age:'+ str(self.age))\n\nstudent = Student()  #类的实例化\nstudent.print_files()  #类下面方法的调用\n#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。\n# 定义实例时需要self，调用实例不需要给self赋参 \n```\n**详解**\n```\n# 模块\nc = 50\n\ndef add(x, y):\n    c= x+y \n    print(c)\n\nadd(1,2)       #3   函数中局部变量的值\nprint(c)       #50  全局变量的值\n \n# 两个print(c)的区别 \n# 局部变量不会改变全局变量的值\n```\n\n**类和模块要区别对待**\n\n###### '类变量'     和 类  关联在一起的 \n######'实例变量'    和 对象 关联在一起的 \n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    def marking(self,sorce):         #内部访问\n        if sorce < 0:                #建议通过方法 对 类变量赋值\n            # sorce =0\n            return '不能给同学打负分'\n        self.__sorce = sorce\n        print(self.name + '同学本次的考试分数为：' + str(self.__sorce))\n        return 'hello'\nresult =  student1.marking(80)#wang同学本次的考试分数为：80\nprint(result)   #hello\n```\n```\nclass Student():        \n    sum=0    #   类变量   和类相关\n    name = 'weilai'   #在class内部定义变量    类变量\n    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这\n    # 行为 与  特征   \n         \n    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法\n        #主要是被用来初始化对象属性\n        self.name = name            #实例方法操控实例变量\n        self.age = age\n        print(self.__class__.sum)   \n        print(Student.sum)\n        self.__class__.sum +=1      #实例方法访问类变量中的sum\n        print(Student.sum)\nstudent1 = Student('wang',18)\nstudent2 = Student('li',19)\n```\n**类方法主要操作和类相关的变量**\n**用类调用类方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nStudent.plus_sum()  #用类调用类方法\nstudent2 = Student('li',19)\nStudent.plus_sum()\n```\n**对象调用类方法(python可用但最好不要用)**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nstudent1.plus_sum()  #用对象调用类方法\nstudent2 = Student('li',19)\nstudent2.plus_sum()\n```\n**静态方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @staticmethod                #静态方法\n    def add(x):\n        print(Student.sum)\n        print('this is a static method')\n```\n**静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)**\n**当和类和对象没多大关系的时候,可以使用静态方法**\n**静态方法和类方法  均不能访问  实例变量**\n\n\n**类中赋值没有意义的。**\n```\nclass Student():\n    name = 'weilai'\n    age = 0\n\n    def __init__(self,name,age): \n        name = name   \n        age = age\n      \nstudent1 = Student('wang',18)\nprint(student1.name)   #weilai\nprint(student1.age)    #0\nprint(student1.__dict__)    #{}   #__dict__显示student1下所有的变量，即没有变量\n# python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）\n# 所以即使student1为空，也显示了类变量下的值\n#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的\n#__init__ 构造函数是python特有的，可以从外部访问\n#print(student1._Student__sorce)    表明python中私有只是改了一个名字\n```\n","source":"_posts/python基础/python中面向对象.md","raw":"---\ntitle: (6) python中面向对象\ndate: 2018-11-14 21:59:27\ntags:\ncategories: python基础\n---\n![变量上为 类变量，实例变量](https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有意义的面向对象的代码\n类  是面向对象最核心的观念\n类、对象\n实例化\n类最基本的作用：封装\n一定要用self,引用 self.\n类只负责定义，不会去运行\n类和对象。\n数据成员\n构造函数可以让模板生成不同的对象\n\n**类是现实世界或思维世界中的实体在计算机中的反馈**\n**它将数据以及这些数据上的操作封装在一起**\n\n**类 被   实例化后  就成了一个具体的对象** \n**类就像是一个模板，通过类  就可以产生很多对象。**\n```\n#比如这段代码为  1.py\nclass Human():\n    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）\n    def __init__(self,name,age):#构造函数 ，\n    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.\n    #初始化对象属性  \n        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 \n        self.age = age   #定义实例变量，实例变量只和对象相关 self.\n        #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def get_name(self):\n        print(self.name)\n\n    def do_homework(self):\n        print('This is a parent method')\n```\n```\nfrom 1.py import Human  \n\nclass Student(Human):     #Human是Student的父类，Student是Human的子类\n  \n    def __init__(self,school,name,age):\n        self.school = school \n\n        super(Student,self).__init__(name,age)  #建议以此方式调用父类\n        #super 不仅仅可用于构造函数，也可以用于普通的实例方法\n\n        # Human.__init__(self,name,age)   #子类里调用父类构造函数\n        #self   用类调用实例方法没意义，所以加self\n\n    #     self.age = age \n  \n\n    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类\n        #super(Student,self).do_homework()  #This is a parent method\n        print('English homework')\n        \nstudent1 = Student('jinan university','wei',18) #实例化\nstudent1.do_homework() #English homework\nprint(student1.name) #wei\nprint(student1.age)#18\n#继承   单继承  多继承\n```\n**定义一个类**\n```\nclass Student():\n    name = ''   #在class内部定义变量    类变量 （和类相关联在一起的）\n    age = 0   \n    #行为 与  特征   \n         \n    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)\n        #初始化对象属性\n        self.neme = name \n        self.age = age        #定义实例变量，实例变量只和对象相关 self.\n\n    #    #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def print_files(self):        #在class内部定义函数\n        print('name:'+ self.name)\n        print('age:'+ str(self.age))\n\nstudent = Student()  #类的实例化\nstudent.print_files()  #类下面方法的调用\n#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。\n# 定义实例时需要self，调用实例不需要给self赋参 \n```\n**详解**\n```\n# 模块\nc = 50\n\ndef add(x, y):\n    c= x+y \n    print(c)\n\nadd(1,2)       #3   函数中局部变量的值\nprint(c)       #50  全局变量的值\n \n# 两个print(c)的区别 \n# 局部变量不会改变全局变量的值\n```\n\n**类和模块要区别对待**\n\n###### '类变量'     和 类  关联在一起的 \n######'实例变量'    和 对象 关联在一起的 \n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    def marking(self,sorce):         #内部访问\n        if sorce < 0:                #建议通过方法 对 类变量赋值\n            # sorce =0\n            return '不能给同学打负分'\n        self.__sorce = sorce\n        print(self.name + '同学本次的考试分数为：' + str(self.__sorce))\n        return 'hello'\nresult =  student1.marking(80)#wang同学本次的考试分数为：80\nprint(result)   #hello\n```\n```\nclass Student():        \n    sum=0    #   类变量   和类相关\n    name = 'weilai'   #在class内部定义变量    类变量\n    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这\n    # 行为 与  特征   \n         \n    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法\n        #主要是被用来初始化对象属性\n        self.name = name            #实例方法操控实例变量\n        self.age = age\n        print(self.__class__.sum)   \n        print(Student.sum)\n        self.__class__.sum +=1      #实例方法访问类变量中的sum\n        print(Student.sum)\nstudent1 = Student('wang',18)\nstudent2 = Student('li',19)\n```\n**类方法主要操作和类相关的变量**\n**用类调用类方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nStudent.plus_sum()  #用类调用类方法\nstudent2 = Student('li',19)\nStudent.plus_sum()\n```\n**对象调用类方法(python可用但最好不要用)**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nstudent1.plus_sum()  #用对象调用类方法\nstudent2 = Student('li',19)\nstudent2.plus_sum()\n```\n**静态方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @staticmethod                #静态方法\n    def add(x):\n        print(Student.sum)\n        print('this is a static method')\n```\n**静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)**\n**当和类和对象没多大关系的时候,可以使用静态方法**\n**静态方法和类方法  均不能访问  实例变量**\n\n\n**类中赋值没有意义的。**\n```\nclass Student():\n    name = 'weilai'\n    age = 0\n\n    def __init__(self,name,age): \n        name = name   \n        age = age\n      \nstudent1 = Student('wang',18)\nprint(student1.name)   #weilai\nprint(student1.age)    #0\nprint(student1.__dict__)    #{}   #__dict__显示student1下所有的变量，即没有变量\n# python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）\n# 所以即使student1为空，也显示了类变量下的值\n#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的\n#__init__ 构造函数是python特有的，可以从外部访问\n#print(student1._Student__sorce)    表明python中私有只是改了一个名字\n```\n","slug":"python基础/python中面向对象","published":1,"updated":"2020-04-10T16:46:16.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtukn004p74uxs5j54qi4","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"变量上为 类变量，实例变量\"></p>\n<p>有意义的面向对象的代码<br>类  是面向对象最核心的观念<br>类、对象<br>实例化<br>类最基本的作用：封装<br>一定要用self,引用 self.<br>类只负责定义，不会去运行<br>类和对象。<br>数据成员<br>构造函数可以让模板生成不同的对象</p>\n<p><strong>类是现实世界或思维世界中的实体在计算机中的反馈</strong><br><strong>它将数据以及这些数据上的操作封装在一起</strong></p>\n<p><strong>类 被   实例化后  就成了一个具体的对象</strong><br><strong>类就像是一个模板，通过类  就可以产生很多对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#比如这段代码为  1.py</span><br><span class=\"line\">class Human():</span><br><span class=\"line\">    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    def __init__(self,name,age):#构造函数 ，</span><br><span class=\"line\">    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.</span><br><span class=\"line\">    #初始化对象属性  </span><br><span class=\"line\">        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 </span><br><span class=\"line\">        self.age = age   #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\">        #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        print(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):</span><br><span class=\"line\">        print(&apos;This is a parent method&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from 1.py import Human  </span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Human):     #Human是Student的父类，Student是Human的子类</span><br><span class=\"line\">  </span><br><span class=\"line\">    def __init__(self,school,name,age):</span><br><span class=\"line\">        self.school = school </span><br><span class=\"line\"></span><br><span class=\"line\">        super(Student,self).__init__(name,age)  #建议以此方式调用父类</span><br><span class=\"line\">        #super 不仅仅可用于构造函数，也可以用于普通的实例方法</span><br><span class=\"line\"></span><br><span class=\"line\">        # Human.__init__(self,name,age)   #子类里调用父类构造函数</span><br><span class=\"line\">        #self   用类调用实例方法没意义，所以加self</span><br><span class=\"line\"></span><br><span class=\"line\">    #     self.age = age </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类</span><br><span class=\"line\">        #super(Student,self).do_homework()  #This is a parent method</span><br><span class=\"line\">        print(&apos;English homework&apos;)</span><br><span class=\"line\">        </span><br><span class=\"line\">student1 = Student(&apos;jinan university&apos;,&apos;wei&apos;,18) #实例化</span><br><span class=\"line\">student1.do_homework() #English homework</span><br><span class=\"line\">print(student1.name) #wei</span><br><span class=\"line\">print(student1.age)#18</span><br><span class=\"line\">#继承   单继承  多继承</span><br></pre></td></tr></table></figure>\n<p><strong>定义一个类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;&apos;   #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    age = 0   </span><br><span class=\"line\">    #行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)</span><br><span class=\"line\">        #初始化对象属性</span><br><span class=\"line\">        self.neme = name </span><br><span class=\"line\">        self.age = age        #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\"></span><br><span class=\"line\">    #    #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_files(self):        #在class内部定义函数</span><br><span class=\"line\">        print(&apos;name:&apos;+ self.name)</span><br><span class=\"line\">        print(&apos;age:&apos;+ str(self.age))</span><br><span class=\"line\"></span><br><span class=\"line\">student = Student()  #类的实例化</span><br><span class=\"line\">student.print_files()  #类下面方法的调用</span><br><span class=\"line\">#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。</span><br><span class=\"line\"># 定义实例时需要self，调用实例不需要给self赋参</span><br></pre></td></tr></table></figure></p>\n<p><strong>详解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 模块</span><br><span class=\"line\">c = 50</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    c= x+y </span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2)       #3   函数中局部变量的值</span><br><span class=\"line\">print(c)       #50  全局变量的值</span><br><span class=\"line\"> </span><br><span class=\"line\"># 两个print(c)的区别 </span><br><span class=\"line\"># 局部变量不会改变全局变量的值</span><br></pre></td></tr></table></figure></p>\n<p><strong>类和模块要区别对待</strong></p>\n<h6 id=\"‘类变量’-和-类-关联在一起的\"><a href=\"#‘类变量’-和-类-关联在一起的\" class=\"headerlink\" title=\"‘类变量’     和 类  关联在一起的\"></a>‘类变量’     和 类  关联在一起的</h6><p>######’实例变量’    和 对象 关联在一起的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def marking(self,sorce):         #内部访问</span><br><span class=\"line\">        if sorce &lt; 0:                #建议通过方法 对 类变量赋值</span><br><span class=\"line\">            # sorce =0</span><br><span class=\"line\">            return &apos;不能给同学打负分&apos;</span><br><span class=\"line\">        self.__sorce = sorce</span><br><span class=\"line\">        print(self.name + &apos;同学本次的考试分数为：&apos; + str(self.__sorce))</span><br><span class=\"line\">        return &apos;hello&apos;</span><br><span class=\"line\">result =  student1.marking(80)#wang同学本次的考试分数为：80</span><br><span class=\"line\">print(result)   #hello</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0    #   类变量   和类相关</span><br><span class=\"line\">    name = &apos;weilai&apos;   #在class内部定义变量    类变量</span><br><span class=\"line\">    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这</span><br><span class=\"line\">    # 行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法</span><br><span class=\"line\">        #主要是被用来初始化对象属性</span><br><span class=\"line\">        self.name = name            #实例方法操控实例变量</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(self.__class__.sum)   </span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        self.__class__.sum +=1      #实例方法访问类变量中的sum</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br></pre></td></tr></table></figure>\n<p><strong>类方法主要操作和类相关的变量</strong><br><strong>用类调用类方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">Student.plus_sum()  #用类调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">Student.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>对象调用类方法(python可用但最好不要用)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student1.plus_sum()  #用对象调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">student2.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod                #静态方法</span><br><span class=\"line\">    def add(x):</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        print(&apos;this is a static method&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)</strong><br><strong>当和类和对象没多大关系的时候,可以使用静态方法</strong><br><strong>静态方法和类方法  均不能访问  实例变量</strong></p>\n<p><strong>类中赋值没有意义的。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age): </span><br><span class=\"line\">        name = name   </span><br><span class=\"line\">        age = age</span><br><span class=\"line\">      </span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">print(student1.name)   #weilai</span><br><span class=\"line\">print(student1.age)    #0</span><br><span class=\"line\">print(student1.__dict__)    #&#123;&#125;   #__dict__显示student1下所有的变量，即没有变量</span><br><span class=\"line\"># python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）</span><br><span class=\"line\"># 所以即使student1为空，也显示了类变量下的值</span><br><span class=\"line\">#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的</span><br><span class=\"line\">#__init__ 构造函数是python特有的，可以从外部访问</span><br><span class=\"line\">#print(student1._Student__sorce)    表明python中私有只是改了一个名字</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"变量上为 类变量，实例变量\"></p>\n<p>有意义的面向对象的代码<br>类  是面向对象最核心的观念<br>类、对象<br>实例化<br>类最基本的作用：封装<br>一定要用self,引用 self.<br>类只负责定义，不会去运行<br>类和对象。<br>数据成员<br>构造函数可以让模板生成不同的对象</p>\n<p><strong>类是现实世界或思维世界中的实体在计算机中的反馈</strong><br><strong>它将数据以及这些数据上的操作封装在一起</strong></p>\n<p><strong>类 被   实例化后  就成了一个具体的对象</strong><br><strong>类就像是一个模板，通过类  就可以产生很多对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#比如这段代码为  1.py</span><br><span class=\"line\">class Human():</span><br><span class=\"line\">    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    def __init__(self,name,age):#构造函数 ，</span><br><span class=\"line\">    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.</span><br><span class=\"line\">    #初始化对象属性  </span><br><span class=\"line\">        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 </span><br><span class=\"line\">        self.age = age   #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\">        #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        print(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):</span><br><span class=\"line\">        print(&apos;This is a parent method&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from 1.py import Human  </span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Human):     #Human是Student的父类，Student是Human的子类</span><br><span class=\"line\">  </span><br><span class=\"line\">    def __init__(self,school,name,age):</span><br><span class=\"line\">        self.school = school </span><br><span class=\"line\"></span><br><span class=\"line\">        super(Student,self).__init__(name,age)  #建议以此方式调用父类</span><br><span class=\"line\">        #super 不仅仅可用于构造函数，也可以用于普通的实例方法</span><br><span class=\"line\"></span><br><span class=\"line\">        # Human.__init__(self,name,age)   #子类里调用父类构造函数</span><br><span class=\"line\">        #self   用类调用实例方法没意义，所以加self</span><br><span class=\"line\"></span><br><span class=\"line\">    #     self.age = age </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类</span><br><span class=\"line\">        #super(Student,self).do_homework()  #This is a parent method</span><br><span class=\"line\">        print(&apos;English homework&apos;)</span><br><span class=\"line\">        </span><br><span class=\"line\">student1 = Student(&apos;jinan university&apos;,&apos;wei&apos;,18) #实例化</span><br><span class=\"line\">student1.do_homework() #English homework</span><br><span class=\"line\">print(student1.name) #wei</span><br><span class=\"line\">print(student1.age)#18</span><br><span class=\"line\">#继承   单继承  多继承</span><br></pre></td></tr></table></figure>\n<p><strong>定义一个类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;&apos;   #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    age = 0   </span><br><span class=\"line\">    #行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)</span><br><span class=\"line\">        #初始化对象属性</span><br><span class=\"line\">        self.neme = name </span><br><span class=\"line\">        self.age = age        #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\"></span><br><span class=\"line\">    #    #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_files(self):        #在class内部定义函数</span><br><span class=\"line\">        print(&apos;name:&apos;+ self.name)</span><br><span class=\"line\">        print(&apos;age:&apos;+ str(self.age))</span><br><span class=\"line\"></span><br><span class=\"line\">student = Student()  #类的实例化</span><br><span class=\"line\">student.print_files()  #类下面方法的调用</span><br><span class=\"line\">#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。</span><br><span class=\"line\"># 定义实例时需要self，调用实例不需要给self赋参</span><br></pre></td></tr></table></figure></p>\n<p><strong>详解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 模块</span><br><span class=\"line\">c = 50</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    c= x+y </span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2)       #3   函数中局部变量的值</span><br><span class=\"line\">print(c)       #50  全局变量的值</span><br><span class=\"line\"> </span><br><span class=\"line\"># 两个print(c)的区别 </span><br><span class=\"line\"># 局部变量不会改变全局变量的值</span><br></pre></td></tr></table></figure></p>\n<p><strong>类和模块要区别对待</strong></p>\n<h6 id=\"‘类变量’-和-类-关联在一起的\"><a href=\"#‘类变量’-和-类-关联在一起的\" class=\"headerlink\" title=\"‘类变量’     和 类  关联在一起的\"></a>‘类变量’     和 类  关联在一起的</h6><p>######’实例变量’    和 对象 关联在一起的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def marking(self,sorce):         #内部访问</span><br><span class=\"line\">        if sorce &lt; 0:                #建议通过方法 对 类变量赋值</span><br><span class=\"line\">            # sorce =0</span><br><span class=\"line\">            return &apos;不能给同学打负分&apos;</span><br><span class=\"line\">        self.__sorce = sorce</span><br><span class=\"line\">        print(self.name + &apos;同学本次的考试分数为：&apos; + str(self.__sorce))</span><br><span class=\"line\">        return &apos;hello&apos;</span><br><span class=\"line\">result =  student1.marking(80)#wang同学本次的考试分数为：80</span><br><span class=\"line\">print(result)   #hello</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0    #   类变量   和类相关</span><br><span class=\"line\">    name = &apos;weilai&apos;   #在class内部定义变量    类变量</span><br><span class=\"line\">    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这</span><br><span class=\"line\">    # 行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法</span><br><span class=\"line\">        #主要是被用来初始化对象属性</span><br><span class=\"line\">        self.name = name            #实例方法操控实例变量</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(self.__class__.sum)   </span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        self.__class__.sum +=1      #实例方法访问类变量中的sum</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br></pre></td></tr></table></figure>\n<p><strong>类方法主要操作和类相关的变量</strong><br><strong>用类调用类方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">Student.plus_sum()  #用类调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">Student.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>对象调用类方法(python可用但最好不要用)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student1.plus_sum()  #用对象调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">student2.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod                #静态方法</span><br><span class=\"line\">    def add(x):</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        print(&apos;this is a static method&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)</strong><br><strong>当和类和对象没多大关系的时候,可以使用静态方法</strong><br><strong>静态方法和类方法  均不能访问  实例变量</strong></p>\n<p><strong>类中赋值没有意义的。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age): </span><br><span class=\"line\">        name = name   </span><br><span class=\"line\">        age = age</span><br><span class=\"line\">      </span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">print(student1.name)   #weilai</span><br><span class=\"line\">print(student1.age)    #0</span><br><span class=\"line\">print(student1.__dict__)    #&#123;&#125;   #__dict__显示student1下所有的变量，即没有变量</span><br><span class=\"line\"># python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）</span><br><span class=\"line\"># 所以即使student1为空，也显示了类变量下的值</span><br><span class=\"line\">#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的</span><br><span class=\"line\">#__init__ 构造函数是python特有的，可以从外部访问</span><br><span class=\"line\">#print(student1._Student__sorce)    表明python中私有只是改了一个名字</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(11) python之函数式编程","date":"2018-11-14T14:00:48.000Z","_content":"**函数式编程是一种思维，闭包只是其一种体现**\n\n**匿名函数**\n```\n#例如 x+y\n\n#普通函数\ndef add(x,y):\n  return x+y\n\n#匿名函数\nlambda x,y:x+y \n```\n**三元表达式**\n```\n# x,y   x大于y，取x 否则，取y\n# x > y ? x:y  (其他语言中)\n# x if x > y else y #python中\n#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 \nx = 1\ny = 4\nr = x if x > y else y\nprint(r) #4\n```\n**map类**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\ndef square(x):\n    return x * x\n\nr = map(square,list_a)\nprint(r)  #<map object at 0x0000026BCECDE9E8>#map类\nprint(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]\n#map:将集合里每个元素传到square里去，并且映射到新的集合中\n\n#也可以用for\ndef square1(x):\n    return x * x\nfor x in list_a:\n    x = square1(x)\n    print(x)#1, 4, 9, 16, 25, 36, 49, 64\n```\n**map常用方法**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\nr = map(lambda x:x * x,list_a)\nprint(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]\n```\n```\nlist_a = [1,2,3,4,5,6,7,8]\nlist_b = [1, 4, 9, 16, 25, 36, 49]\n\ns = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list\nprint(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个\n```\n**reduce** 连续计算，连续计算，连续调用lambda\n```\nfrom functools import reduce\nlist_a = [1,2,3,4,5,6,7,8]\nr = reduce(lambda x,y:x + y,list_a,10) #初始值为10\n #10+1,得到11，11+2,得到13.....等一系列计算\nprint(r) #46\n```\n```\n#初始值为50，从0累加到99\nfrom functools import reduce\na = range(0,100)\nr = reduce(lambda x,y:x+y,a,50)\nprint(r) \n```\n**map/reduce编程模型 映射 归纳 \n并行计算\n函数式编程**\n\n**filter  过滤**\n```\nlist_a = [1,1,0,0,1,1,0,1,0]\n# r = filter(lambda x: True if x==1 else False, list_a)\nr = filter(lambda x:x,list_a) #因为0代表False\nprint(list(r))\n```\n","source":"_posts/python基础/python之函数式编程.md","raw":"---\ntitle: (11) python之函数式编程\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**函数式编程是一种思维，闭包只是其一种体现**\n\n**匿名函数**\n```\n#例如 x+y\n\n#普通函数\ndef add(x,y):\n  return x+y\n\n#匿名函数\nlambda x,y:x+y \n```\n**三元表达式**\n```\n# x,y   x大于y，取x 否则，取y\n# x > y ? x:y  (其他语言中)\n# x if x > y else y #python中\n#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 \nx = 1\ny = 4\nr = x if x > y else y\nprint(r) #4\n```\n**map类**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\ndef square(x):\n    return x * x\n\nr = map(square,list_a)\nprint(r)  #<map object at 0x0000026BCECDE9E8>#map类\nprint(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]\n#map:将集合里每个元素传到square里去，并且映射到新的集合中\n\n#也可以用for\ndef square1(x):\n    return x * x\nfor x in list_a:\n    x = square1(x)\n    print(x)#1, 4, 9, 16, 25, 36, 49, 64\n```\n**map常用方法**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\nr = map(lambda x:x * x,list_a)\nprint(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]\n```\n```\nlist_a = [1,2,3,4,5,6,7,8]\nlist_b = [1, 4, 9, 16, 25, 36, 49]\n\ns = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list\nprint(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个\n```\n**reduce** 连续计算，连续计算，连续调用lambda\n```\nfrom functools import reduce\nlist_a = [1,2,3,4,5,6,7,8]\nr = reduce(lambda x,y:x + y,list_a,10) #初始值为10\n #10+1,得到11，11+2,得到13.....等一系列计算\nprint(r) #46\n```\n```\n#初始值为50，从0累加到99\nfrom functools import reduce\na = range(0,100)\nr = reduce(lambda x,y:x+y,a,50)\nprint(r) \n```\n**map/reduce编程模型 映射 归纳 \n并行计算\n函数式编程**\n\n**filter  过滤**\n```\nlist_a = [1,1,0,0,1,1,0,1,0]\n# r = filter(lambda x: True if x==1 else False, list_a)\nr = filter(lambda x:x,list_a) #因为0代表False\nprint(list(r))\n```\n","slug":"python基础/python之函数式编程","published":1,"updated":"2020-04-10T16:46:16.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuks004s74ux9b91spvi","content":"<p><strong>函数式编程是一种思维，闭包只是其一种体现</strong></p>\n<p><strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#例如 x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数</span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">  return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#匿名函数</span><br><span class=\"line\">lambda x,y:x+y</span><br></pre></td></tr></table></figure></p>\n<p><strong>三元表达式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># x,y   x大于y，取x 否则，取y</span><br><span class=\"line\"># x &gt; y ? x:y  (其他语言中)</span><br><span class=\"line\"># x if x &gt; y else y #python中</span><br><span class=\"line\">#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 </span><br><span class=\"line\">x = 1</span><br><span class=\"line\">y = 4</span><br><span class=\"line\">r = x if x &gt; y else y</span><br><span class=\"line\">print(r) #4</span><br></pre></td></tr></table></figure></p>\n<p><strong>map类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">def square(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(square,list_a)</span><br><span class=\"line\">print(r)  #&lt;map object at 0x0000026BCECDE9E8&gt;#map类</span><br><span class=\"line\">print(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]</span><br><span class=\"line\">#map:将集合里每个元素传到square里去，并且映射到新的集合中</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以用for</span><br><span class=\"line\">def square1(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">for x in list_a:</span><br><span class=\"line\">    x = square1(x)</span><br><span class=\"line\">    print(x)#1, 4, 9, 16, 25, 36, 49, 64</span><br></pre></td></tr></table></figure></p>\n<p><strong>map常用方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(lambda x:x * x,list_a)</span><br><span class=\"line\">print(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">list_b = [1, 4, 9, 16, 25, 36, 49]</span><br><span class=\"line\"></span><br><span class=\"line\">s = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list</span><br><span class=\"line\">print(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个</span><br></pre></td></tr></table></figure>\n<p><strong>reduce</strong> 连续计算，连续计算，连续调用lambda<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">r = reduce(lambda x,y:x + y,list_a,10) #初始值为10</span><br><span class=\"line\"> #10+1,得到11，11+2,得到13.....等一系列计算</span><br><span class=\"line\">print(r) #46</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始值为50，从0累加到99</span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">a = range(0,100)</span><br><span class=\"line\">r = reduce(lambda x,y:x+y,a,50)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<p><strong>map/reduce编程模型 映射 归纳<br>并行计算<br>函数式编程</strong></p>\n<p><strong>filter  过滤</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,1,0,0,1,1,0,1,0]</span><br><span class=\"line\"># r = filter(lambda x: True if x==1 else False, list_a)</span><br><span class=\"line\">r = filter(lambda x:x,list_a) #因为0代表False</span><br><span class=\"line\">print(list(r))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>函数式编程是一种思维，闭包只是其一种体现</strong></p>\n<p><strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#例如 x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数</span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">  return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#匿名函数</span><br><span class=\"line\">lambda x,y:x+y</span><br></pre></td></tr></table></figure></p>\n<p><strong>三元表达式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># x,y   x大于y，取x 否则，取y</span><br><span class=\"line\"># x &gt; y ? x:y  (其他语言中)</span><br><span class=\"line\"># x if x &gt; y else y #python中</span><br><span class=\"line\">#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 </span><br><span class=\"line\">x = 1</span><br><span class=\"line\">y = 4</span><br><span class=\"line\">r = x if x &gt; y else y</span><br><span class=\"line\">print(r) #4</span><br></pre></td></tr></table></figure></p>\n<p><strong>map类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">def square(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(square,list_a)</span><br><span class=\"line\">print(r)  #&lt;map object at 0x0000026BCECDE9E8&gt;#map类</span><br><span class=\"line\">print(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]</span><br><span class=\"line\">#map:将集合里每个元素传到square里去，并且映射到新的集合中</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以用for</span><br><span class=\"line\">def square1(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">for x in list_a:</span><br><span class=\"line\">    x = square1(x)</span><br><span class=\"line\">    print(x)#1, 4, 9, 16, 25, 36, 49, 64</span><br></pre></td></tr></table></figure></p>\n<p><strong>map常用方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(lambda x:x * x,list_a)</span><br><span class=\"line\">print(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">list_b = [1, 4, 9, 16, 25, 36, 49]</span><br><span class=\"line\"></span><br><span class=\"line\">s = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list</span><br><span class=\"line\">print(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个</span><br></pre></td></tr></table></figure>\n<p><strong>reduce</strong> 连续计算，连续计算，连续调用lambda<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">r = reduce(lambda x,y:x + y,list_a,10) #初始值为10</span><br><span class=\"line\"> #10+1,得到11，11+2,得到13.....等一系列计算</span><br><span class=\"line\">print(r) #46</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始值为50，从0累加到99</span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">a = range(0,100)</span><br><span class=\"line\">r = reduce(lambda x,y:x+y,a,50)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<p><strong>map/reduce编程模型 映射 归纳<br>并行计算<br>函数式编程</strong></p>\n<p><strong>filter  过滤</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,1,0,0,1,1,0,1,0]</span><br><span class=\"line\"># r = filter(lambda x: True if x==1 else False, list_a)</span><br><span class=\"line\">r = filter(lambda x:x,list_a) #因为0代表False</span><br><span class=\"line\">print(list(r))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(9) python之闭包","date":"2018-11-14T14:00:48.000Z","_content":"**闭包**\n闭包 = 函数 + 环境变量(函数定义的时候)\n\n**一个最简单的闭包**\n```\ndef curve_pre():\n    def curve():\n        print('This is a function')\n    return curve\n\nf = curve_pre()\nf()   #This is a function\n```\n**闭包不受外部变量影响**\n```\ndef curve_pre1():\n    a = 25\n    def curve1(x):\n        return a*x**2\n    return curve1\n\n#闭包 = 函数 + 环境变量(函数定义的时候)\na = 20     #全局变量\nf1 = curve_pre1()\nprint(f1.__closure__)  \n #(<cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720>,)实质返回了一个闭包\nprint(f1.__closure__[0].cell_contents)  #25  取出环境变量\nf1(2)   \nprint(f1(2))  #100   调用时 a 取 25\n```\n**非闭包**\n```\ndef f2():\n    a = 10\n    def f3():\n        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了\n        a = 20\n        print(a)\n    print(a)\n    f3()\n    print(a)\n\nf2()\n#首先运行f2() ,a=10，print(a)即为10\n#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量\n#最后print(a)即为10\n```\n**闭包**\n```\ndef f4():\n    a = 10\n    def f5():\n        c = 20 * a   #调用了 a=10\n    return f5\n\nf = f4()\nprint(f) #<function f4.<locals>.f5 at 0x0000015AF4F479D8>\nprint(f.__closure__)\n#(<cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540>,)\n```\n\n**闭包 只是一种思维方式，函数式编程**\n\n**闭包可以记忆上次调用的状态**\n\n**例题，origin 最初为0，累加计算**\n```\n#闭包模式\norigin = 0\n\ndef factory(pos):\n    def go(step):\n        nonlocal pos #pos不是本地局部变量\n        new_pos = pos +step\n        pos = new_pos\n        return new_pos\n    return go\n\ntourist = factory(origin)   #初始化为 0\nprint(tourist(2))    #即step为2\nprint(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值\nprint(tourist(3))\nprint(tourist.__closure__[0].cell_contents)#5\nprint(tourist(5))\nprint(tourist.__closure__[0].cell_contents)#10\nprint(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部\n```\n```\n#非闭包\norigin = 0\ndef go(step):\n    global origin   #定义一个全局变量\n    new_pos = origin + step\n    origin = new_pos\n    return new_pos\n\nprint(go(2))#2\nprint(origin)#2  #改变了全局变量的值\nprint(go(3))#5\nprint(origin)#5\nprint(go(5))#10\nprint(origin)#10\n```\n```\n#面向对象编程\nclass Tourist():\n    origin = 0\n    def pos(self,new_pos):\n        self.origin += new_pos\n\ntourist=Tourist()\nprint(tourist.origin)\ntourist.pos(2)\nprint(tourist.origin)\ntourist.pos(3)\nprint(tourist.origin)\ntourist.pos(5)\nprint(tourist.origin)\n```\n","source":"_posts/python基础/python之闭包.md","raw":"---\ntitle: (9) python之闭包\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**闭包**\n闭包 = 函数 + 环境变量(函数定义的时候)\n\n**一个最简单的闭包**\n```\ndef curve_pre():\n    def curve():\n        print('This is a function')\n    return curve\n\nf = curve_pre()\nf()   #This is a function\n```\n**闭包不受外部变量影响**\n```\ndef curve_pre1():\n    a = 25\n    def curve1(x):\n        return a*x**2\n    return curve1\n\n#闭包 = 函数 + 环境变量(函数定义的时候)\na = 20     #全局变量\nf1 = curve_pre1()\nprint(f1.__closure__)  \n #(<cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720>,)实质返回了一个闭包\nprint(f1.__closure__[0].cell_contents)  #25  取出环境变量\nf1(2)   \nprint(f1(2))  #100   调用时 a 取 25\n```\n**非闭包**\n```\ndef f2():\n    a = 10\n    def f3():\n        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了\n        a = 20\n        print(a)\n    print(a)\n    f3()\n    print(a)\n\nf2()\n#首先运行f2() ,a=10，print(a)即为10\n#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量\n#最后print(a)即为10\n```\n**闭包**\n```\ndef f4():\n    a = 10\n    def f5():\n        c = 20 * a   #调用了 a=10\n    return f5\n\nf = f4()\nprint(f) #<function f4.<locals>.f5 at 0x0000015AF4F479D8>\nprint(f.__closure__)\n#(<cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540>,)\n```\n\n**闭包 只是一种思维方式，函数式编程**\n\n**闭包可以记忆上次调用的状态**\n\n**例题，origin 最初为0，累加计算**\n```\n#闭包模式\norigin = 0\n\ndef factory(pos):\n    def go(step):\n        nonlocal pos #pos不是本地局部变量\n        new_pos = pos +step\n        pos = new_pos\n        return new_pos\n    return go\n\ntourist = factory(origin)   #初始化为 0\nprint(tourist(2))    #即step为2\nprint(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值\nprint(tourist(3))\nprint(tourist.__closure__[0].cell_contents)#5\nprint(tourist(5))\nprint(tourist.__closure__[0].cell_contents)#10\nprint(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部\n```\n```\n#非闭包\norigin = 0\ndef go(step):\n    global origin   #定义一个全局变量\n    new_pos = origin + step\n    origin = new_pos\n    return new_pos\n\nprint(go(2))#2\nprint(origin)#2  #改变了全局变量的值\nprint(go(3))#5\nprint(origin)#5\nprint(go(5))#10\nprint(origin)#10\n```\n```\n#面向对象编程\nclass Tourist():\n    origin = 0\n    def pos(self,new_pos):\n        self.origin += new_pos\n\ntourist=Tourist()\nprint(tourist.origin)\ntourist.pos(2)\nprint(tourist.origin)\ntourist.pos(3)\nprint(tourist.origin)\ntourist.pos(5)\nprint(tourist.origin)\n```\n","slug":"python基础/python之闭包","published":1,"updated":"2020-04-10T16:46:16.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtukw004t74uxptqrxneo","content":"<p><strong>闭包</strong><br>闭包 = 函数 + 环境变量(函数定义的时候)</p>\n<p><strong>一个最简单的闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre():</span><br><span class=\"line\">    def curve():</span><br><span class=\"line\">        print(&apos;This is a function&apos;)</span><br><span class=\"line\">    return curve</span><br><span class=\"line\"></span><br><span class=\"line\">f = curve_pre()</span><br><span class=\"line\">f()   #This is a function</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包不受外部变量影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre1():</span><br><span class=\"line\">    a = 25</span><br><span class=\"line\">    def curve1(x):</span><br><span class=\"line\">        return a*x**2</span><br><span class=\"line\">    return curve1</span><br><span class=\"line\"></span><br><span class=\"line\">#闭包 = 函数 + 环境变量(函数定义的时候)</span><br><span class=\"line\">a = 20     #全局变量</span><br><span class=\"line\">f1 = curve_pre1()</span><br><span class=\"line\">print(f1.__closure__)  </span><br><span class=\"line\"> #(&lt;cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720&gt;,)实质返回了一个闭包</span><br><span class=\"line\">print(f1.__closure__[0].cell_contents)  #25  取出环境变量</span><br><span class=\"line\">f1(2)   </span><br><span class=\"line\">print(f1(2))  #100   调用时 a 取 25</span><br></pre></td></tr></table></figure></p>\n<p><strong>非闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f2():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f3():</span><br><span class=\"line\">        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了</span><br><span class=\"line\">        a = 20</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    f3()</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br><span class=\"line\">#首先运行f2() ,a=10，print(a)即为10</span><br><span class=\"line\">#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量</span><br><span class=\"line\">#最后print(a)即为10</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f4():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f5():</span><br><span class=\"line\">        c = 20 * a   #调用了 a=10</span><br><span class=\"line\">    return f5</span><br><span class=\"line\"></span><br><span class=\"line\">f = f4()</span><br><span class=\"line\">print(f) #&lt;function f4.&lt;locals&gt;.f5 at 0x0000015AF4F479D8&gt;</span><br><span class=\"line\">print(f.__closure__)</span><br><span class=\"line\">#(&lt;cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540&gt;,)</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包 只是一种思维方式，函数式编程</strong></p>\n<p><strong>闭包可以记忆上次调用的状态</strong></p>\n<p><strong>例题，origin 最初为0，累加计算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包模式</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\"></span><br><span class=\"line\">def factory(pos):</span><br><span class=\"line\">    def go(step):</span><br><span class=\"line\">        nonlocal pos #pos不是本地局部变量</span><br><span class=\"line\">        new_pos = pos +step</span><br><span class=\"line\">        pos = new_pos</span><br><span class=\"line\">        return new_pos</span><br><span class=\"line\">    return go</span><br><span class=\"line\"></span><br><span class=\"line\">tourist = factory(origin)   #初始化为 0</span><br><span class=\"line\">print(tourist(2))    #即step为2</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值</span><br><span class=\"line\">print(tourist(3))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#5</span><br><span class=\"line\">print(tourist(5))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#10</span><br><span class=\"line\">print(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#非闭包</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\">def go(step):</span><br><span class=\"line\">    global origin   #定义一个全局变量</span><br><span class=\"line\">    new_pos = origin + step</span><br><span class=\"line\">    origin = new_pos</span><br><span class=\"line\">    return new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">print(go(2))#2</span><br><span class=\"line\">print(origin)#2  #改变了全局变量的值</span><br><span class=\"line\">print(go(3))#5</span><br><span class=\"line\">print(origin)#5</span><br><span class=\"line\">print(go(5))#10</span><br><span class=\"line\">print(origin)#10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#面向对象编程</span><br><span class=\"line\">class Tourist():</span><br><span class=\"line\">    origin = 0</span><br><span class=\"line\">    def pos(self,new_pos):</span><br><span class=\"line\">        self.origin += new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">tourist=Tourist()</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(2)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(3)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(5)</span><br><span class=\"line\">print(tourist.origin)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>闭包</strong><br>闭包 = 函数 + 环境变量(函数定义的时候)</p>\n<p><strong>一个最简单的闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre():</span><br><span class=\"line\">    def curve():</span><br><span class=\"line\">        print(&apos;This is a function&apos;)</span><br><span class=\"line\">    return curve</span><br><span class=\"line\"></span><br><span class=\"line\">f = curve_pre()</span><br><span class=\"line\">f()   #This is a function</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包不受外部变量影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre1():</span><br><span class=\"line\">    a = 25</span><br><span class=\"line\">    def curve1(x):</span><br><span class=\"line\">        return a*x**2</span><br><span class=\"line\">    return curve1</span><br><span class=\"line\"></span><br><span class=\"line\">#闭包 = 函数 + 环境变量(函数定义的时候)</span><br><span class=\"line\">a = 20     #全局变量</span><br><span class=\"line\">f1 = curve_pre1()</span><br><span class=\"line\">print(f1.__closure__)  </span><br><span class=\"line\"> #(&lt;cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720&gt;,)实质返回了一个闭包</span><br><span class=\"line\">print(f1.__closure__[0].cell_contents)  #25  取出环境变量</span><br><span class=\"line\">f1(2)   </span><br><span class=\"line\">print(f1(2))  #100   调用时 a 取 25</span><br></pre></td></tr></table></figure></p>\n<p><strong>非闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f2():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f3():</span><br><span class=\"line\">        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了</span><br><span class=\"line\">        a = 20</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    f3()</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br><span class=\"line\">#首先运行f2() ,a=10，print(a)即为10</span><br><span class=\"line\">#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量</span><br><span class=\"line\">#最后print(a)即为10</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f4():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f5():</span><br><span class=\"line\">        c = 20 * a   #调用了 a=10</span><br><span class=\"line\">    return f5</span><br><span class=\"line\"></span><br><span class=\"line\">f = f4()</span><br><span class=\"line\">print(f) #&lt;function f4.&lt;locals&gt;.f5 at 0x0000015AF4F479D8&gt;</span><br><span class=\"line\">print(f.__closure__)</span><br><span class=\"line\">#(&lt;cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540&gt;,)</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包 只是一种思维方式，函数式编程</strong></p>\n<p><strong>闭包可以记忆上次调用的状态</strong></p>\n<p><strong>例题，origin 最初为0，累加计算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包模式</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\"></span><br><span class=\"line\">def factory(pos):</span><br><span class=\"line\">    def go(step):</span><br><span class=\"line\">        nonlocal pos #pos不是本地局部变量</span><br><span class=\"line\">        new_pos = pos +step</span><br><span class=\"line\">        pos = new_pos</span><br><span class=\"line\">        return new_pos</span><br><span class=\"line\">    return go</span><br><span class=\"line\"></span><br><span class=\"line\">tourist = factory(origin)   #初始化为 0</span><br><span class=\"line\">print(tourist(2))    #即step为2</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值</span><br><span class=\"line\">print(tourist(3))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#5</span><br><span class=\"line\">print(tourist(5))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#10</span><br><span class=\"line\">print(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#非闭包</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\">def go(step):</span><br><span class=\"line\">    global origin   #定义一个全局变量</span><br><span class=\"line\">    new_pos = origin + step</span><br><span class=\"line\">    origin = new_pos</span><br><span class=\"line\">    return new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">print(go(2))#2</span><br><span class=\"line\">print(origin)#2  #改变了全局变量的值</span><br><span class=\"line\">print(go(3))#5</span><br><span class=\"line\">print(origin)#5</span><br><span class=\"line\">print(go(5))#10</span><br><span class=\"line\">print(origin)#10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#面向对象编程</span><br><span class=\"line\">class Tourist():</span><br><span class=\"line\">    origin = 0</span><br><span class=\"line\">    def pos(self,new_pos):</span><br><span class=\"line\">        self.origin += new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">tourist=Tourist()</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(2)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(3)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(5)</span><br><span class=\"line\">print(tourist.origin)</span><br></pre></td></tr></table></figure>\n"},{"title":"(2) python基本数据类型总结","date":"2018-11-14T13:58:19.000Z","_content":"\n![python基本数据类型总结](https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**整数int与浮点数float**\n整数运算永远是精确的，浮点数的运算可能会有四舍五入。\n2/2结果为1.0\n// 表示整除   2//2结果为1   \n3//2也是1  并不是四舍五入，而是只保留整数部分\n1.23x10^9和 12.3x10^8相等\n1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5\n**进制**\npython中默认为10进制。\n2进制用0b表示，例如0b10即为2。\n8进制用0o表示，例如0o10即为8。\n16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)\n```\nbin()  #转化为2进制\noct()  #转化为8进制\nint()  #转化为10进制\nhex()  #转化为16进制\n```\n**布尔值bool**\n```\nbool()\nbool(0)\nbool('')\nbool([])\nbool({})\nbool(None)\n```\n只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True\n\n**序列**\n字符串 str  可用单引号，双引号或者三引号表示例如'str' 或\"str \"或者'''str'''\n\n其中三引号常用方式如下\n```\n'''\nline1\nline2\n  .\n  .\n'''\n```\n在字符串前面加一个R/r 表示原始字符串\n```\nprint(r'\\t\\r')   #  \\t\\r\n```\n一些转义字符（特殊的字符）\n```\n\\n          #换行       无法“看见”的字符\n\\'           #单引号   与语言本身有冲突的字符\n\\t          #横向制表符\n\\r          #回车\n\\n         #换行\n\\\\          #表示\\\n```\n元组 tuple  ( )与列表list  [ ]\n\n元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)\n```\na = 'hello'\na=a+'world'\nprint(a)  #'helloworld'    a变成了一个新的字符串，而不是改变了字符串\n\n#列表可变\nb=[1,2,3]\nb.append(4)\nprint(b)  #[1,2,3,4]\n\n#改变的是列表不是元组\nc =  (1,2,3,[4,5,['a','b','c']])\nc[3][2][1] = 'd'\nc[3][0]='6'\nc[3][1]=7\n#c[2]=8   #会报错，因为元组不能被改变'tuple' object does not support item assignment\nprint(c)  #(1, 2, 3, ['6', 7, ['a', 'd', 'c']])  改变的是列表  而不是 元组\n ```\n在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。\n```\n#元组\n(1,2,3) \n((1,2,3),(4,'hello',True))\n(1,2,[3,4],{5,6},{(1,2,3):10,'hello':11,100:'hello'})\n()   #空元组\n(1,)  #一个元素的元组\n#列表\n[1,2,3]\n[[1,2,3],[4,'hello',True],(1,2,3),{7,8}{(1,2,3):10,'hello':11,100:'hello'}]\n```\n\n\n序列可以进行加法，与整数相乘，切片操作\n```\n#与整数相乘\n'python'*3   # 'pythonpythonpython'\n((1,2,3),(4,'hello',True))*2  # ((1, 2, 3), (4, 'hello', True), (1, 2, 3), (4, 'hello', True))\n[[1,2,3],[4,'hello',True],(1,2,3)]*2 #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), [1, 2, 3], [4, 'hello', True], (1, 2, 3)]\n#同类型相加\n'hello'+'world'   # 'helloword'\n((1,2,3),(4,'hello',True))+(7,8,9)  #((1, 2, 3), (4, 'hello', True), 7, 8, 9)\n[[1,2,3],[4,'hello',True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), 4, 5, 6]\n#切片\n'hello world'[0]       # 'h'   从0开始\n'hello world'[-1]      # 'd'   从末尾往前数1\n'hello world'[1:4]    # 'ell'  从1开始，4前一位结束\n'hello world'[0:-2]    # 'hello wor'  从开头到末尾减去2位\n'hello world'[:-5]     # 'hello '  从开头到末尾减去5个字符  \n'hello world'[1:-2]   #'ello wor'    从1到末尾减去2位\n'hello world'[6:100]    # 'world'  超过，从第6位取到末尾\n'hello world'[6:]     # 'world'  从第6位取得末尾\n'hello world'[-1:2]   #'’‘  空字符串，不能这样做\n```\n**集合set {}和字典dict {}**\n集合和字典的特点是   **无序，不重复**\nset()表示空集合\n{}  表示空字典\n```\n-   #可以用来求两个集合的差集\n+  #可以用来求两个集合的交集\n|   #可以用来求两个集合的合集\n```\n字典是通过key访问value{key1:value1,key2:value2}\nkey**不能重复,类型为int,str，tuple**\nvalue可以为任意数据\n","source":"_posts/python基础/python基本数据类型总结.md","raw":"---\ntitle: (2) python基本数据类型总结\ndate: 2018-11-14 21:58:19\ntags:\ncategories: python基础\n---\n\n![python基本数据类型总结](https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**整数int与浮点数float**\n整数运算永远是精确的，浮点数的运算可能会有四舍五入。\n2/2结果为1.0\n// 表示整除   2//2结果为1   \n3//2也是1  并不是四舍五入，而是只保留整数部分\n1.23x10^9和 12.3x10^8相等\n1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5\n**进制**\npython中默认为10进制。\n2进制用0b表示，例如0b10即为2。\n8进制用0o表示，例如0o10即为8。\n16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)\n```\nbin()  #转化为2进制\noct()  #转化为8进制\nint()  #转化为10进制\nhex()  #转化为16进制\n```\n**布尔值bool**\n```\nbool()\nbool(0)\nbool('')\nbool([])\nbool({})\nbool(None)\n```\n只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True\n\n**序列**\n字符串 str  可用单引号，双引号或者三引号表示例如'str' 或\"str \"或者'''str'''\n\n其中三引号常用方式如下\n```\n'''\nline1\nline2\n  .\n  .\n'''\n```\n在字符串前面加一个R/r 表示原始字符串\n```\nprint(r'\\t\\r')   #  \\t\\r\n```\n一些转义字符（特殊的字符）\n```\n\\n          #换行       无法“看见”的字符\n\\'           #单引号   与语言本身有冲突的字符\n\\t          #横向制表符\n\\r          #回车\n\\n         #换行\n\\\\          #表示\\\n```\n元组 tuple  ( )与列表list  [ ]\n\n元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)\n```\na = 'hello'\na=a+'world'\nprint(a)  #'helloworld'    a变成了一个新的字符串，而不是改变了字符串\n\n#列表可变\nb=[1,2,3]\nb.append(4)\nprint(b)  #[1,2,3,4]\n\n#改变的是列表不是元组\nc =  (1,2,3,[4,5,['a','b','c']])\nc[3][2][1] = 'd'\nc[3][0]='6'\nc[3][1]=7\n#c[2]=8   #会报错，因为元组不能被改变'tuple' object does not support item assignment\nprint(c)  #(1, 2, 3, ['6', 7, ['a', 'd', 'c']])  改变的是列表  而不是 元组\n ```\n在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。\n```\n#元组\n(1,2,3) \n((1,2,3),(4,'hello',True))\n(1,2,[3,4],{5,6},{(1,2,3):10,'hello':11,100:'hello'})\n()   #空元组\n(1,)  #一个元素的元组\n#列表\n[1,2,3]\n[[1,2,3],[4,'hello',True],(1,2,3),{7,8}{(1,2,3):10,'hello':11,100:'hello'}]\n```\n\n\n序列可以进行加法，与整数相乘，切片操作\n```\n#与整数相乘\n'python'*3   # 'pythonpythonpython'\n((1,2,3),(4,'hello',True))*2  # ((1, 2, 3), (4, 'hello', True), (1, 2, 3), (4, 'hello', True))\n[[1,2,3],[4,'hello',True],(1,2,3)]*2 #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), [1, 2, 3], [4, 'hello', True], (1, 2, 3)]\n#同类型相加\n'hello'+'world'   # 'helloword'\n((1,2,3),(4,'hello',True))+(7,8,9)  #((1, 2, 3), (4, 'hello', True), 7, 8, 9)\n[[1,2,3],[4,'hello',True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), 4, 5, 6]\n#切片\n'hello world'[0]       # 'h'   从0开始\n'hello world'[-1]      # 'd'   从末尾往前数1\n'hello world'[1:4]    # 'ell'  从1开始，4前一位结束\n'hello world'[0:-2]    # 'hello wor'  从开头到末尾减去2位\n'hello world'[:-5]     # 'hello '  从开头到末尾减去5个字符  \n'hello world'[1:-2]   #'ello wor'    从1到末尾减去2位\n'hello world'[6:100]    # 'world'  超过，从第6位取到末尾\n'hello world'[6:]     # 'world'  从第6位取得末尾\n'hello world'[-1:2]   #'’‘  空字符串，不能这样做\n```\n**集合set {}和字典dict {}**\n集合和字典的特点是   **无序，不重复**\nset()表示空集合\n{}  表示空字典\n```\n-   #可以用来求两个集合的差集\n+  #可以用来求两个集合的交集\n|   #可以用来求两个集合的合集\n```\n字典是通过key访问value{key1:value1,key2:value2}\nkey**不能重复,类型为int,str，tuple**\nvalue可以为任意数据\n","slug":"python基础/python基本数据类型总结","published":1,"updated":"2020-04-10T16:46:16.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtul2004w74ux4gvv0ilq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python基本数据类型总结\"><br><strong>整数int与浮点数float</strong><br>整数运算永远是精确的，浮点数的运算可能会有四舍五入。<br>2/2结果为1.0<br>// 表示整除   2//2结果为1<br>3//2也是1  并不是四舍五入，而是只保留整数部分<br>1.23x10^9和 12.3x10^8相等<br>1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5<br><strong>进制</strong><br>python中默认为10进制。<br>2进制用0b表示，例如0b10即为2。<br>8进制用0o表示，例如0o10即为8。<br>16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin()  #转化为2进制</span><br><span class=\"line\">oct()  #转化为8进制</span><br><span class=\"line\">int()  #转化为10进制</span><br><span class=\"line\">hex()  #转化为16进制</span><br></pre></td></tr></table></figure></p>\n<p><strong>布尔值bool</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool()</span><br><span class=\"line\">bool(0)</span><br><span class=\"line\">bool(&apos;&apos;)</span><br><span class=\"line\">bool([])</span><br><span class=\"line\">bool(&#123;&#125;)</span><br><span class=\"line\">bool(None)</span><br></pre></td></tr></table></figure></p>\n<p>只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True</p>\n<p><strong>序列</strong><br>字符串 str  可用单引号，双引号或者三引号表示例如’str’ 或”str “或者’’’str’’’</p>\n<p>其中三引号常用方式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在字符串前面加一个R/r 表示原始字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&apos;\\t\\r&apos;)   #  \\t\\r</span><br></pre></td></tr></table></figure></p>\n<p>一些转义字符（特殊的字符）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\n          #换行       无法“看见”的字符</span><br><span class=\"line\">\\&apos;           #单引号   与语言本身有冲突的字符</span><br><span class=\"line\">\\t          #横向制表符</span><br><span class=\"line\">\\r          #回车</span><br><span class=\"line\">\\n         #换行</span><br><span class=\"line\">\\\\          #表示\\</span><br></pre></td></tr></table></figure></p>\n<p>元组 tuple  ( )与列表list  [ ]</p>\n<p>元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &apos;hello&apos;</span><br><span class=\"line\">a=a+&apos;world&apos;</span><br><span class=\"line\">print(a)  #&apos;helloworld&apos;    a变成了一个新的字符串，而不是改变了字符串</span><br><span class=\"line\"></span><br><span class=\"line\">#列表可变</span><br><span class=\"line\">b=[1,2,3]</span><br><span class=\"line\">b.append(4)</span><br><span class=\"line\">print(b)  #[1,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">#改变的是列表不是元组</span><br><span class=\"line\">c =  (1,2,3,[4,5,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]])</span><br><span class=\"line\">c[3][2][1] = &apos;d&apos;</span><br><span class=\"line\">c[3][0]=&apos;6&apos;</span><br><span class=\"line\">c[3][1]=7</span><br><span class=\"line\">#c[2]=8   #会报错，因为元组不能被改变&apos;tuple&apos; object does not support item assignment</span><br><span class=\"line\">print(c)  #(1, 2, 3, [&apos;6&apos;, 7, [&apos;a&apos;, &apos;d&apos;, &apos;c&apos;]])  改变的是列表  而不是 元组</span><br></pre></td></tr></table></figure></p>\n<p>在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#元组</span><br><span class=\"line\">(1,2,3) </span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))</span><br><span class=\"line\">(1,2,[3,4],&#123;5,6&#125;,&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;)</span><br><span class=\"line\">()   #空元组</span><br><span class=\"line\">(1,)  #一个元素的元组</span><br><span class=\"line\">#列表</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3),&#123;7,8&#125;&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>序列可以进行加法，与整数相乘，切片操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#与整数相乘</span><br><span class=\"line\">&apos;python&apos;*3   # &apos;pythonpythonpython&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))*2  # ((1, 2, 3), (4, &apos;hello&apos;, True), (1, 2, 3), (4, &apos;hello&apos;, True))</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]*2 #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), [1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3)]</span><br><span class=\"line\">#同类型相加</span><br><span class=\"line\">&apos;hello&apos;+&apos;world&apos;   # &apos;helloword&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))+(7,8,9)  #((1, 2, 3), (4, &apos;hello&apos;, True), 7, 8, 9)</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), 4, 5, 6]</span><br><span class=\"line\">#切片</span><br><span class=\"line\">&apos;hello world&apos;[0]       # &apos;h&apos;   从0开始</span><br><span class=\"line\">&apos;hello world&apos;[-1]      # &apos;d&apos;   从末尾往前数1</span><br><span class=\"line\">&apos;hello world&apos;[1:4]    # &apos;ell&apos;  从1开始，4前一位结束</span><br><span class=\"line\">&apos;hello world&apos;[0:-2]    # &apos;hello wor&apos;  从开头到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[:-5]     # &apos;hello &apos;  从开头到末尾减去5个字符  </span><br><span class=\"line\">&apos;hello world&apos;[1:-2]   #&apos;ello wor&apos;    从1到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[6:100]    # &apos;world&apos;  超过，从第6位取到末尾</span><br><span class=\"line\">&apos;hello world&apos;[6:]     # &apos;world&apos;  从第6位取得末尾</span><br><span class=\"line\">&apos;hello world&apos;[-1:2]   #&apos;’‘  空字符串，不能这样做</span><br></pre></td></tr></table></figure></p>\n<p><strong>集合set {}和字典dict {}</strong><br>集合和字典的特点是   <strong>无序，不重复</strong><br>set()表示空集合<br>{}  表示空字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   #可以用来求两个集合的差集</span><br><span class=\"line\">+  #可以用来求两个集合的交集</span><br><span class=\"line\">|   #可以用来求两个集合的合集</span><br></pre></td></tr></table></figure></p>\n<p>字典是通过key访问value{key1:value1,key2:value2}<br>key<strong>不能重复,类型为int,str，tuple</strong><br>value可以为任意数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python基本数据类型总结\"><br><strong>整数int与浮点数float</strong><br>整数运算永远是精确的，浮点数的运算可能会有四舍五入。<br>2/2结果为1.0<br>// 表示整除   2//2结果为1<br>3//2也是1  并不是四舍五入，而是只保留整数部分<br>1.23x10^9和 12.3x10^8相等<br>1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5<br><strong>进制</strong><br>python中默认为10进制。<br>2进制用0b表示，例如0b10即为2。<br>8进制用0o表示，例如0o10即为8。<br>16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin()  #转化为2进制</span><br><span class=\"line\">oct()  #转化为8进制</span><br><span class=\"line\">int()  #转化为10进制</span><br><span class=\"line\">hex()  #转化为16进制</span><br></pre></td></tr></table></figure></p>\n<p><strong>布尔值bool</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool()</span><br><span class=\"line\">bool(0)</span><br><span class=\"line\">bool(&apos;&apos;)</span><br><span class=\"line\">bool([])</span><br><span class=\"line\">bool(&#123;&#125;)</span><br><span class=\"line\">bool(None)</span><br></pre></td></tr></table></figure></p>\n<p>只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True</p>\n<p><strong>序列</strong><br>字符串 str  可用单引号，双引号或者三引号表示例如’str’ 或”str “或者’’’str’’’</p>\n<p>其中三引号常用方式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在字符串前面加一个R/r 表示原始字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&apos;\\t\\r&apos;)   #  \\t\\r</span><br></pre></td></tr></table></figure></p>\n<p>一些转义字符（特殊的字符）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\n          #换行       无法“看见”的字符</span><br><span class=\"line\">\\&apos;           #单引号   与语言本身有冲突的字符</span><br><span class=\"line\">\\t          #横向制表符</span><br><span class=\"line\">\\r          #回车</span><br><span class=\"line\">\\n         #换行</span><br><span class=\"line\">\\\\          #表示\\</span><br></pre></td></tr></table></figure></p>\n<p>元组 tuple  ( )与列表list  [ ]</p>\n<p>元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &apos;hello&apos;</span><br><span class=\"line\">a=a+&apos;world&apos;</span><br><span class=\"line\">print(a)  #&apos;helloworld&apos;    a变成了一个新的字符串，而不是改变了字符串</span><br><span class=\"line\"></span><br><span class=\"line\">#列表可变</span><br><span class=\"line\">b=[1,2,3]</span><br><span class=\"line\">b.append(4)</span><br><span class=\"line\">print(b)  #[1,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">#改变的是列表不是元组</span><br><span class=\"line\">c =  (1,2,3,[4,5,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]])</span><br><span class=\"line\">c[3][2][1] = &apos;d&apos;</span><br><span class=\"line\">c[3][0]=&apos;6&apos;</span><br><span class=\"line\">c[3][1]=7</span><br><span class=\"line\">#c[2]=8   #会报错，因为元组不能被改变&apos;tuple&apos; object does not support item assignment</span><br><span class=\"line\">print(c)  #(1, 2, 3, [&apos;6&apos;, 7, [&apos;a&apos;, &apos;d&apos;, &apos;c&apos;]])  改变的是列表  而不是 元组</span><br></pre></td></tr></table></figure></p>\n<p>在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#元组</span><br><span class=\"line\">(1,2,3) </span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))</span><br><span class=\"line\">(1,2,[3,4],&#123;5,6&#125;,&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;)</span><br><span class=\"line\">()   #空元组</span><br><span class=\"line\">(1,)  #一个元素的元组</span><br><span class=\"line\">#列表</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3),&#123;7,8&#125;&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>序列可以进行加法，与整数相乘，切片操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#与整数相乘</span><br><span class=\"line\">&apos;python&apos;*3   # &apos;pythonpythonpython&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))*2  # ((1, 2, 3), (4, &apos;hello&apos;, True), (1, 2, 3), (4, &apos;hello&apos;, True))</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]*2 #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), [1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3)]</span><br><span class=\"line\">#同类型相加</span><br><span class=\"line\">&apos;hello&apos;+&apos;world&apos;   # &apos;helloword&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))+(7,8,9)  #((1, 2, 3), (4, &apos;hello&apos;, True), 7, 8, 9)</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), 4, 5, 6]</span><br><span class=\"line\">#切片</span><br><span class=\"line\">&apos;hello world&apos;[0]       # &apos;h&apos;   从0开始</span><br><span class=\"line\">&apos;hello world&apos;[-1]      # &apos;d&apos;   从末尾往前数1</span><br><span class=\"line\">&apos;hello world&apos;[1:4]    # &apos;ell&apos;  从1开始，4前一位结束</span><br><span class=\"line\">&apos;hello world&apos;[0:-2]    # &apos;hello wor&apos;  从开头到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[:-5]     # &apos;hello &apos;  从开头到末尾减去5个字符  </span><br><span class=\"line\">&apos;hello world&apos;[1:-2]   #&apos;ello wor&apos;    从1到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[6:100]    # &apos;world&apos;  超过，从第6位取到末尾</span><br><span class=\"line\">&apos;hello world&apos;[6:]     # &apos;world&apos;  从第6位取得末尾</span><br><span class=\"line\">&apos;hello world&apos;[-1:2]   #&apos;’‘  空字符串，不能这样做</span><br></pre></td></tr></table></figure></p>\n<p><strong>集合set {}和字典dict {}</strong><br>集合和字典的特点是   <strong>无序，不重复</strong><br>set()表示空集合<br>{}  表示空字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   #可以用来求两个集合的差集</span><br><span class=\"line\">+  #可以用来求两个集合的交集</span><br><span class=\"line\">|   #可以用来求两个集合的合集</span><br></pre></td></tr></table></figure></p>\n<p>字典是通过key访问value{key1:value1,key2:value2}<br>key<strong>不能重复,类型为int,str，tuple</strong><br>value可以为任意数据</p>\n"},{"title":"(18) python异常","date":"2018-11-14T14:07:26.000Z","_content":"###  异常\n\n####  异常的概念\n\n*   程序在运行时，如果 `Python 解释器` **遇到** 到一个错误，**会停止程序的执行，并且提示一些错误信息**，这就是 **异常**\n*   **程序停止执行并且提示错误信息** 这个动作，我们通常称之为：**抛出(raise)异常**\n\n> 程序开发时，很难将 **所有的特殊情况** 都处理的面面俱到，通过 **异常捕获** 可以针对突发事件做集中的处理，从而保证程序的 **稳定性和健壮性**\n> \n> [图片上传失败...(image-81f29f-1542201966094)]\n\n####  捕获异常：`try except else finally`\n\n**简单的捕获异常语法**\n\n*   在程序开发中，如果 **对某些代码的执行不能确定是否正确**，可以增加 `try(尝试)` 来 **捕获异常**\n\n```\ntry:\n    尝试执行的代码\nexcept:\n    出现错误的处理\n\n```\n\n*   `try` **尝试**，下方编写要尝试代码，不确定是否能够正常执行的代码\n*   `except` **如果不是**，下方编写尝试失败的代码\n\n**简单异常捕获1 —— 要求用户输入整数**\n\n```\ntry:\n    # 提示用户输入一个数字\n    num = int(input(\"请输入数字：\"))\nexcept:\n    print(\"请输入正确的数字\")\n\n```\n\n**错误类型捕获**\n\n*   在程序执行时，可能会遇到 **不同类型的异常**，并且需要 **针对不同类型的异常，做出不同的响应**，这个时候，就需要捕获错误类型了\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept (错误类型2, 错误类型3):\n    # 针对错误类型2 和 3，对应的代码处理\n    pass\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n*   当 `Python` 解释器 **抛出异常** 时，**最后一行错误信息的第一个单词，就是错误类型**\n\n**异常类型捕获2 —— 要求用户输入整数**\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\n```\n\n**捕获未知错误**\n\n*   在开发时，**要预判到所有可能出现的错误**，还是有一定难度的\n*   如果希望程序 **无论出现任何错误**，都不会因为 `Python` 解释器 **抛出异常而被终止**，可以再增加一个 `except`\n\n语法如下：\n\n```\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n```\n\n**异常捕获完整语法**\n\n*   在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept 错误类型2:\n    # 针对错误类型2，对应的代码处理\n    pass\nexcept (错误类型3, 错误类型4):\n    # 针对错误类型3 和 4，对应的代码处理\n    pass\nexcept Exception as result:\n    # 打印错误信息\n    print(result)\nelse:\n    # 没有异常才会执行的代码\n    pass\nfinally:\n    # 无论是否有异常，都会执行的代码\n    print(\"无论是否有异常，都会执行的代码\")\n\n```\n\n*   `else` 只有在没有异常时才会执行的代码\n\n*   `finally` 无论是否有异常，都会执行的代码\n\n*   之前一个演练的 **完整捕获异常** 的代码如下：\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\nelse:\n    print(\"正常执行\")\nfinally:\n    print(\"执行完成，但是不保证正确\")\n```\n\n#### 异常的传递\n\n*   **异常的传递** —— 当 **函数/方法** 执行 **出现异常**，会 **将异常传递** 给 函数/方法 的 **调用一方**\n*   如果 **传递到主程序**，仍然 **没有异常处理**，程序才会被终止\n\n> 提示：\n> \n> *   在开发中，可以在主函数中增加 **异常捕获**，而在主函数中调用的其他函数，只要出现异常，**都会传递到主函数**的异常捕获中\n> *   这样就不需要在代码中，增加大量的异常捕获，能够**保证代码的整洁**\n\n```\n'''\n需求:\n1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**\n2\\.  定义函数 `demo2()` 调用 `demo1()`\n3\\.  在主程序中调用 `demo2()`\n'''\ndef demo1():\n    return int(input(\"请输入一个整数：\"))\n\ndef demo2():\n    return demo1()\n\ntry:\n    print(demo2())\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n####  抛出异常： `raise`\n\n**应用场景**\n\n*   在开发中，除了 **代码执行出错** `Python` 解释器会 **抛出** 异常之外\n*   还可以根据 **应用程序** **特有的业务需求** **主动抛出异常**\n\n**示例**\n\n*   提示用户 **输入密码**，如果 **长度少于 8**，抛出 **异常**\n\n    [图片上传失败...(image-3d2a0b-1542201966092)]\n\n**抛出异常**\n\n*   `Python` 中提供了一个 `Exception` **异常类**\n*   在开发时，如果满足 **特定业务需求时**，希望 **抛出异常**，由**其他需要处理的函数捕获异常**，可以：\n    1.  **创建** 一个 `Exception` 的 **对象**\n    2.  使用 `raise` **关键字** 抛出 **异常对象**\n\n```\n'''\n**需求**\n\n*   定义 `input_password` 函数，提示用户输入密码\n*   如果用户输入长度 < 8，抛出异常\n*   如果用户输入长度 >=8，返回输入的密码\n'''\ndef input_password():\n\n    # 1\\. 提示用户输入密码\n    pwd = input(\"请输入密码：\")\n\n    # 2\\. 判断密码长度，如果长度 >= 8，返回用户输入的密码\n    if len(pwd) >= 8:\n        return pwd\n\n    # 3\\. 密码长度不够，需要抛出异常\n    # 1> 创建异常对象 - 使用异常的错误信息字符串作为参数\n    ex = Exception(\"密码长度不够\")\n\n    # 2> 抛出异常对象\n    raise ex\n\ntry:\n    user_pwd = input_password()\n    print(user_pwd)\nexcept Exception as result:\n    print(\"发现错误：%s\" % result)\n```\n参考文章：\nhttps://www.jianshu.com/p/ebc19de7a204","source":"_posts/python基础/python异常.md","raw":"---\ntitle: (18) python异常\ndate: 2018-11-14 22:07:26\ntags:\ncategories: python基础\n---\n###  异常\n\n####  异常的概念\n\n*   程序在运行时，如果 `Python 解释器` **遇到** 到一个错误，**会停止程序的执行，并且提示一些错误信息**，这就是 **异常**\n*   **程序停止执行并且提示错误信息** 这个动作，我们通常称之为：**抛出(raise)异常**\n\n> 程序开发时，很难将 **所有的特殊情况** 都处理的面面俱到，通过 **异常捕获** 可以针对突发事件做集中的处理，从而保证程序的 **稳定性和健壮性**\n> \n> [图片上传失败...(image-81f29f-1542201966094)]\n\n####  捕获异常：`try except else finally`\n\n**简单的捕获异常语法**\n\n*   在程序开发中，如果 **对某些代码的执行不能确定是否正确**，可以增加 `try(尝试)` 来 **捕获异常**\n\n```\ntry:\n    尝试执行的代码\nexcept:\n    出现错误的处理\n\n```\n\n*   `try` **尝试**，下方编写要尝试代码，不确定是否能够正常执行的代码\n*   `except` **如果不是**，下方编写尝试失败的代码\n\n**简单异常捕获1 —— 要求用户输入整数**\n\n```\ntry:\n    # 提示用户输入一个数字\n    num = int(input(\"请输入数字：\"))\nexcept:\n    print(\"请输入正确的数字\")\n\n```\n\n**错误类型捕获**\n\n*   在程序执行时，可能会遇到 **不同类型的异常**，并且需要 **针对不同类型的异常，做出不同的响应**，这个时候，就需要捕获错误类型了\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept (错误类型2, 错误类型3):\n    # 针对错误类型2 和 3，对应的代码处理\n    pass\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n*   当 `Python` 解释器 **抛出异常** 时，**最后一行错误信息的第一个单词，就是错误类型**\n\n**异常类型捕获2 —— 要求用户输入整数**\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\n```\n\n**捕获未知错误**\n\n*   在开发时，**要预判到所有可能出现的错误**，还是有一定难度的\n*   如果希望程序 **无论出现任何错误**，都不会因为 `Python` 解释器 **抛出异常而被终止**，可以再增加一个 `except`\n\n语法如下：\n\n```\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n```\n\n**异常捕获完整语法**\n\n*   在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept 错误类型2:\n    # 针对错误类型2，对应的代码处理\n    pass\nexcept (错误类型3, 错误类型4):\n    # 针对错误类型3 和 4，对应的代码处理\n    pass\nexcept Exception as result:\n    # 打印错误信息\n    print(result)\nelse:\n    # 没有异常才会执行的代码\n    pass\nfinally:\n    # 无论是否有异常，都会执行的代码\n    print(\"无论是否有异常，都会执行的代码\")\n\n```\n\n*   `else` 只有在没有异常时才会执行的代码\n\n*   `finally` 无论是否有异常，都会执行的代码\n\n*   之前一个演练的 **完整捕获异常** 的代码如下：\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\nelse:\n    print(\"正常执行\")\nfinally:\n    print(\"执行完成，但是不保证正确\")\n```\n\n#### 异常的传递\n\n*   **异常的传递** —— 当 **函数/方法** 执行 **出现异常**，会 **将异常传递** 给 函数/方法 的 **调用一方**\n*   如果 **传递到主程序**，仍然 **没有异常处理**，程序才会被终止\n\n> 提示：\n> \n> *   在开发中，可以在主函数中增加 **异常捕获**，而在主函数中调用的其他函数，只要出现异常，**都会传递到主函数**的异常捕获中\n> *   这样就不需要在代码中，增加大量的异常捕获，能够**保证代码的整洁**\n\n```\n'''\n需求:\n1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**\n2\\.  定义函数 `demo2()` 调用 `demo1()`\n3\\.  在主程序中调用 `demo2()`\n'''\ndef demo1():\n    return int(input(\"请输入一个整数：\"))\n\ndef demo2():\n    return demo1()\n\ntry:\n    print(demo2())\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n####  抛出异常： `raise`\n\n**应用场景**\n\n*   在开发中，除了 **代码执行出错** `Python` 解释器会 **抛出** 异常之外\n*   还可以根据 **应用程序** **特有的业务需求** **主动抛出异常**\n\n**示例**\n\n*   提示用户 **输入密码**，如果 **长度少于 8**，抛出 **异常**\n\n    [图片上传失败...(image-3d2a0b-1542201966092)]\n\n**抛出异常**\n\n*   `Python` 中提供了一个 `Exception` **异常类**\n*   在开发时，如果满足 **特定业务需求时**，希望 **抛出异常**，由**其他需要处理的函数捕获异常**，可以：\n    1.  **创建** 一个 `Exception` 的 **对象**\n    2.  使用 `raise` **关键字** 抛出 **异常对象**\n\n```\n'''\n**需求**\n\n*   定义 `input_password` 函数，提示用户输入密码\n*   如果用户输入长度 < 8，抛出异常\n*   如果用户输入长度 >=8，返回输入的密码\n'''\ndef input_password():\n\n    # 1\\. 提示用户输入密码\n    pwd = input(\"请输入密码：\")\n\n    # 2\\. 判断密码长度，如果长度 >= 8，返回用户输入的密码\n    if len(pwd) >= 8:\n        return pwd\n\n    # 3\\. 密码长度不够，需要抛出异常\n    # 1> 创建异常对象 - 使用异常的错误信息字符串作为参数\n    ex = Exception(\"密码长度不够\")\n\n    # 2> 抛出异常对象\n    raise ex\n\ntry:\n    user_pwd = input_password()\n    print(user_pwd)\nexcept Exception as result:\n    print(\"发现错误：%s\" % result)\n```\n参考文章：\nhttps://www.jianshu.com/p/ebc19de7a204","slug":"python基础/python异常","published":1,"updated":"2020-04-10T16:46:16.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtul7004x74uxyzcaz94w","content":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><h4 id=\"异常的概念\"><a href=\"#异常的概念\" class=\"headerlink\" title=\"异常的概念\"></a>异常的概念</h4><ul>\n<li>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>\n<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>\n</ul>\n<blockquote>\n<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>\n<p>[图片上传失败…(image-81f29f-1542201966094)]</p>\n</blockquote>\n<h4 id=\"捕获异常：try-except-else-finally\"><a href=\"#捕获异常：try-except-else-finally\" class=\"headerlink\" title=\"捕获异常：try except else finally\"></a>捕获异常：<code>try except else finally</code></h4><p><strong>简单的捕获异常语法</strong></p>\n<ul>\n<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    尝试执行的代码</span><br><span class=\"line\">except:</span><br><span class=\"line\">    出现错误的处理</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>\n<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>\n</ul>\n<p><strong>简单异常捕获1 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 提示用户输入一个数字</span><br><span class=\"line\">    num = int(input(&quot;请输入数字：&quot;))</span><br><span class=\"line\">except:</span><br><span class=\"line\">    print(&quot;请输入正确的数字&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>错误类型捕获</strong></p>\n<ul>\n<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型2, 错误类型3):</span><br><span class=\"line\">    # 针对错误类型2 和 3，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>\n</ul>\n<p><strong>异常类型捕获2 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>捕获未知错误</strong></p>\n<ul>\n<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>\n<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p><strong>异常捕获完整语法</strong></p>\n<ul>\n<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型2:</span><br><span class=\"line\">    # 针对错误类型2，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型3, 错误类型4):</span><br><span class=\"line\">    # 针对错误类型3 和 4，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    # 打印错误信息</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # 没有异常才会执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 无论是否有异常，都会执行的代码</span><br><span class=\"line\">    print(&quot;无论是否有异常，都会执行的代码&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>else</code> 只有在没有异常时才会执行的代码</p>\n</li>\n<li><p><code>finally</code> 无论是否有异常，都会执行的代码</p>\n</li>\n<li><p>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;正常执行&quot;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;执行完成，但是不保证正确&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常的传递\"><a href=\"#异常的传递\" class=\"headerlink\" title=\"异常的传递\"></a>异常的传递</h4><ul>\n<li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></li>\n<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong>，而在主函数中调用的其他函数，只要出现异常，<strong>都会传递到主函数</strong>的异常捕获中</li>\n<li>这样就不需要在代码中，增加大量的异常捕获，能够<strong>保证代码的整洁</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">需求:</span><br><span class=\"line\">1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**</span><br><span class=\"line\">2\\.  定义函数 `demo2()` 调用 `demo1()`</span><br><span class=\"line\">3\\.  在主程序中调用 `demo2()`</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def demo1():</span><br><span class=\"line\">    return int(input(&quot;请输入一个整数：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">def demo2():</span><br><span class=\"line\">    return demo1()</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(demo2())</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常：-raise\"><a href=\"#抛出异常：-raise\" class=\"headerlink\" title=\"抛出异常： raise\"></a>抛出异常： <code>raise</code></h4><p><strong>应用场景</strong></p>\n<ul>\n<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>\n<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>\n</ul>\n<p><strong>示例</strong></p>\n<ul>\n<li><p>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></p>\n<p>[图片上传失败…(image-3d2a0b-1542201966092)]</p>\n</li>\n</ul>\n<p><strong>抛出异常</strong></p>\n<ul>\n<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>\n<li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，由<strong>其他需要处理的函数捕获异常</strong>，可以：<ol>\n<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>\n<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">**需求**</span><br><span class=\"line\"></span><br><span class=\"line\">*   定义 `input_password` 函数，提示用户输入密码</span><br><span class=\"line\">*   如果用户输入长度 &lt; 8，抛出异常</span><br><span class=\"line\">*   如果用户输入长度 &gt;=8，返回输入的密码</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def input_password():</span><br><span class=\"line\"></span><br><span class=\"line\">    # 1\\. 提示用户输入密码</span><br><span class=\"line\">    pwd = input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2\\. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span><br><span class=\"line\">    if len(pwd) &gt;= 8:</span><br><span class=\"line\">        return pwd</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3\\. 密码长度不够，需要抛出异常</span><br><span class=\"line\">    # 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span><br><span class=\"line\">    ex = Exception(&quot;密码长度不够&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2&gt; 抛出异常对象</span><br><span class=\"line\">    raise ex</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    user_pwd = input_password()</span><br><span class=\"line\">    print(user_pwd)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;发现错误：%s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://www.jianshu.com/p/ebc19de7a204\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ebc19de7a204</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><h4 id=\"异常的概念\"><a href=\"#异常的概念\" class=\"headerlink\" title=\"异常的概念\"></a>异常的概念</h4><ul>\n<li>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>\n<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>\n</ul>\n<blockquote>\n<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>\n<p>[图片上传失败…(image-81f29f-1542201966094)]</p>\n</blockquote>\n<h4 id=\"捕获异常：try-except-else-finally\"><a href=\"#捕获异常：try-except-else-finally\" class=\"headerlink\" title=\"捕获异常：try except else finally\"></a>捕获异常：<code>try except else finally</code></h4><p><strong>简单的捕获异常语法</strong></p>\n<ul>\n<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    尝试执行的代码</span><br><span class=\"line\">except:</span><br><span class=\"line\">    出现错误的处理</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>\n<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>\n</ul>\n<p><strong>简单异常捕获1 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 提示用户输入一个数字</span><br><span class=\"line\">    num = int(input(&quot;请输入数字：&quot;))</span><br><span class=\"line\">except:</span><br><span class=\"line\">    print(&quot;请输入正确的数字&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>错误类型捕获</strong></p>\n<ul>\n<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型2, 错误类型3):</span><br><span class=\"line\">    # 针对错误类型2 和 3，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>\n</ul>\n<p><strong>异常类型捕获2 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>捕获未知错误</strong></p>\n<ul>\n<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>\n<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p><strong>异常捕获完整语法</strong></p>\n<ul>\n<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型2:</span><br><span class=\"line\">    # 针对错误类型2，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型3, 错误类型4):</span><br><span class=\"line\">    # 针对错误类型3 和 4，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    # 打印错误信息</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # 没有异常才会执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 无论是否有异常，都会执行的代码</span><br><span class=\"line\">    print(&quot;无论是否有异常，都会执行的代码&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>else</code> 只有在没有异常时才会执行的代码</p>\n</li>\n<li><p><code>finally</code> 无论是否有异常，都会执行的代码</p>\n</li>\n<li><p>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;正常执行&quot;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;执行完成，但是不保证正确&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常的传递\"><a href=\"#异常的传递\" class=\"headerlink\" title=\"异常的传递\"></a>异常的传递</h4><ul>\n<li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></li>\n<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong>，而在主函数中调用的其他函数，只要出现异常，<strong>都会传递到主函数</strong>的异常捕获中</li>\n<li>这样就不需要在代码中，增加大量的异常捕获，能够<strong>保证代码的整洁</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">需求:</span><br><span class=\"line\">1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**</span><br><span class=\"line\">2\\.  定义函数 `demo2()` 调用 `demo1()`</span><br><span class=\"line\">3\\.  在主程序中调用 `demo2()`</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def demo1():</span><br><span class=\"line\">    return int(input(&quot;请输入一个整数：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">def demo2():</span><br><span class=\"line\">    return demo1()</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(demo2())</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常：-raise\"><a href=\"#抛出异常：-raise\" class=\"headerlink\" title=\"抛出异常： raise\"></a>抛出异常： <code>raise</code></h4><p><strong>应用场景</strong></p>\n<ul>\n<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>\n<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>\n</ul>\n<p><strong>示例</strong></p>\n<ul>\n<li><p>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></p>\n<p>[图片上传失败…(image-3d2a0b-1542201966092)]</p>\n</li>\n</ul>\n<p><strong>抛出异常</strong></p>\n<ul>\n<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>\n<li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，由<strong>其他需要处理的函数捕获异常</strong>，可以：<ol>\n<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>\n<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">**需求**</span><br><span class=\"line\"></span><br><span class=\"line\">*   定义 `input_password` 函数，提示用户输入密码</span><br><span class=\"line\">*   如果用户输入长度 &lt; 8，抛出异常</span><br><span class=\"line\">*   如果用户输入长度 &gt;=8，返回输入的密码</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def input_password():</span><br><span class=\"line\"></span><br><span class=\"line\">    # 1\\. 提示用户输入密码</span><br><span class=\"line\">    pwd = input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2\\. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span><br><span class=\"line\">    if len(pwd) &gt;= 8:</span><br><span class=\"line\">        return pwd</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3\\. 密码长度不够，需要抛出异常</span><br><span class=\"line\">    # 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span><br><span class=\"line\">    ex = Exception(&quot;密码长度不够&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2&gt; 抛出异常对象</span><br><span class=\"line\">    raise ex</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    user_pwd = input_password()</span><br><span class=\"line\">    print(user_pwd)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;发现错误：%s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://www.jianshu.com/p/ebc19de7a204\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ebc19de7a204</a></p>\n"},{"title":"(17) python文件操作","date":"2018-11-14T14:06:34.000Z","_content":"\n## 文件\n\n### 文件\n\n####文件的概念\n\n*   计算机的 **文件**，就是存储在某种 **长期储存设备** 上的一段 **数据**\n*   长期存储设备包括：硬盘、U 盘、移动硬盘、光盘...\n\n**文件的作用**：将数据长期保存下来，在需要的时候使用\n**文件的存储方式**：在计算机中，文件是以 **二进制** 的方式保存在磁盘上的\n**文本文件**：可以使用 **文本编辑软件** 查看，本质上还是二进制文件\n**二进制文件**：保存的内容 不是给人直接阅读的，而是 **提供给其他软件使用的**，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 **文本编辑软件** 查看\n\n#### 文件的基本操作\n\n**操作文件的套路**：\n在 **计算机** 中要操作文件的套路非常固定，一共包含**三个步骤**：\n\n1.  打开文件\n2.  读、写文件\n    *   **读** 将文件内容读入内存\n    *   **写** 将内存内容写入文件\n3.  关闭文件\n\n**操作文件的函数/方法**\n在 `Python` 中要操作文件\n\n| 序号 | 函数/方法 | 说明 |\n| --- | --- | --- |\n| 01 | open | 打开文件，并且返回文件操作对象 |\n| 02 | read | 将文件内容读取到内存 |\n| 03 | write | 将指定内容写入文件 |\n| 04 | close | 关闭文件 |\n\n`open` 函数负责打开文件，并且返回文件对象\n`read`/`write`/`close` 三个方法都需要通过 **文件对象** 来调用\n\n**读取文件示例**\n\n`open` 函数的第一个参数是要打开的文件名（文件名区分大小写）\n如果文件 **存在**，返回 **文件操作对象**\n如果文件 **不存在**，会 **抛出异常**\n\n`read` 方法可以一次性 **读入** 并 **返回** 文件的 **所有内容**\n\n`close` 方法负责 **关闭文件**\n如果 **忘记关闭文件**，**会造成系统资源消耗，而且会影响到后续对文件的访问**\n\n**注意**：`read` 方法执行后，会把 **文件指针** 移动到 **文件的末尾**\n\n```\n# 1\\. 打开 - 文件名需要注意大小写\nfile = open(\"README\")\n\n# 2\\. 读取\ntext = file.read()\nprint(text)\n\n# 3\\. 关闭\nfile.close()\n\n```\n\n**提示**\n\n*   在开发中，通常会先编写 **打开** 和 **关闭** 的代码，再编写中间针对文件的 **读/写** 操作！\n\n##### <补> 文件指针\n\n*   **文件指针** 标记 **从哪个位置开始读取数据**\n*   **第一次打开** 文件时，通常 **文件指针会指向文件的开始位置**\n*   当执行了 `read` 方法后，**文件指针** 会移动到 **读取内容的末尾**\n    *   默认情况下会移动到 **文件末尾**\n\n**思考**：如果执行了一次 `read` 方法，读取了所有内容，那么再次调用 `read` 方法，还能够获得到内容吗？\n**答案**：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。\n\n##### <补> 打开文件的方式\n\n*   `open` 函数默认以 **只读方式** 打开文件，并且返回文件对象\n\n```\nf = open(\"文件名\", \"访问方式\")\n```\n\n| 访问方式 | 说明 |\n| --- | --- |\n| r | 以**只读**方式打开文件。文件的指针将会放在文件的开头，这是**默认模式**。如果文件不存在，抛出异常 |\n| w | 以**只写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a | 以**追加**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n| r+ | 以**读写**方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常 |\n| w+ | 以**读写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a+ | 以**读写**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n\n**提示**：频繁的移动文件指针，**会影响文件的读写效率**，开发中更多的时候会以 **只读**、**只写** 的方式来操作文件\n\n**写入文件示例**\n\n```\n# 打开文件\nf = open(\"README\", \"w\")\n\nf.write(\"hello python！\\n\")\nf.write(\"今天天气真好\")\n\n# 关闭文件\nf.close()\n\n```\n\n##### <补> 按行读取文件内容：`readline()`\n\n*   `read` 方法默认会把文件的 **所有内容** **一次性读取到内存**\n*   如果文件太大，对内存的占用会非常严重\n*   `readline` 方法可以一次读取一行内容\n*   方法执行后，会把 **文件指针** 移动到下一行，准备再次读取\n\n**读取大文件的正确姿势**\n\n```\n# 打开文件\nfile = open(\"README\")\n\nwhile True:\n    # 读取一行内容\n    text = file.readline()\n\n    # 判断是否读到内容\n    if not text:\n        break\n\n    # 每读取一行的末尾已经有了一个 `\\n`\n    print(text, end=\"\")\n\n# 关闭文件\nfile.close()\n```\n\n**复制大文件**\n\n*   打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件\n\n```\n# 1\\. 打开文件\nfile_read = open(\"README\")\nfile_write = open(\"README[复件]\", \"w\")\n\n# 2\\. 读取并写入文件\nwhile True:\n    # 每次读取一行\n    text = file_read.readline()\n\n    # 判断是否读取到内容\n    if not text:\n        break\n\n    file_write.write(text)\n\n# 3\\. 关闭文件\nfile_read.close()\nfile_write.close()\n\n```\n\n#### 文件/目录的常用管理操作\n\n*   在 **终端** / **文件浏览器**、 中可以执行常规的 **文件** / **目录** 管理操作，例如：\n    *   创建、重命名、删除、改变路径、查看目录内容、……\n*   在 Python 中，如果希望通过程序实现上述功能，需要 `import os` 模块\n\n**文件管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | rename | 重命名文件 | `os.rename(源文件名, 目标文件名)` |\n| 02 | remove | 删除文件 | `os.remove(文件名)` |\n\n**目录管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | listdir | 目录列表 | `os.listdir(目录名)` |\n| 02 | mkdir | 创建目录 | `os.mkdir(目录名)` |\n| 03 | rmdir | 删除目录 | `os.rmdir(目录名)` |\n| 04 | getcwd | 获取当前目录 | `os.getcwd()` |\n| 05 | chdir | 修改工作目录 | `os.chdir(目标目录)` |\n| 06 | path.isdir | 判断是否是文件 | `os.path.isdir(文件路径)` |\n\n> 提示：文件或者目录操作都支持 **相对路径** 和 **绝对路径**\n\n####  文本文件的编码格式\n\n*   文本文件存储的内容是基于 **字符编码** 的文件，常见的编码有 `ASCII` 编码，`UNICODE` 编码等\n\n> Python 2.x 默认使用 `ASCII` 编码格式\n> Python 3.x 默认使用 `UTF-8` 编码格式\n\n**`ASCII` 编码**\n\n*   计算机中只有 `256` 个 `ASCII` 字符\n*   一个 `ASCII` 在内存中占用 **1 个字节** 的空间\n    *   `8` 个 `0/1` 的排列组合方式一共有 `256` 种，也就是 `2 ** 8`\n\n**`UTF-8` 编码格式**\n\n*   计算机中使用 **1~6 个字节** 来表示一个 `UTF-8` 字符，涵盖了 **地球上几乎所有地区的文字**\n*   大多数汉字会使用 **3 个字节** 表示\n*   `UTF-8` 是 `UNICODE` 编码的一种编码格式\n\n```\n# *-* coding:utf8 *-*\n\n# 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串\nhello_str = u\"你好世界\"\n\nprint(hello_str)\n\nfor c in hello_str:\n    print(c)\n\n```\n\n","source":"_posts/python基础/python文件操作.md","raw":"\n---\ntitle: (17) python文件操作\ndate: 2018-11-14 22:06:34\ntags:\ncategories: python基础\n---\n\n## 文件\n\n### 文件\n\n####文件的概念\n\n*   计算机的 **文件**，就是存储在某种 **长期储存设备** 上的一段 **数据**\n*   长期存储设备包括：硬盘、U 盘、移动硬盘、光盘...\n\n**文件的作用**：将数据长期保存下来，在需要的时候使用\n**文件的存储方式**：在计算机中，文件是以 **二进制** 的方式保存在磁盘上的\n**文本文件**：可以使用 **文本编辑软件** 查看，本质上还是二进制文件\n**二进制文件**：保存的内容 不是给人直接阅读的，而是 **提供给其他软件使用的**，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 **文本编辑软件** 查看\n\n#### 文件的基本操作\n\n**操作文件的套路**：\n在 **计算机** 中要操作文件的套路非常固定，一共包含**三个步骤**：\n\n1.  打开文件\n2.  读、写文件\n    *   **读** 将文件内容读入内存\n    *   **写** 将内存内容写入文件\n3.  关闭文件\n\n**操作文件的函数/方法**\n在 `Python` 中要操作文件\n\n| 序号 | 函数/方法 | 说明 |\n| --- | --- | --- |\n| 01 | open | 打开文件，并且返回文件操作对象 |\n| 02 | read | 将文件内容读取到内存 |\n| 03 | write | 将指定内容写入文件 |\n| 04 | close | 关闭文件 |\n\n`open` 函数负责打开文件，并且返回文件对象\n`read`/`write`/`close` 三个方法都需要通过 **文件对象** 来调用\n\n**读取文件示例**\n\n`open` 函数的第一个参数是要打开的文件名（文件名区分大小写）\n如果文件 **存在**，返回 **文件操作对象**\n如果文件 **不存在**，会 **抛出异常**\n\n`read` 方法可以一次性 **读入** 并 **返回** 文件的 **所有内容**\n\n`close` 方法负责 **关闭文件**\n如果 **忘记关闭文件**，**会造成系统资源消耗，而且会影响到后续对文件的访问**\n\n**注意**：`read` 方法执行后，会把 **文件指针** 移动到 **文件的末尾**\n\n```\n# 1\\. 打开 - 文件名需要注意大小写\nfile = open(\"README\")\n\n# 2\\. 读取\ntext = file.read()\nprint(text)\n\n# 3\\. 关闭\nfile.close()\n\n```\n\n**提示**\n\n*   在开发中，通常会先编写 **打开** 和 **关闭** 的代码，再编写中间针对文件的 **读/写** 操作！\n\n##### <补> 文件指针\n\n*   **文件指针** 标记 **从哪个位置开始读取数据**\n*   **第一次打开** 文件时，通常 **文件指针会指向文件的开始位置**\n*   当执行了 `read` 方法后，**文件指针** 会移动到 **读取内容的末尾**\n    *   默认情况下会移动到 **文件末尾**\n\n**思考**：如果执行了一次 `read` 方法，读取了所有内容，那么再次调用 `read` 方法，还能够获得到内容吗？\n**答案**：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。\n\n##### <补> 打开文件的方式\n\n*   `open` 函数默认以 **只读方式** 打开文件，并且返回文件对象\n\n```\nf = open(\"文件名\", \"访问方式\")\n```\n\n| 访问方式 | 说明 |\n| --- | --- |\n| r | 以**只读**方式打开文件。文件的指针将会放在文件的开头，这是**默认模式**。如果文件不存在，抛出异常 |\n| w | 以**只写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a | 以**追加**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n| r+ | 以**读写**方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常 |\n| w+ | 以**读写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a+ | 以**读写**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n\n**提示**：频繁的移动文件指针，**会影响文件的读写效率**，开发中更多的时候会以 **只读**、**只写** 的方式来操作文件\n\n**写入文件示例**\n\n```\n# 打开文件\nf = open(\"README\", \"w\")\n\nf.write(\"hello python！\\n\")\nf.write(\"今天天气真好\")\n\n# 关闭文件\nf.close()\n\n```\n\n##### <补> 按行读取文件内容：`readline()`\n\n*   `read` 方法默认会把文件的 **所有内容** **一次性读取到内存**\n*   如果文件太大，对内存的占用会非常严重\n*   `readline` 方法可以一次读取一行内容\n*   方法执行后，会把 **文件指针** 移动到下一行，准备再次读取\n\n**读取大文件的正确姿势**\n\n```\n# 打开文件\nfile = open(\"README\")\n\nwhile True:\n    # 读取一行内容\n    text = file.readline()\n\n    # 判断是否读到内容\n    if not text:\n        break\n\n    # 每读取一行的末尾已经有了一个 `\\n`\n    print(text, end=\"\")\n\n# 关闭文件\nfile.close()\n```\n\n**复制大文件**\n\n*   打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件\n\n```\n# 1\\. 打开文件\nfile_read = open(\"README\")\nfile_write = open(\"README[复件]\", \"w\")\n\n# 2\\. 读取并写入文件\nwhile True:\n    # 每次读取一行\n    text = file_read.readline()\n\n    # 判断是否读取到内容\n    if not text:\n        break\n\n    file_write.write(text)\n\n# 3\\. 关闭文件\nfile_read.close()\nfile_write.close()\n\n```\n\n#### 文件/目录的常用管理操作\n\n*   在 **终端** / **文件浏览器**、 中可以执行常规的 **文件** / **目录** 管理操作，例如：\n    *   创建、重命名、删除、改变路径、查看目录内容、……\n*   在 Python 中，如果希望通过程序实现上述功能，需要 `import os` 模块\n\n**文件管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | rename | 重命名文件 | `os.rename(源文件名, 目标文件名)` |\n| 02 | remove | 删除文件 | `os.remove(文件名)` |\n\n**目录管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | listdir | 目录列表 | `os.listdir(目录名)` |\n| 02 | mkdir | 创建目录 | `os.mkdir(目录名)` |\n| 03 | rmdir | 删除目录 | `os.rmdir(目录名)` |\n| 04 | getcwd | 获取当前目录 | `os.getcwd()` |\n| 05 | chdir | 修改工作目录 | `os.chdir(目标目录)` |\n| 06 | path.isdir | 判断是否是文件 | `os.path.isdir(文件路径)` |\n\n> 提示：文件或者目录操作都支持 **相对路径** 和 **绝对路径**\n\n####  文本文件的编码格式\n\n*   文本文件存储的内容是基于 **字符编码** 的文件，常见的编码有 `ASCII` 编码，`UNICODE` 编码等\n\n> Python 2.x 默认使用 `ASCII` 编码格式\n> Python 3.x 默认使用 `UTF-8` 编码格式\n\n**`ASCII` 编码**\n\n*   计算机中只有 `256` 个 `ASCII` 字符\n*   一个 `ASCII` 在内存中占用 **1 个字节** 的空间\n    *   `8` 个 `0/1` 的排列组合方式一共有 `256` 种，也就是 `2 ** 8`\n\n**`UTF-8` 编码格式**\n\n*   计算机中使用 **1~6 个字节** 来表示一个 `UTF-8` 字符，涵盖了 **地球上几乎所有地区的文字**\n*   大多数汉字会使用 **3 个字节** 表示\n*   `UTF-8` 是 `UNICODE` 编码的一种编码格式\n\n```\n# *-* coding:utf8 *-*\n\n# 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串\nhello_str = u\"你好世界\"\n\nprint(hello_str)\n\nfor c in hello_str:\n    print(c)\n\n```\n\n","slug":"python基础/python文件操作","published":1,"updated":"2020-04-10T16:46:16.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtulq005074ux3tcrbz7j","content":"<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h3 id=\"文件-1\"><a href=\"#文件-1\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>####文件的概念</p>\n<ul>\n<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>\n<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>\n</ul>\n<p><strong>文件的作用</strong>：将数据长期保存下来，在需要的时候使用<br><strong>文件的存储方式</strong>：在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的<br><strong>文本文件</strong>：可以使用 <strong>文本编辑软件</strong> 查看，本质上还是二进制文件<br><strong>二进制文件</strong>：保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong>，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 <strong>文本编辑软件</strong> 查看</p>\n<h4 id=\"文件的基本操作\"><a href=\"#文件的基本操作\" class=\"headerlink\" title=\"文件的基本操作\"></a>文件的基本操作</h4><p><strong>操作文件的套路</strong>：<br>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol>\n<li>打开文件</li>\n<li>读、写文件<ul>\n<li><strong>读</strong> 将文件内容读入内存</li>\n<li><strong>写</strong> 将内存内容写入文件</li>\n</ul>\n</li>\n<li>关闭文件</li>\n</ol>\n<p><strong>操作文件的函数/方法</strong><br>在 <code>Python</code> 中要操作文件</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>open</td>\n<td>打开文件，并且返回文件操作对象</td>\n</tr>\n<tr>\n<td>02</td>\n<td>read</td>\n<td>将文件内容读取到内存</td>\n</tr>\n<tr>\n<td>03</td>\n<td>write</td>\n<td>将指定内容写入文件</td>\n</tr>\n<tr>\n<td>04</td>\n<td>close</td>\n<td>关闭文件</td>\n</tr>\n</tbody>\n</table>\n<p><code>open</code> 函数负责打开文件，并且返回文件对象<br><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</p>\n<p><strong>读取文件示例</strong></p>\n<p><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<br>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong><br>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></p>\n<p><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></p>\n<p><code>close</code> 方法负责 <strong>关闭文件</strong><br>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></p>\n<p><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开 - 文件名需要注意大小写</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取</span><br><span class=\"line\">text = file.read()</span><br><span class=\"line\">print(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li>\n</ul>\n<h5 id=\"lt-补-gt-文件指针\"><a href=\"#lt-补-gt-文件指针\" class=\"headerlink\" title=\"&lt;补&gt; 文件指针\"></a>&lt;补&gt; 文件指针</h5><ul>\n<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>\n<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>\n<li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong><ul>\n<li>默认情况下会移动到 <strong>文件末尾</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>思考</strong>：如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？<br><strong>答案</strong>：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。</p>\n<h5 id=\"lt-补-gt-打开文件的方式\"><a href=\"#lt-补-gt-打开文件的方式\" class=\"headerlink\" title=\"&lt;补&gt; 打开文件的方式\"></a>&lt;补&gt; 打开文件的方式</h5><ul>\n<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(&quot;文件名&quot;, &quot;访问方式&quot;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>：频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</p>\n<p><strong>写入文件示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">f = open(&quot;README&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.write(&quot;hello python！\\n&quot;)</span><br><span class=\"line\">f.write(&quot;今天天气真好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h5 id=\"lt-补-gt-按行读取文件内容：readline\"><a href=\"#lt-补-gt-按行读取文件内容：readline\" class=\"headerlink\" title=\"&lt;补&gt; 按行读取文件内容：readline()\"></a>&lt;补&gt; 按行读取文件内容：<code>readline()</code></h5><ul>\n<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>\n<li>如果文件太大，对内存的占用会非常严重</li>\n<li><code>readline</code> 方法可以一次读取一行内容</li>\n<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>\n</ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 读取一行内容</span><br><span class=\"line\">    text = file.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 每读取一行的末尾已经有了一个 `\\n`</span><br><span class=\"line\">    print(text, end=&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>复制大文件</strong></p>\n<ul>\n<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开文件</span><br><span class=\"line\">file_read = open(&quot;README&quot;)</span><br><span class=\"line\">file_write = open(&quot;README[复件]&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取并写入文件</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次读取一行</span><br><span class=\"line\">    text = file_read.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读取到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭文件</span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件-目录的常用管理操作\"><a href=\"#文件-目录的常用管理操作\" class=\"headerlink\" title=\"文件/目录的常用管理操作\"></a>文件/目录的常用管理操作</h4><ul>\n<li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：<ul>\n<li>创建、重命名、删除、改变路径、查看目录内容、……</li>\n</ul>\n</li>\n<li>在 Python 中，如果希望通过程序实现上述功能，需要 <code>import os</code> 模块</li>\n</ul>\n<p><strong>文件管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>rename</td>\n<td>重命名文件</td>\n<td><code>os.rename(源文件名, 目标文件名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>remove</td>\n<td>删除文件</td>\n<td><code>os.remove(文件名)</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>目录管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>listdir</td>\n<td>目录列表</td>\n<td><code>os.listdir(目录名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>mkdir</td>\n<td>创建目录</td>\n<td><code>os.mkdir(目录名)</code></td>\n</tr>\n<tr>\n<td>03</td>\n<td>rmdir</td>\n<td>删除目录</td>\n<td><code>os.rmdir(目录名)</code></td>\n</tr>\n<tr>\n<td>04</td>\n<td>getcwd</td>\n<td>获取当前目录</td>\n<td><code>os.getcwd()</code></td>\n</tr>\n<tr>\n<td>05</td>\n<td>chdir</td>\n<td>修改工作目录</td>\n<td><code>os.chdir(目标目录)</code></td>\n</tr>\n<tr>\n<td>06</td>\n<td>path.isdir</td>\n<td>判断是否是文件</td>\n<td><code>os.path.isdir(文件路径)</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<h4 id=\"文本文件的编码格式\"><a href=\"#文本文件的编码格式\" class=\"headerlink\" title=\"文本文件的编码格式\"></a>文本文件的编码格式</h4><ul>\n<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>\n</ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<p><strong><code>ASCII</code> 编码</strong></p>\n<ul>\n<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>\n<li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间<ul>\n<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><code>UTF-8</code> 编码格式</strong></p>\n<ul>\n<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>\n<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>\n<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># *-* coding:utf8 *-*</span><br><span class=\"line\"></span><br><span class=\"line\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span><br><span class=\"line\">hello_str = u&quot;你好世界&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(hello_str)</span><br><span class=\"line\"></span><br><span class=\"line\">for c in hello_str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h3 id=\"文件-1\"><a href=\"#文件-1\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>####文件的概念</p>\n<ul>\n<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>\n<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>\n</ul>\n<p><strong>文件的作用</strong>：将数据长期保存下来，在需要的时候使用<br><strong>文件的存储方式</strong>：在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的<br><strong>文本文件</strong>：可以使用 <strong>文本编辑软件</strong> 查看，本质上还是二进制文件<br><strong>二进制文件</strong>：保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong>，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 <strong>文本编辑软件</strong> 查看</p>\n<h4 id=\"文件的基本操作\"><a href=\"#文件的基本操作\" class=\"headerlink\" title=\"文件的基本操作\"></a>文件的基本操作</h4><p><strong>操作文件的套路</strong>：<br>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol>\n<li>打开文件</li>\n<li>读、写文件<ul>\n<li><strong>读</strong> 将文件内容读入内存</li>\n<li><strong>写</strong> 将内存内容写入文件</li>\n</ul>\n</li>\n<li>关闭文件</li>\n</ol>\n<p><strong>操作文件的函数/方法</strong><br>在 <code>Python</code> 中要操作文件</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>open</td>\n<td>打开文件，并且返回文件操作对象</td>\n</tr>\n<tr>\n<td>02</td>\n<td>read</td>\n<td>将文件内容读取到内存</td>\n</tr>\n<tr>\n<td>03</td>\n<td>write</td>\n<td>将指定内容写入文件</td>\n</tr>\n<tr>\n<td>04</td>\n<td>close</td>\n<td>关闭文件</td>\n</tr>\n</tbody>\n</table>\n<p><code>open</code> 函数负责打开文件，并且返回文件对象<br><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</p>\n<p><strong>读取文件示例</strong></p>\n<p><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<br>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong><br>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></p>\n<p><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></p>\n<p><code>close</code> 方法负责 <strong>关闭文件</strong><br>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></p>\n<p><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开 - 文件名需要注意大小写</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取</span><br><span class=\"line\">text = file.read()</span><br><span class=\"line\">print(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li>\n</ul>\n<h5 id=\"lt-补-gt-文件指针\"><a href=\"#lt-补-gt-文件指针\" class=\"headerlink\" title=\"&lt;补&gt; 文件指针\"></a>&lt;补&gt; 文件指针</h5><ul>\n<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>\n<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>\n<li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong><ul>\n<li>默认情况下会移动到 <strong>文件末尾</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>思考</strong>：如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？<br><strong>答案</strong>：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。</p>\n<h5 id=\"lt-补-gt-打开文件的方式\"><a href=\"#lt-补-gt-打开文件的方式\" class=\"headerlink\" title=\"&lt;补&gt; 打开文件的方式\"></a>&lt;补&gt; 打开文件的方式</h5><ul>\n<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(&quot;文件名&quot;, &quot;访问方式&quot;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>：频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</p>\n<p><strong>写入文件示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">f = open(&quot;README&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.write(&quot;hello python！\\n&quot;)</span><br><span class=\"line\">f.write(&quot;今天天气真好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h5 id=\"lt-补-gt-按行读取文件内容：readline\"><a href=\"#lt-补-gt-按行读取文件内容：readline\" class=\"headerlink\" title=\"&lt;补&gt; 按行读取文件内容：readline()\"></a>&lt;补&gt; 按行读取文件内容：<code>readline()</code></h5><ul>\n<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>\n<li>如果文件太大，对内存的占用会非常严重</li>\n<li><code>readline</code> 方法可以一次读取一行内容</li>\n<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>\n</ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 读取一行内容</span><br><span class=\"line\">    text = file.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 每读取一行的末尾已经有了一个 `\\n`</span><br><span class=\"line\">    print(text, end=&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>复制大文件</strong></p>\n<ul>\n<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开文件</span><br><span class=\"line\">file_read = open(&quot;README&quot;)</span><br><span class=\"line\">file_write = open(&quot;README[复件]&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取并写入文件</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次读取一行</span><br><span class=\"line\">    text = file_read.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读取到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭文件</span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件-目录的常用管理操作\"><a href=\"#文件-目录的常用管理操作\" class=\"headerlink\" title=\"文件/目录的常用管理操作\"></a>文件/目录的常用管理操作</h4><ul>\n<li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：<ul>\n<li>创建、重命名、删除、改变路径、查看目录内容、……</li>\n</ul>\n</li>\n<li>在 Python 中，如果希望通过程序实现上述功能，需要 <code>import os</code> 模块</li>\n</ul>\n<p><strong>文件管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>rename</td>\n<td>重命名文件</td>\n<td><code>os.rename(源文件名, 目标文件名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>remove</td>\n<td>删除文件</td>\n<td><code>os.remove(文件名)</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>目录管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>listdir</td>\n<td>目录列表</td>\n<td><code>os.listdir(目录名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>mkdir</td>\n<td>创建目录</td>\n<td><code>os.mkdir(目录名)</code></td>\n</tr>\n<tr>\n<td>03</td>\n<td>rmdir</td>\n<td>删除目录</td>\n<td><code>os.rmdir(目录名)</code></td>\n</tr>\n<tr>\n<td>04</td>\n<td>getcwd</td>\n<td>获取当前目录</td>\n<td><code>os.getcwd()</code></td>\n</tr>\n<tr>\n<td>05</td>\n<td>chdir</td>\n<td>修改工作目录</td>\n<td><code>os.chdir(目标目录)</code></td>\n</tr>\n<tr>\n<td>06</td>\n<td>path.isdir</td>\n<td>判断是否是文件</td>\n<td><code>os.path.isdir(文件路径)</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<h4 id=\"文本文件的编码格式\"><a href=\"#文本文件的编码格式\" class=\"headerlink\" title=\"文本文件的编码格式\"></a>文本文件的编码格式</h4><ul>\n<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>\n</ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<p><strong><code>ASCII</code> 编码</strong></p>\n<ul>\n<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>\n<li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间<ul>\n<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><code>UTF-8</code> 编码格式</strong></p>\n<ul>\n<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>\n<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>\n<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># *-* coding:utf8 *-*</span><br><span class=\"line\"></span><br><span class=\"line\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span><br><span class=\"line\">hello_str = u&quot;你好世界&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(hello_str)</span><br><span class=\"line\"></span><br><span class=\"line\">for c in hello_str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n"},{"title":"(7) python正则表达式的学习过程","date":"2018-11-14T13:59:42.000Z","_content":"\n```python\n #优先使用内置函数\na = 'C|C++|Java|C#|Python|Javascript'\nprint(a.index('Python')>-1)\nprint('Python' in a)         \n#利用内置函数判断字符串'python'是否在a中\n```\n\n正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。\n例如:\n1、检查一串数字是否是电话号码.\n2、检测一个字符串是否符合email\n3、把一个文本里指定的单词替换为另外一个单词。\n#用正则表达式\n```python\nimport re                      #   引入re 模块 \n\na = 'C|C++|Java|C#|Python|Javascript'\n\nr = re.findall('Python',a)           #findall 方法  \nprint(r)\nif len(r) > 0:\n    print('字符串中包含Python')\nelse:\n    print('No')                    \n ```      \n  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。\n```python\nimport re                       \na = 'C0C++7Java12C#9Python67\\nJavascript8'\n #用r来提取a中的数字\nr = re.findall('\\d',a)      #\\d 来表示数字（0-9）\nprint(r)\n#用s来提取a中的非数字\ns = re.findall('\\D',a)      #\\D 来表示非数字的字符\nprint(s)\n```\n上面'python'是普通字符，'\\d','\\D'属于元字符\n正则表达式就是由普通字符和元字符等组合在一起的。\n\n**字符集**\n虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）\n```python\nimport re\na = 'abc,acc,adc,aec,adfc,ahc,afc'\nr = re.findall('a[cf]c',s)   #提取afc 或acc,普通字符a,c定界，元字符c，f\n#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。\nprint(r) \n```\n**概括字符集**\n \\d即 [0-9]\n\\D所有的非数字\n\\w单词字符 '[A-Za-z0-9]和下划线_ \n\\W 非单词字符，\n\\s 空白字符(空格/制表符/换行符)\n\\S 非空白字符\n.  匹配除换行符之外其他所有的字符\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\d',a) \nprint(r)\n#可自行验证\n```\n**数量词,贪婪与非贪婪**\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\w{3}',a)  #提取出来的\\w 3个一组\ns = re.findall('[A-Za-z]{3}',a)\nt = re.findall('[A-Za-z]{3,7}',a)#3到7个一组，优先选择7个\n#贪婪 与 非贪婪\n#python默认使用贪婪  按最大的匹配\nu = re.findall('[A-Za-z]{3,7}?',a)#非贪婪  按最小的匹配，即3个一组\nprint(r)  \nprint(s)\nprint(t)\nprint(u)\n```\n**问号，星号，加号的使用方法**\n```python\nimport re\na = 'pytho0python1pythonn2'\n\nr =  re.findall('python*',a)  #['pytho', 'python', 'pythonn']\ns =  re.findall('python+',a)\nt =  re.findall('python?',a)\nprint(r)\nprint(s)\nprint(t)\n```\n1、 *  对*前的字符匹配0次或无限多次\n2、+  对+前的字符匹配1次或无限多次\n3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的\n\n**边界匹配**\n```python\nimport re \nqq = '100001'\n#qq位数4-10位数\nr =  re.findall('^\\d{4,10}$',qq)  #^从字符串开头匹配 ， $从字符串末尾匹配\n#即开头到结尾得在4-10之间\nprint(r)\n```\n**组**\n```python\nimport re\na = 'PythonPythonPythonPythonPythonPython'\nr =  re.findall('(Python){2}',a)\nprint(r)#['Python', 'Python', 'Python']\n```\n\n**匹配模式**   （函数中的第三个参数）\nre.I 忽略匹配中的大小写\nre.S 匹配所有的字符，包括换行符\n```\nimport re\na = 'C0C++7Java12C#\\n9Python67Javascript#8'\nr =  re.findall('c#',a,re.I)\nr =  re.findall('c#.{1}',a,re.I|re.S)   #  |  且\nprint(r)#['C#']\nprint(r1)#['C#\\n']\n```\n**re.sub简单用法**     \n```python\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\nr =  re.sub('C#','GO',a,0)  #无限次替换\ns =  re.sub('C#','GO',a,1)  #只替换一次\nt =  a.replace('C#','GO')    #python内置函数\nprint(r)\nprint(s)\nprint(t)\n```\n**re.sub高阶用法**\n```\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\n\ndef convert(value):\n    print(value)\n#<re.Match object; span=(5, 7), match='C#'>\n#<re.Match object; span=(14, 16), match='C#'>\n#<re.Match object; span=(25, 27), match='C#'>\n#<re.Match object; span=(38, 40), match='C#'>\n#所以用value.group()\n    matched = value.group()\n    return '!!' + matched +'!!'\n\nr =  re.sub('C#',convert,a)\nprint(r)\n```\n**把函数作为传递参数**\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\n\ndef convert1(value):\n    print(value)\n    matched1 = value.group()\n    if int(matched1) >=6:\n        return '9'\n    else:\n        return '0'\n\ns =  re.sub( r'\\d',convert1,s)\nprint(s)\n```\n**match和search**\nmatch和search方法类似, 但有些许区别, 顾明思议\nmatch是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回\nsearch是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\nr = re.match(r'\\d',s)    \nr1 = re.search(r'\\d',s)\n\nprint(r) #None\nprint(r1)#<re.Match object; span=(1, 2), match='1'>\n```\n**group()的用法**\n```\nimport re\n\ns = 'life is short,i use python'\nr = re.search('life.*python',s)\nr1 = re.search(('life.*python'),s) #与上行一样\nr2 = re.search('life(.*)python',s)\nprint(r.group())\nprint(r1.group())\nprint(r2.group(0))  #全文匹配\nprint(r2.group(1))  #括号内匹配\nr3 = re.findall('life(.*)python',s)\nprint(r3)\n```\n```\nimport re\n\ns = 'life is short,i use python,I love python'\nr = re.search('life(.*)python(.*)python',s)\nprint(r.group())#life is short,i use python,I love python\nprint(r.group(0))#life is short,i use python,I love python\nprint(r.group(1))# is short,i use (第一组)\nprint(r.group(2))#,I love（第二组）\nprint(r.group(0,1,2))   #用元组的方式表达出来#('life is short,i use python,I love python', ' is short,i use ', ',I love ')\nprint(r.groups())  #只会表示出（.*）的内容#(' is short,i use ', ',I love ')\n```\n","source":"_posts/python基础/python正则表达式的学习过程.md","raw":"---\ntitle: (7) python正则表达式的学习过程\ndate: 2018-11-14 21:59:42\ntags:\ncategories: python基础\n---\n\n```python\n #优先使用内置函数\na = 'C|C++|Java|C#|Python|Javascript'\nprint(a.index('Python')>-1)\nprint('Python' in a)         \n#利用内置函数判断字符串'python'是否在a中\n```\n\n正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。\n例如:\n1、检查一串数字是否是电话号码.\n2、检测一个字符串是否符合email\n3、把一个文本里指定的单词替换为另外一个单词。\n#用正则表达式\n```python\nimport re                      #   引入re 模块 \n\na = 'C|C++|Java|C#|Python|Javascript'\n\nr = re.findall('Python',a)           #findall 方法  \nprint(r)\nif len(r) > 0:\n    print('字符串中包含Python')\nelse:\n    print('No')                    \n ```      \n  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。\n```python\nimport re                       \na = 'C0C++7Java12C#9Python67\\nJavascript8'\n #用r来提取a中的数字\nr = re.findall('\\d',a)      #\\d 来表示数字（0-9）\nprint(r)\n#用s来提取a中的非数字\ns = re.findall('\\D',a)      #\\D 来表示非数字的字符\nprint(s)\n```\n上面'python'是普通字符，'\\d','\\D'属于元字符\n正则表达式就是由普通字符和元字符等组合在一起的。\n\n**字符集**\n虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）\n```python\nimport re\na = 'abc,acc,adc,aec,adfc,ahc,afc'\nr = re.findall('a[cf]c',s)   #提取afc 或acc,普通字符a,c定界，元字符c，f\n#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。\nprint(r) \n```\n**概括字符集**\n \\d即 [0-9]\n\\D所有的非数字\n\\w单词字符 '[A-Za-z0-9]和下划线_ \n\\W 非单词字符，\n\\s 空白字符(空格/制表符/换行符)\n\\S 非空白字符\n.  匹配除换行符之外其他所有的字符\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\d',a) \nprint(r)\n#可自行验证\n```\n**数量词,贪婪与非贪婪**\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\w{3}',a)  #提取出来的\\w 3个一组\ns = re.findall('[A-Za-z]{3}',a)\nt = re.findall('[A-Za-z]{3,7}',a)#3到7个一组，优先选择7个\n#贪婪 与 非贪婪\n#python默认使用贪婪  按最大的匹配\nu = re.findall('[A-Za-z]{3,7}?',a)#非贪婪  按最小的匹配，即3个一组\nprint(r)  \nprint(s)\nprint(t)\nprint(u)\n```\n**问号，星号，加号的使用方法**\n```python\nimport re\na = 'pytho0python1pythonn2'\n\nr =  re.findall('python*',a)  #['pytho', 'python', 'pythonn']\ns =  re.findall('python+',a)\nt =  re.findall('python?',a)\nprint(r)\nprint(s)\nprint(t)\n```\n1、 *  对*前的字符匹配0次或无限多次\n2、+  对+前的字符匹配1次或无限多次\n3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的\n\n**边界匹配**\n```python\nimport re \nqq = '100001'\n#qq位数4-10位数\nr =  re.findall('^\\d{4,10}$',qq)  #^从字符串开头匹配 ， $从字符串末尾匹配\n#即开头到结尾得在4-10之间\nprint(r)\n```\n**组**\n```python\nimport re\na = 'PythonPythonPythonPythonPythonPython'\nr =  re.findall('(Python){2}',a)\nprint(r)#['Python', 'Python', 'Python']\n```\n\n**匹配模式**   （函数中的第三个参数）\nre.I 忽略匹配中的大小写\nre.S 匹配所有的字符，包括换行符\n```\nimport re\na = 'C0C++7Java12C#\\n9Python67Javascript#8'\nr =  re.findall('c#',a,re.I)\nr =  re.findall('c#.{1}',a,re.I|re.S)   #  |  且\nprint(r)#['C#']\nprint(r1)#['C#\\n']\n```\n**re.sub简单用法**     \n```python\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\nr =  re.sub('C#','GO',a,0)  #无限次替换\ns =  re.sub('C#','GO',a,1)  #只替换一次\nt =  a.replace('C#','GO')    #python内置函数\nprint(r)\nprint(s)\nprint(t)\n```\n**re.sub高阶用法**\n```\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\n\ndef convert(value):\n    print(value)\n#<re.Match object; span=(5, 7), match='C#'>\n#<re.Match object; span=(14, 16), match='C#'>\n#<re.Match object; span=(25, 27), match='C#'>\n#<re.Match object; span=(38, 40), match='C#'>\n#所以用value.group()\n    matched = value.group()\n    return '!!' + matched +'!!'\n\nr =  re.sub('C#',convert,a)\nprint(r)\n```\n**把函数作为传递参数**\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\n\ndef convert1(value):\n    print(value)\n    matched1 = value.group()\n    if int(matched1) >=6:\n        return '9'\n    else:\n        return '0'\n\ns =  re.sub( r'\\d',convert1,s)\nprint(s)\n```\n**match和search**\nmatch和search方法类似, 但有些许区别, 顾明思议\nmatch是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回\nsearch是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\nr = re.match(r'\\d',s)    \nr1 = re.search(r'\\d',s)\n\nprint(r) #None\nprint(r1)#<re.Match object; span=(1, 2), match='1'>\n```\n**group()的用法**\n```\nimport re\n\ns = 'life is short,i use python'\nr = re.search('life.*python',s)\nr1 = re.search(('life.*python'),s) #与上行一样\nr2 = re.search('life(.*)python',s)\nprint(r.group())\nprint(r1.group())\nprint(r2.group(0))  #全文匹配\nprint(r2.group(1))  #括号内匹配\nr3 = re.findall('life(.*)python',s)\nprint(r3)\n```\n```\nimport re\n\ns = 'life is short,i use python,I love python'\nr = re.search('life(.*)python(.*)python',s)\nprint(r.group())#life is short,i use python,I love python\nprint(r.group(0))#life is short,i use python,I love python\nprint(r.group(1))# is short,i use (第一组)\nprint(r.group(2))#,I love（第二组）\nprint(r.group(0,1,2))   #用元组的方式表达出来#('life is short,i use python,I love python', ' is short,i use ', ',I love ')\nprint(r.groups())  #只会表示出（.*）的内容#(' is short,i use ', ',I love ')\n```\n","slug":"python基础/python正则表达式的学习过程","published":1,"updated":"2020-04-10T16:46:16.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtulx005174ux7152jek0","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#优先使用内置函数</span></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\">print(a.index(<span class=\"string\">'Python'</span>)&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Python'</span> <span class=\"keyword\">in</span> a)         </span><br><span class=\"line\"><span class=\"comment\">#利用内置函数判断字符串'python'是否在a中</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。<br>例如:<br>1、检查一串数字是否是电话号码.<br>2、检测一个字符串是否符合email<br>3、把一个文本里指定的单词替换为另外一个单词。</p>\n<p>#用正则表达式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re                      <span class=\"comment\">#   引入re 模块 </span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'Python'</span>,a)           <span class=\"comment\">#findall 方法  </span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(r) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'字符串中包含Python'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'No'</span>)                    </span><br><span class=\"line\"> ```      </span><br><span class=\"line\">  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> re                       </span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67\\nJavascript8'</span></span><br><span class=\"line\"> <span class=\"comment\">#用r来提取a中的数字</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a)      <span class=\"comment\">#\\d 来表示数字（0-9）</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#用s来提取a中的非数字</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'\\D'</span>,a)      <span class=\"comment\">#\\D 来表示非数字的字符</span></span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p>上面’python’是普通字符，’\\d’,’\\D’属于元字符<br>正则表达式就是由普通字符和元字符等组合在一起的。</p>\n<p><strong>字符集</strong><br>虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'abc,acc,adc,aec,adfc,ahc,afc'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'a[cf]c'</span>,s)   <span class=\"comment\">#提取afc 或acc,普通字符a,c定界，元字符c，f</span></span><br><span class=\"line\"><span class=\"comment\">#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>概括字符集</strong><br> \\d即 [0-9]<br>\\D所有的非数字<br>\\w单词字符 ‘[A-Za-z0-9]和下划线_<br>\\W 非单词字符，<br>\\s 空白字符(空格/制表符/换行符)<br>\\S 非空白字符<br>.  匹配除换行符之外其他所有的字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a) </span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#可自行验证</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数量词,贪婪与非贪婪</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\w&#123;3&#125;'</span>,a)  <span class=\"comment\">#提取出来的\\w 3个一组</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'[A-Za-z]&#123;3&#125;'</span>,a)</span><br><span class=\"line\">t = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;'</span>,a)<span class=\"comment\">#3到7个一组，优先选择7个</span></span><br><span class=\"line\"><span class=\"comment\">#贪婪 与 非贪婪</span></span><br><span class=\"line\"><span class=\"comment\">#python默认使用贪婪  按最大的匹配</span></span><br><span class=\"line\">u = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;?'</span>,a)<span class=\"comment\">#非贪婪  按最小的匹配，即3个一组</span></span><br><span class=\"line\">print(r)  </span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">print(u)</span><br></pre></td></tr></table></figure></p>\n<p><strong>问号，星号，加号的使用方法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'pytho0python1pythonn2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'python*'</span>,a)  <span class=\"comment\">#['pytho', 'python', 'pythonn']</span></span><br><span class=\"line\">s =  re.findall(<span class=\"string\">'python+'</span>,a)</span><br><span class=\"line\">t =  re.findall(<span class=\"string\">'python?'</span>,a)</span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p>1、 <em>  对</em>前的字符匹配0次或无限多次<br>2、+  对+前的字符匹配1次或无限多次<br>3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的</p>\n<p><strong>边界匹配</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\">qq = <span class=\"string\">'100001'</span></span><br><span class=\"line\"><span class=\"comment\">#qq位数4-10位数</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'^\\d&#123;4,10&#125;$'</span>,qq)  <span class=\"comment\">#^从字符串开头匹配 ， $从字符串末尾匹配</span></span><br><span class=\"line\"><span class=\"comment\">#即开头到结尾得在4-10之间</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>组</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'PythonPythonPythonPythonPythonPython'</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'(Python)&#123;2&#125;'</span>,a)</span><br><span class=\"line\">print(r)<span class=\"comment\">#['Python', 'Python', 'Python']</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>匹配模式</strong>   （函数中的第三个参数）<br>re.I 忽略匹配中的大小写<br>re.S 匹配所有的字符，包括换行符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++7Java12C#\\n9Python67Javascript#8&apos;</span><br><span class=\"line\">r =  re.findall(&apos;c#&apos;,a,re.I)</span><br><span class=\"line\">r =  re.findall(&apos;c#.&#123;1&#125;&apos;,a,re.I|re.S)   #  |  且</span><br><span class=\"line\">print(r)#[&apos;C#&apos;]</span><br><span class=\"line\">print(r1)#[&apos;C#\\n&apos;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub简单用法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'</span></span><br><span class=\"line\">r =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">0</span>)  <span class=\"comment\">#无限次替换</span></span><br><span class=\"line\">s =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">1</span>)  <span class=\"comment\">#只替换一次</span></span><br><span class=\"line\">t =  a.replace(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>)    <span class=\"comment\">#python内置函数</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub高阶用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">#&lt;re.Match object; span=(5, 7), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(14, 16), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(25, 27), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(38, 40), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#所以用value.group()</span><br><span class=\"line\">    matched = value.group()</span><br><span class=\"line\">    return &apos;!!&apos; + matched +&apos;!!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.sub(&apos;C#&apos;,convert,a)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>把函数作为传递参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert1(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">    matched1 = value.group()</span><br><span class=\"line\">    if int(matched1) &gt;=6:</span><br><span class=\"line\">        return &apos;9&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s =  re.sub( r&apos;\\d&apos;,convert1,s)</span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>match和search</strong><br>match和search方法类似, 但有些许区别, 顾明思议<br>match是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回<br>search是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\">r = re.match(r&apos;\\d&apos;,s)    </span><br><span class=\"line\">r1 = re.search(r&apos;\\d&apos;,s)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r) #None</span><br><span class=\"line\">print(r1)#&lt;re.Match object; span=(1, 2), match=&apos;1&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>group()的用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python&apos;</span><br><span class=\"line\">r = re.search(&apos;life.*python&apos;,s)</span><br><span class=\"line\">r1 = re.search((&apos;life.*python&apos;),s) #与上行一样</span><br><span class=\"line\">r2 = re.search(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())</span><br><span class=\"line\">print(r1.group())</span><br><span class=\"line\">print(r2.group(0))  #全文匹配</span><br><span class=\"line\">print(r2.group(1))  #括号内匹配</span><br><span class=\"line\">r3 = re.findall(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r3)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python,I love python&apos;</span><br><span class=\"line\">r = re.search(&apos;life(.*)python(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(0))#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(1))# is short,i use (第一组)</span><br><span class=\"line\">print(r.group(2))#,I love（第二组）</span><br><span class=\"line\">print(r.group(0,1,2))   #用元组的方式表达出来#(&apos;life is short,i use python,I love python&apos;, &apos; is short,i use &apos;, &apos;,I love &apos;)</span><br><span class=\"line\">print(r.groups())  #只会表示出（.*）的内容#(&apos; is short,i use &apos;, &apos;,I love &apos;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#优先使用内置函数</span></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\">print(a.index(<span class=\"string\">'Python'</span>)&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Python'</span> <span class=\"keyword\">in</span> a)         </span><br><span class=\"line\"><span class=\"comment\">#利用内置函数判断字符串'python'是否在a中</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。<br>例如:<br>1、检查一串数字是否是电话号码.<br>2、检测一个字符串是否符合email<br>3、把一个文本里指定的单词替换为另外一个单词。</p>\n<p>#用正则表达式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re                      <span class=\"comment\">#   引入re 模块 </span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'Python'</span>,a)           <span class=\"comment\">#findall 方法  </span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(r) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'字符串中包含Python'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'No'</span>)                    </span><br><span class=\"line\"> ```      </span><br><span class=\"line\">  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> re                       </span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67\\nJavascript8'</span></span><br><span class=\"line\"> <span class=\"comment\">#用r来提取a中的数字</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a)      <span class=\"comment\">#\\d 来表示数字（0-9）</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#用s来提取a中的非数字</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'\\D'</span>,a)      <span class=\"comment\">#\\D 来表示非数字的字符</span></span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p>上面’python’是普通字符，’\\d’,’\\D’属于元字符<br>正则表达式就是由普通字符和元字符等组合在一起的。</p>\n<p><strong>字符集</strong><br>虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'abc,acc,adc,aec,adfc,ahc,afc'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'a[cf]c'</span>,s)   <span class=\"comment\">#提取afc 或acc,普通字符a,c定界，元字符c，f</span></span><br><span class=\"line\"><span class=\"comment\">#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>概括字符集</strong><br> \\d即 [0-9]<br>\\D所有的非数字<br>\\w单词字符 ‘[A-Za-z0-9]和下划线_<br>\\W 非单词字符，<br>\\s 空白字符(空格/制表符/换行符)<br>\\S 非空白字符<br>.  匹配除换行符之外其他所有的字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a) </span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#可自行验证</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数量词,贪婪与非贪婪</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\w&#123;3&#125;'</span>,a)  <span class=\"comment\">#提取出来的\\w 3个一组</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'[A-Za-z]&#123;3&#125;'</span>,a)</span><br><span class=\"line\">t = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;'</span>,a)<span class=\"comment\">#3到7个一组，优先选择7个</span></span><br><span class=\"line\"><span class=\"comment\">#贪婪 与 非贪婪</span></span><br><span class=\"line\"><span class=\"comment\">#python默认使用贪婪  按最大的匹配</span></span><br><span class=\"line\">u = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;?'</span>,a)<span class=\"comment\">#非贪婪  按最小的匹配，即3个一组</span></span><br><span class=\"line\">print(r)  </span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">print(u)</span><br></pre></td></tr></table></figure></p>\n<p><strong>问号，星号，加号的使用方法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'pytho0python1pythonn2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'python*'</span>,a)  <span class=\"comment\">#['pytho', 'python', 'pythonn']</span></span><br><span class=\"line\">s =  re.findall(<span class=\"string\">'python+'</span>,a)</span><br><span class=\"line\">t =  re.findall(<span class=\"string\">'python?'</span>,a)</span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p>1、 <em>  对</em>前的字符匹配0次或无限多次<br>2、+  对+前的字符匹配1次或无限多次<br>3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的</p>\n<p><strong>边界匹配</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\">qq = <span class=\"string\">'100001'</span></span><br><span class=\"line\"><span class=\"comment\">#qq位数4-10位数</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'^\\d&#123;4,10&#125;$'</span>,qq)  <span class=\"comment\">#^从字符串开头匹配 ， $从字符串末尾匹配</span></span><br><span class=\"line\"><span class=\"comment\">#即开头到结尾得在4-10之间</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>组</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'PythonPythonPythonPythonPythonPython'</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'(Python)&#123;2&#125;'</span>,a)</span><br><span class=\"line\">print(r)<span class=\"comment\">#['Python', 'Python', 'Python']</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>匹配模式</strong>   （函数中的第三个参数）<br>re.I 忽略匹配中的大小写<br>re.S 匹配所有的字符，包括换行符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++7Java12C#\\n9Python67Javascript#8&apos;</span><br><span class=\"line\">r =  re.findall(&apos;c#&apos;,a,re.I)</span><br><span class=\"line\">r =  re.findall(&apos;c#.&#123;1&#125;&apos;,a,re.I|re.S)   #  |  且</span><br><span class=\"line\">print(r)#[&apos;C#&apos;]</span><br><span class=\"line\">print(r1)#[&apos;C#\\n&apos;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub简单用法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'</span></span><br><span class=\"line\">r =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">0</span>)  <span class=\"comment\">#无限次替换</span></span><br><span class=\"line\">s =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">1</span>)  <span class=\"comment\">#只替换一次</span></span><br><span class=\"line\">t =  a.replace(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>)    <span class=\"comment\">#python内置函数</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub高阶用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">#&lt;re.Match object; span=(5, 7), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(14, 16), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(25, 27), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(38, 40), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#所以用value.group()</span><br><span class=\"line\">    matched = value.group()</span><br><span class=\"line\">    return &apos;!!&apos; + matched +&apos;!!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.sub(&apos;C#&apos;,convert,a)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>把函数作为传递参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert1(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">    matched1 = value.group()</span><br><span class=\"line\">    if int(matched1) &gt;=6:</span><br><span class=\"line\">        return &apos;9&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s =  re.sub( r&apos;\\d&apos;,convert1,s)</span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>match和search</strong><br>match和search方法类似, 但有些许区别, 顾明思议<br>match是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回<br>search是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\">r = re.match(r&apos;\\d&apos;,s)    </span><br><span class=\"line\">r1 = re.search(r&apos;\\d&apos;,s)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r) #None</span><br><span class=\"line\">print(r1)#&lt;re.Match object; span=(1, 2), match=&apos;1&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>group()的用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python&apos;</span><br><span class=\"line\">r = re.search(&apos;life.*python&apos;,s)</span><br><span class=\"line\">r1 = re.search((&apos;life.*python&apos;),s) #与上行一样</span><br><span class=\"line\">r2 = re.search(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())</span><br><span class=\"line\">print(r1.group())</span><br><span class=\"line\">print(r2.group(0))  #全文匹配</span><br><span class=\"line\">print(r2.group(1))  #括号内匹配</span><br><span class=\"line\">r3 = re.findall(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r3)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python,I love python&apos;</span><br><span class=\"line\">r = re.search(&apos;life(.*)python(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(0))#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(1))# is short,i use (第一组)</span><br><span class=\"line\">print(r.group(2))#,I love（第二组）</span><br><span class=\"line\">print(r.group(0,1,2))   #用元组的方式表达出来#(&apos;life is short,i use python,I love python&apos;, &apos; is short,i use &apos;, &apos;,I love &apos;)</span><br><span class=\"line\">print(r.groups())  #只会表示出（.*）的内容#(&apos; is short,i use &apos;, &apos;,I love &apos;)</span><br></pre></td></tr></table></figure>\n"},{"title":"docker安装redis","date":"2019-08-17T04:51:16.000Z","_content":"\n1. `docker search redis`  查询镜像\n2. `docker pull redis`  拉取官方镜像\n3. `docker images`  查看一下是否成功\n4. 启动镜像\n\n4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下\n4.2  docker启动redis\n\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n命令解释说明：\n-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。\n--name myredis  ##指定容器名称，查看和进行操作都比较方便。\n\n-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data\n-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中\n\n-d redis 表示后台启动redis\nredis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf\n--appendonly yes 开启redis 持久化 --requirepass \"passwd\"  需要密码\n\n5. `docker ps` 查看容器启动情况\n6. 连接redis的几种方式\n\n```\ndocker exec -ti myredis redis-cli  # 或者用id\n\ndocker exec -ti myredis redis-cli -a \"passwd\"\n\ndocker exec -ti myredis redis-cli -h localhost -p 6379 \ndocker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 \ndocker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379\n\n\n```\ndocker-compose.yml文件内容：\n```\nredis:\n  image: redis\n  container_name: test-redis\n  restart: always\n  ports:\n    - 6379:6379\n  volumes:\n    - /opt/data/redis:/data\n  command: redis-server --appendonly yes --requirepass \"redis\"\n```\n\n7. 客户端连接\n`docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379`\n`ctrl + p + q `后台运行\n再次进入\n`docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379`\n","source":"_posts/redis/docker安装redis.md","raw":"---\n\ntitle: docker安装redis\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n1. `docker search redis`  查询镜像\n2. `docker pull redis`  拉取官方镜像\n3. `docker images`  查看一下是否成功\n4. 启动镜像\n\n4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下\n4.2  docker启动redis\n\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n命令解释说明：\n-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。\n--name myredis  ##指定容器名称，查看和进行操作都比较方便。\n\n-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data\n-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中\n\n-d redis 表示后台启动redis\nredis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf\n--appendonly yes 开启redis 持久化 --requirepass \"passwd\"  需要密码\n\n5. `docker ps` 查看容器启动情况\n6. 连接redis的几种方式\n\n```\ndocker exec -ti myredis redis-cli  # 或者用id\n\ndocker exec -ti myredis redis-cli -a \"passwd\"\n\ndocker exec -ti myredis redis-cli -h localhost -p 6379 \ndocker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 \ndocker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379\n\n\n```\ndocker-compose.yml文件内容：\n```\nredis:\n  image: redis\n  container_name: test-redis\n  restart: always\n  ports:\n    - 6379:6379\n  volumes:\n    - /opt/data/redis:/data\n  command: redis-server --appendonly yes --requirepass \"redis\"\n```\n\n7. 客户端连接\n`docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379`\n`ctrl + p + q `后台运行\n再次进入\n`docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379`\n","slug":"redis/docker安装redis","published":1,"updated":"2020-04-10T16:46:16.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtum2005474uxte7gpjk3","content":"<ol>\n<li><code>docker search redis</code>  查询镜像</li>\n<li><code>docker pull redis</code>  拉取官方镜像</li>\n<li><code>docker images</code>  查看一下是否成功</li>\n<li>启动镜像</li>\n</ol>\n<p>4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下<br>4.2  docker启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure>\n<p>命令解释说明：<br>-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。<br>–name myredis  ##指定容器名称，查看和进行操作都比较方便。</p>\n<p>-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data<br>-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中</p>\n<p>-d redis 表示后台启动redis<br>redis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf<br>–appendonly yes 开启redis 持久化 –requirepass “passwd”  需要密码</p>\n<ol start=\"5\">\n<li><code>docker ps</code> 查看容器启动情况</li>\n<li>连接redis的几种方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -ti myredis redis-cli  # 或者用id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -a &quot;passwd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -h localhost -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis:</span><br><span class=\"line\">  image: redis</span><br><span class=\"line\">  container_name: test-redis</span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - 6379:6379</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - /opt/data/redis:/data</span><br><span class=\"line\">  command: redis-server --appendonly yes --requirepass &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>客户端连接<br><code>docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379</code><br><code>ctrl + p + q</code>后台运行<br>再次进入<br><code>docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><code>docker search redis</code>  查询镜像</li>\n<li><code>docker pull redis</code>  拉取官方镜像</li>\n<li><code>docker images</code>  查看一下是否成功</li>\n<li>启动镜像</li>\n</ol>\n<p>4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下<br>4.2  docker启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure>\n<p>命令解释说明：<br>-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。<br>–name myredis  ##指定容器名称，查看和进行操作都比较方便。</p>\n<p>-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data<br>-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中</p>\n<p>-d redis 表示后台启动redis<br>redis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf<br>–appendonly yes 开启redis 持久化 –requirepass “passwd”  需要密码</p>\n<ol start=\"5\">\n<li><code>docker ps</code> 查看容器启动情况</li>\n<li>连接redis的几种方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -ti myredis redis-cli  # 或者用id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -a &quot;passwd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -h localhost -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis:</span><br><span class=\"line\">  image: redis</span><br><span class=\"line\">  container_name: test-redis</span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - 6379:6379</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - /opt/data/redis:/data</span><br><span class=\"line\">  command: redis-server --appendonly yes --requirepass &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>客户端连接<br><code>docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379</code><br><code>ctrl + p + q</code>后台运行<br>再次进入<br><code>docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379</code></li>\n</ol>\n"},{"title":"docker安装redis集群","date":"2019-08-17T04:51:16.000Z","_content":"\n# 在 /home 目录下创建redis-cluster-test 文件夹\n```\n➜ mkdir -p /home/redis-cluster-test\n➜ cd  /home/redis-cluster-test\n```\n# 把下列信息写入redis-cluster.tmpl文件中\n```\nport ${PORT}\nprotected-mode no\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\ncluster-announce-ip 192.168.1.157\ncluster-announce-port ${PORT}\ncluster-announce-bus-port 1${PORT}\nappendonly yes\n```\n # 当前目录下生成conf和data目标，并生成配置信息\n 共生成6个文件夹，从7001到7006，每个文件夹下包含data和conf文件夹，同时conf里面有redis.conf配置文件\n ```\n #\nfor port in `seq 7001 7006`; do \\   # 7001 ~7006\n  mkdir -p ./${port}/conf \\\n  && PORT=${port} envsubst < ./redis-cluster.tmpl > ./${port}/conf/redis.conf \\\n  && mkdir -p ./${port}/data; \\\ndone\n```\n#  创建6个redis容器\n```\nfor port in `seq 7001 7006`; do \\\n  docker run -d -ti \\\n  -v `pwd`/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \\\n  -v `pwd`/${port}/data:/data \\\n  --restart always --name redis-${port} --net host \\\n  --sysctl net.core.somaxconn=1024 redis:latest redis-server /usr/local/etc/redis/redis.conf; \\\ndone\n```\n# 进入任一容器\n```\ndocker exec -it redis-7001 bash\n```\n\n\n","source":"_posts/redis/docker安装redis集群.md","raw":"---\n\ntitle: docker安装redis集群\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n# 在 /home 目录下创建redis-cluster-test 文件夹\n```\n➜ mkdir -p /home/redis-cluster-test\n➜ cd  /home/redis-cluster-test\n```\n# 把下列信息写入redis-cluster.tmpl文件中\n```\nport ${PORT}\nprotected-mode no\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\ncluster-announce-ip 192.168.1.157\ncluster-announce-port ${PORT}\ncluster-announce-bus-port 1${PORT}\nappendonly yes\n```\n # 当前目录下生成conf和data目标，并生成配置信息\n 共生成6个文件夹，从7001到7006，每个文件夹下包含data和conf文件夹，同时conf里面有redis.conf配置文件\n ```\n #\nfor port in `seq 7001 7006`; do \\   # 7001 ~7006\n  mkdir -p ./${port}/conf \\\n  && PORT=${port} envsubst < ./redis-cluster.tmpl > ./${port}/conf/redis.conf \\\n  && mkdir -p ./${port}/data; \\\ndone\n```\n#  创建6个redis容器\n```\nfor port in `seq 7001 7006`; do \\\n  docker run -d -ti \\\n  -v `pwd`/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \\\n  -v `pwd`/${port}/data:/data \\\n  --restart always --name redis-${port} --net host \\\n  --sysctl net.core.somaxconn=1024 redis:latest redis-server /usr/local/etc/redis/redis.conf; \\\ndone\n```\n# 进入任一容器\n```\ndocker exec -it redis-7001 bash\n```\n\n\n","slug":"redis/docker安装redis集群","published":1,"updated":"2020-04-10T16:46:16.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtum6005574uxo2p3rqz4","content":"<h1 id=\"在-home-目录下创建redis-cluster-test-文件夹\"><a href=\"#在-home-目录下创建redis-cluster-test-文件夹\" class=\"headerlink\" title=\"在 /home 目录下创建redis-cluster-test 文件夹\"></a>在 /home 目录下创建redis-cluster-test 文件夹</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ mkdir -p /home/redis-cluster-test</span><br><span class=\"line\">➜ cd  /home/redis-cluster-test</span><br></pre></td></tr></table></figure>\n<h1 id=\"把下列信息写入redis-cluster-tmpl文件中\"><a href=\"#把下列信息写入redis-cluster-tmpl文件中\" class=\"headerlink\" title=\"把下列信息写入redis-cluster.tmpl文件中\"></a>把下列信息写入redis-cluster.tmpl文件中</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port $&#123;PORT&#125;</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">cluster-config-file nodes.conf</span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\">cluster-announce-ip 192.168.1.157</span><br><span class=\"line\">cluster-announce-port $&#123;PORT&#125;</span><br><span class=\"line\">cluster-announce-bus-port 1$&#123;PORT&#125;</span><br><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n<h1 id=\"当前目录下生成conf和data目标，并生成配置信息\"><a href=\"#当前目录下生成conf和data目标，并生成配置信息\" class=\"headerlink\" title=\"当前目录下生成conf和data目标，并生成配置信息\"></a>当前目录下生成conf和data目标，并生成配置信息</h1><p> 共生成6个文件夹，从7001到7006，每个文件夹下包含data和conf文件夹，同时conf里面有redis.conf配置文件<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #</span><br><span class=\"line\">for port in `seq 7001 7006`; do \\   # 7001 ~7006</span><br><span class=\"line\">  mkdir -p ./$&#123;port&#125;/conf \\</span><br><span class=\"line\">  &amp;&amp; PORT=$&#123;port&#125; envsubst &lt; ./redis-cluster.tmpl &gt; ./$&#123;port&#125;/conf/redis.conf \\</span><br><span class=\"line\">  &amp;&amp; mkdir -p ./$&#123;port&#125;/data; \\</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建6个redis容器\"><a href=\"#创建6个redis容器\" class=\"headerlink\" title=\"创建6个redis容器\"></a>创建6个redis容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for port in `seq 7001 7006`; do \\</span><br><span class=\"line\">  docker run -d -ti \\</span><br><span class=\"line\">  -v `pwd`/$&#123;port&#125;/conf/redis.conf:/usr/local/etc/redis/redis.conf \\</span><br><span class=\"line\">  -v `pwd`/$&#123;port&#125;/data:/data \\</span><br><span class=\"line\">  --restart always --name redis-$&#123;port&#125; --net host \\</span><br><span class=\"line\">  --sysctl net.core.somaxconn=1024 redis:latest redis-server /usr/local/etc/redis/redis.conf; \\</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入任一容器\"><a href=\"#进入任一容器\" class=\"headerlink\" title=\"进入任一容器\"></a>进入任一容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it redis-7001 bash</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在-home-目录下创建redis-cluster-test-文件夹\"><a href=\"#在-home-目录下创建redis-cluster-test-文件夹\" class=\"headerlink\" title=\"在 /home 目录下创建redis-cluster-test 文件夹\"></a>在 /home 目录下创建redis-cluster-test 文件夹</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ mkdir -p /home/redis-cluster-test</span><br><span class=\"line\">➜ cd  /home/redis-cluster-test</span><br></pre></td></tr></table></figure>\n<h1 id=\"把下列信息写入redis-cluster-tmpl文件中\"><a href=\"#把下列信息写入redis-cluster-tmpl文件中\" class=\"headerlink\" title=\"把下列信息写入redis-cluster.tmpl文件中\"></a>把下列信息写入redis-cluster.tmpl文件中</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port $&#123;PORT&#125;</span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\">cluster-config-file nodes.conf</span><br><span class=\"line\">cluster-node-timeout 5000</span><br><span class=\"line\">cluster-announce-ip 192.168.1.157</span><br><span class=\"line\">cluster-announce-port $&#123;PORT&#125;</span><br><span class=\"line\">cluster-announce-bus-port 1$&#123;PORT&#125;</span><br><span class=\"line\">appendonly yes</span><br></pre></td></tr></table></figure>\n<h1 id=\"当前目录下生成conf和data目标，并生成配置信息\"><a href=\"#当前目录下生成conf和data目标，并生成配置信息\" class=\"headerlink\" title=\"当前目录下生成conf和data目标，并生成配置信息\"></a>当前目录下生成conf和data目标，并生成配置信息</h1><p> 共生成6个文件夹，从7001到7006，每个文件夹下包含data和conf文件夹，同时conf里面有redis.conf配置文件<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #</span><br><span class=\"line\">for port in `seq 7001 7006`; do \\   # 7001 ~7006</span><br><span class=\"line\">  mkdir -p ./$&#123;port&#125;/conf \\</span><br><span class=\"line\">  &amp;&amp; PORT=$&#123;port&#125; envsubst &lt; ./redis-cluster.tmpl &gt; ./$&#123;port&#125;/conf/redis.conf \\</span><br><span class=\"line\">  &amp;&amp; mkdir -p ./$&#123;port&#125;/data; \\</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建6个redis容器\"><a href=\"#创建6个redis容器\" class=\"headerlink\" title=\"创建6个redis容器\"></a>创建6个redis容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for port in `seq 7001 7006`; do \\</span><br><span class=\"line\">  docker run -d -ti \\</span><br><span class=\"line\">  -v `pwd`/$&#123;port&#125;/conf/redis.conf:/usr/local/etc/redis/redis.conf \\</span><br><span class=\"line\">  -v `pwd`/$&#123;port&#125;/data:/data \\</span><br><span class=\"line\">  --restart always --name redis-$&#123;port&#125; --net host \\</span><br><span class=\"line\">  --sysctl net.core.somaxconn=1024 redis:latest redis-server /usr/local/etc/redis/redis.conf; \\</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h1 id=\"进入任一容器\"><a href=\"#进入任一容器\" class=\"headerlink\" title=\"进入任一容器\"></a>进入任一容器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it redis-7001 bash</span><br></pre></td></tr></table></figure>\n"},{"title":"python操作redis","date":"2019-08-17T04:51:16.000Z","_content":"\n\n### 1. 准备工作\n1. 安装好 `redis` 和 `RedisPy库`\n2. `RedisDump`  可以用来做数据导入或导出\n### 2. RedisPy库\nRedisPy库 提供两个类 `redis` 和 `StrictRedis` 来实现 Redis 的命令操作。\n\n`StrictRedis` 实现了绝大部分官方命令，参数也一一对应。\n\n`redis` 是 `StrictRedis` 的子类，主要功能是用于向后兼容旧版本库里的几个方法。\n\n推荐使用 `StrictRedis` \n\n### 连接 Redis\n```\nfrom redis import StrictRedis\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(host='localhost', port=6379, db=0, password='password') \nredis.set('name', 'weilai')\nprint(redis.get('name'))\n```\n使用`ConnectionPool` 连接\n\n```\nfrom redis import StrictRedis, ConnectionPool\n\npool = ConnectionPool(host='localhost', port=6379, db=0, password=password)\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(connection_pool=pool) \n#redis.set('name', 'weilai')\nprint(redis.get('name'))\n\n```\n\n`ConnectionPool` 还支持通过 url 来构建\n\n```\nredis://[:password]@host:port/db  # tcp\nrediss://[:password]@host:port/db  # tcp +ssl \nunix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接 \n```\neg:\n```\nurl = 'redis://:password@localhost:6379/0'\npool = ConnectionPool.from_url(url)\nredis = StrictRedis(connection_pool=pool) \nprint(redis.get('name'))\n```\n## 类 改写\n```\nimport redis\n\nclass TestString:\n    def __init__(self):\n        self.r = redis.StrictRedis(host='localhost', port=6379, db=0) \n    \n    def test_set(self):\n        result = self.r.set('name2','weilai2') \n        print(result)\n        return result\n\n    def test_get(self):\n        result = self.r.get('name2')\n        print(result)\n        return result\n\n    def test_mset(self):\n        d = {\n            'name3' : 'user3',\n            'name4' : 'user4'\n        }\n        result = self.r.mset(d)\n        print(result)\n        return result\n\n    def test_mget(self):\n        l = ['name3', 'name4']\n        result = self.r.mget(l)\n        print(result)\n        return result\n\n\ndef main():\n    str_obj =  TestString()\n    str_obj.test_set()\n    str_obj.test_get()\n    str_obj.test_mset()\n    str_obj.test_mget()\n\nif __name__ == '__main__':\n    main()\n```\n\n","source":"_posts/redis/python操作redis.md","raw":"---\n\ntitle: python操作redis\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n\n### 1. 准备工作\n1. 安装好 `redis` 和 `RedisPy库`\n2. `RedisDump`  可以用来做数据导入或导出\n### 2. RedisPy库\nRedisPy库 提供两个类 `redis` 和 `StrictRedis` 来实现 Redis 的命令操作。\n\n`StrictRedis` 实现了绝大部分官方命令，参数也一一对应。\n\n`redis` 是 `StrictRedis` 的子类，主要功能是用于向后兼容旧版本库里的几个方法。\n\n推荐使用 `StrictRedis` \n\n### 连接 Redis\n```\nfrom redis import StrictRedis\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(host='localhost', port=6379, db=0, password='password') \nredis.set('name', 'weilai')\nprint(redis.get('name'))\n```\n使用`ConnectionPool` 连接\n\n```\nfrom redis import StrictRedis, ConnectionPool\n\npool = ConnectionPool(host='localhost', port=6379, db=0, password=password)\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(connection_pool=pool) \n#redis.set('name', 'weilai')\nprint(redis.get('name'))\n\n```\n\n`ConnectionPool` 还支持通过 url 来构建\n\n```\nredis://[:password]@host:port/db  # tcp\nrediss://[:password]@host:port/db  # tcp +ssl \nunix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接 \n```\neg:\n```\nurl = 'redis://:password@localhost:6379/0'\npool = ConnectionPool.from_url(url)\nredis = StrictRedis(connection_pool=pool) \nprint(redis.get('name'))\n```\n## 类 改写\n```\nimport redis\n\nclass TestString:\n    def __init__(self):\n        self.r = redis.StrictRedis(host='localhost', port=6379, db=0) \n    \n    def test_set(self):\n        result = self.r.set('name2','weilai2') \n        print(result)\n        return result\n\n    def test_get(self):\n        result = self.r.get('name2')\n        print(result)\n        return result\n\n    def test_mset(self):\n        d = {\n            'name3' : 'user3',\n            'name4' : 'user4'\n        }\n        result = self.r.mset(d)\n        print(result)\n        return result\n\n    def test_mget(self):\n        l = ['name3', 'name4']\n        result = self.r.mget(l)\n        print(result)\n        return result\n\n\ndef main():\n    str_obj =  TestString()\n    str_obj.test_set()\n    str_obj.test_get()\n    str_obj.test_mset()\n    str_obj.test_mget()\n\nif __name__ == '__main__':\n    main()\n```\n\n","slug":"redis/python操作redis","published":1,"updated":"2020-04-10T16:46:16.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtumc005974uxu5quyy16","content":"<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ol>\n<li>安装好 <code>redis</code> 和 <code>RedisPy库</code></li>\n<li><code>RedisDump</code>  可以用来做数据导入或导出<h3 id=\"2-RedisPy库\"><a href=\"#2-RedisPy库\" class=\"headerlink\" title=\"2. RedisPy库\"></a>2. RedisPy库</h3>RedisPy库 提供两个类 <code>redis</code> 和 <code>StrictRedis</code> 来实现 Redis 的命令操作。</li>\n</ol>\n<p><code>StrictRedis</code> 实现了绝大部分官方命令，参数也一一对应。</p>\n<p><code>redis</code> 是 <code>StrictRedis</code> 的子类，主要功能是用于向后兼容旧版本库里的几个方法。</p>\n<p>推荐使用 <code>StrictRedis</code> </p>\n<h3 id=\"连接-Redis\"><a href=\"#连接-Redis\" class=\"headerlink\" title=\"连接 Redis\"></a>连接 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(host=&apos;localhost&apos;, port=6379, db=0, password=&apos;password&apos;) </span><br><span class=\"line\">redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p>使用<code>ConnectionPool</code> 连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis, ConnectionPool</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0, password=password)</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">#redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p><code>ConnectionPool</code> 还支持通过 url 来构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis://[:password]@host:port/db  # tcp</span><br><span class=\"line\">rediss://[:password]@host:port/db  # tcp +ssl </span><br><span class=\"line\">unix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接</span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = &apos;redis://:password@localhost:6379/0&apos;</span><br><span class=\"line\">pool = ConnectionPool.from_url(url)</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类-改写\"><a href=\"#类-改写\" class=\"headerlink\" title=\"类 改写\"></a>类 改写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis</span><br><span class=\"line\"></span><br><span class=\"line\">class TestString:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    def test_set(self):</span><br><span class=\"line\">        result = self.r.set(&apos;name2&apos;,&apos;weilai2&apos;) </span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_get(self):</span><br><span class=\"line\">        result = self.r.get(&apos;name2&apos;)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mset(self):</span><br><span class=\"line\">        d = &#123;</span><br><span class=\"line\">            &apos;name3&apos; : &apos;user3&apos;,</span><br><span class=\"line\">            &apos;name4&apos; : &apos;user4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = self.r.mset(d)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mget(self):</span><br><span class=\"line\">        l = [&apos;name3&apos;, &apos;name4&apos;]</span><br><span class=\"line\">        result = self.r.mget(l)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    str_obj =  TestString()</span><br><span class=\"line\">    str_obj.test_set()</span><br><span class=\"line\">    str_obj.test_get()</span><br><span class=\"line\">    str_obj.test_mset()</span><br><span class=\"line\">    str_obj.test_mget()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ol>\n<li>安装好 <code>redis</code> 和 <code>RedisPy库</code></li>\n<li><code>RedisDump</code>  可以用来做数据导入或导出<h3 id=\"2-RedisPy库\"><a href=\"#2-RedisPy库\" class=\"headerlink\" title=\"2. RedisPy库\"></a>2. RedisPy库</h3>RedisPy库 提供两个类 <code>redis</code> 和 <code>StrictRedis</code> 来实现 Redis 的命令操作。</li>\n</ol>\n<p><code>StrictRedis</code> 实现了绝大部分官方命令，参数也一一对应。</p>\n<p><code>redis</code> 是 <code>StrictRedis</code> 的子类，主要功能是用于向后兼容旧版本库里的几个方法。</p>\n<p>推荐使用 <code>StrictRedis</code> </p>\n<h3 id=\"连接-Redis\"><a href=\"#连接-Redis\" class=\"headerlink\" title=\"连接 Redis\"></a>连接 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(host=&apos;localhost&apos;, port=6379, db=0, password=&apos;password&apos;) </span><br><span class=\"line\">redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p>使用<code>ConnectionPool</code> 连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis, ConnectionPool</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0, password=password)</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">#redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p><code>ConnectionPool</code> 还支持通过 url 来构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis://[:password]@host:port/db  # tcp</span><br><span class=\"line\">rediss://[:password]@host:port/db  # tcp +ssl </span><br><span class=\"line\">unix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接</span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = &apos;redis://:password@localhost:6379/0&apos;</span><br><span class=\"line\">pool = ConnectionPool.from_url(url)</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类-改写\"><a href=\"#类-改写\" class=\"headerlink\" title=\"类 改写\"></a>类 改写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis</span><br><span class=\"line\"></span><br><span class=\"line\">class TestString:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    def test_set(self):</span><br><span class=\"line\">        result = self.r.set(&apos;name2&apos;,&apos;weilai2&apos;) </span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_get(self):</span><br><span class=\"line\">        result = self.r.get(&apos;name2&apos;)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mset(self):</span><br><span class=\"line\">        d = &#123;</span><br><span class=\"line\">            &apos;name3&apos; : &apos;user3&apos;,</span><br><span class=\"line\">            &apos;name4&apos; : &apos;user4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = self.r.mset(d)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mget(self):</span><br><span class=\"line\">        l = [&apos;name3&apos;, &apos;name4&apos;]</span><br><span class=\"line\">        result = self.r.mget(l)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    str_obj =  TestString()</span><br><span class=\"line\">    str_obj.test_set()</span><br><span class=\"line\">    str_obj.test_get()</span><br><span class=\"line\">    str_obj.test_mset()</span><br><span class=\"line\">    str_obj.test_mget()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n"},{"title":"(19) 网络编程","date":"2018-11-14T14:07:26.000Z","_content":"\n\nPython进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。\n\n# TCP/IP 简介\n\n互联网上每个计算机的唯一标识就是IP地址，类似`123.123.123.123`。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。\n\n**IP协议负责把数据从一台计算机通过网络发送到另一台计算机。**\n数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。\n\nIPv4地址实际上是一个32位整数，以字符串表示的。\nIP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读\nIPv6地址全部长度128位(bit)，每16位为一个双字节。\n\n**TCP协议则是建立在IP协议之上的。**\nTCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。\n\n# socket\n是电脑网络中进程间数据流的端点\n\n主要分为UDP和TCP两种通信方式\n## TCP编程\nSocket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。\n\n\n\n大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。\n\n创建一个基于TCP连接的Socket，可以这样做：\n```\n# 导入socket库:\nimport socket\n\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.baidu.com', 80))\n```\n创建Socket时，`AF_INET`指定使用IPv4协议，如果要用更先进的IPv6，就指定为`AF_INET6`。`SOCK_STREAM`指定使用面向流的TCP协议，这样，一个`Socket`对象就创建成功，但是还没有建立连接。\n\n客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名`www.sina.com.cn`自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。\n\n因此，连接新浪服务器的代码如下：\n```\ns.connect(('www.baidu.com', 80))\n```\n注意参数是一个tuple，包含地址和端口号。\n\n建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：\n```\n# 发送数据:\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\n```\nTCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。\n\n发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：\n```\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n```\n接收数据时，调用`recv(max)`方法，一次最多接收指定的字节数，因此，在一个`while`循环中反复接收，直到`recv()`返回空数据，表示接收完毕，退出循环。\n\n当我们接收完数据后，调用`close()`方法关闭Socket，这样，一次完整的网络通信就结束了：\n```\n# 关闭连接:\ns.close()\n```\n接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：\n```\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\n# python3.x版本，网络数据的发送接受都是byte类型，需要解码\n# 把接收的数据写入文件:\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。\n```\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('www.baidu.com', 80))\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\nbuffer = []\nwhile True:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\ns.close()\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n# 服务器\n\n和客户端编程相比，服务器编程就要复杂一些。\n\n服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。\n\n所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。\n\n但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。\n\n我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上`Hello`再发回去。\n\n首先，创建一个基于IPv4和TCP协议的Socket：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用`0.0.0.0`绑定到所有的网络地址，还可以用`127.0.0.1`绑定到本机地址。`127.0.0.1`是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。\n\n端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用`9999`这个端口号。请注意，小于`1024`的端口号必须要有管理员权限才能绑定：\n\n```\n# 监听端口:\ns.bind(('127.0.0.1', 9999))\n```\n\n紧接着，调用`listen()`方法开始监听端口，传入的参数指定等待连接的最大数量：\n\n```\ns.listen(5)\nprint('Waiting for connection...')\n```\n\n接下来，服务器程序通过一个永久循环来接受来自客户端的连接，`accept()`会等待并返回一个客户端的连接:\n\n```\n# 不断循环，不断接受数据\nwhile True:\n    # 接受一个新连接:\n    sock, addr = s.accept()\n    # 创建新线程来处理TCP连接:\n    t = threading.Thread(target=tcplink, args=(sock, addr))\n    t.start()\n\n```\n\n每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：\n\n```\ndef tcplink(sock, addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n\n # 不断接受客服端发来的消息\n    while True:\n        data = sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':  # 退出\n            break\n        sock.send(('Hello, %s!' % data.decode('utf-8')).encode('utf-8'))  #处理客户端数据\n    sock.close()\n    print('Connection from %s:%s closed.' % addr)\n```\n\n连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上`Hello`再发送给客户端。如果客户端发送了`exit`字符串，就直接关闭连接。\n\n要测试这个服务器程序，我们还需要编写一个客户端程序：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('127.0.0.1', 9999))\n# 接收欢迎消息:\nprint(s.recv(1024).decode('utf-8'))\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n\n    # 发送数据:\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit')\ns.close()\n\n```\n\n我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。\n\n### 小结\n\n用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。\n\n同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。\n\n#UDP 编程\n\nTCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。\n\n使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。\n\n虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。\n\n我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# 绑定端口:\ns.bind(('127.0.0.1', 9999))\n\n```\n\n创建Socket时，`SOCK_DGRAM`指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用`listen()`方法，而是直接接收来自任何客户端的数据：\n\n```\nprint('Bind UDP on 9999...')\nwhile True:\n    # 接收数据:\n    data, addr = s.recvfrom(1024)\n    print('Received from %s:%s.' % addr)\n    s.sendto(b'Hello, %s!' % data, addr)\n\n```\n\n`recvfrom()`方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用`sendto()`就可以把数据用UDP发给客户端。\n\n注意这里省掉了多线程，因为这个例子很简单。\n\n客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用`connect()`，直接通过`sendto()`给服务器发数据：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n    # 发送数据:\n    s.sendto(data, ('127.0.0.1', 9999))\n    # 接收数据:\n    print(s.recv(1024).decode('utf-8'))\ns.close()\n\n```\n\n从服务器接收数据仍然调用`recv()`方法。\n\n仍然用两个命令行分别启动服务器和客户端测试，结果如下：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n\nUDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。\n","source":"_posts/python基础/python网络编程.md","raw":"---\ntitle: (19) 网络编程\ndate: 2018-11-14 22:07:26\ntags:\ncategories: python基础\n---\n\n\nPython进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。\n\n# TCP/IP 简介\n\n互联网上每个计算机的唯一标识就是IP地址，类似`123.123.123.123`。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。\n\n**IP协议负责把数据从一台计算机通过网络发送到另一台计算机。**\n数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。\n\nIPv4地址实际上是一个32位整数，以字符串表示的。\nIP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读\nIPv6地址全部长度128位(bit)，每16位为一个双字节。\n\n**TCP协议则是建立在IP协议之上的。**\nTCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。\n\n# socket\n是电脑网络中进程间数据流的端点\n\n主要分为UDP和TCP两种通信方式\n## TCP编程\nSocket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。\n\n\n\n大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。\n\n创建一个基于TCP连接的Socket，可以这样做：\n```\n# 导入socket库:\nimport socket\n\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.baidu.com', 80))\n```\n创建Socket时，`AF_INET`指定使用IPv4协议，如果要用更先进的IPv6，就指定为`AF_INET6`。`SOCK_STREAM`指定使用面向流的TCP协议，这样，一个`Socket`对象就创建成功，但是还没有建立连接。\n\n客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名`www.sina.com.cn`自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。\n\n因此，连接新浪服务器的代码如下：\n```\ns.connect(('www.baidu.com', 80))\n```\n注意参数是一个tuple，包含地址和端口号。\n\n建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：\n```\n# 发送数据:\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\n```\nTCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。\n\n发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：\n```\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n```\n接收数据时，调用`recv(max)`方法，一次最多接收指定的字节数，因此，在一个`while`循环中反复接收，直到`recv()`返回空数据，表示接收完毕，退出循环。\n\n当我们接收完数据后，调用`close()`方法关闭Socket，这样，一次完整的网络通信就结束了：\n```\n# 关闭连接:\ns.close()\n```\n接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：\n```\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\n# python3.x版本，网络数据的发送接受都是byte类型，需要解码\n# 把接收的数据写入文件:\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。\n```\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('www.baidu.com', 80))\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\nbuffer = []\nwhile True:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\ns.close()\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n# 服务器\n\n和客户端编程相比，服务器编程就要复杂一些。\n\n服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。\n\n所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。\n\n但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。\n\n我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上`Hello`再发回去。\n\n首先，创建一个基于IPv4和TCP协议的Socket：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用`0.0.0.0`绑定到所有的网络地址，还可以用`127.0.0.1`绑定到本机地址。`127.0.0.1`是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。\n\n端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用`9999`这个端口号。请注意，小于`1024`的端口号必须要有管理员权限才能绑定：\n\n```\n# 监听端口:\ns.bind(('127.0.0.1', 9999))\n```\n\n紧接着，调用`listen()`方法开始监听端口，传入的参数指定等待连接的最大数量：\n\n```\ns.listen(5)\nprint('Waiting for connection...')\n```\n\n接下来，服务器程序通过一个永久循环来接受来自客户端的连接，`accept()`会等待并返回一个客户端的连接:\n\n```\n# 不断循环，不断接受数据\nwhile True:\n    # 接受一个新连接:\n    sock, addr = s.accept()\n    # 创建新线程来处理TCP连接:\n    t = threading.Thread(target=tcplink, args=(sock, addr))\n    t.start()\n\n```\n\n每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：\n\n```\ndef tcplink(sock, addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n\n # 不断接受客服端发来的消息\n    while True:\n        data = sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':  # 退出\n            break\n        sock.send(('Hello, %s!' % data.decode('utf-8')).encode('utf-8'))  #处理客户端数据\n    sock.close()\n    print('Connection from %s:%s closed.' % addr)\n```\n\n连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上`Hello`再发送给客户端。如果客户端发送了`exit`字符串，就直接关闭连接。\n\n要测试这个服务器程序，我们还需要编写一个客户端程序：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('127.0.0.1', 9999))\n# 接收欢迎消息:\nprint(s.recv(1024).decode('utf-8'))\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n\n    # 发送数据:\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit')\ns.close()\n\n```\n\n我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。\n\n### 小结\n\n用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。\n\n同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。\n\n#UDP 编程\n\nTCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。\n\n使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。\n\n虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。\n\n我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# 绑定端口:\ns.bind(('127.0.0.1', 9999))\n\n```\n\n创建Socket时，`SOCK_DGRAM`指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用`listen()`方法，而是直接接收来自任何客户端的数据：\n\n```\nprint('Bind UDP on 9999...')\nwhile True:\n    # 接收数据:\n    data, addr = s.recvfrom(1024)\n    print('Received from %s:%s.' % addr)\n    s.sendto(b'Hello, %s!' % data, addr)\n\n```\n\n`recvfrom()`方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用`sendto()`就可以把数据用UDP发给客户端。\n\n注意这里省掉了多线程，因为这个例子很简单。\n\n客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用`connect()`，直接通过`sendto()`给服务器发数据：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n    # 发送数据:\n    s.sendto(data, ('127.0.0.1', 9999))\n    # 接收数据:\n    print(s.recv(1024).decode('utf-8'))\ns.close()\n\n```\n\n从服务器接收数据仍然调用`recv()`方法。\n\n仍然用两个命令行分别启动服务器和客户端测试，结果如下：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n\nUDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。\n","slug":"python基础/python网络编程","published":1,"updated":"2020-04-10T16:46:16.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtumf005a74ux7a7fp5ie","content":"<p>Python进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。</p>\n<h1 id=\"TCP-IP-简介\"><a href=\"#TCP-IP-简介\" class=\"headerlink\" title=\"TCP/IP 简介\"></a>TCP/IP 简介</h1><p>互联网上每个计算机的唯一标识就是IP地址，类似<code>123.123.123.123</code>。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>\n<p><strong>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。</strong><br>数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>\n<p>IPv4地址实际上是一个32位整数，以字符串表示的。<br>IP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读<br>IPv6地址全部长度128位(bit)，每16位为一个双字节。</p>\n<p><strong>TCP协议则是建立在IP协议之上的。</strong><br>TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>\n<h1 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h1><p>是电脑网络中进程间数据流的端点</p>\n<p>主要分为UDP和TCP两种通信方式</p>\n<h2 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h2><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p>\n<p>大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>\n<p>创建一个基于TCP连接的Socket，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入socket库:</span><br><span class=\"line\">import socket</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个socket:</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>创建Socket时，<code>AF_INET</code>指定使用IPv4协议，如果要用更先进的IPv6，就指定为<code>AF_INET6</code>。<code>SOCK_STREAM</code>指定使用面向流的TCP协议，这样，一个<code>Socket</code>对象就创建成功，但是还没有建立连接。</p>\n<p>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名<code>www.sina.com.cn</code>自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>\n<p>因此，连接新浪服务器的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>注意参数是一个tuple，包含地址和端口号。</p>\n<p>建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送数据:</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>\n<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 接收数据:</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次最多接收1k字节:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br></pre></td></tr></table></figure></p>\n<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个<code>while</code>循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>\n<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭连接:</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\"># python3.x版本，网络数据的发送接受都是byte类型，需要解码</span><br><span class=\"line\"># 把接收的数据写入文件:</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<p>现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>和客户端编程相比，服务器编程就要复杂一些。</p>\n<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>\n<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</p>\n<p>但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p>\n<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上<code>Hello</code>再发回去。</p>\n<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<code>0.0.0.0</code>绑定到所有的网络地址，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>\n<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>9999</code>这个端口号。请注意，小于<code>1024</code>的端口号必须要有管理员权限才能绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>紧接着，调用<code>listen()</code>方法开始监听端口，传入的参数指定等待连接的最大数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen(5)</span><br><span class=\"line\">print(&apos;Waiting for connection...&apos;)</span><br></pre></td></tr></table></figure>\n<p>接下来，服务器程序通过一个永久循环来接受来自客户端的连接，<code>accept()</code>会等待并返回一个客户端的连接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不断循环，不断接受数据</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接受一个新连接:</span><br><span class=\"line\">    sock, addr = s.accept()</span><br><span class=\"line\">    # 创建新线程来处理TCP连接:</span><br><span class=\"line\">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tcplink(sock, addr):</span><br><span class=\"line\">    print(&apos;Accept new connection from %s:%s...&apos; % addr)</span><br><span class=\"line\">    sock.send(b&apos;Welcome!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 不断接受客服端发来的消息</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data = sock.recv(1024)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        if not data or data.decode(&apos;utf-8&apos;) == &apos;exit&apos;:  # 退出</span><br><span class=\"line\">            break</span><br><span class=\"line\">        sock.send((&apos;Hello, %s!&apos; % data.decode(&apos;utf-8&apos;)).encode(&apos;utf-8&apos;))  #处理客户端数据</span><br><span class=\"line\">    sock.close()</span><br><span class=\"line\">    print(&apos;Connection from %s:%s closed.&apos; % addr)</span><br></pre></td></tr></table></figure>\n<p>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上<code>Hello</code>再发送给客户端。如果客户端发送了<code>exit</code>字符串，就直接关闭连接。</p>\n<p>要测试这个服务器程序，我们还需要编写一个客户端程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\"># 接收欢迎消息:</span><br><span class=\"line\">print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\"></span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.send(data)</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.send(b&apos;exit&apos;)</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<p>需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>\n<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>\n<p>#UDP 编程</p>\n<p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>\n<p>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>\n<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>\n<p>我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"># 绑定端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>创建Socket时，<code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用<code>listen()</code>方法，而是直接接收来自任何客户端的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&apos;Bind UDP on 9999...&apos;)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    data, addr = s.recvfrom(1024)</span><br><span class=\"line\">    print(&apos;Received from %s:%s.&apos; % addr)</span><br><span class=\"line\">    s.sendto(b&apos;Hello, %s!&apos; % data, addr)</span><br></pre></td></tr></table></figure>\n<p><code>recvfrom()</code>方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>\n<p>注意这里省掉了多线程，因为这个例子很简单。</p>\n<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器发数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.sendto(data, (&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>从服务器接收数据仍然调用<code>recv()</code>方法。</p>\n<p>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>UDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。</p>\n<h1 id=\"TCP-IP-简介\"><a href=\"#TCP-IP-简介\" class=\"headerlink\" title=\"TCP/IP 简介\"></a>TCP/IP 简介</h1><p>互联网上每个计算机的唯一标识就是IP地址，类似<code>123.123.123.123</code>。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>\n<p><strong>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。</strong><br>数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>\n<p>IPv4地址实际上是一个32位整数，以字符串表示的。<br>IP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读<br>IPv6地址全部长度128位(bit)，每16位为一个双字节。</p>\n<p><strong>TCP协议则是建立在IP协议之上的。</strong><br>TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>\n<h1 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h1><p>是电脑网络中进程间数据流的端点</p>\n<p>主要分为UDP和TCP两种通信方式</p>\n<h2 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h2><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p>\n<p>大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>\n<p>创建一个基于TCP连接的Socket，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入socket库:</span><br><span class=\"line\">import socket</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个socket:</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>创建Socket时，<code>AF_INET</code>指定使用IPv4协议，如果要用更先进的IPv6，就指定为<code>AF_INET6</code>。<code>SOCK_STREAM</code>指定使用面向流的TCP协议，这样，一个<code>Socket</code>对象就创建成功，但是还没有建立连接。</p>\n<p>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名<code>www.sina.com.cn</code>自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>\n<p>因此，连接新浪服务器的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>注意参数是一个tuple，包含地址和端口号。</p>\n<p>建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送数据:</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>\n<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 接收数据:</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次最多接收1k字节:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br></pre></td></tr></table></figure></p>\n<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个<code>while</code>循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>\n<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭连接:</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\"># python3.x版本，网络数据的发送接受都是byte类型，需要解码</span><br><span class=\"line\"># 把接收的数据写入文件:</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<p>现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>和客户端编程相比，服务器编程就要复杂一些。</p>\n<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>\n<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</p>\n<p>但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p>\n<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上<code>Hello</code>再发回去。</p>\n<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<code>0.0.0.0</code>绑定到所有的网络地址，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>\n<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>9999</code>这个端口号。请注意，小于<code>1024</code>的端口号必须要有管理员权限才能绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>紧接着，调用<code>listen()</code>方法开始监听端口，传入的参数指定等待连接的最大数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen(5)</span><br><span class=\"line\">print(&apos;Waiting for connection...&apos;)</span><br></pre></td></tr></table></figure>\n<p>接下来，服务器程序通过一个永久循环来接受来自客户端的连接，<code>accept()</code>会等待并返回一个客户端的连接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不断循环，不断接受数据</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接受一个新连接:</span><br><span class=\"line\">    sock, addr = s.accept()</span><br><span class=\"line\">    # 创建新线程来处理TCP连接:</span><br><span class=\"line\">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tcplink(sock, addr):</span><br><span class=\"line\">    print(&apos;Accept new connection from %s:%s...&apos; % addr)</span><br><span class=\"line\">    sock.send(b&apos;Welcome!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 不断接受客服端发来的消息</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data = sock.recv(1024)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        if not data or data.decode(&apos;utf-8&apos;) == &apos;exit&apos;:  # 退出</span><br><span class=\"line\">            break</span><br><span class=\"line\">        sock.send((&apos;Hello, %s!&apos; % data.decode(&apos;utf-8&apos;)).encode(&apos;utf-8&apos;))  #处理客户端数据</span><br><span class=\"line\">    sock.close()</span><br><span class=\"line\">    print(&apos;Connection from %s:%s closed.&apos; % addr)</span><br></pre></td></tr></table></figure>\n<p>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上<code>Hello</code>再发送给客户端。如果客户端发送了<code>exit</code>字符串，就直接关闭连接。</p>\n<p>要测试这个服务器程序，我们还需要编写一个客户端程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\"># 接收欢迎消息:</span><br><span class=\"line\">print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\"></span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.send(data)</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.send(b&apos;exit&apos;)</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<p>需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>\n<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>\n<p>#UDP 编程</p>\n<p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>\n<p>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>\n<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>\n<p>我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"># 绑定端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>创建Socket时，<code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用<code>listen()</code>方法，而是直接接收来自任何客户端的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&apos;Bind UDP on 9999...&apos;)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    data, addr = s.recvfrom(1024)</span><br><span class=\"line\">    print(&apos;Received from %s:%s.&apos; % addr)</span><br><span class=\"line\">    s.sendto(b&apos;Hello, %s!&apos; % data, addr)</span><br></pre></td></tr></table></figure>\n<p><code>recvfrom()</code>方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>\n<p>注意这里省掉了多线程，因为这个例子很简单。</p>\n<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器发数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.sendto(data, (&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>从服务器接收数据仍然调用<code>recv()</code>方法。</p>\n<p>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>UDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>\n"},{"title":"(5) python项目的组织结构","date":"2018-11-14T13:59:11.000Z","_content":"包、模块、类→函数、变量\n\n**序列解包**\n```\n# a=1\n# b=2\n# c=3\n# d,e,f=4,5,6  \n```\n**定义一个函数**\n```\ndef damage(skill1,skill2): \n    damage1 = skill1*3\n    damage2 = skill2*2+10\n    return damage1,damage2 (不return，就是返回none)\n\n\nskill1s,skill2s=damage(2,3)\nprint(skill1s,skill2s)\n```\n```\ndef add(x,y):\n    result=x+y\n    return result\n    \ndef print_code(code):\n    print(code)\n    return\n\na=add(1,2)\nprint_code('python')\nprint(a)\n```\n**函数参数**\n```\ndef print_student_files(name, gender,age,adress):\n    print(\"I'm \"+name)\n    print(\"I'm \"+age+'years old')\n    print(\"I'm \"+ gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files('weilai','man','18','hubei')\n\ndef print_student_files1(name, gender='man',age=18,adress='hubei'):\n    print(\"I'm \"+name)\n    print(\"I'm \"+str(age)+ 'years old')\n    print(\"I'm \"+gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files1('weilai','woman',18,'hubei')\n#重点：\n#1）必须参数:形参(例如name)，实参('weilai','man',18,'hubei')\n#2）关键字参数\n#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数\n# 注意事项:1、形参没有给默认值的，函数调用时得给一个实参\n#         2、非默认参数不能放在默认参数之后（调用时，同理）\n#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）\n#         4、给了默认参数，函数调用时优先使用实参\n```\n**import**\n```\nimport _init_\nprint(_init_.b)\n\n# 注意事项：import 与 from import\n#         1）如 print t包C7.py中的a\n#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）\n#         等价于from t import c7.a ~print（c7.a）\n#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）\n\n\n#         3）包和模块不会被重复导入\n        # 4）避免循环导入\n        # 5）from t.c7 import * (导入C7中所有的变量)\n        # 6）from t.c7 impor _all_=['a','c'] (导入C7中'a','c'两个变量） \n```\n**if**\n```\nmood=True \nif mood:\n    print('go to left')\nelse :\n    print('go to right')\n```\n```\na=1\nb=2\nc=3\nd,e,f=4,5,6   #序列解包\nif d<a:\n    print('go to left')\nelif d<b:\n    print('go to left')\nelif d<c:\n    print('go to left')\nelif d<e:\n    print('go to left')\n```\n\n**for**\n```\na=[1,2,3,4,5]\nfor x in a:\n    if x==3:\n        break \n    print(x)\n\n    #     continue\n    # print(x)\n\na = [['apple','orange','banana'],(1,2,3)]\nfor x in a:\n    for y in x: \n        print(y)\n    print(x)\n\n\nfor x in range(0,10):\n    print(x)\nfor x in range(0,10,2):\n    print(x)\n```\n 注意事项：\n        1)break和continue区别：break到3就停止，continue跳过3继续\n       2）注意print()函数的位置，对结果的影响\n       3）递归用while，遍历用for\n","source":"_posts/python基础/python项目的组织结构.md","raw":"---\ntitle: (5) python项目的组织结构\ndate: 2018-11-14 21:59:11\ntags:\ncategories: python基础\n---\n包、模块、类→函数、变量\n\n**序列解包**\n```\n# a=1\n# b=2\n# c=3\n# d,e,f=4,5,6  \n```\n**定义一个函数**\n```\ndef damage(skill1,skill2): \n    damage1 = skill1*3\n    damage2 = skill2*2+10\n    return damage1,damage2 (不return，就是返回none)\n\n\nskill1s,skill2s=damage(2,3)\nprint(skill1s,skill2s)\n```\n```\ndef add(x,y):\n    result=x+y\n    return result\n    \ndef print_code(code):\n    print(code)\n    return\n\na=add(1,2)\nprint_code('python')\nprint(a)\n```\n**函数参数**\n```\ndef print_student_files(name, gender,age,adress):\n    print(\"I'm \"+name)\n    print(\"I'm \"+age+'years old')\n    print(\"I'm \"+ gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files('weilai','man','18','hubei')\n\ndef print_student_files1(name, gender='man',age=18,adress='hubei'):\n    print(\"I'm \"+name)\n    print(\"I'm \"+str(age)+ 'years old')\n    print(\"I'm \"+gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files1('weilai','woman',18,'hubei')\n#重点：\n#1）必须参数:形参(例如name)，实参('weilai','man',18,'hubei')\n#2）关键字参数\n#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数\n# 注意事项:1、形参没有给默认值的，函数调用时得给一个实参\n#         2、非默认参数不能放在默认参数之后（调用时，同理）\n#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）\n#         4、给了默认参数，函数调用时优先使用实参\n```\n**import**\n```\nimport _init_\nprint(_init_.b)\n\n# 注意事项：import 与 from import\n#         1）如 print t包C7.py中的a\n#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）\n#         等价于from t import c7.a ~print（c7.a）\n#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）\n\n\n#         3）包和模块不会被重复导入\n        # 4）避免循环导入\n        # 5）from t.c7 import * (导入C7中所有的变量)\n        # 6）from t.c7 impor _all_=['a','c'] (导入C7中'a','c'两个变量） \n```\n**if**\n```\nmood=True \nif mood:\n    print('go to left')\nelse :\n    print('go to right')\n```\n```\na=1\nb=2\nc=3\nd,e,f=4,5,6   #序列解包\nif d<a:\n    print('go to left')\nelif d<b:\n    print('go to left')\nelif d<c:\n    print('go to left')\nelif d<e:\n    print('go to left')\n```\n\n**for**\n```\na=[1,2,3,4,5]\nfor x in a:\n    if x==3:\n        break \n    print(x)\n\n    #     continue\n    # print(x)\n\na = [['apple','orange','banana'],(1,2,3)]\nfor x in a:\n    for y in x: \n        print(y)\n    print(x)\n\n\nfor x in range(0,10):\n    print(x)\nfor x in range(0,10,2):\n    print(x)\n```\n 注意事项：\n        1)break和continue区别：break到3就停止，continue跳过3继续\n       2）注意print()函数的位置，对结果的影响\n       3）递归用while，遍历用for\n","slug":"python基础/python项目的组织结构","published":1,"updated":"2020-04-10T16:46:16.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtumm005d74ux9tf0xmo0","content":"<p>包、模块、类→函数、变量</p>\n<p><strong>序列解包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a=1</span><br><span class=\"line\"># b=2</span><br><span class=\"line\"># c=3</span><br><span class=\"line\"># d,e,f=4,5,6</span><br></pre></td></tr></table></figure></p>\n<p><strong>定义一个函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def damage(skill1,skill2): </span><br><span class=\"line\">    damage1 = skill1*3</span><br><span class=\"line\">    damage2 = skill2*2+10</span><br><span class=\"line\">    return damage1,damage2 (不return，就是返回none)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">skill1s,skill2s=damage(2,3)</span><br><span class=\"line\">print(skill1s,skill2s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">    </span><br><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">a=add(1,2)</span><br><span class=\"line\">print_code(&apos;python&apos;)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p><strong>函数参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_student_files(name, gender,age,adress):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+age+&apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+ gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files(&apos;weilai&apos;,&apos;man&apos;,&apos;18&apos;,&apos;hubei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def print_student_files1(name, gender=&apos;man&apos;,age=18,adress=&apos;hubei&apos;):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+str(age)+ &apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files1(&apos;weilai&apos;,&apos;woman&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#重点：</span><br><span class=\"line\">#1）必须参数:形参(例如name)，实参(&apos;weilai&apos;,&apos;man&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#2）关键字参数</span><br><span class=\"line\">#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数</span><br><span class=\"line\"># 注意事项:1、形参没有给默认值的，函数调用时得给一个实参</span><br><span class=\"line\">#         2、非默认参数不能放在默认参数之后（调用时，同理）</span><br><span class=\"line\">#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）</span><br><span class=\"line\">#         4、给了默认参数，函数调用时优先使用实参</span><br></pre></td></tr></table></figure></p>\n<p><strong>import</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _init_</span><br><span class=\"line\">print(_init_.b)</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意事项：import 与 from import</span><br><span class=\"line\">#         1）如 print t包C7.py中的a</span><br><span class=\"line\">#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）</span><br><span class=\"line\">#         等价于from t import c7.a ~print（c7.a）</span><br><span class=\"line\">#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#         3）包和模块不会被重复导入</span><br><span class=\"line\">        # 4）避免循环导入</span><br><span class=\"line\">        # 5）from t.c7 import * (导入C7中所有的变量)</span><br><span class=\"line\">        # 6）from t.c7 impor _all_=[&apos;a&apos;,&apos;c&apos;] (导入C7中&apos;a&apos;,&apos;c&apos;两个变量）</span><br></pre></td></tr></table></figure></p>\n<p><strong>if</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mood=True </span><br><span class=\"line\">if mood:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">else :</span><br><span class=\"line\">    print(&apos;go to right&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\">c=3</span><br><span class=\"line\">d,e,f=4,5,6   #序列解包</span><br><span class=\"line\">if d&lt;a:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;b:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;c:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;e:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>for</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    if x==3:</span><br><span class=\"line\">        break </span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    #     continue</span><br><span class=\"line\">    # print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [[&apos;apple&apos;,&apos;orange&apos;,&apos;banana&apos;],(1,2,3)]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    for y in x: </span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for x in range(0,10):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">for x in range(0,10,2):</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure></p>\n<p> 注意事项：<br>        1)break和continue区别：break到3就停止，continue跳过3继续<br>       2）注意print()函数的位置，对结果的影响<br>       3）递归用while，遍历用for</p>\n","site":{"data":{}},"excerpt":"","more":"<p>包、模块、类→函数、变量</p>\n<p><strong>序列解包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a=1</span><br><span class=\"line\"># b=2</span><br><span class=\"line\"># c=3</span><br><span class=\"line\"># d,e,f=4,5,6</span><br></pre></td></tr></table></figure></p>\n<p><strong>定义一个函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def damage(skill1,skill2): </span><br><span class=\"line\">    damage1 = skill1*3</span><br><span class=\"line\">    damage2 = skill2*2+10</span><br><span class=\"line\">    return damage1,damage2 (不return，就是返回none)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">skill1s,skill2s=damage(2,3)</span><br><span class=\"line\">print(skill1s,skill2s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">    </span><br><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">a=add(1,2)</span><br><span class=\"line\">print_code(&apos;python&apos;)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p><strong>函数参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_student_files(name, gender,age,adress):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+age+&apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+ gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files(&apos;weilai&apos;,&apos;man&apos;,&apos;18&apos;,&apos;hubei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def print_student_files1(name, gender=&apos;man&apos;,age=18,adress=&apos;hubei&apos;):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+str(age)+ &apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files1(&apos;weilai&apos;,&apos;woman&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#重点：</span><br><span class=\"line\">#1）必须参数:形参(例如name)，实参(&apos;weilai&apos;,&apos;man&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#2）关键字参数</span><br><span class=\"line\">#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数</span><br><span class=\"line\"># 注意事项:1、形参没有给默认值的，函数调用时得给一个实参</span><br><span class=\"line\">#         2、非默认参数不能放在默认参数之后（调用时，同理）</span><br><span class=\"line\">#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）</span><br><span class=\"line\">#         4、给了默认参数，函数调用时优先使用实参</span><br></pre></td></tr></table></figure></p>\n<p><strong>import</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _init_</span><br><span class=\"line\">print(_init_.b)</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意事项：import 与 from import</span><br><span class=\"line\">#         1）如 print t包C7.py中的a</span><br><span class=\"line\">#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）</span><br><span class=\"line\">#         等价于from t import c7.a ~print（c7.a）</span><br><span class=\"line\">#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#         3）包和模块不会被重复导入</span><br><span class=\"line\">        # 4）避免循环导入</span><br><span class=\"line\">        # 5）from t.c7 import * (导入C7中所有的变量)</span><br><span class=\"line\">        # 6）from t.c7 impor _all_=[&apos;a&apos;,&apos;c&apos;] (导入C7中&apos;a&apos;,&apos;c&apos;两个变量）</span><br></pre></td></tr></table></figure></p>\n<p><strong>if</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mood=True </span><br><span class=\"line\">if mood:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">else :</span><br><span class=\"line\">    print(&apos;go to right&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\">c=3</span><br><span class=\"line\">d,e,f=4,5,6   #序列解包</span><br><span class=\"line\">if d&lt;a:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;b:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;c:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;e:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>for</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    if x==3:</span><br><span class=\"line\">        break </span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    #     continue</span><br><span class=\"line\">    # print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [[&apos;apple&apos;,&apos;orange&apos;,&apos;banana&apos;],(1,2,3)]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    for y in x: </span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for x in range(0,10):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">for x in range(0,10,2):</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure></p>\n<p> 注意事项：<br>        1)break和continue区别：break到3就停止，continue跳过3继续<br>       2）注意print()函数的位置，对结果的影响<br>       3）递归用while，遍历用for</p>\n"},{"title":"(16) python补充","date":"2018-11-14T14:01:49.000Z","_content":"```\nnum2 = 100\nsum1 = lambda num1 : num1 + num2 \nnum2 = 10000\nsum2 = lambda num1 : num1 + num2 \n\nprint( sum1( 1 ) )#10001\nprint( sum2( 1 ) )#10001\n```\nlambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。\n**打印乘法表**\n**占位符**\n```\n#方法1\nfor i in range(1, 10):\n    for j in range(1, i+1):\n # end='' 意思是末尾不换行，加空格\n        print('{}x{}={}\\t'.format(i, j, i*j), end='') \n    print()\n\n#方法2\nfor m in range(1, 10):\n    for n in range(1, m+1):\n        print('%d*%d=%d\\t'%(n,m,n*m), end='')\n \n    print()\n```\n**while 与for (待补充)**\n\n\n\n**从键盘获取输入信息：input**\n在 Python 中可以使用 input 函数从键盘等待用户的输入\n用户输入的 任何内容 Python 都认为是一个 字符串\n\n**格式化输出：print**\n如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符\n% 被称为 格式化操作符，专门用于处理字符串中的格式\n包含 % 的字符串，被称为 格式化字符串\n% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符\n>格式化字符   含义\n%s\t   字符串\n%d\t   有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全\n%f\t  浮点数，%.2f 表示小数点后只显示两位\n%%\t  输出 %\n\n**随机数生成**\n```\nimport random\n#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数\n#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b\n\nrandom.randint(12, 20)  # 生成的随机数n: 12 <= n <= 20   \nrandom.randint(20, 20)  # 结果永远是 20   \nrandom.randint(20, 10)  # 该语句是错误的，下限必须小于上限。\n```\n随机数的小游戏\n\n```\nimport random\n\n# 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）\nplayer = int(input(\"请输入您要出的拳 石头（1）／剪刀（2）／布（3）：\"))\n\n# 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能\ncomputer = random.randint(1, 3)\n\nprint(\"玩家选择的拳头是 %d - 电脑出的拳是 %d\" % (player, computer))\n\n# 比较胜负\n# 1 石头 胜 剪刀\n# 2 剪刀 胜 布\n# 3 布 胜 石头\n# if (()\n#        or ()\n#        or ()):\nif ((player == 1 and computer == 2)\n        or (player == 2 and computer == 3)\n        or (player == 3 and computer == 1)):\n\n    print(\"欧耶，电脑弱爆了！\")\n# 平局\nelif player == computer:\n    print(\"真是心有灵犀啊，再来一盘\")\n# 其他的情况就是电脑获胜\nelse:\n    print(\"不服气，我们决战到天明！\")\n```\n```\nimport random\nguess_list = [\"石头\", \"剪刀\", \"布\"]\nwin_combination = [[\"布\", \"石头\"], [\"石头\", \"剪刀\"], [\"剪刀\", \"布\"]]\n\nwhile True:\n    computer = random.choice(guess_list)\n    people = input('请输入：石头,剪刀,布\\n').strip()\n    if people not in guess_list:\n        continue\n    elif computer == people:\n        print (\"平手，再玩一次！\")\n    elif [computer, people] in win_combination:\n        print (\"电脑获胜，再玩，人获胜才能退出！\")\n    else:\n        print (\"人获胜！\")\n        break\n```\n**函数**\n```    \ndef print_code(code):\n    print(code)\n    #return None\nprint_code('python')  # python\n\ndef add(x,y):\n    result=x+y\n    return result\na = add(1,2)\nprint(a)  # 3\n\ndef add1(x,y):\n    result = x + y\n    print(result)\nadd1(1,2)  # 3\n\ndef add2(x,y):\n    result = x + y\n    print('%d + %d = %d'%(x,y,x+y))\nadd2(1,2)  # 1 + 2 = 3\n```\n####多值参数\n有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。\n\n**python 中有 两种 多值参数：**\n>参数名前增加 一个 * 可以接收 元组\n参数名前增加 两个 ** 可以接收 字典\n\n**一般在给多值参数命名时，习惯使用以下两个名字**\n>*args —— 存放 元组 参数，前面有一个 *\n**kwargs —— 存放 字典 参数，前面有两个 **\n\n```\ndef demo(num, *args, **kwargs):\n\n    print(num)\n    print(args)\n    print(kwargs)\n\n\ndemo(1, 2, 3, 4, 5, name=\"小明\", age=18, gender=True)\n#1\n#(2, 3, 4, 5)\n#{'name': '小明', 'age': 18, 'gender': True}\n\ndemo(1,(2,3,4,5),{\"name\":\"小明\", \"age\":18, \"gender\":True})\n#1\n#((2, 3, 4, 5), {'name': '小明', 'age': 18, 'gender': True})\n#{}\n\ndemo(1,(2,3,4,5), name=\"小明\", age=18, gender=True)\n#1\n#((2, 3, 4, 5),)\n#{'name': '小明', 'age': 18, 'gender': True}\n```\n**元组和字典的拆包**\n在调用带有多值参数的函数时，如果希望：\n将一个 元组变量，直接传递给 args\n将一个 字典变量，直接传递给 kwargs\n就可以使用 拆包，简化参数的传递，拆包 的方式是：\n在 元组变量前，增加 一个 *\n在 字典变量前，增加 两个 *\n```\ndef demo(*args, **kwargs):\n\n    print(args)\n    print(kwargs)\n\n# 需要将一个元组变量/字典变量传递给函数对应的参数\ngl_nums = (1, 2, 3)\ngl_xiaoming = {\"name\": \"小明\", \"age\": 18}\n\n# 会把 num_tuple 和 xiaoming 作为元组传递个 args\ndemo(gl_nums, gl_xiaoming)\n#((1, 2, 3), {'name': '小明', 'age': 18})\n#{}\ndemo(*gl_nums, **gl_xiaoming)\n#(1, 2, 3)\n#{'name': '小明', 'age': 18}\n```\n\n**函数的返回值**\n```\n# Python 专有，利用元组交换两个变量的值\na, b = b, a\n```\n\n\n#面向对象(补充)\n","source":"_posts/python基础/python补充.md","raw":"\n---\ntitle: (16) python补充\ndate: 2018-11-14 22:01:49\ntags:\ncategories: python基础\n---\n```\nnum2 = 100\nsum1 = lambda num1 : num1 + num2 \nnum2 = 10000\nsum2 = lambda num1 : num1 + num2 \n\nprint( sum1( 1 ) )#10001\nprint( sum2( 1 ) )#10001\n```\nlambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。\n**打印乘法表**\n**占位符**\n```\n#方法1\nfor i in range(1, 10):\n    for j in range(1, i+1):\n # end='' 意思是末尾不换行，加空格\n        print('{}x{}={}\\t'.format(i, j, i*j), end='') \n    print()\n\n#方法2\nfor m in range(1, 10):\n    for n in range(1, m+1):\n        print('%d*%d=%d\\t'%(n,m,n*m), end='')\n \n    print()\n```\n**while 与for (待补充)**\n\n\n\n**从键盘获取输入信息：input**\n在 Python 中可以使用 input 函数从键盘等待用户的输入\n用户输入的 任何内容 Python 都认为是一个 字符串\n\n**格式化输出：print**\n如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符\n% 被称为 格式化操作符，专门用于处理字符串中的格式\n包含 % 的字符串，被称为 格式化字符串\n% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符\n>格式化字符   含义\n%s\t   字符串\n%d\t   有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全\n%f\t  浮点数，%.2f 表示小数点后只显示两位\n%%\t  输出 %\n\n**随机数生成**\n```\nimport random\n#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数\n#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b\n\nrandom.randint(12, 20)  # 生成的随机数n: 12 <= n <= 20   \nrandom.randint(20, 20)  # 结果永远是 20   \nrandom.randint(20, 10)  # 该语句是错误的，下限必须小于上限。\n```\n随机数的小游戏\n\n```\nimport random\n\n# 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）\nplayer = int(input(\"请输入您要出的拳 石头（1）／剪刀（2）／布（3）：\"))\n\n# 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能\ncomputer = random.randint(1, 3)\n\nprint(\"玩家选择的拳头是 %d - 电脑出的拳是 %d\" % (player, computer))\n\n# 比较胜负\n# 1 石头 胜 剪刀\n# 2 剪刀 胜 布\n# 3 布 胜 石头\n# if (()\n#        or ()\n#        or ()):\nif ((player == 1 and computer == 2)\n        or (player == 2 and computer == 3)\n        or (player == 3 and computer == 1)):\n\n    print(\"欧耶，电脑弱爆了！\")\n# 平局\nelif player == computer:\n    print(\"真是心有灵犀啊，再来一盘\")\n# 其他的情况就是电脑获胜\nelse:\n    print(\"不服气，我们决战到天明！\")\n```\n```\nimport random\nguess_list = [\"石头\", \"剪刀\", \"布\"]\nwin_combination = [[\"布\", \"石头\"], [\"石头\", \"剪刀\"], [\"剪刀\", \"布\"]]\n\nwhile True:\n    computer = random.choice(guess_list)\n    people = input('请输入：石头,剪刀,布\\n').strip()\n    if people not in guess_list:\n        continue\n    elif computer == people:\n        print (\"平手，再玩一次！\")\n    elif [computer, people] in win_combination:\n        print (\"电脑获胜，再玩，人获胜才能退出！\")\n    else:\n        print (\"人获胜！\")\n        break\n```\n**函数**\n```    \ndef print_code(code):\n    print(code)\n    #return None\nprint_code('python')  # python\n\ndef add(x,y):\n    result=x+y\n    return result\na = add(1,2)\nprint(a)  # 3\n\ndef add1(x,y):\n    result = x + y\n    print(result)\nadd1(1,2)  # 3\n\ndef add2(x,y):\n    result = x + y\n    print('%d + %d = %d'%(x,y,x+y))\nadd2(1,2)  # 1 + 2 = 3\n```\n####多值参数\n有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。\n\n**python 中有 两种 多值参数：**\n>参数名前增加 一个 * 可以接收 元组\n参数名前增加 两个 ** 可以接收 字典\n\n**一般在给多值参数命名时，习惯使用以下两个名字**\n>*args —— 存放 元组 参数，前面有一个 *\n**kwargs —— 存放 字典 参数，前面有两个 **\n\n```\ndef demo(num, *args, **kwargs):\n\n    print(num)\n    print(args)\n    print(kwargs)\n\n\ndemo(1, 2, 3, 4, 5, name=\"小明\", age=18, gender=True)\n#1\n#(2, 3, 4, 5)\n#{'name': '小明', 'age': 18, 'gender': True}\n\ndemo(1,(2,3,4,5),{\"name\":\"小明\", \"age\":18, \"gender\":True})\n#1\n#((2, 3, 4, 5), {'name': '小明', 'age': 18, 'gender': True})\n#{}\n\ndemo(1,(2,3,4,5), name=\"小明\", age=18, gender=True)\n#1\n#((2, 3, 4, 5),)\n#{'name': '小明', 'age': 18, 'gender': True}\n```\n**元组和字典的拆包**\n在调用带有多值参数的函数时，如果希望：\n将一个 元组变量，直接传递给 args\n将一个 字典变量，直接传递给 kwargs\n就可以使用 拆包，简化参数的传递，拆包 的方式是：\n在 元组变量前，增加 一个 *\n在 字典变量前，增加 两个 *\n```\ndef demo(*args, **kwargs):\n\n    print(args)\n    print(kwargs)\n\n# 需要将一个元组变量/字典变量传递给函数对应的参数\ngl_nums = (1, 2, 3)\ngl_xiaoming = {\"name\": \"小明\", \"age\": 18}\n\n# 会把 num_tuple 和 xiaoming 作为元组传递个 args\ndemo(gl_nums, gl_xiaoming)\n#((1, 2, 3), {'name': '小明', 'age': 18})\n#{}\ndemo(*gl_nums, **gl_xiaoming)\n#(1, 2, 3)\n#{'name': '小明', 'age': 18}\n```\n\n**函数的返回值**\n```\n# Python 专有，利用元组交换两个变量的值\na, b = b, a\n```\n\n\n#面向对象(补充)\n","slug":"python基础/python补充","published":1,"updated":"2020-04-10T16:46:16.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtumu005h74uxw45lik5l","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num2 = 100</span><br><span class=\"line\">sum1 = lambda num1 : num1 + num2 </span><br><span class=\"line\">num2 = 10000</span><br><span class=\"line\">sum2 = lambda num1 : num1 + num2 </span><br><span class=\"line\"></span><br><span class=\"line\">print( sum1( 1 ) )#10001</span><br><span class=\"line\">print( sum2( 1 ) )#10001</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。<br><strong>打印乘法表</strong><br><strong>占位符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方法1</span><br><span class=\"line\">for i in range(1, 10):</span><br><span class=\"line\">    for j in range(1, i+1):</span><br><span class=\"line\"> # end=&apos;&apos; 意思是末尾不换行，加空格</span><br><span class=\"line\">        print(&apos;&#123;&#125;x&#123;&#125;=&#123;&#125;\\t&apos;.format(i, j, i*j), end=&apos;&apos;) </span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">#方法2</span><br><span class=\"line\">for m in range(1, 10):</span><br><span class=\"line\">    for n in range(1, m+1):</span><br><span class=\"line\">        print(&apos;%d*%d=%d\\t&apos;%(n,m,n*m), end=&apos;&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p><strong>while 与for (待补充)</strong></p>\n<p><strong>从键盘获取输入信息：input</strong><br>在 Python 中可以使用 input 函数从键盘等待用户的输入<br>用户输入的 任何内容 Python 都认为是一个 字符串</p>\n<p><strong>格式化输出：print</strong><br>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符<br>% 被称为 格式化操作符，专门用于处理字符串中的格式<br>包含 % 的字符串，被称为 格式化字符串<br>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</p>\n<blockquote>\n<p>格式化字符   含义<br>%s       字符串<br>%d       有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全<br>%f      浮点数，%.2f 表示小数点后只显示两位<br>%%      输出 %</p>\n</blockquote>\n<p><strong>随机数生成</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数</span><br><span class=\"line\">#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b</span><br><span class=\"line\"></span><br><span class=\"line\">random.randint(12, 20)  # 生成的随机数n: 12 &lt;= n &lt;= 20   </span><br><span class=\"line\">random.randint(20, 20)  # 结果永远是 20   </span><br><span class=\"line\">random.randint(20, 10)  # 该语句是错误的，下限必须小于上限。</span><br></pre></td></tr></table></figure></p>\n<p>随机数的小游戏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span><br><span class=\"line\">player = int(input(&quot;请输入您要出的拳 石头（1）／剪刀（2）／布（3）：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能</span><br><span class=\"line\">computer = random.randint(1, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;玩家选择的拳头是 %d - 电脑出的拳是 %d&quot; % (player, computer))</span><br><span class=\"line\"></span><br><span class=\"line\"># 比较胜负</span><br><span class=\"line\"># 1 石头 胜 剪刀</span><br><span class=\"line\"># 2 剪刀 胜 布</span><br><span class=\"line\"># 3 布 胜 石头</span><br><span class=\"line\"># if (()</span><br><span class=\"line\">#        or ()</span><br><span class=\"line\">#        or ()):</span><br><span class=\"line\">if ((player == 1 and computer == 2)</span><br><span class=\"line\">        or (player == 2 and computer == 3)</span><br><span class=\"line\">        or (player == 3 and computer == 1)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;欧耶，电脑弱爆了！&quot;)</span><br><span class=\"line\"># 平局</span><br><span class=\"line\">elif player == computer:</span><br><span class=\"line\">    print(&quot;真是心有灵犀啊，再来一盘&quot;)</span><br><span class=\"line\"># 其他的情况就是电脑获胜</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不服气，我们决战到天明！&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">guess_list = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class=\"line\">win_combination = [[&quot;布&quot;, &quot;石头&quot;], [&quot;石头&quot;, &quot;剪刀&quot;], [&quot;剪刀&quot;, &quot;布&quot;]]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    computer = random.choice(guess_list)</span><br><span class=\"line\">    people = input(&apos;请输入：石头,剪刀,布\\n&apos;).strip()</span><br><span class=\"line\">    if people not in guess_list:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    elif computer == people:</span><br><span class=\"line\">        print (&quot;平手，再玩一次！&quot;)</span><br><span class=\"line\">    elif [computer, people] in win_combination:</span><br><span class=\"line\">        print (&quot;电脑获胜，再玩，人获胜才能退出！&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;人获胜！&quot;)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    #return None</span><br><span class=\"line\">print_code(&apos;python&apos;)  # python</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">a = add(1,2)</span><br><span class=\"line\">print(a)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add1(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">add1(1,2)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add2(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(&apos;%d + %d = %d&apos;%(x,y,x+y))</span><br><span class=\"line\">add2(1,2)  # 1 + 2 = 3</span><br></pre></td></tr></table></figure></p>\n<p>####多值参数<br>有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。</p>\n<p><strong>python 中有 两种 多值参数：</strong></p>\n<blockquote>\n<p>参数名前增加 一个 * 可以接收 元组<br>参数名前增加 两个 ** 可以接收 字典</p>\n</blockquote>\n<p><strong>一般在给多值参数命名时，习惯使用以下两个名字</strong></p>\n<blockquote>\n<p><em>args —— 存放 元组 参数，前面有一个 </em><br><strong>kwargs —— 存放 字典 参数，前面有两个 </strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(num, *args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo(1, 2, 3, 4, 5, name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#(2, 3, 4, 5)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5),&#123;&quot;name&quot;:&quot;小明&quot;, &quot;age&quot;:18, &quot;gender&quot;:True&#125;)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5), name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5),)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>元组和字典的拆包</strong><br>在调用带有多值参数的函数时，如果希望：<br>将一个 元组变量，直接传递给 args<br>将一个 字典变量，直接传递给 kwargs<br>就可以使用 拆包，简化参数的传递，拆包 的方式是：<br>在 元组变量前，增加 一个 <em><br>在 字典变量前，增加 两个 </em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(*args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"># 需要将一个元组变量/字典变量传递给函数对应的参数</span><br><span class=\"line\">gl_nums = (1, 2, 3)</span><br><span class=\"line\">gl_xiaoming = &#123;&quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><br><span class=\"line\">demo(gl_nums, gl_xiaoming)</span><br><span class=\"line\">#((1, 2, 3), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\">demo(*gl_nums, **gl_xiaoming)</span><br><span class=\"line\">#(1, 2, 3)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的返回值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python 专有，利用元组交换两个变量的值</span><br><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure></p>\n<p>#面向对象(补充)</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num2 = 100</span><br><span class=\"line\">sum1 = lambda num1 : num1 + num2 </span><br><span class=\"line\">num2 = 10000</span><br><span class=\"line\">sum2 = lambda num1 : num1 + num2 </span><br><span class=\"line\"></span><br><span class=\"line\">print( sum1( 1 ) )#10001</span><br><span class=\"line\">print( sum2( 1 ) )#10001</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。<br><strong>打印乘法表</strong><br><strong>占位符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方法1</span><br><span class=\"line\">for i in range(1, 10):</span><br><span class=\"line\">    for j in range(1, i+1):</span><br><span class=\"line\"> # end=&apos;&apos; 意思是末尾不换行，加空格</span><br><span class=\"line\">        print(&apos;&#123;&#125;x&#123;&#125;=&#123;&#125;\\t&apos;.format(i, j, i*j), end=&apos;&apos;) </span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">#方法2</span><br><span class=\"line\">for m in range(1, 10):</span><br><span class=\"line\">    for n in range(1, m+1):</span><br><span class=\"line\">        print(&apos;%d*%d=%d\\t&apos;%(n,m,n*m), end=&apos;&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p><strong>while 与for (待补充)</strong></p>\n<p><strong>从键盘获取输入信息：input</strong><br>在 Python 中可以使用 input 函数从键盘等待用户的输入<br>用户输入的 任何内容 Python 都认为是一个 字符串</p>\n<p><strong>格式化输出：print</strong><br>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符<br>% 被称为 格式化操作符，专门用于处理字符串中的格式<br>包含 % 的字符串，被称为 格式化字符串<br>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</p>\n<blockquote>\n<p>格式化字符   含义<br>%s       字符串<br>%d       有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全<br>%f      浮点数，%.2f 表示小数点后只显示两位<br>%%      输出 %</p>\n</blockquote>\n<p><strong>随机数生成</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数</span><br><span class=\"line\">#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b</span><br><span class=\"line\"></span><br><span class=\"line\">random.randint(12, 20)  # 生成的随机数n: 12 &lt;= n &lt;= 20   </span><br><span class=\"line\">random.randint(20, 20)  # 结果永远是 20   </span><br><span class=\"line\">random.randint(20, 10)  # 该语句是错误的，下限必须小于上限。</span><br></pre></td></tr></table></figure></p>\n<p>随机数的小游戏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span><br><span class=\"line\">player = int(input(&quot;请输入您要出的拳 石头（1）／剪刀（2）／布（3）：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能</span><br><span class=\"line\">computer = random.randint(1, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;玩家选择的拳头是 %d - 电脑出的拳是 %d&quot; % (player, computer))</span><br><span class=\"line\"></span><br><span class=\"line\"># 比较胜负</span><br><span class=\"line\"># 1 石头 胜 剪刀</span><br><span class=\"line\"># 2 剪刀 胜 布</span><br><span class=\"line\"># 3 布 胜 石头</span><br><span class=\"line\"># if (()</span><br><span class=\"line\">#        or ()</span><br><span class=\"line\">#        or ()):</span><br><span class=\"line\">if ((player == 1 and computer == 2)</span><br><span class=\"line\">        or (player == 2 and computer == 3)</span><br><span class=\"line\">        or (player == 3 and computer == 1)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;欧耶，电脑弱爆了！&quot;)</span><br><span class=\"line\"># 平局</span><br><span class=\"line\">elif player == computer:</span><br><span class=\"line\">    print(&quot;真是心有灵犀啊，再来一盘&quot;)</span><br><span class=\"line\"># 其他的情况就是电脑获胜</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不服气，我们决战到天明！&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">guess_list = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class=\"line\">win_combination = [[&quot;布&quot;, &quot;石头&quot;], [&quot;石头&quot;, &quot;剪刀&quot;], [&quot;剪刀&quot;, &quot;布&quot;]]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    computer = random.choice(guess_list)</span><br><span class=\"line\">    people = input(&apos;请输入：石头,剪刀,布\\n&apos;).strip()</span><br><span class=\"line\">    if people not in guess_list:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    elif computer == people:</span><br><span class=\"line\">        print (&quot;平手，再玩一次！&quot;)</span><br><span class=\"line\">    elif [computer, people] in win_combination:</span><br><span class=\"line\">        print (&quot;电脑获胜，再玩，人获胜才能退出！&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;人获胜！&quot;)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    #return None</span><br><span class=\"line\">print_code(&apos;python&apos;)  # python</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">a = add(1,2)</span><br><span class=\"line\">print(a)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add1(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">add1(1,2)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add2(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(&apos;%d + %d = %d&apos;%(x,y,x+y))</span><br><span class=\"line\">add2(1,2)  # 1 + 2 = 3</span><br></pre></td></tr></table></figure></p>\n<p>####多值参数<br>有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。</p>\n<p><strong>python 中有 两种 多值参数：</strong></p>\n<blockquote>\n<p>参数名前增加 一个 * 可以接收 元组<br>参数名前增加 两个 ** 可以接收 字典</p>\n</blockquote>\n<p><strong>一般在给多值参数命名时，习惯使用以下两个名字</strong></p>\n<blockquote>\n<p><em>args —— 存放 元组 参数，前面有一个 </em><br><strong>kwargs —— 存放 字典 参数，前面有两个 </strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(num, *args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo(1, 2, 3, 4, 5, name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#(2, 3, 4, 5)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5),&#123;&quot;name&quot;:&quot;小明&quot;, &quot;age&quot;:18, &quot;gender&quot;:True&#125;)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5), name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5),)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>元组和字典的拆包</strong><br>在调用带有多值参数的函数时，如果希望：<br>将一个 元组变量，直接传递给 args<br>将一个 字典变量，直接传递给 kwargs<br>就可以使用 拆包，简化参数的传递，拆包 的方式是：<br>在 元组变量前，增加 一个 <em><br>在 字典变量前，增加 两个 </em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(*args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"># 需要将一个元组变量/字典变量传递给函数对应的参数</span><br><span class=\"line\">gl_nums = (1, 2, 3)</span><br><span class=\"line\">gl_xiaoming = &#123;&quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><br><span class=\"line\">demo(gl_nums, gl_xiaoming)</span><br><span class=\"line\">#((1, 2, 3), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\">demo(*gl_nums, **gl_xiaoming)</span><br><span class=\"line\">#(1, 2, 3)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的返回值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python 专有，利用元组交换两个变量的值</span><br><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure></p>\n<p>#面向对象(补充)</p>\n"},{"title":"redis简介","date":"2019-08-17T04:51:16.000Z","_content":"\n\n## 简介\n**Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。**\n1. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n3. Redis支持数据的备份，即master-slave模式的数据备份\n4. 高可用，分布式\n5. 功能丰富，发布订阅，事物，pipeline,lua脚本\n6. 不依赖外部库，单线程模型\n7. 高可用 redis-sentinel ,分布式 redis-cluster\n\n\nRedis运行在内存中但是可以持久化到磁盘(性能极高)(aof或)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.\n\n\n**主要用途** ： 数据库，缓存和消息中间件,计数器，排行榜，消息队列，社交网络，实时系统\n\n### 执行文件\n`redis-check-aof` aof文件检查工具\n`redis-check-dump` rdb文件检查工具\n`redis-sentinel` sentinel服务器\n`redis-server` redis服务器\n`redis-cli` redis命令行客户端\n`redis-benchmark` redis性能测试工具\n\n\n\n## 安装\n```\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\ntar xzf redis-5.0.5.tar.gz\nln -s redis-5.0.5 redis\ncd redis\nmake \n\n\n./redis-server  # 启动redis服务\n./redis-server redis.conf  # 依据配置，启动redis服务\n\n./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互\n\n# eg:\n$ ./redis-cli\nredis> ping\nPONG  # 以上操作代表 redis已经安装完成。\n\n# 在远程服务器上执行命令\nredis-cli -h host -p port -a password\n\neg:\n$redis-cli -h 127.0.0.1 -p 6379 -a \"mypass\"\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n\n```\n\n### 配置  redis.conf\n\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令(**CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE**)来修改配置\n\neg：\n```\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\nOK\nredis 127.0.0.1:6379> CONFIG GET loglevel\n\n1) \"loglevel\"\n2) \"notice\"\n```\n具体配置信息参考文档\n\n\n\n\n\n\n","source":"_posts/redis/readme.md","raw":"---\n\ntitle: redis简介\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n\n## 简介\n**Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。**\n1. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n3. Redis支持数据的备份，即master-slave模式的数据备份\n4. 高可用，分布式\n5. 功能丰富，发布订阅，事物，pipeline,lua脚本\n6. 不依赖外部库，单线程模型\n7. 高可用 redis-sentinel ,分布式 redis-cluster\n\n\nRedis运行在内存中但是可以持久化到磁盘(性能极高)(aof或)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.\n\n\n**主要用途** ： 数据库，缓存和消息中间件,计数器，排行榜，消息队列，社交网络，实时系统\n\n### 执行文件\n`redis-check-aof` aof文件检查工具\n`redis-check-dump` rdb文件检查工具\n`redis-sentinel` sentinel服务器\n`redis-server` redis服务器\n`redis-cli` redis命令行客户端\n`redis-benchmark` redis性能测试工具\n\n\n\n## 安装\n```\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\ntar xzf redis-5.0.5.tar.gz\nln -s redis-5.0.5 redis\ncd redis\nmake \n\n\n./redis-server  # 启动redis服务\n./redis-server redis.conf  # 依据配置，启动redis服务\n\n./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互\n\n# eg:\n$ ./redis-cli\nredis> ping\nPONG  # 以上操作代表 redis已经安装完成。\n\n# 在远程服务器上执行命令\nredis-cli -h host -p port -a password\n\neg:\n$redis-cli -h 127.0.0.1 -p 6379 -a \"mypass\"\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n\n```\n\n### 配置  redis.conf\n\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令(**CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE**)来修改配置\n\neg：\n```\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\nOK\nredis 127.0.0.1:6379> CONFIG GET loglevel\n\n1) \"loglevel\"\n2) \"notice\"\n```\n具体配置信息参考文档\n\n\n\n\n\n\n","slug":"redis/readme","published":1,"updated":"2020-04-10T16:46:16.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtun0005k74uxtmh7npv4","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</strong></p>\n<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份</li>\n<li>高可用，分布式</li>\n<li>功能丰富，发布订阅，事物，pipeline,lua脚本</li>\n<li>不依赖外部库，单线程模型</li>\n<li>高可用 redis-sentinel ,分布式 redis-cluster</li>\n</ol>\n<p>Redis运行在内存中但是可以持久化到磁盘(性能极高)(aof或)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.</p>\n<p><strong>主要用途</strong> ： 数据库，缓存和消息中间件,计数器，排行榜，消息队列，社交网络，实时系统</p>\n<h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><p><code>redis-check-aof</code> aof文件检查工具<br><code>redis-check-dump</code> rdb文件检查工具<br><code>redis-sentinel</code> sentinel服务器<br><code>redis-server</code> redis服务器<br><code>redis-cli</code> redis命令行客户端<br><code>redis-benchmark</code> redis性能测试工具</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class=\"line\">tar xzf redis-5.0.5.tar.gz</span><br><span class=\"line\">ln -s redis-5.0.5 redis</span><br><span class=\"line\">cd redis</span><br><span class=\"line\">make </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./redis-server  # 启动redis服务</span><br><span class=\"line\">./redis-server redis.conf  # 依据配置，启动redis服务</span><br><span class=\"line\"></span><br><span class=\"line\">./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互</span><br><span class=\"line\"></span><br><span class=\"line\"># eg:</span><br><span class=\"line\">$ ./redis-cli</span><br><span class=\"line\">redis&gt; ping</span><br><span class=\"line\">PONG  # 以上操作代表 redis已经安装完成。</span><br><span class=\"line\"></span><br><span class=\"line\"># 在远程服务器上执行命令</span><br><span class=\"line\">redis-cli -h host -p port -a password</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PING</span><br><span class=\"line\"></span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-redis-conf\"><a href=\"#配置-redis-conf\" class=\"headerlink\" title=\"配置  redis.conf\"></a>配置  redis.conf</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令(<strong>CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</strong>)来修改配置</p>\n<p>eg：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure></p>\n<p>具体配置信息参考文档</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</strong></p>\n<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份</li>\n<li>高可用，分布式</li>\n<li>功能丰富，发布订阅，事物，pipeline,lua脚本</li>\n<li>不依赖外部库，单线程模型</li>\n<li>高可用 redis-sentinel ,分布式 redis-cluster</li>\n</ol>\n<p>Redis运行在内存中但是可以持久化到磁盘(性能极高)(aof或)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.</p>\n<p><strong>主要用途</strong> ： 数据库，缓存和消息中间件,计数器，排行榜，消息队列，社交网络，实时系统</p>\n<h3 id=\"执行文件\"><a href=\"#执行文件\" class=\"headerlink\" title=\"执行文件\"></a>执行文件</h3><p><code>redis-check-aof</code> aof文件检查工具<br><code>redis-check-dump</code> rdb文件检查工具<br><code>redis-sentinel</code> sentinel服务器<br><code>redis-server</code> redis服务器<br><code>redis-cli</code> redis命令行客户端<br><code>redis-benchmark</code> redis性能测试工具</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class=\"line\">tar xzf redis-5.0.5.tar.gz</span><br><span class=\"line\">ln -s redis-5.0.5 redis</span><br><span class=\"line\">cd redis</span><br><span class=\"line\">make </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./redis-server  # 启动redis服务</span><br><span class=\"line\">./redis-server redis.conf  # 依据配置，启动redis服务</span><br><span class=\"line\"></span><br><span class=\"line\">./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互</span><br><span class=\"line\"></span><br><span class=\"line\"># eg:</span><br><span class=\"line\">$ ./redis-cli</span><br><span class=\"line\">redis&gt; ping</span><br><span class=\"line\">PONG  # 以上操作代表 redis已经安装完成。</span><br><span class=\"line\"></span><br><span class=\"line\"># 在远程服务器上执行命令</span><br><span class=\"line\">redis-cli -h host -p port -a password</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PING</span><br><span class=\"line\"></span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-redis-conf\"><a href=\"#配置-redis-conf\" class=\"headerlink\" title=\"配置  redis.conf\"></a>配置  redis.conf</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令(<strong>CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</strong>)来修改配置</p>\n<p>eg：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure></p>\n<p>具体配置信息参考文档</p>\n"},{"title":"redis部分命令","date":"2019-08-17T04:51:16.000Z","_content":"\n### 键\n```\nredis 127.0.0.1:6379> SET weilai redis  -- 设置键\nOK\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 1\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 0  # 删除失败\n```\n`keys *` 遍历所有key   -- 一般不会使用\n\n`dbsize` 计算 key 总数   -- O（1）\n\n`exists key` 检查key 是否存在（0,1）\n\n\n\n\n\n\n","source":"_posts/redis/命令.md","raw":"---\n\ntitle: redis部分命令\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n---\n\n### 键\n```\nredis 127.0.0.1:6379> SET weilai redis  -- 设置键\nOK\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 1\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 0  # 删除失败\n```\n`keys *` 遍历所有key   -- 一般不会使用\n\n`dbsize` 计算 key 总数   -- O（1）\n\n`exists key` 检查key 是否存在（0,1）\n\n\n\n\n\n\n","slug":"redis/命令","published":1,"updated":"2020-04-10T16:46:16.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtun6005o74uxmoup1m39","content":"<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET weilai redis  -- 设置键</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 0  # 删除失败</span><br></pre></td></tr></table></figure>\n<p><code>keys *</code> 遍历所有key   – 一般不会使用</p>\n<p><code>dbsize</code> 计算 key 总数   – O（1）</p>\n<p><code>exists key</code> 检查key 是否存在（0,1）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET weilai redis  -- 设置键</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 0  # 删除失败</span><br></pre></td></tr></table></figure>\n<p><code>keys *</code> 遍历所有key   – 一般不会使用</p>\n<p><code>dbsize</code> 计算 key 总数   – O（1）</p>\n<p><code>exists key</code> 检查key 是否存在（0,1）</p>\n"},{"title":"redis备份","date":"2019-08-17T04:51:16.000Z","_content":"\n\n### 备份\nRedis SAVE 命令用于创建当前数据库的备份\n```\nredis 127.0.0.1:6379> SAVE \nOK\n```\n该命令将在 redis 安装目录中创建dump.rdb文件\n\n**BGSAVE**后台执行\n```\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n```\n\n### 恢复\n将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务\n```\nredis 127.0.0.1:6379> CONFIG GET dir  -- CONFIG 命令获取 redis目录\n1) \"dir\"\n2) \"/usr/local/redis/bin\"\n```\n\n\n","source":"_posts/redis/数据备份与恢复.md","raw":"---\n\ntitle: redis备份\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n---\n\n\n### 备份\nRedis SAVE 命令用于创建当前数据库的备份\n```\nredis 127.0.0.1:6379> SAVE \nOK\n```\n该命令将在 redis 安装目录中创建dump.rdb文件\n\n**BGSAVE**后台执行\n```\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n```\n\n### 恢复\n将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务\n```\nredis 127.0.0.1:6379> CONFIG GET dir  -- CONFIG 命令获取 redis目录\n1) \"dir\"\n2) \"/usr/local/redis/bin\"\n```\n\n\n","slug":"redis/数据备份与恢复","published":1,"updated":"2020-04-10T16:46:16.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtund005s74uxwz3lm20x","content":"<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>Redis SAVE 命令用于创建当前数据库的备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SAVE </span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在 redis 安装目录中创建dump.rdb文件</p>\n<p><strong>BGSAVE</strong>后台执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\"></span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET dir  -- CONFIG 命令获取 redis目录</span><br><span class=\"line\">1) &quot;dir&quot;</span><br><span class=\"line\">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>Redis SAVE 命令用于创建当前数据库的备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SAVE </span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在 redis 安装目录中创建dump.rdb文件</p>\n<p><strong>BGSAVE</strong>后台执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\"></span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET dir  -- CONFIG 命令获取 redis目录</span><br><span class=\"line\">1) &quot;dir&quot;</span><br><span class=\"line\">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"安全性能测试客户端连接管道技术","date":"2019-08-17T04:51:16.000Z","_content":"\n### 安全\n\n查看是否设置密码\n```\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"\"\n\n# 默认没有设置\n```\n\n设置密码\n```\n127.0.0.1:6379> CONFIG set requirepass \"mypassword\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"mypassword\"\n```\n设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。\n\n```\n127.0.0.1:6379> AUTH \"mypassword\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n```\n### 性能测试\nRedis 性能测试是通过同时执行多个命令实现的\n`redis-benchmark [option] [option value]`\n\n```\nredis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q\n\nSET: 146198.83 requests per second\nLPUSH: 145560.41 requests per second\n```\n\n### 客户端连接\nRedis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：\n\n1. 首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。\n2. 然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法\n3. 然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送\n\n```\nconfig get maxclients\n\n1) \"maxclients\"\n2) \"10000\"\n```\n\n启动时设置最大连接数\n```\nredis-server --maxclients 100000\n```\n### 管道技术\n\nRedis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n\n客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\n服务端处理命令，并将结果返回给客户端。\n\nRedis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\n```\n$(echo -en \"PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n\"; sleep 10) | nc localhost 6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3\n```\n","source":"_posts/redis/安全性能测试客户端连接管道技术.md","raw":"---\n\ntitle: 安全性能测试客户端连接管道技术\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n---\n\n### 安全\n\n查看是否设置密码\n```\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"\"\n\n# 默认没有设置\n```\n\n设置密码\n```\n127.0.0.1:6379> CONFIG set requirepass \"mypassword\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"mypassword\"\n```\n设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。\n\n```\n127.0.0.1:6379> AUTH \"mypassword\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n```\n### 性能测试\nRedis 性能测试是通过同时执行多个命令实现的\n`redis-benchmark [option] [option value]`\n\n```\nredis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q\n\nSET: 146198.83 requests per second\nLPUSH: 145560.41 requests per second\n```\n\n### 客户端连接\nRedis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：\n\n1. 首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。\n2. 然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法\n3. 然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送\n\n```\nconfig get maxclients\n\n1) \"maxclients\"\n2) \"10000\"\n```\n\n启动时设置最大连接数\n```\nredis-server --maxclients 100000\n```\n### 管道技术\n\nRedis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n\n客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\n服务端处理命令，并将结果返回给客户端。\n\nRedis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\n```\n$(echo -en \"PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n\"; sleep 10) | nc localhost 6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3\n```\n","slug":"redis/安全性能测试客户端连接管道技术","published":1,"updated":"2020-04-10T16:46:16.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuni005v74uxww53hjvl","content":"<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>查看是否设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认没有设置</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG set requirepass &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;mypassword&quot;</span><br></pre></td></tr></table></figure></p>\n<p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET mykey</span><br><span class=\"line\">&quot;Test value&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>Redis 性能测试是通过同时执行多个命令实现的<br><code>redis-benchmark [option] [option value]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q</span><br><span class=\"line\"></span><br><span class=\"line\">SET: 146198.83 requests per second</span><br><span class=\"line\">LPUSH: 145560.41 requests per second</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p>Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：</p>\n<ol>\n<li>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。</li>\n<li>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法</li>\n<li>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get maxclients</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;maxclients&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n<p>启动时设置最大连接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"管道技术\"><a href=\"#管道技术\" class=\"headerlink\" title=\"管道技术\"></a>管道技术</h3><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>\n<p>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。<br>服务端处理命令，并将结果返回给客户端。</p>\n<p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(echo -en &quot;PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379</span><br><span class=\"line\"></span><br><span class=\"line\">+PONG</span><br><span class=\"line\">+OK</span><br><span class=\"line\">redis</span><br><span class=\"line\">:1</span><br><span class=\"line\">:2</span><br><span class=\"line\">:3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>查看是否设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认没有设置</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG set requirepass &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;mypassword&quot;</span><br></pre></td></tr></table></figure></p>\n<p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET mykey</span><br><span class=\"line\">&quot;Test value&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>Redis 性能测试是通过同时执行多个命令实现的<br><code>redis-benchmark [option] [option value]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q</span><br><span class=\"line\"></span><br><span class=\"line\">SET: 146198.83 requests per second</span><br><span class=\"line\">LPUSH: 145560.41 requests per second</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p>Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：</p>\n<ol>\n<li>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。</li>\n<li>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法</li>\n<li>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get maxclients</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;maxclients&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n<p>启动时设置最大连接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"管道技术\"><a href=\"#管道技术\" class=\"headerlink\" title=\"管道技术\"></a>管道技术</h3><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>\n<p>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。<br>服务端处理命令，并将结果返回给客户端。</p>\n<p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(echo -en &quot;PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379</span><br><span class=\"line\"></span><br><span class=\"line\">+PONG</span><br><span class=\"line\">+OK</span><br><span class=\"line\">redis</span><br><span class=\"line\">:1</span><br><span class=\"line\">:2</span><br><span class=\"line\">:3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"redis 数据类型","date":"2019-08-17T04:51:16.000Z","_content":"\n\n## redis 数据类型\n**Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。**\n\n### string\nstring类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB\n```\n# SET 设置键值  GET 获取键值\nredis 127.0.0.1:6379> SET name \"weilai\"  \nOK\nredis 127.0.0.1:6379> GET name \n\"weilai\"\n127.0.0.1:6379> strlen name\n(integer) 6\n127.0.0.1:6379> getset name newvalue\n\"weilai\"\n127.0.0.1:6379> get name\n\"newvalue\"\n127.0.0.1:6379> getrange name 1 3\n\"ewv\"\n127.0.0.1:6379> SETRANGE name 1 a\n(integer) 8\n127.0.0.1:6379> get name\n\"nawvalue\"\n127.0.0.1:6379> setnx name 1 -- key存在时，不创建\n(integer) 0\n127.0.0.1:6379> set name newname xx -- key存在时，才更新\nOK\n127.0.0.1:6379> get name\n\"newname\"\n127.0.0.1:6379> set name1 newname1 xx -- key不存在时，不更新\n(nil)\n127.0.0.1:6379> get name1\n(nil)\n127.0.0.1:6379> get name\n\"nawvalue\"\n\n```\n\n**mset** 和 **mget** 设置（得到） 多个key的值\n```\n127.0.0.1:6379> mset date \"2019.08.30\" time \"11:00 a.m.\" weather \"sunny\"\nOK\n127.0.0.1:6379> mget  date time name  weather\n1) \"2019.08.30\"\n2) \"11:00 a.m.\"\n3) \"weilai\"\n4) \"sunny\"\n```\n\n**append**  添加字符串\n```\n127.0.0.1:6379> append name '1995'\n(integer) 10\n127.0.0.1:6379> GET name\n\"weilai1995\"\n```\n**del**  删除\n```\n127.0.0.1:6379> del name\n(integer) 1\n127.0.0.1:6379> get name\n(nil)\n```\n**incr/decr**  增加/减少 1\n```\n127.0.0.1:6379> decr num\n(integer) -1\n127.0.0.1:6379> get num\n\"-1\"\n127.0.0.1:6379> incr num\n(integer) 0\n127.0.0.1:6379> get num\n\"0\"\n127.0.0.1:6379> incrby num 3\n(integer) 3\n127.0.0.1:6379> decrby num 2\n(integer) 1\n127.0.0.1:6379> get num\n\"1\"\n127.0.0.1:6379> incrbyfloat num 3.5\n\"4.5\"\n```\n\n### Hash\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n`HMSET, HGETALL` 命令 `user:1` 为键值\n```\nredis 127.0.0.1:6379> hmset user:1 username weilai password handsome \nOK\n127.0.0.1:6379> hmget user:1 username password\n1) \"weilai\"\n2) \"handsome\"\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"weilai\"\n3) \"password\"\n4) \"handsome\"\n127.0.0.1:6379> hmget user:1 username password port\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\nredis 127.0.0.1:6379> hget user:1 username\n\"weilai\"\n127.0.0.1:6379> HGET user:1 weilai\n(nil)\n127.0.0.1:6379> hkeys user:1  # 获取 key\n1) \"username\"\n2) \"password\"\n3) \"port\"\n127.0.0.1:6379> hvals user:1   #获取 value\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\n127.0.0.1:6379> hlen user:1\n(integer) 3\n127.0.0.1:6379> hexists user:1  password  # 是否存在 passw\n(integer) 1\n127.0.0.1:6379> hexists user:1  passwd\n(integer) 0\n hdel  user:1 password port\n(integer) 2\n127.0.0.1:6379> hgetall user:1\n1) \"username\"\n2) \"weilai\"\n127.0.0.1:6379>  hsetnx  user:1 username fisher  # 存在username 不创建\n(integer) 0\n127.0.0.1:6379>  hgetall user:1 \n1) \"username\"\n2) \"weilai\"\n# 每个 hash 可以存储 232 - 1 键值对（40多亿）\n```\n\n### List\nRedis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素`lpush`到列表的头部（左边）或者`rpush`尾部（右边）\n`lrange` 获取指定长度 （从0 开始）\n\n`lpushx/rpushx` 只能是 key 存在，且仅能添加一个\n\n`lpop/rpop` 移除最左/右 边 的一个元素\n\n`ltrim`  截取一段长度 \n\n`llen`  列表元素个数\n\n`lrem weilai 0 python` 删除所有的'python'\n```\nredis 127.0.0.1:6379> lpush weilai redis\n(integer) 1\nredis 127.0.0.1:6379> lpush weilai mongodb\n(integer) 2\nredis 127.0.0.1:6379> rpush weilai rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange weilai 0 10\n1) \"mongodb\"\n2) \"redis\"\n3) \"rabitmq\"\"\n127.0.0.1:6379> lrange weilai 0 1\n1) \"mongodb\"\n2) \"redis\"\n127.0.0.1:6379> llen weilai\n(integer) 3\n127.0.0.1:6379> lpush weilai python java c++ shell\n(integer) 8\n127.0.0.1:6379> lrange weilai 0 10     \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"python\"\n5) \"mongodb\"\n6) \"redis\"\n7) \"rabitmq\"\n127.0.0.1:6379> lrem weilai 0 python  # 删除所有的python 元素\n(integer) 1\n127.0.0.1:6379> lrange weilai 0 10  \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"mongodb\"\n5) \"redis\"\n6) \"rabitmq\"\n127.0.0.1:6379> ltrim weilai 2 4\nOK\n127.0.0.1:6379> lrange weilai 0 10\n1) \"java\"\n2) \"mongodb\"\n3) \"redis\"\n\n# 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)\n```\n\n### Set\nRedis的Set是string类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)\n\n`sadd/srem`  添加/删除元素\n`sismember`  判断是否为set的一个元素\n`smembers`   返回该集合的所有成员\n`sdiff`      返回一个集合与其它集合的差异\n`sinter`     返回几个集合的交集\n`sunion`     返回几个集合的并集\n\n\n```\n127.0.0.1:6379> sadd zoo cat dog\n(integer) 2\n127.0.0.1:6379> sadd zoo cat dog fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cat\"\n127.0.0.1:6379> srem zoo cat\n(integer) 1\n127.0.0.1:6379> srem zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n127.0.0.1:6379> sadd zoo1 dog cow\n(integer) 2\n127.0.0.1:6379> smembers zoo1\n1) \"cow\"\n2) \"dog\"\n127.0.0.1:6379> sdiff zoo zoo1\n1) \"fisher\"\n127.0.0.1:6379> sdiff zoo1 zoo\n1) \"cow\"\n127.0.0.1:6379> sinter zoo1 zoo\n1) \"dog\"\n127.0.0.1:6379> sunion zoo1 zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cow\"\n# 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\n\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)\n```\n#### zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复\n\n```\nredis 127.0.0.1:6379> zadd weilai 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE weilai 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```\n\n\n","source":"_posts/redis/数据类型.md","raw":"---\n\ntitle: redis 数据类型\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n\n## redis 数据类型\n**Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。**\n\n### string\nstring类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB\n```\n# SET 设置键值  GET 获取键值\nredis 127.0.0.1:6379> SET name \"weilai\"  \nOK\nredis 127.0.0.1:6379> GET name \n\"weilai\"\n127.0.0.1:6379> strlen name\n(integer) 6\n127.0.0.1:6379> getset name newvalue\n\"weilai\"\n127.0.0.1:6379> get name\n\"newvalue\"\n127.0.0.1:6379> getrange name 1 3\n\"ewv\"\n127.0.0.1:6379> SETRANGE name 1 a\n(integer) 8\n127.0.0.1:6379> get name\n\"nawvalue\"\n127.0.0.1:6379> setnx name 1 -- key存在时，不创建\n(integer) 0\n127.0.0.1:6379> set name newname xx -- key存在时，才更新\nOK\n127.0.0.1:6379> get name\n\"newname\"\n127.0.0.1:6379> set name1 newname1 xx -- key不存在时，不更新\n(nil)\n127.0.0.1:6379> get name1\n(nil)\n127.0.0.1:6379> get name\n\"nawvalue\"\n\n```\n\n**mset** 和 **mget** 设置（得到） 多个key的值\n```\n127.0.0.1:6379> mset date \"2019.08.30\" time \"11:00 a.m.\" weather \"sunny\"\nOK\n127.0.0.1:6379> mget  date time name  weather\n1) \"2019.08.30\"\n2) \"11:00 a.m.\"\n3) \"weilai\"\n4) \"sunny\"\n```\n\n**append**  添加字符串\n```\n127.0.0.1:6379> append name '1995'\n(integer) 10\n127.0.0.1:6379> GET name\n\"weilai1995\"\n```\n**del**  删除\n```\n127.0.0.1:6379> del name\n(integer) 1\n127.0.0.1:6379> get name\n(nil)\n```\n**incr/decr**  增加/减少 1\n```\n127.0.0.1:6379> decr num\n(integer) -1\n127.0.0.1:6379> get num\n\"-1\"\n127.0.0.1:6379> incr num\n(integer) 0\n127.0.0.1:6379> get num\n\"0\"\n127.0.0.1:6379> incrby num 3\n(integer) 3\n127.0.0.1:6379> decrby num 2\n(integer) 1\n127.0.0.1:6379> get num\n\"1\"\n127.0.0.1:6379> incrbyfloat num 3.5\n\"4.5\"\n```\n\n### Hash\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n`HMSET, HGETALL` 命令 `user:1` 为键值\n```\nredis 127.0.0.1:6379> hmset user:1 username weilai password handsome \nOK\n127.0.0.1:6379> hmget user:1 username password\n1) \"weilai\"\n2) \"handsome\"\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"weilai\"\n3) \"password\"\n4) \"handsome\"\n127.0.0.1:6379> hmget user:1 username password port\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\nredis 127.0.0.1:6379> hget user:1 username\n\"weilai\"\n127.0.0.1:6379> HGET user:1 weilai\n(nil)\n127.0.0.1:6379> hkeys user:1  # 获取 key\n1) \"username\"\n2) \"password\"\n3) \"port\"\n127.0.0.1:6379> hvals user:1   #获取 value\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\n127.0.0.1:6379> hlen user:1\n(integer) 3\n127.0.0.1:6379> hexists user:1  password  # 是否存在 passw\n(integer) 1\n127.0.0.1:6379> hexists user:1  passwd\n(integer) 0\n hdel  user:1 password port\n(integer) 2\n127.0.0.1:6379> hgetall user:1\n1) \"username\"\n2) \"weilai\"\n127.0.0.1:6379>  hsetnx  user:1 username fisher  # 存在username 不创建\n(integer) 0\n127.0.0.1:6379>  hgetall user:1 \n1) \"username\"\n2) \"weilai\"\n# 每个 hash 可以存储 232 - 1 键值对（40多亿）\n```\n\n### List\nRedis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素`lpush`到列表的头部（左边）或者`rpush`尾部（右边）\n`lrange` 获取指定长度 （从0 开始）\n\n`lpushx/rpushx` 只能是 key 存在，且仅能添加一个\n\n`lpop/rpop` 移除最左/右 边 的一个元素\n\n`ltrim`  截取一段长度 \n\n`llen`  列表元素个数\n\n`lrem weilai 0 python` 删除所有的'python'\n```\nredis 127.0.0.1:6379> lpush weilai redis\n(integer) 1\nredis 127.0.0.1:6379> lpush weilai mongodb\n(integer) 2\nredis 127.0.0.1:6379> rpush weilai rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange weilai 0 10\n1) \"mongodb\"\n2) \"redis\"\n3) \"rabitmq\"\"\n127.0.0.1:6379> lrange weilai 0 1\n1) \"mongodb\"\n2) \"redis\"\n127.0.0.1:6379> llen weilai\n(integer) 3\n127.0.0.1:6379> lpush weilai python java c++ shell\n(integer) 8\n127.0.0.1:6379> lrange weilai 0 10     \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"python\"\n5) \"mongodb\"\n6) \"redis\"\n7) \"rabitmq\"\n127.0.0.1:6379> lrem weilai 0 python  # 删除所有的python 元素\n(integer) 1\n127.0.0.1:6379> lrange weilai 0 10  \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"mongodb\"\n5) \"redis\"\n6) \"rabitmq\"\n127.0.0.1:6379> ltrim weilai 2 4\nOK\n127.0.0.1:6379> lrange weilai 0 10\n1) \"java\"\n2) \"mongodb\"\n3) \"redis\"\n\n# 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)\n```\n\n### Set\nRedis的Set是string类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)\n\n`sadd/srem`  添加/删除元素\n`sismember`  判断是否为set的一个元素\n`smembers`   返回该集合的所有成员\n`sdiff`      返回一个集合与其它集合的差异\n`sinter`     返回几个集合的交集\n`sunion`     返回几个集合的并集\n\n\n```\n127.0.0.1:6379> sadd zoo cat dog\n(integer) 2\n127.0.0.1:6379> sadd zoo cat dog fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cat\"\n127.0.0.1:6379> srem zoo cat\n(integer) 1\n127.0.0.1:6379> srem zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n127.0.0.1:6379> sadd zoo1 dog cow\n(integer) 2\n127.0.0.1:6379> smembers zoo1\n1) \"cow\"\n2) \"dog\"\n127.0.0.1:6379> sdiff zoo zoo1\n1) \"fisher\"\n127.0.0.1:6379> sdiff zoo1 zoo\n1) \"cow\"\n127.0.0.1:6379> sinter zoo1 zoo\n1) \"dog\"\n127.0.0.1:6379> sunion zoo1 zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cow\"\n# 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\n\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)\n```\n#### zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复\n\n```\nredis 127.0.0.1:6379> zadd weilai 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE weilai 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```\n\n\n","slug":"redis/数据类型","published":1,"updated":"2020-04-10T16:46:16.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuno005z74uxolrrha1a","content":"<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><p><strong>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</strong></p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SET 设置键值  GET 获取键值</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;weilai&quot;  </span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET name </span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen name</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; getset name newvalue</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;newvalue&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; getrange name 1 3</span><br><span class=\"line\">&quot;ewv&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; SETRANGE name 1 a</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;nawvalue&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx name 1 -- key存在时，不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; set name newname xx -- key存在时，才更新</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;newname&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; set name1 newname1 xx -- key不存在时，不更新</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get name1</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;nawvalue&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>mset</strong> 和 <strong>mget</strong> 设置（得到） 多个key的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset date &quot;2019.08.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget  date time name  weather</span><br><span class=\"line\">1) &quot;2019.08.30&quot;</span><br><span class=\"line\">2) &quot;11:00 a.m.&quot;</span><br><span class=\"line\">3) &quot;weilai&quot;</span><br><span class=\"line\">4) &quot;sunny&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>append</strong>  添加字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append name &apos;1995&apos;</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; GET name</span><br><span class=\"line\">&quot;weilai1995&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>del</strong>  删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p><strong>incr/decr</strong>  增加/减少 1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; decr num</span><br><span class=\"line\">(integer) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby num 3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby num 2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incrbyfloat num 3.5</span><br><span class=\"line\">&quot;4.5&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><code>HMSET, HGETALL</code> 命令 <code>user:1</code> 为键值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; hmset user:1 username weilai password handsome </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGETALL user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">3) &quot;password&quot;</span><br><span class=\"line\">4) &quot;handsome&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password port</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; hget user:1 username</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user:1 weilai</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys user:1  # 获取 key</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;password&quot;</span><br><span class=\"line\">3) &quot;port&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user:1   #获取 value</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen user:1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  password  # 是否存在 passw</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  passwd</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"> hdel  user:1 password port</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;  hsetnx  user:1 username fisher  # 存在username 不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;  hgetall user:1 </span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\"># 每个 hash 可以存储 232 - 1 键值对（40多亿）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素<code>lpush</code>到列表的头部（左边）或者<code>rpush</code>尾部（右边）<br><code>lrange</code> 获取指定长度 （从0 开始）</p>\n<p><code>lpushx/rpushx</code> 只能是 key 存在，且仅能添加一个</p>\n<p><code>lpop/rpop</code> 移除最左/右 边 的一个元素</p>\n<p><code>ltrim</code>  截取一段长度 </p>\n<p><code>llen</code>  列表元素个数</p>\n<p><code>lrem weilai 0 python</code> 删除所有的’python’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; rpush weilai rabitmq</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 1</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; llen weilai</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush weilai python java c++ shell</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10     </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;python&quot;</span><br><span class=\"line\">5) &quot;mongodb&quot;</span><br><span class=\"line\">6) &quot;redis&quot;</span><br><span class=\"line\">7) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem weilai 0 python  # 删除所有的python 元素</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10  </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;mongodb&quot;</span><br><span class=\"line\">5) &quot;redis&quot;</span><br><span class=\"line\">6) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim weilai 2 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;java&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Redis的Set是string类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</p>\n<p><code>sadd/srem</code>  添加/删除元素<br><code>sismember</code>  判断是否为set的一个元素<br><code>smembers</code>   返回该集合的所有成员<br><code>sdiff</code>      返回一个集合与其它集合的差异<br><code>sinter</code>     返回几个集合的交集<br><code>sunion</code>     返回几个集合的并集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cat&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo1 dog cow</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo1</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo zoo1</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo1 zoo</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter zoo1 zoo</span><br><span class=\"line\">1) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion zoo1 zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cow&quot;</span><br><span class=\"line\"># 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。</span><br><span class=\"line\"></span><br><span class=\"line\">集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</span><br></pre></td></tr></table></figure>\n<h4 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE weilai 0 1000</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><p><strong>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</strong></p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SET 设置键值  GET 获取键值</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;weilai&quot;  </span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET name </span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen name</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; getset name newvalue</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;newvalue&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; getrange name 1 3</span><br><span class=\"line\">&quot;ewv&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; SETRANGE name 1 a</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;nawvalue&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx name 1 -- key存在时，不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; set name newname xx -- key存在时，才更新</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;newname&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; set name1 newname1 xx -- key不存在时，不更新</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get name1</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">&quot;nawvalue&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>mset</strong> 和 <strong>mget</strong> 设置（得到） 多个key的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset date &quot;2019.08.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget  date time name  weather</span><br><span class=\"line\">1) &quot;2019.08.30&quot;</span><br><span class=\"line\">2) &quot;11:00 a.m.&quot;</span><br><span class=\"line\">3) &quot;weilai&quot;</span><br><span class=\"line\">4) &quot;sunny&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>append</strong>  添加字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append name &apos;1995&apos;</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; GET name</span><br><span class=\"line\">&quot;weilai1995&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>del</strong>  删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p><strong>incr/decr</strong>  增加/减少 1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; decr num</span><br><span class=\"line\">(integer) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby num 3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby num 2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incrbyfloat num 3.5</span><br><span class=\"line\">&quot;4.5&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><code>HMSET, HGETALL</code> 命令 <code>user:1</code> 为键值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; hmset user:1 username weilai password handsome </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGETALL user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">3) &quot;password&quot;</span><br><span class=\"line\">4) &quot;handsome&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password port</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; hget user:1 username</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user:1 weilai</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys user:1  # 获取 key</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;password&quot;</span><br><span class=\"line\">3) &quot;port&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user:1   #获取 value</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen user:1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  password  # 是否存在 passw</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  passwd</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"> hdel  user:1 password port</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;  hsetnx  user:1 username fisher  # 存在username 不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;  hgetall user:1 </span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\"># 每个 hash 可以存储 232 - 1 键值对（40多亿）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素<code>lpush</code>到列表的头部（左边）或者<code>rpush</code>尾部（右边）<br><code>lrange</code> 获取指定长度 （从0 开始）</p>\n<p><code>lpushx/rpushx</code> 只能是 key 存在，且仅能添加一个</p>\n<p><code>lpop/rpop</code> 移除最左/右 边 的一个元素</p>\n<p><code>ltrim</code>  截取一段长度 </p>\n<p><code>llen</code>  列表元素个数</p>\n<p><code>lrem weilai 0 python</code> 删除所有的’python’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; rpush weilai rabitmq</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 1</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; llen weilai</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush weilai python java c++ shell</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10     </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;python&quot;</span><br><span class=\"line\">5) &quot;mongodb&quot;</span><br><span class=\"line\">6) &quot;redis&quot;</span><br><span class=\"line\">7) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem weilai 0 python  # 删除所有的python 元素</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10  </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;mongodb&quot;</span><br><span class=\"line\">5) &quot;redis&quot;</span><br><span class=\"line\">6) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim weilai 2 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;java&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Redis的Set是string类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</p>\n<p><code>sadd/srem</code>  添加/删除元素<br><code>sismember</code>  判断是否为set的一个元素<br><code>smembers</code>   返回该集合的所有成员<br><code>sdiff</code>      返回一个集合与其它集合的差异<br><code>sinter</code>     返回几个集合的交集<br><code>sunion</code>     返回几个集合的并集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cat&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo1 dog cow</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo1</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo zoo1</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo1 zoo</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter zoo1 zoo</span><br><span class=\"line\">1) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion zoo1 zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cow&quot;</span><br><span class=\"line\"># 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。</span><br><span class=\"line\"></span><br><span class=\"line\">集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</span><br></pre></td></tr></table></figure>\n<h4 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE weilai 0 1000</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"HTTP基本原理","date":"2019-07-14T03:05:31.000Z","_content":"\n\n## 0. HTTP 的特性\n\nHTTP 协议构建于 TCP/IP 协议之上，是一个应用层协议，默认端口号是 80 (HTTPS:  443)\n\nHTTP 是无连接无状态的\n\n1. 无连接：服务器处理完客户的请求，并收到客户的应答后，即断开连接  （keep-alive :Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接 tcp连接）\n2. 无状态：对于事务处理没有记忆能力  (Cookie 客户端， Session 服务端) \n\n\n## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。 HTTP over TLS。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","source":"_posts/基础知识/HTTP的基本原理.md","raw":"---\ntitle: HTTP基本原理\ndate: 2019-07-14 11:05:31\ntags:\ncategories: 计算机网络\n---\n\n\n## 0. HTTP 的特性\n\nHTTP 协议构建于 TCP/IP 协议之上，是一个应用层协议，默认端口号是 80 (HTTPS:  443)\n\nHTTP 是无连接无状态的\n\n1. 无连接：服务器处理完客户的请求，并收到客户的应答后，即断开连接  （keep-alive :Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接 tcp连接）\n2. 无状态：对于事务处理没有记忆能力  (Cookie 客户端， Session 服务端) \n\n\n## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。 HTTP over TLS。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","slug":"基础知识/HTTP的基本原理","published":1,"updated":"2020-04-10T16:46:16.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtunt006274uxnxqw51vk","content":"<h2 id=\"0-HTTP-的特性\"><a href=\"#0-HTTP-的特性\" class=\"headerlink\" title=\"0. HTTP 的特性\"></a>0. HTTP 的特性</h2><p>HTTP 协议构建于 TCP/IP 协议之上，是一个应用层协议，默认端口号是 80 (HTTPS:  443)</p>\n<p>HTTP 是无连接无状态的</p>\n<ol>\n<li>无连接：服务器处理完客户的请求，并收到客户的应答后，即断开连接  （keep-alive :Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接 tcp连接）</li>\n<li>无状态：对于事务处理没有记忆能力  (Cookie 客户端， Session 服务端) </li>\n</ol>\n<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。 HTTP over TLS。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"0-HTTP-的特性\"><a href=\"#0-HTTP-的特性\" class=\"headerlink\" title=\"0. HTTP 的特性\"></a>0. HTTP 的特性</h2><p>HTTP 协议构建于 TCP/IP 协议之上，是一个应用层协议，默认端口号是 80 (HTTPS:  443)</p>\n<p>HTTP 是无连接无状态的</p>\n<ol>\n<li>无连接：服务器处理完客户的请求，并收到客户的应答后，即断开连接  （keep-alive :Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接 tcp连接）</li>\n<li>无状态：对于事务处理没有记忆能力  (Cookie 客户端， Session 服务端) </li>\n</ol>\n<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。 HTTP over TLS。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n"},{"title":"安装Chrome浏览器和ChromeDriver","date":"2019-09-18T03:51:16.000Z","_content":"\n## 一、 安装Chrome浏览器\n1、安装依赖\n\n`sudo apt-get install libxss1 libappindicator1 libindicator7`\n\n2、下载Chrome安装包 (最新稳定版)\n\n`wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb`\n\n3、安装\n\n```\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f\n```\n\n## 二、安装ChromeDriver\n1、安装xvfb以便我们可以无头奔跑地运行Chrome\n\n`sudo apt-get install xvfb`\n\n2、安装依赖\n\n`sudo apt-get install unzip`\n\n3、下载安装包\n\n`wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip`\n\n要下载对应版本 http://chromedriver.storage.googleapis.com/index.html \n\n4、解压缩+添加执行权限\n\n`unzip chromedriver_linux64.zip`\n\n5、移动\n\n`sudo mv -f chromedriver /usr/local/share/chromedriver`\n\n6、建立软连接\n\n`sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver`\n`sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver`\n\n## 三、无头运行Chrome\n1、安装Python依赖\n\n`pip3 install selenium`\n\n`pip3 install pyvirtualdisplay`\n","source":"_posts/基础知识/安装Chrome浏览器和ChromeDriver.md","raw":"---\n\ntitle: 安装Chrome浏览器和ChromeDriver\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: linux\n---\n\n## 一、 安装Chrome浏览器\n1、安装依赖\n\n`sudo apt-get install libxss1 libappindicator1 libindicator7`\n\n2、下载Chrome安装包 (最新稳定版)\n\n`wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb`\n\n3、安装\n\n```\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f\n```\n\n## 二、安装ChromeDriver\n1、安装xvfb以便我们可以无头奔跑地运行Chrome\n\n`sudo apt-get install xvfb`\n\n2、安装依赖\n\n`sudo apt-get install unzip`\n\n3、下载安装包\n\n`wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip`\n\n要下载对应版本 http://chromedriver.storage.googleapis.com/index.html \n\n4、解压缩+添加执行权限\n\n`unzip chromedriver_linux64.zip`\n\n5、移动\n\n`sudo mv -f chromedriver /usr/local/share/chromedriver`\n\n6、建立软连接\n\n`sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver`\n`sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver`\n\n## 三、无头运行Chrome\n1、安装Python依赖\n\n`pip3 install selenium`\n\n`pip3 install pyvirtualdisplay`\n","slug":"基础知识/安装Chrome浏览器和ChromeDriver","published":1,"updated":"2020-04-10T16:46:16.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuo1006674uxdzmz54h1","content":"<h2 id=\"一、-安装Chrome浏览器\"><a href=\"#一、-安装Chrome浏览器\" class=\"headerlink\" title=\"一、 安装Chrome浏览器\"></a>一、 安装Chrome浏览器</h2><p>1、安装依赖</p>\n<p><code>sudo apt-get install libxss1 libappindicator1 libindicator7</code></p>\n<p>2、下载Chrome安装包 (最新稳定版)</p>\n<p><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</code></p>\n<p>3、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i google-chrome*.deb</span><br><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装ChromeDriver\"><a href=\"#二、安装ChromeDriver\" class=\"headerlink\" title=\"二、安装ChromeDriver\"></a>二、安装ChromeDriver</h2><p>1、安装xvfb以便我们可以无头奔跑地运行Chrome</p>\n<p><code>sudo apt-get install xvfb</code></p>\n<p>2、安装依赖</p>\n<p><code>sudo apt-get install unzip</code></p>\n<p>3、下载安装包</p>\n<p><code>wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip</code></p>\n<p>要下载对应版本 <a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a> </p>\n<p>4、解压缩+添加执行权限</p>\n<p><code>unzip chromedriver_linux64.zip</code></p>\n<p>5、移动</p>\n<p><code>sudo mv -f chromedriver /usr/local/share/chromedriver</code></p>\n<p>6、建立软连接</p>\n<p><code>sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</code><br><code>sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</code></p>\n<h2 id=\"三、无头运行Chrome\"><a href=\"#三、无头运行Chrome\" class=\"headerlink\" title=\"三、无头运行Chrome\"></a>三、无头运行Chrome</h2><p>1、安装Python依赖</p>\n<p><code>pip3 install selenium</code></p>\n<p><code>pip3 install pyvirtualdisplay</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-安装Chrome浏览器\"><a href=\"#一、-安装Chrome浏览器\" class=\"headerlink\" title=\"一、 安装Chrome浏览器\"></a>一、 安装Chrome浏览器</h2><p>1、安装依赖</p>\n<p><code>sudo apt-get install libxss1 libappindicator1 libindicator7</code></p>\n<p>2、下载Chrome安装包 (最新稳定版)</p>\n<p><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</code></p>\n<p>3、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i google-chrome*.deb</span><br><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装ChromeDriver\"><a href=\"#二、安装ChromeDriver\" class=\"headerlink\" title=\"二、安装ChromeDriver\"></a>二、安装ChromeDriver</h2><p>1、安装xvfb以便我们可以无头奔跑地运行Chrome</p>\n<p><code>sudo apt-get install xvfb</code></p>\n<p>2、安装依赖</p>\n<p><code>sudo apt-get install unzip</code></p>\n<p>3、下载安装包</p>\n<p><code>wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip</code></p>\n<p>要下载对应版本 <a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a> </p>\n<p>4、解压缩+添加执行权限</p>\n<p><code>unzip chromedriver_linux64.zip</code></p>\n<p>5、移动</p>\n<p><code>sudo mv -f chromedriver /usr/local/share/chromedriver</code></p>\n<p>6、建立软连接</p>\n<p><code>sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</code><br><code>sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</code></p>\n<h2 id=\"三、无头运行Chrome\"><a href=\"#三、无头运行Chrome\" class=\"headerlink\" title=\"三、无头运行Chrome\"></a>三、无头运行Chrome</h2><p>1、安装Python依赖</p>\n<p><code>pip3 install selenium</code></p>\n<p><code>pip3 install pyvirtualdisplay</code></p>\n"},{"title":"IP地址","date":"2019-06-30T03:05:31.000Z","_content":"\nip 地址就是 网络中的 地址信息\n\n## IPv4 与 IPIPV\nIPv4 格式 A.B.C.D  取值范围 0 ~ 255     2\\*32 个 \nIPv6 格式 A:B:C:D:E:F:G:H   十六进制  2\\*128 个 16\\*32\n\n## 公网 ip 和 内网 ip\n公网内 ip 地址由 inter NIC 负责。公有地址全球唯一\n私有地址 是非注册地址，用于组织机构内部使用\n\n### 私有地址范围\n1. A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255\n2. B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255\n3. C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255\n \n私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）\n（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）\n\n内网的地址都是使用的路由器中的公共的公网ip来连接internet。\n\n局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复\n\n## localhost， 127.0.0.1 和 0.0.0.0 区别\n\n1. localhost : 域名， windows默认将 localhost 指向`127.0.0.1`.\n2. 127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）\n3. 0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口\n\n\n\n","source":"_posts/基础知识/ip地址.md","raw":"\n---\ntitle: IP地址\ndate: 2019-06-30 11:05:31\ntags:\ncategories: linux\n---\n\nip 地址就是 网络中的 地址信息\n\n## IPv4 与 IPIPV\nIPv4 格式 A.B.C.D  取值范围 0 ~ 255     2\\*32 个 \nIPv6 格式 A:B:C:D:E:F:G:H   十六进制  2\\*128 个 16\\*32\n\n## 公网 ip 和 内网 ip\n公网内 ip 地址由 inter NIC 负责。公有地址全球唯一\n私有地址 是非注册地址，用于组织机构内部使用\n\n### 私有地址范围\n1. A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255\n2. B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255\n3. C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255\n \n私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）\n（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）\n\n内网的地址都是使用的路由器中的公共的公网ip来连接internet。\n\n局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复\n\n## localhost， 127.0.0.1 和 0.0.0.0 区别\n\n1. localhost : 域名， windows默认将 localhost 指向`127.0.0.1`.\n2. 127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）\n3. 0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口\n\n\n\n","slug":"基础知识/ip地址","published":1,"updated":"2020-04-10T16:46:16.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuo8006974uxhlk6528g","content":"<p>ip 地址就是 网络中的 地址信息</p>\n<h2 id=\"IPv4-与-IPIPV\"><a href=\"#IPv4-与-IPIPV\" class=\"headerlink\" title=\"IPv4 与 IPIPV\"></a>IPv4 与 IPIPV</h2><p>IPv4 格式 A.B.C.D  取值范围 0 ~ 255     2*32 个<br>IPv6 格式 A:B:C:D:E:F:G:H   十六进制  2*128 个 16*32</p>\n<h2 id=\"公网-ip-和-内网-ip\"><a href=\"#公网-ip-和-内网-ip\" class=\"headerlink\" title=\"公网 ip 和 内网 ip\"></a>公网 ip 和 内网 ip</h2><p>公网内 ip 地址由 inter NIC 负责。公有地址全球唯一<br>私有地址 是非注册地址，用于组织机构内部使用</p>\n<h3 id=\"私有地址范围\"><a href=\"#私有地址范围\" class=\"headerlink\" title=\"私有地址范围\"></a>私有地址范围</h3><ol>\n<li>A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255</li>\n<li>B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255</li>\n<li>C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255</li>\n</ol>\n<p>私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）<br>（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）</p>\n<p>内网的地址都是使用的路由器中的公共的公网ip来连接internet。</p>\n<p>局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复</p>\n<h2 id=\"localhost，-127-0-0-1-和-0-0-0-0-区别\"><a href=\"#localhost，-127-0-0-1-和-0-0-0-0-区别\" class=\"headerlink\" title=\"localhost， 127.0.0.1 和 0.0.0.0 区别\"></a>localhost， 127.0.0.1 和 0.0.0.0 区别</h2><ol>\n<li>localhost : 域名， windows默认将 localhost 指向<code>127.0.0.1</code>.</li>\n<li>127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）</li>\n<li>0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>ip 地址就是 网络中的 地址信息</p>\n<h2 id=\"IPv4-与-IPIPV\"><a href=\"#IPv4-与-IPIPV\" class=\"headerlink\" title=\"IPv4 与 IPIPV\"></a>IPv4 与 IPIPV</h2><p>IPv4 格式 A.B.C.D  取值范围 0 ~ 255     2*32 个<br>IPv6 格式 A:B:C:D:E:F:G:H   十六进制  2*128 个 16*32</p>\n<h2 id=\"公网-ip-和-内网-ip\"><a href=\"#公网-ip-和-内网-ip\" class=\"headerlink\" title=\"公网 ip 和 内网 ip\"></a>公网 ip 和 内网 ip</h2><p>公网内 ip 地址由 inter NIC 负责。公有地址全球唯一<br>私有地址 是非注册地址，用于组织机构内部使用</p>\n<h3 id=\"私有地址范围\"><a href=\"#私有地址范围\" class=\"headerlink\" title=\"私有地址范围\"></a>私有地址范围</h3><ol>\n<li>A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255</li>\n<li>B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255</li>\n<li>C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255</li>\n</ol>\n<p>私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）<br>（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）</p>\n<p>内网的地址都是使用的路由器中的公共的公网ip来连接internet。</p>\n<p>局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复</p>\n<h2 id=\"localhost，-127-0-0-1-和-0-0-0-0-区别\"><a href=\"#localhost，-127-0-0-1-和-0-0-0-0-区别\" class=\"headerlink\" title=\"localhost， 127.0.0.1 和 0.0.0.0 区别\"></a>localhost， 127.0.0.1 和 0.0.0.0 区别</h2><ol>\n<li>localhost : 域名， windows默认将 localhost 指向<code>127.0.0.1</code>.</li>\n<li>127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）</li>\n<li>0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口</li>\n</ol>\n"},{"title":"2017-2018年总结(初版)","date":"2019-01-11T19:41:44.000Z","_content":"\n**本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。**\n\n**从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)**\n\n## 粗略分为4个方面\n### 工作方面\n\n准确来说，目前从事过两份工作。\n\n1. 2017-08 至 2017-12。\n毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。\n这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）\n\n2. 2018-04至2019-01。\n亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。\n我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。\n目前看来，从事这么久的主要原因:\n一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。\n\n### 学习方面\n第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。\n\n第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的[个人博客](https://itswl.github.io/)来记录，网址为：https://itswl.github.io\n\n### 生活方面\n没有以前那么慵懒了，变得更加的独立。\n\n17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。\n\n今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）\n然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。\n\n\n**当然还有一个特别重大的事：**我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。\n\n### 思想上面\n我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。\n\n## 总结\n**既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。**\n\n**好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。**\n\n**期待:2019，能够真的成长吧**\n\n### 补(一)\n读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。\n\n### 补(二)\n今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。\n\n### 补(三)\n![](https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/随笔/2017-2018 总结(初版).md","raw":"---\ntitle: 2017-2018年总结(初版)\ndate: 2019-01-12 03:41:44\ntags:\ncategories: 随笔\n---\n\n**本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。**\n\n**从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)**\n\n## 粗略分为4个方面\n### 工作方面\n\n准确来说，目前从事过两份工作。\n\n1. 2017-08 至 2017-12。\n毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。\n这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）\n\n2. 2018-04至2019-01。\n亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。\n我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。\n目前看来，从事这么久的主要原因:\n一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。\n\n### 学习方面\n第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。\n\n第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的[个人博客](https://itswl.github.io/)来记录，网址为：https://itswl.github.io\n\n### 生活方面\n没有以前那么慵懒了，变得更加的独立。\n\n17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。\n\n今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）\n然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。\n\n\n**当然还有一个特别重大的事：**我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。\n\n### 思想上面\n我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。\n\n## 总结\n**既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。**\n\n**好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。**\n\n**期待:2019，能够真的成长吧**\n\n### 补(一)\n读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。\n\n### 补(二)\n今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。\n\n### 补(三)\n![](https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"随笔/2017-2018 总结(初版)","published":1,"updated":"2020-04-10T16:46:16.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuod006c74uxnmt64nj9","content":"<p><strong>本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。</strong></p>\n<p><strong>从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)</strong></p>\n<h2 id=\"粗略分为4个方面\"><a href=\"#粗略分为4个方面\" class=\"headerlink\" title=\"粗略分为4个方面\"></a>粗略分为4个方面</h2><h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>准确来说，目前从事过两份工作。</p>\n<ol>\n<li><p>2017-08 至 2017-12。<br>毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。<br>这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）</p>\n</li>\n<li><p>2018-04至2019-01。<br>亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。<br>我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。<br>目前看来，从事这么久的主要原因:<br>一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。</p>\n</li>\n</ol>\n<h3 id=\"学习方面\"><a href=\"#学习方面\" class=\"headerlink\" title=\"学习方面\"></a>学习方面</h3><p>第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。</p>\n<p>第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的<a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">个人博客</a>来记录，网址为：<a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a></p>\n<h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>没有以前那么慵懒了，变得更加的独立。</p>\n<p>17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。</p>\n<p>今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）<br>然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。</p>\n<p><strong>当然还有一个特别重大的事：</strong>我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。</p>\n<h3 id=\"思想上面\"><a href=\"#思想上面\" class=\"headerlink\" title=\"思想上面\"></a>思想上面</h3><p>我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。</strong></p>\n<p><strong>好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。</strong></p>\n<p><strong>期待:2019，能够真的成长吧</strong></p>\n<h3 id=\"补-一\"><a href=\"#补-一\" class=\"headerlink\" title=\"补(一)\"></a>补(一)</h3><p>读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。</p>\n<h3 id=\"补-二\"><a href=\"#补-二\" class=\"headerlink\" title=\"补(二)\"></a>补(二)</h3><p>今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。</p>\n<h3 id=\"补-三\"><a href=\"#补-三\" class=\"headerlink\" title=\"补(三)\"></a>补(三)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。</strong></p>\n<p><strong>从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)</strong></p>\n<h2 id=\"粗略分为4个方面\"><a href=\"#粗略分为4个方面\" class=\"headerlink\" title=\"粗略分为4个方面\"></a>粗略分为4个方面</h2><h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>准确来说，目前从事过两份工作。</p>\n<ol>\n<li><p>2017-08 至 2017-12。<br>毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。<br>这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）</p>\n</li>\n<li><p>2018-04至2019-01。<br>亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。<br>我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。<br>目前看来，从事这么久的主要原因:<br>一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。</p>\n</li>\n</ol>\n<h3 id=\"学习方面\"><a href=\"#学习方面\" class=\"headerlink\" title=\"学习方面\"></a>学习方面</h3><p>第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。</p>\n<p>第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的<a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">个人博客</a>来记录，网址为：<a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a></p>\n<h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>没有以前那么慵懒了，变得更加的独立。</p>\n<p>17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。</p>\n<p>今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）<br>然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。</p>\n<p><strong>当然还有一个特别重大的事：</strong>我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。</p>\n<h3 id=\"思想上面\"><a href=\"#思想上面\" class=\"headerlink\" title=\"思想上面\"></a>思想上面</h3><p>我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。</strong></p>\n<p><strong>好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。</strong></p>\n<p><strong>期待:2019，能够真的成长吧</strong></p>\n<h3 id=\"补-一\"><a href=\"#补-一\" class=\"headerlink\" title=\"补(一)\"></a>补(一)</h3><p>读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。</p>\n<h3 id=\"补-二\"><a href=\"#补-二\" class=\"headerlink\" title=\"补(二)\"></a>补(二)</h3><p>今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。</p>\n<h3 id=\"补-三\"><a href=\"#补-三\" class=\"headerlink\" title=\"补(三)\"></a>补(三)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"常用模块","date":"2019-07-02T03:05:31.000Z","_content":"\n\n## 常用模块\n\n1. pipenv   # 虚拟环境\n2. flask   # 主要 路由、调试、web服务器网关接口子系统由 Werkzeug 提供。模板系统 Jinja2提供。\n3. flask-wtf  # 对独立的WTForms包进行了封装，用于表单处理\n4. flask-sqlalchemy  # 数据库框架，简化flask应用中使用 SQLAlchemy 操作， ORM 也可用其他\n5. flask-migrate # 数据库迁移框架\n6. flask-mail # 电子邮件支持\n7. flask-login  # 用于管理用户身份验证系统中的验证状态，且不依赖特定的身份验证机制\n\n### 调试模式\nFlask 应用在 调试模式中运行， 默认加载 **重载器**和**调试器**，\n **重载器**： 源码文件变动时，自动重启服务器\n **调试器**： 当应用抛出未处理的异常，会出现在浏览器中。\n \n **千万不要在生产服务器中启动调试模式**，启动调试模式可以要求输入 PIN\n \n ### 应用和请求上下文\n \n| 变量名 | 上下文 | 说 明 | \n| -------- | -------- |  -------- |\n| current_app | 应用上下文 | 当前应用的应用实例 |\n| g | 应用上下文 | 处理请求时用作临时存储的对象，每次请求都会重设这个变量 |\n| request | 请求上下文 | 请求对象，封装了客户端发出的 HTTP请求中的内容 |\n| session | 请求上下文 | 用户会话，值为一个字典，存储请求之间需要 记住 的值 |\n\n\n\n\n","source":"_posts/python/flask/readme.md","raw":"\n---\ntitle: 常用模块\ndate: 2019-07-02 11:05:31\ntags:\ncategories: flask\n---\n\n\n## 常用模块\n\n1. pipenv   # 虚拟环境\n2. flask   # 主要 路由、调试、web服务器网关接口子系统由 Werkzeug 提供。模板系统 Jinja2提供。\n3. flask-wtf  # 对独立的WTForms包进行了封装，用于表单处理\n4. flask-sqlalchemy  # 数据库框架，简化flask应用中使用 SQLAlchemy 操作， ORM 也可用其他\n5. flask-migrate # 数据库迁移框架\n6. flask-mail # 电子邮件支持\n7. flask-login  # 用于管理用户身份验证系统中的验证状态，且不依赖特定的身份验证机制\n\n### 调试模式\nFlask 应用在 调试模式中运行， 默认加载 **重载器**和**调试器**，\n **重载器**： 源码文件变动时，自动重启服务器\n **调试器**： 当应用抛出未处理的异常，会出现在浏览器中。\n \n **千万不要在生产服务器中启动调试模式**，启动调试模式可以要求输入 PIN\n \n ### 应用和请求上下文\n \n| 变量名 | 上下文 | 说 明 | \n| -------- | -------- |  -------- |\n| current_app | 应用上下文 | 当前应用的应用实例 |\n| g | 应用上下文 | 处理请求时用作临时存储的对象，每次请求都会重设这个变量 |\n| request | 请求上下文 | 请求对象，封装了客户端发出的 HTTP请求中的内容 |\n| session | 请求上下文 | 用户会话，值为一个字典，存储请求之间需要 记住 的值 |\n\n\n\n\n","slug":"python/flask/readme","published":1,"updated":"2020-04-10T16:46:16.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuxq007y74ux23f91164","content":"<h2 id=\"常用模块\"><a href=\"#常用模块\" class=\"headerlink\" title=\"常用模块\"></a>常用模块</h2><ol>\n<li>pipenv   # 虚拟环境</li>\n<li>flask   # 主要 路由、调试、web服务器网关接口子系统由 Werkzeug 提供。模板系统 Jinja2提供。</li>\n<li>flask-wtf  # 对独立的WTForms包进行了封装，用于表单处理</li>\n<li>flask-sqlalchemy  # 数据库框架，简化flask应用中使用 SQLAlchemy 操作， ORM 也可用其他</li>\n<li>flask-migrate # 数据库迁移框架</li>\n<li>flask-mail # 电子邮件支持</li>\n<li>flask-login  # 用于管理用户身份验证系统中的验证状态，且不依赖特定的身份验证机制</li>\n</ol>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>Flask 应用在 调试模式中运行， 默认加载 <strong>重载器</strong>和<strong>调试器</strong>，<br> <strong>重载器</strong>： 源码文件变动时，自动重启服务器<br> <strong>调试器</strong>： 当应用抛出未处理的异常，会出现在浏览器中。</p>\n<p> <strong>千万不要在生产服务器中启动调试模式</strong>，启动调试模式可以要求输入 PIN</p>\n<h3 id=\"应用和请求上下文\"><a href=\"#应用和请求上下文\" class=\"headerlink\" title=\"应用和请求上下文\"></a>应用和请求上下文</h3><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>上下文</th>\n<th>说 明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>current_app</td>\n<td>应用上下文</td>\n<td>当前应用的应用实例</td>\n</tr>\n<tr>\n<td>g</td>\n<td>应用上下文</td>\n<td>处理请求时用作临时存储的对象，每次请求都会重设这个变量</td>\n</tr>\n<tr>\n<td>request</td>\n<td>请求上下文</td>\n<td>请求对象，封装了客户端发出的 HTTP请求中的内容</td>\n</tr>\n<tr>\n<td>session</td>\n<td>请求上下文</td>\n<td>用户会话，值为一个字典，存储请求之间需要 记住 的值</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用模块\"><a href=\"#常用模块\" class=\"headerlink\" title=\"常用模块\"></a>常用模块</h2><ol>\n<li>pipenv   # 虚拟环境</li>\n<li>flask   # 主要 路由、调试、web服务器网关接口子系统由 Werkzeug 提供。模板系统 Jinja2提供。</li>\n<li>flask-wtf  # 对独立的WTForms包进行了封装，用于表单处理</li>\n<li>flask-sqlalchemy  # 数据库框架，简化flask应用中使用 SQLAlchemy 操作， ORM 也可用其他</li>\n<li>flask-migrate # 数据库迁移框架</li>\n<li>flask-mail # 电子邮件支持</li>\n<li>flask-login  # 用于管理用户身份验证系统中的验证状态，且不依赖特定的身份验证机制</li>\n</ol>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><p>Flask 应用在 调试模式中运行， 默认加载 <strong>重载器</strong>和<strong>调试器</strong>，<br> <strong>重载器</strong>： 源码文件变动时，自动重启服务器<br> <strong>调试器</strong>： 当应用抛出未处理的异常，会出现在浏览器中。</p>\n<p> <strong>千万不要在生产服务器中启动调试模式</strong>，启动调试模式可以要求输入 PIN</p>\n<h3 id=\"应用和请求上下文\"><a href=\"#应用和请求上下文\" class=\"headerlink\" title=\"应用和请求上下文\"></a>应用和请求上下文</h3><table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>上下文</th>\n<th>说 明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>current_app</td>\n<td>应用上下文</td>\n<td>当前应用的应用实例</td>\n</tr>\n<tr>\n<td>g</td>\n<td>应用上下文</td>\n<td>处理请求时用作临时存储的对象，每次请求都会重设这个变量</td>\n</tr>\n<tr>\n<td>request</td>\n<td>请求上下文</td>\n<td>请求对象，封装了客户端发出的 HTTP请求中的内容</td>\n</tr>\n<tr>\n<td>session</td>\n<td>请求上下文</td>\n<td>用户会话，值为一个字典，存储请求之间需要 记住 的值</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"cookbook有感","date":"2019-07-10T03:05:31.000Z","_content":"### 解压可迭代对象赋值给多个变量\n```\n items = [1, 10, 7, 4, 5, (1,2,3)]\n head,*tail,(*_,end) =items\n ```\n \n### 保留最后 N 个元素\n``` \nfrom collections import deque\n    >>> q = deque(maxlen=3)\n    >>> q.append(1)\n    >>> q.append(2)\n    >>> q.append(3)\n    >>> q\n    deque([1, 2, 3], maxlen=3)\n    >>> q.append(4)\n    >>> q\n    deque([2, 3, 4], maxlen=3)\n    >>> q.append(5)\n    >>> q\n    deque([3, 4, 5], maxlen=3)\n```\n##### 不指定，那么无限大小队列\n```\n    >>> q = deque()\n    >>> q.append(1)\n    >>> q.append(2)\n    >>> q.append(3)\n    >>> q\n    deque([1, 2, 3])\n    >>> q.appendleft(4)\n    >>> q\n    deque([4, 1, 2, 3])\n    >>> q.pop()  # 取出队列中最后一个元素\n    3\n    >>> q\n    deque([4, 1, 2])\n    >>> q.popleft()\n    4\n    >>> q\n    deque([1, 2])\n\t\n```\n\t在队列两端插入或删除元素时间复杂度都是 ``O(1)`` ，区别于列表，在列表的开头插入或删除元素的时间复杂度为 ``O(N)``\n### 从一个集合中获得最大或者最小的 N 个元素列表\nheapq 模块有两个函数：``nlargest()`` 和 ``nsmallest()`` 可以完美解决这个问题。\n\n```\n\n    import heapq\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\n    print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\n    \n    portfolio = [\n        {'name': 'IBM', 'shares': 100, 'price': 91.1},\n        {'name': 'AAPL', 'shares': 50, 'price': 543.22},\n        {'name': 'FB', 'shares': 200, 'price': 21.09},\n        {'name': 'HPQ', 'shares': 35, 'price': 31.75},\n        {'name': 'YHOO', 'shares': 45, 'price': 16.35},\n        {'name': 'ACME', 'shares': 75, 'price': 115.65}\n    ]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n```\n#### 对集合进行排序\n    >>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    >>> import heapq\n    >>> heap = list(nums)\n    >>> heapq.heapify(heap) # 从小到大排序\n    >>> heap\n    [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]\n    >>>\n    >>> heapq.heappop(heap)  # 弹出最小元素\n    -4\n    >>> heapq.heappop(heap)\n    1\n    >>> heapq.heappop(heap)\n    2\n  \n ####\n ```\n    >>> line = 'asdf fjdk; afed, fjek,asdf, foo'\n    >>> import re\n    >>> re.split(r'[;,\\s]\\s*', line)\n    ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']\n```\n\n### 按顺序插入字典\n```\nfrom collections import OrderedDict\n\nd = OrderedDict()\nd['foo'] = 1\nd['bar'] = 2\nd['spam'] = 4\nd['grok'] = 3\nfor key in d:\n    print(key, d[key])\n '''\nfoo 1\nbar 2\nspam 4\ngrok 3\n\nimport json\na = json.dumps(d)\ntype(a) # str \nprint(a)  # '{\"foo\": 1, \"bar\": 2, \"spam\": 4, \"grok\": 3}'\n\n '''\n ```\n ### 在两个字典中寻找相同点（比如相同的键、相同的值等等）\n ```\na = {\n        'x' : 1,\n        'y' : 2,\n        'z' : 3\n    }\nb = {\n        'w' : 10,\n        'x' : 11,\n        'y' : 2\n    }\n    \n\n# Find keys in common\n# 类似于集合求合集差集等。\na.keys() & b.keys() # { 'x', 'y' }\n# Find keys in a that are not in b\na.keys() - b.keys() # { 'z' }\n# Find (key,value) pairs in common\na.items() & b.items() # { ('y', 2) }\n\n# 使用列表推导式 从字典a 中删除 键 'z','w' \nc = {key:a[key] for key in a.keys() - {'z', 'w'}}\n  \n# 值非唯一，不建议用来进行 集合 操作\n```\n\n#### 不打乱顺序去重\n```\ndef dedupe(items):\n    seen = set()\n    for item in items:\n        if item not in seen:\n            yield item\n            seen.add(item)\n\na = [1, 5, 2, 1, 9, 1, 5, 10]\nlist(add(a)) # [1, 5, 2, 9, 10]\n```\n\n#### 可用slice() 优化切片操作\n```\nitems = [0, 1, 2, 3, 4, 5, 6]\na = slice(2, 4)\nitems[a] # 等同于 items[2, 4] \na = slice(2,10,2)\nitems[a]  # 等同于 items[2,10,2]\na.start # 2\na.stop  # 10\na.step # 2 \n\n    >>> s = 'HelloWorld'\n    >>> a.indices(len(s))\n    (5, 10, 2)\n    >>> for i in range(*a.indices(len(s))):\n    ...     print(s[i])\n    ...\n    W\n    r\n    d\n```\n\n看一下range函数\n ```\n In [178]: a = (5,10,2)\n\nIn [179]: range(a)\n\n\nIn [180]: range(*a)\nOut[180]: range(5, 10, 2)\n* 就是将 a 中元素当 位置参数传进去\n** 就是当字典\n def kw_dict(**kwargs):\n        return kwargs\n    print kw_dict(a=1,b=2,c=3) == {'a':1, 'b':2, 'c':3}\n ```\n","source":"_posts/python/cookbook/record.md","raw":"\n---\ntitle: cookbook有感\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n### 解压可迭代对象赋值给多个变量\n```\n items = [1, 10, 7, 4, 5, (1,2,3)]\n head,*tail,(*_,end) =items\n ```\n \n### 保留最后 N 个元素\n``` \nfrom collections import deque\n    >>> q = deque(maxlen=3)\n    >>> q.append(1)\n    >>> q.append(2)\n    >>> q.append(3)\n    >>> q\n    deque([1, 2, 3], maxlen=3)\n    >>> q.append(4)\n    >>> q\n    deque([2, 3, 4], maxlen=3)\n    >>> q.append(5)\n    >>> q\n    deque([3, 4, 5], maxlen=3)\n```\n##### 不指定，那么无限大小队列\n```\n    >>> q = deque()\n    >>> q.append(1)\n    >>> q.append(2)\n    >>> q.append(3)\n    >>> q\n    deque([1, 2, 3])\n    >>> q.appendleft(4)\n    >>> q\n    deque([4, 1, 2, 3])\n    >>> q.pop()  # 取出队列中最后一个元素\n    3\n    >>> q\n    deque([4, 1, 2])\n    >>> q.popleft()\n    4\n    >>> q\n    deque([1, 2])\n\t\n```\n\t在队列两端插入或删除元素时间复杂度都是 ``O(1)`` ，区别于列表，在列表的开头插入或删除元素的时间复杂度为 ``O(N)``\n### 从一个集合中获得最大或者最小的 N 个元素列表\nheapq 模块有两个函数：``nlargest()`` 和 ``nsmallest()`` 可以完美解决这个问题。\n\n```\n\n    import heapq\n    nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\n    print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\n    \n    portfolio = [\n        {'name': 'IBM', 'shares': 100, 'price': 91.1},\n        {'name': 'AAPL', 'shares': 50, 'price': 543.22},\n        {'name': 'FB', 'shares': 200, 'price': 21.09},\n        {'name': 'HPQ', 'shares': 35, 'price': 31.75},\n        {'name': 'YHOO', 'shares': 45, 'price': 16.35},\n        {'name': 'ACME', 'shares': 75, 'price': 115.65}\n    ]\n    cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\n    expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n```\n#### 对集合进行排序\n    >>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    >>> import heapq\n    >>> heap = list(nums)\n    >>> heapq.heapify(heap) # 从小到大排序\n    >>> heap\n    [-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]\n    >>>\n    >>> heapq.heappop(heap)  # 弹出最小元素\n    -4\n    >>> heapq.heappop(heap)\n    1\n    >>> heapq.heappop(heap)\n    2\n  \n ####\n ```\n    >>> line = 'asdf fjdk; afed, fjek,asdf, foo'\n    >>> import re\n    >>> re.split(r'[;,\\s]\\s*', line)\n    ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']\n```\n\n### 按顺序插入字典\n```\nfrom collections import OrderedDict\n\nd = OrderedDict()\nd['foo'] = 1\nd['bar'] = 2\nd['spam'] = 4\nd['grok'] = 3\nfor key in d:\n    print(key, d[key])\n '''\nfoo 1\nbar 2\nspam 4\ngrok 3\n\nimport json\na = json.dumps(d)\ntype(a) # str \nprint(a)  # '{\"foo\": 1, \"bar\": 2, \"spam\": 4, \"grok\": 3}'\n\n '''\n ```\n ### 在两个字典中寻找相同点（比如相同的键、相同的值等等）\n ```\na = {\n        'x' : 1,\n        'y' : 2,\n        'z' : 3\n    }\nb = {\n        'w' : 10,\n        'x' : 11,\n        'y' : 2\n    }\n    \n\n# Find keys in common\n# 类似于集合求合集差集等。\na.keys() & b.keys() # { 'x', 'y' }\n# Find keys in a that are not in b\na.keys() - b.keys() # { 'z' }\n# Find (key,value) pairs in common\na.items() & b.items() # { ('y', 2) }\n\n# 使用列表推导式 从字典a 中删除 键 'z','w' \nc = {key:a[key] for key in a.keys() - {'z', 'w'}}\n  \n# 值非唯一，不建议用来进行 集合 操作\n```\n\n#### 不打乱顺序去重\n```\ndef dedupe(items):\n    seen = set()\n    for item in items:\n        if item not in seen:\n            yield item\n            seen.add(item)\n\na = [1, 5, 2, 1, 9, 1, 5, 10]\nlist(add(a)) # [1, 5, 2, 9, 10]\n```\n\n#### 可用slice() 优化切片操作\n```\nitems = [0, 1, 2, 3, 4, 5, 6]\na = slice(2, 4)\nitems[a] # 等同于 items[2, 4] \na = slice(2,10,2)\nitems[a]  # 等同于 items[2,10,2]\na.start # 2\na.stop  # 10\na.step # 2 \n\n    >>> s = 'HelloWorld'\n    >>> a.indices(len(s))\n    (5, 10, 2)\n    >>> for i in range(*a.indices(len(s))):\n    ...     print(s[i])\n    ...\n    W\n    r\n    d\n```\n\n看一下range函数\n ```\n In [178]: a = (5,10,2)\n\nIn [179]: range(a)\n\n\nIn [180]: range(*a)\nOut[180]: range(5, 10, 2)\n* 就是将 a 中元素当 位置参数传进去\n** 就是当字典\n def kw_dict(**kwargs):\n        return kwargs\n    print kw_dict(a=1,b=2,c=3) == {'a':1, 'b':2, 'c':3}\n ```\n","slug":"python/cookbook/record","published":1,"updated":"2020-04-10T16:46:16.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuxw007z74uxck89nmo9","content":"<h3 id=\"解压可迭代对象赋值给多个变量\"><a href=\"#解压可迭代对象赋值给多个变量\" class=\"headerlink\" title=\"解压可迭代对象赋值给多个变量\"></a>解压可迭代对象赋值给多个变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [1, 10, 7, 4, 5, (1,2,3)]</span><br><span class=\"line\">head,*tail,(*_,end) =items</span><br></pre></td></tr></table></figure>\n<h3 id=\"保留最后-N-个元素\"><a href=\"#保留最后-N-个元素\" class=\"headerlink\" title=\"保留最后 N 个元素\"></a>保留最后 N 个元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import deque</span><br><span class=\"line\">    &gt;&gt;&gt; q = deque(maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(1)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(2)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(3)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([1, 2, 3], maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(4)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([2, 3, 4], maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(5)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([3, 4, 5], maxlen=3)</span><br></pre></td></tr></table></figure>\n<h5 id=\"不指定，那么无限大小队列\"><a href=\"#不指定，那么无限大小队列\" class=\"headerlink\" title=\"不指定，那么无限大小队列\"></a>不指定，那么无限大小队列</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; q = deque()</span><br><span class=\"line\">&gt;&gt;&gt; q.append(1)</span><br><span class=\"line\">&gt;&gt;&gt; q.append(2)</span><br><span class=\"line\">&gt;&gt;&gt; q.append(3)</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([1, 2, 3])</span><br><span class=\"line\">&gt;&gt;&gt; q.appendleft(4)</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([4, 1, 2, 3])</span><br><span class=\"line\">&gt;&gt;&gt; q.pop()  # 取出队列中最后一个元素</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([4, 1, 2])</span><br><span class=\"line\">&gt;&gt;&gt; q.popleft()</span><br><span class=\"line\">4</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([1, 2])</span><br></pre></td></tr></table></figure>\n<pre><code>在队列两端插入或删除元素时间复杂度都是 ``O(1)`` ，区别于列表，在列表的开头插入或删除元素的时间复杂度为 ``O(N)``\n</code></pre><h3 id=\"从一个集合中获得最大或者最小的-N-个元素列表\"><a href=\"#从一个集合中获得最大或者最小的-N-个元素列表\" class=\"headerlink\" title=\"从一个集合中获得最大或者最小的 N 个元素列表\"></a>从一个集合中获得最大或者最小的 N 个元素列表</h3><p>heapq 模块有两个函数：<code>nlargest()</code> 和 <code>nsmallest()</code> 可以完美解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import heapq</span><br><span class=\"line\">nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]</span><br><span class=\"line\">print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]</span><br><span class=\"line\">print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]</span><br><span class=\"line\"></span><br><span class=\"line\">portfolio = [</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;IBM&apos;, &apos;shares&apos;: 100, &apos;price&apos;: 91.1&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;AAPL&apos;, &apos;shares&apos;: 50, &apos;price&apos;: 543.22&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;FB&apos;, &apos;shares&apos;: 200, &apos;price&apos;: 21.09&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;HPQ&apos;, &apos;shares&apos;: 35, &apos;price&apos;: 31.75&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;YHOO&apos;, &apos;shares&apos;: 45, &apos;price&apos;: 16.35&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;ACME&apos;, &apos;shares&apos;: 75, &apos;price&apos;: 115.65&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">cheap = heapq.nsmallest(3, portfolio, key=lambda s: s[&apos;price&apos;])</span><br><span class=\"line\">expensive = heapq.nlargest(3, portfolio, key=lambda s: s[&apos;price&apos;])</span><br></pre></td></tr></table></figure>\n<h4 id=\"对集合进行排序\"><a href=\"#对集合进行排序\" class=\"headerlink\" title=\"对集合进行排序\"></a>对集合进行排序</h4><pre><code>&gt;&gt;&gt; nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n&gt;&gt;&gt; import heapq\n&gt;&gt;&gt; heap = list(nums)\n&gt;&gt;&gt; heapq.heapify(heap) # 从小到大排序\n&gt;&gt;&gt; heap\n[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]\n&gt;&gt;&gt;\n&gt;&gt;&gt; heapq.heappop(heap)  # 弹出最小元素\n-4\n&gt;&gt;&gt; heapq.heappop(heap)\n1\n&gt;&gt;&gt; heapq.heappop(heap)\n2\n</code></pre><p> ####<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; line = &apos;asdf fjdk; afed, fjek,asdf, foo&apos;</span><br><span class=\"line\">&gt;&gt;&gt; import re</span><br><span class=\"line\">&gt;&gt;&gt; re.split(r&apos;[;,\\s]\\s*&apos;, line)</span><br><span class=\"line\">[&apos;asdf&apos;, &apos;fjdk&apos;, &apos;afed&apos;, &apos;fjek&apos;, &apos;asdf&apos;, &apos;foo&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按顺序插入字典\"><a href=\"#按顺序插入字典\" class=\"headerlink\" title=\"按顺序插入字典\"></a>按顺序插入字典</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\">d = OrderedDict()</span><br><span class=\"line\">d[&apos;foo&apos;] = 1</span><br><span class=\"line\">d[&apos;bar&apos;] = 2</span><br><span class=\"line\">d[&apos;spam&apos;] = 4</span><br><span class=\"line\">d[&apos;grok&apos;] = 3</span><br><span class=\"line\">for key in d:</span><br><span class=\"line\">    print(key, d[key])</span><br><span class=\"line\"> &apos;&apos;&apos;</span><br><span class=\"line\">foo 1</span><br><span class=\"line\">bar 2</span><br><span class=\"line\">spam 4</span><br><span class=\"line\">grok 3</span><br><span class=\"line\"></span><br><span class=\"line\">import json</span><br><span class=\"line\">a = json.dumps(d)</span><br><span class=\"line\">type(a) # str </span><br><span class=\"line\">print(a)  # &apos;&#123;&quot;foo&quot;: 1, &quot;bar&quot;: 2, &quot;spam&quot;: 4, &quot;grok&quot;: 3&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"> &apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在两个字典中寻找相同点（比如相同的键、相同的值等等）\"><a href=\"#在两个字典中寻找相同点（比如相同的键、相同的值等等）\" class=\"headerlink\" title=\"在两个字典中寻找相同点（比如相同的键、相同的值等等）\"></a>在两个字典中寻找相同点（比如相同的键、相同的值等等）</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;</span><br><span class=\"line\">        &apos;x&apos; : 1,</span><br><span class=\"line\">        &apos;y&apos; : 2,</span><br><span class=\"line\">        &apos;z&apos; : 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">b = &#123;</span><br><span class=\"line\">        &apos;w&apos; : 10,</span><br><span class=\"line\">        &apos;x&apos; : 11,</span><br><span class=\"line\">        &apos;y&apos; : 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"># Find keys in common</span><br><span class=\"line\"># 类似于集合求合集差集等。</span><br><span class=\"line\">a.keys() &amp; b.keys() # &#123; &apos;x&apos;, &apos;y&apos; &#125;</span><br><span class=\"line\"># Find keys in a that are not in b</span><br><span class=\"line\">a.keys() - b.keys() # &#123; &apos;z&apos; &#125;</span><br><span class=\"line\"># Find (key,value) pairs in common</span><br><span class=\"line\">a.items() &amp; b.items() # &#123; (&apos;y&apos;, 2) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用列表推导式 从字典a 中删除 键 &apos;z&apos;,&apos;w&apos; </span><br><span class=\"line\">c = &#123;key:a[key] for key in a.keys() - &#123;&apos;z&apos;, &apos;w&apos;&#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"># 值非唯一，不建议用来进行 集合 操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"不打乱顺序去重\"><a href=\"#不打乱顺序去重\" class=\"headerlink\" title=\"不打乱顺序去重\"></a>不打乱顺序去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dedupe(items):</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    for item in items:</span><br><span class=\"line\">        if item not in seen:</span><br><span class=\"line\">            yield item</span><br><span class=\"line\">            seen.add(item)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [1, 5, 2, 1, 9, 1, 5, 10]</span><br><span class=\"line\">list(add(a)) # [1, 5, 2, 9, 10]</span><br></pre></td></tr></table></figure>\n<h4 id=\"可用slice-优化切片操作\"><a href=\"#可用slice-优化切片操作\" class=\"headerlink\" title=\"可用slice() 优化切片操作\"></a>可用slice() 优化切片操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [0, 1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">a = slice(2, 4)</span><br><span class=\"line\">items[a] # 等同于 items[2, 4] </span><br><span class=\"line\">a = slice(2,10,2)</span><br><span class=\"line\">items[a]  # 等同于 items[2,10,2]</span><br><span class=\"line\">a.start # 2</span><br><span class=\"line\">a.stop  # 10</span><br><span class=\"line\">a.step # 2 </span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;&gt;&gt; s = &apos;HelloWorld&apos;</span><br><span class=\"line\">    &gt;&gt;&gt; a.indices(len(s))</span><br><span class=\"line\">    (5, 10, 2)</span><br><span class=\"line\">    &gt;&gt;&gt; for i in range(*a.indices(len(s))):</span><br><span class=\"line\">    ...     print(s[i])</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    W</span><br><span class=\"line\">    r</span><br><span class=\"line\">    d</span><br></pre></td></tr></table></figure>\n<p>看一下range函数<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> In [178]: a = (5,10,2)</span><br><span class=\"line\"></span><br><span class=\"line\">In [179]: range(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [180]: range(*a)</span><br><span class=\"line\">Out[180]: range(5, 10, 2)</span><br><span class=\"line\">* 就是将 a 中元素当 位置参数传进去</span><br><span class=\"line\">** 就是当字典</span><br><span class=\"line\"> def kw_dict(**kwargs):</span><br><span class=\"line\">        return kwargs</span><br><span class=\"line\">    print kw_dict(a=1,b=2,c=3) == &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解压可迭代对象赋值给多个变量\"><a href=\"#解压可迭代对象赋值给多个变量\" class=\"headerlink\" title=\"解压可迭代对象赋值给多个变量\"></a>解压可迭代对象赋值给多个变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [1, 10, 7, 4, 5, (1,2,3)]</span><br><span class=\"line\">head,*tail,(*_,end) =items</span><br></pre></td></tr></table></figure>\n<h3 id=\"保留最后-N-个元素\"><a href=\"#保留最后-N-个元素\" class=\"headerlink\" title=\"保留最后 N 个元素\"></a>保留最后 N 个元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import deque</span><br><span class=\"line\">    &gt;&gt;&gt; q = deque(maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(1)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(2)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(3)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([1, 2, 3], maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(4)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([2, 3, 4], maxlen=3)</span><br><span class=\"line\">    &gt;&gt;&gt; q.append(5)</span><br><span class=\"line\">    &gt;&gt;&gt; q</span><br><span class=\"line\">    deque([3, 4, 5], maxlen=3)</span><br></pre></td></tr></table></figure>\n<h5 id=\"不指定，那么无限大小队列\"><a href=\"#不指定，那么无限大小队列\" class=\"headerlink\" title=\"不指定，那么无限大小队列\"></a>不指定，那么无限大小队列</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; q = deque()</span><br><span class=\"line\">&gt;&gt;&gt; q.append(1)</span><br><span class=\"line\">&gt;&gt;&gt; q.append(2)</span><br><span class=\"line\">&gt;&gt;&gt; q.append(3)</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([1, 2, 3])</span><br><span class=\"line\">&gt;&gt;&gt; q.appendleft(4)</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([4, 1, 2, 3])</span><br><span class=\"line\">&gt;&gt;&gt; q.pop()  # 取出队列中最后一个元素</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([4, 1, 2])</span><br><span class=\"line\">&gt;&gt;&gt; q.popleft()</span><br><span class=\"line\">4</span><br><span class=\"line\">&gt;&gt;&gt; q</span><br><span class=\"line\">deque([1, 2])</span><br></pre></td></tr></table></figure>\n<pre><code>在队列两端插入或删除元素时间复杂度都是 ``O(1)`` ，区别于列表，在列表的开头插入或删除元素的时间复杂度为 ``O(N)``\n</code></pre><h3 id=\"从一个集合中获得最大或者最小的-N-个元素列表\"><a href=\"#从一个集合中获得最大或者最小的-N-个元素列表\" class=\"headerlink\" title=\"从一个集合中获得最大或者最小的 N 个元素列表\"></a>从一个集合中获得最大或者最小的 N 个元素列表</h3><p>heapq 模块有两个函数：<code>nlargest()</code> 和 <code>nsmallest()</code> 可以完美解决这个问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import heapq</span><br><span class=\"line\">nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]</span><br><span class=\"line\">print(heapq.nlargest(3, nums)) # Prints [42, 37, 23]</span><br><span class=\"line\">print(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]</span><br><span class=\"line\"></span><br><span class=\"line\">portfolio = [</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;IBM&apos;, &apos;shares&apos;: 100, &apos;price&apos;: 91.1&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;AAPL&apos;, &apos;shares&apos;: 50, &apos;price&apos;: 543.22&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;FB&apos;, &apos;shares&apos;: 200, &apos;price&apos;: 21.09&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;HPQ&apos;, &apos;shares&apos;: 35, &apos;price&apos;: 31.75&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;YHOO&apos;, &apos;shares&apos;: 45, &apos;price&apos;: 16.35&#125;,</span><br><span class=\"line\">    &#123;&apos;name&apos;: &apos;ACME&apos;, &apos;shares&apos;: 75, &apos;price&apos;: 115.65&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">cheap = heapq.nsmallest(3, portfolio, key=lambda s: s[&apos;price&apos;])</span><br><span class=\"line\">expensive = heapq.nlargest(3, portfolio, key=lambda s: s[&apos;price&apos;])</span><br></pre></td></tr></table></figure>\n<h4 id=\"对集合进行排序\"><a href=\"#对集合进行排序\" class=\"headerlink\" title=\"对集合进行排序\"></a>对集合进行排序</h4><pre><code>&gt;&gt;&gt; nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n&gt;&gt;&gt; import heapq\n&gt;&gt;&gt; heap = list(nums)\n&gt;&gt;&gt; heapq.heapify(heap) # 从小到大排序\n&gt;&gt;&gt; heap\n[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]\n&gt;&gt;&gt;\n&gt;&gt;&gt; heapq.heappop(heap)  # 弹出最小元素\n-4\n&gt;&gt;&gt; heapq.heappop(heap)\n1\n&gt;&gt;&gt; heapq.heappop(heap)\n2\n</code></pre><p> ####<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; line = &apos;asdf fjdk; afed, fjek,asdf, foo&apos;</span><br><span class=\"line\">&gt;&gt;&gt; import re</span><br><span class=\"line\">&gt;&gt;&gt; re.split(r&apos;[;,\\s]\\s*&apos;, line)</span><br><span class=\"line\">[&apos;asdf&apos;, &apos;fjdk&apos;, &apos;afed&apos;, &apos;fjek&apos;, &apos;asdf&apos;, &apos;foo&apos;]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"按顺序插入字典\"><a href=\"#按顺序插入字典\" class=\"headerlink\" title=\"按顺序插入字典\"></a>按顺序插入字典</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import OrderedDict</span><br><span class=\"line\"></span><br><span class=\"line\">d = OrderedDict()</span><br><span class=\"line\">d[&apos;foo&apos;] = 1</span><br><span class=\"line\">d[&apos;bar&apos;] = 2</span><br><span class=\"line\">d[&apos;spam&apos;] = 4</span><br><span class=\"line\">d[&apos;grok&apos;] = 3</span><br><span class=\"line\">for key in d:</span><br><span class=\"line\">    print(key, d[key])</span><br><span class=\"line\"> &apos;&apos;&apos;</span><br><span class=\"line\">foo 1</span><br><span class=\"line\">bar 2</span><br><span class=\"line\">spam 4</span><br><span class=\"line\">grok 3</span><br><span class=\"line\"></span><br><span class=\"line\">import json</span><br><span class=\"line\">a = json.dumps(d)</span><br><span class=\"line\">type(a) # str </span><br><span class=\"line\">print(a)  # &apos;&#123;&quot;foo&quot;: 1, &quot;bar&quot;: 2, &quot;spam&quot;: 4, &quot;grok&quot;: 3&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"> &apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在两个字典中寻找相同点（比如相同的键、相同的值等等）\"><a href=\"#在两个字典中寻找相同点（比如相同的键、相同的值等等）\" class=\"headerlink\" title=\"在两个字典中寻找相同点（比如相同的键、相同的值等等）\"></a>在两个字典中寻找相同点（比如相同的键、相同的值等等）</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;</span><br><span class=\"line\">        &apos;x&apos; : 1,</span><br><span class=\"line\">        &apos;y&apos; : 2,</span><br><span class=\"line\">        &apos;z&apos; : 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">b = &#123;</span><br><span class=\"line\">        &apos;w&apos; : 10,</span><br><span class=\"line\">        &apos;x&apos; : 11,</span><br><span class=\"line\">        &apos;y&apos; : 2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"># Find keys in common</span><br><span class=\"line\"># 类似于集合求合集差集等。</span><br><span class=\"line\">a.keys() &amp; b.keys() # &#123; &apos;x&apos;, &apos;y&apos; &#125;</span><br><span class=\"line\"># Find keys in a that are not in b</span><br><span class=\"line\">a.keys() - b.keys() # &#123; &apos;z&apos; &#125;</span><br><span class=\"line\"># Find (key,value) pairs in common</span><br><span class=\"line\">a.items() &amp; b.items() # &#123; (&apos;y&apos;, 2) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用列表推导式 从字典a 中删除 键 &apos;z&apos;,&apos;w&apos; </span><br><span class=\"line\">c = &#123;key:a[key] for key in a.keys() - &#123;&apos;z&apos;, &apos;w&apos;&#125;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"># 值非唯一，不建议用来进行 集合 操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"不打乱顺序去重\"><a href=\"#不打乱顺序去重\" class=\"headerlink\" title=\"不打乱顺序去重\"></a>不打乱顺序去重</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def dedupe(items):</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    for item in items:</span><br><span class=\"line\">        if item not in seen:</span><br><span class=\"line\">            yield item</span><br><span class=\"line\">            seen.add(item)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [1, 5, 2, 1, 9, 1, 5, 10]</span><br><span class=\"line\">list(add(a)) # [1, 5, 2, 9, 10]</span><br></pre></td></tr></table></figure>\n<h4 id=\"可用slice-优化切片操作\"><a href=\"#可用slice-优化切片操作\" class=\"headerlink\" title=\"可用slice() 优化切片操作\"></a>可用slice() 优化切片操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [0, 1, 2, 3, 4, 5, 6]</span><br><span class=\"line\">a = slice(2, 4)</span><br><span class=\"line\">items[a] # 等同于 items[2, 4] </span><br><span class=\"line\">a = slice(2,10,2)</span><br><span class=\"line\">items[a]  # 等同于 items[2,10,2]</span><br><span class=\"line\">a.start # 2</span><br><span class=\"line\">a.stop  # 10</span><br><span class=\"line\">a.step # 2 </span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;&gt;&gt; s = &apos;HelloWorld&apos;</span><br><span class=\"line\">    &gt;&gt;&gt; a.indices(len(s))</span><br><span class=\"line\">    (5, 10, 2)</span><br><span class=\"line\">    &gt;&gt;&gt; for i in range(*a.indices(len(s))):</span><br><span class=\"line\">    ...     print(s[i])</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    W</span><br><span class=\"line\">    r</span><br><span class=\"line\">    d</span><br></pre></td></tr></table></figure>\n<p>看一下range函数<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> In [178]: a = (5,10,2)</span><br><span class=\"line\"></span><br><span class=\"line\">In [179]: range(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">In [180]: range(*a)</span><br><span class=\"line\">Out[180]: range(5, 10, 2)</span><br><span class=\"line\">* 就是将 a 中元素当 位置参数传进去</span><br><span class=\"line\">** 就是当字典</span><br><span class=\"line\"> def kw_dict(**kwargs):</span><br><span class=\"line\">        return kwargs</span><br><span class=\"line\">    print kw_dict(a=1,b=2,c=3) == &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"初探元编程","date":"2019-07-10T03:05:31.000Z","_content":"\n## type\ntype 是python 内置元类，为改变 Python 中类的行为（比如，SomeClass 的行为），我们可以通过继承 type 元类，定义一个自定义元类。元类是在 Python 中进行元编程的一种方法\n```\nclass SomeClass:\n    pass\nsome_object = SomeClass()\ntype(some_object)  #  __main__.SomeClass\n```\n\n```\n>>> import inspect\n>>>inspect.isclass(SomeClass)\nTrue\n>>>inspect.isclass(some_object)\nFalse\n>>>inspect.isclass(type(some_object))\nTrue\n```\n\n```\n>>> type(type(SomeClass))\n<type 'type'>\n>>>inspect.isclass(type(type(SomeClass)))\nTrue\n>>>type(type(type(SomeClass)))\n<type 'type'>\n>>>isclass(type(type(type(SomeClass))))\nTrue\n```\n\n除 type 之外，Python 中的一切都是对象，它们要么是类的实例，要么是元类的实例。\n```\n>>> some_obj = SomeClass()\n>>> isinstance(some_obj,SomeClass)\nTrue\n>>> isinstance(SomeClass, type)\nTrue\n>>> isinstance(some_obj,type)\nFalse\n\n```\n### 在 Python 中使用 type 来创建类\n通过一个参数调用 type 时，会生成现有类的 type 信息。通过三个参数调用 type 时，会创建一个新的类对象。调用 type 时，参数是类名、基类列表以及指定类的名称空间的字典（所有字段和方法）\n\n```\nSomeClass = type('SomeClass', (), {})\n```\n与下面等价\n```\nSomeClass = type('SomeClass', (), {})\n```\n此外\n```\ndef some_function(self): \n    print(\"Hello\")\n \nParentClass = type('ParentClass', (), {})\nSomeClass = type('SomeClass',\n                 (ParentClass,),\n                 {'some_function': some_function,\n                  'some_var':5})\n ```\n等价于\n```\nclass ParentClass: \n    pass\n \nclass SomeClass(ParentClass): \n    some_var = 5\n    def some_function(self): \n        print(\"Hello!\")\n```\n## 元类\n编写自定义元类分为两个步骤：\n\n1. 编写元类类型的子类。\n2. 使用元类挂钩将新元类插入到类创建流程中\n### 元类的实际使用\n因为在子类中会继承元类，所以元类解决了代码冗余（不要重复自己 — DRY）这一实际问题。 通常情况下，在生成类对象的同时，通过执行额外操作或添加额外代码，元类也可以帮助提取有关类创建的复杂逻辑。元类的一些实际用例包括：\n\n1. 抽象基类\n2. 类的注册\n3. 在库和框架中创建 API\n\n#### 抽象基类\n抽象基类是只能被继承而不会被实例化的类\n```\nfrom abc import ABCMeta, abstractmethod\n \nclass Vehicle(metaclass=ABCMeta): \n \n    @abstractmethod\n    def refill_tank(self, litres): \n        pass\n \n    @abstractmethod\n    def move_ahead(self): \n        pass\n ```\n \n 创建一个从 Vehicle 类继承的 Truck 类：\n ```\n class Truck(Vehicle): \n    def __init__(self, company, color, wheels): \n        self.company = company\n        self.color = color\n        self.wheels = wheels\n \n    def refill_tank(self, litres): \n        pass\n \n    def move_ahead(self): \n        pass\n ```\n 调用\n ```\n mini_truck = Truck(\"Tesla Roadster\", \"Black\", 4)\n ```\n \n \n (参考文档)[https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]\n","source":"_posts/python/元编程/初探.md","raw":"\n---\ntitle: 初探元编程\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## type\ntype 是python 内置元类，为改变 Python 中类的行为（比如，SomeClass 的行为），我们可以通过继承 type 元类，定义一个自定义元类。元类是在 Python 中进行元编程的一种方法\n```\nclass SomeClass:\n    pass\nsome_object = SomeClass()\ntype(some_object)  #  __main__.SomeClass\n```\n\n```\n>>> import inspect\n>>>inspect.isclass(SomeClass)\nTrue\n>>>inspect.isclass(some_object)\nFalse\n>>>inspect.isclass(type(some_object))\nTrue\n```\n\n```\n>>> type(type(SomeClass))\n<type 'type'>\n>>>inspect.isclass(type(type(SomeClass)))\nTrue\n>>>type(type(type(SomeClass)))\n<type 'type'>\n>>>isclass(type(type(type(SomeClass))))\nTrue\n```\n\n除 type 之外，Python 中的一切都是对象，它们要么是类的实例，要么是元类的实例。\n```\n>>> some_obj = SomeClass()\n>>> isinstance(some_obj,SomeClass)\nTrue\n>>> isinstance(SomeClass, type)\nTrue\n>>> isinstance(some_obj,type)\nFalse\n\n```\n### 在 Python 中使用 type 来创建类\n通过一个参数调用 type 时，会生成现有类的 type 信息。通过三个参数调用 type 时，会创建一个新的类对象。调用 type 时，参数是类名、基类列表以及指定类的名称空间的字典（所有字段和方法）\n\n```\nSomeClass = type('SomeClass', (), {})\n```\n与下面等价\n```\nSomeClass = type('SomeClass', (), {})\n```\n此外\n```\ndef some_function(self): \n    print(\"Hello\")\n \nParentClass = type('ParentClass', (), {})\nSomeClass = type('SomeClass',\n                 (ParentClass,),\n                 {'some_function': some_function,\n                  'some_var':5})\n ```\n等价于\n```\nclass ParentClass: \n    pass\n \nclass SomeClass(ParentClass): \n    some_var = 5\n    def some_function(self): \n        print(\"Hello!\")\n```\n## 元类\n编写自定义元类分为两个步骤：\n\n1. 编写元类类型的子类。\n2. 使用元类挂钩将新元类插入到类创建流程中\n### 元类的实际使用\n因为在子类中会继承元类，所以元类解决了代码冗余（不要重复自己 — DRY）这一实际问题。 通常情况下，在生成类对象的同时，通过执行额外操作或添加额外代码，元类也可以帮助提取有关类创建的复杂逻辑。元类的一些实际用例包括：\n\n1. 抽象基类\n2. 类的注册\n3. 在库和框架中创建 API\n\n#### 抽象基类\n抽象基类是只能被继承而不会被实例化的类\n```\nfrom abc import ABCMeta, abstractmethod\n \nclass Vehicle(metaclass=ABCMeta): \n \n    @abstractmethod\n    def refill_tank(self, litres): \n        pass\n \n    @abstractmethod\n    def move_ahead(self): \n        pass\n ```\n \n 创建一个从 Vehicle 类继承的 Truck 类：\n ```\n class Truck(Vehicle): \n    def __init__(self, company, color, wheels): \n        self.company = company\n        self.color = color\n        self.wheels = wheels\n \n    def refill_tank(self, litres): \n        pass\n \n    def move_ahead(self): \n        pass\n ```\n 调用\n ```\n mini_truck = Truck(\"Tesla Roadster\", \"Black\", 4)\n ```\n \n \n (参考文档)[https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]\n","slug":"python/元编程/初探","published":1,"updated":"2020-04-10T16:46:16.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuye008074uxy10wd5sx","content":"<h2 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h2><p>type 是python 内置元类，为改变 Python 中类的行为（比如，SomeClass 的行为），我们可以通过继承 type 元类，定义一个自定义元类。元类是在 Python 中进行元编程的一种方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SomeClass:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">some_object = SomeClass()</span><br><span class=\"line\">type(some_object)  #  __main__.SomeClass</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import inspect</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(SomeClass)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(some_object)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(type(some_object))</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; type(type(SomeClass))</span><br><span class=\"line\">&lt;type &apos;type&apos;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(type(type(SomeClass)))</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt;type(type(type(SomeClass)))</span><br><span class=\"line\">&lt;type &apos;type&apos;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;isclass(type(type(type(SomeClass))))</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>除 type 之外，Python 中的一切都是对象，它们要么是类的实例，要么是元类的实例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; some_obj = SomeClass()</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(some_obj,SomeClass)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(SomeClass, type)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(some_obj,type)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在-Python-中使用-type-来创建类\"><a href=\"#在-Python-中使用-type-来创建类\" class=\"headerlink\" title=\"在 Python 中使用 type 来创建类\"></a>在 Python 中使用 type 来创建类</h3><p>通过一个参数调用 type 时，会生成现有类的 type 信息。通过三个参数调用 type 时，会创建一个新的类对象。调用 type 时，参数是类名、基类列表以及指定类的名称空间的字典（所有字段和方法）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>与下面等价<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此外<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def some_function(self): </span><br><span class=\"line\">    print(&quot;Hello&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">ParentClass = type(&apos;ParentClass&apos;, (), &#123;&#125;)</span><br><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;,</span><br><span class=\"line\">                 (ParentClass,),</span><br><span class=\"line\">                 &#123;&apos;some_function&apos;: some_function,</span><br><span class=\"line\">                  &apos;some_var&apos;:5&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ParentClass: </span><br><span class=\"line\">    pass</span><br><span class=\"line\"> </span><br><span class=\"line\">class SomeClass(ParentClass): </span><br><span class=\"line\">    some_var = 5</span><br><span class=\"line\">    def some_function(self): </span><br><span class=\"line\">        print(&quot;Hello!&quot;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"元类\"><a href=\"#元类\" class=\"headerlink\" title=\"元类\"></a>元类</h2><p>编写自定义元类分为两个步骤：</p>\n<ol>\n<li>编写元类类型的子类。</li>\n<li><p>使用元类挂钩将新元类插入到类创建流程中</p>\n<h3 id=\"元类的实际使用\"><a href=\"#元类的实际使用\" class=\"headerlink\" title=\"元类的实际使用\"></a>元类的实际使用</h3><p>因为在子类中会继承元类，所以元类解决了代码冗余（不要重复自己 — DRY）这一实际问题。 通常情况下，在生成类对象的同时，通过执行额外操作或添加额外代码，元类也可以帮助提取有关类创建的复杂逻辑。元类的一些实际用例包括：</p>\n</li>\n<li><p>抽象基类</p>\n</li>\n<li>类的注册</li>\n<li>在库和框架中创建 API</li>\n</ol>\n<h4 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h4><p>抽象基类是只能被继承而不会被实例化的类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"> </span><br><span class=\"line\">class Vehicle(metaclass=ABCMeta): </span><br><span class=\"line\"> </span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def refill_tank(self, litres): </span><br><span class=\"line\">        pass</span><br><span class=\"line\"> </span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def move_ahead(self): </span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p> 创建一个从 Vehicle 类继承的 Truck 类：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Truck(Vehicle): </span><br><span class=\"line\">   def __init__(self, company, color, wheels): </span><br><span class=\"line\">       self.company = company</span><br><span class=\"line\">       self.color = color</span><br><span class=\"line\">       self.wheels = wheels</span><br><span class=\"line\"></span><br><span class=\"line\">   def refill_tank(self, litres): </span><br><span class=\"line\">       pass</span><br><span class=\"line\"></span><br><span class=\"line\">   def move_ahead(self): </span><br><span class=\"line\">       pass</span><br></pre></td></tr></table></figure></p>\n<p> 调用<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mini_truck = Truck(&quot;Tesla Roadster&quot;, &quot;Black&quot;, 4)</span><br></pre></td></tr></table></figure></p>\n<p> (参考文档)[<a href=\"https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h2><p>type 是python 内置元类，为改变 Python 中类的行为（比如，SomeClass 的行为），我们可以通过继承 type 元类，定义一个自定义元类。元类是在 Python 中进行元编程的一种方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SomeClass:</span><br><span class=\"line\">    pass</span><br><span class=\"line\">some_object = SomeClass()</span><br><span class=\"line\">type(some_object)  #  __main__.SomeClass</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import inspect</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(SomeClass)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(some_object)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(type(some_object))</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; type(type(SomeClass))</span><br><span class=\"line\">&lt;type &apos;type&apos;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;inspect.isclass(type(type(SomeClass)))</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt;type(type(type(SomeClass)))</span><br><span class=\"line\">&lt;type &apos;type&apos;&gt;</span><br><span class=\"line\">&gt;&gt;&gt;isclass(type(type(type(SomeClass))))</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>除 type 之外，Python 中的一切都是对象，它们要么是类的实例，要么是元类的实例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; some_obj = SomeClass()</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(some_obj,SomeClass)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(SomeClass, type)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(some_obj,type)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在-Python-中使用-type-来创建类\"><a href=\"#在-Python-中使用-type-来创建类\" class=\"headerlink\" title=\"在 Python 中使用 type 来创建类\"></a>在 Python 中使用 type 来创建类</h3><p>通过一个参数调用 type 时，会生成现有类的 type 信息。通过三个参数调用 type 时，会创建一个新的类对象。调用 type 时，参数是类名、基类列表以及指定类的名称空间的字典（所有字段和方法）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>与下面等价<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>此外<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def some_function(self): </span><br><span class=\"line\">    print(&quot;Hello&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">ParentClass = type(&apos;ParentClass&apos;, (), &#123;&#125;)</span><br><span class=\"line\">SomeClass = type(&apos;SomeClass&apos;,</span><br><span class=\"line\">                 (ParentClass,),</span><br><span class=\"line\">                 &#123;&apos;some_function&apos;: some_function,</span><br><span class=\"line\">                  &apos;some_var&apos;:5&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ParentClass: </span><br><span class=\"line\">    pass</span><br><span class=\"line\"> </span><br><span class=\"line\">class SomeClass(ParentClass): </span><br><span class=\"line\">    some_var = 5</span><br><span class=\"line\">    def some_function(self): </span><br><span class=\"line\">        print(&quot;Hello!&quot;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"元类\"><a href=\"#元类\" class=\"headerlink\" title=\"元类\"></a>元类</h2><p>编写自定义元类分为两个步骤：</p>\n<ol>\n<li>编写元类类型的子类。</li>\n<li><p>使用元类挂钩将新元类插入到类创建流程中</p>\n<h3 id=\"元类的实际使用\"><a href=\"#元类的实际使用\" class=\"headerlink\" title=\"元类的实际使用\"></a>元类的实际使用</h3><p>因为在子类中会继承元类，所以元类解决了代码冗余（不要重复自己 — DRY）这一实际问题。 通常情况下，在生成类对象的同时，通过执行额外操作或添加额外代码，元类也可以帮助提取有关类创建的复杂逻辑。元类的一些实际用例包括：</p>\n</li>\n<li><p>抽象基类</p>\n</li>\n<li>类的注册</li>\n<li>在库和框架中创建 API</li>\n</ol>\n<h4 id=\"抽象基类\"><a href=\"#抽象基类\" class=\"headerlink\" title=\"抽象基类\"></a>抽象基类</h4><p>抽象基类是只能被继承而不会被实例化的类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"> </span><br><span class=\"line\">class Vehicle(metaclass=ABCMeta): </span><br><span class=\"line\"> </span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def refill_tank(self, litres): </span><br><span class=\"line\">        pass</span><br><span class=\"line\"> </span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def move_ahead(self): </span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p> 创建一个从 Vehicle 类继承的 Truck 类：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Truck(Vehicle): </span><br><span class=\"line\">   def __init__(self, company, color, wheels): </span><br><span class=\"line\">       self.company = company</span><br><span class=\"line\">       self.color = color</span><br><span class=\"line\">       self.wheels = wheels</span><br><span class=\"line\"></span><br><span class=\"line\">   def refill_tank(self, litres): </span><br><span class=\"line\">       pass</span><br><span class=\"line\"></span><br><span class=\"line\">   def move_ahead(self): </span><br><span class=\"line\">       pass</span><br></pre></td></tr></table></figure></p>\n<p> 调用<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mini_truck = Truck(&quot;Tesla Roadster&quot;, &quot;Black&quot;, 4)</span><br></pre></td></tr></table></figure></p>\n<p> (参考文档)[<a href=\"https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/analytics/library/ba-metaprogramming-python/index.html]</a></p>\n"},{"title":"部署","date":"2019-07-02T03:05:31.000Z","_content":"\n## 部署流程\n1. 自动执行全部任务\n2. 把生产环境中的错误写入日志\n\n## 部署方式\n1. 云托管\n2. 容器 eg:docker\n3. PaaS 平台即服务\n\n## 使用docker 部署\n1. 安装docker\n2. 构建容器映像\n3. 运行容器\n4. 数据库等最好另开容器\n5. 容器编排 Docker Compose \n\n\n定义的所有容器，可以使用 docker-compose 命令一次性全部启动\n\n","source":"_posts/python/flask/部署.md","raw":"\n---\ntitle: 部署\ndate: 2019-07-02 11:05:31\ntags:\ncategories: flask\n---\n\n## 部署流程\n1. 自动执行全部任务\n2. 把生产环境中的错误写入日志\n\n## 部署方式\n1. 云托管\n2. 容器 eg:docker\n3. PaaS 平台即服务\n\n## 使用docker 部署\n1. 安装docker\n2. 构建容器映像\n3. 运行容器\n4. 数据库等最好另开容器\n5. 容器编排 Docker Compose \n\n\n定义的所有容器，可以使用 docker-compose 命令一次性全部启动\n\n","slug":"python/flask/部署","published":1,"updated":"2020-04-10T16:46:16.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuyr008174ux5rknptr5","content":"<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><ol>\n<li>自动执行全部任务</li>\n<li>把生产环境中的错误写入日志</li>\n</ol>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ol>\n<li>云托管</li>\n<li>容器 eg:docker</li>\n<li>PaaS 平台即服务</li>\n</ol>\n<h2 id=\"使用docker-部署\"><a href=\"#使用docker-部署\" class=\"headerlink\" title=\"使用docker 部署\"></a>使用docker 部署</h2><ol>\n<li>安装docker</li>\n<li>构建容器映像</li>\n<li>运行容器</li>\n<li>数据库等最好另开容器</li>\n<li>容器编排 Docker Compose </li>\n</ol>\n<p>定义的所有容器，可以使用 docker-compose 命令一次性全部启动</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"部署流程\"><a href=\"#部署流程\" class=\"headerlink\" title=\"部署流程\"></a>部署流程</h2><ol>\n<li>自动执行全部任务</li>\n<li>把生产环境中的错误写入日志</li>\n</ol>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><ol>\n<li>云托管</li>\n<li>容器 eg:docker</li>\n<li>PaaS 平台即服务</li>\n</ol>\n<h2 id=\"使用docker-部署\"><a href=\"#使用docker-部署\" class=\"headerlink\" title=\"使用docker 部署\"></a>使用docker 部署</h2><ol>\n<li>安装docker</li>\n<li>构建容器映像</li>\n<li>运行容器</li>\n<li>数据库等最好另开容器</li>\n<li>容器编排 Docker Compose </li>\n</ol>\n<p>定义的所有容器，可以使用 docker-compose 命令一次性全部启动</p>\n"},{"title":"staticmethod和classmethod","date":"2019-10-10T03:05:31.000Z","_content":"一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。\n\n而使用 `@staticmethod`或 `@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n```\nclass A:\n    bar = 1\n    def foo(self):\n        print 'foo'\n \n    @staticmethod\n    def static_foo():\n        print 'static_foo'\n        print A.bar\n \n    @classmethod\n    def class_foo(cls):\n        print 'class_foo'\n        print cls.bar\n        cls().foo()\n \nA.static_foo()\nA.class_foo()\n\n```\n如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。\n\n而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码\n\n\n这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。\n\n这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：\n\n1. 方法可以判断出自己是通过基类被调用，还是通过某个子类被调用\n2. 通过子类调用时，方法可以返回子类的实例而非基类的实例\n3. 通过子类调用时，方法可以调用子类的其他classmethod\n","source":"_posts/python/面向对象/@staticmethod和@classmethod.md","raw":"---\ntitle: staticmethod和classmethod\ndate: 2019-10-10 11:05:31\ntags:\ncategories: python练习\n---\n一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。\n\n而使用 `@staticmethod`或 `@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n```\nclass A:\n    bar = 1\n    def foo(self):\n        print 'foo'\n \n    @staticmethod\n    def static_foo():\n        print 'static_foo'\n        print A.bar\n \n    @classmethod\n    def class_foo(cls):\n        print 'class_foo'\n        print cls.bar\n        cls().foo()\n \nA.static_foo()\nA.class_foo()\n\n```\n如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。\n\n而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码\n\n\n这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。\n\n这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：\n\n1. 方法可以判断出自己是通过基类被调用，还是通过某个子类被调用\n2. 通过子类调用时，方法可以返回子类的实例而非基类的实例\n3. 通过子类调用时，方法可以调用子类的其他classmethod\n","slug":"python/面向对象/@staticmethod和@classmethod","published":1,"updated":"2020-04-10T16:46:16.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuyy008374ux6t36ktvc","content":"<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p>\n<p>而使用 <code>@staticmethod</code>或 <code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    bar = 1</span><br><span class=\"line\">    def foo(self):</span><br><span class=\"line\">        print &apos;foo&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def static_foo():</span><br><span class=\"line\">        print &apos;static_foo&apos;</span><br><span class=\"line\">        print A.bar</span><br><span class=\"line\"> </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def class_foo(cls):</span><br><span class=\"line\">        print &apos;class_foo&apos;</span><br><span class=\"line\">        print cls.bar</span><br><span class=\"line\">        cls().foo()</span><br><span class=\"line\"> </span><br><span class=\"line\">A.static_foo()</span><br><span class=\"line\">A.class_foo()</span><br></pre></td></tr></table></figure>\n<p>如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。</p>\n<p>而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码</p>\n<p>这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。</p>\n<p>这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：</p>\n<ol>\n<li>方法可以判断出自己是通过基类被调用，还是通过某个子类被调用</li>\n<li>通过子类调用时，方法可以返回子类的实例而非基类的实例</li>\n<li>通过子类调用时，方法可以调用子类的其他classmethod</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p>\n<p>而使用 <code>@staticmethod</code>或 <code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    bar = 1</span><br><span class=\"line\">    def foo(self):</span><br><span class=\"line\">        print &apos;foo&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def static_foo():</span><br><span class=\"line\">        print &apos;static_foo&apos;</span><br><span class=\"line\">        print A.bar</span><br><span class=\"line\"> </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def class_foo(cls):</span><br><span class=\"line\">        print &apos;class_foo&apos;</span><br><span class=\"line\">        print cls.bar</span><br><span class=\"line\">        cls().foo()</span><br><span class=\"line\"> </span><br><span class=\"line\">A.static_foo()</span><br><span class=\"line\">A.class_foo()</span><br></pre></td></tr></table></figure>\n<p>如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。</p>\n<p>而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码</p>\n<p>这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。</p>\n<p>这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：</p>\n<ol>\n<li>方法可以判断出自己是通过基类被调用，还是通过某个子类被调用</li>\n<li>通过子类调用时，方法可以返回子类的实例而非基类的实例</li>\n<li>通过子类调用时，方法可以调用子类的其他classmethod</li>\n</ol>\n"},{"title":"上下文管理器","date":"2019-10-15T03:05:31.000Z","_content":"\n## 上下文管理器\n### 让对象支持上下文管理器\n对象需要定义 `__enter__ ` 和 `__exit__ `\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\n\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = family\n        self.type = type\n        self.sock = None\n\n    def __enter__(self):\n        if self.sock is not None:\n            raise RuntimeError('Already connected')\n        self.sock = socket(self.family, self.type)\n        self.sock.connect(self.address)\n        return self.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback\n        self.sock.close()\n        self.sock = None\n        #return True  如果这里返回True 则代表不处理with中的异常\n\nif __name__ == '__main__':\n    from functools import partial\n\n    conn = LazyConnection(('www.python.org', 80))\n    # Connection closed\n    with conn as s:\n        # conn.__enter__() executes: connection open\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.python.org\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n        print(resp)\n        # conn.__exit__() executes: connection closed\n\n```\n\n\n线程安全修改版\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = AF_INET\n        self.type = SOCK_STREAM\n        self.local = threading.local()\n\n    def __enter__(self):\n        if hasattr(self.local, 'sock'):\n            raise RuntimeError('Already connected')\n        self.local.sock = socket(self.family, self.type)\n        self.local.sock.connect(self.address)\n        return self.local.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):\n        self.local.sock.close()\n        del self.local.sock\n\nfrom functools import partial\ndef test(conn):\n    with conn as s:\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.huawei.com\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n\n    print('Got {} bytes'.format(len(resp)))\n\nif __name__ == '__main__':\n    conn = LazyConnection(('www.huawei.com', 80))\n\n    t1 = threading.Thread(target=test, args=(conn,))\n    t2 = threading.Thread(target=test, args=(conn,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n## 使用 `contexlib` 模块中的 `@contextmanager`装饰器\n**实现一个新的上下文管理器的最简单的方法**\n\n`yield` 之前的代码会在上下文管理器中作为 `__enter__()` 方法执行，\n所有在 `yield` 之后的代码会作为 `__exit__()` 方法执行\n\n先执行`print('《', end='')`，遇到yeild ,执行 `print('挪威的森林',end='')` , 最后执行 `print('》', end='')`\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef book_mark():\n    print('《', end='')\n    yield\n    print('》', end='')\n\n\nwith book_mark():\n    print('挪威的森林',end='')\n    \n# 《挪威的森林》\n```\n```\nimport time\nclass timethis:\n    def __init__(self, label):\n        self.label = label\n\n    def __enter__(self):\n        self.start = time.time()\n        print(f'start = {self.start}')\n\n    def __exit__(self, exc_ty, exc_val, exc_tb):\n        end = time.time()\n        print(f'{end = }')\n        print('{}: {}'.format(self.label, end - self.start))\n     \nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n#### 使用`from contextlib import contextmanager`\n```\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timethis(label):\n    start = time.time()\n    print(f'{start = }')\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f'{end = }')\n        print(f'{label} : {end - start}')\n\n# Example use\nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n\n### 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n```\n    \n    \nfrom contextlib import contextmanager\n\n@contextmanager\ndef list_transaction(orig_list):\n    working = list(orig_list)\n    yield working\n    orig_list[:] = working \n  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n\nitems = [1,2,3]\nwith list_transaction(items) as working:\n    working.append(4)\n    working.append(5)\n\nprint(items)  # [1,2,3,4,5]\n\nwith list_transaction(items) as working:\n    working.append(6)\n    working.append(7) working是[1,2,3,4,5,6,7]\n    raise RuntimeError('oops')  执行不了orig_list[:] = working\n\nprint(items)  ## 还是 [1,2,3,4,5] \n\n```\n\n","source":"_posts/python/面向对象/上下文管理器.md","raw":"---\ntitle: 上下文管理器\ndate: 2019-10-15 11:05:31\ntags:\ncategories: python练习\n---\n\n## 上下文管理器\n### 让对象支持上下文管理器\n对象需要定义 `__enter__ ` 和 `__exit__ `\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\n\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = family\n        self.type = type\n        self.sock = None\n\n    def __enter__(self):\n        if self.sock is not None:\n            raise RuntimeError('Already connected')\n        self.sock = socket(self.family, self.type)\n        self.sock.connect(self.address)\n        return self.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback\n        self.sock.close()\n        self.sock = None\n        #return True  如果这里返回True 则代表不处理with中的异常\n\nif __name__ == '__main__':\n    from functools import partial\n\n    conn = LazyConnection(('www.python.org', 80))\n    # Connection closed\n    with conn as s:\n        # conn.__enter__() executes: connection open\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.python.org\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n        print(resp)\n        # conn.__exit__() executes: connection closed\n\n```\n\n\n线程安全修改版\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = AF_INET\n        self.type = SOCK_STREAM\n        self.local = threading.local()\n\n    def __enter__(self):\n        if hasattr(self.local, 'sock'):\n            raise RuntimeError('Already connected')\n        self.local.sock = socket(self.family, self.type)\n        self.local.sock.connect(self.address)\n        return self.local.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):\n        self.local.sock.close()\n        del self.local.sock\n\nfrom functools import partial\ndef test(conn):\n    with conn as s:\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.huawei.com\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n\n    print('Got {} bytes'.format(len(resp)))\n\nif __name__ == '__main__':\n    conn = LazyConnection(('www.huawei.com', 80))\n\n    t1 = threading.Thread(target=test, args=(conn,))\n    t2 = threading.Thread(target=test, args=(conn,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n## 使用 `contexlib` 模块中的 `@contextmanager`装饰器\n**实现一个新的上下文管理器的最简单的方法**\n\n`yield` 之前的代码会在上下文管理器中作为 `__enter__()` 方法执行，\n所有在 `yield` 之后的代码会作为 `__exit__()` 方法执行\n\n先执行`print('《', end='')`，遇到yeild ,执行 `print('挪威的森林',end='')` , 最后执行 `print('》', end='')`\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef book_mark():\n    print('《', end='')\n    yield\n    print('》', end='')\n\n\nwith book_mark():\n    print('挪威的森林',end='')\n    \n# 《挪威的森林》\n```\n```\nimport time\nclass timethis:\n    def __init__(self, label):\n        self.label = label\n\n    def __enter__(self):\n        self.start = time.time()\n        print(f'start = {self.start}')\n\n    def __exit__(self, exc_ty, exc_val, exc_tb):\n        end = time.time()\n        print(f'{end = }')\n        print('{}: {}'.format(self.label, end - self.start))\n     \nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n#### 使用`from contextlib import contextmanager`\n```\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timethis(label):\n    start = time.time()\n    print(f'{start = }')\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f'{end = }')\n        print(f'{label} : {end - start}')\n\n# Example use\nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n\n### 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n```\n    \n    \nfrom contextlib import contextmanager\n\n@contextmanager\ndef list_transaction(orig_list):\n    working = list(orig_list)\n    yield working\n    orig_list[:] = working \n  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n\nitems = [1,2,3]\nwith list_transaction(items) as working:\n    working.append(4)\n    working.append(5)\n\nprint(items)  # [1,2,3,4,5]\n\nwith list_transaction(items) as working:\n    working.append(6)\n    working.append(7) working是[1,2,3,4,5,6,7]\n    raise RuntimeError('oops')  执行不了orig_list[:] = working\n\nprint(items)  ## 还是 [1,2,3,4,5] \n\n```\n\n","slug":"python/面向对象/上下文管理器","published":1,"updated":"2020-04-10T16:46:16.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuze008574ux5v0k0y9k","content":"<h2 id=\"上下文管理器\"><a href=\"#上下文管理器\" class=\"headerlink\" title=\"上下文管理器\"></a>上下文管理器</h2><h3 id=\"让对象支持上下文管理器\"><a href=\"#让对象支持上下文管理器\" class=\"headerlink\" title=\"让对象支持上下文管理器\"></a>让对象支持上下文管理器</h3><p>对象需要定义 <code>__enter__</code> 和 <code>__exit__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = family</span><br><span class=\"line\">        self.type = type</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if self.sock is not None:</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.sock.connect(self.address)</span><br><span class=\"line\">        return self.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback</span><br><span class=\"line\">        self.sock.close()</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\">        #return True  如果这里返回True 则代表不处理with中的异常</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    from functools import partial</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = LazyConnection((&apos;www.python.org&apos;, 80))</span><br><span class=\"line\">    # Connection closed</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        # conn.__enter__() executes: connection open</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.python.org\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\">        print(resp)</span><br><span class=\"line\">        # conn.__exit__() executes: connection closed</span><br></pre></td></tr></table></figure></p>\n<p>线程安全修改版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = AF_INET</span><br><span class=\"line\">        self.type = SOCK_STREAM</span><br><span class=\"line\">        self.local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if hasattr(self.local, &apos;sock&apos;):</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.local.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.local.sock.connect(self.address)</span><br><span class=\"line\">        return self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):</span><br><span class=\"line\">        self.local.sock.close()</span><br><span class=\"line\">        del self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import partial</span><br><span class=\"line\">def test(conn):</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.huawei.com\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Got &#123;&#125; bytes&apos;.format(len(resp)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    conn = LazyConnection((&apos;www.huawei.com&apos;, 80))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t2 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-contexlib-模块中的-contextmanager装饰器\"><a href=\"#使用-contexlib-模块中的-contextmanager装饰器\" class=\"headerlink\" title=\"使用 contexlib 模块中的 @contextmanager装饰器\"></a>使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code>装饰器</h2><p><strong>实现一个新的上下文管理器的最简单的方法</strong></p>\n<p><code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行，<br>所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行</p>\n<p>先执行<code>print(&#39;《&#39;, end=&#39;&#39;)</code>，遇到yeild ,执行 <code>print(&#39;挪威的森林&#39;,end=&#39;&#39;)</code> , 最后执行 <code>print(&#39;》&#39;, end=&#39;&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def book_mark():</span><br><span class=\"line\">    print(&apos;《&apos;, end=&apos;&apos;)</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    print(&apos;》&apos;, end=&apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">with book_mark():</span><br><span class=\"line\">    print(&apos;挪威的森林&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 《挪威的森林》</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">class timethis:</span><br><span class=\"line\">    def __init__(self, label):</span><br><span class=\"line\">        self.label = label</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.start = time.time()</span><br><span class=\"line\">        print(f&apos;start = &#123;self.start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, exc_tb):</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(&apos;&#123;&#125;: &#123;&#125;&apos;.format(self.label, end - self.start))</span><br><span class=\"line\">     </span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用from-contextlib-import-contextmanager\"><a href=\"#使用from-contextlib-import-contextmanager\" class=\"headerlink\" title=\"使用from contextlib import contextmanager\"></a>使用<code>from contextlib import contextmanager</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def timethis(label):</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(f&apos;&#123;start = &#125;&apos;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        yield</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(f&apos;&#123;label&#125; : &#123;end - start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Example use</span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"><a href=\"#任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\" class=\"headerlink\" title=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"></a>任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def list_transaction(orig_list):</span><br><span class=\"line\">    working = list(orig_list)</span><br><span class=\"line\">    yield working</span><br><span class=\"line\">    orig_list[:] = working </span><br><span class=\"line\">  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</span><br><span class=\"line\"></span><br><span class=\"line\">items = [1,2,3]</span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(4)</span><br><span class=\"line\">    working.append(5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  # [1,2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(6)</span><br><span class=\"line\">    working.append(7) working是[1,2,3,4,5,6,7]</span><br><span class=\"line\">    raise RuntimeError(&apos;oops&apos;)  执行不了orig_list[:] = working</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  ## 还是 [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"上下文管理器\"><a href=\"#上下文管理器\" class=\"headerlink\" title=\"上下文管理器\"></a>上下文管理器</h2><h3 id=\"让对象支持上下文管理器\"><a href=\"#让对象支持上下文管理器\" class=\"headerlink\" title=\"让对象支持上下文管理器\"></a>让对象支持上下文管理器</h3><p>对象需要定义 <code>__enter__</code> 和 <code>__exit__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = family</span><br><span class=\"line\">        self.type = type</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if self.sock is not None:</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.sock.connect(self.address)</span><br><span class=\"line\">        return self.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback</span><br><span class=\"line\">        self.sock.close()</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\">        #return True  如果这里返回True 则代表不处理with中的异常</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    from functools import partial</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = LazyConnection((&apos;www.python.org&apos;, 80))</span><br><span class=\"line\">    # Connection closed</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        # conn.__enter__() executes: connection open</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.python.org\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\">        print(resp)</span><br><span class=\"line\">        # conn.__exit__() executes: connection closed</span><br></pre></td></tr></table></figure></p>\n<p>线程安全修改版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = AF_INET</span><br><span class=\"line\">        self.type = SOCK_STREAM</span><br><span class=\"line\">        self.local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if hasattr(self.local, &apos;sock&apos;):</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.local.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.local.sock.connect(self.address)</span><br><span class=\"line\">        return self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):</span><br><span class=\"line\">        self.local.sock.close()</span><br><span class=\"line\">        del self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import partial</span><br><span class=\"line\">def test(conn):</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.huawei.com\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Got &#123;&#125; bytes&apos;.format(len(resp)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    conn = LazyConnection((&apos;www.huawei.com&apos;, 80))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t2 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-contexlib-模块中的-contextmanager装饰器\"><a href=\"#使用-contexlib-模块中的-contextmanager装饰器\" class=\"headerlink\" title=\"使用 contexlib 模块中的 @contextmanager装饰器\"></a>使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code>装饰器</h2><p><strong>实现一个新的上下文管理器的最简单的方法</strong></p>\n<p><code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行，<br>所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行</p>\n<p>先执行<code>print(&#39;《&#39;, end=&#39;&#39;)</code>，遇到yeild ,执行 <code>print(&#39;挪威的森林&#39;,end=&#39;&#39;)</code> , 最后执行 <code>print(&#39;》&#39;, end=&#39;&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def book_mark():</span><br><span class=\"line\">    print(&apos;《&apos;, end=&apos;&apos;)</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    print(&apos;》&apos;, end=&apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">with book_mark():</span><br><span class=\"line\">    print(&apos;挪威的森林&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 《挪威的森林》</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">class timethis:</span><br><span class=\"line\">    def __init__(self, label):</span><br><span class=\"line\">        self.label = label</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.start = time.time()</span><br><span class=\"line\">        print(f&apos;start = &#123;self.start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, exc_tb):</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(&apos;&#123;&#125;: &#123;&#125;&apos;.format(self.label, end - self.start))</span><br><span class=\"line\">     </span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用from-contextlib-import-contextmanager\"><a href=\"#使用from-contextlib-import-contextmanager\" class=\"headerlink\" title=\"使用from contextlib import contextmanager\"></a>使用<code>from contextlib import contextmanager</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def timethis(label):</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(f&apos;&#123;start = &#125;&apos;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        yield</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(f&apos;&#123;label&#125; : &#123;end - start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Example use</span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"><a href=\"#任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\" class=\"headerlink\" title=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"></a>任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def list_transaction(orig_list):</span><br><span class=\"line\">    working = list(orig_list)</span><br><span class=\"line\">    yield working</span><br><span class=\"line\">    orig_list[:] = working </span><br><span class=\"line\">  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</span><br><span class=\"line\"></span><br><span class=\"line\">items = [1,2,3]</span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(4)</span><br><span class=\"line\">    working.append(5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  # [1,2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(6)</span><br><span class=\"line\">    working.append(7) working是[1,2,3,4,5,6,7]</span><br><span class=\"line\">    raise RuntimeError(&apos;oops&apos;)  执行不了orig_list[:] = working</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  ## 还是 [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n"},{"title":"有关于@property","date":"2019-10-16T03:05:31.000Z","_content":"## 有关于@property\n### 1. 将方法改为属性\n这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来\n\n```\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    @property\n    def diameter(self):\n        return self.radius * 2\n\n    @property\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\nc = Circle(3)\nprint(c.area()) #  方法调用\nprint(c.diameter) # 属性访问\nprint(c.perimeter)\n```\n\n### 2. 做限定\n参考前文\n\n### 3. \n","source":"_posts/python/面向对象/有关于@property.md","raw":"---\ntitle: 有关于@property\ndate: 2019-10-16 11:05:31\ntags:\ncategories: python练习\n---\n## 有关于@property\n### 1. 将方法改为属性\n这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来\n\n```\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    @property\n    def diameter(self):\n        return self.radius * 2\n\n    @property\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\nc = Circle(3)\nprint(c.area()) #  方法调用\nprint(c.diameter) # 属性访问\nprint(c.perimeter)\n```\n\n### 2. 做限定\n参考前文\n\n### 3. \n","slug":"python/面向对象/有关于@property","published":1,"updated":"2020-04-10T16:46:16.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtuzv008774ux4o6hmqpl","content":"<h2 id=\"有关于-property\"><a href=\"#有关于-property\" class=\"headerlink\" title=\"有关于@property\"></a>有关于@property</h2><h3 id=\"1-将方法改为属性\"><a href=\"#1-将方法改为属性\" class=\"headerlink\" title=\"1. 将方法改为属性\"></a>1. 将方法改为属性</h3><p>这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">class Circle:</span><br><span class=\"line\">    def __init__(self, radius):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    def area(self):</span><br><span class=\"line\">        return math.pi * self.radius ** 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def diameter(self):</span><br><span class=\"line\">        return self.radius * 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def perimeter(self):</span><br><span class=\"line\">        return 2 * math.pi * self.radius</span><br><span class=\"line\"></span><br><span class=\"line\">c = Circle(3)</span><br><span class=\"line\">print(c.area()) #  方法调用</span><br><span class=\"line\">print(c.diameter) # 属性访问</span><br><span class=\"line\">print(c.perimeter)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-做限定\"><a href=\"#2-做限定\" class=\"headerlink\" title=\"2. 做限定\"></a>2. 做限定</h3><p>参考前文</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"有关于-property\"><a href=\"#有关于-property\" class=\"headerlink\" title=\"有关于@property\"></a>有关于@property</h2><h3 id=\"1-将方法改为属性\"><a href=\"#1-将方法改为属性\" class=\"headerlink\" title=\"1. 将方法改为属性\"></a>1. 将方法改为属性</h3><p>这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">class Circle:</span><br><span class=\"line\">    def __init__(self, radius):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    def area(self):</span><br><span class=\"line\">        return math.pi * self.radius ** 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def diameter(self):</span><br><span class=\"line\">        return self.radius * 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def perimeter(self):</span><br><span class=\"line\">        return 2 * math.pi * self.radius</span><br><span class=\"line\"></span><br><span class=\"line\">c = Circle(3)</span><br><span class=\"line\">print(c.area()) #  方法调用</span><br><span class=\"line\">print(c.diameter) # 属性访问</span><br><span class=\"line\">print(c.perimeter)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-做限定\"><a href=\"#2-做限定\" class=\"headerlink\" title=\"2. 做限定\"></a>2. 做限定</h3><p>参考前文</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>"},{"title":"格式化字符串","date":"2019-10-11T03:05:31.000Z","_content":"\n实例的字符串显示\n```\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'({self.x}, {self.y})'\n\n\n    def __str__(self):\n        return f'Pair({self.x=}, {self.y=})'\n\np = Pair(3, 4)\nprint(p)\n\n```\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Pair:\n    x:int\n    y:int = 0  # y 默认值为0\np = Pair(3, 4)\nprint(p)\n\n```\n\n对象自定义格式化\n```\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\nd = Date(2012, 12, 21)\nprint(d)\nprint(format(d, 'mdy'))\nprint('The date is {:ymd}'.format(d))\nprint('The date is {:mdy}'.format(d))\n```\n修改后\n```\nfrom dataclasses import dataclass\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n@dataclass\nclass Date:\n    year:int \n    month:int\n    day:int\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\na = Date(2012, 12, 21)\nprint(a)\nprint(format(a, 'mdy'))\nprint('The date is {:ymd}'.format(a))\nprint('The date is {:mdy}'.format(a))\n```\n","source":"_posts/python/面向对象/格式化字符串.md","raw":"---\ntitle: 格式化字符串\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n\n实例的字符串显示\n```\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'({self.x}, {self.y})'\n\n\n    def __str__(self):\n        return f'Pair({self.x=}, {self.y=})'\n\np = Pair(3, 4)\nprint(p)\n\n```\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Pair:\n    x:int\n    y:int = 0  # y 默认值为0\np = Pair(3, 4)\nprint(p)\n\n```\n\n对象自定义格式化\n```\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\nd = Date(2012, 12, 21)\nprint(d)\nprint(format(d, 'mdy'))\nprint('The date is {:ymd}'.format(d))\nprint('The date is {:mdy}'.format(d))\n```\n修改后\n```\nfrom dataclasses import dataclass\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n@dataclass\nclass Date:\n    year:int \n    month:int\n    day:int\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\na = Date(2012, 12, 21)\nprint(a)\nprint(format(a, 'mdy'))\nprint('The date is {:ymd}'.format(a))\nprint('The date is {:mdy}'.format(a))\n```\n","slug":"python/面向对象/格式化字符串","published":1,"updated":"2020-04-10T16:46:16.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv09008974uxuh9fqloy","content":"<p>实例的字符串显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Pair:</span><br><span class=\"line\">    def __init__(self, x, y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return f&apos;(&#123;self.x&#125;, &#123;self.y&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&apos;Pair(&#123;self.x=&#125;, &#123;self.y=&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Pair:</span><br><span class=\"line\">    x:int</span><br><span class=\"line\">    y:int = 0  # y 默认值为0</span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n<p>对象自定义格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    def __init__(self, year, month, day):</span><br><span class=\"line\">        self.year = year</span><br><span class=\"line\">        self.month = month</span><br><span class=\"line\">        self.day = day</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">d = Date(2012, 12, 21)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">print(format(d, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(d))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(d))</span><br></pre></td></tr></table></figure></p>\n<p>修改后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    year:int </span><br><span class=\"line\">    month:int</span><br><span class=\"line\">    day:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Date(2012, 12, 21)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(format(a, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(a))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(a))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实例的字符串显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Pair:</span><br><span class=\"line\">    def __init__(self, x, y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return f&apos;(&#123;self.x&#125;, &#123;self.y&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&apos;Pair(&#123;self.x=&#125;, &#123;self.y=&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Pair:</span><br><span class=\"line\">    x:int</span><br><span class=\"line\">    y:int = 0  # y 默认值为0</span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n<p>对象自定义格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    def __init__(self, year, month, day):</span><br><span class=\"line\">        self.year = year</span><br><span class=\"line\">        self.month = month</span><br><span class=\"line\">        self.day = day</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">d = Date(2012, 12, 21)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">print(format(d, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(d))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(d))</span><br></pre></td></tr></table></figure></p>\n<p>修改后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    year:int </span><br><span class=\"line\">    month:int</span><br><span class=\"line\">    day:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Date(2012, 12, 21)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(format(a, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(a))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(a))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"调用父类方法","date":"2019-10-11T03:05:31.000Z","_content":"##  调用父类方法\n### super()\n1. 为了调用父类(超类)的一个方法，可以使用 `super()` 函数\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n\nclass B(A):\n    def spam(self):\n        print('B.spam')\n        super().spam()  # Call parent spam()\n\nb = B()\nb.spam()\n''' \n输出结果\nB.spam  先调用 B 的 spam\nA.spam  然后再调用 A 的 spam\n'''\n```\n2. `super()` 函数的一个常见用法是在 `__init__()` 方法中确保父类被正确的初始化了\n```\nclass A:\n    def __init__(self):\n        self.x = 0\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        self.y = 1\n\nb = B()\nprint(b.x,b.y) # 0,1\n```\n使用dataclasses改写\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass A:\n    x:int = 0\n\n@dataclass\nclass B(A):\n    y:int = 1\n\nb = B()\nprint(b)  # B(x=0, y=1)\n```\n3. \n```\nclass Father:\n    def __init__(self, name):\n        self.name = name\n        print(\"init Father's name\")\n\n\nclass Mather:\n    def __init__(self, age):\n        self.age = age\n        print(\"init Mather's age\")\n\n\nclass Son(Father, Mather):\n    def __init__(self, name, age, sex):\n        super().__init__(name)  # 先继承 Father 的 name\n        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age\n        self.sex = sex # 最后 实例化自己的 sex\n        print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(\"Tom\", 5, \"Male\")\n    print(Son.__mro__) # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son.name, son.age, son.sex)\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Father:\n    name:str\n    print(\"init Father's name\")\n\n@dataclass\nclass Mather:\n    age:int\n    print(\"init Mather's age\")\n\n@dataclass\nclass Son(Father, Mather):\n    sex:str\n    print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(name=\"Tom\", age=5, sex=\"Male\")  # 这个会先实例化age,再name,再sex\n    print(Son.__mro__)  # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son)\n```\n\n### MRO列表\nPython会在MRO列表上继续搜索下一个类。\n只要每个重定义的方法统一使用 ``super()`` 并只调用它一次，\n那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次\nsuper()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，\n你甚至可以在一个没有直接父类的类中使用它\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n        super().spam()\nclass B:\n    def spam(self):\n        print('B.spam')\n\nclass C(A,B):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nc.spam() \n'''\nA.spam\nB.spam\n'''\n\n```\n\n```\nclass C(B,A):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)\nc.spam() \n'''\nB.spam\n'''\n# 不会报错，只会执行 B下面的\n```\n### 关于super()\n\n由于 ``super()`` 可能会调用不是你想要的方法，你应该遵循一些通用原则。\n首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。\n这样可以确保 ``super()`` 调用一个非直接父类方法时不会出错。\n其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。\n\n在Python社区中对于 ``super()`` 的使用有时候会引来一些争议。\n尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。\nRaymond Hettinger为此写了一篇非常好的文章\n[Python’s super() Considered Super](http://rhettinger.wordpress.com/2011/05/26/super-considered-super)\n通过大量的例子向我们解释了为什么 ``super()`` 是极好的。\n","source":"_posts/python/面向对象/调用父类方法.md","raw":"---\ntitle: 调用父类方法\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n##  调用父类方法\n### super()\n1. 为了调用父类(超类)的一个方法，可以使用 `super()` 函数\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n\nclass B(A):\n    def spam(self):\n        print('B.spam')\n        super().spam()  # Call parent spam()\n\nb = B()\nb.spam()\n''' \n输出结果\nB.spam  先调用 B 的 spam\nA.spam  然后再调用 A 的 spam\n'''\n```\n2. `super()` 函数的一个常见用法是在 `__init__()` 方法中确保父类被正确的初始化了\n```\nclass A:\n    def __init__(self):\n        self.x = 0\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        self.y = 1\n\nb = B()\nprint(b.x,b.y) # 0,1\n```\n使用dataclasses改写\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass A:\n    x:int = 0\n\n@dataclass\nclass B(A):\n    y:int = 1\n\nb = B()\nprint(b)  # B(x=0, y=1)\n```\n3. \n```\nclass Father:\n    def __init__(self, name):\n        self.name = name\n        print(\"init Father's name\")\n\n\nclass Mather:\n    def __init__(self, age):\n        self.age = age\n        print(\"init Mather's age\")\n\n\nclass Son(Father, Mather):\n    def __init__(self, name, age, sex):\n        super().__init__(name)  # 先继承 Father 的 name\n        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age\n        self.sex = sex # 最后 实例化自己的 sex\n        print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(\"Tom\", 5, \"Male\")\n    print(Son.__mro__) # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son.name, son.age, son.sex)\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Father:\n    name:str\n    print(\"init Father's name\")\n\n@dataclass\nclass Mather:\n    age:int\n    print(\"init Mather's age\")\n\n@dataclass\nclass Son(Father, Mather):\n    sex:str\n    print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(name=\"Tom\", age=5, sex=\"Male\")  # 这个会先实例化age,再name,再sex\n    print(Son.__mro__)  # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son)\n```\n\n### MRO列表\nPython会在MRO列表上继续搜索下一个类。\n只要每个重定义的方法统一使用 ``super()`` 并只调用它一次，\n那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次\nsuper()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，\n你甚至可以在一个没有直接父类的类中使用它\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n        super().spam()\nclass B:\n    def spam(self):\n        print('B.spam')\n\nclass C(A,B):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nc.spam() \n'''\nA.spam\nB.spam\n'''\n\n```\n\n```\nclass C(B,A):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)\nc.spam() \n'''\nB.spam\n'''\n# 不会报错，只会执行 B下面的\n```\n### 关于super()\n\n由于 ``super()`` 可能会调用不是你想要的方法，你应该遵循一些通用原则。\n首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。\n这样可以确保 ``super()`` 调用一个非直接父类方法时不会出错。\n其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。\n\n在Python社区中对于 ``super()`` 的使用有时候会引来一些争议。\n尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。\nRaymond Hettinger为此写了一篇非常好的文章\n[Python’s super() Considered Super](http://rhettinger.wordpress.com/2011/05/26/super-considered-super)\n通过大量的例子向我们解释了为什么 ``super()`` 是极好的。\n","slug":"python/面向对象/调用父类方法","published":1,"updated":"2020-04-10T16:46:16.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv0e008b74uxvs6m74v6","content":"<h2 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h2><h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super()\"></a>super()</h3><ol>\n<li>为了调用父类(超类)的一个方法，可以使用 <code>super()</code> 函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\">        super().spam()  # Call parent spam()</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">b.spam()</span><br><span class=\"line\">&apos;&apos;&apos; </span><br><span class=\"line\">输出结果</span><br><span class=\"line\">B.spam  先调用 B 的 spam</span><br><span class=\"line\">A.spam  然后再调用 A 的 spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>super()</code> 函数的一个常见用法是在 <code>__init__()</code> 方法中确保父类被正确的初始化了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.x = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.y = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b.x,b.y) # 0,1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用dataclasses改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class A:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    y:int = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b)  # B(x=0, y=1)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    def __init__(self, name, age, sex):</span><br><span class=\"line\">        super().__init__(name)  # 先继承 Father 的 name</span><br><span class=\"line\">        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age</span><br><span class=\"line\">        self.sex = sex # 最后 实例化自己的 sex</span><br><span class=\"line\">        print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(&quot;Tom&quot;, 5, &quot;Male&quot;)</span><br><span class=\"line\">    print(Son.__mro__) # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son.name, son.age, son.sex)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Father:</span><br><span class=\"line\">    name:str</span><br><span class=\"line\">    print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    age:int</span><br><span class=\"line\">    print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    sex:str</span><br><span class=\"line\">    print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(name=&quot;Tom&quot;, age=5, sex=&quot;Male&quot;)  # 这个会先实例化age,再name,再sex</span><br><span class=\"line\">    print(Son.__mro__)  # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son)</span><br></pre></td></tr></table></figure>\n<h3 id=\"MRO列表\"><a href=\"#MRO列表\" class=\"headerlink\" title=\"MRO列表\"></a>MRO列表</h3><p>Python会在MRO列表上继续搜索下一个类。<br>只要每个重定义的方法统一使用 <code>super()</code> 并只调用它一次，<br>那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次<br>super()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，<br>你甚至可以在一个没有直接父类的类中使用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\">        super().spam()</span><br><span class=\"line\">class B:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A,B):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class C(B,A):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># 不会报错，只会执行 B下面的</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于super\"><a href=\"#关于super\" class=\"headerlink\" title=\"关于super()\"></a>关于super()</h3><p>由于 <code>super()</code> 可能会调用不是你想要的方法，你应该遵循一些通用原则。<br>首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。<br>这样可以确保 <code>super()</code> 调用一个非直接父类方法时不会出错。<br>其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。</p>\n<p>在Python社区中对于 <code>super()</code> 的使用有时候会引来一些争议。<br>尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。<br>Raymond Hettinger为此写了一篇非常好的文章<br><a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super\" target=\"_blank\" rel=\"noopener\">Python’s super() Considered Super</a><br>通过大量的例子向我们解释了为什么 <code>super()</code> 是极好的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h2><h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super()\"></a>super()</h3><ol>\n<li>为了调用父类(超类)的一个方法，可以使用 <code>super()</code> 函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\">        super().spam()  # Call parent spam()</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">b.spam()</span><br><span class=\"line\">&apos;&apos;&apos; </span><br><span class=\"line\">输出结果</span><br><span class=\"line\">B.spam  先调用 B 的 spam</span><br><span class=\"line\">A.spam  然后再调用 A 的 spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>super()</code> 函数的一个常见用法是在 <code>__init__()</code> 方法中确保父类被正确的初始化了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.x = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.y = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b.x,b.y) # 0,1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用dataclasses改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class A:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    y:int = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b)  # B(x=0, y=1)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    def __init__(self, name, age, sex):</span><br><span class=\"line\">        super().__init__(name)  # 先继承 Father 的 name</span><br><span class=\"line\">        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age</span><br><span class=\"line\">        self.sex = sex # 最后 实例化自己的 sex</span><br><span class=\"line\">        print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(&quot;Tom&quot;, 5, &quot;Male&quot;)</span><br><span class=\"line\">    print(Son.__mro__) # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son.name, son.age, son.sex)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Father:</span><br><span class=\"line\">    name:str</span><br><span class=\"line\">    print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    age:int</span><br><span class=\"line\">    print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    sex:str</span><br><span class=\"line\">    print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(name=&quot;Tom&quot;, age=5, sex=&quot;Male&quot;)  # 这个会先实例化age,再name,再sex</span><br><span class=\"line\">    print(Son.__mro__)  # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son)</span><br></pre></td></tr></table></figure>\n<h3 id=\"MRO列表\"><a href=\"#MRO列表\" class=\"headerlink\" title=\"MRO列表\"></a>MRO列表</h3><p>Python会在MRO列表上继续搜索下一个类。<br>只要每个重定义的方法统一使用 <code>super()</code> 并只调用它一次，<br>那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次<br>super()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，<br>你甚至可以在一个没有直接父类的类中使用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\">        super().spam()</span><br><span class=\"line\">class B:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A,B):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class C(B,A):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># 不会报错，只会执行 B下面的</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于super\"><a href=\"#关于super\" class=\"headerlink\" title=\"关于super()\"></a>关于super()</h3><p>由于 <code>super()</code> 可能会调用不是你想要的方法，你应该遵循一些通用原则。<br>首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。<br>这样可以确保 <code>super()</code> 调用一个非直接父类方法时不会出错。<br>其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。</p>\n<p>在Python社区中对于 <code>super()</code> 的使用有时候会引来一些争议。<br>尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。<br>Raymond Hettinger为此写了一篇非常好的文章<br><a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super\" target=\"_blank\" rel=\"noopener\">Python’s super() Considered Super</a><br>通过大量的例子向我们解释了为什么 <code>super()</code> 是极好的。</p>\n"},{"title":"面向对象","date":"2019-10-13T03:05:31.000Z","_content":"\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n\n`__solts__ ` 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 ``__slots__`` 中定义的那些属性名\n\n使用`__solts__ `,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。\n另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。\n\n尽量不要使用 `__solts__ `\n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","source":"_posts/python/面向对象/面向对象.md","raw":"---\ntitle: 面向对象\ndate: 2019-10-13 11:05:31\ntags:\ncategories: python练习\n---\n\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n\n`__solts__ ` 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 ``__slots__`` 中定义的那些属性名\n\n使用`__solts__ `,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。\n另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。\n\n尽量不要使用 `__solts__ `\n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","slug":"python/面向对象/面向对象","published":1,"updated":"2020-04-10T16:46:16.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv0r008d74uxro5vevoc","content":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><code>__solts__</code> 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 <code>__slots__</code> 中定义的那些属性名</p>\n<p>使用<code>__solts__</code>,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。</p>\n<p>尽量不要使用 <code>__solts__</code></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><code>__solts__</code> 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 <code>__slots__</code> 中定义的那些属性名</p>\n<p>使用<code>__solts__</code>,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。</p>\n<p>尽量不要使用 <code>__solts__</code></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n"},{"title":"linux使用者管理","date":"2019-07-07T03:05:31.000Z","_content":"\n## 新建用户\n```\nroot 权限下：\nuseradd test\npasswd test\n\nuserdel -r test # 连同文件夹一起删掉\n\n\n\naddgrop friends\nusermod -l\naddgrop -g/G\n```\n\n## 例行工作\n```\nat\ncron\n```\n\n## 程序管理与selinux初探\n1. 程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。\n2. &   后台运行  (关掉终端会停止)   nohup + cmd + &   或者setsid + cmd + &  \n3. fg  %1    将job 1拿到前台来\n4. vi 下 ctrl + z 可将vi 放到后台。\n5. kill  # kill -9 %1\n6. bg  后台暂停的 让 后台运行\n\n7. top -d 5 -p 12345\n8. free -g\n9. uname -a\n10. uptime\n11. netstat -a\n\n### SELinux\n**Security Enhanced Linux**\n\n\n## screen \n```\nscreen -dmS test   # 创建 test 窗口\nscreen -r test     # 连接 test 窗口\nscreen -d test 后  screen -r test   # 如果连接不上，这样连接\nscreen -S test -X quit  # 删除 test 窗口\n```\n\n\n`rsync`  同步\n\n`rsync -arv ./ back/`\n\n`rsync -arv ./ root@107.172.82.37:/root/back/`\n","source":"_posts/基础知识/learn_linux/linux使用者管理.md","raw":"---\ntitle: linux使用者管理\ndate: 2019-07-07 11:05:31\ntags:\ncategories: linux\n---\n\n## 新建用户\n```\nroot 权限下：\nuseradd test\npasswd test\n\nuserdel -r test # 连同文件夹一起删掉\n\n\n\naddgrop friends\nusermod -l\naddgrop -g/G\n```\n\n## 例行工作\n```\nat\ncron\n```\n\n## 程序管理与selinux初探\n1. 程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。\n2. &   后台运行  (关掉终端会停止)   nohup + cmd + &   或者setsid + cmd + &  \n3. fg  %1    将job 1拿到前台来\n4. vi 下 ctrl + z 可将vi 放到后台。\n5. kill  # kill -9 %1\n6. bg  后台暂停的 让 后台运行\n\n7. top -d 5 -p 12345\n8. free -g\n9. uname -a\n10. uptime\n11. netstat -a\n\n### SELinux\n**Security Enhanced Linux**\n\n\n## screen \n```\nscreen -dmS test   # 创建 test 窗口\nscreen -r test     # 连接 test 窗口\nscreen -d test 后  screen -r test   # 如果连接不上，这样连接\nscreen -S test -X quit  # 删除 test 窗口\n```\n\n\n`rsync`  同步\n\n`rsync -arv ./ back/`\n\n`rsync -arv ./ root@107.172.82.37:/root/back/`\n","slug":"基础知识/learn_linux/linux使用者管理","published":1,"updated":"2020-04-10T16:46:16.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv0v008f74uxmqa522cy","content":"<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root 权限下：</span><br><span class=\"line\">useradd test</span><br><span class=\"line\">passwd test</span><br><span class=\"line\"></span><br><span class=\"line\">userdel -r test # 连同文件夹一起删掉</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">addgrop friends</span><br><span class=\"line\">usermod -l</span><br><span class=\"line\">addgrop -g/G</span><br></pre></td></tr></table></figure>\n<h2 id=\"例行工作\"><a href=\"#例行工作\" class=\"headerlink\" title=\"例行工作\"></a>例行工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at</span><br><span class=\"line\">cron</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序管理与selinux初探\"><a href=\"#程序管理与selinux初探\" class=\"headerlink\" title=\"程序管理与selinux初探\"></a>程序管理与selinux初探</h2><ol>\n<li>程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。</li>\n<li>&amp;   后台运行  (关掉终端会停止)   nohup + cmd + &amp;   或者setsid + cmd + &amp;  </li>\n<li>fg  %1    将job 1拿到前台来</li>\n<li>vi 下 ctrl + z 可将vi 放到后台。</li>\n<li>kill  # kill -9 %1</li>\n<li><p>bg  后台暂停的 让 后台运行</p>\n</li>\n<li><p>top -d 5 -p 12345</p>\n</li>\n<li>free -g</li>\n<li>uname -a</li>\n<li>uptime</li>\n<li>netstat -a</li>\n</ol>\n<h3 id=\"SELinux\"><a href=\"#SELinux\" class=\"headerlink\" title=\"SELinux\"></a>SELinux</h3><p><strong>Security Enhanced Linux</strong></p>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -dmS test   # 创建 test 窗口</span><br><span class=\"line\">screen -r test     # 连接 test 窗口</span><br><span class=\"line\">screen -d test 后  screen -r test   # 如果连接不上，这样连接</span><br><span class=\"line\">screen -S test -X quit  # 删除 test 窗口</span><br></pre></td></tr></table></figure>\n<p><code>rsync</code>  同步</p>\n<p><code>rsync -arv ./ back/</code></p>\n<p><code>rsync -arv ./ root@107.172.82.37:/root/back/</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root 权限下：</span><br><span class=\"line\">useradd test</span><br><span class=\"line\">passwd test</span><br><span class=\"line\"></span><br><span class=\"line\">userdel -r test # 连同文件夹一起删掉</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">addgrop friends</span><br><span class=\"line\">usermod -l</span><br><span class=\"line\">addgrop -g/G</span><br></pre></td></tr></table></figure>\n<h2 id=\"例行工作\"><a href=\"#例行工作\" class=\"headerlink\" title=\"例行工作\"></a>例行工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at</span><br><span class=\"line\">cron</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序管理与selinux初探\"><a href=\"#程序管理与selinux初探\" class=\"headerlink\" title=\"程序管理与selinux初探\"></a>程序管理与selinux初探</h2><ol>\n<li>程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。</li>\n<li>&amp;   后台运行  (关掉终端会停止)   nohup + cmd + &amp;   或者setsid + cmd + &amp;  </li>\n<li>fg  %1    将job 1拿到前台来</li>\n<li>vi 下 ctrl + z 可将vi 放到后台。</li>\n<li>kill  # kill -9 %1</li>\n<li><p>bg  后台暂停的 让 后台运行</p>\n</li>\n<li><p>top -d 5 -p 12345</p>\n</li>\n<li>free -g</li>\n<li>uname -a</li>\n<li>uptime</li>\n<li>netstat -a</li>\n</ol>\n<h3 id=\"SELinux\"><a href=\"#SELinux\" class=\"headerlink\" title=\"SELinux\"></a>SELinux</h3><p><strong>Security Enhanced Linux</strong></p>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -dmS test   # 创建 test 窗口</span><br><span class=\"line\">screen -r test     # 连接 test 窗口</span><br><span class=\"line\">screen -d test 后  screen -r test   # 如果连接不上，这样连接</span><br><span class=\"line\">screen -S test -X quit  # 删除 test 窗口</span><br></pre></td></tr></table></figure>\n<p><code>rsync</code>  同步</p>\n<p><code>rsync -arv ./ back/</code></p>\n<p><code>rsync -arv ./ root@107.172.82.37:/root/back/</code></p>\n"},{"title":"zabbix使用","date":"2019-07-07T03:05:31.000Z","_content":"\n[原文链接](https://www.cnblogs.com/clsn/p/7885990.html)\n","source":"_posts/基础知识/learn_linux/zabbix使用.md","raw":"---\ntitle: zabbix使用\ndate: 2019-07-07 11:05:31\ntags:\ncategories: linux\n---\n\n[原文链接](https://www.cnblogs.com/clsn/p/7885990.html)\n","slug":"基础知识/learn_linux/zabbix使用","published":1,"updated":"2020-04-10T16:46:16.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv10008h74ux2bdamqc8","content":"<p><a href=\"https://www.cnblogs.com/clsn/p/7885990.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/clsn/p/7885990.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n"},{"title":"部分命令","date":"2019-09-18T03:51:16.000Z","_content":"\n`service nginx reload`\n\n反向代理，负载均衡\n## 硬件资源信息\n```\nfree -h\ndf -h\nw/top\ncat /proc/cpuinfo\n\n```\n\n## 防火墙\n保护服务器，设置防火墙规则，开闭端口\n```\nyum install firewalld\nservice firewalld start\nservice firewalld status\nservice firewalld stop/disable\n\n```\n\n## 服务\n```\ncrontab\nNtpdate\nLogrotate\nsupervisor\n```\n","source":"_posts/基础知识/learn_linux/命令.md","raw":"---\n\ntitle:  部分命令\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: linux\n---\n\n`service nginx reload`\n\n反向代理，负载均衡\n## 硬件资源信息\n```\nfree -h\ndf -h\nw/top\ncat /proc/cpuinfo\n\n```\n\n## 防火墙\n保护服务器，设置防火墙规则，开闭端口\n```\nyum install firewalld\nservice firewalld start\nservice firewalld status\nservice firewalld stop/disable\n\n```\n\n## 服务\n```\ncrontab\nNtpdate\nLogrotate\nsupervisor\n```\n","slug":"基础知识/learn_linux/命令","published":1,"updated":"2020-04-10T16:46:16.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv15008j74uxawj75bsw","content":"<p><code>service nginx reload</code></p>\n<p>反向代理，负载均衡</p>\n<h2 id=\"硬件资源信息\"><a href=\"#硬件资源信息\" class=\"headerlink\" title=\"硬件资源信息\"></a>硬件资源信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br><span class=\"line\">df -h</span><br><span class=\"line\">w/top</span><br><span class=\"line\">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>保护服务器，设置防火墙规则，开闭端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install firewalld</span><br><span class=\"line\">service firewalld start</span><br><span class=\"line\">service firewalld status</span><br><span class=\"line\">service firewalld stop/disable</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab</span><br><span class=\"line\">Ntpdate</span><br><span class=\"line\">Logrotate</span><br><span class=\"line\">supervisor</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>service nginx reload</code></p>\n<p>反向代理，负载均衡</p>\n<h2 id=\"硬件资源信息\"><a href=\"#硬件资源信息\" class=\"headerlink\" title=\"硬件资源信息\"></a>硬件资源信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br><span class=\"line\">df -h</span><br><span class=\"line\">w/top</span><br><span class=\"line\">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n<h2 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h2><p>保护服务器，设置防火墙规则，开闭端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install firewalld</span><br><span class=\"line\">service firewalld start</span><br><span class=\"line\">service firewalld status</span><br><span class=\"line\">service firewalld stop/disable</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab</span><br><span class=\"line\">Ntpdate</span><br><span class=\"line\">Logrotate</span><br><span class=\"line\">supervisor</span><br></pre></td></tr></table></figure>\n"},{"title":"个人计算机","date":"2019-07-02T03:05:31.000Z","_content":"\n# 个人计算机架构与接口设备\n\n### 主板\n主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。\n\n芯片组 分为两个 **桥接器** 来控制各组件通信\n\n1. 北桥负责连接速度较快的 CPU 、内存、显卡等组件\n2. 南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等\n\ntips : AMD 将内存控制组件集成到 CPU 当中，加速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）\n\n### CPU \n1. 多核 ： 一个 CPU 多个运算内核\n2. 频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）\n3. 32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存\n\n### 内存\n个人计算机的内存主要组件为 **动态随机访问内存** （通电使用与记录，断电数据消失）\n\n双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位\n\nBIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）\n\n\n### 显卡\n显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。\n运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。\n\n### 硬盘\n### PCI适配卡\n### 电源\n\n# 操作系统与应用程序\n## 操作系统\n1. **内核** （kernel）： 是一组程序，重点在于管理计算机的所有活动以及驱动系统中的所有硬件\n\n内核程序所放置到内存当中的区块是受保护的，并且开机常驻内存。主要功能有： 系统调用接口、 程序管理、 内存管理、 文件系统管理、 设备驱动等\n\n2. **系统调用** ： 通常会提供一整组的开发接口给工程师来开发软件\n## 应用程序\n应用程序： 是参考操作系统提供的开发接口所开发出来的软件\n","source":"_posts/基础知识/learn_linux/个人计算机.md","raw":"\n---\ntitle: 个人计算机\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 个人计算机架构与接口设备\n\n### 主板\n主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。\n\n芯片组 分为两个 **桥接器** 来控制各组件通信\n\n1. 北桥负责连接速度较快的 CPU 、内存、显卡等组件\n2. 南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等\n\ntips : AMD 将内存控制组件集成到 CPU 当中，加速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）\n\n### CPU \n1. 多核 ： 一个 CPU 多个运算内核\n2. 频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）\n3. 32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存\n\n### 内存\n个人计算机的内存主要组件为 **动态随机访问内存** （通电使用与记录，断电数据消失）\n\n双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位\n\nBIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）\n\n\n### 显卡\n显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。\n运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。\n\n### 硬盘\n### PCI适配卡\n### 电源\n\n# 操作系统与应用程序\n## 操作系统\n1. **内核** （kernel）： 是一组程序，重点在于管理计算机的所有活动以及驱动系统中的所有硬件\n\n内核程序所放置到内存当中的区块是受保护的，并且开机常驻内存。主要功能有： 系统调用接口、 程序管理、 内存管理、 文件系统管理、 设备驱动等\n\n2. **系统调用** ： 通常会提供一整组的开发接口给工程师来开发软件\n## 应用程序\n应用程序： 是参考操作系统提供的开发接口所开发出来的软件\n","slug":"基础知识/learn_linux/个人计算机","published":1,"updated":"2020-04-10T16:46:16.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv1f008l74uxy8aecby1","content":"<h1 id=\"个人计算机架构与接口设备\"><a href=\"#个人计算机架构与接口设备\" class=\"headerlink\" title=\"个人计算机架构与接口设备\"></a>个人计算机架构与接口设备</h1><h3 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h3><p>主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。</p>\n<p>芯片组 分为两个 <strong>桥接器</strong> 来控制各组件通信</p>\n<ol>\n<li>北桥负责连接速度较快的 CPU 、内存、显卡等组件</li>\n<li>南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等</li>\n</ol>\n<p>tips : AMD 将内存控制组件集成到 CPU 当中，加速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>多核 ： 一个 CPU 多个运算内核</li>\n<li>频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）</li>\n<li>32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存</li>\n</ol>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>个人计算机的内存主要组件为 <strong>动态随机访问内存</strong> （通电使用与记录，断电数据消失）</p>\n<p>双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位</p>\n<p>BIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）</p>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。<br>运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。</p>\n<h3 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h3><h3 id=\"PCI适配卡\"><a href=\"#PCI适配卡\" class=\"headerlink\" title=\"PCI适配卡\"></a>PCI适配卡</h3><h3 id=\"电源\"><a href=\"#电源\" class=\"headerlink\" title=\"电源\"></a>电源</h3><h1 id=\"操作系统与应用程序\"><a href=\"#操作系统与应用程序\" class=\"headerlink\" title=\"操作系统与应用程序\"></a>操作系统与应用程序</h1><h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ol>\n<li><strong>内核</strong> （kernel）： 是一组程序，重点在于管理计算机的所有活动以及驱动系统中的所有硬件</li>\n</ol>\n<p>内核程序所放置到内存当中的区块是受保护的，并且开机常驻内存。主要功能有： 系统调用接口、 程序管理、 内存管理、 文件系统管理、 设备驱动等</p>\n<ol start=\"2\">\n<li><strong>系统调用</strong> ： 通常会提供一整组的开发接口给工程师来开发软件<h2 id=\"应用程序\"><a href=\"#应用程序\" class=\"headerlink\" title=\"应用程序\"></a>应用程序</h2>应用程序： 是参考操作系统提供的开发接口所开发出来的软件</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人计算机架构与接口设备\"><a href=\"#个人计算机架构与接口设备\" class=\"headerlink\" title=\"个人计算机架构与接口设备\"></a>个人计算机架构与接口设备</h1><h3 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h3><p>主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。</p>\n<p>芯片组 分为两个 <strong>桥接器</strong> 来控制各组件通信</p>\n<ol>\n<li>北桥负责连接速度较快的 CPU 、内存、显卡等组件</li>\n<li>南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等</li>\n</ol>\n<p>tips : AMD 将内存控制组件集成到 CPU 当中，加速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>多核 ： 一个 CPU 多个运算内核</li>\n<li>频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）</li>\n<li>32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存</li>\n</ol>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>个人计算机的内存主要组件为 <strong>动态随机访问内存</strong> （通电使用与记录，断电数据消失）</p>\n<p>双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位</p>\n<p>BIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）</p>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。<br>运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。</p>\n<h3 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h3><h3 id=\"PCI适配卡\"><a href=\"#PCI适配卡\" class=\"headerlink\" title=\"PCI适配卡\"></a>PCI适配卡</h3><h3 id=\"电源\"><a href=\"#电源\" class=\"headerlink\" title=\"电源\"></a>电源</h3><h1 id=\"操作系统与应用程序\"><a href=\"#操作系统与应用程序\" class=\"headerlink\" title=\"操作系统与应用程序\"></a>操作系统与应用程序</h1><h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ol>\n<li><strong>内核</strong> （kernel）： 是一组程序，重点在于管理计算机的所有活动以及驱动系统中的所有硬件</li>\n</ol>\n<p>内核程序所放置到内存当中的区块是受保护的，并且开机常驻内存。主要功能有： 系统调用接口、 程序管理、 内存管理、 文件系统管理、 设备驱动等</p>\n<ol start=\"2\">\n<li><strong>系统调用</strong> ： 通常会提供一整组的开发接口给工程师来开发软件<h2 id=\"应用程序\"><a href=\"#应用程序\" class=\"headerlink\" title=\"应用程序\"></a>应用程序</h2>应用程序： 是参考操作系统提供的开发接口所开发出来的软件</li>\n</ol>\n"},{"title":"文件，目录","date":"2019-07-02T03:05:31.000Z","_content":"\n\n# 目录与路径\n1. cd pwd mkdir rmdir\n2. mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)\n3. rmdir -p test/test/test/test1 （递归删除空目录）\n\n# 查询\n1. file /user/bin/passwd  # 查询某文本数据类型\n2. which python # 查询某命令位置\n3. whereis passwd # 查询某目录，文件位置\n4. locate passwd # -i 忽略大小写 -r 接正则表达式\n5. find # 能执行额外的动作\n\n# 内存交换空间（swap）\n**CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中**\n\n# \n","source":"_posts/基础知识/learn_linux/文件，目录.md","raw":"---\ntitle: 文件，目录\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n\n# 目录与路径\n1. cd pwd mkdir rmdir\n2. mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)\n3. rmdir -p test/test/test/test1 （递归删除空目录）\n\n# 查询\n1. file /user/bin/passwd  # 查询某文本数据类型\n2. which python # 查询某命令位置\n3. whereis passwd # 查询某目录，文件位置\n4. locate passwd # -i 忽略大小写 -r 接正则表达式\n5. find # 能执行额外的动作\n\n# 内存交换空间（swap）\n**CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中**\n\n# \n","slug":"基础知识/learn_linux/文件，目录","published":1,"updated":"2020-04-10T16:46:16.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv1l008n74uxjzdhm3er","content":"<h1 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h1><ol>\n<li>cd pwd mkdir rmdir</li>\n<li>mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)</li>\n<li>rmdir -p test/test/test/test1 （递归删除空目录）</li>\n</ol>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><ol>\n<li>file /user/bin/passwd  # 查询某文本数据类型</li>\n<li>which python # 查询某命令位置</li>\n<li>whereis passwd # 查询某目录，文件位置</li>\n<li>locate passwd # -i 忽略大小写 -r 接正则表达式</li>\n<li>find # 能执行额外的动作</li>\n</ol>\n<h1 id=\"内存交换空间（swap）\"><a href=\"#内存交换空间（swap）\" class=\"headerlink\" title=\"内存交换空间（swap）\"></a>内存交换空间（swap）</h1><p><strong>CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中</strong></p>\n<p># </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h1><ol>\n<li>cd pwd mkdir rmdir</li>\n<li>mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)</li>\n<li>rmdir -p test/test/test/test1 （递归删除空目录）</li>\n</ol>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><ol>\n<li>file /user/bin/passwd  # 查询某文本数据类型</li>\n<li>which python # 查询某命令位置</li>\n<li>whereis passwd # 查询某目录，文件位置</li>\n<li>locate passwd # -i 忽略大小写 -r 接正则表达式</li>\n<li>find # 能执行额外的动作</li>\n</ol>\n<h1 id=\"内存交换空间（swap）\"><a href=\"#内存交换空间（swap）\" class=\"headerlink\" title=\"内存交换空间（swap）\"></a>内存交换空间（swap）</h1><p><strong>CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中</strong></p>\n<p># </p>\n"},{"title":"日志文件","date":"2019-07-02T03:05:31.000Z","_content":"\n# 日志文件\n**日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。**\n\n1. syslogd: 主要登录系统与网络等服务的信息。\n2. klogd: 主要登录内核产生的各项信息。\n3. logrotate: 主要进行日志文件的轮替功能。\n\n","source":"_posts/基础知识/learn_linux/日志文件.md","raw":"---\ntitle: 日志文件\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 日志文件\n**日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。**\n\n1. syslogd: 主要登录系统与网络等服务的信息。\n2. klogd: 主要登录内核产生的各项信息。\n3. logrotate: 主要进行日志文件的轮替功能。\n\n","slug":"基础知识/learn_linux/日志文件","published":1,"updated":"2020-04-10T16:46:16.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv1p008p74uxrxldi0fh","content":"<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p><strong>日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。</strong></p>\n<ol>\n<li>syslogd: 主要登录系统与网络等服务的信息。</li>\n<li>klogd: 主要登录内核产生的各项信息。</li>\n<li>logrotate: 主要进行日志文件的轮替功能。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p><strong>日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。</strong></p>\n<ol>\n<li>syslogd: 主要登录系统与网络等服务的信息。</li>\n<li>klogd: 主要登录内核产生的各项信息。</li>\n<li>logrotate: 主要进行日志文件的轮替功能。</li>\n</ol>\n"},{"title":"进程与线程","date":"2019-07-05T03:05:31.000Z","_content":"\n\n1. CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。\n2. 进程的内存空间是共享的，每个线程都可以使用这些共享内存,\n3. 一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,\"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n4. \"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n5. 某些内存区域，只能供给固定数目的线程使用,\"信号量\"（Semaphore），用来保证多个线程不会互相冲突\n\n\n# 概念\n进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。\n\n一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间\n\n","source":"_posts/基础知识/learn_linux/进程与线程.md","raw":"---\ntitle: 进程与线程\ndate: 2019-07-05 11:05:31\ntags:\ncategories: linux\n---\n\n\n1. CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。\n2. 进程的内存空间是共享的，每个线程都可以使用这些共享内存,\n3. 一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,\"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n4. \"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n5. 某些内存区域，只能供给固定数目的线程使用,\"信号量\"（Semaphore），用来保证多个线程不会互相冲突\n\n\n# 概念\n进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。\n\n一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间\n\n","slug":"基础知识/learn_linux/进程与线程","published":1,"updated":"2020-04-10T16:46:16.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv1u008r74uxhiefo4op","content":"<ol>\n<li>CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。</li>\n<li>进程的内存空间是共享的，每个线程都可以使用这些共享内存,</li>\n<li>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>某些内存区域，只能供给固定数目的线程使用,”信号量”（Semaphore），用来保证多个线程不会互相冲突</li>\n</ol>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p>\n<p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。</li>\n<li>进程的内存空间是共享的，每个线程都可以使用这些共享内存,</li>\n<li>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>某些内存区域，只能供给固定数目的线程使用,”信号量”（Semaphore），用来保证多个线程不会互相冲突</li>\n</ol>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p>\n<p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间</p>\n"},{"title":"权限目录","date":"2019-07-02T03:05:31.000Z","_content":"\n# 用户与用户组\n1. u g o a (user group other all)\n2. r:4 w:2 x:1\n3. chgrp chown chmod \n\n# 目录\n``` \n# 一般情况下\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -> usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  \ndr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置\ndrwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备\ndrwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件\ndrwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -> usr/lib #系统函数库\nlrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -> usr/lib64 \ndrwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段\ndr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备\ndrwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备\ndrwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库\ndr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间\ndr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹\nlrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -> usr/sbin # 开机过程需要的命令\ndrwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录\ndr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。\ndrwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件\ndrwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等\ndrwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。\n```\n可变动的，不可变动的\n\n可分享的，不可分享的\n","source":"_posts/基础知识/learn_linux/权限，目录.md","raw":"---\ntitle: 权限目录\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 用户与用户组\n1. u g o a (user group other all)\n2. r:4 w:2 x:1\n3. chgrp chown chmod \n\n# 目录\n``` \n# 一般情况下\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -> usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  \ndr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置\ndrwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备\ndrwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件\ndrwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -> usr/lib #系统函数库\nlrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -> usr/lib64 \ndrwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段\ndr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备\ndrwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备\ndrwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库\ndr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间\ndr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹\nlrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -> usr/sbin # 开机过程需要的命令\ndrwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录\ndr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。\ndrwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件\ndrwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等\ndrwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。\n```\n可变动的，不可变动的\n\n可分享的，不可分享的\n","slug":"基础知识/learn_linux/权限，目录","published":1,"updated":"2020-04-10T16:46:16.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv23008t74uxcptuxa5a","content":"<h1 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h1><ol>\n<li>u g o a (user group other all)</li>\n<li>r:4 w:2 x:1</li>\n<li>chgrp chown chmod </li>\n</ol>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一般情况下</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -&gt; usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  </span><br><span class=\"line\">dr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置</span><br><span class=\"line\">drwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备</span><br><span class=\"line\">drwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件</span><br><span class=\"line\">drwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -&gt; usr/lib #系统函数库</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -&gt; usr/lib64 </span><br><span class=\"line\">drwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段</span><br><span class=\"line\">dr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备</span><br><span class=\"line\">drwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备</span><br><span class=\"line\">drwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库</span><br><span class=\"line\">dr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间</span><br><span class=\"line\">dr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -&gt; usr/sbin # 开机过程需要的命令</span><br><span class=\"line\">drwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录</span><br><span class=\"line\">dr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。</span><br><span class=\"line\">drwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件</span><br><span class=\"line\">drwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等</span><br><span class=\"line\">drwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。</span><br></pre></td></tr></table></figure>\n<p>可变动的，不可变动的</p>\n<p>可分享的，不可分享的</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h1><ol>\n<li>u g o a (user group other all)</li>\n<li>r:4 w:2 x:1</li>\n<li>chgrp chown chmod </li>\n</ol>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一般情况下</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -&gt; usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  </span><br><span class=\"line\">dr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置</span><br><span class=\"line\">drwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备</span><br><span class=\"line\">drwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件</span><br><span class=\"line\">drwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -&gt; usr/lib #系统函数库</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -&gt; usr/lib64 </span><br><span class=\"line\">drwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段</span><br><span class=\"line\">dr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备</span><br><span class=\"line\">drwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备</span><br><span class=\"line\">drwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库</span><br><span class=\"line\">dr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间</span><br><span class=\"line\">dr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -&gt; usr/sbin # 开机过程需要的命令</span><br><span class=\"line\">drwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录</span><br><span class=\"line\">dr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。</span><br><span class=\"line\">drwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件</span><br><span class=\"line\">drwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等</span><br><span class=\"line\">drwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。</span><br></pre></td></tr></table></figure>\n<p>可变动的，不可变动的</p>\n<p>可分享的，不可分享的</p>\n"},{"title":"计算机概论","date":"2019-07-02T03:05:31.000Z","_content":"\n# 计算机概论\n## 计算机五大部分\n1. 输入单元\n2. 中央处理器 （控制器，运算器）\n3. 内存\n4. 输出单元\n\n### cpu 种类\n1. 精简指令集 （RISC）\n2. 复杂指令集 （CISC）\n\n**CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成**\n\n#### 精简指令集\nRISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）\n\n#### 复杂指令集\nCISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)\n\n### 接口设备\n最重要的接口设备是**主板**，主板将所有的设备连接在一起，让它们能够协调通信\n\n主板上最重要的组件 ： **主板芯片组** ，将所有设备汇聚在一起\n## 计算机发展简史\n1. 电子管计算机\n2. 晶体管计算机\n3. 集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形\n4. 超大规模集成电路计算机 （当前计算机）\n\n## 计算机分类\n1. 超级计算机 # 天河二号等 \n2. 大型计算机 # 去'IOE' \n3. 微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢\n4. 工作站  # 比个人计算机更强大的性能\n5. 微电脑 （个人 pc ）\n\n## 计算机上常用的计算单位\n### 大小单位\n理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte\n`1Byte = 8 bit `\n`k M G T P 用来简化1024写法`\n\n### 速度单位\nCPU 常用 MHz 和 GHz ，(Hz 秒分之一)\n\n网络上使用的 bit 为单位， `8Mbit/s` ,转化为 Byte 为 `1024 kB/s` 或 `1 MB/s` 或 `8Mbps`\n\n## ","source":"_posts/基础知识/learn_linux/计算机概论.md","raw":"\n---\ntitle: 计算机概论\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 计算机概论\n## 计算机五大部分\n1. 输入单元\n2. 中央处理器 （控制器，运算器）\n3. 内存\n4. 输出单元\n\n### cpu 种类\n1. 精简指令集 （RISC）\n2. 复杂指令集 （CISC）\n\n**CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成**\n\n#### 精简指令集\nRISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）\n\n#### 复杂指令集\nCISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)\n\n### 接口设备\n最重要的接口设备是**主板**，主板将所有的设备连接在一起，让它们能够协调通信\n\n主板上最重要的组件 ： **主板芯片组** ，将所有设备汇聚在一起\n## 计算机发展简史\n1. 电子管计算机\n2. 晶体管计算机\n3. 集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形\n4. 超大规模集成电路计算机 （当前计算机）\n\n## 计算机分类\n1. 超级计算机 # 天河二号等 \n2. 大型计算机 # 去'IOE' \n3. 微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢\n4. 工作站  # 比个人计算机更强大的性能\n5. 微电脑 （个人 pc ）\n\n## 计算机上常用的计算单位\n### 大小单位\n理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte\n`1Byte = 8 bit `\n`k M G T P 用来简化1024写法`\n\n### 速度单位\nCPU 常用 MHz 和 GHz ，(Hz 秒分之一)\n\n网络上使用的 bit 为单位， `8Mbit/s` ,转化为 Byte 为 `1024 kB/s` 或 `1 MB/s` 或 `8Mbps`\n\n## ","slug":"基础知识/learn_linux/计算机概论","published":1,"updated":"2020-04-10T16:46:16.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv26008v74uxx9i8a0ad","content":"<h1 id=\"计算机概论\"><a href=\"#计算机概论\" class=\"headerlink\" title=\"计算机概论\"></a>计算机概论</h1><h2 id=\"计算机五大部分\"><a href=\"#计算机五大部分\" class=\"headerlink\" title=\"计算机五大部分\"></a>计算机五大部分</h2><ol>\n<li>输入单元</li>\n<li>中央处理器 （控制器，运算器）</li>\n<li>内存</li>\n<li>输出单元</li>\n</ol>\n<h3 id=\"cpu-种类\"><a href=\"#cpu-种类\" class=\"headerlink\" title=\"cpu 种类\"></a>cpu 种类</h3><ol>\n<li>精简指令集 （RISC）</li>\n<li>复杂指令集 （CISC）</li>\n</ol>\n<p><strong>CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成</strong></p>\n<h4 id=\"精简指令集\"><a href=\"#精简指令集\" class=\"headerlink\" title=\"精简指令集\"></a>精简指令集</h4><p>RISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）</p>\n<h4 id=\"复杂指令集\"><a href=\"#复杂指令集\" class=\"headerlink\" title=\"复杂指令集\"></a>复杂指令集</h4><p>CISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)</p>\n<h3 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h3><p>最重要的接口设备是<strong>主板</strong>，主板将所有的设备连接在一起，让它们能够协调通信</p>\n<p>主板上最重要的组件 ： <strong>主板芯片组</strong> ，将所有设备汇聚在一起</p>\n<h2 id=\"计算机发展简史\"><a href=\"#计算机发展简史\" class=\"headerlink\" title=\"计算机发展简史\"></a>计算机发展简史</h2><ol>\n<li>电子管计算机</li>\n<li>晶体管计算机</li>\n<li>集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形</li>\n<li>超大规模集成电路计算机 （当前计算机）</li>\n</ol>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ol>\n<li>超级计算机 # 天河二号等 </li>\n<li>大型计算机 # 去’IOE’ </li>\n<li>微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢</li>\n<li>工作站  # 比个人计算机更强大的性能</li>\n<li>微电脑 （个人 pc ）</li>\n</ol>\n<h2 id=\"计算机上常用的计算单位\"><a href=\"#计算机上常用的计算单位\" class=\"headerlink\" title=\"计算机上常用的计算单位\"></a>计算机上常用的计算单位</h2><h3 id=\"大小单位\"><a href=\"#大小单位\" class=\"headerlink\" title=\"大小单位\"></a>大小单位</h3><p>理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte<br><code>1Byte = 8 bit</code><br><code>k M G T P 用来简化1024写法</code></p>\n<h3 id=\"速度单位\"><a href=\"#速度单位\" class=\"headerlink\" title=\"速度单位\"></a>速度单位</h3><p>CPU 常用 MHz 和 GHz ，(Hz 秒分之一)</p>\n<p>网络上使用的 bit 为单位， <code>8Mbit/s</code> ,转化为 Byte 为 <code>1024 kB/s</code> 或 <code>1 MB/s</code> 或 <code>8Mbps</code></p>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机概论\"><a href=\"#计算机概论\" class=\"headerlink\" title=\"计算机概论\"></a>计算机概论</h1><h2 id=\"计算机五大部分\"><a href=\"#计算机五大部分\" class=\"headerlink\" title=\"计算机五大部分\"></a>计算机五大部分</h2><ol>\n<li>输入单元</li>\n<li>中央处理器 （控制器，运算器）</li>\n<li>内存</li>\n<li>输出单元</li>\n</ol>\n<h3 id=\"cpu-种类\"><a href=\"#cpu-种类\" class=\"headerlink\" title=\"cpu 种类\"></a>cpu 种类</h3><ol>\n<li>精简指令集 （RISC）</li>\n<li>复杂指令集 （CISC）</li>\n</ol>\n<p><strong>CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成</strong></p>\n<h4 id=\"精简指令集\"><a href=\"#精简指令集\" class=\"headerlink\" title=\"精简指令集\"></a>精简指令集</h4><p>RISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）</p>\n<h4 id=\"复杂指令集\"><a href=\"#复杂指令集\" class=\"headerlink\" title=\"复杂指令集\"></a>复杂指令集</h4><p>CISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)</p>\n<h3 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h3><p>最重要的接口设备是<strong>主板</strong>，主板将所有的设备连接在一起，让它们能够协调通信</p>\n<p>主板上最重要的组件 ： <strong>主板芯片组</strong> ，将所有设备汇聚在一起</p>\n<h2 id=\"计算机发展简史\"><a href=\"#计算机发展简史\" class=\"headerlink\" title=\"计算机发展简史\"></a>计算机发展简史</h2><ol>\n<li>电子管计算机</li>\n<li>晶体管计算机</li>\n<li>集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形</li>\n<li>超大规模集成电路计算机 （当前计算机）</li>\n</ol>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ol>\n<li>超级计算机 # 天河二号等 </li>\n<li>大型计算机 # 去’IOE’ </li>\n<li>微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢</li>\n<li>工作站  # 比个人计算机更强大的性能</li>\n<li>微电脑 （个人 pc ）</li>\n</ol>\n<h2 id=\"计算机上常用的计算单位\"><a href=\"#计算机上常用的计算单位\" class=\"headerlink\" title=\"计算机上常用的计算单位\"></a>计算机上常用的计算单位</h2><h3 id=\"大小单位\"><a href=\"#大小单位\" class=\"headerlink\" title=\"大小单位\"></a>大小单位</h3><p>理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte<br><code>1Byte = 8 bit</code><br><code>k M G T P 用来简化1024写法</code></p>\n<h3 id=\"速度单位\"><a href=\"#速度单位\" class=\"headerlink\" title=\"速度单位\"></a>速度单位</h3><p>CPU 常用 MHz 和 GHz ，(Hz 秒分之一)</p>\n<p>网络上使用的 bit 为单位， <code>8Mbit/s</code> ,转化为 Byte 为 <code>1024 kB/s</code> 或 <code>1 MB/s</code> 或 <code>8Mbps</code></p>\n<p>## </p>\n"},{"title":"计算机组成原理","date":"2019-07-02T03:05:31.000Z","_content":"\n# 计算机组成原理总结\n## 计算机系统简介\n计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。\n**系统软件**:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。\n**应用软件**:根据用户任务需求所编制的各种程序。\n## 计算机系统的层次结构\n通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 **\n或 **高级语言机器 → → 机器语言机器 **\n\n通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。\n**编译程序**：一次全部翻译成机器语言程序，然后交由机器执行。\n**解释程序**：边翻译，边执行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统**\n\n**高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统**\n\n## 第1章：计算机系统概论\n**1、计算机系统由哪两部分组成？计算机系统性能取决于什么？**\n\n计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。\n1）计算机系统由硬件和软件两部分组成。\n2）计算机系统性能由硬件和软件共同决定。\n\n**2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？**\n\n1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器\n2）微程序机器和传统机器是物理机，其他是虚拟机。\n\n**3、在计算机系统结构中，什么是翻译？什么是解释？**\n\n1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；\n2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。\n\n**4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。**\n\n1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；\n2）计算机组成是指如何实现计算机体系结构所体现出来的属性；\n3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。\n\n**5、冯诺依曼机器的主要特点？**\n\n1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；\n2）指令和数据存储在存储器中，并可以按地址访问；\n3）指令和数据均以二进制表示；\n4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；\n5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；\n6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）\n\n\n**7、什么是存储单元、存储字、存储字长、存储体？**\n\n存储单元：存储一个存储字并具有特定存储地址的存储单位；\n存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。\n存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；\n存储体：由多个存储单元构成的存储器件。\n\n**8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？**\n\n1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。\n2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。\n3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。\n\n**9、什么是机器字长，什么是存储字长长？**\n\n机器字长：CPU一次能够处理的二进制数据的位数。\n存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。\n\n**10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？**\n\n1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；\n2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；\n3）存储器的最大容量为64K * 2B = 128K Byte\n\n## 第三章 系统总线\n**1、为什么要使用总线？**\n\n在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。\n因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。\n\n**2、总线的两大基本特征是什么？**\n\n1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。\n2）分时：同一时刻，总线上只能传输一个部件发送的信息；\n\n**3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？**\n\n1）分成数据总线、地址总线以及控制总线。\n2）数据总线：各个功能部件之间传送数据信息，双向传输；\n3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出\n4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。\n\n**3、什么是总线宽度、总线带宽、总线复用、信号线数？**\n\n1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；\n2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。\n3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；\n4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。\n\n**4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？**\n\n33 * （32/8） = 132 MB/s\n\n**5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）**\n\n在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。\n但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。\n因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。\n例如CPU和Cache之间、I/O设备之间等。\n\n**6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？**\n\n1）链式查询、计数器定时查询、以及独立请求。\n2）链式查询的优先级不能改变，离控制器最近的优先级最高。\n\n\n**8、什么是总线周期，分为哪几个阶段？**\n\n1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；\n2）分为四个阶段：\n申请分配阶段：申请总线\n寻址阶段：发出地址及有关命令\n传数阶段：进行数据交换\n结束：从总线上撤除信号，让出总线\n\n**9、什么是总线通信控制，总线通信控制有哪几种？**\n\n1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；\n2）同步通信、异步通信、半同步通信、分离式通信\n\n**10、什么是同步通信？其优点和缺点？**\n\n１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。\n２）优点：速度快，各个模块间配合简单\n３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。\n\n**11、什么是异步通信？异步通信分为哪几种类型？**\n\n1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）\n2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）\n\n**12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）**\n\n波特率：单位时间内传送的二进制数据数据的位数，单位bps\n比特率：单位时间内传送的有效的二进制位数。\n\n**13、异步通信时，常规需要设置的参数有哪些？**\n\n波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）\n\n**14、简述半同步通信的基本原理。**\n\n半同步通信结合同步通信和异步通信。\n同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；\n异步通信：如果从模块没有准备好，增加一个“等待响应”信号。\n\n**15、简述分离式通信的基本原理。**\n\n主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。\n但是，这种方式控制比较复杂。\n\n**16、奇偶校验可以纠错吗？汉明码可以纠错码？**\n\n1）奇偶校验只能检错，不能纠错。\n2）汉明码可以纠错。\n\n## 第四章 存储器\n\n1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？\n\n1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；\n2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；\n3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。\n\n2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？\n\n1）速度、容量、位价格。\n2）寄存器速度最快，主存最便宜。\n\n3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？\n\n1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。\n2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。\n（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）\n\n4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？\n\n1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；\n2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。\n3）x86CPU采用的是小端方式。\n\n5、主存的三个主要技术指标\n\n存储容量、存取速度和存储带宽\n\n6、什么是存取时间？什么是存取周期？哪个大？\n\n1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；\n2）存取周期：连续两次启动存储器所需要的最小间隔时间；\n3）存取周期包含存取时间；\n\n7、什么是存储器带宽？（要了解如何计算存储器带宽）\n\n单位时间内存储器存取的信息量；\n\n8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。\n\n1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；\n2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。\n\n9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。\n\n1）静态RAM：采用锁存器原理实现；\n2）动态RAM：采用电容原理实现，需要刷新。\n3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。\n\n10、只读存储器有哪几种？\n\n1）掩模ROM（MROM）：出厂后内容不能被更改。\n2）PROM：可编程只读存储器，可以进行一次性编程；\n3）EPROM：可擦除只读ROM，用紫外线照射；\n4）EEPROM：电可擦除只读ROM。\n6）FLash Memory：采用EEPROM的非易失性存储器。\n\n11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。\n存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明\n\n1）位扩展：增加存储器的字长，例如两个1K * 4位的存储芯片构成1个1K*8位的存储器；\n2）字扩展：增加存储器的字数，例如两个1K * 8位的存储芯片构成1个2K * 8位的存储器；\n通常字扩展和位扩展两种方式混合使用。\n\n12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；\n参看P94页，例4.1\n\n13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？\n\n应添加的检测位位数：2的k次方大于等于n+k+1。\n因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位\n出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1\n\n14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。\n\n15、提高访存速度的三种方式。\n\n1）采用高速元器件；\n2）采用存储层次结构：cache-主存结构；\n3）调整主存结构：包括单体多字，多体并行两种方式。\n\n16、简述单体多字的存储系统的工作原理，及其优点。\n\n1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。\n2）优点是：显著提高了存储器带宽。\n\n17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。\n\n1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。\n高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。\n2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。\n低位交叉编址能显著提高单次访存速度。\n\n19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？\n\n1）T= 4τ\n2）连续读取四个字，所需要的时间为T + （4-1）τ\n注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。\n\n20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。\n\n21、在CPU和内存之间引入cache的原因。\n\n1）避免cpu空等I/O访存；\n2）缓解CPU和主存速度不匹配的问题。\n\n22、什么是程序的局部性原理。\n\nCPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。\n\n23、Cache命中率、平均访问时间以及访问效率的计算。\n\n24、Cache写操作有哪两种方式？\n\n1）写直达法：写操作既写入Cache又写入主存；\n2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。\n\n25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？\n\n直接映射、全相联映射、组相联映射。\n\n26、直接映射的优缺点？\n\n优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；\n\n27、全相联映射的优缺点？\n\n优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。\n\n28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。\n\n29、Cache常用的替换算法有哪些？哪个命中率最高？\n\n1）先进先出、近期最少使用算法和随机替换算法；\n2）命中率最高的是近期最少使用算法；\n\n30、磁盘的三地址结构包括哪些？\n\n柱面、磁头号和扇区号\n\n## 第五章 输入输出系统\n1、I/O系统的发展大致可以分为哪4个阶段？\n\n1）早期（分散连接、串行工作、程序查询）\n2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）\n3）通道阶段（通道是具有特殊功能的处理器）\n4）I/O处理机阶段\nI/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；\n\n2、I/O设备编址有哪两种方式？各有什么优缺点？\n\n1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。\n2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。\n\n3、I/O设备与主机的联络方式有哪几种？\n\nI/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：\n1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。\n2）应答信号：通过应答信号来进行交互；\n3）同步时标：采用统一的时钟信号。\n\n4、I/O总线包括哪四类？\n\n数据线、设备选择线、状态线、命令线\n\n5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。\nD=0，B=0：暂停状态；\nD=0，B=1：准备状态\nD=1，B=0：就绪状态\n\n6、程序查询的基本工作原理。\n\ncpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。\n\n7、什么是中断？\n\n计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。\n\n8、中断服务程序的基本流程包括哪四部分？\n\n1）保护现场\n2）中断服务\n3）恢复现场\n4）中断返回\n\n9、什么是单重中断和多重中断？\n\n1）单重中断：不允许中断现行的中断服务程序；\n2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；\n\n10、CPU响应中断的时机？\n\n当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。\n\n11、什么是DMA？\n\nDMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。\n\n12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？\n\n1）停止CPU访问主存：DMA访存优先级高；\n2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；\n3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。\n\n13、DMA工作过程包括哪三部分？\n\n1）预处理\n2）数据传输\n2）后处理\n\n## 第六章 计算机的运算方法\n1、掌握有符号数的原码计算方法，以及通过原码求真值；\n\n2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。\n\n1）通过原码求补码：符号位不变，各位取反，末位加1；\n2）通过补码求原码：符号位不变，各位取反，末位加1；\n\n3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）\n\n4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？\n\n补码能表示的真值范围为-128~+127（参见补码定义\n）\n5、掌握求反码以及移码的方法。\n\n6、什么是定点表示？什么是浮点表示？\n\n１）定点表示：小数点固定在某一位置的数为定点数；\n２）浮点表示：小数点位置可以浮动的数。\n\n7、浮点数在机器中的表示形式，由哪几部分组成？\n\n由尾数、数符、阶码、阶符四部分组成。\n\n8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。\n\n9、IEEE754标准规定的浮点数由哪几部分组成？\n\n由数符、阶码（含阶符）以及尾数组成。\n\n10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？\n\n阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。\n\n11、float占多少位？double占多少位？\n\nfloat为短实数，占32位，其中阶码8位，尾数23位。\ndouble为长实数，占64位，其中阶码占11位，尾数为52位。\n\n12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。\n\n13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于源码，左移或右移时，低位或高位均添补0；\n对于补码：左移时，低位添补0，右移时高位添补1\n对于反码：左移或右移时，低位或高位均添补1；\n\n14、什么是逻辑移位？\n\n逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。\n\n15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？\n\n1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。\n2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。\n3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。\n\n16、定点乘法运算可以使用加法和移位来实现吗？\n\n可以。\n\n17、浮点加减运算基本按照哪几步来进行？\n\n1）对阶：使小数点对齐；\n2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；\n3）规格化：尾数规格化；\n4）舍入：尾数右规时，丢失数值位；\n5）溢出判断：判断结果是否溢出。\n\n18、如何判断浮点运算结果是否溢出？\n\n阶码是否超出了其表示范围。（使用2个符号位判溢出）\n\n\n## 第七章 指令系统\n**1、什么是机器指令？什么是指令系统？**\n1）机器指令：每一条机器语言的语句；\n2）指令系统：全部机器指令的集合。\n\n**2、一条指令包含哪两个主要部分？请简要说明各部分作用。**\n1）操作码：指明指令要完成的操作；\n2）地址码：指明指令要操作的数据或数据来源；\n\n**3、操作码长度有固定长度和可变长度两种，各自有什么优点？**\n1）固定长度：便于硬件设计，指令译码时间短；\n2）可变长度：压缩了操作码平均长度；\n\n**4、指令中地址码中的地址可以是哪些设备的地址？**\n可以是主存地址、寄存器地址或I/O设备的地址；\n\n**5、指令中地址的个数可以有几个？**\n四地址、三地址、二地址、一地址以及零地址。\n\n**6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？**\n1）四地址：访存4次；\n2）三地址：访存4次；\n3）两地址：访存3次；\n4）一地址：访存2次；\n\n**7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？**\n1）扩大指令字的寻址范围；\n2）缩短指令字长；\n3）减少访存次数\n\n**8、数据在存储器中存储时，为什么要按照边界对齐？**\n减少访存次数。\n\n**9、寻址方式包括哪两类？**\n1）指令寻址：下一条将要执行的指令的指令地址；\n2）数据寻址：确定本指令的操作数地址。\n\n**10、什么是形式地址？什么是有效地址？**\n1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；\n2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；\n\n**11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。**\n立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址\n\n**12、什么是RISC？什么是CISC？**\nRISC：精简指令集；\nCISC：复杂指令集；\n","source":"_posts/基础知识/learn_linux/计算机组成原理.md","raw":"\n---\ntitle: 计算机组成原理\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 计算机组成原理总结\n## 计算机系统简介\n计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。\n**系统软件**:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。\n**应用软件**:根据用户任务需求所编制的各种程序。\n## 计算机系统的层次结构\n通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 **\n或 **高级语言机器 → → 机器语言机器 **\n\n通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。\n**编译程序**：一次全部翻译成机器语言程序，然后交由机器执行。\n**解释程序**：边翻译，边执行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统**\n\n**高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统**\n\n## 第1章：计算机系统概论\n**1、计算机系统由哪两部分组成？计算机系统性能取决于什么？**\n\n计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。\n1）计算机系统由硬件和软件两部分组成。\n2）计算机系统性能由硬件和软件共同决定。\n\n**2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？**\n\n1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器\n2）微程序机器和传统机器是物理机，其他是虚拟机。\n\n**3、在计算机系统结构中，什么是翻译？什么是解释？**\n\n1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；\n2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。\n\n**4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。**\n\n1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；\n2）计算机组成是指如何实现计算机体系结构所体现出来的属性；\n3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。\n\n**5、冯诺依曼机器的主要特点？**\n\n1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；\n2）指令和数据存储在存储器中，并可以按地址访问；\n3）指令和数据均以二进制表示；\n4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；\n5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；\n6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）\n\n\n**7、什么是存储单元、存储字、存储字长、存储体？**\n\n存储单元：存储一个存储字并具有特定存储地址的存储单位；\n存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。\n存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；\n存储体：由多个存储单元构成的存储器件。\n\n**8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？**\n\n1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。\n2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。\n3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。\n\n**9、什么是机器字长，什么是存储字长长？**\n\n机器字长：CPU一次能够处理的二进制数据的位数。\n存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。\n\n**10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？**\n\n1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；\n2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；\n3）存储器的最大容量为64K * 2B = 128K Byte\n\n## 第三章 系统总线\n**1、为什么要使用总线？**\n\n在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。\n因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。\n\n**2、总线的两大基本特征是什么？**\n\n1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。\n2）分时：同一时刻，总线上只能传输一个部件发送的信息；\n\n**3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？**\n\n1）分成数据总线、地址总线以及控制总线。\n2）数据总线：各个功能部件之间传送数据信息，双向传输；\n3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出\n4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。\n\n**3、什么是总线宽度、总线带宽、总线复用、信号线数？**\n\n1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；\n2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。\n3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；\n4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。\n\n**4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？**\n\n33 * （32/8） = 132 MB/s\n\n**5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）**\n\n在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。\n但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。\n因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。\n例如CPU和Cache之间、I/O设备之间等。\n\n**6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？**\n\n1）链式查询、计数器定时查询、以及独立请求。\n2）链式查询的优先级不能改变，离控制器最近的优先级最高。\n\n\n**8、什么是总线周期，分为哪几个阶段？**\n\n1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；\n2）分为四个阶段：\n申请分配阶段：申请总线\n寻址阶段：发出地址及有关命令\n传数阶段：进行数据交换\n结束：从总线上撤除信号，让出总线\n\n**9、什么是总线通信控制，总线通信控制有哪几种？**\n\n1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；\n2）同步通信、异步通信、半同步通信、分离式通信\n\n**10、什么是同步通信？其优点和缺点？**\n\n１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。\n２）优点：速度快，各个模块间配合简单\n３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。\n\n**11、什么是异步通信？异步通信分为哪几种类型？**\n\n1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）\n2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）\n\n**12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）**\n\n波特率：单位时间内传送的二进制数据数据的位数，单位bps\n比特率：单位时间内传送的有效的二进制位数。\n\n**13、异步通信时，常规需要设置的参数有哪些？**\n\n波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）\n\n**14、简述半同步通信的基本原理。**\n\n半同步通信结合同步通信和异步通信。\n同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；\n异步通信：如果从模块没有准备好，增加一个“等待响应”信号。\n\n**15、简述分离式通信的基本原理。**\n\n主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。\n但是，这种方式控制比较复杂。\n\n**16、奇偶校验可以纠错吗？汉明码可以纠错码？**\n\n1）奇偶校验只能检错，不能纠错。\n2）汉明码可以纠错。\n\n## 第四章 存储器\n\n1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？\n\n1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；\n2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；\n3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。\n\n2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？\n\n1）速度、容量、位价格。\n2）寄存器速度最快，主存最便宜。\n\n3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？\n\n1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。\n2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。\n（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）\n\n4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？\n\n1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；\n2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。\n3）x86CPU采用的是小端方式。\n\n5、主存的三个主要技术指标\n\n存储容量、存取速度和存储带宽\n\n6、什么是存取时间？什么是存取周期？哪个大？\n\n1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；\n2）存取周期：连续两次启动存储器所需要的最小间隔时间；\n3）存取周期包含存取时间；\n\n7、什么是存储器带宽？（要了解如何计算存储器带宽）\n\n单位时间内存储器存取的信息量；\n\n8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。\n\n1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；\n2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。\n\n9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。\n\n1）静态RAM：采用锁存器原理实现；\n2）动态RAM：采用电容原理实现，需要刷新。\n3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。\n\n10、只读存储器有哪几种？\n\n1）掩模ROM（MROM）：出厂后内容不能被更改。\n2）PROM：可编程只读存储器，可以进行一次性编程；\n3）EPROM：可擦除只读ROM，用紫外线照射；\n4）EEPROM：电可擦除只读ROM。\n6）FLash Memory：采用EEPROM的非易失性存储器。\n\n11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。\n存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明\n\n1）位扩展：增加存储器的字长，例如两个1K * 4位的存储芯片构成1个1K*8位的存储器；\n2）字扩展：增加存储器的字数，例如两个1K * 8位的存储芯片构成1个2K * 8位的存储器；\n通常字扩展和位扩展两种方式混合使用。\n\n12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；\n参看P94页，例4.1\n\n13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？\n\n应添加的检测位位数：2的k次方大于等于n+k+1。\n因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位\n出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1\n\n14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。\n\n15、提高访存速度的三种方式。\n\n1）采用高速元器件；\n2）采用存储层次结构：cache-主存结构；\n3）调整主存结构：包括单体多字，多体并行两种方式。\n\n16、简述单体多字的存储系统的工作原理，及其优点。\n\n1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。\n2）优点是：显著提高了存储器带宽。\n\n17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。\n\n1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。\n高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。\n2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。\n低位交叉编址能显著提高单次访存速度。\n\n19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？\n\n1）T= 4τ\n2）连续读取四个字，所需要的时间为T + （4-1）τ\n注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。\n\n20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。\n\n21、在CPU和内存之间引入cache的原因。\n\n1）避免cpu空等I/O访存；\n2）缓解CPU和主存速度不匹配的问题。\n\n22、什么是程序的局部性原理。\n\nCPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。\n\n23、Cache命中率、平均访问时间以及访问效率的计算。\n\n24、Cache写操作有哪两种方式？\n\n1）写直达法：写操作既写入Cache又写入主存；\n2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。\n\n25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？\n\n直接映射、全相联映射、组相联映射。\n\n26、直接映射的优缺点？\n\n优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；\n\n27、全相联映射的优缺点？\n\n优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。\n\n28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。\n\n29、Cache常用的替换算法有哪些？哪个命中率最高？\n\n1）先进先出、近期最少使用算法和随机替换算法；\n2）命中率最高的是近期最少使用算法；\n\n30、磁盘的三地址结构包括哪些？\n\n柱面、磁头号和扇区号\n\n## 第五章 输入输出系统\n1、I/O系统的发展大致可以分为哪4个阶段？\n\n1）早期（分散连接、串行工作、程序查询）\n2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）\n3）通道阶段（通道是具有特殊功能的处理器）\n4）I/O处理机阶段\nI/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；\n\n2、I/O设备编址有哪两种方式？各有什么优缺点？\n\n1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。\n2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。\n\n3、I/O设备与主机的联络方式有哪几种？\n\nI/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：\n1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。\n2）应答信号：通过应答信号来进行交互；\n3）同步时标：采用统一的时钟信号。\n\n4、I/O总线包括哪四类？\n\n数据线、设备选择线、状态线、命令线\n\n5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。\nD=0，B=0：暂停状态；\nD=0，B=1：准备状态\nD=1，B=0：就绪状态\n\n6、程序查询的基本工作原理。\n\ncpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。\n\n7、什么是中断？\n\n计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。\n\n8、中断服务程序的基本流程包括哪四部分？\n\n1）保护现场\n2）中断服务\n3）恢复现场\n4）中断返回\n\n9、什么是单重中断和多重中断？\n\n1）单重中断：不允许中断现行的中断服务程序；\n2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；\n\n10、CPU响应中断的时机？\n\n当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。\n\n11、什么是DMA？\n\nDMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。\n\n12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？\n\n1）停止CPU访问主存：DMA访存优先级高；\n2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；\n3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。\n\n13、DMA工作过程包括哪三部分？\n\n1）预处理\n2）数据传输\n2）后处理\n\n## 第六章 计算机的运算方法\n1、掌握有符号数的原码计算方法，以及通过原码求真值；\n\n2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。\n\n1）通过原码求补码：符号位不变，各位取反，末位加1；\n2）通过补码求原码：符号位不变，各位取反，末位加1；\n\n3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）\n\n4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？\n\n补码能表示的真值范围为-128~+127（参见补码定义\n）\n5、掌握求反码以及移码的方法。\n\n6、什么是定点表示？什么是浮点表示？\n\n１）定点表示：小数点固定在某一位置的数为定点数；\n２）浮点表示：小数点位置可以浮动的数。\n\n7、浮点数在机器中的表示形式，由哪几部分组成？\n\n由尾数、数符、阶码、阶符四部分组成。\n\n8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。\n\n9、IEEE754标准规定的浮点数由哪几部分组成？\n\n由数符、阶码（含阶符）以及尾数组成。\n\n10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？\n\n阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。\n\n11、float占多少位？double占多少位？\n\nfloat为短实数，占32位，其中阶码8位，尾数23位。\ndouble为长实数，占64位，其中阶码占11位，尾数为52位。\n\n12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。\n\n13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于源码，左移或右移时，低位或高位均添补0；\n对于补码：左移时，低位添补0，右移时高位添补1\n对于反码：左移或右移时，低位或高位均添补1；\n\n14、什么是逻辑移位？\n\n逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。\n\n15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？\n\n1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。\n2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。\n3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。\n\n16、定点乘法运算可以使用加法和移位来实现吗？\n\n可以。\n\n17、浮点加减运算基本按照哪几步来进行？\n\n1）对阶：使小数点对齐；\n2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；\n3）规格化：尾数规格化；\n4）舍入：尾数右规时，丢失数值位；\n5）溢出判断：判断结果是否溢出。\n\n18、如何判断浮点运算结果是否溢出？\n\n阶码是否超出了其表示范围。（使用2个符号位判溢出）\n\n\n## 第七章 指令系统\n**1、什么是机器指令？什么是指令系统？**\n1）机器指令：每一条机器语言的语句；\n2）指令系统：全部机器指令的集合。\n\n**2、一条指令包含哪两个主要部分？请简要说明各部分作用。**\n1）操作码：指明指令要完成的操作；\n2）地址码：指明指令要操作的数据或数据来源；\n\n**3、操作码长度有固定长度和可变长度两种，各自有什么优点？**\n1）固定长度：便于硬件设计，指令译码时间短；\n2）可变长度：压缩了操作码平均长度；\n\n**4、指令中地址码中的地址可以是哪些设备的地址？**\n可以是主存地址、寄存器地址或I/O设备的地址；\n\n**5、指令中地址的个数可以有几个？**\n四地址、三地址、二地址、一地址以及零地址。\n\n**6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？**\n1）四地址：访存4次；\n2）三地址：访存4次；\n3）两地址：访存3次；\n4）一地址：访存2次；\n\n**7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？**\n1）扩大指令字的寻址范围；\n2）缩短指令字长；\n3）减少访存次数\n\n**8、数据在存储器中存储时，为什么要按照边界对齐？**\n减少访存次数。\n\n**9、寻址方式包括哪两类？**\n1）指令寻址：下一条将要执行的指令的指令地址；\n2）数据寻址：确定本指令的操作数地址。\n\n**10、什么是形式地址？什么是有效地址？**\n1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；\n2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；\n\n**11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。**\n立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址\n\n**12、什么是RISC？什么是CISC？**\nRISC：精简指令集；\nCISC：复杂指令集；\n","slug":"基础知识/learn_linux/计算机组成原理","published":1,"updated":"2020-04-10T16:46:16.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv2a008x74ux40k1fkgu","content":"<h1 id=\"计算机组成原理总结\"><a href=\"#计算机组成原理总结\" class=\"headerlink\" title=\"计算机组成原理总结\"></a>计算机组成原理总结</h1><h2 id=\"计算机系统简介\"><a href=\"#计算机系统简介\" class=\"headerlink\" title=\"计算机系统简介\"></a>计算机系统简介</h2><p>计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。<br><strong>系统软件</strong>:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。<br><strong>应用软件</strong>:根据用户任务需求所编制的各种程序。</p>\n<h2 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h2><p>通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 </strong><br>或 <strong>高级语言机器 → → 机器语言机器 </strong></p>\n<p>通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。<br><strong>编译程序</strong>：一次全部翻译成机器语言程序，然后交由机器执行。<br><strong>解释程序</strong>：边翻译，边执行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统</strong></p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统</strong></p>\n<h2 id=\"第1章：计算机系统概论\"><a href=\"#第1章：计算机系统概论\" class=\"headerlink\" title=\"第1章：计算机系统概论\"></a>第1章：计算机系统概论</h2><p><strong>1、计算机系统由哪两部分组成？计算机系统性能取决于什么？</strong></p>\n<p>计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。<br>1）计算机系统由硬件和软件两部分组成。<br>2）计算机系统性能由硬件和软件共同决定。</p>\n<p><strong>2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？</strong></p>\n<p>1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器<br>2）微程序机器和传统机器是物理机，其他是虚拟机。</p>\n<p><strong>3、在计算机系统结构中，什么是翻译？什么是解释？</strong></p>\n<p>1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；<br>2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。</p>\n<p><strong>4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。</strong></p>\n<p>1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；<br>2）计算机组成是指如何实现计算机体系结构所体现出来的属性；<br>3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。</p>\n<p><strong>5、冯诺依曼机器的主要特点？</strong></p>\n<p>1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；<br>2）指令和数据存储在存储器中，并可以按地址访问；<br>3）指令和数据均以二进制表示；<br>4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；<br>5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；<br>6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）</p>\n<p><strong>7、什么是存储单元、存储字、存储字长、存储体？</strong></p>\n<p>存储单元：存储一个存储字并具有特定存储地址的存储单位；<br>存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。<br>存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；<br>存储体：由多个存储单元构成的存储器件。</p>\n<p><strong>8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？</strong></p>\n<p>1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。<br>2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。<br>3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。</p>\n<p><strong>9、什么是机器字长，什么是存储字长长？</strong></p>\n<p>机器字长：CPU一次能够处理的二进制数据的位数。<br>存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。</p>\n<p><strong>10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？</strong></p>\n<p>1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；<br>2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；<br>3）存储器的最大容量为64K * 2B = 128K Byte</p>\n<h2 id=\"第三章-系统总线\"><a href=\"#第三章-系统总线\" class=\"headerlink\" title=\"第三章 系统总线\"></a>第三章 系统总线</h2><p><strong>1、为什么要使用总线？</strong></p>\n<p>在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。<br>因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。</p>\n<p><strong>2、总线的两大基本特征是什么？</strong></p>\n<p>1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。<br>2）分时：同一时刻，总线上只能传输一个部件发送的信息；</p>\n<p><strong>3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？</strong></p>\n<p>1）分成数据总线、地址总线以及控制总线。<br>2）数据总线：各个功能部件之间传送数据信息，双向传输；<br>3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出<br>4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。</p>\n<p><strong>3、什么是总线宽度、总线带宽、总线复用、信号线数？</strong></p>\n<p>1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；<br>2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。<br>3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；<br>4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。</p>\n<p><strong>4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？</strong></p>\n<p>33 * （32/8） = 132 MB/s</p>\n<p><strong>5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）</strong></p>\n<p>在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。<br>但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。<br>因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。<br>例如CPU和Cache之间、I/O设备之间等。</p>\n<p><strong>6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？</strong></p>\n<p>1）链式查询、计数器定时查询、以及独立请求。<br>2）链式查询的优先级不能改变，离控制器最近的优先级最高。</p>\n<p><strong>8、什么是总线周期，分为哪几个阶段？</strong></p>\n<p>1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；<br>2）分为四个阶段：<br>申请分配阶段：申请总线<br>寻址阶段：发出地址及有关命令<br>传数阶段：进行数据交换<br>结束：从总线上撤除信号，让出总线</p>\n<p><strong>9、什么是总线通信控制，总线通信控制有哪几种？</strong></p>\n<p>1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；<br>2）同步通信、异步通信、半同步通信、分离式通信</p>\n<p><strong>10、什么是同步通信？其优点和缺点？</strong></p>\n<p>１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。<br>２）优点：速度快，各个模块间配合简单<br>３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。</p>\n<p><strong>11、什么是异步通信？异步通信分为哪几种类型？</strong></p>\n<p>1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）<br>2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）</p>\n<p><strong>12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）</strong></p>\n<p>波特率：单位时间内传送的二进制数据数据的位数，单位bps<br>比特率：单位时间内传送的有效的二进制位数。</p>\n<p><strong>13、异步通信时，常规需要设置的参数有哪些？</strong></p>\n<p>波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）</p>\n<p><strong>14、简述半同步通信的基本原理。</strong></p>\n<p>半同步通信结合同步通信和异步通信。<br>同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；<br>异步通信：如果从模块没有准备好，增加一个“等待响应”信号。</p>\n<p><strong>15、简述分离式通信的基本原理。</strong></p>\n<p>主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。<br>但是，这种方式控制比较复杂。</p>\n<p><strong>16、奇偶校验可以纠错吗？汉明码可以纠错码？</strong></p>\n<p>1）奇偶校验只能检错，不能纠错。<br>2）汉明码可以纠错。</p>\n<h2 id=\"第四章-存储器\"><a href=\"#第四章-存储器\" class=\"headerlink\" title=\"第四章 存储器\"></a>第四章 存储器</h2><p>1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？</p>\n<p>1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；<br>2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；<br>3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。</p>\n<p>2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？</p>\n<p>1）速度、容量、位价格。<br>2）寄存器速度最快，主存最便宜。</p>\n<p>3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？</p>\n<p>1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。<br>2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。<br>（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）</p>\n<p>4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？</p>\n<p>1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；<br>2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。<br>3）x86CPU采用的是小端方式。</p>\n<p>5、主存的三个主要技术指标</p>\n<p>存储容量、存取速度和存储带宽</p>\n<p>6、什么是存取时间？什么是存取周期？哪个大？</p>\n<p>1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；<br>2）存取周期：连续两次启动存储器所需要的最小间隔时间；<br>3）存取周期包含存取时间；</p>\n<p>7、什么是存储器带宽？（要了解如何计算存储器带宽）</p>\n<p>单位时间内存储器存取的信息量；</p>\n<p>8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。</p>\n<p>1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；<br>2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。</p>\n<p>9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。</p>\n<p>1）静态RAM：采用锁存器原理实现；<br>2）动态RAM：采用电容原理实现，需要刷新。<br>3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。</p>\n<p>10、只读存储器有哪几种？</p>\n<p>1）掩模ROM（MROM）：出厂后内容不能被更改。<br>2）PROM：可编程只读存储器，可以进行一次性编程；<br>3）EPROM：可擦除只读ROM，用紫外线照射；<br>4）EEPROM：电可擦除只读ROM。<br>6）FLash Memory：采用EEPROM的非易失性存储器。</p>\n<p>11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。<br>存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明</p>\n<p>1）位扩展：增加存储器的字长，例如两个1K <em> 4位的存储芯片构成1个1K</em>8位的存储器；<br>2）字扩展：增加存储器的字数，例如两个1K <em> 8位的存储芯片构成1个2K </em> 8位的存储器；<br>通常字扩展和位扩展两种方式混合使用。</p>\n<p>12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；<br>参看P94页，例4.1</p>\n<p>13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？</p>\n<p>应添加的检测位位数：2的k次方大于等于n+k+1。<br>因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位<br>出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1</p>\n<p>14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。</p>\n<p>15、提高访存速度的三种方式。</p>\n<p>1）采用高速元器件；<br>2）采用存储层次结构：cache-主存结构；<br>3）调整主存结构：包括单体多字，多体并行两种方式。</p>\n<p>16、简述单体多字的存储系统的工作原理，及其优点。</p>\n<p>1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。<br>2）优点是：显著提高了存储器带宽。</p>\n<p>17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。</p>\n<p>1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。<br>高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。<br>2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。<br>低位交叉编址能显著提高单次访存速度。</p>\n<p>19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？</p>\n<p>1）T= 4τ<br>2）连续读取四个字，所需要的时间为T + （4-1）τ<br>注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。</p>\n<p>20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。</p>\n<p>21、在CPU和内存之间引入cache的原因。</p>\n<p>1）避免cpu空等I/O访存；<br>2）缓解CPU和主存速度不匹配的问题。</p>\n<p>22、什么是程序的局部性原理。</p>\n<p>CPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。</p>\n<p>23、Cache命中率、平均访问时间以及访问效率的计算。</p>\n<p>24、Cache写操作有哪两种方式？</p>\n<p>1）写直达法：写操作既写入Cache又写入主存；<br>2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。</p>\n<p>25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？</p>\n<p>直接映射、全相联映射、组相联映射。</p>\n<p>26、直接映射的优缺点？</p>\n<p>优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；</p>\n<p>27、全相联映射的优缺点？</p>\n<p>优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。</p>\n<p>28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。</p>\n<p>29、Cache常用的替换算法有哪些？哪个命中率最高？</p>\n<p>1）先进先出、近期最少使用算法和随机替换算法；<br>2）命中率最高的是近期最少使用算法；</p>\n<p>30、磁盘的三地址结构包括哪些？</p>\n<p>柱面、磁头号和扇区号</p>\n<h2 id=\"第五章-输入输出系统\"><a href=\"#第五章-输入输出系统\" class=\"headerlink\" title=\"第五章 输入输出系统\"></a>第五章 输入输出系统</h2><p>1、I/O系统的发展大致可以分为哪4个阶段？</p>\n<p>1）早期（分散连接、串行工作、程序查询）<br>2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）<br>3）通道阶段（通道是具有特殊功能的处理器）<br>4）I/O处理机阶段<br>I/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；</p>\n<p>2、I/O设备编址有哪两种方式？各有什么优缺点？</p>\n<p>1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。<br>2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。</p>\n<p>3、I/O设备与主机的联络方式有哪几种？</p>\n<p>I/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：<br>1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。<br>2）应答信号：通过应答信号来进行交互；<br>3）同步时标：采用统一的时钟信号。</p>\n<p>4、I/O总线包括哪四类？</p>\n<p>数据线、设备选择线、状态线、命令线</p>\n<p>5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。<br>D=0，B=0：暂停状态；<br>D=0，B=1：准备状态<br>D=1，B=0：就绪状态</p>\n<p>6、程序查询的基本工作原理。</p>\n<p>cpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。</p>\n<p>7、什么是中断？</p>\n<p>计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。</p>\n<p>8、中断服务程序的基本流程包括哪四部分？</p>\n<p>1）保护现场<br>2）中断服务<br>3）恢复现场<br>4）中断返回</p>\n<p>9、什么是单重中断和多重中断？</p>\n<p>1）单重中断：不允许中断现行的中断服务程序；<br>2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；</p>\n<p>10、CPU响应中断的时机？</p>\n<p>当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。</p>\n<p>11、什么是DMA？</p>\n<p>DMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。</p>\n<p>12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？</p>\n<p>1）停止CPU访问主存：DMA访存优先级高；<br>2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；<br>3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。</p>\n<p>13、DMA工作过程包括哪三部分？</p>\n<p>1）预处理<br>2）数据传输<br>2）后处理</p>\n<h2 id=\"第六章-计算机的运算方法\"><a href=\"#第六章-计算机的运算方法\" class=\"headerlink\" title=\"第六章 计算机的运算方法\"></a>第六章 计算机的运算方法</h2><p>1、掌握有符号数的原码计算方法，以及通过原码求真值；</p>\n<p>2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。</p>\n<p>1）通过原码求补码：符号位不变，各位取反，末位加1；<br>2）通过补码求原码：符号位不变，各位取反，末位加1；</p>\n<p>3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）</p>\n<p>4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？</p>\n<p>补码能表示的真值范围为-128~+127（参见补码定义<br>）<br>5、掌握求反码以及移码的方法。</p>\n<p>6、什么是定点表示？什么是浮点表示？</p>\n<p>１）定点表示：小数点固定在某一位置的数为定点数；<br>２）浮点表示：小数点位置可以浮动的数。</p>\n<p>7、浮点数在机器中的表示形式，由哪几部分组成？</p>\n<p>由尾数、数符、阶码、阶符四部分组成。</p>\n<p>8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。</p>\n<p>9、IEEE754标准规定的浮点数由哪几部分组成？</p>\n<p>由数符、阶码（含阶符）以及尾数组成。</p>\n<p>10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？</p>\n<p>阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。</p>\n<p>11、float占多少位？double占多少位？</p>\n<p>float为短实数，占32位，其中阶码8位，尾数23位。<br>double为长实数，占64位，其中阶码占11位，尾数为52位。</p>\n<p>12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。</p>\n<p>13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于源码，左移或右移时，低位或高位均添补0；<br>对于补码：左移时，低位添补0，右移时高位添补1<br>对于反码：左移或右移时，低位或高位均添补1；</p>\n<p>14、什么是逻辑移位？</p>\n<p>逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。</p>\n<p>15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？</p>\n<p>1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。<br>2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。<br>3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。</p>\n<p>16、定点乘法运算可以使用加法和移位来实现吗？</p>\n<p>可以。</p>\n<p>17、浮点加减运算基本按照哪几步来进行？</p>\n<p>1）对阶：使小数点对齐；<br>2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；<br>3）规格化：尾数规格化；<br>4）舍入：尾数右规时，丢失数值位；<br>5）溢出判断：判断结果是否溢出。</p>\n<p>18、如何判断浮点运算结果是否溢出？</p>\n<p>阶码是否超出了其表示范围。（使用2个符号位判溢出）</p>\n<h2 id=\"第七章-指令系统\"><a href=\"#第七章-指令系统\" class=\"headerlink\" title=\"第七章 指令系统\"></a>第七章 指令系统</h2><p><strong>1、什么是机器指令？什么是指令系统？</strong><br>1）机器指令：每一条机器语言的语句；<br>2）指令系统：全部机器指令的集合。</p>\n<p><strong>2、一条指令包含哪两个主要部分？请简要说明各部分作用。</strong><br>1）操作码：指明指令要完成的操作；<br>2）地址码：指明指令要操作的数据或数据来源；</p>\n<p><strong>3、操作码长度有固定长度和可变长度两种，各自有什么优点？</strong><br>1）固定长度：便于硬件设计，指令译码时间短；<br>2）可变长度：压缩了操作码平均长度；</p>\n<p><strong>4、指令中地址码中的地址可以是哪些设备的地址？</strong><br>可以是主存地址、寄存器地址或I/O设备的地址；</p>\n<p><strong>5、指令中地址的个数可以有几个？</strong><br>四地址、三地址、二地址、一地址以及零地址。</p>\n<p><strong>6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？</strong><br>1）四地址：访存4次；<br>2）三地址：访存4次；<br>3）两地址：访存3次；<br>4）一地址：访存2次；</p>\n<p><strong>7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？</strong><br>1）扩大指令字的寻址范围；<br>2）缩短指令字长；<br>3）减少访存次数</p>\n<p><strong>8、数据在存储器中存储时，为什么要按照边界对齐？</strong><br>减少访存次数。</p>\n<p><strong>9、寻址方式包括哪两类？</strong><br>1）指令寻址：下一条将要执行的指令的指令地址；<br>2）数据寻址：确定本指令的操作数地址。</p>\n<p><strong>10、什么是形式地址？什么是有效地址？</strong><br>1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；<br>2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；</p>\n<p><strong>11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。</strong><br>立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址</p>\n<p><strong>12、什么是RISC？什么是CISC？</strong><br>RISC：精简指令集；<br>CISC：复杂指令集；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机组成原理总结\"><a href=\"#计算机组成原理总结\" class=\"headerlink\" title=\"计算机组成原理总结\"></a>计算机组成原理总结</h1><h2 id=\"计算机系统简介\"><a href=\"#计算机系统简介\" class=\"headerlink\" title=\"计算机系统简介\"></a>计算机系统简介</h2><p>计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。<br><strong>系统软件</strong>:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。<br><strong>应用软件</strong>:根据用户任务需求所编制的各种程序。</p>\n<h2 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h2><p>通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 </strong><br>或 <strong>高级语言机器 → → 机器语言机器 </strong></p>\n<p>通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。<br><strong>编译程序</strong>：一次全部翻译成机器语言程序，然后交由机器执行。<br><strong>解释程序</strong>：边翻译，边执行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统</strong></p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统</strong></p>\n<h2 id=\"第1章：计算机系统概论\"><a href=\"#第1章：计算机系统概论\" class=\"headerlink\" title=\"第1章：计算机系统概论\"></a>第1章：计算机系统概论</h2><p><strong>1、计算机系统由哪两部分组成？计算机系统性能取决于什么？</strong></p>\n<p>计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。<br>1）计算机系统由硬件和软件两部分组成。<br>2）计算机系统性能由硬件和软件共同决定。</p>\n<p><strong>2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？</strong></p>\n<p>1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器<br>2）微程序机器和传统机器是物理机，其他是虚拟机。</p>\n<p><strong>3、在计算机系统结构中，什么是翻译？什么是解释？</strong></p>\n<p>1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；<br>2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。</p>\n<p><strong>4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。</strong></p>\n<p>1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；<br>2）计算机组成是指如何实现计算机体系结构所体现出来的属性；<br>3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。</p>\n<p><strong>5、冯诺依曼机器的主要特点？</strong></p>\n<p>1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；<br>2）指令和数据存储在存储器中，并可以按地址访问；<br>3）指令和数据均以二进制表示；<br>4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；<br>5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；<br>6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）</p>\n<p><strong>7、什么是存储单元、存储字、存储字长、存储体？</strong></p>\n<p>存储单元：存储一个存储字并具有特定存储地址的存储单位；<br>存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。<br>存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；<br>存储体：由多个存储单元构成的存储器件。</p>\n<p><strong>8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？</strong></p>\n<p>1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。<br>2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。<br>3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。</p>\n<p><strong>9、什么是机器字长，什么是存储字长长？</strong></p>\n<p>机器字长：CPU一次能够处理的二进制数据的位数。<br>存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。</p>\n<p><strong>10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？</strong></p>\n<p>1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；<br>2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；<br>3）存储器的最大容量为64K * 2B = 128K Byte</p>\n<h2 id=\"第三章-系统总线\"><a href=\"#第三章-系统总线\" class=\"headerlink\" title=\"第三章 系统总线\"></a>第三章 系统总线</h2><p><strong>1、为什么要使用总线？</strong></p>\n<p>在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。<br>因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。</p>\n<p><strong>2、总线的两大基本特征是什么？</strong></p>\n<p>1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。<br>2）分时：同一时刻，总线上只能传输一个部件发送的信息；</p>\n<p><strong>3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？</strong></p>\n<p>1）分成数据总线、地址总线以及控制总线。<br>2）数据总线：各个功能部件之间传送数据信息，双向传输；<br>3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出<br>4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。</p>\n<p><strong>3、什么是总线宽度、总线带宽、总线复用、信号线数？</strong></p>\n<p>1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；<br>2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。<br>3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；<br>4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。</p>\n<p><strong>4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？</strong></p>\n<p>33 * （32/8） = 132 MB/s</p>\n<p><strong>5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）</strong></p>\n<p>在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。<br>但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。<br>因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。<br>例如CPU和Cache之间、I/O设备之间等。</p>\n<p><strong>6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？</strong></p>\n<p>1）链式查询、计数器定时查询、以及独立请求。<br>2）链式查询的优先级不能改变，离控制器最近的优先级最高。</p>\n<p><strong>8、什么是总线周期，分为哪几个阶段？</strong></p>\n<p>1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；<br>2）分为四个阶段：<br>申请分配阶段：申请总线<br>寻址阶段：发出地址及有关命令<br>传数阶段：进行数据交换<br>结束：从总线上撤除信号，让出总线</p>\n<p><strong>9、什么是总线通信控制，总线通信控制有哪几种？</strong></p>\n<p>1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；<br>2）同步通信、异步通信、半同步通信、分离式通信</p>\n<p><strong>10、什么是同步通信？其优点和缺点？</strong></p>\n<p>１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。<br>２）优点：速度快，各个模块间配合简单<br>３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。</p>\n<p><strong>11、什么是异步通信？异步通信分为哪几种类型？</strong></p>\n<p>1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）<br>2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）</p>\n<p><strong>12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）</strong></p>\n<p>波特率：单位时间内传送的二进制数据数据的位数，单位bps<br>比特率：单位时间内传送的有效的二进制位数。</p>\n<p><strong>13、异步通信时，常规需要设置的参数有哪些？</strong></p>\n<p>波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）</p>\n<p><strong>14、简述半同步通信的基本原理。</strong></p>\n<p>半同步通信结合同步通信和异步通信。<br>同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；<br>异步通信：如果从模块没有准备好，增加一个“等待响应”信号。</p>\n<p><strong>15、简述分离式通信的基本原理。</strong></p>\n<p>主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。<br>但是，这种方式控制比较复杂。</p>\n<p><strong>16、奇偶校验可以纠错吗？汉明码可以纠错码？</strong></p>\n<p>1）奇偶校验只能检错，不能纠错。<br>2）汉明码可以纠错。</p>\n<h2 id=\"第四章-存储器\"><a href=\"#第四章-存储器\" class=\"headerlink\" title=\"第四章 存储器\"></a>第四章 存储器</h2><p>1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？</p>\n<p>1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；<br>2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；<br>3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。</p>\n<p>2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？</p>\n<p>1）速度、容量、位价格。<br>2）寄存器速度最快，主存最便宜。</p>\n<p>3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？</p>\n<p>1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。<br>2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。<br>（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）</p>\n<p>4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？</p>\n<p>1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；<br>2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。<br>3）x86CPU采用的是小端方式。</p>\n<p>5、主存的三个主要技术指标</p>\n<p>存储容量、存取速度和存储带宽</p>\n<p>6、什么是存取时间？什么是存取周期？哪个大？</p>\n<p>1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；<br>2）存取周期：连续两次启动存储器所需要的最小间隔时间；<br>3）存取周期包含存取时间；</p>\n<p>7、什么是存储器带宽？（要了解如何计算存储器带宽）</p>\n<p>单位时间内存储器存取的信息量；</p>\n<p>8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。</p>\n<p>1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；<br>2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。</p>\n<p>9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。</p>\n<p>1）静态RAM：采用锁存器原理实现；<br>2）动态RAM：采用电容原理实现，需要刷新。<br>3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。</p>\n<p>10、只读存储器有哪几种？</p>\n<p>1）掩模ROM（MROM）：出厂后内容不能被更改。<br>2）PROM：可编程只读存储器，可以进行一次性编程；<br>3）EPROM：可擦除只读ROM，用紫外线照射；<br>4）EEPROM：电可擦除只读ROM。<br>6）FLash Memory：采用EEPROM的非易失性存储器。</p>\n<p>11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。<br>存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明</p>\n<p>1）位扩展：增加存储器的字长，例如两个1K <em> 4位的存储芯片构成1个1K</em>8位的存储器；<br>2）字扩展：增加存储器的字数，例如两个1K <em> 8位的存储芯片构成1个2K </em> 8位的存储器；<br>通常字扩展和位扩展两种方式混合使用。</p>\n<p>12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；<br>参看P94页，例4.1</p>\n<p>13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？</p>\n<p>应添加的检测位位数：2的k次方大于等于n+k+1。<br>因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位<br>出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1</p>\n<p>14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。</p>\n<p>15、提高访存速度的三种方式。</p>\n<p>1）采用高速元器件；<br>2）采用存储层次结构：cache-主存结构；<br>3）调整主存结构：包括单体多字，多体并行两种方式。</p>\n<p>16、简述单体多字的存储系统的工作原理，及其优点。</p>\n<p>1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。<br>2）优点是：显著提高了存储器带宽。</p>\n<p>17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。</p>\n<p>1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。<br>高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。<br>2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。<br>低位交叉编址能显著提高单次访存速度。</p>\n<p>19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？</p>\n<p>1）T= 4τ<br>2）连续读取四个字，所需要的时间为T + （4-1）τ<br>注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。</p>\n<p>20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。</p>\n<p>21、在CPU和内存之间引入cache的原因。</p>\n<p>1）避免cpu空等I/O访存；<br>2）缓解CPU和主存速度不匹配的问题。</p>\n<p>22、什么是程序的局部性原理。</p>\n<p>CPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。</p>\n<p>23、Cache命中率、平均访问时间以及访问效率的计算。</p>\n<p>24、Cache写操作有哪两种方式？</p>\n<p>1）写直达法：写操作既写入Cache又写入主存；<br>2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。</p>\n<p>25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？</p>\n<p>直接映射、全相联映射、组相联映射。</p>\n<p>26、直接映射的优缺点？</p>\n<p>优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；</p>\n<p>27、全相联映射的优缺点？</p>\n<p>优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。</p>\n<p>28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。</p>\n<p>29、Cache常用的替换算法有哪些？哪个命中率最高？</p>\n<p>1）先进先出、近期最少使用算法和随机替换算法；<br>2）命中率最高的是近期最少使用算法；</p>\n<p>30、磁盘的三地址结构包括哪些？</p>\n<p>柱面、磁头号和扇区号</p>\n<h2 id=\"第五章-输入输出系统\"><a href=\"#第五章-输入输出系统\" class=\"headerlink\" title=\"第五章 输入输出系统\"></a>第五章 输入输出系统</h2><p>1、I/O系统的发展大致可以分为哪4个阶段？</p>\n<p>1）早期（分散连接、串行工作、程序查询）<br>2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）<br>3）通道阶段（通道是具有特殊功能的处理器）<br>4）I/O处理机阶段<br>I/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；</p>\n<p>2、I/O设备编址有哪两种方式？各有什么优缺点？</p>\n<p>1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。<br>2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。</p>\n<p>3、I/O设备与主机的联络方式有哪几种？</p>\n<p>I/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：<br>1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。<br>2）应答信号：通过应答信号来进行交互；<br>3）同步时标：采用统一的时钟信号。</p>\n<p>4、I/O总线包括哪四类？</p>\n<p>数据线、设备选择线、状态线、命令线</p>\n<p>5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。<br>D=0，B=0：暂停状态；<br>D=0，B=1：准备状态<br>D=1，B=0：就绪状态</p>\n<p>6、程序查询的基本工作原理。</p>\n<p>cpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。</p>\n<p>7、什么是中断？</p>\n<p>计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。</p>\n<p>8、中断服务程序的基本流程包括哪四部分？</p>\n<p>1）保护现场<br>2）中断服务<br>3）恢复现场<br>4）中断返回</p>\n<p>9、什么是单重中断和多重中断？</p>\n<p>1）单重中断：不允许中断现行的中断服务程序；<br>2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；</p>\n<p>10、CPU响应中断的时机？</p>\n<p>当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。</p>\n<p>11、什么是DMA？</p>\n<p>DMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。</p>\n<p>12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？</p>\n<p>1）停止CPU访问主存：DMA访存优先级高；<br>2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；<br>3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。</p>\n<p>13、DMA工作过程包括哪三部分？</p>\n<p>1）预处理<br>2）数据传输<br>2）后处理</p>\n<h2 id=\"第六章-计算机的运算方法\"><a href=\"#第六章-计算机的运算方法\" class=\"headerlink\" title=\"第六章 计算机的运算方法\"></a>第六章 计算机的运算方法</h2><p>1、掌握有符号数的原码计算方法，以及通过原码求真值；</p>\n<p>2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。</p>\n<p>1）通过原码求补码：符号位不变，各位取反，末位加1；<br>2）通过补码求原码：符号位不变，各位取反，末位加1；</p>\n<p>3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）</p>\n<p>4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？</p>\n<p>补码能表示的真值范围为-128~+127（参见补码定义<br>）<br>5、掌握求反码以及移码的方法。</p>\n<p>6、什么是定点表示？什么是浮点表示？</p>\n<p>１）定点表示：小数点固定在某一位置的数为定点数；<br>２）浮点表示：小数点位置可以浮动的数。</p>\n<p>7、浮点数在机器中的表示形式，由哪几部分组成？</p>\n<p>由尾数、数符、阶码、阶符四部分组成。</p>\n<p>8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。</p>\n<p>9、IEEE754标准规定的浮点数由哪几部分组成？</p>\n<p>由数符、阶码（含阶符）以及尾数组成。</p>\n<p>10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？</p>\n<p>阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。</p>\n<p>11、float占多少位？double占多少位？</p>\n<p>float为短实数，占32位，其中阶码8位，尾数23位。<br>double为长实数，占64位，其中阶码占11位，尾数为52位。</p>\n<p>12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。</p>\n<p>13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于源码，左移或右移时，低位或高位均添补0；<br>对于补码：左移时，低位添补0，右移时高位添补1<br>对于反码：左移或右移时，低位或高位均添补1；</p>\n<p>14、什么是逻辑移位？</p>\n<p>逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。</p>\n<p>15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？</p>\n<p>1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。<br>2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。<br>3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。</p>\n<p>16、定点乘法运算可以使用加法和移位来实现吗？</p>\n<p>可以。</p>\n<p>17、浮点加减运算基本按照哪几步来进行？</p>\n<p>1）对阶：使小数点对齐；<br>2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；<br>3）规格化：尾数规格化；<br>4）舍入：尾数右规时，丢失数值位；<br>5）溢出判断：判断结果是否溢出。</p>\n<p>18、如何判断浮点运算结果是否溢出？</p>\n<p>阶码是否超出了其表示范围。（使用2个符号位判溢出）</p>\n<h2 id=\"第七章-指令系统\"><a href=\"#第七章-指令系统\" class=\"headerlink\" title=\"第七章 指令系统\"></a>第七章 指令系统</h2><p><strong>1、什么是机器指令？什么是指令系统？</strong><br>1）机器指令：每一条机器语言的语句；<br>2）指令系统：全部机器指令的集合。</p>\n<p><strong>2、一条指令包含哪两个主要部分？请简要说明各部分作用。</strong><br>1）操作码：指明指令要完成的操作；<br>2）地址码：指明指令要操作的数据或数据来源；</p>\n<p><strong>3、操作码长度有固定长度和可变长度两种，各自有什么优点？</strong><br>1）固定长度：便于硬件设计，指令译码时间短；<br>2）可变长度：压缩了操作码平均长度；</p>\n<p><strong>4、指令中地址码中的地址可以是哪些设备的地址？</strong><br>可以是主存地址、寄存器地址或I/O设备的地址；</p>\n<p><strong>5、指令中地址的个数可以有几个？</strong><br>四地址、三地址、二地址、一地址以及零地址。</p>\n<p><strong>6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？</strong><br>1）四地址：访存4次；<br>2）三地址：访存4次；<br>3）两地址：访存3次；<br>4）一地址：访存2次；</p>\n<p><strong>7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？</strong><br>1）扩大指令字的寻址范围；<br>2）缩短指令字长；<br>3）减少访存次数</p>\n<p><strong>8、数据在存储器中存储时，为什么要按照边界对齐？</strong><br>减少访存次数。</p>\n<p><strong>9、寻址方式包括哪两类？</strong><br>1）指令寻址：下一条将要执行的指令的指令地址；<br>2）数据寻址：确定本指令的操作数地址。</p>\n<p><strong>10、什么是形式地址？什么是有效地址？</strong><br>1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；<br>2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；</p>\n<p><strong>11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。</strong><br>立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址</p>\n<p><strong>12、什么是RISC？什么是CISC？</strong><br>RISC：精简指令集；<br>CISC：复杂指令集；</p>\n"},{"title":"原型模式","date":"2019-07-14T03:05:31.000Z","_content":"\n\n**在原型模式中，优先使用组合而非继承。组成的类使我们可以在运行时替换那些组成部分，从而彻底改善系统的可测试性和可维护性。**\n## 原型模式在一般情况下的样子\n\n**声明一个抽象基类**\n\nprototype_1.py\n```\nfrom abc import ABCMeta, abstractmethod\n\nclass Prototype(metaclass=ABCMeta):\n    @abstractmethod\n    def clone(self):\n        pass\n```\n**调用**\n\nconcrete.py\n```\nfrom prototype_1 import Prototype\nfrom copy import deepcopy\n\nclass Concrete(Prototype):\n    def clone(self):\n    return deepcopy(self)\n```\n**扩展该抽象基类时，会强制实现clone方法。\n","source":"_posts/python/DesignPattern/原型模式/readme.md","raw":"\n---\ntitle: 原型模式\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n**在原型模式中，优先使用组合而非继承。组成的类使我们可以在运行时替换那些组成部分，从而彻底改善系统的可测试性和可维护性。**\n## 原型模式在一般情况下的样子\n\n**声明一个抽象基类**\n\nprototype_1.py\n```\nfrom abc import ABCMeta, abstractmethod\n\nclass Prototype(metaclass=ABCMeta):\n    @abstractmethod\n    def clone(self):\n        pass\n```\n**调用**\n\nconcrete.py\n```\nfrom prototype_1 import Prototype\nfrom copy import deepcopy\n\nclass Concrete(Prototype):\n    def clone(self):\n    return deepcopy(self)\n```\n**扩展该抽象基类时，会强制实现clone方法。\n","slug":"python/DesignPattern/原型模式/readme","published":1,"updated":"2020-04-10T16:46:16.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv3t009274uxfbarve41","content":"<p><strong>在原型模式中，优先使用组合而非继承。组成的类使我们可以在运行时替换那些组成部分，从而彻底改善系统的可测试性和可维护性。</strong></p>\n<h2 id=\"原型模式在一般情况下的样子\"><a href=\"#原型模式在一般情况下的样子\" class=\"headerlink\" title=\"原型模式在一般情况下的样子\"></a>原型模式在一般情况下的样子</h2><p><strong>声明一个抽象基类</strong></p>\n<p>prototype_1.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\">class Prototype(metaclass=ABCMeta):</span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def clone(self):</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>调用</strong></p>\n<p>concrete.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from prototype_1 import Prototype</span><br><span class=\"line\">from copy import deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\">class Concrete(Prototype):</span><br><span class=\"line\">    def clone(self):</span><br><span class=\"line\">    return deepcopy(self)</span><br></pre></td></tr></table></figure></p>\n<p>**扩展该抽象基类时，会强制实现clone方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>在原型模式中，优先使用组合而非继承。组成的类使我们可以在运行时替换那些组成部分，从而彻底改善系统的可测试性和可维护性。</strong></p>\n<h2 id=\"原型模式在一般情况下的样子\"><a href=\"#原型模式在一般情况下的样子\" class=\"headerlink\" title=\"原型模式在一般情况下的样子\"></a>原型模式在一般情况下的样子</h2><p><strong>声明一个抽象基类</strong></p>\n<p>prototype_1.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\">class Prototype(metaclass=ABCMeta):</span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def clone(self):</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>调用</strong></p>\n<p>concrete.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from prototype_1 import Prototype</span><br><span class=\"line\">from copy import deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\">class Concrete(Prototype):</span><br><span class=\"line\">    def clone(self):</span><br><span class=\"line\">    return deepcopy(self)</span><br></pre></td></tr></table></figure></p>\n<p>**扩展该抽象基类时，会强制实现clone方法。</p>\n"},{"title":"工厂模式","date":"2019-07-14T03:05:31.000Z","_content":"\n\n**当希望通过一个通用接口来创建对象，而不是让创建代码分散在整个系统中**\n\n**创建一个集中式的系统来进行对象创建的一种方式就是使用工厂模式**\n\n原型模式不需要子类化，不过需要一个初始化操作，而工厂模式需要子类化，但不需要初始化\n\n## 工厂模式一个简单的实现\n原始代码\n```\nimport pygame\n\nwindows_dimensions = 800,600\nscreen = pygame.display.set_mode(windows_dimensions)\n\nx,y = 100, 100\n\nplayer_quits = False\n\nwhile not player_quits:\n    for event in  pygame.event.get():\n        if event.type == pygame.QUIT:\n            player_quits = True\n\n        pressed = pygame.key.get_pressed()\n        if pressed[pygame.K_UP]: y -=4\n        if pressed[pygame.K_DOWN]: y += 4\n        if pressed[pygame.K_LEFT]: x -= 4\n        if pressed[pygame.K_RIGHT]: x += 4\n\n        screen.fill((0, 0, 0))\n        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(x, y, 20, 20))\n\n    pygame.display.flip()\n```\n\n**改写，方便扩展**\n\nshape_factory.py\n```\nimport pygame\nimport time\n# pygame.init()\n\nclass Shape():\n    def __init__(self,x ,y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        raise NotImplementedError()\n\n    def move(self, direction):\n        if direction == 'up':\n            self.y -= 4\n        if direction == 'down':\n            self.y += 4\n        if direction == 'left':\n            self.x -= 4\n        if direction == 'right':\n            self.x += 4\n\n    @staticmethod\n    def factory(type):   # 工厂模式,可在这里加type类型\n        if type == 'Circle':\n            return Circle(100, 100)\n        if type == 'Square':\n            return Square(100, 100)\n            assert 0, 'Bad shape requested:  ' + type\n\nclass Square(Shape):\n    def draw(self):\n        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(self.x, self.y, 20, 20))\n\nclass Circle(Shape):\n    def draw(self):\n        pygame.draw.circle(screen, (0, 255, 255), (self.x, self.y),10)\n\nif __name__ == '__main__':\n    windows_dimensions = 800,600\n    screen = pygame.display.set_mode(windows_dimensions)\n\n    obj = Shape.factory('Circle')\n    player_quits = False\n\n    while not player_quits:\n        for event in  pygame.event.get():\n            if event.type == pygame.QUIT:\n                player_quits = True\n\n            pressed = pygame.key.get_pressed()\n            if pressed[pygame.K_UP]: obj.move('up')\n            if pressed[pygame.K_DOWN]: obj.move('down')\n            if pressed[pygame.K_LEFT]: obj.move('left')\n            if pressed[pygame.K_RIGHT]: obj.move('right')\n\n            screen.fill((0, 0, 0))\n            obj.draw()\n\n        pygame.display.flip()\n```\n\n## 抽象工厂\n**当希望创建单个接口来访问整个工厂集合时，可以使用一个抽象工厂**\n```\nimport  abc\nclass AbstractFactory():  # 抽象工厂会定义这些具体工厂的结构，之后这些具体工厂会创建本例中的原型和正方形\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def make_object(self):\n        return\n\nclass CircleFactory(AbstractFactory):\n    def make_object(self):\n        # do  something\n        return Circle()\n\nclass SquareFactory(AbstractFactory):\n    def make_object(self):\n        # do  something\n        return Square()\n\ndef draw_function(factory):\n    drawable = factory.make_object()\n    drawable.draw()\n\ndef prepare_client():\n    squareFactory = SquareFactory()\n    draw_function(squareFactory)\n\n    circleFactory = CircleFactory()\n    draw_function(circleFactory)\n\n```\n","source":"_posts/python/DesignPattern/工厂模式/readme.md","raw":"\n---\ntitle: 工厂模式\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n**当希望通过一个通用接口来创建对象，而不是让创建代码分散在整个系统中**\n\n**创建一个集中式的系统来进行对象创建的一种方式就是使用工厂模式**\n\n原型模式不需要子类化，不过需要一个初始化操作，而工厂模式需要子类化，但不需要初始化\n\n## 工厂模式一个简单的实现\n原始代码\n```\nimport pygame\n\nwindows_dimensions = 800,600\nscreen = pygame.display.set_mode(windows_dimensions)\n\nx,y = 100, 100\n\nplayer_quits = False\n\nwhile not player_quits:\n    for event in  pygame.event.get():\n        if event.type == pygame.QUIT:\n            player_quits = True\n\n        pressed = pygame.key.get_pressed()\n        if pressed[pygame.K_UP]: y -=4\n        if pressed[pygame.K_DOWN]: y += 4\n        if pressed[pygame.K_LEFT]: x -= 4\n        if pressed[pygame.K_RIGHT]: x += 4\n\n        screen.fill((0, 0, 0))\n        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(x, y, 20, 20))\n\n    pygame.display.flip()\n```\n\n**改写，方便扩展**\n\nshape_factory.py\n```\nimport pygame\nimport time\n# pygame.init()\n\nclass Shape():\n    def __init__(self,x ,y):\n        self.x = x\n        self.y = y\n\n    def draw(self):\n        raise NotImplementedError()\n\n    def move(self, direction):\n        if direction == 'up':\n            self.y -= 4\n        if direction == 'down':\n            self.y += 4\n        if direction == 'left':\n            self.x -= 4\n        if direction == 'right':\n            self.x += 4\n\n    @staticmethod\n    def factory(type):   # 工厂模式,可在这里加type类型\n        if type == 'Circle':\n            return Circle(100, 100)\n        if type == 'Square':\n            return Square(100, 100)\n            assert 0, 'Bad shape requested:  ' + type\n\nclass Square(Shape):\n    def draw(self):\n        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(self.x, self.y, 20, 20))\n\nclass Circle(Shape):\n    def draw(self):\n        pygame.draw.circle(screen, (0, 255, 255), (self.x, self.y),10)\n\nif __name__ == '__main__':\n    windows_dimensions = 800,600\n    screen = pygame.display.set_mode(windows_dimensions)\n\n    obj = Shape.factory('Circle')\n    player_quits = False\n\n    while not player_quits:\n        for event in  pygame.event.get():\n            if event.type == pygame.QUIT:\n                player_quits = True\n\n            pressed = pygame.key.get_pressed()\n            if pressed[pygame.K_UP]: obj.move('up')\n            if pressed[pygame.K_DOWN]: obj.move('down')\n            if pressed[pygame.K_LEFT]: obj.move('left')\n            if pressed[pygame.K_RIGHT]: obj.move('right')\n\n            screen.fill((0, 0, 0))\n            obj.draw()\n\n        pygame.display.flip()\n```\n\n## 抽象工厂\n**当希望创建单个接口来访问整个工厂集合时，可以使用一个抽象工厂**\n```\nimport  abc\nclass AbstractFactory():  # 抽象工厂会定义这些具体工厂的结构，之后这些具体工厂会创建本例中的原型和正方形\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def make_object(self):\n        return\n\nclass CircleFactory(AbstractFactory):\n    def make_object(self):\n        # do  something\n        return Circle()\n\nclass SquareFactory(AbstractFactory):\n    def make_object(self):\n        # do  something\n        return Square()\n\ndef draw_function(factory):\n    drawable = factory.make_object()\n    drawable.draw()\n\ndef prepare_client():\n    squareFactory = SquareFactory()\n    draw_function(squareFactory)\n\n    circleFactory = CircleFactory()\n    draw_function(circleFactory)\n\n```\n","slug":"python/DesignPattern/工厂模式/readme","published":1,"updated":"2020-04-10T16:46:16.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv3v009374uxfey2xxfv","content":"<p><strong>当希望通过一个通用接口来创建对象，而不是让创建代码分散在整个系统中</strong></p>\n<p><strong>创建一个集中式的系统来进行对象创建的一种方式就是使用工厂模式</strong></p>\n<p>原型模式不需要子类化，不过需要一个初始化操作，而工厂模式需要子类化，但不需要初始化</p>\n<h2 id=\"工厂模式一个简单的实现\"><a href=\"#工厂模式一个简单的实现\" class=\"headerlink\" title=\"工厂模式一个简单的实现\"></a>工厂模式一个简单的实现</h2><p>原始代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\"></span><br><span class=\"line\">windows_dimensions = 800,600</span><br><span class=\"line\">screen = pygame.display.set_mode(windows_dimensions)</span><br><span class=\"line\"></span><br><span class=\"line\">x,y = 100, 100</span><br><span class=\"line\"></span><br><span class=\"line\">player_quits = False</span><br><span class=\"line\"></span><br><span class=\"line\">while not player_quits:</span><br><span class=\"line\">    for event in  pygame.event.get():</span><br><span class=\"line\">        if event.type == pygame.QUIT:</span><br><span class=\"line\">            player_quits = True</span><br><span class=\"line\"></span><br><span class=\"line\">        pressed = pygame.key.get_pressed()</span><br><span class=\"line\">        if pressed[pygame.K_UP]: y -=4</span><br><span class=\"line\">        if pressed[pygame.K_DOWN]: y += 4</span><br><span class=\"line\">        if pressed[pygame.K_LEFT]: x -= 4</span><br><span class=\"line\">        if pressed[pygame.K_RIGHT]: x += 4</span><br><span class=\"line\"></span><br><span class=\"line\">        screen.fill((0, 0, 0))</span><br><span class=\"line\">        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(x, y, 20, 20))</span><br><span class=\"line\"></span><br><span class=\"line\">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p>\n<p><strong>改写，方便扩展</strong></p>\n<p>shape_factory.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\">import time</span><br><span class=\"line\"># pygame.init()</span><br><span class=\"line\"></span><br><span class=\"line\">class Shape():</span><br><span class=\"line\">    def __init__(self,x ,y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        raise NotImplementedError()</span><br><span class=\"line\"></span><br><span class=\"line\">    def move(self, direction):</span><br><span class=\"line\">        if direction == &apos;up&apos;:</span><br><span class=\"line\">            self.y -= 4</span><br><span class=\"line\">        if direction == &apos;down&apos;:</span><br><span class=\"line\">            self.y += 4</span><br><span class=\"line\">        if direction == &apos;left&apos;:</span><br><span class=\"line\">            self.x -= 4</span><br><span class=\"line\">        if direction == &apos;right&apos;:</span><br><span class=\"line\">            self.x += 4</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def factory(type):   # 工厂模式,可在这里加type类型</span><br><span class=\"line\">        if type == &apos;Circle&apos;:</span><br><span class=\"line\">            return Circle(100, 100)</span><br><span class=\"line\">        if type == &apos;Square&apos;:</span><br><span class=\"line\">            return Square(100, 100)</span><br><span class=\"line\">            assert 0, &apos;Bad shape requested:  &apos; + type</span><br><span class=\"line\"></span><br><span class=\"line\">class Square(Shape):</span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(self.x, self.y, 20, 20))</span><br><span class=\"line\"></span><br><span class=\"line\">class Circle(Shape):</span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        pygame.draw.circle(screen, (0, 255, 255), (self.x, self.y),10)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    windows_dimensions = 800,600</span><br><span class=\"line\">    screen = pygame.display.set_mode(windows_dimensions)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj = Shape.factory(&apos;Circle&apos;)</span><br><span class=\"line\">    player_quits = False</span><br><span class=\"line\"></span><br><span class=\"line\">    while not player_quits:</span><br><span class=\"line\">        for event in  pygame.event.get():</span><br><span class=\"line\">            if event.type == pygame.QUIT:</span><br><span class=\"line\">                player_quits = True</span><br><span class=\"line\"></span><br><span class=\"line\">            pressed = pygame.key.get_pressed()</span><br><span class=\"line\">            if pressed[pygame.K_UP]: obj.move(&apos;up&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_DOWN]: obj.move(&apos;down&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_LEFT]: obj.move(&apos;left&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_RIGHT]: obj.move(&apos;right&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            screen.fill((0, 0, 0))</span><br><span class=\"line\">            obj.draw()</span><br><span class=\"line\"></span><br><span class=\"line\">        pygame.display.flip()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h2><p><strong>当希望创建单个接口来访问整个工厂集合时，可以使用一个抽象工厂</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import  abc</span><br><span class=\"line\">class AbstractFactory():  # 抽象工厂会定义这些具体工厂的结构，之后这些具体工厂会创建本例中的原型和正方形</span><br><span class=\"line\">    __metaclass__ = abc.ABCMeta</span><br><span class=\"line\"></span><br><span class=\"line\">    @abc.abstractmethod</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">class CircleFactory(AbstractFactory):</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        # do  something</span><br><span class=\"line\">        return Circle()</span><br><span class=\"line\"></span><br><span class=\"line\">class SquareFactory(AbstractFactory):</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        # do  something</span><br><span class=\"line\">        return Square()</span><br><span class=\"line\"></span><br><span class=\"line\">def draw_function(factory):</span><br><span class=\"line\">    drawable = factory.make_object()</span><br><span class=\"line\">    drawable.draw()</span><br><span class=\"line\"></span><br><span class=\"line\">def prepare_client():</span><br><span class=\"line\">    squareFactory = SquareFactory()</span><br><span class=\"line\">    draw_function(squareFactory)</span><br><span class=\"line\"></span><br><span class=\"line\">    circleFactory = CircleFactory()</span><br><span class=\"line\">    draw_function(circleFactory)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>当希望通过一个通用接口来创建对象，而不是让创建代码分散在整个系统中</strong></p>\n<p><strong>创建一个集中式的系统来进行对象创建的一种方式就是使用工厂模式</strong></p>\n<p>原型模式不需要子类化，不过需要一个初始化操作，而工厂模式需要子类化，但不需要初始化</p>\n<h2 id=\"工厂模式一个简单的实现\"><a href=\"#工厂模式一个简单的实现\" class=\"headerlink\" title=\"工厂模式一个简单的实现\"></a>工厂模式一个简单的实现</h2><p>原始代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\"></span><br><span class=\"line\">windows_dimensions = 800,600</span><br><span class=\"line\">screen = pygame.display.set_mode(windows_dimensions)</span><br><span class=\"line\"></span><br><span class=\"line\">x,y = 100, 100</span><br><span class=\"line\"></span><br><span class=\"line\">player_quits = False</span><br><span class=\"line\"></span><br><span class=\"line\">while not player_quits:</span><br><span class=\"line\">    for event in  pygame.event.get():</span><br><span class=\"line\">        if event.type == pygame.QUIT:</span><br><span class=\"line\">            player_quits = True</span><br><span class=\"line\"></span><br><span class=\"line\">        pressed = pygame.key.get_pressed()</span><br><span class=\"line\">        if pressed[pygame.K_UP]: y -=4</span><br><span class=\"line\">        if pressed[pygame.K_DOWN]: y += 4</span><br><span class=\"line\">        if pressed[pygame.K_LEFT]: x -= 4</span><br><span class=\"line\">        if pressed[pygame.K_RIGHT]: x += 4</span><br><span class=\"line\"></span><br><span class=\"line\">        screen.fill((0, 0, 0))</span><br><span class=\"line\">        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(x, y, 20, 20))</span><br><span class=\"line\"></span><br><span class=\"line\">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p>\n<p><strong>改写，方便扩展</strong></p>\n<p>shape_factory.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pygame</span><br><span class=\"line\">import time</span><br><span class=\"line\"># pygame.init()</span><br><span class=\"line\"></span><br><span class=\"line\">class Shape():</span><br><span class=\"line\">    def __init__(self,x ,y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        raise NotImplementedError()</span><br><span class=\"line\"></span><br><span class=\"line\">    def move(self, direction):</span><br><span class=\"line\">        if direction == &apos;up&apos;:</span><br><span class=\"line\">            self.y -= 4</span><br><span class=\"line\">        if direction == &apos;down&apos;:</span><br><span class=\"line\">            self.y += 4</span><br><span class=\"line\">        if direction == &apos;left&apos;:</span><br><span class=\"line\">            self.x -= 4</span><br><span class=\"line\">        if direction == &apos;right&apos;:</span><br><span class=\"line\">            self.x += 4</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def factory(type):   # 工厂模式,可在这里加type类型</span><br><span class=\"line\">        if type == &apos;Circle&apos;:</span><br><span class=\"line\">            return Circle(100, 100)</span><br><span class=\"line\">        if type == &apos;Square&apos;:</span><br><span class=\"line\">            return Square(100, 100)</span><br><span class=\"line\">            assert 0, &apos;Bad shape requested:  &apos; + type</span><br><span class=\"line\"></span><br><span class=\"line\">class Square(Shape):</span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        pygame.draw.rect(screen,(255, 255, 0 ), pygame.Rect(self.x, self.y, 20, 20))</span><br><span class=\"line\"></span><br><span class=\"line\">class Circle(Shape):</span><br><span class=\"line\">    def draw(self):</span><br><span class=\"line\">        pygame.draw.circle(screen, (0, 255, 255), (self.x, self.y),10)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    windows_dimensions = 800,600</span><br><span class=\"line\">    screen = pygame.display.set_mode(windows_dimensions)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj = Shape.factory(&apos;Circle&apos;)</span><br><span class=\"line\">    player_quits = False</span><br><span class=\"line\"></span><br><span class=\"line\">    while not player_quits:</span><br><span class=\"line\">        for event in  pygame.event.get():</span><br><span class=\"line\">            if event.type == pygame.QUIT:</span><br><span class=\"line\">                player_quits = True</span><br><span class=\"line\"></span><br><span class=\"line\">            pressed = pygame.key.get_pressed()</span><br><span class=\"line\">            if pressed[pygame.K_UP]: obj.move(&apos;up&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_DOWN]: obj.move(&apos;down&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_LEFT]: obj.move(&apos;left&apos;)</span><br><span class=\"line\">            if pressed[pygame.K_RIGHT]: obj.move(&apos;right&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">            screen.fill((0, 0, 0))</span><br><span class=\"line\">            obj.draw()</span><br><span class=\"line\"></span><br><span class=\"line\">        pygame.display.flip()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"抽象工厂\"><a href=\"#抽象工厂\" class=\"headerlink\" title=\"抽象工厂\"></a>抽象工厂</h2><p><strong>当希望创建单个接口来访问整个工厂集合时，可以使用一个抽象工厂</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import  abc</span><br><span class=\"line\">class AbstractFactory():  # 抽象工厂会定义这些具体工厂的结构，之后这些具体工厂会创建本例中的原型和正方形</span><br><span class=\"line\">    __metaclass__ = abc.ABCMeta</span><br><span class=\"line\"></span><br><span class=\"line\">    @abc.abstractmethod</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">class CircleFactory(AbstractFactory):</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        # do  something</span><br><span class=\"line\">        return Circle()</span><br><span class=\"line\"></span><br><span class=\"line\">class SquareFactory(AbstractFactory):</span><br><span class=\"line\">    def make_object(self):</span><br><span class=\"line\">        # do  something</span><br><span class=\"line\">        return Square()</span><br><span class=\"line\"></span><br><span class=\"line\">def draw_function(factory):</span><br><span class=\"line\">    drawable = factory.make_object()</span><br><span class=\"line\">    drawable.draw()</span><br><span class=\"line\"></span><br><span class=\"line\">def prepare_client():</span><br><span class=\"line\">    squareFactory = SquareFactory()</span><br><span class=\"line\">    draw_function(squareFactory)</span><br><span class=\"line\"></span><br><span class=\"line\">    circleFactory = CircleFactory()</span><br><span class=\"line\">    draw_function(circleFactory)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"单例模式","date":"2019-07-02T03:05:31.000Z","_content":"\n**当项目有几个部分不会影响代码的执行时，（例如日志记录）那么使用全局状态是可以接受的**\n\n**避免使用全局状态的原因之一就是不想使 项目一部分中的代码修改全局状态**\n\nlogger_class.py \n```\n# def log_message(msg):\n#     with open( 'filename.log', 'a' ) as log_file:\n#         log_file.write(f\"{msg}\\n\")   # 代替 format，python3新特性\n#\n# log_message('save this for later')\n\nclass Logger():\n\n    def __init__(self, filename):\n        self.filename = filename\n\n    def _write_log(self, level, msg):\n        with open(self.filename , 'a') as log_file:\n            log_file.write('{0} {1}\\n'.format(level, msg))\n\n    def critical(self, msg):\n        self._write_log('CRUTICAL',msg)\n\n\n    def error(self, msg):\n        self._write_log('ERROR',msg)\n\n\n    def warn(self, msg):\n        self._write_log('WARN',msg)\n\n\n    def info(self, msg):\n        self._write_log('INFO', msg)\n\n\n    def debug(self, msg):\n        self._write_log('DEBUG',msg)\n\n```\nmain_script.py\n```\n# import logger\n#\n#\n# for i in range(4):\n#     logger.log_message(f'log massger {i}')\n\nfrom logger_class import Logger\n\nlogger_object = Logger('filename_class')\nlogger_object.info( 'hahahaha')\n\n```\n**__init__函数并不是真正意义上的构造函数，__init__方法做的事情是在对象创建好之后初始化变量。真正创建实例的是__new__方法**\n```\nclass Singleton(object):\n    '''\n    实现__new__方法  \n    并在将一个类的实例绑定到类变量_instance上,  \n    如果cls._instance为None说明该类还没有实例化过,实例化该类,并返回  \n    如果cls._instance不为None,直接返回cls._instance  \n    '''\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = object.__new__(cls, *args, **kwargs)\n\n        return cls._instance\n\ns1 = Singleton()\ns2 = Singleton()\nprint(s1)\nprint(s2)\n\n```\n","source":"_posts/python/DesignPattern/单例模式/readme.md","raw":"\n---\ntitle: 单例模式\ndate: 2019-07-02 11:05:31\ntags:\ncategories: python\n---\n\n**当项目有几个部分不会影响代码的执行时，（例如日志记录）那么使用全局状态是可以接受的**\n\n**避免使用全局状态的原因之一就是不想使 项目一部分中的代码修改全局状态**\n\nlogger_class.py \n```\n# def log_message(msg):\n#     with open( 'filename.log', 'a' ) as log_file:\n#         log_file.write(f\"{msg}\\n\")   # 代替 format，python3新特性\n#\n# log_message('save this for later')\n\nclass Logger():\n\n    def __init__(self, filename):\n        self.filename = filename\n\n    def _write_log(self, level, msg):\n        with open(self.filename , 'a') as log_file:\n            log_file.write('{0} {1}\\n'.format(level, msg))\n\n    def critical(self, msg):\n        self._write_log('CRUTICAL',msg)\n\n\n    def error(self, msg):\n        self._write_log('ERROR',msg)\n\n\n    def warn(self, msg):\n        self._write_log('WARN',msg)\n\n\n    def info(self, msg):\n        self._write_log('INFO', msg)\n\n\n    def debug(self, msg):\n        self._write_log('DEBUG',msg)\n\n```\nmain_script.py\n```\n# import logger\n#\n#\n# for i in range(4):\n#     logger.log_message(f'log massger {i}')\n\nfrom logger_class import Logger\n\nlogger_object = Logger('filename_class')\nlogger_object.info( 'hahahaha')\n\n```\n**__init__函数并不是真正意义上的构造函数，__init__方法做的事情是在对象创建好之后初始化变量。真正创建实例的是__new__方法**\n```\nclass Singleton(object):\n    '''\n    实现__new__方法  \n    并在将一个类的实例绑定到类变量_instance上,  \n    如果cls._instance为None说明该类还没有实例化过,实例化该类,并返回  \n    如果cls._instance不为None,直接返回cls._instance  \n    '''\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = object.__new__(cls, *args, **kwargs)\n\n        return cls._instance\n\ns1 = Singleton()\ns2 = Singleton()\nprint(s1)\nprint(s2)\n\n```\n","slug":"python/DesignPattern/单例模式/readme","published":1,"updated":"2020-04-10T16:46:16.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv3y009474uxigisipsg","content":"<p><strong>当项目有几个部分不会影响代码的执行时，（例如日志记录）那么使用全局状态是可以接受的</strong></p>\n<p><strong>避免使用全局状态的原因之一就是不想使 项目一部分中的代码修改全局状态</strong></p>\n<p>logger_class.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># def log_message(msg):</span><br><span class=\"line\">#     with open( &apos;filename.log&apos;, &apos;a&apos; ) as log_file:</span><br><span class=\"line\">#         log_file.write(f&quot;&#123;msg&#125;\\n&quot;)   # 代替 format，python3新特性</span><br><span class=\"line\">#</span><br><span class=\"line\"># log_message(&apos;save this for later&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Logger():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, filename):</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    def _write_log(self, level, msg):</span><br><span class=\"line\">        with open(self.filename , &apos;a&apos;) as log_file:</span><br><span class=\"line\">            log_file.write(&apos;&#123;0&#125; &#123;1&#125;\\n&apos;.format(level, msg))</span><br><span class=\"line\"></span><br><span class=\"line\">    def critical(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;CRUTICAL&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def error(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;ERROR&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def warn(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;WARN&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def info(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;INFO&apos;, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def debug(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;DEBUG&apos;,msg)</span><br></pre></td></tr></table></figure></p>\n<p>main_script.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># import logger</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># for i in range(4):</span><br><span class=\"line\">#     logger.log_message(f&apos;log massger &#123;i&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">from logger_class import Logger</span><br><span class=\"line\"></span><br><span class=\"line\">logger_object = Logger(&apos;filename_class&apos;)</span><br><span class=\"line\">logger_object.info( &apos;hahahaha&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><strong>init</strong>函数并不是真正意义上的构造函数，<strong>init</strong>方法做的事情是在对象创建好之后初始化变量。真正创建实例的是<strong>new</strong>方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    实现__new__方法  </span><br><span class=\"line\">    并在将一个类的实例绑定到类变量_instance上,  </span><br><span class=\"line\">    如果cls._instance为None说明该类还没有实例化过,实例化该类,并返回  </span><br><span class=\"line\">    如果cls._instance不为None,直接返回cls._instance  </span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        if cls._instance is None:</span><br><span class=\"line\">            cls._instance = object.__new__(cls, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Singleton()</span><br><span class=\"line\">s2 = Singleton()</span><br><span class=\"line\">print(s1)</span><br><span class=\"line\">print(s2)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>当项目有几个部分不会影响代码的执行时，（例如日志记录）那么使用全局状态是可以接受的</strong></p>\n<p><strong>避免使用全局状态的原因之一就是不想使 项目一部分中的代码修改全局状态</strong></p>\n<p>logger_class.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># def log_message(msg):</span><br><span class=\"line\">#     with open( &apos;filename.log&apos;, &apos;a&apos; ) as log_file:</span><br><span class=\"line\">#         log_file.write(f&quot;&#123;msg&#125;\\n&quot;)   # 代替 format，python3新特性</span><br><span class=\"line\">#</span><br><span class=\"line\"># log_message(&apos;save this for later&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Logger():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, filename):</span><br><span class=\"line\">        self.filename = filename</span><br><span class=\"line\"></span><br><span class=\"line\">    def _write_log(self, level, msg):</span><br><span class=\"line\">        with open(self.filename , &apos;a&apos;) as log_file:</span><br><span class=\"line\">            log_file.write(&apos;&#123;0&#125; &#123;1&#125;\\n&apos;.format(level, msg))</span><br><span class=\"line\"></span><br><span class=\"line\">    def critical(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;CRUTICAL&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def error(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;ERROR&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def warn(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;WARN&apos;,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def info(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;INFO&apos;, msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def debug(self, msg):</span><br><span class=\"line\">        self._write_log(&apos;DEBUG&apos;,msg)</span><br></pre></td></tr></table></figure></p>\n<p>main_script.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># import logger</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># for i in range(4):</span><br><span class=\"line\">#     logger.log_message(f&apos;log massger &#123;i&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">from logger_class import Logger</span><br><span class=\"line\"></span><br><span class=\"line\">logger_object = Logger(&apos;filename_class&apos;)</span><br><span class=\"line\">logger_object.info( &apos;hahahaha&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><strong>init</strong>函数并不是真正意义上的构造函数，<strong>init</strong>方法做的事情是在对象创建好之后初始化变量。真正创建实例的是<strong>new</strong>方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton(object):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    实现__new__方法  </span><br><span class=\"line\">    并在将一个类的实例绑定到类变量_instance上,  </span><br><span class=\"line\">    如果cls._instance为None说明该类还没有实例化过,实例化该类,并返回  </span><br><span class=\"line\">    如果cls._instance不为None,直接返回cls._instance  </span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    _instance = None</span><br><span class=\"line\">    def __new__(cls, *args, **kwargs):</span><br><span class=\"line\">        if cls._instance is None:</span><br><span class=\"line\">            cls._instance = object.__new__(cls, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Singleton()</span><br><span class=\"line\">s2 = Singleton()</span><br><span class=\"line\">print(s1)</span><br><span class=\"line\">print(s2)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"python 浅拷贝与深拷贝","date":"2019-07-14T03:05:31.000Z","_content":"\n\n\n# python 浅拷贝与深拷贝\n\n## python的引用计数\n\n1. int float str tuple 为不可变对象\n2. list dict set  为可变对象\n\npython 内不可变对象的内存管理方式是**引用计数**，python 不会对值相同的不可变对象，申请单独的内存空间。只会记录它的引用次数。\n```\nimport copy\na = 'weilai'\nb = a\nc = copy.copy(a)\nif id(a) == id(b) == id(c):\n    print(f'all id is {id(a)}')\nelse:\n    print(f'id(a) is {id(a)}')\n    print(f'id(b) is {id(b)}')\n    print(f'id(c) is {id(c)}')\n```\n\n## 浅拷贝\n浅拷贝会创建一个新的对象，对于对象中的元素，他依然会引用原来的物体\n```\nimport copy \na = ['weilai', 'handsome']\nb = a\nc = copy.copy(a)\nif id(a) == id(b) == id(c):\n    print(f'all id is {id(a)}')\nelse:\n    print(f'id(a) is {id(a)}')\n    print(f'id(b) is {id(b)}')\n    print(f'id(c) is {id(c)}')  # c创建了一个新对象，指向原来的 a\n\na.append('cool')\nprint(a)\nprint(b)\nprint(c)  # c 还是['weilai', 'handsome']\n```\n由于浅拷贝会使用原始元素的引用（内存地址），所以在操作对象内部的可变元素时，其结果是会影响到拷贝对象的\n\n```\nimport copy \na = [[1, 2, 3], 3, 4]\nb = a\nc = copy.copy(a)  # [[1, 2, 3], 3, 4]\na[0][0] = 'a' \na[1] = 'b'\nprint(a)  # [['a', 2, 3], 'b', 4]\nprint(b)  # [['a', 2, 3], 'b', 4]\nprint(c)  # [['a', 2, 3], 3, 4]\n```\n## 深拷贝\n**深拷贝遇到可变对象，则又会进行一层对象的创建，操作被考对象内部的可变对象，不影响拷贝对象内部的值。\n```\nimport copy \na = [[1, 2, 3], 3, 4]\nb = a\nc = copy.deepcopy(a)  # [[1, 2, 3], 3, 4]\na[0][0] = 'a' \na[1] = 'b'\nprint(a)  # [['a', 2, 3], 'b', 4]\nprint(b)  # [['a', 2, 3], 'b', 4]\nprint(c)  # [[1, 2, 3], 3, 4]\n\n```\n\n## 总结\n\n\n**python变量实际上是指向相关值在内存中存储位置的指针 。 深浅拷贝都是对源对象的复制，占用不同的内存空间**\n1. 如果源对象只有一级目录的话，源对象做任何改动，不影响深浅拷贝对象\n2. 如果源对象不止一级目录的话，源对象做任何改动，都要影响浅拷贝，但不影响深拷贝\n3. 序列对象的切片其实是浅拷贝，即只拷贝顶级的对象\n","source":"_posts/python/DesignPattern/原型模式/python中的浅拷贝与深拷贝的对比.md","raw":"---\ntitle: python 浅拷贝与深拷贝\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n# python 浅拷贝与深拷贝\n\n## python的引用计数\n\n1. int float str tuple 为不可变对象\n2. list dict set  为可变对象\n\npython 内不可变对象的内存管理方式是**引用计数**，python 不会对值相同的不可变对象，申请单独的内存空间。只会记录它的引用次数。\n```\nimport copy\na = 'weilai'\nb = a\nc = copy.copy(a)\nif id(a) == id(b) == id(c):\n    print(f'all id is {id(a)}')\nelse:\n    print(f'id(a) is {id(a)}')\n    print(f'id(b) is {id(b)}')\n    print(f'id(c) is {id(c)}')\n```\n\n## 浅拷贝\n浅拷贝会创建一个新的对象，对于对象中的元素，他依然会引用原来的物体\n```\nimport copy \na = ['weilai', 'handsome']\nb = a\nc = copy.copy(a)\nif id(a) == id(b) == id(c):\n    print(f'all id is {id(a)}')\nelse:\n    print(f'id(a) is {id(a)}')\n    print(f'id(b) is {id(b)}')\n    print(f'id(c) is {id(c)}')  # c创建了一个新对象，指向原来的 a\n\na.append('cool')\nprint(a)\nprint(b)\nprint(c)  # c 还是['weilai', 'handsome']\n```\n由于浅拷贝会使用原始元素的引用（内存地址），所以在操作对象内部的可变元素时，其结果是会影响到拷贝对象的\n\n```\nimport copy \na = [[1, 2, 3], 3, 4]\nb = a\nc = copy.copy(a)  # [[1, 2, 3], 3, 4]\na[0][0] = 'a' \na[1] = 'b'\nprint(a)  # [['a', 2, 3], 'b', 4]\nprint(b)  # [['a', 2, 3], 'b', 4]\nprint(c)  # [['a', 2, 3], 3, 4]\n```\n## 深拷贝\n**深拷贝遇到可变对象，则又会进行一层对象的创建，操作被考对象内部的可变对象，不影响拷贝对象内部的值。\n```\nimport copy \na = [[1, 2, 3], 3, 4]\nb = a\nc = copy.deepcopy(a)  # [[1, 2, 3], 3, 4]\na[0][0] = 'a' \na[1] = 'b'\nprint(a)  # [['a', 2, 3], 'b', 4]\nprint(b)  # [['a', 2, 3], 'b', 4]\nprint(c)  # [[1, 2, 3], 3, 4]\n\n```\n\n## 总结\n\n\n**python变量实际上是指向相关值在内存中存储位置的指针 。 深浅拷贝都是对源对象的复制，占用不同的内存空间**\n1. 如果源对象只有一级目录的话，源对象做任何改动，不影响深浅拷贝对象\n2. 如果源对象不止一级目录的话，源对象做任何改动，都要影响浅拷贝，但不影响深拷贝\n3. 序列对象的切片其实是浅拷贝，即只拷贝顶级的对象\n","slug":"python/DesignPattern/原型模式/python中的浅拷贝与深拷贝的对比","published":1,"updated":"2020-04-10T16:46:16.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv48009574uxndqn6kgy","content":"<h1 id=\"python-浅拷贝与深拷贝\"><a href=\"#python-浅拷贝与深拷贝\" class=\"headerlink\" title=\"python 浅拷贝与深拷贝\"></a>python 浅拷贝与深拷贝</h1><h2 id=\"python的引用计数\"><a href=\"#python的引用计数\" class=\"headerlink\" title=\"python的引用计数\"></a>python的引用计数</h2><ol>\n<li>int float str tuple 为不可变对象</li>\n<li>list dict set  为可变对象</li>\n</ol>\n<p>python 内不可变对象的内存管理方式是<strong>引用计数</strong>，python 不会对值相同的不可变对象，申请单独的内存空间。只会记录它的引用次数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\">a = &apos;weilai&apos;</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)</span><br><span class=\"line\">if id(a) == id(b) == id(c):</span><br><span class=\"line\">    print(f&apos;all id is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(f&apos;id(a) is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(b) is &#123;id(b)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(c) is &#123;id(c)&#125;&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>浅拷贝会创建一个新的对象，对于对象中的元素，他依然会引用原来的物体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [&apos;weilai&apos;, &apos;handsome&apos;]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)</span><br><span class=\"line\">if id(a) == id(b) == id(c):</span><br><span class=\"line\">    print(f&apos;all id is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(f&apos;id(a) is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(b) is &#123;id(b)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(c) is &#123;id(c)&#125;&apos;)  # c创建了一个新对象，指向原来的 a</span><br><span class=\"line\"></span><br><span class=\"line\">a.append(&apos;cool&apos;)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)  # c 还是[&apos;weilai&apos;, &apos;handsome&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>由于浅拷贝会使用原始元素的引用（内存地址），所以在操作对象内部的可变元素时，其结果是会影响到拷贝对象的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [[1, 2, 3], 3, 4]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)  # [[1, 2, 3], 3, 4]</span><br><span class=\"line\">a[0][0] = &apos;a&apos; </span><br><span class=\"line\">a[1] = &apos;b&apos;</span><br><span class=\"line\">print(a)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(b)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(c)  # [[&apos;a&apos;, 2, 3], 3, 4]</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>**深拷贝遇到可变对象，则又会进行一层对象的创建，操作被考对象内部的可变对象，不影响拷贝对象内部的值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [[1, 2, 3], 3, 4]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.deepcopy(a)  # [[1, 2, 3], 3, 4]</span><br><span class=\"line\">a[0][0] = &apos;a&apos; </span><br><span class=\"line\">a[1] = &apos;b&apos;</span><br><span class=\"line\">print(a)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(b)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(c)  # [[1, 2, 3], 3, 4]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>python变量实际上是指向相关值在内存中存储位置的指针 。 深浅拷贝都是对源对象的复制，占用不同的内存空间</strong></p>\n<ol>\n<li>如果源对象只有一级目录的话，源对象做任何改动，不影响深浅拷贝对象</li>\n<li>如果源对象不止一级目录的话，源对象做任何改动，都要影响浅拷贝，但不影响深拷贝</li>\n<li>序列对象的切片其实是浅拷贝，即只拷贝顶级的对象</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python-浅拷贝与深拷贝\"><a href=\"#python-浅拷贝与深拷贝\" class=\"headerlink\" title=\"python 浅拷贝与深拷贝\"></a>python 浅拷贝与深拷贝</h1><h2 id=\"python的引用计数\"><a href=\"#python的引用计数\" class=\"headerlink\" title=\"python的引用计数\"></a>python的引用计数</h2><ol>\n<li>int float str tuple 为不可变对象</li>\n<li>list dict set  为可变对象</li>\n</ol>\n<p>python 内不可变对象的内存管理方式是<strong>引用计数</strong>，python 不会对值相同的不可变对象，申请单独的内存空间。只会记录它的引用次数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy</span><br><span class=\"line\">a = &apos;weilai&apos;</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)</span><br><span class=\"line\">if id(a) == id(b) == id(c):</span><br><span class=\"line\">    print(f&apos;all id is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(f&apos;id(a) is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(b) is &#123;id(b)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(c) is &#123;id(c)&#125;&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h2><p>浅拷贝会创建一个新的对象，对于对象中的元素，他依然会引用原来的物体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [&apos;weilai&apos;, &apos;handsome&apos;]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)</span><br><span class=\"line\">if id(a) == id(b) == id(c):</span><br><span class=\"line\">    print(f&apos;all id is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(f&apos;id(a) is &#123;id(a)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(b) is &#123;id(b)&#125;&apos;)</span><br><span class=\"line\">    print(f&apos;id(c) is &#123;id(c)&#125;&apos;)  # c创建了一个新对象，指向原来的 a</span><br><span class=\"line\"></span><br><span class=\"line\">a.append(&apos;cool&apos;)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)  # c 还是[&apos;weilai&apos;, &apos;handsome&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>由于浅拷贝会使用原始元素的引用（内存地址），所以在操作对象内部的可变元素时，其结果是会影响到拷贝对象的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [[1, 2, 3], 3, 4]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.copy(a)  # [[1, 2, 3], 3, 4]</span><br><span class=\"line\">a[0][0] = &apos;a&apos; </span><br><span class=\"line\">a[1] = &apos;b&apos;</span><br><span class=\"line\">print(a)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(b)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(c)  # [[&apos;a&apos;, 2, 3], 3, 4]</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>**深拷贝遇到可变对象，则又会进行一层对象的创建，操作被考对象内部的可变对象，不影响拷贝对象内部的值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import copy </span><br><span class=\"line\">a = [[1, 2, 3], 3, 4]</span><br><span class=\"line\">b = a</span><br><span class=\"line\">c = copy.deepcopy(a)  # [[1, 2, 3], 3, 4]</span><br><span class=\"line\">a[0][0] = &apos;a&apos; </span><br><span class=\"line\">a[1] = &apos;b&apos;</span><br><span class=\"line\">print(a)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(b)  # [[&apos;a&apos;, 2, 3], &apos;b&apos;, 4]</span><br><span class=\"line\">print(c)  # [[1, 2, 3], 3, 4]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>python变量实际上是指向相关值在内存中存储位置的指针 。 深浅拷贝都是对源对象的复制，占用不同的内存空间</strong></p>\n<ol>\n<li>如果源对象只有一级目录的话，源对象做任何改动，不影响深浅拷贝对象</li>\n<li>如果源对象不止一级目录的话，源对象做任何改动，都要影响浅拷贝，但不影响深拷贝</li>\n<li>序列对象的切片其实是浅拷贝，即只拷贝顶级的对象</li>\n</ol>\n"},{"title":"建造者模式","date":"2019-07-14T03:05:31.000Z","_content":"\n\n**建造者模式，将复杂对象的构造从其表示形式中分离了出来，因此可用相同的构造过程来创建不同形式的表单**。\n\n**其最大的缺点在于，我们要为希望创建的每一种产品类型创建ConcreteBuilder建造者**\n\n\n原始代码\n```\ndef generator_webform(text_field_list=[],checkbox_field_list=[]):\n    generator_fields = \"\\n\".join(map(lambda x:'{0}：<br> <input type=\"text\" name=\"{0}\"> <br>'.format(x),text_field_list))\n    generator_fields += \"\\n\".join(map(lambda x:'<label><input type=\"checkbox\" id=\"{0}\" value={0}>{0} <br>'.format(x),checkbox_field_list))\n    return \"<form>{fields}</form>\".format(fields=generator_fields)\n\n\ndef build_html_form(text_field_list=[],checkbox_field_list=[]):\n    with open('form_file.html','w') as f :\n        f.write('<html><body>{}</body></html>'.format(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields)))\n\n\nif __name__ == \"__main__\":\n    text_fields = [\"name\",\"age\",\"email\",\"telephone\"]\n    checkbox_fields = ['awesome' , 'bad']\n    print(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields))\n    build_html_form(text_field_list=text_fields,checkbox_field_list=checkbox_fields)\n\n```\n改造后\n```\nfrom abc import ABCMeta, abstractmethod\n\nclass Director(object, metaclass=ABCMeta):\n    def __init__(self):\n        self._builder =None\n\n    def set_build(self, builder):\n        self._builder = builder\n\n    @abstractmethod\n    def construct(self, field_list):\n        pass\n\n    def get_constructed_object(self):\n        return self._builder.constructed_object\n\n\nclass AbstractFormBuilder(object,metaclass=ABCMeta):\n    def __init__(self):\n        self.constructed_object = None\n\n    @abstractmethod  # 定义一个抽象基类\n    def add_checkbox(self, checkbox_dict):\n        pass\n\n    @abstractmethod\n    def add_text_field_dict(self,field_dict):\n        pass\n\n    @abstractmethod\n    def add_button(self, button_dict):\n        pass\n\nclass HtmlForm(object):\n    def __init__(self):\n        self.field_list = []\n\n    def __repr__(self):\n        return '<form>{}</form>'.format(''.join(self.field_list))\n\nclass HtmlFormBuilder(AbstractFormBuilder):\n    def __init__(self):\n        self.constructed_object =HtmlForm()\n\n    def add_text_field(self, field_dict):\n        self.constructed_object.filed_list.append(\n            '{0}:<br><input type=\"text\" name=\"{1}\"><br>'.format(field_dict['label'],\n                                                                field_dict['field_name']))\n\n    def add_checkbox(self, checkbox_dict):\n        self.constructed_object.filed_list.append(\n            '<label><input type=\"checkbox\" id=\"{0}\" value = \"{1}\"> {2}<br>'.format('field_id',\n                                                                                   checkbox_dict['value'],\n                                                                                   checkbox_dict['label']))\n\n    def add_button(self, button_dict):\n        self.constructed_object.filed_list.append(\n            '<button type=\"button\"> {} </button>'.format(button_dict['text']))\n\nclass FormDirector(Director):\n    def __init__(self):\n        Director.__init__(self)\n\n    def construct(self, field_list):\n        for field in field_list:\n            if field[\"field_type\"] ==  'text_field':\n                self._builder.add_text_field(field)\n            elif field[\"field_type\"] ==  'checkbox':\n                self._builder.add_check(field)\n            elif field[\"field_type\"] ==  'button':\n                self._builder.add_button(field)\n\nif __name__ == '__main__':\n    director = FormDirector()\n    html_form_builder = HtmlFormBuilder()\n    director.set_build(html_form_builder)\n\n    field_list = [\n        {\n            'field_type' : 'text_field',\n            'label' : 'Best text you have ever writen',\n            'field_name' : 'Field One'\n         },\n        {\n            'field_type': 'checkbox',\n            'field_id' : 'check_it',\n            'label': 'check for on',\n            'value': '1'\n        },\n        {\n            'field_type': 'text_field',\n            'label': 'another text you have ever writen',\n            'field_name': 'Field One'\n        },\n        {\n            'field_type' : 'button',\n            'text' : 'Done'\n        }\n    ]\n    director.construct(field_list)\n\n    with open('form_file.html', 'w') as f:\n        f.write(\n            '<html><body>{0!r}</body></html>'.format(\n            director.get_constructed_object()\n        )\n    )\n\n\n```\n","source":"_posts/python/DesignPattern/建造者模式/readme.md","raw":"---\ntitle: 建造者模式\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n**建造者模式，将复杂对象的构造从其表示形式中分离了出来，因此可用相同的构造过程来创建不同形式的表单**。\n\n**其最大的缺点在于，我们要为希望创建的每一种产品类型创建ConcreteBuilder建造者**\n\n\n原始代码\n```\ndef generator_webform(text_field_list=[],checkbox_field_list=[]):\n    generator_fields = \"\\n\".join(map(lambda x:'{0}：<br> <input type=\"text\" name=\"{0}\"> <br>'.format(x),text_field_list))\n    generator_fields += \"\\n\".join(map(lambda x:'<label><input type=\"checkbox\" id=\"{0}\" value={0}>{0} <br>'.format(x),checkbox_field_list))\n    return \"<form>{fields}</form>\".format(fields=generator_fields)\n\n\ndef build_html_form(text_field_list=[],checkbox_field_list=[]):\n    with open('form_file.html','w') as f :\n        f.write('<html><body>{}</body></html>'.format(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields)))\n\n\nif __name__ == \"__main__\":\n    text_fields = [\"name\",\"age\",\"email\",\"telephone\"]\n    checkbox_fields = ['awesome' , 'bad']\n    print(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields))\n    build_html_form(text_field_list=text_fields,checkbox_field_list=checkbox_fields)\n\n```\n改造后\n```\nfrom abc import ABCMeta, abstractmethod\n\nclass Director(object, metaclass=ABCMeta):\n    def __init__(self):\n        self._builder =None\n\n    def set_build(self, builder):\n        self._builder = builder\n\n    @abstractmethod\n    def construct(self, field_list):\n        pass\n\n    def get_constructed_object(self):\n        return self._builder.constructed_object\n\n\nclass AbstractFormBuilder(object,metaclass=ABCMeta):\n    def __init__(self):\n        self.constructed_object = None\n\n    @abstractmethod  # 定义一个抽象基类\n    def add_checkbox(self, checkbox_dict):\n        pass\n\n    @abstractmethod\n    def add_text_field_dict(self,field_dict):\n        pass\n\n    @abstractmethod\n    def add_button(self, button_dict):\n        pass\n\nclass HtmlForm(object):\n    def __init__(self):\n        self.field_list = []\n\n    def __repr__(self):\n        return '<form>{}</form>'.format(''.join(self.field_list))\n\nclass HtmlFormBuilder(AbstractFormBuilder):\n    def __init__(self):\n        self.constructed_object =HtmlForm()\n\n    def add_text_field(self, field_dict):\n        self.constructed_object.filed_list.append(\n            '{0}:<br><input type=\"text\" name=\"{1}\"><br>'.format(field_dict['label'],\n                                                                field_dict['field_name']))\n\n    def add_checkbox(self, checkbox_dict):\n        self.constructed_object.filed_list.append(\n            '<label><input type=\"checkbox\" id=\"{0}\" value = \"{1}\"> {2}<br>'.format('field_id',\n                                                                                   checkbox_dict['value'],\n                                                                                   checkbox_dict['label']))\n\n    def add_button(self, button_dict):\n        self.constructed_object.filed_list.append(\n            '<button type=\"button\"> {} </button>'.format(button_dict['text']))\n\nclass FormDirector(Director):\n    def __init__(self):\n        Director.__init__(self)\n\n    def construct(self, field_list):\n        for field in field_list:\n            if field[\"field_type\"] ==  'text_field':\n                self._builder.add_text_field(field)\n            elif field[\"field_type\"] ==  'checkbox':\n                self._builder.add_check(field)\n            elif field[\"field_type\"] ==  'button':\n                self._builder.add_button(field)\n\nif __name__ == '__main__':\n    director = FormDirector()\n    html_form_builder = HtmlFormBuilder()\n    director.set_build(html_form_builder)\n\n    field_list = [\n        {\n            'field_type' : 'text_field',\n            'label' : 'Best text you have ever writen',\n            'field_name' : 'Field One'\n         },\n        {\n            'field_type': 'checkbox',\n            'field_id' : 'check_it',\n            'label': 'check for on',\n            'value': '1'\n        },\n        {\n            'field_type': 'text_field',\n            'label': 'another text you have ever writen',\n            'field_name': 'Field One'\n        },\n        {\n            'field_type' : 'button',\n            'text' : 'Done'\n        }\n    ]\n    director.construct(field_list)\n\n    with open('form_file.html', 'w') as f:\n        f.write(\n            '<html><body>{0!r}</body></html>'.format(\n            director.get_constructed_object()\n        )\n    )\n\n\n```\n","slug":"python/DesignPattern/建造者模式/readme","published":1,"updated":"2020-04-10T16:46:16.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv4c009774ux7z5e1slx","content":"<p><strong>建造者模式，将复杂对象的构造从其表示形式中分离了出来，因此可用相同的构造过程来创建不同形式的表单</strong>。</p>\n<p><strong>其最大的缺点在于，我们要为希望创建的每一种产品类型创建ConcreteBuilder建造者</strong></p>\n<p>原始代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def generator_webform(text_field_list=[],checkbox_field_list=[]):</span><br><span class=\"line\">    generator_fields = &quot;\\n&quot;.join(map(lambda x:&apos;&#123;0&#125;：&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;&#123;0&#125;&quot;&gt; &lt;br&gt;&apos;.format(x),text_field_list))</span><br><span class=\"line\">    generator_fields += &quot;\\n&quot;.join(map(lambda x:&apos;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;&#123;0&#125;&quot; value=&#123;0&#125;&gt;&#123;0&#125; &lt;br&gt;&apos;.format(x),checkbox_field_list))</span><br><span class=\"line\">    return &quot;&lt;form&gt;&#123;fields&#125;&lt;/form&gt;&quot;.format(fields=generator_fields)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def build_html_form(text_field_list=[],checkbox_field_list=[]):</span><br><span class=\"line\">    with open(&apos;form_file.html&apos;,&apos;w&apos;) as f :</span><br><span class=\"line\">        f.write(&apos;&lt;html&gt;&lt;body&gt;&#123;&#125;&lt;/body&gt;&lt;/html&gt;&apos;.format(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    text_fields = [&quot;name&quot;,&quot;age&quot;,&quot;email&quot;,&quot;telephone&quot;]</span><br><span class=\"line\">    checkbox_fields = [&apos;awesome&apos; , &apos;bad&apos;]</span><br><span class=\"line\">    print(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields))</span><br><span class=\"line\">    build_html_form(text_field_list=text_fields,checkbox_field_list=checkbox_fields)</span><br></pre></td></tr></table></figure></p>\n<p>改造后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\">class Director(object, metaclass=ABCMeta):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self._builder =None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_build(self, builder):</span><br><span class=\"line\">        self._builder = builder</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def construct(self, field_list):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_constructed_object(self):</span><br><span class=\"line\">        return self._builder.constructed_object</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AbstractFormBuilder(object,metaclass=ABCMeta):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.constructed_object = None</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod  # 定义一个抽象基类</span><br><span class=\"line\">    def add_checkbox(self, checkbox_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def add_text_field_dict(self,field_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def add_button(self, button_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlForm(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.field_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;form&gt;&#123;&#125;&lt;/form&gt;&apos;.format(&apos;&apos;.join(self.field_list))</span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlFormBuilder(AbstractFormBuilder):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.constructed_object =HtmlForm()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_text_field(self, field_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&#123;0&#125;:&lt;br&gt;&lt;input type=&quot;text&quot; name=&quot;&#123;1&#125;&quot;&gt;&lt;br&gt;&apos;.format(field_dict[&apos;label&apos;],</span><br><span class=\"line\">                                                                field_dict[&apos;field_name&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_checkbox(self, checkbox_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;&#123;0&#125;&quot; value = &quot;&#123;1&#125;&quot;&gt; &#123;2&#125;&lt;br&gt;&apos;.format(&apos;field_id&apos;,</span><br><span class=\"line\">                                                                                   checkbox_dict[&apos;value&apos;],</span><br><span class=\"line\">                                                                                   checkbox_dict[&apos;label&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_button(self, button_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&lt;button type=&quot;button&quot;&gt; &#123;&#125; &lt;/button&gt;&apos;.format(button_dict[&apos;text&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">class FormDirector(Director):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        Director.__init__(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    def construct(self, field_list):</span><br><span class=\"line\">        for field in field_list:</span><br><span class=\"line\">            if field[&quot;field_type&quot;] ==  &apos;text_field&apos;:</span><br><span class=\"line\">                self._builder.add_text_field(field)</span><br><span class=\"line\">            elif field[&quot;field_type&quot;] ==  &apos;checkbox&apos;:</span><br><span class=\"line\">                self._builder.add_check(field)</span><br><span class=\"line\">            elif field[&quot;field_type&quot;] ==  &apos;button&apos;:</span><br><span class=\"line\">                self._builder.add_button(field)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    director = FormDirector()</span><br><span class=\"line\">    html_form_builder = HtmlFormBuilder()</span><br><span class=\"line\">    director.set_build(html_form_builder)</span><br><span class=\"line\"></span><br><span class=\"line\">    field_list = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos; : &apos;text_field&apos;,</span><br><span class=\"line\">            &apos;label&apos; : &apos;Best text you have ever writen&apos;,</span><br><span class=\"line\">            &apos;field_name&apos; : &apos;Field One&apos;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos;: &apos;checkbox&apos;,</span><br><span class=\"line\">            &apos;field_id&apos; : &apos;check_it&apos;,</span><br><span class=\"line\">            &apos;label&apos;: &apos;check for on&apos;,</span><br><span class=\"line\">            &apos;value&apos;: &apos;1&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos;: &apos;text_field&apos;,</span><br><span class=\"line\">            &apos;label&apos;: &apos;another text you have ever writen&apos;,</span><br><span class=\"line\">            &apos;field_name&apos;: &apos;Field One&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos; : &apos;button&apos;,</span><br><span class=\"line\">            &apos;text&apos; : &apos;Done&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    director.construct(field_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;form_file.html&apos;, &apos;w&apos;) as f:</span><br><span class=\"line\">        f.write(</span><br><span class=\"line\">            &apos;&lt;html&gt;&lt;body&gt;&#123;0!r&#125;&lt;/body&gt;&lt;/html&gt;&apos;.format(</span><br><span class=\"line\">            director.get_constructed_object()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>建造者模式，将复杂对象的构造从其表示形式中分离了出来，因此可用相同的构造过程来创建不同形式的表单</strong>。</p>\n<p><strong>其最大的缺点在于，我们要为希望创建的每一种产品类型创建ConcreteBuilder建造者</strong></p>\n<p>原始代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def generator_webform(text_field_list=[],checkbox_field_list=[]):</span><br><span class=\"line\">    generator_fields = &quot;\\n&quot;.join(map(lambda x:&apos;&#123;0&#125;：&lt;br&gt; &lt;input type=&quot;text&quot; name=&quot;&#123;0&#125;&quot;&gt; &lt;br&gt;&apos;.format(x),text_field_list))</span><br><span class=\"line\">    generator_fields += &quot;\\n&quot;.join(map(lambda x:&apos;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;&#123;0&#125;&quot; value=&#123;0&#125;&gt;&#123;0&#125; &lt;br&gt;&apos;.format(x),checkbox_field_list))</span><br><span class=\"line\">    return &quot;&lt;form&gt;&#123;fields&#125;&lt;/form&gt;&quot;.format(fields=generator_fields)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def build_html_form(text_field_list=[],checkbox_field_list=[]):</span><br><span class=\"line\">    with open(&apos;form_file.html&apos;,&apos;w&apos;) as f :</span><br><span class=\"line\">        f.write(&apos;&lt;html&gt;&lt;body&gt;&#123;&#125;&lt;/body&gt;&lt;/html&gt;&apos;.format(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    text_fields = [&quot;name&quot;,&quot;age&quot;,&quot;email&quot;,&quot;telephone&quot;]</span><br><span class=\"line\">    checkbox_fields = [&apos;awesome&apos; , &apos;bad&apos;]</span><br><span class=\"line\">    print(generator_webform(text_field_list=text_fields,checkbox_field_list=checkbox_fields))</span><br><span class=\"line\">    build_html_form(text_field_list=text_fields,checkbox_field_list=checkbox_fields)</span><br></pre></td></tr></table></figure></p>\n<p>改造后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from abc import ABCMeta, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\">class Director(object, metaclass=ABCMeta):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self._builder =None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_build(self, builder):</span><br><span class=\"line\">        self._builder = builder</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def construct(self, field_list):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_constructed_object(self):</span><br><span class=\"line\">        return self._builder.constructed_object</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AbstractFormBuilder(object,metaclass=ABCMeta):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.constructed_object = None</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod  # 定义一个抽象基类</span><br><span class=\"line\">    def add_checkbox(self, checkbox_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def add_text_field_dict(self,field_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    @abstractmethod</span><br><span class=\"line\">    def add_button(self, button_dict):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlForm(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.field_list = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return &apos;&lt;form&gt;&#123;&#125;&lt;/form&gt;&apos;.format(&apos;&apos;.join(self.field_list))</span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlFormBuilder(AbstractFormBuilder):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.constructed_object =HtmlForm()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_text_field(self, field_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&#123;0&#125;:&lt;br&gt;&lt;input type=&quot;text&quot; name=&quot;&#123;1&#125;&quot;&gt;&lt;br&gt;&apos;.format(field_dict[&apos;label&apos;],</span><br><span class=\"line\">                                                                field_dict[&apos;field_name&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_checkbox(self, checkbox_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;&#123;0&#125;&quot; value = &quot;&#123;1&#125;&quot;&gt; &#123;2&#125;&lt;br&gt;&apos;.format(&apos;field_id&apos;,</span><br><span class=\"line\">                                                                                   checkbox_dict[&apos;value&apos;],</span><br><span class=\"line\">                                                                                   checkbox_dict[&apos;label&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_button(self, button_dict):</span><br><span class=\"line\">        self.constructed_object.filed_list.append(</span><br><span class=\"line\">            &apos;&lt;button type=&quot;button&quot;&gt; &#123;&#125; &lt;/button&gt;&apos;.format(button_dict[&apos;text&apos;]))</span><br><span class=\"line\"></span><br><span class=\"line\">class FormDirector(Director):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        Director.__init__(self)</span><br><span class=\"line\"></span><br><span class=\"line\">    def construct(self, field_list):</span><br><span class=\"line\">        for field in field_list:</span><br><span class=\"line\">            if field[&quot;field_type&quot;] ==  &apos;text_field&apos;:</span><br><span class=\"line\">                self._builder.add_text_field(field)</span><br><span class=\"line\">            elif field[&quot;field_type&quot;] ==  &apos;checkbox&apos;:</span><br><span class=\"line\">                self._builder.add_check(field)</span><br><span class=\"line\">            elif field[&quot;field_type&quot;] ==  &apos;button&apos;:</span><br><span class=\"line\">                self._builder.add_button(field)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    director = FormDirector()</span><br><span class=\"line\">    html_form_builder = HtmlFormBuilder()</span><br><span class=\"line\">    director.set_build(html_form_builder)</span><br><span class=\"line\"></span><br><span class=\"line\">    field_list = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos; : &apos;text_field&apos;,</span><br><span class=\"line\">            &apos;label&apos; : &apos;Best text you have ever writen&apos;,</span><br><span class=\"line\">            &apos;field_name&apos; : &apos;Field One&apos;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos;: &apos;checkbox&apos;,</span><br><span class=\"line\">            &apos;field_id&apos; : &apos;check_it&apos;,</span><br><span class=\"line\">            &apos;label&apos;: &apos;check for on&apos;,</span><br><span class=\"line\">            &apos;value&apos;: &apos;1&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos;: &apos;text_field&apos;,</span><br><span class=\"line\">            &apos;label&apos;: &apos;another text you have ever writen&apos;,</span><br><span class=\"line\">            &apos;field_name&apos;: &apos;Field One&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &apos;field_type&apos; : &apos;button&apos;,</span><br><span class=\"line\">            &apos;text&apos; : &apos;Done&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    director.construct(field_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;form_file.html&apos;, &apos;w&apos;) as f:</span><br><span class=\"line\">        f.write(</span><br><span class=\"line\">            &apos;&lt;html&gt;&lt;body&gt;&#123;0!r&#125;&lt;/body&gt;&lt;/html&gt;&apos;.format(</span><br><span class=\"line\">            director.get_constructed_object()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n"},{"title":"适配器模式","date":"2019-07-14T03:05:31.000Z","_content":"\n\n## 适配器模式具有以下要素：\n1. 目标  --定义客户端所使用的特定于 领域的接口\n2. 客户端  -- 使用遵从于 目标接口的对象\n3. 适配者类  --由于对象不遵从目标而必须修改的接口\n4. 适配器  -- 将适配者类中所具有的接口 修改为我们想要在客户端中 使用的接口的代码\n\n\n**1.定义我们希望适应的组成部分是什么**\n**2.识别出客户端需要的接口**\n**3.设计和实现适配器以便将客户端所需的接口映射到适配者类所提供的接口**\n\n\n客户端从适配者类中解耦出来并且被耦合到接口，这样实现了可扩展性和可维护性\n\n### 不要重复自己\n\n1. 面向接口 而非 面向现实进行编程\n2. 支持对象组合，而非继承\n\n### 关注点分离\n \n将系统分割为 单独单元 并让每个单元尤其自己的关注点。单元彼此越独立，系统的维护和扩展也会变的越容易。\n\n\n```\nclass ObjectAdapter(object):\n    def __init__(self, what_i_have, provided_function):\n        self.what_i_have = what_i_have\n        self.required_function = provided_function\n    \n    def __getattr__(self, attr):\n        return getatrr(self.what_i_have, attr)\n        \n```\n","source":"_posts/python/DesignPattern/适配器模式/readme.md","raw":"---\ntitle: 适配器模式\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n## 适配器模式具有以下要素：\n1. 目标  --定义客户端所使用的特定于 领域的接口\n2. 客户端  -- 使用遵从于 目标接口的对象\n3. 适配者类  --由于对象不遵从目标而必须修改的接口\n4. 适配器  -- 将适配者类中所具有的接口 修改为我们想要在客户端中 使用的接口的代码\n\n\n**1.定义我们希望适应的组成部分是什么**\n**2.识别出客户端需要的接口**\n**3.设计和实现适配器以便将客户端所需的接口映射到适配者类所提供的接口**\n\n\n客户端从适配者类中解耦出来并且被耦合到接口，这样实现了可扩展性和可维护性\n\n### 不要重复自己\n\n1. 面向接口 而非 面向现实进行编程\n2. 支持对象组合，而非继承\n\n### 关注点分离\n \n将系统分割为 单独单元 并让每个单元尤其自己的关注点。单元彼此越独立，系统的维护和扩展也会变的越容易。\n\n\n```\nclass ObjectAdapter(object):\n    def __init__(self, what_i_have, provided_function):\n        self.what_i_have = what_i_have\n        self.required_function = provided_function\n    \n    def __getattr__(self, attr):\n        return getatrr(self.what_i_have, attr)\n        \n```\n","slug":"python/DesignPattern/适配器模式/readme","published":1,"updated":"2020-04-10T16:46:16.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv4i009974uxl70joj0v","content":"<h2 id=\"适配器模式具有以下要素：\"><a href=\"#适配器模式具有以下要素：\" class=\"headerlink\" title=\"适配器模式具有以下要素：\"></a>适配器模式具有以下要素：</h2><ol>\n<li>目标  –定义客户端所使用的特定于 领域的接口</li>\n<li>客户端  – 使用遵从于 目标接口的对象</li>\n<li>适配者类  –由于对象不遵从目标而必须修改的接口</li>\n<li>适配器  – 将适配者类中所具有的接口 修改为我们想要在客户端中 使用的接口的代码</li>\n</ol>\n<p><strong>1.定义我们希望适应的组成部分是什么</strong><br><strong>2.识别出客户端需要的接口</strong><br><strong>3.设计和实现适配器以便将客户端所需的接口映射到适配者类所提供的接口</strong></p>\n<p>客户端从适配者类中解耦出来并且被耦合到接口，这样实现了可扩展性和可维护性</p>\n<h3 id=\"不要重复自己\"><a href=\"#不要重复自己\" class=\"headerlink\" title=\"不要重复自己\"></a>不要重复自己</h3><ol>\n<li>面向接口 而非 面向现实进行编程</li>\n<li>支持对象组合，而非继承</li>\n</ol>\n<h3 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h3><p>将系统分割为 单独单元 并让每个单元尤其自己的关注点。单元彼此越独立，系统的维护和扩展也会变的越容易。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ObjectAdapter(object):</span><br><span class=\"line\">    def __init__(self, what_i_have, provided_function):</span><br><span class=\"line\">        self.what_i_have = what_i_have</span><br><span class=\"line\">        self.required_function = provided_function</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __getattr__(self, attr):</span><br><span class=\"line\">        return getatrr(self.what_i_have, attr)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"适配器模式具有以下要素：\"><a href=\"#适配器模式具有以下要素：\" class=\"headerlink\" title=\"适配器模式具有以下要素：\"></a>适配器模式具有以下要素：</h2><ol>\n<li>目标  –定义客户端所使用的特定于 领域的接口</li>\n<li>客户端  – 使用遵从于 目标接口的对象</li>\n<li>适配者类  –由于对象不遵从目标而必须修改的接口</li>\n<li>适配器  – 将适配者类中所具有的接口 修改为我们想要在客户端中 使用的接口的代码</li>\n</ol>\n<p><strong>1.定义我们希望适应的组成部分是什么</strong><br><strong>2.识别出客户端需要的接口</strong><br><strong>3.设计和实现适配器以便将客户端所需的接口映射到适配者类所提供的接口</strong></p>\n<p>客户端从适配者类中解耦出来并且被耦合到接口，这样实现了可扩展性和可维护性</p>\n<h3 id=\"不要重复自己\"><a href=\"#不要重复自己\" class=\"headerlink\" title=\"不要重复自己\"></a>不要重复自己</h3><ol>\n<li>面向接口 而非 面向现实进行编程</li>\n<li>支持对象组合，而非继承</li>\n</ol>\n<h3 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h3><p>将系统分割为 单独单元 并让每个单元尤其自己的关注点。单元彼此越独立，系统的维护和扩展也会变的越容易。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ObjectAdapter(object):</span><br><span class=\"line\">    def __init__(self, what_i_have, provided_function):</span><br><span class=\"line\">        self.what_i_have = what_i_have</span><br><span class=\"line\">        self.required_function = provided_function</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __getattr__(self, attr):</span><br><span class=\"line\">        return getatrr(self.what_i_have, attr)</span><br></pre></td></tr></table></figure>\n"},{"title":"基础","date":"2019-07-06T03:05:31.000Z","_content":"\n\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. `>/dev/null ,2>/dev/null` 丢弃输出\n5. `> list 2>&1 (都输出 list)或 &> list`\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","source":"_posts/基础知识/learn_linux/bash_shell/readme.md","raw":"---\ntitle: 基础\ndate: 2019-07-06 11:05:31\ntags:\ncategories: linux\n---\n\n\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. `>/dev/null ,2>/dev/null` 丢弃输出\n5. `> list 2>&1 (都输出 list)或 &> list`\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","slug":"基础知识/learn_linux/bash_shell/readme","published":1,"updated":"2020-04-10T16:46:16.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv4n009b74uxlym89986","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. `&gt;/dev/null ,2&gt;/dev/null` 丢弃输出</span><br><span class=\"line\">5. `&gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list`</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. `&gt;/dev/null ,2&gt;/dev/null` 丢弃输出</span><br><span class=\"line\">5. `&gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list`</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n"},{"title":"关于 vi","date":"2019-09-18T03:51:16.000Z","_content":"# vi\n## vi的使用\n1. 一般模式   \n2. 编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)\n3. 命令行模式 (: / ?)\n```\ndos2unix filename\n\ndos2unix和unix2dos，dos2unix把\"\\r\\n\"转化成\"\\n\"，unixtodos把\"\\n\"转化成\"\\r\\n\n```\n","source":"_posts/基础知识/learn_linux/vim/readme.md","raw":"---\n\ntitle: 关于 vi\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: linux\n---\n# vi\n## vi的使用\n1. 一般模式   \n2. 编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)\n3. 命令行模式 (: / ?)\n```\ndos2unix filename\n\ndos2unix和unix2dos，dos2unix把\"\\r\\n\"转化成\"\\n\"，unixtodos把\"\\n\"转化成\"\\r\\n\n```\n","slug":"基础知识/learn_linux/vim/readme","published":1,"updated":"2020-04-10T16:46:16.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv4r009d74uxpf10awri","content":"<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><h2 id=\"vi的使用\"><a href=\"#vi的使用\" class=\"headerlink\" title=\"vi的使用\"></a>vi的使用</h2><ol>\n<li>一般模式   </li>\n<li>编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)</li>\n<li>命令行模式 (: / ?)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dos2unix filename</span><br><span class=\"line\"></span><br><span class=\"line\">dos2unix和unix2dos，dos2unix把&quot;\\r\\n&quot;转化成&quot;\\n&quot;，unixtodos把&quot;\\n&quot;转化成&quot;\\r\\n</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><h2 id=\"vi的使用\"><a href=\"#vi的使用\" class=\"headerlink\" title=\"vi的使用\"></a>vi的使用</h2><ol>\n<li>一般模式   </li>\n<li>编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)</li>\n<li>命令行模式 (: / ?)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dos2unix filename</span><br><span class=\"line\"></span><br><span class=\"line\">dos2unix和unix2dos，dos2unix把&quot;\\r\\n&quot;转化成&quot;\\n&quot;，unixtodos把&quot;\\n&quot;转化成&quot;\\r\\n</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"jupyter备份","date":"2019-08-17T04:51:16.000Z","_content":"\n\n\npip3 install jupyter\n\n vi /usr/share/vim/vim81/defaults.vim\n \n \n jupyter notebook --generate-config\n \njupyter contrib nbextension install --user --skip-running-check\n\n\nvi /root/.jupyter/jupyter_notebook_config.py\n\n rm /etc/nginx/sites-enabled/default\n \n \nln -s /root/flask_nginx.conf /etc/nginx/conf.d/\n\nsetsid uwsgi --ini /root/flask_uwsgi.ini &\n\n\nnohup jupyter notebook --allow-root  > jupyter.log 2>&1 &\n\n\nservice nginx restart\n\n\n```\nfrom notebook.auth import passwd\npasswd()\n\n```\n\n```\n# 允许通过任意绑定服务器的ip访问\nc.NotebookApp.ip = '*'\n# 用于访问的端口\nc.NotebookApp.port = 8527\n# 不自动打开浏览器\nc.NotebookApp.open_browser = False\n# 设置登录密码\nc.NotebookApp.password = 'sha1:14855cd59712:1cf1063d38e08cd2703a07a52b66714281676b6d'\n# 设置默认目录\nc.NotebookApp.notebook_dir = u'/root/'\nc.NotebookApp.base_url = '/jupyter/'\n\n```\n","source":"_posts/基础知识/backup/nginx/readme.md","raw":"---\n\ntitle: jupyter备份\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: jupyter\n---\n\n\n\npip3 install jupyter\n\n vi /usr/share/vim/vim81/defaults.vim\n \n \n jupyter notebook --generate-config\n \njupyter contrib nbextension install --user --skip-running-check\n\n\nvi /root/.jupyter/jupyter_notebook_config.py\n\n rm /etc/nginx/sites-enabled/default\n \n \nln -s /root/flask_nginx.conf /etc/nginx/conf.d/\n\nsetsid uwsgi --ini /root/flask_uwsgi.ini &\n\n\nnohup jupyter notebook --allow-root  > jupyter.log 2>&1 &\n\n\nservice nginx restart\n\n\n```\nfrom notebook.auth import passwd\npasswd()\n\n```\n\n```\n# 允许通过任意绑定服务器的ip访问\nc.NotebookApp.ip = '*'\n# 用于访问的端口\nc.NotebookApp.port = 8527\n# 不自动打开浏览器\nc.NotebookApp.open_browser = False\n# 设置登录密码\nc.NotebookApp.password = 'sha1:14855cd59712:1cf1063d38e08cd2703a07a52b66714281676b6d'\n# 设置默认目录\nc.NotebookApp.notebook_dir = u'/root/'\nc.NotebookApp.base_url = '/jupyter/'\n\n```\n","slug":"基础知识/backup/nginx/readme","published":1,"updated":"2020-04-10T16:46:16.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8vqtv4v009f74ux60kvfqwx","content":"<p>pip3 install jupyter</p>\n<p> vi /usr/share/vim/vim81/defaults.vim</p>\n<p> jupyter notebook –generate-config</p>\n<p>jupyter contrib nbextension install –user –skip-running-check</p>\n<p>vi /root/.jupyter/jupyter_notebook_config.py</p>\n<p> rm /etc/nginx/sites-enabled/default</p>\n<p>ln -s /root/flask_nginx.conf /etc/nginx/conf.d/</p>\n<p>setsid uwsgi –ini /root/flask_uwsgi.ini &amp;</p>\n<p>nohup jupyter notebook –allow-root  &gt; jupyter.log 2&gt;&amp;1 &amp;</p>\n<p>service nginx restart</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from notebook.auth import passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 允许通过任意绑定服务器的ip访问</span><br><span class=\"line\">c.NotebookApp.ip = &apos;*&apos;</span><br><span class=\"line\"># 用于访问的端口</span><br><span class=\"line\">c.NotebookApp.port = 8527</span><br><span class=\"line\"># 不自动打开浏览器</span><br><span class=\"line\">c.NotebookApp.open_browser = False</span><br><span class=\"line\"># 设置登录密码</span><br><span class=\"line\">c.NotebookApp.password = &apos;sha1:14855cd59712:1cf1063d38e08cd2703a07a52b66714281676b6d&apos;</span><br><span class=\"line\"># 设置默认目录</span><br><span class=\"line\">c.NotebookApp.notebook_dir = u&apos;/root/&apos;</span><br><span class=\"line\">c.NotebookApp.base_url = &apos;/jupyter/&apos;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>pip3 install jupyter</p>\n<p> vi /usr/share/vim/vim81/defaults.vim</p>\n<p> jupyter notebook –generate-config</p>\n<p>jupyter contrib nbextension install –user –skip-running-check</p>\n<p>vi /root/.jupyter/jupyter_notebook_config.py</p>\n<p> rm /etc/nginx/sites-enabled/default</p>\n<p>ln -s /root/flask_nginx.conf /etc/nginx/conf.d/</p>\n<p>setsid uwsgi –ini /root/flask_uwsgi.ini &amp;</p>\n<p>nohup jupyter notebook –allow-root  &gt; jupyter.log 2&gt;&amp;1 &amp;</p>\n<p>service nginx restart</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from notebook.auth import passwd</span><br><span class=\"line\">passwd()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 允许通过任意绑定服务器的ip访问</span><br><span class=\"line\">c.NotebookApp.ip = &apos;*&apos;</span><br><span class=\"line\"># 用于访问的端口</span><br><span class=\"line\">c.NotebookApp.port = 8527</span><br><span class=\"line\"># 不自动打开浏览器</span><br><span class=\"line\">c.NotebookApp.open_browser = False</span><br><span class=\"line\"># 设置登录密码</span><br><span class=\"line\">c.NotebookApp.password = &apos;sha1:14855cd59712:1cf1063d38e08cd2703a07a52b66714281676b6d&apos;</span><br><span class=\"line\"># 设置默认目录</span><br><span class=\"line\">c.NotebookApp.notebook_dir = u&apos;/root/&apos;</span><br><span class=\"line\">c.NotebookApp.base_url = &apos;/jupyter/&apos;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8vqtu5d000974uxn7gg78ru","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu63000e74uxp3jtldkr"},{"post_id":"ck8vqtu4e000574ux32m9cw6v","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu6v000h74uxfo60r1gq"},{"post_id":"ck8vqtu5j000a74uxa0ie0a1t","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu7d000j74uxb5ijswa6"},{"post_id":"ck8vqtu5t000c74uxdyl3dlod","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu7s000l74uxbf535z3d"},{"post_id":"ck8vqtu4l000674ux928zk34z","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu80000n74uxyy8gcx9b"},{"post_id":"ck8vqtu5z000d74uxpw8c1jyt","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu8d000p74uxr1j3yimh"},{"post_id":"ck8vqtu6c000g74uxlxdlddk7","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu8k000s74uxmejii6wl"},{"post_id":"ck8vqtu56000874ux9my1dz7j","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu8p000u74ux4vusgqnb"},{"post_id":"ck8vqtu74000i74uxh3hjyiw5","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu8u000x74ux56izbq9v"},{"post_id":"ck8vqtu7k000k74uxf1iuhc32","category_id":"ck8vqtu4q000774uxrzjfsrfq","_id":"ck8vqtu94000z74uxs69vpe3o"},{"post_id":"ck8vqtu8m000t74ux21ywho5h","category_id":"ck8vqtu8f000q74uxc2dxrvy1","_id":"ck8vqtu9e001274uxess98zpg"},{"post_id":"ck8vqtu7w000m74uxnkbxmpho","category_id":"ck8vqtu8f000q74uxc2dxrvy1","_id":"ck8vqtu9l001474uxz41s92e2"},{"post_id":"ck8vqtu8r000v74uxoj567v8j","category_id":"ck8vqtu8f000q74uxc2dxrvy1","_id":"ck8vqtu9r001774uxujf7tz7s"},{"post_id":"ck8vqtu81000o74uxfgv0xwzx","category_id":"ck8vqtu8f000q74uxc2dxrvy1","_id":"ck8vqtu9v001974uxa1sgheic"},{"post_id":"ck8vqtu8h000r74uxk1czu8y0","category_id":"ck8vqtu8f000q74uxc2dxrvy1","_id":"ck8vqtua0001b74uxpg7d1acr"},{"post_id":"ck8vqtu9t001874ux19esfc5h","category_id":"ck8vqtu9q001674uxja8cai8d","_id":"ck8vqtua9001f74uxuneuy1rq"},{"post_id":"ck8vqtu8z000y74uxlgha71uh","category_id":"ck8vqtu9q001674uxja8cai8d","_id":"ck8vqtuag001i74uxu7i0a6qx"},{"post_id":"ck8vqtu99001074uxok8lz85l","category_id":"ck8vqtu9q001674uxja8cai8d","_id":"ck8vqtuam001l74uxmd6lpote"},{"post_id":"ck8vqtu9i001374ux8h6whcfl","category_id":"ck8vqtu9q001674uxja8cai8d","_id":"ck8vqtub1001p74uxtoxll84v"},{"post_id":"ck8vqtu9n001574uxyz7djgg7","category_id":"ck8vqtu9q001674uxja8cai8d","_id":"ck8vqtubb001s74ux54vheavc"},{"post_id":"ck8vqtu9x001a74ux8rhfkyr9","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtubx001y74ux5qvcbcjo"},{"post_id":"ck8vqtua3001d74ux8dt6jbqb","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtudh002474uxx81n4lid"},{"post_id":"ck8vqtua7001e74uxnp67p2os","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtue7002b74uxlojgkfqc"},{"post_id":"ck8vqtuad001h74uxsrsb154u","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtuei002h74uxemvsevk7"},{"post_id":"ck8vqtuai001j74ux0y0p8vem","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtuet002n74uxfj74cao5"},{"post_id":"ck8vqtuao001m74uxznqjlg5o","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtuf2002r74uxy3sucqxs"},{"post_id":"ck8vqtuat001n74uxe8o59uur","category_id":"ck8vqtub0001o74ux5vt3n96x","_id":"ck8vqtufa002u74uxcxapjwm0"},{"post_id":"ck8vqtub4001q74uxgibguhw6","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtufv002z74uxmktlwgxq"},{"post_id":"ck8vqtub8001r74uxbz6phd0i","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtug5003374ux65j35ddb"},{"post_id":"ck8vqtubk001v74uxpp9n3j0x","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtugf003774ux4j0id1d4"},{"post_id":"ck8vqtubo001w74ux56862pv1","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtugu003b74uxcgsa3r9a"},{"post_id":"ck8vqtuc9001z74uxq83ug9m8","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuh7003f74uxj9bpl6v0"},{"post_id":"ck8vqtud9002274uxjfjm5mpm","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuho003j74ux31r2a3un"},{"post_id":"ck8vqtudn002674uxnc4z3m9l","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuhz003m74uxn0ef8kz9"},{"post_id":"ck8vqtuhu003l74uxtcstxygn","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuid003r74uxmr6ykle4"},{"post_id":"ck8vqtue1002974uxjwllidy9","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuij003u74uxrc5lwwyf"},{"post_id":"ck8vqtui0003n74ux3kicdcli","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuin003w74uxu68pczec"},{"post_id":"ck8vqtue9002d74uxrq5vnpmi","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuix003z74ux9jimkey7"},{"post_id":"ck8vqtuia003q74ux1xsbsed0","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuj1004174uxv46l43et"},{"post_id":"ck8vqtuig003t74uxum5xa6v9","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuj8004474uxsw365w87"},{"post_id":"ck8vqtuee002f74ux0xdfwzst","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtujc004674uxhjdzybyn"},{"post_id":"ck8vqtuil003v74uxk3yvg1az","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuji004974uxod2g8c8o"},{"post_id":"ck8vqtuir003y74uxtyx1amil","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtujn004b74ux67b9zqt9"},{"post_id":"ck8vqtuek002j74ux7kk469d3","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuju004e74uxgx8wff9p"},{"post_id":"ck8vqtuj5004374uxrq5w3vx7","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuk1004g74uxafzalrt6"},{"post_id":"ck8vqtueo002l74uxleq2imij","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuk7004j74ux5arre2be"},{"post_id":"ck8vqtueu002o74ux2dz4ibxz","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtukf004l74uxkxf4q0ha"},{"post_id":"ck8vqtuey002p74uxyvfcc52t","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtukm004o74uxwqgxrhxb"},{"post_id":"ck8vqtuf4002s74uxg0rqvhgn","category_id":"ck8vqtuk2004h74ux3vqw7evx","_id":"ck8vqtukr004r74ux7obmcdpr"},{"post_id":"ck8vqtuf7002t74uxz0wduk1k","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtul0004v74uxkelhosi5"},{"post_id":"ck8vqtufc002w74ux29o3r52l","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuln004z74uxf1dlkudi"},{"post_id":"ck8vqtufi002x74uxqjnql9er","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtum0005374uxteivfn0k"},{"post_id":"ck8vqtufw003074uxrmtm8fup","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuma005774uxns4n7xx7"},{"post_id":"ck8vqtum2005474uxte7gpjk3","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtumj005b74uxp2q6wucq"},{"post_id":"ck8vqtug1003174ux7836rdpu","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtump005e74uxpis8a94v"},{"post_id":"ck8vqtum6005574uxo2p3rqz4","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtumx005i74uxlvaplcxs"},{"post_id":"ck8vqtumc005974uxu5quyy16","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtun3005l74uxc2kiof64"},{"post_id":"ck8vqtug6003474uxqx15w20j","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtun9005p74ux02d9lphc"},{"post_id":"ck8vqtugb003574uxfb9rwxsi","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtunf005t74ux7ni079gt"},{"post_id":"ck8vqtun0005k74uxtmh7npv4","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtunk005w74uxts39w1gg"},{"post_id":"ck8vqtugg003874uxxxpuwrjz","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtunr006074uxrkn80f0b"},{"post_id":"ck8vqtun6005o74uxmoup1m39","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtunw006374ux9mmxkycb"},{"post_id":"ck8vqtund005s74uxwz3lm20x","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuo3006774ux6zf3i93r"},{"post_id":"ck8vqtugl003974uxt5jxy1dm","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuob006a74uxnkc6k761"},{"post_id":"ck8vqtuni005v74uxww53hjvl","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuoh006d74uxllvfn0cs"},{"post_id":"ck8vqtuno005z74uxolrrha1a","category_id":"ck8vqtuf1002q74uxzjqklaxl","_id":"ck8vqtuoi006e74uxon33hgbb"},{"post_id":"ck8vqtugv003c74ux0hw10tb7","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuom006g74uxs7js8jo0"},{"post_id":"ck8vqtuh1003d74uxbrnp5f2t","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuon006h74uxv36s5fkf"},{"post_id":"ck8vqtuh8003g74uxsgmaz031","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuox006j74ux4qi02rfw"},{"post_id":"ck8vqtuhd003h74uxe39n2c7n","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtup3006l74uxzn6karcx"},{"post_id":"ck8vqtuhp003k74uxj5do8sju","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtup4006m74uxnvddlg0a"},{"post_id":"ck8vqtui5003p74uxy8hqm3xw","category_id":"ck8vqtup2006k74uxdolz7idb","_id":"ck8vqtup7006o74uxexu3rab9"},{"post_id":"ck8vqtuiz004074uxt0wqnuln","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtupq006r74ux3u773ep8"},{"post_id":"ck8vqtuja004574uxj7dqr2r9","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtupv006t74ux86myyckg"},{"post_id":"ck8vqtujg004874uxclwwvc0v","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtupy006v74ux27jzamlp"},{"post_id":"ck8vqtujl004a74uxhi5rd54z","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuq0006x74uxiw9wqs25"},{"post_id":"ck8vqtujr004d74uxeh4hdp6s","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuq3006z74uxfvqntsqd"},{"post_id":"ck8vqtujz004f74uxr8yqgoyj","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuq6007174uxx33wasbe"},{"post_id":"ck8vqtuk4004i74ux5mzjuupw","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqa007374uxbzdnvtq6"},{"post_id":"ck8vqtuka004k74uxex8g3f2l","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqd007574uxdfqrmn54"},{"post_id":"ck8vqtukj004n74ux1kukfjhi","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqg007774uxu4vokm56"},{"post_id":"ck8vqtukn004p74uxs5j54qi4","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqj007974uxxsmo8eui"},{"post_id":"ck8vqtuks004s74ux9b91spvi","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqm007b74uxeiwlbxhh"},{"post_id":"ck8vqtukw004t74uxptqrxneo","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtuqx007d74uxtirdbi97"},{"post_id":"ck8vqtul2004w74ux4gvv0ilq","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtur0007f74uxija02ks3"},{"post_id":"ck8vqtul7004x74uxyzcaz94w","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtur3007h74uxxpm77k77"},{"post_id":"ck8vqtulq005074ux3tcrbz7j","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqtur6007j74uxfzvj2m3r"},{"post_id":"ck8vqtulx005174ux7152jek0","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqturg007l74uxyrbvpptt"},{"post_id":"ck8vqtumf005a74ux7a7fp5ie","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqturl007n74uxshfvawnq"},{"post_id":"ck8vqtumm005d74ux9tf0xmo0","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqturp007p74uxqxuodwyb"},{"post_id":"ck8vqtumu005h74uxw45lik5l","category_id":"ck8vqtup5006n74uxrujo2o1j","_id":"ck8vqturu007q74ux7ibnl6sj"},{"post_id":"ck8vqtunt006274uxnxqw51vk","category_id":"ck8vqturo007o74ux045lu1pu","_id":"ck8vqturx007s74uxs7k7x1mp"},{"post_id":"ck8vqtuo1006674uxdzmz54h1","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtus5007v74uxia18qqh3"},{"post_id":"ck8vqtuo8006974uxhlk6528g","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtus8007w74ux0dtnx3qr"},{"post_id":"ck8vqtuod006c74uxnmt64nj9","category_id":"ck8vqtus3007u74uxh3mhueyx","_id":"ck8vqtus9007x74ux0zo29xyf"},{"post_id":"ck8vqtuxq007y74ux23f91164","category_id":"ck8vqtup2006k74uxdolz7idb","_id":"ck8vqtuyv008274uxovdcfbvr"},{"post_id":"ck8vqtuxw007z74uxck89nmo9","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuzc008474uxsvf82ot9"},{"post_id":"ck8vqtuye008074uxy10wd5sx","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtuzt008674ux4xfj0h4q"},{"post_id":"ck8vqtuyr008174ux5rknptr5","category_id":"ck8vqtup2006k74uxdolz7idb","_id":"ck8vqtv07008874uxzhn4jw71"},{"post_id":"ck8vqtuyy008374ux6t36ktvc","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv0c008a74uxpy4tik67"},{"post_id":"ck8vqtuze008574ux5v0k0y9k","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv0n008c74uxqczf2juj"},{"post_id":"ck8vqtuzv008774ux4o6hmqpl","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv0t008e74ux8s1jceq7"},{"post_id":"ck8vqtv09008974uxuh9fqloy","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv0y008g74uxw5r1w28h"},{"post_id":"ck8vqtv0e008b74uxvs6m74v6","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv12008i74uxdx0inf2u"},{"post_id":"ck8vqtv0r008d74uxro5vevoc","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv1a008k74uxym5lsb19"},{"post_id":"ck8vqtv0v008f74uxmqa522cy","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv1j008m74uxuyyzkpsg"},{"post_id":"ck8vqtv10008h74ux2bdamqc8","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv1n008o74uxpin00g2u"},{"post_id":"ck8vqtv15008j74uxawj75bsw","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv1s008q74uxmw2xelyz"},{"post_id":"ck8vqtv1f008l74uxy8aecby1","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv21008s74uxwznhabxr"},{"post_id":"ck8vqtv1l008n74uxjzdhm3er","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv25008u74uxyy104qkg"},{"post_id":"ck8vqtv1p008p74uxrxldi0fh","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv29008w74uxeydg7uxa"},{"post_id":"ck8vqtv1u008r74uxhiefo4op","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv2d008y74ux4ns7elio"},{"post_id":"ck8vqtv23008t74uxcptuxa5a","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv2f008z74uxnu5jzuyy"},{"post_id":"ck8vqtv26008v74uxx9i8a0ad","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv2g009074uxcxoqkgja"},{"post_id":"ck8vqtv2a008x74ux40k1fkgu","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv2h009174uxq1062jm2"},{"post_id":"ck8vqtv3t009274uxfbarve41","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv4b009674ux3e9m8i0b"},{"post_id":"ck8vqtv3v009374uxfey2xxfv","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv4h009874uxw2v7sxwj"},{"post_id":"ck8vqtv3y009474uxigisipsg","category_id":"ck8vqtuk2004h74ux3vqw7evx","_id":"ck8vqtv4m009a74uxokhri0w8"},{"post_id":"ck8vqtv48009574uxndqn6kgy","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv4q009c74uxn8emwxa9"},{"post_id":"ck8vqtv4c009774ux7z5e1slx","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv4u009e74uxturvj3zm"},{"post_id":"ck8vqtv4i009974uxl70joj0v","category_id":"ck8vqtuhh003i74uxdip9jhb1","_id":"ck8vqtv4x009g74uxeuod3upv"},{"post_id":"ck8vqtv4n009b74uxlym89986","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv4z009h74uxw1jegggz"},{"post_id":"ck8vqtv4r009d74uxpf10awri","category_id":"ck8vqturv007r74ux5f652pj2","_id":"ck8vqtv51009k74ux141ktqc3"},{"post_id":"ck8vqtv4v009f74ux60kvfqwx","category_id":"ck8vqtv50009i74ux5l0jy6jd","_id":"ck8vqtv53009l74uxwkakzmrg"}],"PostTag":[{"post_id":"ck8vqtubo001w74ux56862pv1","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtud6002174uxuif49mnb"},{"post_id":"ck8vqtub4001q74uxgibguhw6","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtudi002574uxsw0mr67f"},{"post_id":"ck8vqtuc9001z74uxq83ug9m8","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtudz002874uxai1yrhs9"},{"post_id":"ck8vqtud9002274uxjfjm5mpm","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtue8002c74uxy0g2uj10"},{"post_id":"ck8vqtub8001r74uxbz6phd0i","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtued002e74uxogg29d8d"},{"post_id":"ck8vqtudn002674uxnc4z3m9l","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtuei002i74ux4fhsy1m3"},{"post_id":"ck8vqtubk001v74uxpp9n3j0x","tag_id":"ck8vqtubg001u74uxft7sy8hr","_id":"ck8vqtueo002k74uxykcemx38"},{"post_id":"ck8vqtum2005474uxte7gpjk3","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtumt005g74uxn0macay8"},{"post_id":"ck8vqtum6005574uxo2p3rqz4","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtun5005n74uxmw2or09y"},{"post_id":"ck8vqtun0005k74uxtmh7npv4","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtunc005r74uxjs8uldjn"},{"post_id":"ck8vqtun6005o74uxmoup1m39","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtunh005u74ux1syduw20"},{"post_id":"ck8vqtumc005974uxu5quyy16","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtunn005y74uxx271t0ld"},{"post_id":"ck8vqtund005s74uxwz3lm20x","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtuns006174ux4zxy01wv"},{"post_id":"ck8vqtuni005v74uxww53hjvl","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtuo0006574uxa9ejk8i7"},{"post_id":"ck8vqtuno005z74uxolrrha1a","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtuo7006874ux2wi6ekt9"},{"post_id":"ck8vqtv4v009f74ux60kvfqwx","tag_id":"ck8vqtumb005874ux58bkmirz","_id":"ck8vqtv51009j74uxzz3480nj"}],"Tag":[{"name":"mongodb","_id":"ck8vqtubg001u74uxft7sy8hr"},{"name":"redis","_id":"ck8vqtumb005874ux58bkmirz"}]}}