{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon-16x16.ico","path":"images/favicon-16x16.ico","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32.ico","path":"images/favicon-32x32.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1585733023713},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1585733023713},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1585733023713},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1585733023713},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1585733023713},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1585733023713},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1585733023713},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1585733023713},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1585733023713},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1585733023713},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1585733023714},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1585733023714},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1585733023714},{"_id":"themes/next/_config.yml","hash":"b47b991d40751617c620e2612f83426d71c73490","modified":1585733023714},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1585733023714},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1585733023717},{"_id":"source/book/index.md","hash":"9b0fda66808004070b68ac53b41dd982305b6ec1","modified":1585733023688},{"_id":"source/resume/index.md","hash":"eafc0d9f72c10661fc75d82410f9d3b47f9b4d6e","modified":1585925490465},{"_id":"source/categories/index.md","hash":"81cc357d0d6e9c7351cb7ea3b2d234acadf832b7","modified":1585733023688},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1585733023714},{"_id":"source/about/index.md","hash":"77076b6549af9f5973a7ddb41eb02899fe2785c4","modified":1585733023688},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1585733023714},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1585733023714},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1585733023714},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1585733023714},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1585733023714},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1585733023714},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1585733023714},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1585733023714},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1585733023714},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1585733023717},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1585733023718},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1585733023714},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1585733023714},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1585733023714},{"_id":"source/images/favicon-16x16.ico","hash":"638e9ee22ee977936601c25529da9d30f90c0388","modified":1585733023689},{"_id":"source/images/favicon-32x32.ico","hash":"6bae232f1350b305bffb19b03efa73b8d1979d96","modified":1585733023689},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1585733023713},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5c844bd769bafd5b2ddc2914003c07c2086c33ca","modified":1585733023714},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1585733023713},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1585733023713},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1585733023713},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1585733023715},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1585733023715},{"_id":"themes/next/layout/_layout.swig","hash":"d92479961e952e84215a6503e4576110942d00e9","modified":1585733023715},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1585733023717},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1585733023717},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1585733023717},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1585733023717},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1585733023717},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1585733023717},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1585733023717},{"_id":"source/_posts/flask框架学习/flask高级编程_鱼书项目_填坑记.md","hash":"45f27b9090c71717505ee02ee356eff3359c5bb1","modified":1585733023683},{"_id":"source/_posts/flask框架学习/flask初识.md","hash":"b3e7c76f1213689fe1babbe7ffb29ffc4e5cefbc","modified":1585733023683},{"_id":"source/_posts/flask框架学习/初识鱼书项目.md","hash":"b4d0dd24dd3bbfebff77620666064e206ac68147","modified":1585733023683},{"_id":"source/_posts/flask框架学习/windows下mysql的安装.md","hash":"991f13e5aa476b6f2f930f2d5feb7dccdb06603c","modified":1585733023683},{"_id":"source/_posts/java/readme.md","hash":"0a970c63e4b6a9fc62b2b9b49b69b0b2781922c8","modified":1585733023684},{"_id":"source/_posts/java/java基础语法.md","hash":"478dd28a46815fce16e234b8264df6f5dd2f547c","modified":1585733023684},{"_id":"source/_posts/java/修饰符.md","hash":"3ee24b9905eac974e076465a22fc4160fb97c98a","modified":1585733023684},{"_id":"source/_posts/java/变量类型.md","hash":"3f0f01d60bd58092ddd07d511899a4f720f13422","modified":1585733023684},{"_id":"source/_posts/java/基本数据类型.md","hash":"9955ef9c5ff48634bb94ae3f979632e044a44625","modified":1585733023684},{"_id":"source/_posts/java/分支结构.md","hash":"edca979fce38be193827de5997a406e2adbe02bf","modified":1585733023684},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1585733023743},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1585733023743},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1585733023743},{"_id":"source/_posts/java/运算符.md","hash":"413adf1cebdd21924a233301fd48287d1c1b8278","modified":1585733023684},{"_id":"source/_posts/python操作数据库/python操作mysql(ORM).md","hash":"14797569a391b9caf2cda5f281f66e4e5d754720","modified":1585733023686},{"_id":"source/_posts/python操作数据库/mysql基础(1).md","hash":"275c79f4e39b86b97f9861e3901b22166e3fecaa","modified":1585733023686},{"_id":"source/_posts/python操作数据库/mysql基础(2).md","hash":"d532924573d2b914b7e3b352c1c0ce9b09c5bcf4","modified":1585733023686},{"_id":"source/_posts/python操作数据库/mysql基础(3).md","hash":"b80a190e374c79ff9ff7dbee70e091d97b32a5ca","modified":1585733023686},{"_id":"source/_posts/python操作数据库/数据库.md","hash":"84fcfc2cdb65b8f15a95985f03bb9947f8d62f04","modified":1585733023686},{"_id":"source/_posts/docker/readme.md","hash":"939ae031edac27a7968e5d20308bcd3fef6c8554","modified":1585733023682},{"_id":"source/_posts/python操作数据库/使用MySQL.md","hash":"79f69945c94105959caa84870b5fbe43e497d3bd","modified":1585733023686},{"_id":"source/_posts/python操作数据库/python操作mysql(增删改查).md","hash":"7a76f51e7a1c42269014a20a1b54563327977409","modified":1585733023686},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-1--起步与红图.md","hash":"6a310a6c2903bc9e357e9b607c30ede3ac311c8d","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-2--REST基本特征.md","hash":"902d4773ae8719bbf6438bdc84484e4aa4fcad3f","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-3--自定义异常对象.md","hash":"774010dc678edaaa1e7dfc7bd56e0a0e84f22188","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她.md","hash":"c8474774fa9d6b2cd31cca70ce726c300d2c532b","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户.md","hash":"3668881ffcbea8d2758ffbc3016df29b64340e8d","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-6--模型对象的序列化.md","hash":"2522a9d3b6fd013f533a0e39a0b313a88f162523","modified":1585733023682},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-7--权限控制.md","hash":"41f8f4aa3172b9f5c906b105f69c4cf551fedbf1","modified":1585733023683},{"_id":"source/_posts/flask-api/Flask构建可扩展的RESTful-API-8--补充完善.md","hash":"6d0956e29ff5cbdf259ea8f22285135c6b17f0a3","modified":1585733023683},{"_id":"source/_posts/work/自动部署.md","hash":"9ff461106f50e6e028834be7c6ca162d42957a83","modified":1585733023687},{"_id":"source/_posts/flask-api/图片.md","hash":"4f4b4c8a6875fed8b688401beab8e853fbc57261","modified":1585733023683},{"_id":"source/_posts/随笔/2017-2018 总结(初版).md","hash":"c9e90aab7b0bdeccb8a7ec30e414562c4931fb77","modified":1585733023688},{"_id":"source/_posts/golang/package与import.md","hash":"5a99b68c6bcce2ee51093f0887cceb2fdb21bd34","modified":1585733023684},{"_id":"source/_posts/golang/基础语法.md","hash":"b9cbdebd7605f2f69feea4218a931c2d0863728c","modified":1585733023684},{"_id":"source/_posts/golang/readme.md","hash":"b3665fa245e01fa81fb531b5fd1933df8fe693c9","modified":1585733023684},{"_id":"source/_posts/golang/指针.md","hash":"d6eaf778be2c377f981b4d7b0541f4bf80ab2554","modified":1585733023684},{"_id":"source/_posts/golang/规范.md","hash":"e0e1b3aa85ae3154fb292e23f240d1dace7f62dc","modified":1585733023684},{"_id":"source/_posts/vps/GitHub+Hexo搭建个人网站.md","hash":"f0e0e36f53ffb82f5dbb9347639a6ed0b3f8cadb","modified":1585733023687},{"_id":"source/_posts/vps/VPS搭建SSR过程.md","hash":"a19ac97715876f0f0c37f379c60ab2953a858dca","modified":1585733023687},{"_id":"source/_posts/git/git中分支管理-创建合并.md","hash":"1eaf314e41f8a3756c5ff741156eb03c4da2b0fe","modified":1585733023683},{"_id":"source/_posts/git/git之自定义.md","hash":"1f948c513bc5a1c6359c3f3bdae87ef89ed0abce","modified":1585733023683},{"_id":"source/_posts/git/git之使用github.md","hash":"32e0c1470dbce1a96a13b53ed3a3762daa6b159c","modified":1585733023683},{"_id":"source/_posts/git/git中的工作区与暂存区.md","hash":"8011a50cf87bcb6794edbc00ce32bab979259c3d","modified":1585733023683},{"_id":"source/_posts/git/git分支管理-Bug分支.md","hash":"e88a8d1c7dbb36448d6e30002c353ba1797a3be8","modified":1585733023683},{"_id":"source/_posts/git/git分支管理-feature分支.md","hash":"a0889f04bf81cf8d8b288c5f9b45b2657f8c30ff","modified":1585733023683},{"_id":"source/_posts/git/git分支管理-rebase.md","hash":"654927be536c5eb358a0230dde1d0a6980b5002d","modified":1585733023683},{"_id":"source/_posts/git/git分支管理-分支管理政策.md","hash":"9d128daaab0b37d4a8002fd4d4457e5cd11e0c5a","modified":1585733023683},{"_id":"source/_posts/git/git初识.md","hash":"4d3312d68b7ae8525e9b45b55e02fccd8995c8d9","modified":1585733023684},{"_id":"source/_posts/git/git标签管理.md","hash":"6bdcaab0d46ce519728863bd611017ee61a28a1e","modified":1585733023684},{"_id":"source/_posts/git/git分支管理-多人协作.md","hash":"5c26ef7f591955b4df1556165839aacba9b7fc78","modified":1585733023683},{"_id":"source/_posts/git/git分支管理-解决冲突.md","hash":"d60c2da6bd57b4b9a3582736acf9718f60db29cb","modified":1585733023683},{"_id":"source/_posts/git/git远程仓库.md","hash":"1ac255d1e6d5c4c5fce05f4e4cd09951643c7c6b","modified":1585733023684},{"_id":"source/_posts/linux学习/HTTP的基本原理.md","hash":"9ea58866b80ac8892e8e46c8954b3caf38cbc1ae","modified":1585733023684},{"_id":"source/_posts/linux学习/ip地址.md","hash":"dcbe767e1bd07b7c4aae89ad8172a97755a061d2","modified":1585733023684},{"_id":"source/_posts/linux学习/linux使用者管理.md","hash":"c40158a84d31d4c531a97ad42ab993c4c8dfe959","modified":1585733023684},{"_id":"source/_posts/linux学习/linux基础思维导图.md","hash":"a1574c49c080d78e140d965783c55bb7cc10de3a","modified":1585733023684},{"_id":"source/_posts/linux学习/readme.md","hash":"25becfccf569b3b61309be623946cbb8f4953883","modified":1585733023684},{"_id":"source/_posts/linux学习/个人计算机.md","hash":"f180ea2ce304f011a487f10297b146588091319f","modified":1585733023684},{"_id":"source/_posts/linux学习/关于vi.md","hash":"f72d4d4a59d05d159a4e02a02f00926b7fb0c269","modified":1585733023684},{"_id":"source/_posts/linux学习/安装Chrome浏览器和ChromeDriver.md","hash":"1d11a5a6ebf07231df68fa416d56c6750046ebdb","modified":1585733023684},{"_id":"source/_posts/linux学习/日志文件.md","hash":"7f04a1f74cdf6f56cdc1408cf2bec13dfe6e304f","modified":1585733023684},{"_id":"source/_posts/linux学习/权限，目录.md","hash":"e9a0a601256b18ae3c5016c7ebf38d019819c372","modified":1585733023684},{"_id":"source/_posts/linux学习/文件，目录.md","hash":"aad23672fdeae45fdfb238ec729605d4f6e9c146","modified":1585733023684},{"_id":"source/_posts/linux学习/计算机概论.md","hash":"5ea82453ff038c517fd1742423d8003930dba9e2","modified":1585733023684},{"_id":"source/_posts/linux学习/计算机组成原理.md","hash":"5cfbc2a1d10edb4ab65acc115cf7d9adbfbf5ff1","modified":1585733023685},{"_id":"source/_posts/python基础/python.md","hash":"796900776a4c841a8dbf041acabab06a5b9f0098","modified":1585733023685},{"_id":"source/_posts/linux学习/部分.md","hash":"fab4fb014efc6fbffa469293fdf8407c67165537","modified":1585733023685},{"_id":"source/_posts/linux学习/进程与线程.md","hash":"dc67990c42fa408f837866587743623e631135bd","modified":1585733023685},{"_id":"source/_posts/python基础/python中变量与运算符.md","hash":"2ef352384529ae3b1302ba052c46fa54a9d9abc8","modified":1585733023685},{"_id":"source/_posts/python基础/python中流程控制语句.md","hash":"7719b4040666982dbd325cc69f7617fa343bca59","modified":1585733023685},{"_id":"source/_posts/python基础/python中用字典代替switch.md","hash":"19fe3f7ded2d5a9ad81d09bde480dbdee5737d31","modified":1585733023685},{"_id":"source/_posts/python基础/python中的None.md","hash":"c1fcda7418c12825c03c74e0a5a2f71bf8528ccd","modified":1585733023685},{"_id":"source/_posts/python基础/python中的枚举.md","hash":"546c425c043150786c1130547cc6d54a95f8a3ec","modified":1585733023685},{"_id":"source/_posts/python基础/python中的装饰器.md","hash":"0dd340a8c6f9bb929c8044b5eaacc2c60fc6c8cf","modified":1585733023685},{"_id":"source/_posts/python基础/python中的列表推导式.md","hash":"d3f2e16b651323c3928c6fe051c3511f6f9b1288","modified":1585733023685},{"_id":"source/_posts/python基础/python中面向对象.md","hash":"75f0dea4819665198b1cce88ec5d79c26283d93d","modified":1585733023685},{"_id":"source/_posts/python基础/python之闭包.md","hash":"b385b1db7ef870207f177541fd459bc739730295","modified":1585733023685},{"_id":"source/_posts/python基础/python之初识JSON.md","hash":"b0d535b133efc93f3b9fecd77e455ed11f770d26","modified":1585733023685},{"_id":"source/_posts/python基础/python之函数式编程.md","hash":"a93961ad77170ad021d3b911f654812b49636c67","modified":1585733023685},{"_id":"source/_posts/python基础/python异常.md","hash":"9d46aed3da35fd9dbab36b525a1a34bb475d5419","modified":1585733023685},{"_id":"source/_posts/python基础/python基本数据类型总结.md","hash":"21c7e70eedc6d836b5ed550fdc7d54ef83b86feb","modified":1585733023685},{"_id":"source/_posts/python基础/python文件操作.md","hash":"2d3f3a8b189a349267221c6125ab91c804e70e20","modified":1585733023685},{"_id":"source/_posts/python基础/python正则表达式的学习过程.md","hash":"8095d8010b29d2b75b59c77b273e73acc9789dc4","modified":1585733023686},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023729},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1585733023718},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1585733023718},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1585733023718},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1585733023718},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1585733023718},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1585733023718},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1585733023718},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1585733023718},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1585733023718},{"_id":"source/_posts/python基础/python项目的组织结构.md","hash":"68f634177022dc54b71aa81aec68dc086b61c4a3","modified":1585733023686},{"_id":"source/_posts/python基础/python补充.md","hash":"5ba37afc5d7bf544fb6b3230b3a76cc1a6d602a1","modified":1585733023686},{"_id":"source/_posts/python基础/python网络编程.md","hash":"458423880e4c530b09441cb8c9fdefeafbeefa3a","modified":1585733023686},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1585733023715},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1585733023715},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1585733023715},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1585733023715},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1585733023715},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1585733023715},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1585733023715},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1585733023715},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1585733023715},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1585733023715},{"_id":"themes/next/layout/_partials/footer.swig","hash":"656f6afc8fbd786c2699fb9ad7aa134de8ea2493","modified":1585733023715},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1585733023715},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1585733023715},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1585733023715},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1585733023715},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1585733023715},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1585733023716},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1585733023716},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1585733023716},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1585733023717},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1585733023717},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1585733023717},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1585733023717},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1585733023717},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1585733023717},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1585733023717},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1585733023729},{"_id":"source/_posts/python练习/HTTP的基本原理.md","hash":"b8868806f6b43f23f8ca1cf85128a443a40223f3","modified":1585733023686},{"_id":"source/_posts/python练习/PandaTV爬取主播人气并排序.md","hash":"0e6a025933d2b1abbcb321b61d9897b35e1c5ce1","modified":1585733023686},{"_id":"source/_posts/python练习/is_json.md","hash":"b2b4e8bfd74b1bf93c356fc414af036b02277510","modified":1585733023686},{"_id":"source/_posts/python练习/pathlib有关文件路径.md","hash":"b771c80a1ec674300ce0024b7a5f848bed1c3846","modified":1585733023686},{"_id":"source/_posts/python练习/psutil获取系统运行的进程和系统利用率.md","hash":"60134935db6f57f524a2476ec6d0eb399ca35795","modified":1585733023686},{"_id":"source/_posts/python练习/python一些规则.md","hash":"d16ee06d40ef1cff2843d06b46aa1fe7d49cb6ff","modified":1585733023686},{"_id":"source/_posts/python练习/python拾遗_函数.md","hash":"9776e88dfd0515673680d0b1959eb4180b9f32c7","modified":1585733023686},{"_id":"source/_posts/python练习/python日志模块.md","hash":"dbff5f833c0e3e69a351594b9d8a7bb945a2b241","modified":1585733023686},{"_id":"source/_posts/python练习/关于import路径.md","hash":"94bb1ea580b3b9e24f7abc8937d29a7d6039b3be","modified":1585733023686},{"_id":"source/_posts/python练习/优雅的python写法.md","hash":"00ae4f41b2f047577bcda77a032dcf03c9d27cd8","modified":1585733023686},{"_id":"source/_posts/python练习/python里的特殊方法.md","hash":"1a20874460df960f6dc8fc9df5d5ca12a1fb204c","modified":1585733023686},{"_id":"source/_posts/python练习/python的一些函数.md","hash":"fbba205665d541aeab1092a884c80e3b82b3da48","modified":1585733023686},{"_id":"source/_posts/python练习/多线程.md","hash":"774a0578a514fb48465fdbefda83d4aff80820b1","modified":1585733023686},{"_id":"source/_posts/python练习/慕课网数据采集总结.md","hash":"9670768a22853409395bcc90ba0a14c03a7caeb2","modified":1585733023687},{"_id":"source/_posts/python练习/多线程的鸡肋.md","hash":"59c3fa7cbc55fccba93891051727811387e147e8","modified":1585733023687},{"_id":"source/_posts/python练习/多进程.md","hash":"93a11c89b8ef1121760a59d9fca224802d2a144a","modified":1585733023687},{"_id":"source/_posts/python练习/爬取百度百科词条写入数据库.md","hash":"d6a028babc2654fa6e815186d0caf37ca2135eb2","modified":1585733023687},{"_id":"source/_posts/python练习/爬虫整理-(五)--slenium.md","hash":"929ae9c4b1c377049e11b58fd1c74d94b81e02db","modified":1585733023687},{"_id":"source/_posts/python练习/爬虫整理-(四)-多进程分布式与异步.md","hash":"6b401d553cb3e83290e7d05076312802b926fc9b","modified":1585733023687},{"_id":"source/_posts/python练习/爬虫整理（一）使用re和urllib.md","hash":"0d9abc29c2432ad2018e3b60c7fc5df103956aa0","modified":1585733023687},{"_id":"source/_posts/python练习/网络请求.md","hash":"0e03fd8eb3a35125cb150efe0974935205df2d38","modified":1585733023687},{"_id":"source/_posts/python练习/给博客加日期.md","hash":"bb3ed187be2a64a9571213b30abbc8727bf8798e","modified":1585733023687},{"_id":"source/_posts/python练习/爬虫整理（二）BeautifulSoup.md","hash":"97aee14a3b2fa2c93291c59173eccd72294281a5","modified":1585733023687},{"_id":"source/_posts/python练习/爬虫整理（三）Requests.md","hash":"d67c9d17af3039a89003820f9517e99f471a3168","modified":1585733023687},{"_id":"source/_posts/python练习/读取TXT_PDF.md","hash":"226642f14d742658d879611b32f470a4fd332bad","modified":1585733023687},{"_id":"source/_posts/python练习/迭代对象，迭代器，生成器.md","hash":"c5a6e2c82cf20392fcf14d05ac43c2fcf3adcabe","modified":1585733023687},{"_id":"source/_posts/python练习/装饰器.md","hash":"81717c78a431265c585b50ac5e057f82350f5879","modified":1585733023687},{"_id":"source/_posts/python练习/面向对象.md","hash":"9c24fae2d016e13b5f80557a630ab6abe56af5d7","modified":1585733023687},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585733023729},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585733023729},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1585733023729},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585733023729},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585733023729},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585733023729},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585733023729},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585733023729},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585733023729},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585733023729},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585733023729},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585733023729},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585733023730},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585733023730},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1585733023730},{"_id":"source/_posts/数据库/mongodb/mongodb常用命令.md","hash":"7fb5c3a5dde837e1fe4d12735fb92312c3e03d6d","modified":1585733023688},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585733023729},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585733023729},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585733023729},{"_id":"source/_posts/数据库/mongodb/odm.md","hash":"451ad1115ffebb40c3ae794c0fd920fdc4327dd0","modified":1585733023688},{"_id":"source/_posts/数据库/mongodb/入门.md","hash":"c8c90c8036819abbf61edb1109339b7e4d03b1b8","modified":1585733023688},{"_id":"source/_posts/数据库/mongodb/test_odm.md","hash":"13e36d2adaf45066c07b38ab5638ab708c7a75c4","modified":1585733023688},{"_id":"source/_posts/数据库/mongodb/python操作MongoDB.md","hash":"0cece94ab406d991eaa7a0c8b38fd1c5cd5c4636","modified":1585733023688},{"_id":"source/_posts/数据库/mongodb/入门补充.md","hash":"dd8d68138cfdec443c253586b73f14ce1243170a","modified":1585733023688},{"_id":"source/_posts/数据库/redis/python操作redis.md","hash":"b896eb9e491698a22b1b902543f30cd226469329","modified":1585733023688},{"_id":"source/_posts/数据库/redis/docker安装redis.md","hash":"6043df22b6acff54c289f49315e8f8b3bfac1c6a","modified":1585733023688},{"_id":"source/_posts/数据库/redis/命令.md","hash":"d60d32fec154c66a55f8705e20cf89fd73365deb","modified":1585733023688},{"_id":"source/_posts/数据库/mongodb/入门补充生成数据.md","hash":"55eb616a5a8f4cf0c3d0bd4c6a061932011d45e5","modified":1585733023688},{"_id":"source/_posts/数据库/redis/数据类型.md","hash":"b05d040716bb0c38f54a8fa2f7ae951fc6645dfb","modified":1585733023688},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023716},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023716},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023728},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023728},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023728},{"_id":"source/_posts/数据库/redis/简介与安装.md","hash":"65b42295c55a0ad326dc2daec54a917d466e90c4","modified":1585733023688},{"_id":"source/_posts/数据库/redis/安全性能测试客户端连接管道技术.md","hash":"6b0843b67ce79a29d8e7d11c143cce2fa2883fe4","modified":1585733023688},{"_id":"source/_posts/数据库/redis/数据备份与恢复.md","hash":"d4142a5353627dfcaaaa3ed17984dd331d53751d","modified":1585733023688},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023729},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1585733023729},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1585733023715},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1585733023715},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585733023715},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"7ec024acb9546c814925e7221ca759b46f0764f3","modified":1585733023715},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1585733023715},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1585733023715},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1585733023715},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1585733023716},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1585733023716},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1585733023716},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1585733023716},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1585733023716},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1585733023716},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1585733023716},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1585733023717},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1585733023717},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1585733023717},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1585733023717},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1585733023717},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1585733023717},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1585733023717},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1585733023716},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"546b1cbc1c19e3e9dd14e8a2c5dc8a73904e0f72","modified":1585733023728},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1585733023728},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1585733023728},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1585733023728},{"_id":"source/_posts/python练习/面向对象/@staticmethod和@classmethod.md","hash":"2ed9f126cb847aa5ed4a489eff7d282376fe60e6","modified":1585733023687},{"_id":"source/_posts/python练习/面向对象/上下文管理器.md","hash":"527415b7c22b5c8b26ee88c624508ec29eb9823c","modified":1585733023687},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1585733023716},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1585733023716},{"_id":"source/_posts/python练习/面向对象/调用父类方法.md","hash":"7b9d01f46c7824c1ab132fad172c70644c04a61d","modified":1585733023687},{"_id":"source/_posts/python练习/面向对象/面向对象.md","hash":"4b284786e909bb4b656afec0a152693b950e4d60","modified":1585733023687},{"_id":"source/_posts/python练习/面向对象/格式化字符串.md","hash":"27beb475cbc13a0a181e468d93da130df3251035","modified":1585733023687},{"_id":"source/_posts/python练习/面向对象/有关于@property.md","hash":"fd1d0a57fe2b473fd975a313da478d35f64f6006","modified":1585733023687},{"_id":"source/images/avatar.png","hash":"29b32d32f833aa01a600f6e794613153d31058cf","modified":1585733023689},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1585733023729},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1585733023729},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1585733023729},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1585733023729},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1585733023730},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1585733023730},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1585733023730},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1585733023730},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1585733023730},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1585733023730},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1585733023730},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1585733023730},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1585733023731},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1585733023730},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1585733023730},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1585733023730},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1585733023733},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1585733023735},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1585733023738},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1585733023738},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1585733023738},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1585733023738},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1585733023738},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1585733023738},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1585733023738},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1585733023739},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1585733023739},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1585733023739},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1585733023740},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1585733023742},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1585733023740},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1585733023740},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585733023743},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1585733023743},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1585733023742},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585733023743},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1585733023733},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1585733023734},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1585733023734},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1585733023739},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1585733023734},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1585733023734},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1585733023739},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1585733023738},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1585733023739},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1585733023739},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1585733023717},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1585733023717},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1585733023719},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1585733023728},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1585733023719},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1585733023728},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1585733023728},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1585733023728},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1585733023728},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1585733023728},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"aa15f47d9682800b4d8d0588823bb023554a4fa2","modified":1585733023728},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1585733023730},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1585733023729},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1585733023729},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1585733023731},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1585733023731},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1585733023734},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585733023735},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585733023735},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1585733023734},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1585733023742},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1585733023742},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1585733023734},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1585733023734},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1585733023731},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1585733023731},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1585733023734},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585733023737},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1585733023743},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585733023738},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1585733023718},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1585733023727},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1585733023727},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1585733023728},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1585733023728},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1585733023730},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1585733023730},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1585733023731},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1585733023731},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1585733023730},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1585733023733},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585733023737},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585733023734},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1585733023733},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1585733023734},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1585733023719},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1585733023735},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1585733023719},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1585733023719},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1585733023737},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1585733023733},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1585733023742},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1585733023737},{"_id":"public/search.xml","hash":"6fa27914a6a8fc3403faa4665a9858735c89e613","modified":1585925565498},{"_id":"public/book/index.html","hash":"512c386556a80fb1c59d9a9794d0a2e61d256660","modified":1585925572278},{"_id":"public/resume/index.html","hash":"99be839085fbf8e2aaaf63c14f362a2628e5581b","modified":1585925572279},{"_id":"public/categories/index.html","hash":"2ae131355e83857bd6b3dead8246f161900b6b19","modified":1585925572356},{"_id":"public/about/index.html","hash":"d07738a92c849a3b6551047510753b3b1e8ac332","modified":1585925572356},{"_id":"public/python练习/面向对象/有关于@property/index.html","hash":"230b57502556dff52475941330c2cc978d7d15a3","modified":1585925572356},{"_id":"public/python练习/面向对象/上下文管理器/index.html","hash":"b1a0f1701e9abb9aaadff35f14b11d39a1068b7e","modified":1585925572356},{"_id":"public/python练习/面向对象/面向对象/index.html","hash":"926a634085ea8814b5457224201c6fc82f8a49de","modified":1585925572356},{"_id":"public/python练习/多进程/index.html","hash":"8c542ce877b6d37fb6b3ff7200fc993a341d613e","modified":1585925572356},{"_id":"public/python练习/面向对象/调用父类方法/index.html","hash":"a192a9da0e20d15d6d5f629193a949d1d731a4d6","modified":1585925572356},{"_id":"public/python练习/面向对象/格式化字符串/index.html","hash":"123fe6b451096c743831ef9cffb7710c34417e0b","modified":1585925572356},{"_id":"public/python练习/多线程/index.html","hash":"e42e6d5cfabbd246cdb74a7a2e91b4da3c9f5b21","modified":1585925572356},{"_id":"public/python练习/面向对象/@staticmethod和@classmethod/index.html","hash":"6fce72db39b39b4ef86f46d9bbc489eec40f038c","modified":1585925572357},{"_id":"public/python练习/is_json/index.html","hash":"4ec7ea4ffd8fa92e1d8691754650c7d9541d9650","modified":1585925572357},{"_id":"public/python练习/python里的特殊方法/index.html","hash":"8adcc20613508f05865253d05d7b45661645265e","modified":1585925572357},{"_id":"public/python练习/python的一些函数/index.html","hash":"9ffa39a2e1385c7af7ca3abfdff0d8f435e96c9f","modified":1585925572357},{"_id":"public/python练习/装饰器/index.html","hash":"b2be245095e1bef506f9ece1d035956168852848","modified":1585925572357},{"_id":"public/python练习/python拾遗_函数/index.html","hash":"2ea8bd0c9450caf706b349cf825bb23d71a006bc","modified":1585925572357},{"_id":"public/java/readme/index.html","hash":"ef3a7ce9f0e76fb23033c9bace386105da8b30cd","modified":1585925572357},{"_id":"public/java/java基础语法/index.html","hash":"ee85f3cb103253b44358d36a94268f31673f6fbf","modified":1585925572357},{"_id":"public/java/修饰符/index.html","hash":"69ab56ddb4fb6ed6461ececdda3c8b3d0da36457","modified":1585925572357},{"_id":"public/java/变量类型/index.html","hash":"5b1f9dbca445d6b736c30eab1502c24063744da1","modified":1585925572357},{"_id":"public/java/基本数据类型/index.html","hash":"17b2b14544770f82d8ff79d0b5ea30697491e463","modified":1585925572357},{"_id":"public/java/分支结构/index.html","hash":"90dbca3b2a232aa2bab43be5014c6ecdd9bb04a3","modified":1585925572357},{"_id":"public/java/运算符/index.html","hash":"937adba8b6f971d3f4a42fee72649a6b16ca8e31","modified":1585925572357},{"_id":"public/linux学习/安装Chrome浏览器和ChromeDriver/index.html","hash":"49c048f7d1e7971fd07f35c551980eb2d7a2adc3","modified":1585925572357},{"_id":"public/golang/package与import/index.html","hash":"6e208a6a359b7f449fd74c03a22ba0c10839e4fa","modified":1585925572357},{"_id":"public/golang/基础语法/index.html","hash":"8009e42a36c85a097b3b5000056db884fc0676d5","modified":1585925572357},{"_id":"public/golang/readme/index.html","hash":"036cbc46c428fd23f2e5db7e32c614bd506d3cc4","modified":1585925572358},{"_id":"public/golang/指针/index.html","hash":"7b3d2aa7bae530c2b652c35eb128f322e52f88dd","modified":1585925572358},{"_id":"public/golang/规范/index.html","hash":"a22606f0f47f4ec600acdb24c131636359b5cc74","modified":1585925572358},{"_id":"public/docker/readme/index.html","hash":"6273c8d500eecc32d2d2661151037d4d0a2b29ab","modified":1585925572358},{"_id":"public/数据库/redis/python操作redis/index.html","hash":"73cc3334b9c302057bad273a4852d15828798920","modified":1585925572358},{"_id":"public/数据库/redis/docker安装redis/index.html","hash":"6a9139601d56ce33b8f495afb8be0da6f732503e","modified":1585925572358},{"_id":"public/数据库/redis/命令/index.html","hash":"bf84fbf4a6444eae58db6478e14e66e9eeede118","modified":1585925572358},{"_id":"public/数据库/redis/数据类型/index.html","hash":"c4f24183d636f6abdfc23de00f80cc85ef066a6c","modified":1585925572358},{"_id":"public/数据库/redis/简介与安装/index.html","hash":"746fdebd62259e3e732095e674163cef5619adad","modified":1585925572358},{"_id":"public/数据库/redis/安全性能测试客户端连接管道技术/index.html","hash":"19762e86f1488299cc70949957afb71946bcb524","modified":1585925572358},{"_id":"public/数据库/redis/数据备份与恢复/index.html","hash":"0d8064dd5eefd67c38210829eaf4711d26ac9ac3","modified":1585925572358},{"_id":"public/数据库/mongodb/mongodb常用命令/index.html","hash":"20336525cf16c6f6fb843e4a9690bffbfcbf2187","modified":1585925572358},{"_id":"public/数据库/mongodb/odm/index.html","hash":"8204c805bb9ec16643a13d4c88eb0e0e4cf768e5","modified":1585925572358},{"_id":"public/数据库/mongodb/入门/index.html","hash":"81b4a4e2b927199ce3eb3721aac7aca45727fe45","modified":1585925572358},{"_id":"public/数据库/mongodb/test_odm/index.html","hash":"d4887e4c5d9ec78bf6683f5db89a0146abb404b9","modified":1585925572358},{"_id":"public/数据库/mongodb/python操作MongoDB/index.html","hash":"9c1675795e04b39f5c99086e046afcb1824b2e23","modified":1585925572358},{"_id":"public/数据库/mongodb/入门补充/index.html","hash":"88d074b78524325ede7a48aa4ebec6bef41163a7","modified":1585925572358},{"_id":"public/数据库/mongodb/入门补充生成数据/index.html","hash":"c7245e45460e862f087d108f882b16cade240177","modified":1585925572358},{"_id":"public/linux学习/计算机组成原理/index.html","hash":"d2349f978127735a45ca35ce52485e269e055e77","modified":1585925572359},{"_id":"public/python练习/面向对象/index.html","hash":"1f39f9cd113fd476557e606b800e8aa61ce9ea27","modified":1585925572359},{"_id":"public/python练习/迭代对象，迭代器，生成器/index.html","hash":"87d49bf7c9322699d3b38c9138f1fc59fb5d8573","modified":1585925572359},{"_id":"public/python练习/网络请求/index.html","hash":"cf62d7757894c4b727e0ef252c526f20e8c36e2b","modified":1585925572359},{"_id":"public/python练习/多线程的鸡肋/index.html","hash":"c32d9623cb1febe668739290c6ed82dfe0f1be3f","modified":1585925572359},{"_id":"public/python练习/优雅的python写法/index.html","hash":"4ab4a091f303c13bc3d1b02e7b24e1f49009721e","modified":1585925572359},{"_id":"public/python练习/python日志模块/index.html","hash":"8fa1a597107caf0d46c62055ecfe96cff90c004d","modified":1585925572359},{"_id":"public/python练习/psutil获取系统运行的进程和系统利用率/index.html","hash":"ce63008729f13534acf6f3c5f7372383b4e452ef","modified":1585925572359},{"_id":"public/python练习/python一些规则/index.html","hash":"456dcec84b2acf68792abcb611a85a6438fc5b2b","modified":1585925572359},{"_id":"public/python练习/pathlib有关文件路径/index.html","hash":"4f599564f0946a5af9f0a8e97b573e100bd08622","modified":1585925572359},{"_id":"public/python练习/关于import路径/index.html","hash":"e7e9119888074ff4cb2c40eabae957d7d6da6a8d","modified":1585925572359},{"_id":"public/linux学习/linux使用者管理/index.html","hash":"f39871e68f6579a6df0d42a952e26084714a16a3","modified":1585925572363},{"_id":"public/linux学习/部分/index.html","hash":"d909785bff92d631c7e520c48a7eb7d8770fcf9d","modified":1585925572363},{"_id":"public/linux学习/计算机概论/index.html","hash":"2e3ad0b2e709268e48acabbe8b8490d05905cfd7","modified":1585925572363},{"_id":"public/linux学习/进程与线程/index.html","hash":"63501a2446a4e98cda6fc98618812dabf50596dd","modified":1585925572363},{"_id":"public/linux学习/权限，目录/index.html","hash":"5d4985061d1ef3d9ea7235e9f3acb155e84206be","modified":1585925572363},{"_id":"public/linux学习/日志文件/index.html","hash":"7a4fadae09ce0099418fcd93077b3b992f5984db","modified":1585925572363},{"_id":"public/linux学习/文件，目录/index.html","hash":"48458c36a01cf00f17cd56ddc68b2524544708ed","modified":1585925572364},{"_id":"public/linux学习/关于vi/index.html","hash":"eec8676c436841b8c4a46e274fee712245d6471a","modified":1585925572364},{"_id":"public/linux学习/ip地址/index.html","hash":"6a5049445fb9f6c2a0f6a488dd974c5b94ac8693","modified":1585925572364},{"_id":"public/linux学习/HTTP的基本原理/index.html","hash":"688ab9ad7054562481968bb84ae8823b37093677","modified":1585925572364},{"_id":"public/linux学习/readme/index.html","hash":"1b7b2a01bd2536cf9d591f6b331146d634cbcd56","modified":1585925572364},{"_id":"public/linux学习/个人计算机/index.html","hash":"2a47537b58a874c0b5e9a6155141ac3f403aa376","modified":1585925572364},{"_id":"public/python练习/HTTP的基本原理/index.html","hash":"5d15041fe72b8d2a08bb1e35fb1d3b9a24692706","modified":1585925572364},{"_id":"public/work/自动部署/index.html","hash":"982dc0a7cd32adb98e3884d4d2297be4b091b30f","modified":1585925572364},{"_id":"public/python练习/给博客加日期/index.html","hash":"2422815c00e68f377247db40de98342a0d4849b5","modified":1585925572364},{"_id":"public/python操作数据库/python操作mysql(ORM)/index.html","hash":"12157db8807d8fffa9896dcd0daaa7871acef749","modified":1585925572364},{"_id":"public/python操作数据库/mysql基础(1)/index.html","hash":"2319ceeb8f7a44b0a719c69c24203681b8dbd12a","modified":1585925572364},{"_id":"public/python操作数据库/mysql基础(2)/index.html","hash":"d436591a1109bd9196f2a1567442ffefcad90d93","modified":1585925572364},{"_id":"public/python操作数据库/mysql基础(3)/index.html","hash":"a30845e3758b7a58e536eadb6fbbf4194d74f5eb","modified":1585925572364},{"_id":"public/python操作数据库/数据库/index.html","hash":"dca3d3fb193f411bee52c537fa7de2b4af855fb9","modified":1585925572364},{"_id":"public/python操作数据库/使用MySQL/index.html","hash":"24817304883e9662039f8930a490381fcbe685d0","modified":1585925572364},{"_id":"public/python操作数据库/python操作mysql(增删改查)/index.html","hash":"92c7ee4e3bd2eaae00f3204eda60454969f78081","modified":1585925572364},{"_id":"public/随笔/2017-2018 总结(初版)/index.html","hash":"59bf6956970c85120d1d269bc7a874ab29a8447d","modified":1585925572364},{"_id":"public/python练习/爬虫整理-(四)-多进程分布式与异步/index.html","hash":"2447ebdd7fdd26b75826002a1bbb748526f766e6","modified":1585925572388},{"_id":"public/linux学习/linux基础思维导图/index.html","hash":"881861da922b620c3b756e4b89cf8894e4c0a465","modified":1585925572388},{"_id":"public/python练习/爬取百度百科词条写入数据库/index.html","hash":"d3c4eff647d369ef7dcb0f5225ce93c35730a78c","modified":1585925572389},{"_id":"public/python练习/读取TXT_PDF/index.html","hash":"7501d36d9525ad9c5b7883ebdb3f3e66d9d1fd4e","modified":1585925572389},{"_id":"public/python练习/爬虫整理-(五)--slenium/index.html","hash":"10296f1f64df231529d4cccd8425af933ac4c140","modified":1585925572389},{"_id":"public/python练习/PandaTV爬取主播人气并排序/index.html","hash":"2e9c124ae1e6e0c60f8cf462d4606e3337a5888e","modified":1585925572389},{"_id":"public/python练习/慕课网数据采集总结/index.html","hash":"3ecace343511ff032cbbea786454c29a4d56e9e5","modified":1585925572389},{"_id":"public/python练习/爬虫整理（一）使用re和urllib/index.html","hash":"44c9a682f602a61b023d0d32e6fee768596afb72","modified":1585925572389},{"_id":"public/python练习/爬虫整理（二）BeautifulSoup/index.html","hash":"b7411e5401f03065aba956ab9575b63ab5218d7d","modified":1585925572389},{"_id":"public/python练习/爬虫整理（三）Requests/index.html","hash":"31d0b9cd2209435e375418acb6315e448d6a4beb","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-1--起步与红图/index.html","hash":"60bb0aaf9703553314da642c81680f98026b7492","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-2--REST基本特征/index.html","hash":"517194b4fcd95f62cfdd68fd52da607fe220c802","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-3--自定义异常对象/index.html","hash":"f8ee316794ea8f614b1221d924af53cb21ef8912","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她/index.html","hash":"6a86d504950ac85610003ecdb30473624a356afb","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户/index.html","hash":"0d031946122f056f64060496b4e2060f07ac7caa","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-6--模型对象的序列化/index.html","hash":"520ff60f080c7528df6aada6bc5eab9bd610d326","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-7--权限控制/index.html","hash":"2c2bf0664d49a93317ec23472e08741a778b6136","modified":1585925572389},{"_id":"public/flask-api/Flask构建可扩展的RESTful-API-8--补充完善/index.html","hash":"a2bbebaf94475331ac38f078b524c365ef79bcc6","modified":1585925572389},{"_id":"public/flask-api/图片/index.html","hash":"5563bcb97dee29cb905f211ad233c7ca15717b4f","modified":1585925572389},{"_id":"public/flask框架学习/flask高级编程_鱼书项目_填坑记/index.html","hash":"c13e16ad2321432004bca560ecd9f012caa7c9ac","modified":1585925572389},{"_id":"public/flask框架学习/flask初识/index.html","hash":"f1a6d33dc5c9f427a0eac81060218d9bf1546bcc","modified":1585925572390},{"_id":"public/flask框架学习/初识鱼书项目/index.html","hash":"db35e61e24600712ea0760e7ed2028fd1816b542","modified":1585925572390},{"_id":"public/flask框架学习/windows下mysql的安装/index.html","hash":"f73ffe235093ba0083fe2d7a8838363d5745f12a","modified":1585925572390},{"_id":"public/python基础/python异常/index.html","hash":"9ed5db0658400522f78d9604cf4d8189f02c5736","modified":1585925572390},{"_id":"public/python基础/python网络编程/index.html","hash":"13da532cd45c55733f0f7cdb7f30de9434544d17","modified":1585925572390},{"_id":"public/python基础/python文件操作/index.html","hash":"b654ef85a5eae362e867f855bb90e3c13c3fc471","modified":1585925572390},{"_id":"public/python基础/python中用字典代替switch/index.html","hash":"6902f2e76a97df0cb08d5cb75536b6bf8e6a552f","modified":1585925572390},{"_id":"public/python基础/python中的None/index.html","hash":"e483814b9cf2c1d6109debae026aa8e1d745901a","modified":1585925572390},{"_id":"public/python基础/python中的列表推导式/index.html","hash":"c764acbcd69b5ae944e69394ef86cec16b72b446","modified":1585925572390},{"_id":"public/python基础/python补充/index.html","hash":"41266e366692bee8a46d90b0992261412660b672","modified":1585925572390},{"_id":"public/python基础/python中的枚举/index.html","hash":"8c871a58ae9db9a68c597ae1f0b5533be0c8560b","modified":1585925572390},{"_id":"public/python基础/python之闭包/index.html","hash":"250e98b0d9a1c81a32955008b26558798254b19f","modified":1585925572390},{"_id":"public/python基础/python之函数式编程/index.html","hash":"8cfbd4f18b28b758cfe8ec33f29bacd254be9d54","modified":1585925572390},{"_id":"public/python基础/python中的装饰器/index.html","hash":"681b93ec56fb5fbb1d192101a8c1a30e78d86aac","modified":1585925572392},{"_id":"public/python基础/python之初识JSON/index.html","hash":"93f32e34405b43ade9acaf5701587160a5f65c1f","modified":1585925572392},{"_id":"public/python基础/python正则表达式的学习过程/index.html","hash":"63f6e57a8304ee569309f306f64abc368c539619","modified":1585925572392},{"_id":"public/python基础/python中面向对象/index.html","hash":"bccfde57159b4b63831013e324daeaf5fab56e43","modified":1585925572392},{"_id":"public/python基础/python项目的组织结构/index.html","hash":"d1cb906051cec015b24d0a3f1f3296a39dde2a1f","modified":1585925572392},{"_id":"public/python基础/python中流程控制语句/index.html","hash":"c9686cb4320b956da942d38d3074a8a60f6a2d79","modified":1585925572392},{"_id":"public/python基础/python中变量与运算符/index.html","hash":"ce395f6ff16073fbe987af8adbc498e08cfd166e","modified":1585925572392},{"_id":"public/python基础/python基本数据类型总结/index.html","hash":"915a0d93156bbf0c3ca0395069760bd3038c21dd","modified":1585925572392},{"_id":"public/python基础/python/index.html","hash":"292c230a2c874f83cf124b3663bba8442243be5b","modified":1585925572393},{"_id":"public/git/git分支管理-多人协作/index.html","hash":"948a3ca5dd753b8f13edcd4be182e07a5b565e59","modified":1585925572393},{"_id":"public/vps/GitHub+Hexo搭建个人网站/index.html","hash":"eb2f1cc8842d73abb2cad36fd74a4a0007294e73","modified":1585925572398},{"_id":"public/git/git中分支管理-创建合并/index.html","hash":"3e6a35b862ea2cc31103efe3a423e487111db643","modified":1585925572399},{"_id":"public/git/git之自定义/index.html","hash":"a0c0dfb3c5784aa900e6eb2937eaa1580108e253","modified":1585925572399},{"_id":"public/git/git之使用github/index.html","hash":"b5784459d5cec76422c8691996a5ffc20eb64e6c","modified":1585925572399},{"_id":"public/git/git中的工作区与暂存区/index.html","hash":"0df0134ee43526ea82ef78cabfc171f43174a99c","modified":1585925572399},{"_id":"public/git/git分支管理-Bug分支/index.html","hash":"866818521fb4f5533510451740c0bffbb4ed562b","modified":1585925572399},{"_id":"public/git/git分支管理-feature分支/index.html","hash":"83b69ea8835bbf195d7e8bc53fa0c52b904ca8ea","modified":1585925572399},{"_id":"public/git/git分支管理-rebase/index.html","hash":"958abe50da2165c13831813088e10e41802b6e8f","modified":1585925572399},{"_id":"public/git/git分支管理-分支管理政策/index.html","hash":"2f6dd4db6738586d44f137fd3a9a2334c9f9cf7d","modified":1585925572399},{"_id":"public/git/git初识/index.html","hash":"cfa486ebda9f6415b8535e16c9225877dc322a0d","modified":1585925572399},{"_id":"public/git/git标签管理/index.html","hash":"335f069a5f7f0e92fd778b701102824764f9ec5e","modified":1585925572399},{"_id":"public/git/git分支管理-解决冲突/index.html","hash":"9e9fdf0f343410623c1b4f01fcfc9cf78528aed7","modified":1585925572399},{"_id":"public/git/git远程仓库/index.html","hash":"e9e7fdbb112cd62f1e2d63fc6aeced15886d0c2a","modified":1585925572399},{"_id":"public/vps/VPS搭建SSR过程/index.html","hash":"1abe8c1faf4a0c9b6e3d9734f011fe28cf9d58da","modified":1585925572399},{"_id":"public/archives/index.html","hash":"efc19c92063e77f199e75c4e97233db7a45e1c64","modified":1585925572399},{"_id":"public/archives/page/2/index.html","hash":"d4ec83a5da0c3499e72ee0020491280e62f4915d","modified":1585925572399},{"_id":"public/archives/page/3/index.html","hash":"758af271807c8b72ce16fc87e8e9f9345e1f7447","modified":1585925572399},{"_id":"public/archives/page/4/index.html","hash":"0eb0982a170f8f0337b2849b1cb319b8fe8a36b3","modified":1585925572399},{"_id":"public/archives/page/5/index.html","hash":"d782b9f03d7f784568c22bf0931f8ef8c3d7e264","modified":1585925572400},{"_id":"public/archives/page/6/index.html","hash":"286502d5d257988b42929aae0e6e20ec61124b94","modified":1585925572400},{"_id":"public/archives/page/7/index.html","hash":"94ea10db2667e7466bd578bab1e94e10c2f7020e","modified":1585925572400},{"_id":"public/archives/page/8/index.html","hash":"6618cebf1227e8273e6af360bc21e17b32b185aa","modified":1585925572400},{"_id":"public/archives/page/9/index.html","hash":"6750f19c90238418fdc573b7508f96989929a647","modified":1585925572400},{"_id":"public/archives/page/10/index.html","hash":"5882f54f6737bf0de7058ad6a2bcffb3884720e6","modified":1585925572400},{"_id":"public/archives/page/11/index.html","hash":"b8f5ffaaf6bb8993340655fc98c1219d6862f27c","modified":1585925572400},{"_id":"public/archives/page/12/index.html","hash":"81016027efa41776e3d8a934673aa93274feaf76","modified":1585925572400},{"_id":"public/archives/page/13/index.html","hash":"59653a5a45c757a6ced29a782ea4b02bf4909edd","modified":1585925572400},{"_id":"public/archives/page/14/index.html","hash":"0fbc8e8ca7a5f90b5a0fcd886574fe81cce06931","modified":1585925572400},{"_id":"public/archives/2018/index.html","hash":"64f40ee55cec614ef0ec776f03073b4aca209b9d","modified":1585925572400},{"_id":"public/archives/2018/page/2/index.html","hash":"9b19b4cdc70b830f55da182f531e44abf64407b2","modified":1585925572400},{"_id":"public/archives/2018/page/3/index.html","hash":"93f749bd015939ac89c47a7e282e3443338ee20d","modified":1585925572400},{"_id":"public/archives/2018/page/4/index.html","hash":"bdb34ae5d4b64d695ff0f9e1c233b93e83ab9e99","modified":1585925572400},{"_id":"public/archives/2018/page/5/index.html","hash":"145406e79341b30bbf9861b9943b84241e5132dd","modified":1585925572400},{"_id":"public/archives/2018/page/6/index.html","hash":"612d017adecc3e9edcb9f5fc763a379fbebaaf94","modified":1585925572401},{"_id":"public/archives/2018/10/index.html","hash":"ca99e7770b2d72f65d13494d5de1120f8ae3d805","modified":1585925572401},{"_id":"public/archives/2018/11/index.html","hash":"8ee6362457d54d5de58eb6f281701debde885698","modified":1585925572401},{"_id":"public/archives/2018/11/page/2/index.html","hash":"3a9eee3cb7fb610a721b7954b3028175ff32eed8","modified":1585925572401},{"_id":"public/archives/2018/11/page/3/index.html","hash":"3ebcf413fd4c6d35332bedfa9e91e951371e2470","modified":1585925572401},{"_id":"public/archives/2018/11/page/4/index.html","hash":"73941cf327e7a057a72d6e4c22dca1413258a8bd","modified":1585925572401},{"_id":"public/archives/2018/12/index.html","hash":"29a592833aa09dd14e21c14763a37a60cf7e62a6","modified":1585925572401},{"_id":"public/archives/2018/12/page/2/index.html","hash":"0d227dbd23fec2e6060e55e155aa53dd3741c763","modified":1585925572401},{"_id":"public/archives/2019/index.html","hash":"28d5154b1e40d76e855ff23ee9a71c09f816c242","modified":1585925572403},{"_id":"public/archives/2019/page/2/index.html","hash":"52258ac0c1b1c052f67c9c7a7ea9f6eba9e72c8d","modified":1585925572403},{"_id":"public/archives/2019/page/3/index.html","hash":"3d6c4b005b99c86aacaaf3a1d6864ec13019660e","modified":1585925572404},{"_id":"public/archives/2019/page/4/index.html","hash":"04f8d9565f358d9dbf6de00d12936abef05468a3","modified":1585925572404},{"_id":"public/archives/2019/page/5/index.html","hash":"2ee190ba0b6b36072edd138a9d30d954f64759d8","modified":1585925572404},{"_id":"public/archives/2019/page/6/index.html","hash":"3c87ef242b1cbedbbd91421418470fba8da7fc3c","modified":1585925572404},{"_id":"public/archives/2019/page/7/index.html","hash":"86958abd56eb633adace9e0f8a25ffa4a2b009eb","modified":1585925572404},{"_id":"public/archives/2019/page/8/index.html","hash":"ad8f56d0516b48d9cad4be97b9b3ee6887fcf661","modified":1585925572404},{"_id":"public/archives/2019/01/index.html","hash":"348c07dd1ef176f01bba2d912a3d4550f540eb23","modified":1585925572404},{"_id":"public/archives/2019/02/index.html","hash":"30cf6ee3d505420c09ab96a8f6e431ea10b2012b","modified":1585925572404},{"_id":"public/archives/2019/05/index.html","hash":"d3270205c1c6da249760f80c64e2a883c2e59ff5","modified":1585925572404},{"_id":"public/archives/2019/06/index.html","hash":"e9ac0565f4543652dc73df418f2fcc61b0691ff4","modified":1585925572404},{"_id":"public/archives/2019/07/index.html","hash":"8ab4c226710370f4e1ac040a48d3af55711c537f","modified":1585925572404},{"_id":"public/archives/2019/07/page/2/index.html","hash":"422320bb7eed19c50157f1ca931e854d34199bcc","modified":1585925572404},{"_id":"public/archives/2019/08/index.html","hash":"a98206759dc2a5d83ce67be2039baf9feb0a2e70","modified":1585925572404},{"_id":"public/archives/2019/08/page/2/index.html","hash":"99fbd02f4c5eadd7846a1600f3fa94edd6b4f554","modified":1585925572404},{"_id":"public/archives/2019/09/index.html","hash":"85ee829c770cf14103f206d2f5d8b9e8608a903a","modified":1585925572404},{"_id":"public/archives/2019/09/page/2/index.html","hash":"e8eb783a25955ffee77c37777d4004c2dd36a5da","modified":1585925572404},{"_id":"public/archives/2019/10/index.html","hash":"7b510416f5a2676507969ef5b9e9a48e4683aa40","modified":1585925572404},{"_id":"public/archives/2019/10/page/2/index.html","hash":"cd1cc042373afd0bed6c74097bd9b9df1887fa47","modified":1585925572404},{"_id":"public/categories/flask/index.html","hash":"bfac101ea43326dd0c6d4a770ebbe2bd307d3554","modified":1585925572404},{"_id":"public/categories/java/index.html","hash":"1e46253794f9a8c2ded02ca41148ac119dcfd736","modified":1585925572404},{"_id":"public/categories/mysql学习/index.html","hash":"0f8cccdfb1d1279ac3c23151698c6e4a58b797af","modified":1585925572404},{"_id":"public/categories/docker/index.html","hash":"66ed2ec4ea4a80d33070400fb17d2b2ecb54d53f","modified":1585925572404},{"_id":"public/categories/flask-api/index.html","hash":"451826d5c0462e7651e873d84e1aa541f04d947b","modified":1585925572405},{"_id":"public/categories/work/index.html","hash":"999e7815ce0659d85d0fe2adafe774fadfbeeeb5","modified":1585925572405},{"_id":"public/categories/随笔/index.html","hash":"6a7499c333ebf3e8fdcb602e1f9d18d46bfbfb22","modified":1585925572405},{"_id":"public/categories/golang/index.html","hash":"fd77fa18a52ff96f5550b1b9cd8a88fd3fb59624","modified":1585925572405},{"_id":"public/categories/VPS/index.html","hash":"97bf46f9028f4010435d99d8b0bda2996b3da6a7","modified":1585925572405},{"_id":"public/categories/git/index.html","hash":"e304eb15b829a38eb1035291a4d5e73488632ece","modified":1585925572405},{"_id":"public/categories/git/page/2/index.html","hash":"407446ddd8c6ca3ee4263722d0c67f7ab7401e5f","modified":1585925572405},{"_id":"public/categories/linux/index.html","hash":"5b766ab6595f6788c8d504eaa5ca76a531a24f0b","modified":1585925572405},{"_id":"public/categories/linux/page/2/index.html","hash":"3d39b4d57331f1b0917ed93cedae206df8c75eac","modified":1585925572405},{"_id":"public/categories/linux学习/index.html","hash":"9d6d970fdf7eeda7fa0ca9c4ee76a9748243b2ac","modified":1585925572405},{"_id":"public/categories/python基础/index.html","hash":"e9b6bbb1e0a465cdf9ea206db9211db4965876ec","modified":1585925572405},{"_id":"public/categories/python基础/page/2/index.html","hash":"af8a151b3bc57edba6d413fde871211abe9b046f","modified":1585925572405},{"_id":"public/categories/python练习/index.html","hash":"a7287995910bf00108c8c9b3fccf26ad2b48ff2c","modified":1585925572405},{"_id":"public/categories/python练习/page/2/index.html","hash":"6f29a5cb3529dba11c26dd920069f7de8229a994","modified":1585925572405},{"_id":"public/categories/python练习/page/3/index.html","hash":"065ef7ffd9cbb08e4c31cd5b6d4012285bb3fb1b","modified":1585925572405},{"_id":"public/categories/python练习/page/4/index.html","hash":"8198188b153846220d170b0dc51a25de29768d95","modified":1585925572405},{"_id":"public/categories/数据库/index.html","hash":"983a4ea237a3df90c390ef555949362460c0da4b","modified":1585925572405},{"_id":"public/categories/数据库/page/2/index.html","hash":"6eecaa2ac4aef4dfd10cbb55c3bf4f5e10898cad","modified":1585925572405},{"_id":"public/index.html","hash":"cc62ebda91fcd3809818f70ba7fcf98acd86c199","modified":1585925572406},{"_id":"public/page/2/index.html","hash":"cf9f938a9e6b28bb4959856e5e59d6a3601d8c5d","modified":1585925572406},{"_id":"public/page/3/index.html","hash":"421f589c6bb78904e079dfd4cd72e0a6f4dc1d09","modified":1585925572406},{"_id":"public/page/4/index.html","hash":"0faf39c069a670ba2f0799e45d7ee662bec49522","modified":1585925572406},{"_id":"public/page/5/index.html","hash":"2769b6e6c336d817fd3214a92334eb6f339eb96b","modified":1585925572406},{"_id":"public/page/6/index.html","hash":"8098d8aec783c6270c317b122e055042e7f682c4","modified":1585925572406},{"_id":"public/page/7/index.html","hash":"5a51b6da1a50506ead5713ad8f859e9acf46f46a","modified":1585925572406},{"_id":"public/page/8/index.html","hash":"25bb9cbb5926f713deceb6af67b8079feccd87b5","modified":1585925572406},{"_id":"public/page/9/index.html","hash":"fdc9349a37f55c22fc666c0bf75e1adb707b4b6a","modified":1585925572406},{"_id":"public/page/10/index.html","hash":"9f72f9f86456272e5d186d317d7bb8f698d132ea","modified":1585925572406},{"_id":"public/page/11/index.html","hash":"0c10760e12c921064d6109633fd88ff35d8cfb7b","modified":1585925572406},{"_id":"public/page/12/index.html","hash":"d424286ba5bdbb8821b8f8590e8e747c1b9f9166","modified":1585925572406},{"_id":"public/page/13/index.html","hash":"360eb2985e1a13fd9efab339838b1db0112eb4b4","modified":1585925572406},{"_id":"public/page/14/index.html","hash":"b631ebbe850e3d94cafcc4646eae1b7b5c570831","modified":1585925572408},{"_id":"public/tags/mongodb/index.html","hash":"9b1e3ad7a3aa8f5094776345961ec03c5aee1d82","modified":1585925572408},{"_id":"public/tags/redis/index.html","hash":"3b2b9220a35d8801785661ef1bb0dcbc0e0015a3","modified":1585925572408},{"_id":"public/images/favicon-16x16.ico","hash":"638e9ee22ee977936601c25529da9d30f90c0388","modified":1585925572408},{"_id":"public/images/favicon-32x32.ico","hash":"6bae232f1350b305bffb19b03efa73b8d1979d96","modified":1585925572408},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585925572408},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585925572408},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1585925572408},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585925572408},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585925572408},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585925572408},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585925572408},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585925572408},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585925572408},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585925572408},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585925572408},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1585925572408},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585925572408},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585925572408},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1585925572408},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585925572408},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585925572408},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585925572409},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585925572409},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1585925572409},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1585925572409},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1585925572409},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1585925572409},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1585925572409},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1585925572409},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1585925572409},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585925572409},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1585925572409},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1585925572409},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1585925572409},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1585925572409},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1585925572409},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1585925572409},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585925573149},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585925573155},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1585925573183},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1585925573183},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1585925573183},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1585925573183},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1585925573183},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1585925573183},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1585925573183},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1585925573183},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1585925573183},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1585925573183},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1585925573183},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1585925573183},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1585925573183},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1585925573183},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1585925573183},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1585925573183},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1585925573183},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1585925573183},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1585925573184},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585925573184},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1585925573184},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1585925573184},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1585925573184},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1585925573184},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1585925573184},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1585925573184},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1585925573184},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1585925573184},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1585925573184},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1585925573184},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1585925573184},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1585925573184},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1585925573185},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1585925573185},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1585925573185},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1585925573185},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1585925573185},{"_id":"public/css/main.css","hash":"c94cf517fd3127764ce7eba60cff3d344d50ff4e","modified":1585925573185},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1585925573185},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1585925573185},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1585925573185},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1585925573185},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1585925573185},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585925573185},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1585925573185},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1585925573185},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1585925573186},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1585925573186},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1585925573186},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585925573186},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585925573186},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1585925573186},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1585925573186},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1585925573186},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1585925573186},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1585925573186},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1585925573186},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1585925573186},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585925573187},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1585925573187},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1585925573195},{"_id":"public/images/avatar.png","hash":"29b32d32f833aa01a600f6e794613153d31058cf","modified":1585925573228},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1585925573266}],"Category":[{"name":"flask","_id":"ck8kb4owo0006tssav6d9rhvf"},{"name":"java","_id":"ck8kb4ox2000itssaye2frji2"},{"name":"mysql学习","_id":"ck8kb4oxo0014tssa31elfhl4"},{"name":"docker","_id":"ck8kb4oyv001otssatz8ctdh0"},{"name":"flask-api","_id":"ck8kb4ozc001ztssaf2n9kx16"},{"name":"work","_id":"ck8kb4ozm002ftssagdkslu1i"},{"name":"随笔","_id":"ck8kb4ozn002jtssa8pv529k3"},{"name":"golang","_id":"ck8kb4ozo002mtssa2p2kotix"},{"name":"VPS","_id":"ck8kb4p12002ytssa69e1swza"},{"name":"git","_id":"ck8kb4p1c0036tssa81xzqi7k"},{"name":"linux","_id":"ck8kb4p1r003utssaexq46azb"},{"name":"linux学习","_id":"ck8kb4p1z004atssa8gmky2k9"},{"name":"python基础","_id":"ck8kb4p26004otssahuwoek9j"},{"name":"python练习","_id":"ck8kb4p5f0062tssaevxgmis6"},{"name":"数据库","_id":"ck8kb4p6r007otssabdcxxcmi"}],"Data":[],"Page":[{"title":"","date":"2018-11-08T13:04:43.000Z","type":"book","_content":"****\n# 关于此页\n\n\n我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。\n\n\n\n\n# 于是就有了这样一个基于gitbook的笔记。\n\n\n****\n\n## github pages托管\n\n\n\n[《 gitbook教程 》](https://itswl.github.io/learn_gitbook/) \n[《 python基础 》](https://itswl.github.io/learn_python/) \n[《 git教程 》](https://itswl.github.io/learn_git/) \n[《 Flask构建可扩展的RESTful-API 》](https://itswl.github.io/flask_api/) \n\n\n\n****\n\n## gitbook网页\n\n\n\n[《 gitbook教程 》](https://learn-gitbook.gitbook.io/gitbook/) \n[《 python基础 》](https://itswl.gitbook.io/python/) \n[《 flask鱼书项目记录 》](https://flask-yushu.gitbook.io/yushu/) \n[《 git教程 》](https://learn-git.gitbook.io/git/) \n[《 Flask构建可扩展的RESTful-API 》](https://flask-api.gitbook.io/api/) \n\n\n\n\n\n******\n\n# 建议\n做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。\n\n**gitbook好像访问速度很慢，使用特殊方法就可以了。**\n\n","source":"book/index.md","raw":"---\ntitle: \ndate: 2018-11-08 21:04:43\ntype: \"book\"\n---\n****\n# 关于此页\n\n\n我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。\n\n\n\n\n# 于是就有了这样一个基于gitbook的笔记。\n\n\n****\n\n## github pages托管\n\n\n\n[《 gitbook教程 》](https://itswl.github.io/learn_gitbook/) \n[《 python基础 》](https://itswl.github.io/learn_python/) \n[《 git教程 》](https://itswl.github.io/learn_git/) \n[《 Flask构建可扩展的RESTful-API 》](https://itswl.github.io/flask_api/) \n\n\n\n****\n\n## gitbook网页\n\n\n\n[《 gitbook教程 》](https://learn-gitbook.gitbook.io/gitbook/) \n[《 python基础 》](https://itswl.gitbook.io/python/) \n[《 flask鱼书项目记录 》](https://flask-yushu.gitbook.io/yushu/) \n[《 git教程 》](https://learn-git.gitbook.io/git/) \n[《 Flask构建可扩展的RESTful-API 》](https://flask-api.gitbook.io/api/) \n\n\n\n\n\n******\n\n# 建议\n做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。\n\n**gitbook好像访问速度很慢，使用特殊方法就可以了。**\n\n","updated":"2020-04-01T09:23:43.688Z","path":"book/index.html","comments":1,"layout":"page","_id":"ck8kb4oog0000tssan6g0capa","content":"<hr>\n<h1 id=\"关于此页\"><a href=\"#关于此页\" class=\"headerlink\" title=\"关于此页\"></a>关于此页</h1><p>我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。</p>\n<h1 id=\"于是就有了这样一个基于gitbook的笔记。\"><a href=\"#于是就有了这样一个基于gitbook的笔记。\" class=\"headerlink\" title=\"于是就有了这样一个基于gitbook的笔记。\"></a>于是就有了这样一个基于gitbook的笔记。</h1><hr>\n<h2 id=\"github-pages托管\"><a href=\"#github-pages托管\" class=\"headerlink\" title=\"github pages托管\"></a>github pages托管</h2><p><a href=\"https://itswl.github.io/learn_gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.github.io/learn_python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://itswl.github.io/learn_git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://itswl.github.io/flask_api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h2 id=\"gitbook网页\"><a href=\"#gitbook网页\" class=\"headerlink\" title=\"gitbook网页\"></a>gitbook网页</h2><p><a href=\"https://learn-gitbook.gitbook.io/gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.gitbook.io/python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://flask-yushu.gitbook.io/yushu/\" target=\"_blank\" rel=\"noopener\">《 flask鱼书项目记录 》</a><br><a href=\"https://learn-git.gitbook.io/git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://flask-api.gitbook.io/api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。</p>\n<p><strong>gitbook好像访问速度很慢，使用特殊方法就可以了。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"关于此页\"><a href=\"#关于此页\" class=\"headerlink\" title=\"关于此页\"></a>关于此页</h1><p>我发现以前做的笔记太过于分散，想查看一个类型的文档只能去分类里查看，然而在分类里一般都是默认后上传的在前面，然而笔记肯定是后学的比较深入一点，于是得改变一下。</p>\n<h1 id=\"于是就有了这样一个基于gitbook的笔记。\"><a href=\"#于是就有了这样一个基于gitbook的笔记。\" class=\"headerlink\" title=\"于是就有了这样一个基于gitbook的笔记。\"></a>于是就有了这样一个基于gitbook的笔记。</h1><hr>\n<h2 id=\"github-pages托管\"><a href=\"#github-pages托管\" class=\"headerlink\" title=\"github pages托管\"></a>github pages托管</h2><p><a href=\"https://itswl.github.io/learn_gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.github.io/learn_python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://itswl.github.io/learn_git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://itswl.github.io/flask_api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h2 id=\"gitbook网页\"><a href=\"#gitbook网页\" class=\"headerlink\" title=\"gitbook网页\"></a>gitbook网页</h2><p><a href=\"https://learn-gitbook.gitbook.io/gitbook/\" target=\"_blank\" rel=\"noopener\">《 gitbook教程 》</a><br><a href=\"https://itswl.gitbook.io/python/\" target=\"_blank\" rel=\"noopener\">《 python基础 》</a><br><a href=\"https://flask-yushu.gitbook.io/yushu/\" target=\"_blank\" rel=\"noopener\">《 flask鱼书项目记录 》</a><br><a href=\"https://learn-git.gitbook.io/git/\" target=\"_blank\" rel=\"noopener\">《 git教程 》</a><br><a href=\"https://flask-api.gitbook.io/api/\" target=\"_blank\" rel=\"noopener\">《 Flask构建可扩展的RESTful-API 》</a> </p>\n<hr>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>做一系列笔记时，可以采用gitbook方式，这样更加容易分清条理，必要时也可以在gitbook上生成pdf，打印出来，或者导入到其他设备观看。</p>\n<p><strong>gitbook好像访问速度很慢，使用特殊方法就可以了。</strong></p>\n"},{"title":"个人简历","date":"2019-03-02T08:44:57.000Z","type":"resume","_content":"\n# 个人信息\n- 魏来 / 男 / 1995.07\n- 统招本科 / 济南大学 / 学士学位       2013.09-2017.07\n- 工作年限： 3年\n- 期望职位： Python工程师\n- 期望城市： 深圳\n- 电话： 17683749507\n- Email： [itsweilai@gmail.com](itsweilai@gmail.com)\n- Github:  [https://github.com/itswl](https://github.com/itswl)\n- blog:  [https://imwl.ml/](https://imwl.ml/)               备用地址 [https://itswl.github.io/](https://itswl.github.io/)\n \n## 简介\n- 熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic\n- 熟练使用sql， 熟悉mysql，redis， MongoDB\n- 熟悉面向对象思想， 了解一些设计模式\n- 熟练使用linux系统，能编写简单shell脚本\n- 了解nginx部署网页\n- 了解基本的算法与数据结构\n- 了解 Golang, docker, javascript  \n- 具有一定的英语听说读写能力\n\n## 工作经历\n### 深圳软通动力信息技术有限公司 （2019.03 ～   ）\n**cloudsop开发一部 / HW深圳公共开发实施部**\n工作描述： \n1. 主要是编写部署脚本，部署平台到集群上。\n2. 主要使用到的包paramiko,requests,fabric2等\n3. 环境维护和部署过程中的问题解决\n\n\n**管控析平台二部 / HW深圳公共开发实施部**\n工作描述：\n1.\t智能告警项目中的规则管理，后台的增删改查\n2.\t自动化测试用例的建设\n\n### 吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\n**python / 信息部**\n工作描述：\t1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。\n2. 负责周报和月报的制作， 主要是对数据库数据的统计。\n3. 使用pytho操作数据库，使用ORM框架SQLAlchemy等。 \n4. 使用python对excel表进行操作。\n5. 小脚本的开发\n\n### 西安经天交通工程技术研究所（2017.08 ～ 2017.12）\n**技术支持 / 技术部**\n1. 纬地系列软件产品的技术支持、培训服务;\n2. 道路与交通领域新技术与软件功能需求的调研分析；\n3. 软件产品新技术的应用测试工作；\n4. 软件技术与工程实践应用类技术文档编制等。\n\n## 项目经验\n### ruleservice设计 2019.11 ～ \n#### 项目描述：\t\n\n智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。\n\n#### 责任描述：\n1. 主要是对智能告警服务规则设计以及功能测试\n2. flask 编写api接口对后台进行增删改查操作\n3. javascript 测试自动化用例的编写。\n\n### ODAE开发 2019.03 ～ 2019.11\n#### 项目描述：\n一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。\n\n#### 责任描述：\n1. 主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署\n2. 发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。\n\n\n### Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\n#### 责任描述：\t\n基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。\n#### 项目描述：\t\n扩展重写Flask API,更好地支持接口编写,可作为API部分的demo\n\n### flask网页  2018.10  ~ 2018.11 \n#### 责任描述：\n网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。\n#### 项目描述：\n项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币\"鱼 豆\"，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。\n\n使用到  flask + uwsgi + pipenv + nginx \n\n[http://v3.imwl.ga](http://v3.imwl.ga)\n\n### 个人小项目 2018.10  ～ \n#### 项目描述：\n博客地址：[https://imwl.ml/](https://imwl.ml/) ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理\n\npython网页编辑器 [https://imwl.ml/jupyter](https://imwl.ml/jupyter)， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx\n等等\n\n\n## 自我评价\n1. 爱生活，爱技术，爱折腾的阳光宅男。\n2. 喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。\n3. 能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。\n4. 给我一个机会， 定不会让您失望...\n\n## 致谢\n感谢您百忙之中阅读我的简历， 期待能有机会和您共事。","source":"resume/index.md","raw":"---\ntitle: 个人简历\ndate: 2019-03-02 16:44:57\ntype: \"resume\"\n---\n\n# 个人信息\n- 魏来 / 男 / 1995.07\n- 统招本科 / 济南大学 / 学士学位       2013.09-2017.07\n- 工作年限： 3年\n- 期望职位： Python工程师\n- 期望城市： 深圳\n- 电话： 17683749507\n- Email： [itsweilai@gmail.com](itsweilai@gmail.com)\n- Github:  [https://github.com/itswl](https://github.com/itswl)\n- blog:  [https://imwl.ml/](https://imwl.ml/)               备用地址 [https://itswl.github.io/](https://itswl.github.io/)\n \n## 简介\n- 熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic\n- 熟练使用sql， 熟悉mysql，redis， MongoDB\n- 熟悉面向对象思想， 了解一些设计模式\n- 熟练使用linux系统，能编写简单shell脚本\n- 了解nginx部署网页\n- 了解基本的算法与数据结构\n- 了解 Golang, docker, javascript  \n- 具有一定的英语听说读写能力\n\n## 工作经历\n### 深圳软通动力信息技术有限公司 （2019.03 ～   ）\n**cloudsop开发一部 / HW深圳公共开发实施部**\n工作描述： \n1. 主要是编写部署脚本，部署平台到集群上。\n2. 主要使用到的包paramiko,requests,fabric2等\n3. 环境维护和部署过程中的问题解决\n\n\n**管控析平台二部 / HW深圳公共开发实施部**\n工作描述：\n1.\t智能告警项目中的规则管理，后台的增删改查\n2.\t自动化测试用例的建设\n\n### 吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\n**python / 信息部**\n工作描述：\t1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。\n2. 负责周报和月报的制作， 主要是对数据库数据的统计。\n3. 使用pytho操作数据库，使用ORM框架SQLAlchemy等。 \n4. 使用python对excel表进行操作。\n5. 小脚本的开发\n\n### 西安经天交通工程技术研究所（2017.08 ～ 2017.12）\n**技术支持 / 技术部**\n1. 纬地系列软件产品的技术支持、培训服务;\n2. 道路与交通领域新技术与软件功能需求的调研分析；\n3. 软件产品新技术的应用测试工作；\n4. 软件技术与工程实践应用类技术文档编制等。\n\n## 项目经验\n### ruleservice设计 2019.11 ～ \n#### 项目描述：\t\n\n智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。\n\n#### 责任描述：\n1. 主要是对智能告警服务规则设计以及功能测试\n2. flask 编写api接口对后台进行增删改查操作\n3. javascript 测试自动化用例的编写。\n\n### ODAE开发 2019.03 ～ 2019.11\n#### 项目描述：\n一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。\n\n#### 责任描述：\n1. 主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署\n2. 发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。\n\n\n### Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\n#### 责任描述：\t\n基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。\n#### 项目描述：\t\n扩展重写Flask API,更好地支持接口编写,可作为API部分的demo\n\n### flask网页  2018.10  ~ 2018.11 \n#### 责任描述：\n网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。\n#### 项目描述：\n项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币\"鱼 豆\"，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。\n\n使用到  flask + uwsgi + pipenv + nginx \n\n[http://v3.imwl.ga](http://v3.imwl.ga)\n\n### 个人小项目 2018.10  ～ \n#### 项目描述：\n博客地址：[https://imwl.ml/](https://imwl.ml/) ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理\n\npython网页编辑器 [https://imwl.ml/jupyter](https://imwl.ml/jupyter)， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx\n等等\n\n\n## 自我评价\n1. 爱生活，爱技术，爱折腾的阳光宅男。\n2. 喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。\n3. 能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。\n4. 给我一个机会， 定不会让您失望...\n\n## 致谢\n感谢您百忙之中阅读我的简历， 期待能有机会和您共事。","updated":"2020-04-03T14:51:30.465Z","path":"resume/index.html","comments":1,"layout":"page","_id":"ck8kb4ooi0001tssaxrccz5zc","content":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>魏来 / 男 / 1995.07</li>\n<li>统招本科 / 济南大学 / 学士学位       2013.09-2017.07</li>\n<li>工作年限： 3年</li>\n<li>期望职位： Python工程师</li>\n<li>期望城市： 深圳</li>\n<li>电话： 17683749507</li>\n<li>Email： <a href=\"itsweilai@gmail.com\">itsweilai@gmail.com</a></li>\n<li>Github:  <a href=\"https://github.com/itswl\" target=\"_blank\" rel=\"noopener\">https://github.com/itswl</a></li>\n<li>blog:  <a href=\"https://imwl.ml/\">https://imwl.ml/</a>               备用地址 <a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io/</a></li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic</li>\n<li>熟练使用sql， 熟悉mysql，redis， MongoDB</li>\n<li>熟悉面向对象思想， 了解一些设计模式</li>\n<li>熟练使用linux系统，能编写简单shell脚本</li>\n<li>了解nginx部署网页</li>\n<li>了解基本的算法与数据结构</li>\n<li>了解 Golang, docker, javascript  </li>\n<li>具有一定的英语听说读写能力</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"深圳软通动力信息技术有限公司-（2019-03-～-）\"><a href=\"#深圳软通动力信息技术有限公司-（2019-03-～-）\" class=\"headerlink\" title=\"深圳软通动力信息技术有限公司 （2019.03 ～   ）\"></a>深圳软通动力信息技术有限公司 （2019.03 ～   ）</h3><p><strong>cloudsop开发一部 / HW深圳公共开发实施部</strong><br>工作描述： </p>\n<ol>\n<li>主要是编写部署脚本，部署平台到集群上。</li>\n<li>主要使用到的包paramiko,requests,fabric2等</li>\n<li>环境维护和部署过程中的问题解决</li>\n</ol>\n<p><strong>管控析平台二部 / HW深圳公共开发实施部</strong><br>工作描述：</p>\n<ol>\n<li>智能告警项目中的规则管理，后台的增删改查</li>\n<li>自动化测试用例的建设</li>\n</ol>\n<h3 id=\"吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\"><a href=\"#吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\" class=\"headerlink\" title=\"吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\"></a>吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）</h3><p><strong>python / 信息部</strong><br>工作描述：    1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。</p>\n<ol start=\"2\">\n<li>负责周报和月报的制作， 主要是对数据库数据的统计。</li>\n<li>使用pytho操作数据库，使用ORM框架SQLAlchemy等。 </li>\n<li>使用python对excel表进行操作。</li>\n<li>小脚本的开发</li>\n</ol>\n<h3 id=\"西安经天交通工程技术研究所（2017-08-～-2017-12）\"><a href=\"#西安经天交通工程技术研究所（2017-08-～-2017-12）\" class=\"headerlink\" title=\"西安经天交通工程技术研究所（2017.08 ～ 2017.12）\"></a>西安经天交通工程技术研究所（2017.08 ～ 2017.12）</h3><p><strong>技术支持 / 技术部</strong></p>\n<ol>\n<li>纬地系列软件产品的技术支持、培训服务;</li>\n<li>道路与交通领域新技术与软件功能需求的调研分析；</li>\n<li>软件产品新技术的应用测试工作；</li>\n<li>软件技术与工程实践应用类技术文档编制等。</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><h3 id=\"ruleservice设计-2019-11-～\"><a href=\"#ruleservice设计-2019-11-～\" class=\"headerlink\" title=\"ruleservice设计 2019.11 ～\"></a>ruleservice设计 2019.11 ～</h3><h4 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。</p>\n<h4 id=\"责任描述：\"><a href=\"#责任描述：\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是对智能告警服务规则设计以及功能测试</li>\n<li>flask 编写api接口对后台进行增删改查操作</li>\n<li>javascript 测试自动化用例的编写。</li>\n</ol>\n<h3 id=\"ODAE开发-2019-03-～-2019-11\"><a href=\"#ODAE开发-2019-03-～-2019-11\" class=\"headerlink\" title=\"ODAE开发 2019.03 ～ 2019.11\"></a>ODAE开发 2019.03 ～ 2019.11</h3><h4 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。</p>\n<h4 id=\"责任描述：-1\"><a href=\"#责任描述：-1\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署</li>\n<li>发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。</li>\n</ol>\n<h3 id=\"Flask构建可扩展的RESTful-API-2018-11-2018-12\"><a href=\"#Flask构建可扩展的RESTful-API-2018-11-2018-12\" class=\"headerlink\" title=\"Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\"></a>Flask构建可扩展的RESTful-API  2018.11  ~  2018.12</h3><h4 id=\"责任描述：-2\"><a href=\"#责任描述：-2\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。</p>\n<h4 id=\"项目描述：-2\"><a href=\"#项目描述：-2\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>扩展重写Flask API,更好地支持接口编写,可作为API部分的demo</p>\n<h3 id=\"flask网页-2018-10-2018-11\"><a href=\"#flask网页-2018-10-2018-11\" class=\"headerlink\" title=\"flask网页  2018.10  ~ 2018.11\"></a>flask网页  2018.10  ~ 2018.11</h3><h4 id=\"责任描述：-3\"><a href=\"#责任描述：-3\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。</p>\n<h4 id=\"项目描述：-3\"><a href=\"#项目描述：-3\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币”鱼 豆”，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。</p>\n<p>使用到  flask + uwsgi + pipenv + nginx </p>\n<p><a href=\"http://v3.imwl.ga\" target=\"_blank\" rel=\"noopener\">http://v3.imwl.ga</a></p>\n<h3 id=\"个人小项目-2018-10-～\"><a href=\"#个人小项目-2018-10-～\" class=\"headerlink\" title=\"个人小项目 2018.10  ～\"></a>个人小项目 2018.10  ～</h3><h4 id=\"项目描述：-4\"><a href=\"#项目描述：-4\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>博客地址：<a href=\"https://imwl.ml/\">https://imwl.ml/</a> ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理</p>\n<p>python网页编辑器 <a href=\"https://imwl.ml/jupyter\">https://imwl.ml/jupyter</a>， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx<br>等等</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ol>\n<li>爱生活，爱技术，爱折腾的阳光宅男。</li>\n<li>喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。</li>\n<li>能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。</li>\n<li>给我一个机会， 定不会让您失望…</li>\n</ol>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您百忙之中阅读我的简历， 期待能有机会和您共事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>魏来 / 男 / 1995.07</li>\n<li>统招本科 / 济南大学 / 学士学位       2013.09-2017.07</li>\n<li>工作年限： 3年</li>\n<li>期望职位： Python工程师</li>\n<li>期望城市： 深圳</li>\n<li>电话： 17683749507</li>\n<li>Email： <a href=\"itsweilai@gmail.com\">itsweilai@gmail.com</a></li>\n<li>Github:  <a href=\"https://github.com/itswl\" target=\"_blank\" rel=\"noopener\">https://github.com/itswl</a></li>\n<li>blog:  <a href=\"https://imwl.ml/\">https://imwl.ml/</a>               备用地址 <a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io/</a></li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>熟练使用python， 熟悉flask框架和restful api， 具有良好的编码规范， 追求clean code， pythonic</li>\n<li>熟练使用sql， 熟悉mysql，redis， MongoDB</li>\n<li>熟悉面向对象思想， 了解一些设计模式</li>\n<li>熟练使用linux系统，能编写简单shell脚本</li>\n<li>了解nginx部署网页</li>\n<li>了解基本的算法与数据结构</li>\n<li>了解 Golang, docker, javascript  </li>\n<li>具有一定的英语听说读写能力</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"深圳软通动力信息技术有限公司-（2019-03-～-）\"><a href=\"#深圳软通动力信息技术有限公司-（2019-03-～-）\" class=\"headerlink\" title=\"深圳软通动力信息技术有限公司 （2019.03 ～   ）\"></a>深圳软通动力信息技术有限公司 （2019.03 ～   ）</h3><p><strong>cloudsop开发一部 / HW深圳公共开发实施部</strong><br>工作描述： </p>\n<ol>\n<li>主要是编写部署脚本，部署平台到集群上。</li>\n<li>主要使用到的包paramiko,requests,fabric2等</li>\n<li>环境维护和部署过程中的问题解决</li>\n</ol>\n<p><strong>管控析平台二部 / HW深圳公共开发实施部</strong><br>工作描述：</p>\n<ol>\n<li>智能告警项目中的规则管理，后台的增删改查</li>\n<li>自动化测试用例的建设</li>\n</ol>\n<h3 id=\"吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\"><a href=\"#吉林森工湖南森华木业有限公司（2018-03-～-2019-01）\" class=\"headerlink\" title=\"吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）\"></a>吉林森工湖南森华木业有限公司（2018.03 ～ 2019.01）</h3><p><strong>python / 信息部</strong><br>工作描述：    1. 负责日常的简单维护工作， 使用mysql对数据库数据修改， 以及一些硬件的部分简单问题。</p>\n<ol start=\"2\">\n<li>负责周报和月报的制作， 主要是对数据库数据的统计。</li>\n<li>使用pytho操作数据库，使用ORM框架SQLAlchemy等。 </li>\n<li>使用python对excel表进行操作。</li>\n<li>小脚本的开发</li>\n</ol>\n<h3 id=\"西安经天交通工程技术研究所（2017-08-～-2017-12）\"><a href=\"#西安经天交通工程技术研究所（2017-08-～-2017-12）\" class=\"headerlink\" title=\"西安经天交通工程技术研究所（2017.08 ～ 2017.12）\"></a>西安经天交通工程技术研究所（2017.08 ～ 2017.12）</h3><p><strong>技术支持 / 技术部</strong></p>\n<ol>\n<li>纬地系列软件产品的技术支持、培训服务;</li>\n<li>道路与交通领域新技术与软件功能需求的调研分析；</li>\n<li>软件产品新技术的应用测试工作；</li>\n<li>软件技术与工程实践应用类技术文档编制等。</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><h3 id=\"ruleservice设计-2019-11-～\"><a href=\"#ruleservice设计-2019-11-～\" class=\"headerlink\" title=\"ruleservice设计 2019.11 ～\"></a>ruleservice设计 2019.11 ～</h3><h4 id=\"项目描述：\"><a href=\"#项目描述：\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>智能告警，是一个基于kafka数据流打造的集管理控制分析于一身的网络自制平台。</p>\n<h4 id=\"责任描述：\"><a href=\"#责任描述：\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是对智能告警服务规则设计以及功能测试</li>\n<li>flask 编写api接口对后台进行增删改查操作</li>\n<li>javascript 测试自动化用例的编写。</li>\n</ol>\n<h3 id=\"ODAE开发-2019-03-～-2019-11\"><a href=\"#ODAE开发-2019-03-～-2019-11\" class=\"headerlink\" title=\"ODAE开发 2019.03 ～ 2019.11\"></a>ODAE开发 2019.03 ～ 2019.11</h3><h4 id=\"项目描述：-1\"><a href=\"#项目描述：-1\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>一个运维数据分析平台，主要是用于规整和构建统一的运维数据模型和引擎，支持开发各种监控和分析类的运维保障，并为智能化运维提供完备的运维数据。</p>\n<h4 id=\"责任描述：-1\"><a href=\"#责任描述：-1\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><ol>\n<li>主要是编写集群的部署脚本，使平台的部署能够定时自动化部署，以及部署成功后自动卸载重新部署</li>\n<li>发现部署过程中可能存在的问题。以及帮助解决别人部署中的问题。</li>\n</ol>\n<h3 id=\"Flask构建可扩展的RESTful-API-2018-11-2018-12\"><a href=\"#Flask构建可扩展的RESTful-API-2018-11-2018-12\" class=\"headerlink\" title=\"Flask构建可扩展的RESTful-API  2018.11  ~  2018.12\"></a>Flask构建可扩展的RESTful-API  2018.11  ~  2018.12</h3><h4 id=\"责任描述：-2\"><a href=\"#责任描述：-2\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>基于蓝图创建红图,更好细分模块与视图函数；重构创建APIException异常，更适用于API异常；重构WtForm,参数自 校验,更适用于验证层抛出API异常；创建全局异常捕捉,统一全局异常返回格式；使用HTTPBasicAuth来自动验证 token；重写 get_or_404 与 ﬁrst_or_404；重写jsonify，使其支持模型序列化为dict返回json；使用Enum枚举类来 表示状态，更具可读性；制作scope权限，可灵活分配权限；orm模型支持hide跟append动态决定返回字段等 。</p>\n<h4 id=\"项目描述：-2\"><a href=\"#项目描述：-2\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>扩展重写Flask API,更好地支持接口编写,可作为API部分的demo</p>\n<h3 id=\"flask网页-2018-10-2018-11\"><a href=\"#flask网页-2018-10-2018-11\" class=\"headerlink\" title=\"flask网页  2018.10  ~ 2018.11\"></a>flask网页  2018.10  ~ 2018.11</h3><h4 id=\"责任描述：-3\"><a href=\"#责任描述：-3\" class=\"headerlink\" title=\"责任描述：\"></a>责任描述：</h4><p>网站使用ﬂask框架搭建，后端使用 python 编写;后端数据管理使用 mysql 数据库；蓝图注册视图函数；WTForms参 数验证；编写viewModel处理原始数据；Jinja2模板引擎；基于SQLAlchemy的CRUD；使用with的上下文特性自动开 启事务；ﬂask-login处理登陆逻辑；使用多线程异步发送邮件等。</p>\n<h4 id=\"项目描述：-3\"><a href=\"#项目描述：-3\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>项目的主要目的是实现自由平等交换闲置书籍的公益平台，每个人都可以在其中交换书籍，里面有一个虚拟货币”鱼 豆”，依靠其进行交易。 在网页中，每个人都可以搜索书籍，并进行交换。每个人可以查看当前自己的信息。</p>\n<p>使用到  flask + uwsgi + pipenv + nginx </p>\n<p><a href=\"http://v3.imwl.ga\" target=\"_blank\" rel=\"noopener\">http://v3.imwl.ga</a></p>\n<h3 id=\"个人小项目-2018-10-～\"><a href=\"#个人小项目-2018-10-～\" class=\"headerlink\" title=\"个人小项目 2018.10  ～\"></a>个人小项目 2018.10  ～</h3><h4 id=\"项目描述：-4\"><a href=\"#项目描述：-4\" class=\"headerlink\" title=\"项目描述：\"></a>项目描述：</h4><p>博客地址：<a href=\"https://imwl.ml/\">https://imwl.ml/</a> ,主要记录自己的学习过程。 使用hexo生成静态网页 + nginx 代理</p>\n<p>python网页编辑器 <a href=\"https://imwl.ml/jupyter\">https://imwl.ml/jupyter</a>， 主要是方便自己在线code，以及管理服务器。 主要使用 jupyter + nginx<br>等等</p>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ol>\n<li>爱生活，爱技术，爱折腾的阳光宅男。</li>\n<li>喜欢高效学习工作，在毕业设计期间曾学习过一些工业软件，拿到了院优毕设（前5%），并成功进入该公司。</li>\n<li>能勇于踏出自己的舒适区，不断地学习，不断地尝试新技术，充实自己， 能适应工作压力。</li>\n<li>给我一个机会， 定不会让您失望…</li>\n</ol>\n<h2 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h2><p>感谢您百忙之中阅读我的简历， 期待能有机会和您共事。</p>\n"},{"title":"分类","date":"2018-11-08T08:44:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-11-08 16:44:57\ntype: \"categories\"\n---\n","updated":"2020-04-01T09:23:43.688Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck8kb4opv0002tssakskazjzl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2018-11-08T13:04:43.000Z","type":"about","_content":"\n****\n# 搭建原因\n\n\n**粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下**\n\n\n**主要是来记录一些东西，进而督促自己学习**\n\n\n**因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜**\n\n\n**另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动**\n\n\n******\n\n\n\n\n\n******\n\n\n# 关于我\n\n**喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。**\n\n\n**喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独**\n\n\n\n**我的邮箱： imwl@live.com**\n\n\n******\n\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2018-11-08 21:04:43\ntype: \"about\"\n---\n\n****\n# 搭建原因\n\n\n**粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下**\n\n\n**主要是来记录一些东西，进而督促自己学习**\n\n\n**因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜**\n\n\n**另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动**\n\n\n******\n\n\n\n\n\n******\n\n\n# 关于我\n\n**喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。**\n\n\n**喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独**\n\n\n\n**我的邮箱： imwl@live.com**\n\n\n******\n\n","updated":"2020-04-01T09:23:43.688Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8kb4opx0003tssadr0f4nbo","content":"<hr>\n<h1 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h1><p><strong>粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下</strong></p>\n<p><strong>主要是来记录一些东西，进而督促自己学习</strong></p>\n<p><strong>因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜</strong></p>\n<p><strong>另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动</strong></p>\n<hr>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><strong>喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。</strong></p>\n<p><strong>喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独</strong></p>\n<p><strong>我的邮箱： <a href=\"mailto:imwl@live.com\" target=\"_blank\" rel=\"noopener\">imwl@live.com</a></strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"搭建原因\"><a href=\"#搭建原因\" class=\"headerlink\" title=\"搭建原因\"></a>搭建原因</h1><p><strong>粗略的搭建了一个hexo+next主题博客，可能以后闲下来会美化一下</strong></p>\n<p><strong>主要是来记录一些东西，进而督促自己学习</strong></p>\n<p><strong>因为我在空间朋友圈发表的东西经常喜欢删除，学习到的东西又不喜欢记录，时常觉得可惜</strong></p>\n<p><strong>另一方面写下东西，也可以与别人探讨一下技术，说不定就会有大神来指出我的纰漏呢？想想还有点激动</strong></p>\n<hr>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><strong>喜欢看电影，听音乐，有点宅，闲下来喜欢学习新的东西。</strong></p>\n<p><strong>喜欢独处，更喜欢与朋友玩耍。时而感觉到孤独，时而却享受孤独</strong></p>\n<p><strong>我的邮箱： <a href=\"mailto:imwl@live.com\" target=\"_blank\" rel=\"noopener\">imwl@live.com</a></strong></p>\n<hr>\n"}],"Post":[{"title":"flask高级编程_鱼书项目_填坑记","date":"2018-11-14T15:07:07.000Z","_content":"\n详细过程可以去我的个人博客上查看，另有flask构建可扩展restful-api过程.\n[个人博客](https://itswl.github.io)，gitbook 下\n\n## 本文主要是记录我在鱼书项目遇到的问题\n很多bug都是因为一点小小的原因导致的，所以以后还得仔细。\n\n### 1. 数据库表不能添加数据\n#### 产生场景\nlocalhost:2333/register 注册用户信息，提交后出现如下提示:\n\n![错误提示](https://upload-images.jianshu.io/upload_images/14597179-1528e2b9e557b92f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 产生原因\n![](https://upload-images.jianshu.io/upload_images/14597179-718df0c5743d901f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自己粗心，之前已经有添加_password,后来又在末尾加了_password,导致数据表生成不了password,所以在/register 注册后，出现bug。\n\n#### 解决过程\n在数据库user表中查询不到password字段，于是到model/user.py中查看到自己多写了一遍_password 代码，删除后成功。\n\n### 2. 搜索isbn成功，搜索关键字时失败\n![搜索关键字](https://upload-images.jianshu.io/upload_images/14597179-2b3d3a0dab7cc02b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![搜索isbn](https://upload-images.jianshu.io/upload_images/14597179-3f28623f8aa5351a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 产生原因\n![/book/search/](https://upload-images.jianshu.io/upload_images/14597179-d1f859099f3fc488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nrestful 格式 为 `search?q= xxx`,重构代码后。route修改有问题。\n\n#### 解决过程\n![/book/search](https://upload-images.jianshu.io/upload_images/14597179-58d225465cbbc2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n修改后正常，还是得细心。\n**注意事项**\nchrome 浏览器有缓存，修改后，即使网址 为 `.../book/search?q=xxx`,也会跳转成` .../book/searc/q=xxx`导致出错，清空一下浏览数据就可以了。\n\n### 3. 路由问题\n#### 产生场景\n注册后，重定向产生Bug\n![错误提示](https://upload-images.jianshu.io/upload_images/14597179-82cceb823e1c0a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 产生原因\nflask_login 中的重定向格式为web.login，这一段可能是我输入有误吧。直接给出了解决方案。\n#### 解决过程\n![](https://upload-images.jianshu.io/upload_images/14597179-b2c8fbaea6278e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将web/login 更改为web.login\n\n### 4. 有关于前端的问题\n\n因为最初 的时候，有一段前端代码得注释，当时不熟悉这一块，我还是按照python 中的方法，在前面加`#`号处理的，结果有问题，后来才发现不应该这样做。很久以前的问题了，当时也没保存，所以没有具体图片。当时的解决方案是把那些要注释掉的前端代码全部删除掉了。\n\n### 5. flask调试\n调试端口号默认为5000。\n`localhost:5000`，之前没仔细查看，一直在生产模式下调试，还一直进不了断点0.0\n\n### 6. 新增个人中心\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2729a25d4234a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码如下\n```\n@web.route('/personal')\ndef personal_center():\n    cur_user = User.query.get_or_404(current_user.id)  \n# 从数据库中查询出当前用户数据\n    user = cur_user.summary  \n # summary返回一个自定义的字典，详情在user模型下\n    # b = a.summary\n    return render_template('personal.html', user=user)  # 网页模板下\n\n```\n![summray](https://upload-images.jianshu.io/upload_images/14597179-7b7877d24f287d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![前端代码](https://upload-images.jianshu.io/upload_images/14597179-2ce000dcf082291d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n因为 user 是一个字典形式，从而得到数据。\n\n### 7. 新增修改密码\n之前没有看前端代码，所以password字段有问题，更改后，成功\n```\n@web.route('/change/password', methods=['GET', 'POST'])\n@login_required \ndef change_password():\n    form = ChangePasswordForm(request.form)\n\n    if request.method == 'POST' and form.validate():\n        if current_user.check_password(form.old_password.data):\n            current_user.change_password(form.password1.data)\n            flash('您的密码已重置，请使用新密码登录')\n            return redirect(url_for('web.login'))\n        flash('密码更改失败')\n    return render_template('auth/change_password.html')\n```\n![前端代码](https://upload-images.jianshu.io/upload_images/14597179-0b0796b6c1bb8427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n把 前端代码中的原密码改成old_password,新密码，确认新密码改为password1,password2 就可以了。\n暴露的问题，对前端这一块不熟。\n\n###8 . 新增API搜索的图书保存的mysql中\n最初使用的如下方式，一点都不优雅，后更改\n```\n    @classmethod\n    def insert_into_sql(cls, books):\n        for b in books:    # 优化后如上\n            with db.auto_commit():\n                try:\n                    if Book.query.filter_by(isbn=b.isbn).first():\n                        continue\n                    book = Book()\n                    book.title = b.title\n                    book.author = b.author\n                    book.binding =b.binding\n                    book.publisher = b.publisher\n                    book.price = b.price\n                    book.pages = b.pages\n                    book.isbn = b.isbn\n                    book.summary = b.summary\n                    book.image = b.image\n                    db.session.add(book)\n                except sqlalchemy.exc.DataError:\n                    pass\n```\n如下：\n```\n    @classmethod\n    def insert_into_sql(cls, books):\n        # book model 写入\n        import sqlalchemy\n        for b in books: # books是一个列表，每个元素是一个Book实例化后的对象\n            # print(111111111111, b.pages)\n            if Book.query.filter_by(isbn=b.isbn).first():  # 因为重复的isbn不能添加\n                        continue\n            with db.auto_commit():\n                book = Book()\n                book.set_attrs(b.__dict__)  # [b1, b2, b3] \n                # 类实例化后的一个对象 b.author b.title\n                db.session.add(book)\n```\nbase模型的部分代码：\n```\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column('create_time',Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n```\n\n#### 详细解释\n这一块，考虑的点特别多。因为从API拿来的数据，并不是很可靠。所以有一些数据为None,或者超出了长度，用以前的代码可能会报错\n```\n    def __init__(self, data):\n        self.title = data['title']\n        self.author = '、'.join(data['author'])\n        self.binding = data['binding']\n        self.publisher = data['publisher']\n        self.image = data['image']\n        # self.price = '￥' + data['price']  \n# 因为价格可能为NONE,str不能和NONE相加，会报错。\n# '￥'去掉，因为api中部分带货币单位\n        self.price = data['price'] \n\n        self.isbn = data['isbn']\n        self.pubdate = data['pubdate']\n\n# summuy长度最多取1000.\n        self.summary = data['summary'][:1000] if data['summary'] else ''\n        self.pages = data['pages'].replace('页', '') if data['pages'] else None\n\n    @property\n    def intro(self):\n        intros = filter(lambda x: True if x else False,\n                        [self.author, self.publisher, self.price])\n        return ' / '.join(intros)\n\n```\n以上是在view_modles 下book.py做的处理。要细心，多进行代码优化。\n\n\n\nweb/book.py部分代码\n```\n@web.route(\"/book/search\")\ndef search():\n    \"\"\"\n    搜索书籍路由\n    \"\"\"\n    # 实例化我们自定义的SearchForm，需要传入一个字典作为要校验的参数\n    form = SearchForm(request.args)\n    # validate()方法返回True/False来标示是否校验通过\n    books = BookCollection()\n    # if not form.validate():\n    #     # errors为错误信息提示（上面定义的message）\n    #     flash(\"搜索的关键字不符合要求，请重新输入关键字\")\n    #     return render_template('search_result.html', books=books)\n    # 从form中获取校验后的参数，不从request里拿，\n#因为我们可能会对数据进行预处理或者默认值的给定\n    q = form.q.data.strip()\n    page = form.page.data\n    isbn_or_key = is_isbn_or_key(q)\n    yushu_book = YuShuBook()\n    if form.validate():\n        if isbn_or_key == 'isbn':\n            yushu_book.search_by_isbn(q)\n            books.fill(yushu_book,q)\n            # print(11111, books.books)\n            # for b in books.books:\n            #     print('title', b.title)\n            #     print('author', b.author)\n        # result = YuShuBook.search_by_isbn(q)\n        # result = BookViewModel.package_single(result,q) \n        else:\n            yushu_book.search_by_key(q,page)        \n        # result = YuShuBook.search_by_keyword(q,page)\n        # result = BookViewModel.package_collection(result,q)\n    # return jsonify(result)\n            books.fill(yushu_book,q)\n        Book.insert_into_sql(books.books)   # 搜索的信息保存到SQL中\n    else:\n        flash(\"搜索的关键字不符合要求，请重新输入关键字\")\n\n    # return jsonify(books)  \n# TypeError: Object of type BookCollection is not JSON serializable\n    # return json.dumps(books, default=lambda o: o.__dict__)\n    return render_template('search_result.html', books=books)\n```\n","source":"_posts/flask框架学习/flask高级编程_鱼书项目_填坑记.md","raw":"\n---\ntitle: flask高级编程_鱼书项目_填坑记\ndate: 2018-11-14 23:07:07\ntags:\ncategories: flask\n---\n\n详细过程可以去我的个人博客上查看，另有flask构建可扩展restful-api过程.\n[个人博客](https://itswl.github.io)，gitbook 下\n\n## 本文主要是记录我在鱼书项目遇到的问题\n很多bug都是因为一点小小的原因导致的，所以以后还得仔细。\n\n### 1. 数据库表不能添加数据\n#### 产生场景\nlocalhost:2333/register 注册用户信息，提交后出现如下提示:\n\n![错误提示](https://upload-images.jianshu.io/upload_images/14597179-1528e2b9e557b92f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 产生原因\n![](https://upload-images.jianshu.io/upload_images/14597179-718df0c5743d901f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n自己粗心，之前已经有添加_password,后来又在末尾加了_password,导致数据表生成不了password,所以在/register 注册后，出现bug。\n\n#### 解决过程\n在数据库user表中查询不到password字段，于是到model/user.py中查看到自己多写了一遍_password 代码，删除后成功。\n\n### 2. 搜索isbn成功，搜索关键字时失败\n![搜索关键字](https://upload-images.jianshu.io/upload_images/14597179-2b3d3a0dab7cc02b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![搜索isbn](https://upload-images.jianshu.io/upload_images/14597179-3f28623f8aa5351a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 产生原因\n![/book/search/](https://upload-images.jianshu.io/upload_images/14597179-d1f859099f3fc488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nrestful 格式 为 `search?q= xxx`,重构代码后。route修改有问题。\n\n#### 解决过程\n![/book/search](https://upload-images.jianshu.io/upload_images/14597179-58d225465cbbc2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n修改后正常，还是得细心。\n**注意事项**\nchrome 浏览器有缓存，修改后，即使网址 为 `.../book/search?q=xxx`,也会跳转成` .../book/searc/q=xxx`导致出错，清空一下浏览数据就可以了。\n\n### 3. 路由问题\n#### 产生场景\n注册后，重定向产生Bug\n![错误提示](https://upload-images.jianshu.io/upload_images/14597179-82cceb823e1c0a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 产生原因\nflask_login 中的重定向格式为web.login，这一段可能是我输入有误吧。直接给出了解决方案。\n#### 解决过程\n![](https://upload-images.jianshu.io/upload_images/14597179-b2c8fbaea6278e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n将web/login 更改为web.login\n\n### 4. 有关于前端的问题\n\n因为最初 的时候，有一段前端代码得注释，当时不熟悉这一块，我还是按照python 中的方法，在前面加`#`号处理的，结果有问题，后来才发现不应该这样做。很久以前的问题了，当时也没保存，所以没有具体图片。当时的解决方案是把那些要注释掉的前端代码全部删除掉了。\n\n### 5. flask调试\n调试端口号默认为5000。\n`localhost:5000`，之前没仔细查看，一直在生产模式下调试，还一直进不了断点0.0\n\n### 6. 新增个人中心\n\n![](https://upload-images.jianshu.io/upload_images/14597179-2729a25d4234a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n代码如下\n```\n@web.route('/personal')\ndef personal_center():\n    cur_user = User.query.get_or_404(current_user.id)  \n# 从数据库中查询出当前用户数据\n    user = cur_user.summary  \n # summary返回一个自定义的字典，详情在user模型下\n    # b = a.summary\n    return render_template('personal.html', user=user)  # 网页模板下\n\n```\n![summray](https://upload-images.jianshu.io/upload_images/14597179-7b7877d24f287d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![前端代码](https://upload-images.jianshu.io/upload_images/14597179-2ce000dcf082291d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n因为 user 是一个字典形式，从而得到数据。\n\n### 7. 新增修改密码\n之前没有看前端代码，所以password字段有问题，更改后，成功\n```\n@web.route('/change/password', methods=['GET', 'POST'])\n@login_required \ndef change_password():\n    form = ChangePasswordForm(request.form)\n\n    if request.method == 'POST' and form.validate():\n        if current_user.check_password(form.old_password.data):\n            current_user.change_password(form.password1.data)\n            flash('您的密码已重置，请使用新密码登录')\n            return redirect(url_for('web.login'))\n        flash('密码更改失败')\n    return render_template('auth/change_password.html')\n```\n![前端代码](https://upload-images.jianshu.io/upload_images/14597179-0b0796b6c1bb8427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n把 前端代码中的原密码改成old_password,新密码，确认新密码改为password1,password2 就可以了。\n暴露的问题，对前端这一块不熟。\n\n###8 . 新增API搜索的图书保存的mysql中\n最初使用的如下方式，一点都不优雅，后更改\n```\n    @classmethod\n    def insert_into_sql(cls, books):\n        for b in books:    # 优化后如上\n            with db.auto_commit():\n                try:\n                    if Book.query.filter_by(isbn=b.isbn).first():\n                        continue\n                    book = Book()\n                    book.title = b.title\n                    book.author = b.author\n                    book.binding =b.binding\n                    book.publisher = b.publisher\n                    book.price = b.price\n                    book.pages = b.pages\n                    book.isbn = b.isbn\n                    book.summary = b.summary\n                    book.image = b.image\n                    db.session.add(book)\n                except sqlalchemy.exc.DataError:\n                    pass\n```\n如下：\n```\n    @classmethod\n    def insert_into_sql(cls, books):\n        # book model 写入\n        import sqlalchemy\n        for b in books: # books是一个列表，每个元素是一个Book实例化后的对象\n            # print(111111111111, b.pages)\n            if Book.query.filter_by(isbn=b.isbn).first():  # 因为重复的isbn不能添加\n                        continue\n            with db.auto_commit():\n                book = Book()\n                book.set_attrs(b.__dict__)  # [b1, b2, b3] \n                # 类实例化后的一个对象 b.author b.title\n                db.session.add(book)\n```\nbase模型的部分代码：\n```\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column('create_time',Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n```\n\n#### 详细解释\n这一块，考虑的点特别多。因为从API拿来的数据，并不是很可靠。所以有一些数据为None,或者超出了长度，用以前的代码可能会报错\n```\n    def __init__(self, data):\n        self.title = data['title']\n        self.author = '、'.join(data['author'])\n        self.binding = data['binding']\n        self.publisher = data['publisher']\n        self.image = data['image']\n        # self.price = '￥' + data['price']  \n# 因为价格可能为NONE,str不能和NONE相加，会报错。\n# '￥'去掉，因为api中部分带货币单位\n        self.price = data['price'] \n\n        self.isbn = data['isbn']\n        self.pubdate = data['pubdate']\n\n# summuy长度最多取1000.\n        self.summary = data['summary'][:1000] if data['summary'] else ''\n        self.pages = data['pages'].replace('页', '') if data['pages'] else None\n\n    @property\n    def intro(self):\n        intros = filter(lambda x: True if x else False,\n                        [self.author, self.publisher, self.price])\n        return ' / '.join(intros)\n\n```\n以上是在view_modles 下book.py做的处理。要细心，多进行代码优化。\n\n\n\nweb/book.py部分代码\n```\n@web.route(\"/book/search\")\ndef search():\n    \"\"\"\n    搜索书籍路由\n    \"\"\"\n    # 实例化我们自定义的SearchForm，需要传入一个字典作为要校验的参数\n    form = SearchForm(request.args)\n    # validate()方法返回True/False来标示是否校验通过\n    books = BookCollection()\n    # if not form.validate():\n    #     # errors为错误信息提示（上面定义的message）\n    #     flash(\"搜索的关键字不符合要求，请重新输入关键字\")\n    #     return render_template('search_result.html', books=books)\n    # 从form中获取校验后的参数，不从request里拿，\n#因为我们可能会对数据进行预处理或者默认值的给定\n    q = form.q.data.strip()\n    page = form.page.data\n    isbn_or_key = is_isbn_or_key(q)\n    yushu_book = YuShuBook()\n    if form.validate():\n        if isbn_or_key == 'isbn':\n            yushu_book.search_by_isbn(q)\n            books.fill(yushu_book,q)\n            # print(11111, books.books)\n            # for b in books.books:\n            #     print('title', b.title)\n            #     print('author', b.author)\n        # result = YuShuBook.search_by_isbn(q)\n        # result = BookViewModel.package_single(result,q) \n        else:\n            yushu_book.search_by_key(q,page)        \n        # result = YuShuBook.search_by_keyword(q,page)\n        # result = BookViewModel.package_collection(result,q)\n    # return jsonify(result)\n            books.fill(yushu_book,q)\n        Book.insert_into_sql(books.books)   # 搜索的信息保存到SQL中\n    else:\n        flash(\"搜索的关键字不符合要求，请重新输入关键字\")\n\n    # return jsonify(books)  \n# TypeError: Object of type BookCollection is not JSON serializable\n    # return json.dumps(books, default=lambda o: o.__dict__)\n    return render_template('search_result.html', books=books)\n```\n","slug":"flask框架学习/flask高级编程_鱼书项目_填坑记","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owf0004tssaebcjwh3a","content":"<p>详细过程可以去我的个人博客上查看，另有flask构建可扩展restful-api过程.<br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">个人博客</a>，gitbook 下</p>\n<h2 id=\"本文主要是记录我在鱼书项目遇到的问题\"><a href=\"#本文主要是记录我在鱼书项目遇到的问题\" class=\"headerlink\" title=\"本文主要是记录我在鱼书项目遇到的问题\"></a>本文主要是记录我在鱼书项目遇到的问题</h2><p>很多bug都是因为一点小小的原因导致的，所以以后还得仔细。</p>\n<h3 id=\"1-数据库表不能添加数据\"><a href=\"#1-数据库表不能添加数据\" class=\"headerlink\" title=\"1. 数据库表不能添加数据\"></a>1. 数据库表不能添加数据</h3><h4 id=\"产生场景\"><a href=\"#产生场景\" class=\"headerlink\" title=\"产生场景\"></a>产生场景</h4><p>localhost:2333/register 注册用户信息，提交后出现如下提示:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1528e2b9e557b92f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"错误提示\"></p>\n<h4 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-718df0c5743d901f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自己粗心，之前已经有添加_password,后来又在末尾加了_password,导致数据表生成不了password,所以在/register 注册后，出现bug。</p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>在数据库user表中查询不到password字段，于是到model/user.py中查看到自己多写了一遍_password 代码，删除后成功。</p>\n<h3 id=\"2-搜索isbn成功，搜索关键字时失败\"><a href=\"#2-搜索isbn成功，搜索关键字时失败\" class=\"headerlink\" title=\"2. 搜索isbn成功，搜索关键字时失败\"></a>2. 搜索isbn成功，搜索关键字时失败</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b3d3a0dab7cc02b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"搜索关键字\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3f28623f8aa5351a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"搜索isbn\"></p>\n<h4 id=\"产生原因-1\"><a href=\"#产生原因-1\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d1f859099f3fc488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"/book/search/\"><br>restful 格式 为 <code>search?q= xxx</code>,重构代码后。route修改有问题。</p>\n<h4 id=\"解决过程-1\"><a href=\"#解决过程-1\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-58d225465cbbc2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"/book/search\"><br>修改后正常，还是得细心。<br><strong>注意事项</strong><br>chrome 浏览器有缓存，修改后，即使网址 为 <code>.../book/search?q=xxx</code>,也会跳转成<code>.../book/searc/q=xxx</code>导致出错，清空一下浏览数据就可以了。</p>\n<h3 id=\"3-路由问题\"><a href=\"#3-路由问题\" class=\"headerlink\" title=\"3. 路由问题\"></a>3. 路由问题</h3><h4 id=\"产生场景-1\"><a href=\"#产生场景-1\" class=\"headerlink\" title=\"产生场景\"></a>产生场景</h4><p>注册后，重定向产生Bug<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-82cceb823e1c0a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"错误提示\"></p>\n<h4 id=\"产生原因-2\"><a href=\"#产生原因-2\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p>flask_login 中的重定向格式为web.login，这一段可能是我输入有误吧。直接给出了解决方案。</p>\n<h4 id=\"解决过程-2\"><a href=\"#解决过程-2\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b2c8fbaea6278e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将web/login 更改为web.login</p>\n<h3 id=\"4-有关于前端的问题\"><a href=\"#4-有关于前端的问题\" class=\"headerlink\" title=\"4. 有关于前端的问题\"></a>4. 有关于前端的问题</h3><p>因为最初 的时候，有一段前端代码得注释，当时不熟悉这一块，我还是按照python 中的方法，在前面加<code>#</code>号处理的，结果有问题，后来才发现不应该这样做。很久以前的问题了，当时也没保存，所以没有具体图片。当时的解决方案是把那些要注释掉的前端代码全部删除掉了。</p>\n<h3 id=\"5-flask调试\"><a href=\"#5-flask调试\" class=\"headerlink\" title=\"5. flask调试\"></a>5. flask调试</h3><p>调试端口号默认为5000。<br><code>localhost:5000</code>，之前没仔细查看，一直在生产模式下调试，还一直进不了断点0.0</p>\n<h3 id=\"6-新增个人中心\"><a href=\"#6-新增个人中心\" class=\"headerlink\" title=\"6. 新增个人中心\"></a>6. 新增个人中心</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2729a25d4234a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&apos;/personal&apos;)</span><br><span class=\"line\">def personal_center():</span><br><span class=\"line\">    cur_user = User.query.get_or_404(current_user.id)  </span><br><span class=\"line\"># 从数据库中查询出当前用户数据</span><br><span class=\"line\">    user = cur_user.summary  </span><br><span class=\"line\"> # summary返回一个自定义的字典，详情在user模型下</span><br><span class=\"line\">    # b = a.summary</span><br><span class=\"line\">    return render_template(&apos;personal.html&apos;, user=user)  # 网页模板下</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b7877d24f287d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"summray\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2ce000dcf082291d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前端代码\"></p>\n<p>因为 user 是一个字典形式，从而得到数据。</p>\n<h3 id=\"7-新增修改密码\"><a href=\"#7-新增修改密码\" class=\"headerlink\" title=\"7. 新增修改密码\"></a>7. 新增修改密码</h3><p>之前没有看前端代码，所以password字段有问题，更改后，成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&apos;/change/password&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class=\"line\">@login_required </span><br><span class=\"line\">def change_password():</span><br><span class=\"line\">    form = ChangePasswordForm(request.form)</span><br><span class=\"line\"></span><br><span class=\"line\">    if request.method == &apos;POST&apos; and form.validate():</span><br><span class=\"line\">        if current_user.check_password(form.old_password.data):</span><br><span class=\"line\">            current_user.change_password(form.password1.data)</span><br><span class=\"line\">            flash(&apos;您的密码已重置，请使用新密码登录&apos;)</span><br><span class=\"line\">            return redirect(url_for(&apos;web.login&apos;))</span><br><span class=\"line\">        flash(&apos;密码更改失败&apos;)</span><br><span class=\"line\">    return render_template(&apos;auth/change_password.html&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0b0796b6c1bb8427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前端代码\"><br>把 前端代码中的原密码改成old_password,新密码，确认新密码改为password1,password2 就可以了。<br>暴露的问题，对前端这一块不熟。</p>\n<p>###8 . 新增API搜索的图书保存的mysql中<br>最初使用的如下方式，一点都不优雅，后更改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classmethod</span><br><span class=\"line\">def insert_into_sql(cls, books):</span><br><span class=\"line\">    for b in books:    # 优化后如上</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                if Book.query.filter_by(isbn=b.isbn).first():</span><br><span class=\"line\">                    continue</span><br><span class=\"line\">                book = Book()</span><br><span class=\"line\">                book.title = b.title</span><br><span class=\"line\">                book.author = b.author</span><br><span class=\"line\">                book.binding =b.binding</span><br><span class=\"line\">                book.publisher = b.publisher</span><br><span class=\"line\">                book.price = b.price</span><br><span class=\"line\">                book.pages = b.pages</span><br><span class=\"line\">                book.isbn = b.isbn</span><br><span class=\"line\">                book.summary = b.summary</span><br><span class=\"line\">                book.image = b.image</span><br><span class=\"line\">                db.session.add(book)</span><br><span class=\"line\">            except sqlalchemy.exc.DataError:</span><br><span class=\"line\">                pass</span><br></pre></td></tr></table></figure></p>\n<p>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classmethod</span><br><span class=\"line\">def insert_into_sql(cls, books):</span><br><span class=\"line\">    # book model 写入</span><br><span class=\"line\">    import sqlalchemy</span><br><span class=\"line\">    for b in books: # books是一个列表，每个元素是一个Book实例化后的对象</span><br><span class=\"line\">        # print(111111111111, b.pages)</span><br><span class=\"line\">        if Book.query.filter_by(isbn=b.isbn).first():  # 因为重复的isbn不能添加</span><br><span class=\"line\">                    continue</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            book = Book()</span><br><span class=\"line\">            book.set_attrs(b.__dict__)  # [b1, b2, b3] </span><br><span class=\"line\">            # 类实例化后的一个对象 b.author b.title</span><br><span class=\"line\">            db.session.add(book)</span><br></pre></td></tr></table></figure></p>\n<p>base模型的部分代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(&apos;create_time&apos;,Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h4><p>这一块，考虑的点特别多。因为从API拿来的数据，并不是很可靠。所以有一些数据为None,或者超出了长度，用以前的代码可能会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        self.title = data[&apos;title&apos;]</span><br><span class=\"line\">        self.author = &apos;、&apos;.join(data[&apos;author&apos;])</span><br><span class=\"line\">        self.binding = data[&apos;binding&apos;]</span><br><span class=\"line\">        self.publisher = data[&apos;publisher&apos;]</span><br><span class=\"line\">        self.image = data[&apos;image&apos;]</span><br><span class=\"line\">        # self.price = &apos;￥&apos; + data[&apos;price&apos;]  </span><br><span class=\"line\"># 因为价格可能为NONE,str不能和NONE相加，会报错。</span><br><span class=\"line\"># &apos;￥&apos;去掉，因为api中部分带货币单位</span><br><span class=\"line\">        self.price = data[&apos;price&apos;] </span><br><span class=\"line\"></span><br><span class=\"line\">        self.isbn = data[&apos;isbn&apos;]</span><br><span class=\"line\">        self.pubdate = data[&apos;pubdate&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># summuy长度最多取1000.</span><br><span class=\"line\">        self.summary = data[&apos;summary&apos;][:1000] if data[&apos;summary&apos;] else &apos;&apos;</span><br><span class=\"line\">        self.pages = data[&apos;pages&apos;].replace(&apos;页&apos;, &apos;&apos;) if data[&apos;pages&apos;] else None</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def intro(self):</span><br><span class=\"line\">        intros = filter(lambda x: True if x else False,</span><br><span class=\"line\">                        [self.author, self.publisher, self.price])</span><br><span class=\"line\">        return &apos; / &apos;.join(intros)</span><br></pre></td></tr></table></figure></p>\n<p>以上是在view_modles 下book.py做的处理。要细心，多进行代码优化。</p>\n<p>web/book.py部分代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&quot;/book/search&quot;)</span><br><span class=\"line\">def search():</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 实例化我们自定义的SearchForm，需要传入一个字典作为要校验的参数</span><br><span class=\"line\">    form = SearchForm(request.args)</span><br><span class=\"line\">    # validate()方法返回True/False来标示是否校验通过</span><br><span class=\"line\">    books = BookCollection()</span><br><span class=\"line\">    # if not form.validate():</span><br><span class=\"line\">    #     # errors为错误信息提示（上面定义的message）</span><br><span class=\"line\">    #     flash(&quot;搜索的关键字不符合要求，请重新输入关键字&quot;)</span><br><span class=\"line\">    #     return render_template(&apos;search_result.html&apos;, books=books)</span><br><span class=\"line\">    # 从form中获取校验后的参数，不从request里拿，</span><br><span class=\"line\">#因为我们可能会对数据进行预处理或者默认值的给定</span><br><span class=\"line\">    q = form.q.data.strip()</span><br><span class=\"line\">    page = form.page.data</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">    yushu_book = YuShuBook()</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">            yushu_book.search_by_isbn(q)</span><br><span class=\"line\">            books.fill(yushu_book,q)</span><br><span class=\"line\">            # print(11111, books.books)</span><br><span class=\"line\">            # for b in books.books:</span><br><span class=\"line\">            #     print(&apos;title&apos;, b.title)</span><br><span class=\"line\">            #     print(&apos;author&apos;, b.author)</span><br><span class=\"line\">        # result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">        # result = BookViewModel.package_single(result,q) </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            yushu_book.search_by_key(q,page)        </span><br><span class=\"line\">        # result = YuShuBook.search_by_keyword(q,page)</span><br><span class=\"line\">        # result = BookViewModel.package_collection(result,q)</span><br><span class=\"line\">    # return jsonify(result)</span><br><span class=\"line\">            books.fill(yushu_book,q)</span><br><span class=\"line\">        Book.insert_into_sql(books.books)   # 搜索的信息保存到SQL中</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        flash(&quot;搜索的关键字不符合要求，请重新输入关键字&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # return jsonify(books)  </span><br><span class=\"line\"># TypeError: Object of type BookCollection is not JSON serializable</span><br><span class=\"line\">    # return json.dumps(books, default=lambda o: o.__dict__)</span><br><span class=\"line\">    return render_template(&apos;search_result.html&apos;, books=books)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>详细过程可以去我的个人博客上查看，另有flask构建可扩展restful-api过程.<br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">个人博客</a>，gitbook 下</p>\n<h2 id=\"本文主要是记录我在鱼书项目遇到的问题\"><a href=\"#本文主要是记录我在鱼书项目遇到的问题\" class=\"headerlink\" title=\"本文主要是记录我在鱼书项目遇到的问题\"></a>本文主要是记录我在鱼书项目遇到的问题</h2><p>很多bug都是因为一点小小的原因导致的，所以以后还得仔细。</p>\n<h3 id=\"1-数据库表不能添加数据\"><a href=\"#1-数据库表不能添加数据\" class=\"headerlink\" title=\"1. 数据库表不能添加数据\"></a>1. 数据库表不能添加数据</h3><h4 id=\"产生场景\"><a href=\"#产生场景\" class=\"headerlink\" title=\"产生场景\"></a>产生场景</h4><p>localhost:2333/register 注册用户信息，提交后出现如下提示:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1528e2b9e557b92f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"错误提示\"></p>\n<h4 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-718df0c5743d901f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>自己粗心，之前已经有添加_password,后来又在末尾加了_password,导致数据表生成不了password,所以在/register 注册后，出现bug。</p>\n<h4 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p>在数据库user表中查询不到password字段，于是到model/user.py中查看到自己多写了一遍_password 代码，删除后成功。</p>\n<h3 id=\"2-搜索isbn成功，搜索关键字时失败\"><a href=\"#2-搜索isbn成功，搜索关键字时失败\" class=\"headerlink\" title=\"2. 搜索isbn成功，搜索关键字时失败\"></a>2. 搜索isbn成功，搜索关键字时失败</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2b3d3a0dab7cc02b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"搜索关键字\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3f28623f8aa5351a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"搜索isbn\"></p>\n<h4 id=\"产生原因-1\"><a href=\"#产生原因-1\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d1f859099f3fc488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"/book/search/\"><br>restful 格式 为 <code>search?q= xxx</code>,重构代码后。route修改有问题。</p>\n<h4 id=\"解决过程-1\"><a href=\"#解决过程-1\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-58d225465cbbc2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"/book/search\"><br>修改后正常，还是得细心。<br><strong>注意事项</strong><br>chrome 浏览器有缓存，修改后，即使网址 为 <code>.../book/search?q=xxx</code>,也会跳转成<code>.../book/searc/q=xxx</code>导致出错，清空一下浏览数据就可以了。</p>\n<h3 id=\"3-路由问题\"><a href=\"#3-路由问题\" class=\"headerlink\" title=\"3. 路由问题\"></a>3. 路由问题</h3><h4 id=\"产生场景-1\"><a href=\"#产生场景-1\" class=\"headerlink\" title=\"产生场景\"></a>产生场景</h4><p>注册后，重定向产生Bug<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-82cceb823e1c0a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"错误提示\"></p>\n<h4 id=\"产生原因-2\"><a href=\"#产生原因-2\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h4><p>flask_login 中的重定向格式为web.login，这一段可能是我输入有误吧。直接给出了解决方案。</p>\n<h4 id=\"解决过程-2\"><a href=\"#解决过程-2\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h4><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b2c8fbaea6278e9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>将web/login 更改为web.login</p>\n<h3 id=\"4-有关于前端的问题\"><a href=\"#4-有关于前端的问题\" class=\"headerlink\" title=\"4. 有关于前端的问题\"></a>4. 有关于前端的问题</h3><p>因为最初 的时候，有一段前端代码得注释，当时不熟悉这一块，我还是按照python 中的方法，在前面加<code>#</code>号处理的，结果有问题，后来才发现不应该这样做。很久以前的问题了，当时也没保存，所以没有具体图片。当时的解决方案是把那些要注释掉的前端代码全部删除掉了。</p>\n<h3 id=\"5-flask调试\"><a href=\"#5-flask调试\" class=\"headerlink\" title=\"5. flask调试\"></a>5. flask调试</h3><p>调试端口号默认为5000。<br><code>localhost:5000</code>，之前没仔细查看，一直在生产模式下调试，还一直进不了断点0.0</p>\n<h3 id=\"6-新增个人中心\"><a href=\"#6-新增个人中心\" class=\"headerlink\" title=\"6. 新增个人中心\"></a>6. 新增个人中心</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2729a25d4234a7e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&apos;/personal&apos;)</span><br><span class=\"line\">def personal_center():</span><br><span class=\"line\">    cur_user = User.query.get_or_404(current_user.id)  </span><br><span class=\"line\"># 从数据库中查询出当前用户数据</span><br><span class=\"line\">    user = cur_user.summary  </span><br><span class=\"line\"> # summary返回一个自定义的字典，详情在user模型下</span><br><span class=\"line\">    # b = a.summary</span><br><span class=\"line\">    return render_template(&apos;personal.html&apos;, user=user)  # 网页模板下</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b7877d24f287d9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"summray\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2ce000dcf082291d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前端代码\"></p>\n<p>因为 user 是一个字典形式，从而得到数据。</p>\n<h3 id=\"7-新增修改密码\"><a href=\"#7-新增修改密码\" class=\"headerlink\" title=\"7. 新增修改密码\"></a>7. 新增修改密码</h3><p>之前没有看前端代码，所以password字段有问题，更改后，成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&apos;/change/password&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class=\"line\">@login_required </span><br><span class=\"line\">def change_password():</span><br><span class=\"line\">    form = ChangePasswordForm(request.form)</span><br><span class=\"line\"></span><br><span class=\"line\">    if request.method == &apos;POST&apos; and form.validate():</span><br><span class=\"line\">        if current_user.check_password(form.old_password.data):</span><br><span class=\"line\">            current_user.change_password(form.password1.data)</span><br><span class=\"line\">            flash(&apos;您的密码已重置，请使用新密码登录&apos;)</span><br><span class=\"line\">            return redirect(url_for(&apos;web.login&apos;))</span><br><span class=\"line\">        flash(&apos;密码更改失败&apos;)</span><br><span class=\"line\">    return render_template(&apos;auth/change_password.html&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0b0796b6c1bb8427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"前端代码\"><br>把 前端代码中的原密码改成old_password,新密码，确认新密码改为password1,password2 就可以了。<br>暴露的问题，对前端这一块不熟。</p>\n<p>###8 . 新增API搜索的图书保存的mysql中<br>最初使用的如下方式，一点都不优雅，后更改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classmethod</span><br><span class=\"line\">def insert_into_sql(cls, books):</span><br><span class=\"line\">    for b in books:    # 优化后如上</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                if Book.query.filter_by(isbn=b.isbn).first():</span><br><span class=\"line\">                    continue</span><br><span class=\"line\">                book = Book()</span><br><span class=\"line\">                book.title = b.title</span><br><span class=\"line\">                book.author = b.author</span><br><span class=\"line\">                book.binding =b.binding</span><br><span class=\"line\">                book.publisher = b.publisher</span><br><span class=\"line\">                book.price = b.price</span><br><span class=\"line\">                book.pages = b.pages</span><br><span class=\"line\">                book.isbn = b.isbn</span><br><span class=\"line\">                book.summary = b.summary</span><br><span class=\"line\">                book.image = b.image</span><br><span class=\"line\">                db.session.add(book)</span><br><span class=\"line\">            except sqlalchemy.exc.DataError:</span><br><span class=\"line\">                pass</span><br></pre></td></tr></table></figure></p>\n<p>如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classmethod</span><br><span class=\"line\">def insert_into_sql(cls, books):</span><br><span class=\"line\">    # book model 写入</span><br><span class=\"line\">    import sqlalchemy</span><br><span class=\"line\">    for b in books: # books是一个列表，每个元素是一个Book实例化后的对象</span><br><span class=\"line\">        # print(111111111111, b.pages)</span><br><span class=\"line\">        if Book.query.filter_by(isbn=b.isbn).first():  # 因为重复的isbn不能添加</span><br><span class=\"line\">                    continue</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            book = Book()</span><br><span class=\"line\">            book.set_attrs(b.__dict__)  # [b1, b2, b3] </span><br><span class=\"line\">            # 类实例化后的一个对象 b.author b.title</span><br><span class=\"line\">            db.session.add(book)</span><br></pre></td></tr></table></figure></p>\n<p>base模型的部分代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(&apos;create_time&apos;,Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h4><p>这一块，考虑的点特别多。因为从API拿来的数据，并不是很可靠。所以有一些数据为None,或者超出了长度，用以前的代码可能会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        self.title = data[&apos;title&apos;]</span><br><span class=\"line\">        self.author = &apos;、&apos;.join(data[&apos;author&apos;])</span><br><span class=\"line\">        self.binding = data[&apos;binding&apos;]</span><br><span class=\"line\">        self.publisher = data[&apos;publisher&apos;]</span><br><span class=\"line\">        self.image = data[&apos;image&apos;]</span><br><span class=\"line\">        # self.price = &apos;￥&apos; + data[&apos;price&apos;]  </span><br><span class=\"line\"># 因为价格可能为NONE,str不能和NONE相加，会报错。</span><br><span class=\"line\"># &apos;￥&apos;去掉，因为api中部分带货币单位</span><br><span class=\"line\">        self.price = data[&apos;price&apos;] </span><br><span class=\"line\"></span><br><span class=\"line\">        self.isbn = data[&apos;isbn&apos;]</span><br><span class=\"line\">        self.pubdate = data[&apos;pubdate&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># summuy长度最多取1000.</span><br><span class=\"line\">        self.summary = data[&apos;summary&apos;][:1000] if data[&apos;summary&apos;] else &apos;&apos;</span><br><span class=\"line\">        self.pages = data[&apos;pages&apos;].replace(&apos;页&apos;, &apos;&apos;) if data[&apos;pages&apos;] else None</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def intro(self):</span><br><span class=\"line\">        intros = filter(lambda x: True if x else False,</span><br><span class=\"line\">                        [self.author, self.publisher, self.price])</span><br><span class=\"line\">        return &apos; / &apos;.join(intros)</span><br></pre></td></tr></table></figure></p>\n<p>以上是在view_modles 下book.py做的处理。要细心，多进行代码优化。</p>\n<p>web/book.py部分代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@web.route(&quot;/book/search&quot;)</span><br><span class=\"line\">def search():</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 实例化我们自定义的SearchForm，需要传入一个字典作为要校验的参数</span><br><span class=\"line\">    form = SearchForm(request.args)</span><br><span class=\"line\">    # validate()方法返回True/False来标示是否校验通过</span><br><span class=\"line\">    books = BookCollection()</span><br><span class=\"line\">    # if not form.validate():</span><br><span class=\"line\">    #     # errors为错误信息提示（上面定义的message）</span><br><span class=\"line\">    #     flash(&quot;搜索的关键字不符合要求，请重新输入关键字&quot;)</span><br><span class=\"line\">    #     return render_template(&apos;search_result.html&apos;, books=books)</span><br><span class=\"line\">    # 从form中获取校验后的参数，不从request里拿，</span><br><span class=\"line\">#因为我们可能会对数据进行预处理或者默认值的给定</span><br><span class=\"line\">    q = form.q.data.strip()</span><br><span class=\"line\">    page = form.page.data</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">    yushu_book = YuShuBook()</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">            yushu_book.search_by_isbn(q)</span><br><span class=\"line\">            books.fill(yushu_book,q)</span><br><span class=\"line\">            # print(11111, books.books)</span><br><span class=\"line\">            # for b in books.books:</span><br><span class=\"line\">            #     print(&apos;title&apos;, b.title)</span><br><span class=\"line\">            #     print(&apos;author&apos;, b.author)</span><br><span class=\"line\">        # result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">        # result = BookViewModel.package_single(result,q) </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            yushu_book.search_by_key(q,page)        </span><br><span class=\"line\">        # result = YuShuBook.search_by_keyword(q,page)</span><br><span class=\"line\">        # result = BookViewModel.package_collection(result,q)</span><br><span class=\"line\">    # return jsonify(result)</span><br><span class=\"line\">            books.fill(yushu_book,q)</span><br><span class=\"line\">        Book.insert_into_sql(books.books)   # 搜索的信息保存到SQL中</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        flash(&quot;搜索的关键字不符合要求，请重新输入关键字&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # return jsonify(books)  </span><br><span class=\"line\"># TypeError: Object of type BookCollection is not JSON serializable</span><br><span class=\"line\">    # return json.dumps(books, default=lambda o: o.__dict__)</span><br><span class=\"line\">    return render_template(&apos;search_result.html&apos;, books=books)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"flask初识","date":"2018-11-14T15:07:07.000Z","_content":"\n\n# 准备工作\n1. 安装 python 环境\n2. 检验 python 和 pip 是否安装好（pip是安装python包的工具）\n(python到官网上下载安装升级，pip更新命令` python -m pip install --upgrade pip`)\n3. 新建项目文件夹 mkdir fisher\n4. (安装virtualenv)(虚拟环境可以隔离不同的版本)   # 可以直接第五步\n5. 安装使用pipnv  (`pip install pipenv`)(全局安装pipenv) \n(使用pipenv创建一个与项目绑定的虚拟环境。`cd fisher` 然后`pipenv install`) ,(`pipenv shell`进入虚拟环境)。  # pipenv是Python官方推荐的包管理工具。可以说，它集成了virtualenv, pip和pyenv三者的功能。\n6. 安装各种包\n(例如flask :` pipenv install flask`)\n##一些常用命令\n退出虚拟环境` exit `\n进入虚拟环境` pipenv shell`\n卸载包 eg:  `pipenv uninstall flask`\n使用`pipenv graph`命令可以看到依赖树\n\n## 一些工具\n\n**开发工具Pycharm(VScode)** (Pycharm 在断点调试和自动重启服务器支持较好)\n**Xampp(MySQL)**\n**Navicat(数据库可视化管理工具)**\n\n# 第一个flask应用\n```\nfrom flask import Flask\n\napp = Flask(__name__)    #类的实例化\n\n@app.route('/hello')  # 使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 /hello 可以访问\n#@app.route('/hello/')  #兼容/  把/hello 重定向到/hello/\ndef hello():\n    return 'hello world'\n\napp.run()\n```\n**route装饰器** ：可以使用Flask应用实例的route装饰器将一个URL规则绑定到 一个视图函数上，优雅方便但不够灵活\n**基于类的视图(即插视图),基于函数的视图**\n\n## 另一种路由注册方式\n`add_url_rule`\n```\nfrom flask import Flask\n\napp = Flask(__name__) \n\ndef hello1():\n    return 'hello China'\n\napp.add_url_rule('/hello1',view_func = hello1)\n\napp.run()\n```\n**一般都是用route装饰器，但即插视图，必须使用`add_url_rule`**\n\n## 运行方式\n```\n#app.run()  #直接运行\n#app.run(debug=True) #开启调试模式\n#app.run(host='192.168.2.136',debug=True) #指定ip地址，仅本机，网卡为192.168.2.136的可访问\n#app.run(host='0.0.0.0',debug=True) #起它ip地址也可以访问\n#app.run(host='0.0.0.0',debug=True,port=1)  #改端口\n```\n## 关于端口取值\n>- 一般用到的是1到65535,其中0不使用,1-1023为系统端口,也叫BSD保留端口;\n>- 1024-65535为用户端口， 又分为: BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535).\n>- 0-1023: BSD保留端口,也叫系统端口,这些端口只有系统特许的进程才能使用;\n>- 1024-5000: BSD临时端口,一般的应用程序使用1024到4999来进行通讯;\n>- 5001-65535: BSD服务器(非特权)端口,用来给用户自定义端口.\n\n>一般的应用程序就是指系统中的ftp，apache，ssh之类的应用程序。而用户自定义的应用程序就是你自己在系统上开发的应用程序。属于你的东西。操作系统不会把它作为一个通用的功能，集成到系统去。\n\n# 在生产环境下\n\n**同一个包中另建一个config.py模块,配置如下：**\n```\nDEBUG = True   #配置文件全大写，因为小写的找不到\n#注意事项: DEBUG默认为False\n```\n## 生产环境下\n```\nfrom flask import Flask\n\n__author__ = 'weilai'\n\napp = Flask(__name__) \napp.config.from_object('config')\n\n@app.route('/hello/')\ndef hello2():\n    return 'hello world'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',debug=app.config['DEBUG'],port=1)\n```\n**生产环境下使用的是：  nginx + uwsgi**\n**因为是调用这个模块，所以if __name__ 下面不会运行，这样就不会启用flask内置服务器**\n\n# 视图函数中return与普通函数的区别\n```\nfrom flask import Flask,make_response #创建response对象\n\n__author__ = 'weilai'\n\n#普通函数的return\ndef hello1():\n    return 'hello weilai'\n\napp = Flask(__name__)\napp.config.from_object('config')\n\n@app.route('/hello')\ndef hello():\n    headers = {\n        'content-type':'text/plain',   #把它当作普通字符串\n        'location': 'https://www.baidu.com'  # 301重定向\n        #'content-type': 'application/json'  #json字符串 #下面response就返回的json字符串\n    }\n    response = make_response('<html><html>',301)  #301是状态码，只是一个标识，不会影响内容\n    response.headers = headers\n    return response\n    #return '<html><html>',301,headers #上面3行也可以这样简写\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',debug=app.config['DEBUG'],port=1)\n```\n\n\n**视图函数不仅仅返回字符串，还返回一下 。。 等**\n  **#status code 200,404,301**\n    **#content-type http headers**\n    **#content-type = text/html (默认情况)**\n\n   **#本质上返回的  Response对象** \n\n","source":"_posts/flask框架学习/flask初识.md","raw":"---\ntitle: flask初识\ndate: 2018-11-14 23:07:07\ntags:\ncategories: flask\n---\n\n\n# 准备工作\n1. 安装 python 环境\n2. 检验 python 和 pip 是否安装好（pip是安装python包的工具）\n(python到官网上下载安装升级，pip更新命令` python -m pip install --upgrade pip`)\n3. 新建项目文件夹 mkdir fisher\n4. (安装virtualenv)(虚拟环境可以隔离不同的版本)   # 可以直接第五步\n5. 安装使用pipnv  (`pip install pipenv`)(全局安装pipenv) \n(使用pipenv创建一个与项目绑定的虚拟环境。`cd fisher` 然后`pipenv install`) ,(`pipenv shell`进入虚拟环境)。  # pipenv是Python官方推荐的包管理工具。可以说，它集成了virtualenv, pip和pyenv三者的功能。\n6. 安装各种包\n(例如flask :` pipenv install flask`)\n##一些常用命令\n退出虚拟环境` exit `\n进入虚拟环境` pipenv shell`\n卸载包 eg:  `pipenv uninstall flask`\n使用`pipenv graph`命令可以看到依赖树\n\n## 一些工具\n\n**开发工具Pycharm(VScode)** (Pycharm 在断点调试和自动重启服务器支持较好)\n**Xampp(MySQL)**\n**Navicat(数据库可视化管理工具)**\n\n# 第一个flask应用\n```\nfrom flask import Flask\n\napp = Flask(__name__)    #类的实例化\n\n@app.route('/hello')  # 使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 /hello 可以访问\n#@app.route('/hello/')  #兼容/  把/hello 重定向到/hello/\ndef hello():\n    return 'hello world'\n\napp.run()\n```\n**route装饰器** ：可以使用Flask应用实例的route装饰器将一个URL规则绑定到 一个视图函数上，优雅方便但不够灵活\n**基于类的视图(即插视图),基于函数的视图**\n\n## 另一种路由注册方式\n`add_url_rule`\n```\nfrom flask import Flask\n\napp = Flask(__name__) \n\ndef hello1():\n    return 'hello China'\n\napp.add_url_rule('/hello1',view_func = hello1)\n\napp.run()\n```\n**一般都是用route装饰器，但即插视图，必须使用`add_url_rule`**\n\n## 运行方式\n```\n#app.run()  #直接运行\n#app.run(debug=True) #开启调试模式\n#app.run(host='192.168.2.136',debug=True) #指定ip地址，仅本机，网卡为192.168.2.136的可访问\n#app.run(host='0.0.0.0',debug=True) #起它ip地址也可以访问\n#app.run(host='0.0.0.0',debug=True,port=1)  #改端口\n```\n## 关于端口取值\n>- 一般用到的是1到65535,其中0不使用,1-1023为系统端口,也叫BSD保留端口;\n>- 1024-65535为用户端口， 又分为: BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535).\n>- 0-1023: BSD保留端口,也叫系统端口,这些端口只有系统特许的进程才能使用;\n>- 1024-5000: BSD临时端口,一般的应用程序使用1024到4999来进行通讯;\n>- 5001-65535: BSD服务器(非特权)端口,用来给用户自定义端口.\n\n>一般的应用程序就是指系统中的ftp，apache，ssh之类的应用程序。而用户自定义的应用程序就是你自己在系统上开发的应用程序。属于你的东西。操作系统不会把它作为一个通用的功能，集成到系统去。\n\n# 在生产环境下\n\n**同一个包中另建一个config.py模块,配置如下：**\n```\nDEBUG = True   #配置文件全大写，因为小写的找不到\n#注意事项: DEBUG默认为False\n```\n## 生产环境下\n```\nfrom flask import Flask\n\n__author__ = 'weilai'\n\napp = Flask(__name__) \napp.config.from_object('config')\n\n@app.route('/hello/')\ndef hello2():\n    return 'hello world'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',debug=app.config['DEBUG'],port=1)\n```\n**生产环境下使用的是：  nginx + uwsgi**\n**因为是调用这个模块，所以if __name__ 下面不会运行，这样就不会启用flask内置服务器**\n\n# 视图函数中return与普通函数的区别\n```\nfrom flask import Flask,make_response #创建response对象\n\n__author__ = 'weilai'\n\n#普通函数的return\ndef hello1():\n    return 'hello weilai'\n\napp = Flask(__name__)\napp.config.from_object('config')\n\n@app.route('/hello')\ndef hello():\n    headers = {\n        'content-type':'text/plain',   #把它当作普通字符串\n        'location': 'https://www.baidu.com'  # 301重定向\n        #'content-type': 'application/json'  #json字符串 #下面response就返回的json字符串\n    }\n    response = make_response('<html><html>',301)  #301是状态码，只是一个标识，不会影响内容\n    response.headers = headers\n    return response\n    #return '<html><html>',301,headers #上面3行也可以这样简写\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0',debug=app.config['DEBUG'],port=1)\n```\n\n\n**视图函数不仅仅返回字符串，还返回一下 。。 等**\n  **#status code 200,404,301**\n    **#content-type http headers**\n    **#content-type = text/html (默认情况)**\n\n   **#本质上返回的  Response对象** \n\n","slug":"flask框架学习/flask初识","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owl0005tssashbq3075","content":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ol>\n<li>安装 python 环境</li>\n<li>检验 python 和 pip 是否安装好（pip是安装python包的工具）<br>(python到官网上下载安装升级，pip更新命令<code>python -m pip install --upgrade pip</code>)</li>\n<li>新建项目文件夹 mkdir fisher</li>\n<li>(安装virtualenv)(虚拟环境可以隔离不同的版本)   # 可以直接第五步</li>\n<li>安装使用pipnv  (<code>pip install pipenv</code>)(全局安装pipenv)<br>(使用pipenv创建一个与项目绑定的虚拟环境。<code>cd fisher</code> 然后<code>pipenv install</code>) ,(<code>pipenv shell</code>进入虚拟环境)。  # pipenv是Python官方推荐的包管理工具。可以说，它集成了virtualenv, pip和pyenv三者的功能。</li>\n<li>安装各种包<br>(例如flask :<code>pipenv install flask</code>)<br>##一些常用命令<br>退出虚拟环境<code>exit</code><br>进入虚拟环境<code>pipenv shell</code><br>卸载包 eg:  <code>pipenv uninstall flask</code><br>使用<code>pipenv graph</code>命令可以看到依赖树</li>\n</ol>\n<h2 id=\"一些工具\"><a href=\"#一些工具\" class=\"headerlink\" title=\"一些工具\"></a>一些工具</h2><p><strong>开发工具Pycharm(VScode)</strong> (Pycharm 在断点调试和自动重启服务器支持较好)<br><strong>Xampp(MySQL)</strong><br><strong>Navicat(数据库可视化管理工具)</strong></p>\n<h1 id=\"第一个flask应用\"><a href=\"#第一个flask应用\" class=\"headerlink\" title=\"第一个flask应用\"></a>第一个flask应用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)    #类的实例化</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello&apos;)  # 使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 /hello 可以访问</span><br><span class=\"line\">#@app.route(&apos;/hello/&apos;)  #兼容/  把/hello 重定向到/hello/</span><br><span class=\"line\">def hello():</span><br><span class=\"line\">    return &apos;hello world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>route装饰器</strong> ：可以使用Flask应用实例的route装饰器将一个URL规则绑定到 一个视图函数上，优雅方便但不够灵活<br><strong>基于类的视图(即插视图),基于函数的视图</strong></p>\n<h2 id=\"另一种路由注册方式\"><a href=\"#另一种路由注册方式\" class=\"headerlink\" title=\"另一种路由注册方式\"></a>另一种路由注册方式</h2><p><code>add_url_rule</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\"></span><br><span class=\"line\">def hello1():</span><br><span class=\"line\">    return &apos;hello China&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app.add_url_rule(&apos;/hello1&apos;,view_func = hello1)</span><br><span class=\"line\"></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure></p>\n<p><strong>一般都是用route装饰器，但即插视图，必须使用<code>add_url_rule</code></strong></p>\n<h2 id=\"运行方式\"><a href=\"#运行方式\" class=\"headerlink\" title=\"运行方式\"></a>运行方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#app.run()  #直接运行</span><br><span class=\"line\">#app.run(debug=True) #开启调试模式</span><br><span class=\"line\">#app.run(host=&apos;192.168.2.136&apos;,debug=True) #指定ip地址，仅本机，网卡为192.168.2.136的可访问</span><br><span class=\"line\">#app.run(host=&apos;0.0.0.0&apos;,debug=True) #起它ip地址也可以访问</span><br><span class=\"line\">#app.run(host=&apos;0.0.0.0&apos;,debug=True,port=1)  #改端口</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于端口取值\"><a href=\"#关于端口取值\" class=\"headerlink\" title=\"关于端口取值\"></a>关于端口取值</h2><blockquote>\n<ul>\n<li>一般用到的是1到65535,其中0不使用,1-1023为系统端口,也叫BSD保留端口;</li>\n<li>1024-65535为用户端口， 又分为: BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535).</li>\n<li>0-1023: BSD保留端口,也叫系统端口,这些端口只有系统特许的进程才能使用;</li>\n<li>1024-5000: BSD临时端口,一般的应用程序使用1024到4999来进行通讯;</li>\n<li>5001-65535: BSD服务器(非特权)端口,用来给用户自定义端口.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>一般的应用程序就是指系统中的ftp，apache，ssh之类的应用程序。而用户自定义的应用程序就是你自己在系统上开发的应用程序。属于你的东西。操作系统不会把它作为一个通用的功能，集成到系统去。</p>\n</blockquote>\n<h1 id=\"在生产环境下\"><a href=\"#在生产环境下\" class=\"headerlink\" title=\"在生产环境下\"></a>在生产环境下</h1><p><strong>同一个包中另建一个config.py模块,配置如下：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG = True   #配置文件全大写，因为小写的找不到</span><br><span class=\"line\">#注意事项: DEBUG默认为False</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生产环境下\"><a href=\"#生产环境下\" class=\"headerlink\" title=\"生产环境下\"></a>生产环境下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &apos;weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\">app.config.from_object(&apos;config&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello/&apos;)</span><br><span class=\"line\">def hello2():</span><br><span class=\"line\">    return &apos;hello world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;,debug=app.config[&apos;DEBUG&apos;],port=1)</span><br></pre></td></tr></table></figure>\n<p><strong>生产环境下使用的是：  nginx + uwsgi</strong><br><strong>因为是调用这个模块，所以if <strong>name</strong> 下面不会运行，这样就不会启用flask内置服务器</strong></p>\n<h1 id=\"视图函数中return与普通函数的区别\"><a href=\"#视图函数中return与普通函数的区别\" class=\"headerlink\" title=\"视图函数中return与普通函数的区别\"></a>视图函数中return与普通函数的区别</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,make_response #创建response对象</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &apos;weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数的return</span><br><span class=\"line\">def hello1():</span><br><span class=\"line\">    return &apos;hello weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(&apos;config&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello&apos;)</span><br><span class=\"line\">def hello():</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        &apos;content-type&apos;:&apos;text/plain&apos;,   #把它当作普通字符串</span><br><span class=\"line\">        &apos;location&apos;: &apos;https://www.baidu.com&apos;  # 301重定向</span><br><span class=\"line\">        #&apos;content-type&apos;: &apos;application/json&apos;  #json字符串 #下面response就返回的json字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = make_response(&apos;&lt;html&gt;&lt;html&gt;&apos;,301)  #301是状态码，只是一个标识，不会影响内容</span><br><span class=\"line\">    response.headers = headers</span><br><span class=\"line\">    return response</span><br><span class=\"line\">    #return &apos;&lt;html&gt;&lt;html&gt;&apos;,301,headers #上面3行也可以这样简写</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;,debug=app.config[&apos;DEBUG&apos;],port=1)</span><br></pre></td></tr></table></figure>\n<p><strong>视图函数不仅仅返回字符串，还返回一下 。。 等</strong><br>  <strong>#status code 200,404,301</strong><br>    <strong>#content-type http headers</strong><br>    <strong>#content-type = text/html (默认情况)</strong></p>\n<p>   <strong>#本质上返回的  Response对象</strong> </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ol>\n<li>安装 python 环境</li>\n<li>检验 python 和 pip 是否安装好（pip是安装python包的工具）<br>(python到官网上下载安装升级，pip更新命令<code>python -m pip install --upgrade pip</code>)</li>\n<li>新建项目文件夹 mkdir fisher</li>\n<li>(安装virtualenv)(虚拟环境可以隔离不同的版本)   # 可以直接第五步</li>\n<li>安装使用pipnv  (<code>pip install pipenv</code>)(全局安装pipenv)<br>(使用pipenv创建一个与项目绑定的虚拟环境。<code>cd fisher</code> 然后<code>pipenv install</code>) ,(<code>pipenv shell</code>进入虚拟环境)。  # pipenv是Python官方推荐的包管理工具。可以说，它集成了virtualenv, pip和pyenv三者的功能。</li>\n<li>安装各种包<br>(例如flask :<code>pipenv install flask</code>)<br>##一些常用命令<br>退出虚拟环境<code>exit</code><br>进入虚拟环境<code>pipenv shell</code><br>卸载包 eg:  <code>pipenv uninstall flask</code><br>使用<code>pipenv graph</code>命令可以看到依赖树</li>\n</ol>\n<h2 id=\"一些工具\"><a href=\"#一些工具\" class=\"headerlink\" title=\"一些工具\"></a>一些工具</h2><p><strong>开发工具Pycharm(VScode)</strong> (Pycharm 在断点调试和自动重启服务器支持较好)<br><strong>Xampp(MySQL)</strong><br><strong>Navicat(数据库可视化管理工具)</strong></p>\n<h1 id=\"第一个flask应用\"><a href=\"#第一个flask应用\" class=\"headerlink\" title=\"第一个flask应用\"></a>第一个flask应用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)    #类的实例化</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello&apos;)  # 使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 /hello 可以访问</span><br><span class=\"line\">#@app.route(&apos;/hello/&apos;)  #兼容/  把/hello 重定向到/hello/</span><br><span class=\"line\">def hello():</span><br><span class=\"line\">    return &apos;hello world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>route装饰器</strong> ：可以使用Flask应用实例的route装饰器将一个URL规则绑定到 一个视图函数上，优雅方便但不够灵活<br><strong>基于类的视图(即插视图),基于函数的视图</strong></p>\n<h2 id=\"另一种路由注册方式\"><a href=\"#另一种路由注册方式\" class=\"headerlink\" title=\"另一种路由注册方式\"></a>另一种路由注册方式</h2><p><code>add_url_rule</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\"></span><br><span class=\"line\">def hello1():</span><br><span class=\"line\">    return &apos;hello China&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app.add_url_rule(&apos;/hello1&apos;,view_func = hello1)</span><br><span class=\"line\"></span><br><span class=\"line\">app.run()</span><br></pre></td></tr></table></figure></p>\n<p><strong>一般都是用route装饰器，但即插视图，必须使用<code>add_url_rule</code></strong></p>\n<h2 id=\"运行方式\"><a href=\"#运行方式\" class=\"headerlink\" title=\"运行方式\"></a>运行方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#app.run()  #直接运行</span><br><span class=\"line\">#app.run(debug=True) #开启调试模式</span><br><span class=\"line\">#app.run(host=&apos;192.168.2.136&apos;,debug=True) #指定ip地址，仅本机，网卡为192.168.2.136的可访问</span><br><span class=\"line\">#app.run(host=&apos;0.0.0.0&apos;,debug=True) #起它ip地址也可以访问</span><br><span class=\"line\">#app.run(host=&apos;0.0.0.0&apos;,debug=True,port=1)  #改端口</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于端口取值\"><a href=\"#关于端口取值\" class=\"headerlink\" title=\"关于端口取值\"></a>关于端口取值</h2><blockquote>\n<ul>\n<li>一般用到的是1到65535,其中0不使用,1-1023为系统端口,也叫BSD保留端口;</li>\n<li>1024-65535为用户端口， 又分为: BSD临时端口(1024-5000)和BSD服务器(非特权)端口(5001-65535).</li>\n<li>0-1023: BSD保留端口,也叫系统端口,这些端口只有系统特许的进程才能使用;</li>\n<li>1024-5000: BSD临时端口,一般的应用程序使用1024到4999来进行通讯;</li>\n<li>5001-65535: BSD服务器(非特权)端口,用来给用户自定义端口.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>一般的应用程序就是指系统中的ftp，apache，ssh之类的应用程序。而用户自定义的应用程序就是你自己在系统上开发的应用程序。属于你的东西。操作系统不会把它作为一个通用的功能，集成到系统去。</p>\n</blockquote>\n<h1 id=\"在生产环境下\"><a href=\"#在生产环境下\" class=\"headerlink\" title=\"在生产环境下\"></a>在生产环境下</h1><p><strong>同一个包中另建一个config.py模块,配置如下：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG = True   #配置文件全大写，因为小写的找不到</span><br><span class=\"line\">#注意事项: DEBUG默认为False</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生产环境下\"><a href=\"#生产环境下\" class=\"headerlink\" title=\"生产环境下\"></a>生产环境下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &apos;weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__) </span><br><span class=\"line\">app.config.from_object(&apos;config&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello/&apos;)</span><br><span class=\"line\">def hello2():</span><br><span class=\"line\">    return &apos;hello world&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;,debug=app.config[&apos;DEBUG&apos;],port=1)</span><br></pre></td></tr></table></figure>\n<p><strong>生产环境下使用的是：  nginx + uwsgi</strong><br><strong>因为是调用这个模块，所以if <strong>name</strong> 下面不会运行，这样就不会启用flask内置服务器</strong></p>\n<h1 id=\"视图函数中return与普通函数的区别\"><a href=\"#视图函数中return与普通函数的区别\" class=\"headerlink\" title=\"视图函数中return与普通函数的区别\"></a>视图函数中return与普通函数的区别</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,make_response #创建response对象</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &apos;weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数的return</span><br><span class=\"line\">def hello1():</span><br><span class=\"line\">    return &apos;hello weilai&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(&apos;config&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/hello&apos;)</span><br><span class=\"line\">def hello():</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        &apos;content-type&apos;:&apos;text/plain&apos;,   #把它当作普通字符串</span><br><span class=\"line\">        &apos;location&apos;: &apos;https://www.baidu.com&apos;  # 301重定向</span><br><span class=\"line\">        #&apos;content-type&apos;: &apos;application/json&apos;  #json字符串 #下面response就返回的json字符串</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = make_response(&apos;&lt;html&gt;&lt;html&gt;&apos;,301)  #301是状态码，只是一个标识，不会影响内容</span><br><span class=\"line\">    response.headers = headers</span><br><span class=\"line\">    return response</span><br><span class=\"line\">    #return &apos;&lt;html&gt;&lt;html&gt;&apos;,301,headers #上面3行也可以这样简写</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;,debug=app.config[&apos;DEBUG&apos;],port=1)</span><br></pre></td></tr></table></figure>\n<p><strong>视图函数不仅仅返回字符串，还返回一下 。。 等</strong><br>  <strong>#status code 200,404,301</strong><br>    <strong>#content-type http headers</strong><br>    <strong>#content-type = text/html (默认情况)</strong></p>\n<p>   <strong>#本质上返回的  Response对象</strong> </p>\n"},{"title":"初识鱼书项目","date":"2018-11-14T15:07:07.000Z","_content":"\n#定义参数，判断查询参数q是否是isbn号\n```\n@app.route(\"/search/<q>/<page>\")\ndef search(q,page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    # isbn isbn13 由13个0-9在数字组成\n    # isbn10 由10表0-9表数字组组成，中间可能包含' - '\n\n    isbn_or_key = 'key'\n    if len(q) == 13 and q.isdigit():\n        isbn_or_key = 'isbn'\n    short_q = q.replace('-', '')\n    if '-' in q and len(short_q) == 10 and short_q.isdigit():\n        isbn_or_key = 'isbn'\n    pass\n```\n**知识点：**\n\n- 字符串有一个函数isdigit()可以判断是否为数字\n- in 关键字可以判断一个字符串是否在另一个字符串内\n- 多个逻辑判断排列原则：1.大部分判断结果为假的条件应该放在前面；2.需要查询数据库的操作由于会消耗资源，应该尽量靠后\n\n#简单的重构\n将上一小节的判断语句全都写到search函数中的几个缺点：\n1. 使得代码非常的臃肿，现在只有两个判断就占用了6行，如果有多个判断，search方法就要爆炸了\n2. 如果有其他地方的代码也要进行这个判断，那么就需要再重新写一遍，同样的代码重现在了两个地方\n3. 代码可读性查，作为一个路由函数，代码阅读者很难一眼看出路由函数的主要功能。\n\n重构后的代码\n**fisher.py**\n```\n@app.route(\"/search/<q>/<page>\")\ndef search(q, page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    isbn_or_key = is_isbn_or_key(q)\n```\n**helper.py**\n```\ndef is_isbn_or_key(word):\n    \"\"\"\n        判断word是isbn号还是查询关键字key\n        isbn isbn13 由13个0-9在数字组成\n        isbn10 由10表0-9表数字组组成，中间可能包含' - '\n    :param word:\n    :return: key or isbn\n    \"\"\"\n    isbn_or_key = 'key'\n    if len(word) == 13 and word.isdigit():\n        isbn_or_key = 'isbn'\n    short_word = word.replace('-', '')\n    if '-' in word and len(short_word) == 10 and short_word.isdigit():\n        isbn_or_key = 'isbn'\n    return isbn_or_key\n```\n**知识点：**\n\n- 其他地方的代码多一点还可以接受，视图函数中不可以，因为视图函数是一个web项目的入口。所有人阅读都是从这里入手，应该把细节屏蔽掉，给阅读者一个选择。\n- 看源码的技巧：先通读整体，了解整体过程，再回过头来了解细节，不要从一开始就深究每一个细节\n- 过多的注释会让代码变的臃肿，尽量使用易懂的函数名来代替注释，保持代码的简洁性\n**使用三元表达式优化**\n```\nimport requests\nclass HTTP:  #class HTTP(object):有无都无所谓\n\n    @staticmethod\n    def get(url,return_json=True):\n    \n        r = requests.get(url)\n\n\n        if r.status_code == 200:\n            if return_json():\n                return r.json()\n            else:\n                return r.text\n        else:\n            if return_json:\n                return {}\n            else:\n                return ''\n```\n**优化后**\n ```\nimport requests\nclass HTTP:  #class HTTP(object):有无都无所谓\n\n    @staticmethod\n    def get(url,return_json=True):\n    \n        r = requests.get(url)\n\n\n        if r.status_code != 200:\n            return {} if return_json else ''      #特例情况\n        return r.json() if return_json else r.text   #正常返回\n```\n\n**知识点：**\n\n- 简化if-else语句的几种方式 1.使用三元表达式 ；2.if+return；3.将if-else里的代码提取成函数\n- if+return的理解：把最后一句return前的if+return 全都理解为正常流程之外的一种特例情况的处理；多次if-return，提前结束一些逻辑分支，可以提高代码思维的清晰性\n- requests的一些说明：1.get()发送get请求；2.返回结果r.status_code 获取返回状态吗；3.r.json()将返回结果序列化成json;4.r.text 将返回结果不做处理直接返回\n\n**从API获取数据**\n将具体调用HTTP请求，获取结果的业务代码封装到YuShuBook中\n```\nclass YuShuBook:\n\n    search_by_isbn_url = \"http://t.yushu.im/v2/book/search/isbn/{}\"\n\n    search_by_key_url = \"http://t.yushu.im/v2/book/search?q={}&count={}&start={}\"\n\n    @classmethod\n    def search_by_isbn(cls, isbn):\n        url = cls.search_by_isbn_url.format(isbn)\n        return HTTP.get(url)\n\n    @classmethod\n    def search_by_key(cls, q, count=15, start=0):\n        url = cls.search_by_key_url.format(q, count, start)\n        return HTTP.get(url)\n```\n使用json.dumps 序列表返回结果，在视图函数中进行返回，并声明状态码和返回类型(一个元组)\n```\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    isbn_or_key = is_isbn_or_key(q)\n    if isbn_or_key == 'isbn':\n        result = YuShuBook.search_by_isbn(q)\n    else:\n        result = YuShuBook.search_by_key(q)\n```\n    return json.dumps(result), 200, {'content-type': 'application/json'}\n可以使用flask提供的jsonify替换的json.dumps和元组\n\n    return jsonify(result)\n\n\n\n## 2.6 将视图函数拆分到单独的模块中\n\n### 1.将试图函数都放在一个文件中有哪些不足：\n\n1.代码太长，不利于维护\n2.从业务模型抽象的角度，不应该把他们都放在一个文件中。关于书籍相关的API就应该放在书籍模型的视图函数文件中，跟用户相关的API就应该放在用户模型相关的文件中\n3.入口文件的意义比较独特，会启动web服务器以及做很多初始化的操作，就算要放在一个文件也不应该业务的操作放在入口文件中来\n\n### 2.尝试拆分模块\n\n思路，将试图函数抽离到单独的包中，然后在新的试图文件中引入flask.py来导入app核心对象。为了新的试图文件中的路由可以成功注册，再在flask.py中引入刚刚抽离出的试图模块\n\n修改后的fisher.py\n\n```\nfrom flask import Flask\n\n# 为了可以注册book.py中的路由\nfrom app.web import book\n\napp = Flask(__name__)\n\napp.config.from_object(\"config\")\n\nif __name__ == \"__main__\":\napp.run(host=app.config[\"HOST\"], debug=app.config[\"DEBUG\"], port=app.config[\"PORT\"])\n\n```\n\n新增的book.py\n\n```\nfrom flask import jsonify\n\nfrom helper import is_isbn_or_key\nfrom yushu_book import YuShuBook\n\n# 为了让book.py模块可以使用app对象\nfrom fisher import app\n\n__author__ = \"gaowenfeng\"\n\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n\"\"\"\n搜索书籍路由\n:param q: 关键字 OR isbn\n:param page: 页码\n\"\"\"\nisbn_or_key = is_isbn_or_key(q)\nif isbn_or_key == 'isbn':\nresult = YuShuBook.search_by_isbn(q)\nelse:\nresult = YuShuBook.search_by_key(q)\n\nreturn jsonify(result)\n\n```\n\n但是这样做并不是正确的做法，结果表明，这样修改以后，访问search api会404\n\n为了知道为什么这样做不行，我们需要先刨铣一下Flask路由机制的原理\n\n### 3.Flask路由机制\n\n\nflask的基本思想是内部会维护一个字典。每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点。用于反向构建URL（后面会讲解)\n\nflask的路由注册`app_url_rule(url=,view_func=,endpoint=)`会接受三个参数，前两个我们都知道了，第三个就是上面说的endpoint。他的默认值是view_func的名称。当然，`app.route('url',endpoint=)`也可以传入\n\nflask route的部分源码\n\n```\n# 注册路由的装饰器\ndef route(self, rule, **options):\ndef decorator(f):\nendpoint = options.pop('endpoint', None)\n# 装饰器内部也是调用了add_url_rule\nself.add_url_rule(rule, endpoint, f, **options)\nreturn f\nreturn decorator\n# 注册路由\n@setupmethod\ndef add_url_rule(self, rule, endpoint=None, view_func=None,\nprovide_automatic_options=None, **options):\n\n# 如果endpoint传入的None，则使用视图函数名作为endpoint\nif endpoint is None:\nendpoint = _endpoint_from_view_func(view_func)\noptions['endpoint'] = endpoint\nmethods = options.pop('methods', None)\n\n# 默认的method是GET请求\nif methods is None:\nmethods = getattr(view_func, 'methods', None) or ('GET',)\nif isinstance(methods, string_types):\nraise TypeError('Allowed methods have to be iterables of strings, '\n'for example: @app.route(..., methods=[\"POST\"])')\nmethods = set(item.upper() for item in methods)\n\n...\n...\n...\n\nrule = self.url_rule_class(rule, methods=methods, **options)\nrule.provide_automatic_options = provide_automatic_options\n\n# 将url->endpoint 的规则维护到url_map\nself.url_map.add(rule)\nif view_func is not None:\nold_func = self.view_functions.get(endpoint)\nif old_func is not None and old_func != view_func:\nraise AssertionError('View function mapping is overwriting an '\n'existing endpoint function: %s' % endpoint)\n# 记录endpoint 所指向的view_func\nself.view_functions[endpoint] = view_func\n\n```\n\n\n通过端点调试可以发现，Flask内部由url_map 维护一个url->endpoint 的指向。由view_functions 记录 endpoint所指向视图函数的函数，这样请求进入到Flask内部，才能通过Url找到对应的视图函数\n\n### 4\\. 循环引入流程分析\n\n从上面的断点调试中发现，我们的url_maph和view_functions中都已经维护了相关的信息。但是为什么还是会出现404的情况，这是因为fisher.py和book.py出现了循环引入的情况。\n\n下面看下fisher.py和book.py的具体流程图\n\n\n\n回答流程图中的两个问题：\n问题1：因为都是由fisher引入book，一个模块只会引入另一个模块一次。所以只执行了一次book\n问题2：由于一次是主流程执行fisher文件；一次是由book模块导入 fisher。\n\n### 5.找不到视图函数的最终解释和证明\n\n##### 整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\n\n##### book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\n\n下面来加入一些日志出数验证我们的结论。我们在app实例化，启动，注册路由是哪个地方加入日志信息，来观察一下\n\nbook.py\n\n```\nprint(\"id为\"+str(id(app))+\"的app注册路由\")\n\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n\"\"\"\n搜索书籍路由\n:param q: 关键字 OR isbn\n:param page: 页码\n\"\"\"\nisbn_or_key = is_isbn_or_key(q)\nif isbn_or_key == 'isbn':\nresult = YuShuBook.search_by_isbn(q)\nelse:\nresult = YuShuBook.search_by_key(q)\n\nreturn jsonify(result)\n\n```\n\nfisher.py\n\n```\napp = Flask(__name__)\nprint(\"id为\"+str(id(app))+\"的app实例化\")\n\napp.config.from_object(\"config\")\n\n# 为了可以注册book.py中的路由\nfrom app.web import book\n\nif __name__ == \"__main__\":\nprint(\"id为\" + str(id(app)) + \"的app启动\")\napp.run(host=app.config[\"HOST\"], debug=app.config[\"DEBUG\"], port=app.config[\"PORT\"])\n\n```\n\n执行结果\n\n```\npydev debugger: process 63816 is connecting\n\nid为4350444824的app实例化\nid为4355159656的app实例化\nid为4355159656的app注册路由\nid为4350444824的app启动\n* Debugger is active!\n* Debugger PIN: 176-669-651\n\n```\n\n可以看到注册路由的app，和启动服务的app不是同一个app。并且最后启动的app是最先实例化的app，而注册路由的app是后实例化的app，.\n","source":"_posts/flask框架学习/初识鱼书项目.md","raw":"---\ntitle: 初识鱼书项目\ndate: 2018-11-14 23:07:07\ntags:\ncategories: flask\n---\n\n#定义参数，判断查询参数q是否是isbn号\n```\n@app.route(\"/search/<q>/<page>\")\ndef search(q,page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    # isbn isbn13 由13个0-9在数字组成\n    # isbn10 由10表0-9表数字组组成，中间可能包含' - '\n\n    isbn_or_key = 'key'\n    if len(q) == 13 and q.isdigit():\n        isbn_or_key = 'isbn'\n    short_q = q.replace('-', '')\n    if '-' in q and len(short_q) == 10 and short_q.isdigit():\n        isbn_or_key = 'isbn'\n    pass\n```\n**知识点：**\n\n- 字符串有一个函数isdigit()可以判断是否为数字\n- in 关键字可以判断一个字符串是否在另一个字符串内\n- 多个逻辑判断排列原则：1.大部分判断结果为假的条件应该放在前面；2.需要查询数据库的操作由于会消耗资源，应该尽量靠后\n\n#简单的重构\n将上一小节的判断语句全都写到search函数中的几个缺点：\n1. 使得代码非常的臃肿，现在只有两个判断就占用了6行，如果有多个判断，search方法就要爆炸了\n2. 如果有其他地方的代码也要进行这个判断，那么就需要再重新写一遍，同样的代码重现在了两个地方\n3. 代码可读性查，作为一个路由函数，代码阅读者很难一眼看出路由函数的主要功能。\n\n重构后的代码\n**fisher.py**\n```\n@app.route(\"/search/<q>/<page>\")\ndef search(q, page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    isbn_or_key = is_isbn_or_key(q)\n```\n**helper.py**\n```\ndef is_isbn_or_key(word):\n    \"\"\"\n        判断word是isbn号还是查询关键字key\n        isbn isbn13 由13个0-9在数字组成\n        isbn10 由10表0-9表数字组组成，中间可能包含' - '\n    :param word:\n    :return: key or isbn\n    \"\"\"\n    isbn_or_key = 'key'\n    if len(word) == 13 and word.isdigit():\n        isbn_or_key = 'isbn'\n    short_word = word.replace('-', '')\n    if '-' in word and len(short_word) == 10 and short_word.isdigit():\n        isbn_or_key = 'isbn'\n    return isbn_or_key\n```\n**知识点：**\n\n- 其他地方的代码多一点还可以接受，视图函数中不可以，因为视图函数是一个web项目的入口。所有人阅读都是从这里入手，应该把细节屏蔽掉，给阅读者一个选择。\n- 看源码的技巧：先通读整体，了解整体过程，再回过头来了解细节，不要从一开始就深究每一个细节\n- 过多的注释会让代码变的臃肿，尽量使用易懂的函数名来代替注释，保持代码的简洁性\n**使用三元表达式优化**\n```\nimport requests\nclass HTTP:  #class HTTP(object):有无都无所谓\n\n    @staticmethod\n    def get(url,return_json=True):\n    \n        r = requests.get(url)\n\n\n        if r.status_code == 200:\n            if return_json():\n                return r.json()\n            else:\n                return r.text\n        else:\n            if return_json:\n                return {}\n            else:\n                return ''\n```\n**优化后**\n ```\nimport requests\nclass HTTP:  #class HTTP(object):有无都无所谓\n\n    @staticmethod\n    def get(url,return_json=True):\n    \n        r = requests.get(url)\n\n\n        if r.status_code != 200:\n            return {} if return_json else ''      #特例情况\n        return r.json() if return_json else r.text   #正常返回\n```\n\n**知识点：**\n\n- 简化if-else语句的几种方式 1.使用三元表达式 ；2.if+return；3.将if-else里的代码提取成函数\n- if+return的理解：把最后一句return前的if+return 全都理解为正常流程之外的一种特例情况的处理；多次if-return，提前结束一些逻辑分支，可以提高代码思维的清晰性\n- requests的一些说明：1.get()发送get请求；2.返回结果r.status_code 获取返回状态吗；3.r.json()将返回结果序列化成json;4.r.text 将返回结果不做处理直接返回\n\n**从API获取数据**\n将具体调用HTTP请求，获取结果的业务代码封装到YuShuBook中\n```\nclass YuShuBook:\n\n    search_by_isbn_url = \"http://t.yushu.im/v2/book/search/isbn/{}\"\n\n    search_by_key_url = \"http://t.yushu.im/v2/book/search?q={}&count={}&start={}\"\n\n    @classmethod\n    def search_by_isbn(cls, isbn):\n        url = cls.search_by_isbn_url.format(isbn)\n        return HTTP.get(url)\n\n    @classmethod\n    def search_by_key(cls, q, count=15, start=0):\n        url = cls.search_by_key_url.format(q, count, start)\n        return HTTP.get(url)\n```\n使用json.dumps 序列表返回结果，在视图函数中进行返回，并声明状态码和返回类型(一个元组)\n```\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n    \"\"\"\n    搜索书籍路由\n    :param q: 关键字 OR isbn\n    :param page: 页码\n    \"\"\"\n    isbn_or_key = is_isbn_or_key(q)\n    if isbn_or_key == 'isbn':\n        result = YuShuBook.search_by_isbn(q)\n    else:\n        result = YuShuBook.search_by_key(q)\n```\n    return json.dumps(result), 200, {'content-type': 'application/json'}\n可以使用flask提供的jsonify替换的json.dumps和元组\n\n    return jsonify(result)\n\n\n\n## 2.6 将视图函数拆分到单独的模块中\n\n### 1.将试图函数都放在一个文件中有哪些不足：\n\n1.代码太长，不利于维护\n2.从业务模型抽象的角度，不应该把他们都放在一个文件中。关于书籍相关的API就应该放在书籍模型的视图函数文件中，跟用户相关的API就应该放在用户模型相关的文件中\n3.入口文件的意义比较独特，会启动web服务器以及做很多初始化的操作，就算要放在一个文件也不应该业务的操作放在入口文件中来\n\n### 2.尝试拆分模块\n\n思路，将试图函数抽离到单独的包中，然后在新的试图文件中引入flask.py来导入app核心对象。为了新的试图文件中的路由可以成功注册，再在flask.py中引入刚刚抽离出的试图模块\n\n修改后的fisher.py\n\n```\nfrom flask import Flask\n\n# 为了可以注册book.py中的路由\nfrom app.web import book\n\napp = Flask(__name__)\n\napp.config.from_object(\"config\")\n\nif __name__ == \"__main__\":\napp.run(host=app.config[\"HOST\"], debug=app.config[\"DEBUG\"], port=app.config[\"PORT\"])\n\n```\n\n新增的book.py\n\n```\nfrom flask import jsonify\n\nfrom helper import is_isbn_or_key\nfrom yushu_book import YuShuBook\n\n# 为了让book.py模块可以使用app对象\nfrom fisher import app\n\n__author__ = \"gaowenfeng\"\n\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n\"\"\"\n搜索书籍路由\n:param q: 关键字 OR isbn\n:param page: 页码\n\"\"\"\nisbn_or_key = is_isbn_or_key(q)\nif isbn_or_key == 'isbn':\nresult = YuShuBook.search_by_isbn(q)\nelse:\nresult = YuShuBook.search_by_key(q)\n\nreturn jsonify(result)\n\n```\n\n但是这样做并不是正确的做法，结果表明，这样修改以后，访问search api会404\n\n为了知道为什么这样做不行，我们需要先刨铣一下Flask路由机制的原理\n\n### 3.Flask路由机制\n\n\nflask的基本思想是内部会维护一个字典。每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点。用于反向构建URL（后面会讲解)\n\nflask的路由注册`app_url_rule(url=,view_func=,endpoint=)`会接受三个参数，前两个我们都知道了，第三个就是上面说的endpoint。他的默认值是view_func的名称。当然，`app.route('url',endpoint=)`也可以传入\n\nflask route的部分源码\n\n```\n# 注册路由的装饰器\ndef route(self, rule, **options):\ndef decorator(f):\nendpoint = options.pop('endpoint', None)\n# 装饰器内部也是调用了add_url_rule\nself.add_url_rule(rule, endpoint, f, **options)\nreturn f\nreturn decorator\n# 注册路由\n@setupmethod\ndef add_url_rule(self, rule, endpoint=None, view_func=None,\nprovide_automatic_options=None, **options):\n\n# 如果endpoint传入的None，则使用视图函数名作为endpoint\nif endpoint is None:\nendpoint = _endpoint_from_view_func(view_func)\noptions['endpoint'] = endpoint\nmethods = options.pop('methods', None)\n\n# 默认的method是GET请求\nif methods is None:\nmethods = getattr(view_func, 'methods', None) or ('GET',)\nif isinstance(methods, string_types):\nraise TypeError('Allowed methods have to be iterables of strings, '\n'for example: @app.route(..., methods=[\"POST\"])')\nmethods = set(item.upper() for item in methods)\n\n...\n...\n...\n\nrule = self.url_rule_class(rule, methods=methods, **options)\nrule.provide_automatic_options = provide_automatic_options\n\n# 将url->endpoint 的规则维护到url_map\nself.url_map.add(rule)\nif view_func is not None:\nold_func = self.view_functions.get(endpoint)\nif old_func is not None and old_func != view_func:\nraise AssertionError('View function mapping is overwriting an '\n'existing endpoint function: %s' % endpoint)\n# 记录endpoint 所指向的view_func\nself.view_functions[endpoint] = view_func\n\n```\n\n\n通过端点调试可以发现，Flask内部由url_map 维护一个url->endpoint 的指向。由view_functions 记录 endpoint所指向视图函数的函数，这样请求进入到Flask内部，才能通过Url找到对应的视图函数\n\n### 4\\. 循环引入流程分析\n\n从上面的断点调试中发现，我们的url_maph和view_functions中都已经维护了相关的信息。但是为什么还是会出现404的情况，这是因为fisher.py和book.py出现了循环引入的情况。\n\n下面看下fisher.py和book.py的具体流程图\n\n\n\n回答流程图中的两个问题：\n问题1：因为都是由fisher引入book，一个模块只会引入另一个模块一次。所以只执行了一次book\n问题2：由于一次是主流程执行fisher文件；一次是由book模块导入 fisher。\n\n### 5.找不到视图函数的最终解释和证明\n\n##### 整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\n\n##### book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\n\n下面来加入一些日志出数验证我们的结论。我们在app实例化，启动，注册路由是哪个地方加入日志信息，来观察一下\n\nbook.py\n\n```\nprint(\"id为\"+str(id(app))+\"的app注册路由\")\n\n@app.route(\"/book/search/<q>/<page>\")\ndef search(q, page):\n\"\"\"\n搜索书籍路由\n:param q: 关键字 OR isbn\n:param page: 页码\n\"\"\"\nisbn_or_key = is_isbn_or_key(q)\nif isbn_or_key == 'isbn':\nresult = YuShuBook.search_by_isbn(q)\nelse:\nresult = YuShuBook.search_by_key(q)\n\nreturn jsonify(result)\n\n```\n\nfisher.py\n\n```\napp = Flask(__name__)\nprint(\"id为\"+str(id(app))+\"的app实例化\")\n\napp.config.from_object(\"config\")\n\n# 为了可以注册book.py中的路由\nfrom app.web import book\n\nif __name__ == \"__main__\":\nprint(\"id为\" + str(id(app)) + \"的app启动\")\napp.run(host=app.config[\"HOST\"], debug=app.config[\"DEBUG\"], port=app.config[\"PORT\"])\n\n```\n\n执行结果\n\n```\npydev debugger: process 63816 is connecting\n\nid为4350444824的app实例化\nid为4355159656的app实例化\nid为4355159656的app注册路由\nid为4350444824的app启动\n* Debugger is active!\n* Debugger PIN: 176-669-651\n\n```\n\n可以看到注册路由的app，和启动服务的app不是同一个app。并且最后启动的app是最先实例化的app，而注册路由的app是后实例化的app，.\n","slug":"flask框架学习/初识鱼书项目","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owp0007tssanqp2dx8q","content":"<p>#定义参数，判断查询参数q是否是isbn号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q,page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # isbn isbn13 由13个0-9在数字组成</span><br><span class=\"line\">    # isbn10 由10表0-9表数字组组成，中间可能包含&apos; - &apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    isbn_or_key = &apos;key&apos;</span><br><span class=\"line\">    if len(q) == 13 and q.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    short_q = q.replace(&apos;-&apos;, &apos;&apos;)</span><br><span class=\"line\">    if &apos;-&apos; in q and len(short_q) == 10 and short_q.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>字符串有一个函数isdigit()可以判断是否为数字</li>\n<li>in 关键字可以判断一个字符串是否在另一个字符串内</li>\n<li>多个逻辑判断排列原则：1.大部分判断结果为假的条件应该放在前面；2.需要查询数据库的操作由于会消耗资源，应该尽量靠后</li>\n</ul>\n<p>#简单的重构<br>将上一小节的判断语句全都写到search函数中的几个缺点：</p>\n<ol>\n<li>使得代码非常的臃肿，现在只有两个判断就占用了6行，如果有多个判断，search方法就要爆炸了</li>\n<li>如果有其他地方的代码也要进行这个判断，那么就需要再重新写一遍，同样的代码重现在了两个地方</li>\n<li>代码可读性查，作为一个路由函数，代码阅读者很难一眼看出路由函数的主要功能。</li>\n</ol>\n<p>重构后的代码<br><strong>fisher.py</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br></pre></td></tr></table></figure></p>\n<p><strong>helper.py</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def is_isbn_or_key(word):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">        判断word是isbn号还是查询关键字key</span><br><span class=\"line\">        isbn isbn13 由13个0-9在数字组成</span><br><span class=\"line\">        isbn10 由10表0-9表数字组组成，中间可能包含&apos; - &apos;</span><br><span class=\"line\">    :param word:</span><br><span class=\"line\">    :return: key or isbn</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = &apos;key&apos;</span><br><span class=\"line\">    if len(word) == 13 and word.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    short_word = word.replace(&apos;-&apos;, &apos;&apos;)</span><br><span class=\"line\">    if &apos;-&apos; in word and len(short_word) == 10 and short_word.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    return isbn_or_key</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>其他地方的代码多一点还可以接受，视图函数中不可以，因为视图函数是一个web项目的入口。所有人阅读都是从这里入手，应该把细节屏蔽掉，给阅读者一个选择。</li>\n<li>看源码的技巧：先通读整体，了解整体过程，再回过头来了解细节，不要从一开始就深究每一个细节</li>\n<li>过多的注释会让代码变的臃肿，尽量使用易懂的函数名来代替注释，保持代码的简洁性<br><strong>使用三元表达式优化</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">class HTTP:  #class HTTP(object):有无都无所谓</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get(url,return_json=True):</span><br><span class=\"line\">    </span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if r.status_code == 200:</span><br><span class=\"line\">            if return_json():</span><br><span class=\"line\">                return r.json()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return r.text</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if return_json:</span><br><span class=\"line\">                return &#123;&#125;</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return &apos;&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>优化后</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">class HTTP:  #class HTTP(object):有无都无所谓</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get(url,return_json=True):</span><br><span class=\"line\">    </span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if r.status_code != 200:</span><br><span class=\"line\">            return &#123;&#125; if return_json else &apos;&apos;      #特例情况</span><br><span class=\"line\">        return r.json() if return_json else r.text   #正常返回</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>简化if-else语句的几种方式 1.使用三元表达式 ；2.if+return；3.将if-else里的代码提取成函数</li>\n<li>if+return的理解：把最后一句return前的if+return 全都理解为正常流程之外的一种特例情况的处理；多次if-return，提前结束一些逻辑分支，可以提高代码思维的清晰性</li>\n<li>requests的一些说明：1.get()发送get请求；2.返回结果r.status_code 获取返回状态吗；3.r.json()将返回结果序列化成json;4.r.text 将返回结果不做处理直接返回</li>\n</ul>\n<p><strong>从API获取数据</strong><br>将具体调用HTTP请求，获取结果的业务代码封装到YuShuBook中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class YuShuBook:</span><br><span class=\"line\"></span><br><span class=\"line\">    search_by_isbn_url = &quot;http://t.yushu.im/v2/book/search/isbn/&#123;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    search_by_key_url = &quot;http://t.yushu.im/v2/book/search?q=&#123;&#125;&amp;count=&#123;&#125;&amp;start=&#123;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def search_by_isbn(cls, isbn):</span><br><span class=\"line\">        url = cls.search_by_isbn_url.format(isbn)</span><br><span class=\"line\">        return HTTP.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def search_by_key(cls, q, count=15, start=0):</span><br><span class=\"line\">        url = cls.search_by_key_url.format(q, count, start)</span><br><span class=\"line\">        return HTTP.get(url)</span><br></pre></td></tr></table></figure></p>\n<p>使用json.dumps 序列表返回结果，在视图函数中进行返回，并声明状态码和返回类型(一个元组)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">    if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">        result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        result = YuShuBook.search_by_key(q)</span><br></pre></td></tr></table></figure></p>\n<pre><code>return json.dumps(result), 200, {&apos;content-type&apos;: &apos;application/json&apos;}\n</code></pre><p>可以使用flask提供的jsonify替换的json.dumps和元组</p>\n<pre><code>return jsonify(result)\n</code></pre><h2 id=\"2-6-将视图函数拆分到单独的模块中\"><a href=\"#2-6-将视图函数拆分到单独的模块中\" class=\"headerlink\" title=\"2.6 将视图函数拆分到单独的模块中\"></a>2.6 将视图函数拆分到单独的模块中</h2><h3 id=\"1-将试图函数都放在一个文件中有哪些不足：\"><a href=\"#1-将试图函数都放在一个文件中有哪些不足：\" class=\"headerlink\" title=\"1.将试图函数都放在一个文件中有哪些不足：\"></a>1.将试图函数都放在一个文件中有哪些不足：</h3><p>1.代码太长，不利于维护<br>2.从业务模型抽象的角度，不应该把他们都放在一个文件中。关于书籍相关的API就应该放在书籍模型的视图函数文件中，跟用户相关的API就应该放在用户模型相关的文件中<br>3.入口文件的意义比较独特，会启动web服务器以及做很多初始化的操作，就算要放在一个文件也不应该业务的操作放在入口文件中来</p>\n<h3 id=\"2-尝试拆分模块\"><a href=\"#2-尝试拆分模块\" class=\"headerlink\" title=\"2.尝试拆分模块\"></a>2.尝试拆分模块</h3><p>思路，将试图函数抽离到单独的包中，然后在新的试图文件中引入flask.py来导入app核心对象。为了新的试图文件中的路由可以成功注册，再在flask.py中引入刚刚抽离出的试图模块</p>\n<p>修改后的fisher.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了可以注册book.py中的路由</span><br><span class=\"line\">from app.web import book</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(&quot;config&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">app.run(host=app.config[&quot;HOST&quot;], debug=app.config[&quot;DEBUG&quot;], port=app.config[&quot;PORT&quot;])</span><br></pre></td></tr></table></figure>\n<p>新增的book.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">from helper import is_isbn_or_key</span><br><span class=\"line\">from yushu_book import YuShuBook</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了让book.py模块可以使用app对象</span><br><span class=\"line\">from fisher import app</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &quot;gaowenfeng&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">搜索书籍路由</span><br><span class=\"line\">:param q: 关键字 OR isbn</span><br><span class=\"line\">:param page: 页码</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">else:</span><br><span class=\"line\">result = YuShuBook.search_by_key(q)</span><br><span class=\"line\"></span><br><span class=\"line\">return jsonify(result)</span><br></pre></td></tr></table></figure>\n<p>但是这样做并不是正确的做法，结果表明，这样修改以后，访问search api会404</p>\n<p>为了知道为什么这样做不行，我们需要先刨铣一下Flask路由机制的原理</p>\n<h3 id=\"3-Flask路由机制\"><a href=\"#3-Flask路由机制\" class=\"headerlink\" title=\"3.Flask路由机制\"></a>3.Flask路由机制</h3><p>flask的基本思想是内部会维护一个字典。每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点。用于反向构建URL（后面会讲解)</p>\n<p>flask的路由注册<code>app_url_rule(url=,view_func=,endpoint=)</code>会接受三个参数，前两个我们都知道了，第三个就是上面说的endpoint。他的默认值是view_func的名称。当然，<code>app.route(&#39;url&#39;,endpoint=)</code>也可以传入</p>\n<p>flask route的部分源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注册路由的装饰器</span><br><span class=\"line\">def route(self, rule, **options):</span><br><span class=\"line\">def decorator(f):</span><br><span class=\"line\">endpoint = options.pop(&apos;endpoint&apos;, None)</span><br><span class=\"line\"># 装饰器内部也是调用了add_url_rule</span><br><span class=\"line\">self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">return f</span><br><span class=\"line\">return decorator</span><br><span class=\"line\"># 注册路由</span><br><span class=\"line\">@setupmethod</span><br><span class=\"line\">def add_url_rule(self, rule, endpoint=None, view_func=None,</span><br><span class=\"line\">provide_automatic_options=None, **options):</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果endpoint传入的None，则使用视图函数名作为endpoint</span><br><span class=\"line\">if endpoint is None:</span><br><span class=\"line\">endpoint = _endpoint_from_view_func(view_func)</span><br><span class=\"line\">options[&apos;endpoint&apos;] = endpoint</span><br><span class=\"line\">methods = options.pop(&apos;methods&apos;, None)</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认的method是GET请求</span><br><span class=\"line\">if methods is None:</span><br><span class=\"line\">methods = getattr(view_func, &apos;methods&apos;, None) or (&apos;GET&apos;,)</span><br><span class=\"line\">if isinstance(methods, string_types):</span><br><span class=\"line\">raise TypeError(&apos;Allowed methods have to be iterables of strings, &apos;</span><br><span class=\"line\">&apos;for example: @app.route(..., methods=[&quot;POST&quot;])&apos;)</span><br><span class=\"line\">methods = set(item.upper() for item in methods)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">rule = self.url_rule_class(rule, methods=methods, **options)</span><br><span class=\"line\">rule.provide_automatic_options = provide_automatic_options</span><br><span class=\"line\"></span><br><span class=\"line\"># 将url-&gt;endpoint 的规则维护到url_map</span><br><span class=\"line\">self.url_map.add(rule)</span><br><span class=\"line\">if view_func is not None:</span><br><span class=\"line\">old_func = self.view_functions.get(endpoint)</span><br><span class=\"line\">if old_func is not None and old_func != view_func:</span><br><span class=\"line\">raise AssertionError(&apos;View function mapping is overwriting an &apos;</span><br><span class=\"line\">&apos;existing endpoint function: %s&apos; % endpoint)</span><br><span class=\"line\"># 记录endpoint 所指向的view_func</span><br><span class=\"line\">self.view_functions[endpoint] = view_func</span><br></pre></td></tr></table></figure>\n<p>通过端点调试可以发现，Flask内部由url_map 维护一个url-&gt;endpoint 的指向。由view_functions 记录 endpoint所指向视图函数的函数，这样请求进入到Flask内部，才能通过Url找到对应的视图函数</p>\n<h3 id=\"4-循环引入流程分析\"><a href=\"#4-循环引入流程分析\" class=\"headerlink\" title=\"4. 循环引入流程分析\"></a>4. 循环引入流程分析</h3><p>从上面的断点调试中发现，我们的url_maph和view_functions中都已经维护了相关的信息。但是为什么还是会出现404的情况，这是因为fisher.py和book.py出现了循环引入的情况。</p>\n<p>下面看下fisher.py和book.py的具体流程图</p>\n<p>回答流程图中的两个问题：<br>问题1：因为都是由fisher引入book，一个模块只会引入另一个模块一次。所以只执行了一次book<br>问题2：由于一次是主流程执行fisher文件；一次是由book模块导入 fisher。</p>\n<h3 id=\"5-找不到视图函数的最终解释和证明\"><a href=\"#5-找不到视图函数的最终解释和证明\" class=\"headerlink\" title=\"5.找不到视图函数的最终解释和证明\"></a>5.找不到视图函数的最终解释和证明</h3><h5 id=\"整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\"><a href=\"#整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\" class=\"headerlink\" title=\"整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\"></a>整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的</h5><h5 id=\"book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\"><a href=\"#book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\" class=\"headerlink\" title=\"book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\"></a>book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象</h5><p>下面来加入一些日志出数验证我们的结论。我们在app实例化，启动，注册路由是哪个地方加入日志信息，来观察一下</p>\n<p>book.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;id为&quot;+str(id(app))+&quot;的app注册路由&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">搜索书籍路由</span><br><span class=\"line\">:param q: 关键字 OR isbn</span><br><span class=\"line\">:param page: 页码</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">else:</span><br><span class=\"line\">result = YuShuBook.search_by_key(q)</span><br><span class=\"line\"></span><br><span class=\"line\">return jsonify(result)</span><br></pre></td></tr></table></figure>\n<p>fisher.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">print(&quot;id为&quot;+str(id(app))+&quot;的app实例化&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(&quot;config&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了可以注册book.py中的路由</span><br><span class=\"line\">from app.web import book</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">print(&quot;id为&quot; + str(id(app)) + &quot;的app启动&quot;)</span><br><span class=\"line\">app.run(host=app.config[&quot;HOST&quot;], debug=app.config[&quot;DEBUG&quot;], port=app.config[&quot;PORT&quot;])</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pydev debugger: process 63816 is connecting</span><br><span class=\"line\"></span><br><span class=\"line\">id为4350444824的app实例化</span><br><span class=\"line\">id为4355159656的app实例化</span><br><span class=\"line\">id为4355159656的app注册路由</span><br><span class=\"line\">id为4350444824的app启动</span><br><span class=\"line\">* Debugger is active!</span><br><span class=\"line\">* Debugger PIN: 176-669-651</span><br></pre></td></tr></table></figure>\n<p>可以看到注册路由的app，和启动服务的app不是同一个app。并且最后启动的app是最先实例化的app，而注册路由的app是后实例化的app，.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#定义参数，判断查询参数q是否是isbn号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q,page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # isbn isbn13 由13个0-9在数字组成</span><br><span class=\"line\">    # isbn10 由10表0-9表数字组组成，中间可能包含&apos; - &apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    isbn_or_key = &apos;key&apos;</span><br><span class=\"line\">    if len(q) == 13 and q.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    short_q = q.replace(&apos;-&apos;, &apos;&apos;)</span><br><span class=\"line\">    if &apos;-&apos; in q and len(short_q) == 10 and short_q.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>字符串有一个函数isdigit()可以判断是否为数字</li>\n<li>in 关键字可以判断一个字符串是否在另一个字符串内</li>\n<li>多个逻辑判断排列原则：1.大部分判断结果为假的条件应该放在前面；2.需要查询数据库的操作由于会消耗资源，应该尽量靠后</li>\n</ul>\n<p>#简单的重构<br>将上一小节的判断语句全都写到search函数中的几个缺点：</p>\n<ol>\n<li>使得代码非常的臃肿，现在只有两个判断就占用了6行，如果有多个判断，search方法就要爆炸了</li>\n<li>如果有其他地方的代码也要进行这个判断，那么就需要再重新写一遍，同样的代码重现在了两个地方</li>\n<li>代码可读性查，作为一个路由函数，代码阅读者很难一眼看出路由函数的主要功能。</li>\n</ol>\n<p>重构后的代码<br><strong>fisher.py</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br></pre></td></tr></table></figure></p>\n<p><strong>helper.py</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def is_isbn_or_key(word):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">        判断word是isbn号还是查询关键字key</span><br><span class=\"line\">        isbn isbn13 由13个0-9在数字组成</span><br><span class=\"line\">        isbn10 由10表0-9表数字组组成，中间可能包含&apos; - &apos;</span><br><span class=\"line\">    :param word:</span><br><span class=\"line\">    :return: key or isbn</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = &apos;key&apos;</span><br><span class=\"line\">    if len(word) == 13 and word.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    short_word = word.replace(&apos;-&apos;, &apos;&apos;)</span><br><span class=\"line\">    if &apos;-&apos; in word and len(short_word) == 10 and short_word.isdigit():</span><br><span class=\"line\">        isbn_or_key = &apos;isbn&apos;</span><br><span class=\"line\">    return isbn_or_key</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>其他地方的代码多一点还可以接受，视图函数中不可以，因为视图函数是一个web项目的入口。所有人阅读都是从这里入手，应该把细节屏蔽掉，给阅读者一个选择。</li>\n<li>看源码的技巧：先通读整体，了解整体过程，再回过头来了解细节，不要从一开始就深究每一个细节</li>\n<li>过多的注释会让代码变的臃肿，尽量使用易懂的函数名来代替注释，保持代码的简洁性<br><strong>使用三元表达式优化</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">class HTTP:  #class HTTP(object):有无都无所谓</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get(url,return_json=True):</span><br><span class=\"line\">    </span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if r.status_code == 200:</span><br><span class=\"line\">            if return_json():</span><br><span class=\"line\">                return r.json()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return r.text</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if return_json:</span><br><span class=\"line\">                return &#123;&#125;</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return &apos;&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>优化后</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">class HTTP:  #class HTTP(object):有无都无所谓</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get(url,return_json=True):</span><br><span class=\"line\">    </span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        if r.status_code != 200:</span><br><span class=\"line\">            return &#123;&#125; if return_json else &apos;&apos;      #特例情况</span><br><span class=\"line\">        return r.json() if return_json else r.text   #正常返回</span><br></pre></td></tr></table></figure></p>\n<p><strong>知识点：</strong></p>\n<ul>\n<li>简化if-else语句的几种方式 1.使用三元表达式 ；2.if+return；3.将if-else里的代码提取成函数</li>\n<li>if+return的理解：把最后一句return前的if+return 全都理解为正常流程之外的一种特例情况的处理；多次if-return，提前结束一些逻辑分支，可以提高代码思维的清晰性</li>\n<li>requests的一些说明：1.get()发送get请求；2.返回结果r.status_code 获取返回状态吗；3.r.json()将返回结果序列化成json;4.r.text 将返回结果不做处理直接返回</li>\n</ul>\n<p><strong>从API获取数据</strong><br>将具体调用HTTP请求，获取结果的业务代码封装到YuShuBook中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class YuShuBook:</span><br><span class=\"line\"></span><br><span class=\"line\">    search_by_isbn_url = &quot;http://t.yushu.im/v2/book/search/isbn/&#123;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    search_by_key_url = &quot;http://t.yushu.im/v2/book/search?q=&#123;&#125;&amp;count=&#123;&#125;&amp;start=&#123;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def search_by_isbn(cls, isbn):</span><br><span class=\"line\">        url = cls.search_by_isbn_url.format(isbn)</span><br><span class=\"line\">        return HTTP.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def search_by_key(cls, q, count=15, start=0):</span><br><span class=\"line\">        url = cls.search_by_key_url.format(q, count, start)</span><br><span class=\"line\">        return HTTP.get(url)</span><br></pre></td></tr></table></figure></p>\n<p>使用json.dumps 序列表返回结果，在视图函数中进行返回，并声明状态码和返回类型(一个元组)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    搜索书籍路由</span><br><span class=\"line\">    :param q: 关键字 OR isbn</span><br><span class=\"line\">    :param page: 页码</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">    if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">        result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        result = YuShuBook.search_by_key(q)</span><br></pre></td></tr></table></figure></p>\n<pre><code>return json.dumps(result), 200, {&apos;content-type&apos;: &apos;application/json&apos;}\n</code></pre><p>可以使用flask提供的jsonify替换的json.dumps和元组</p>\n<pre><code>return jsonify(result)\n</code></pre><h2 id=\"2-6-将视图函数拆分到单独的模块中\"><a href=\"#2-6-将视图函数拆分到单独的模块中\" class=\"headerlink\" title=\"2.6 将视图函数拆分到单独的模块中\"></a>2.6 将视图函数拆分到单独的模块中</h2><h3 id=\"1-将试图函数都放在一个文件中有哪些不足：\"><a href=\"#1-将试图函数都放在一个文件中有哪些不足：\" class=\"headerlink\" title=\"1.将试图函数都放在一个文件中有哪些不足：\"></a>1.将试图函数都放在一个文件中有哪些不足：</h3><p>1.代码太长，不利于维护<br>2.从业务模型抽象的角度，不应该把他们都放在一个文件中。关于书籍相关的API就应该放在书籍模型的视图函数文件中，跟用户相关的API就应该放在用户模型相关的文件中<br>3.入口文件的意义比较独特，会启动web服务器以及做很多初始化的操作，就算要放在一个文件也不应该业务的操作放在入口文件中来</p>\n<h3 id=\"2-尝试拆分模块\"><a href=\"#2-尝试拆分模块\" class=\"headerlink\" title=\"2.尝试拆分模块\"></a>2.尝试拆分模块</h3><p>思路，将试图函数抽离到单独的包中，然后在新的试图文件中引入flask.py来导入app核心对象。为了新的试图文件中的路由可以成功注册，再在flask.py中引入刚刚抽离出的试图模块</p>\n<p>修改后的fisher.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了可以注册book.py中的路由</span><br><span class=\"line\">from app.web import book</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(&quot;config&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">app.run(host=app.config[&quot;HOST&quot;], debug=app.config[&quot;DEBUG&quot;], port=app.config[&quot;PORT&quot;])</span><br></pre></td></tr></table></figure>\n<p>新增的book.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">from helper import is_isbn_or_key</span><br><span class=\"line\">from yushu_book import YuShuBook</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了让book.py模块可以使用app对象</span><br><span class=\"line\">from fisher import app</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = &quot;gaowenfeng&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">搜索书籍路由</span><br><span class=\"line\">:param q: 关键字 OR isbn</span><br><span class=\"line\">:param page: 页码</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">else:</span><br><span class=\"line\">result = YuShuBook.search_by_key(q)</span><br><span class=\"line\"></span><br><span class=\"line\">return jsonify(result)</span><br></pre></td></tr></table></figure>\n<p>但是这样做并不是正确的做法，结果表明，这样修改以后，访问search api会404</p>\n<p>为了知道为什么这样做不行，我们需要先刨铣一下Flask路由机制的原理</p>\n<h3 id=\"3-Flask路由机制\"><a href=\"#3-Flask路由机制\" class=\"headerlink\" title=\"3.Flask路由机制\"></a>3.Flask路由机制</h3><p>flask的基本思想是内部会维护一个字典。每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点。用于反向构建URL（后面会讲解)</p>\n<p>flask的路由注册<code>app_url_rule(url=,view_func=,endpoint=)</code>会接受三个参数，前两个我们都知道了，第三个就是上面说的endpoint。他的默认值是view_func的名称。当然，<code>app.route(&#39;url&#39;,endpoint=)</code>也可以传入</p>\n<p>flask route的部分源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注册路由的装饰器</span><br><span class=\"line\">def route(self, rule, **options):</span><br><span class=\"line\">def decorator(f):</span><br><span class=\"line\">endpoint = options.pop(&apos;endpoint&apos;, None)</span><br><span class=\"line\"># 装饰器内部也是调用了add_url_rule</span><br><span class=\"line\">self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">return f</span><br><span class=\"line\">return decorator</span><br><span class=\"line\"># 注册路由</span><br><span class=\"line\">@setupmethod</span><br><span class=\"line\">def add_url_rule(self, rule, endpoint=None, view_func=None,</span><br><span class=\"line\">provide_automatic_options=None, **options):</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果endpoint传入的None，则使用视图函数名作为endpoint</span><br><span class=\"line\">if endpoint is None:</span><br><span class=\"line\">endpoint = _endpoint_from_view_func(view_func)</span><br><span class=\"line\">options[&apos;endpoint&apos;] = endpoint</span><br><span class=\"line\">methods = options.pop(&apos;methods&apos;, None)</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认的method是GET请求</span><br><span class=\"line\">if methods is None:</span><br><span class=\"line\">methods = getattr(view_func, &apos;methods&apos;, None) or (&apos;GET&apos;,)</span><br><span class=\"line\">if isinstance(methods, string_types):</span><br><span class=\"line\">raise TypeError(&apos;Allowed methods have to be iterables of strings, &apos;</span><br><span class=\"line\">&apos;for example: @app.route(..., methods=[&quot;POST&quot;])&apos;)</span><br><span class=\"line\">methods = set(item.upper() for item in methods)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">rule = self.url_rule_class(rule, methods=methods, **options)</span><br><span class=\"line\">rule.provide_automatic_options = provide_automatic_options</span><br><span class=\"line\"></span><br><span class=\"line\"># 将url-&gt;endpoint 的规则维护到url_map</span><br><span class=\"line\">self.url_map.add(rule)</span><br><span class=\"line\">if view_func is not None:</span><br><span class=\"line\">old_func = self.view_functions.get(endpoint)</span><br><span class=\"line\">if old_func is not None and old_func != view_func:</span><br><span class=\"line\">raise AssertionError(&apos;View function mapping is overwriting an &apos;</span><br><span class=\"line\">&apos;existing endpoint function: %s&apos; % endpoint)</span><br><span class=\"line\"># 记录endpoint 所指向的view_func</span><br><span class=\"line\">self.view_functions[endpoint] = view_func</span><br></pre></td></tr></table></figure>\n<p>通过端点调试可以发现，Flask内部由url_map 维护一个url-&gt;endpoint 的指向。由view_functions 记录 endpoint所指向视图函数的函数，这样请求进入到Flask内部，才能通过Url找到对应的视图函数</p>\n<h3 id=\"4-循环引入流程分析\"><a href=\"#4-循环引入流程分析\" class=\"headerlink\" title=\"4. 循环引入流程分析\"></a>4. 循环引入流程分析</h3><p>从上面的断点调试中发现，我们的url_maph和view_functions中都已经维护了相关的信息。但是为什么还是会出现404的情况，这是因为fisher.py和book.py出现了循环引入的情况。</p>\n<p>下面看下fisher.py和book.py的具体流程图</p>\n<p>回答流程图中的两个问题：<br>问题1：因为都是由fisher引入book，一个模块只会引入另一个模块一次。所以只执行了一次book<br>问题2：由于一次是主流程执行fisher文件；一次是由book模块导入 fisher。</p>\n<h3 id=\"5-找不到视图函数的最终解释和证明\"><a href=\"#5-找不到视图函数的最终解释和证明\" class=\"headerlink\" title=\"5.找不到视图函数的最终解释和证明\"></a>5.找不到视图函数的最终解释和证明</h3><h5 id=\"整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\"><a href=\"#整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\" class=\"headerlink\" title=\"整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的\"></a>整个流程中，出现了两次核心app对象的初始化，注册路由是在蓝色流程中初始化的app注册的。但是启动服务是红色流程中的app启动的</h5><h5 id=\"book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\"><a href=\"#book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\" class=\"headerlink\" title=\"book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象\"></a>book中注册路由所使用的app对象，是他自己所导入fisher模块的app对象（蓝色流程中），而不是红色主流程中所实例化的app对象</h5><p>下面来加入一些日志出数验证我们的结论。我们在app实例化，启动，注册路由是哪个地方加入日志信息，来观察一下</p>\n<p>book.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;id为&quot;+str(id(app))+&quot;的app注册路由&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/book/search/&lt;q&gt;/&lt;page&gt;&quot;)</span><br><span class=\"line\">def search(q, page):</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">搜索书籍路由</span><br><span class=\"line\">:param q: 关键字 OR isbn</span><br><span class=\"line\">:param page: 页码</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">isbn_or_key = is_isbn_or_key(q)</span><br><span class=\"line\">if isbn_or_key == &apos;isbn&apos;:</span><br><span class=\"line\">result = YuShuBook.search_by_isbn(q)</span><br><span class=\"line\">else:</span><br><span class=\"line\">result = YuShuBook.search_by_key(q)</span><br><span class=\"line\"></span><br><span class=\"line\">return jsonify(result)</span><br></pre></td></tr></table></figure>\n<p>fisher.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">print(&quot;id为&quot;+str(id(app))+&quot;的app实例化&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(&quot;config&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 为了可以注册book.py中的路由</span><br><span class=\"line\">from app.web import book</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">print(&quot;id为&quot; + str(id(app)) + &quot;的app启动&quot;)</span><br><span class=\"line\">app.run(host=app.config[&quot;HOST&quot;], debug=app.config[&quot;DEBUG&quot;], port=app.config[&quot;PORT&quot;])</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pydev debugger: process 63816 is connecting</span><br><span class=\"line\"></span><br><span class=\"line\">id为4350444824的app实例化</span><br><span class=\"line\">id为4355159656的app实例化</span><br><span class=\"line\">id为4355159656的app注册路由</span><br><span class=\"line\">id为4350444824的app启动</span><br><span class=\"line\">* Debugger is active!</span><br><span class=\"line\">* Debugger PIN: 176-669-651</span><br></pre></td></tr></table></figure>\n<p>可以看到注册路由的app，和启动服务的app不是同一个app。并且最后启动的app是最先实例化的app，而注册路由的app是后实例化的app，.</p>\n"},{"title":"windows下mysql的安装","date":"2018-11-14T15:01:57.000Z","_content":"\n\n\n1. 先去官网下载点击的MySQL的下载：https://dev.mysql.com/downloads/mysql/\n\n2. 下载完成后解压 \n\n3. 配置系统环境变量\n\n4. 复制解压后的mysql到C盘或者其他磁盘下\n\n5. 系统的环境变量的path里添加一个mysql的配置 ，指向mysql的bin目录\n\n6.  配置初始化的my.ini文件的文件\n解压后的目录并没有的my.ini文件，没关系可以自行创建在安装根目录下添加的my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置： \n```\n[mysqld]\n# 设置3306端口\nport=3306\n# 设置mysql的安装目录\nbasedir=C:\\Program Files\\MySQL\n# 设置mysql数据库的数据的存放目录\ndatadir=C:\\Program Files\\MySQL\\Data\n# 允许最大连接数\nmax_connections=200\n# 允许连接失败的次数。\nmax_connect_errors=10\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 默认使用“mysql_native_password”插件认证\n#mysql_native_password\ndefault_authentication_plugin=mysql_native_password\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8\n[client]\n# 设置mysql客户端连接服务端时默认使用的端口\nport=3306\ndefault-character-set=utf8\n ```\n7. 安装服务\n在安装时，尽量用管理员身份运行CMD，否则在安装时可能会报错，会导致安装失败的情况。进入CMD直接进入的mysql的目录。在MySQL的安装目录的仓目录下执行命令：\n\n`mysqld --initialize --console`\n![root@localhost: 0?qRk)L6AjyT 冒号后面为密码](https://upload-images.jianshu.io/upload_images/14597179-03673a273b1803c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n \n\n8.  安装服务`mysqld --install`,  启动MySQL的服务`net start mysql`\n\n![安装并启动服务](https://upload-images.jianshu.io/upload_images/14597179-3d46a184c40a6b9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n9. 改密","source":"_posts/flask框架学习/windows下mysql的安装.md","raw":"---\ntitle: windows下mysql的安装\ndate: 2018-11-14 23:01:57\ntags:\ncategories: flask\n---\n\n\n\n1. 先去官网下载点击的MySQL的下载：https://dev.mysql.com/downloads/mysql/\n\n2. 下载完成后解压 \n\n3. 配置系统环境变量\n\n4. 复制解压后的mysql到C盘或者其他磁盘下\n\n5. 系统的环境变量的path里添加一个mysql的配置 ，指向mysql的bin目录\n\n6.  配置初始化的my.ini文件的文件\n解压后的目录并没有的my.ini文件，没关系可以自行创建在安装根目录下添加的my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置： \n```\n[mysqld]\n# 设置3306端口\nport=3306\n# 设置mysql的安装目录\nbasedir=C:\\Program Files\\MySQL\n# 设置mysql数据库的数据的存放目录\ndatadir=C:\\Program Files\\MySQL\\Data\n# 允许最大连接数\nmax_connections=200\n# 允许连接失败的次数。\nmax_connect_errors=10\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 默认使用“mysql_native_password”插件认证\n#mysql_native_password\ndefault_authentication_plugin=mysql_native_password\n[mysql]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8\n[client]\n# 设置mysql客户端连接服务端时默认使用的端口\nport=3306\ndefault-character-set=utf8\n ```\n7. 安装服务\n在安装时，尽量用管理员身份运行CMD，否则在安装时可能会报错，会导致安装失败的情况。进入CMD直接进入的mysql的目录。在MySQL的安装目录的仓目录下执行命令：\n\n`mysqld --initialize --console`\n![root@localhost: 0?qRk)L6AjyT 冒号后面为密码](https://upload-images.jianshu.io/upload_images/14597179-03673a273b1803c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n \n\n8.  安装服务`mysqld --install`,  启动MySQL的服务`net start mysql`\n\n![安装并启动服务](https://upload-images.jianshu.io/upload_images/14597179-3d46a184c40a6b9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n9. 改密","slug":"flask框架学习/windows下mysql的安装","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owr0008tssak335n26w","content":"<ol>\n<li><p>先去官网下载点击的MySQL的下载：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a></p>\n</li>\n<li><p>下载完成后解压 </p>\n</li>\n<li><p>配置系统环境变量</p>\n</li>\n<li><p>复制解压后的mysql到C盘或者其他磁盘下</p>\n</li>\n<li><p>系统的环境变量的path里添加一个mysql的配置 ，指向mysql的bin目录</p>\n</li>\n<li><p>配置初始化的my.ini文件的文件<br>解压后的目录并没有的my.ini文件，没关系可以自行创建在安装根目录下添加的my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"># 设置3306端口</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=C:\\Program Files\\MySQL</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\">datadir=C:\\Program Files\\MySQL\\Data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 允许连接失败的次数。</span><br><span class=\"line\">max_connect_errors=10</span><br><span class=\"line\"># 服务端使用的字符集默认为UTF8</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 默认使用“mysql_native_password”插件认证</span><br><span class=\"line\">#mysql_native_password</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装服务<br>在安装时，尽量用管理员身份运行CMD，否则在安装时可能会报错，会导致安装失败的情况。进入CMD直接进入的mysql的目录。在MySQL的安装目录的仓目录下执行命令：</p>\n</li>\n</ol>\n<p><code>mysqld --initialize --console</code><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-03673a273b1803c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"root@localhost: 0?qRk)L6AjyT 冒号后面为密码\"></p>\n<ol start=\"8\">\n<li>安装服务<code>mysqld --install</code>,  启动MySQL的服务<code>net start mysql</code></li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3d46a184c40a6b9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装并启动服务\"></p>\n<ol start=\"9\">\n<li>改密</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>先去官网下载点击的MySQL的下载：<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/</a></p>\n</li>\n<li><p>下载完成后解压 </p>\n</li>\n<li><p>配置系统环境变量</p>\n</li>\n<li><p>复制解压后的mysql到C盘或者其他磁盘下</p>\n</li>\n<li><p>系统的环境变量的path里添加一个mysql的配置 ，指向mysql的bin目录</p>\n</li>\n<li><p>配置初始化的my.ini文件的文件<br>解压后的目录并没有的my.ini文件，没关系可以自行创建在安装根目录下添加的my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"># 设置3306端口</span><br><span class=\"line\">port=3306</span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=C:\\Program Files\\MySQL</span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\">datadir=C:\\Program Files\\MySQL\\Data</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"># 允许连接失败的次数。</span><br><span class=\"line\">max_connect_errors=10</span><br><span class=\"line\"># 服务端使用的字符集默认为UTF8</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\"># 默认使用“mysql_native_password”插件认证</span><br><span class=\"line\">#mysql_native_password</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装服务<br>在安装时，尽量用管理员身份运行CMD，否则在安装时可能会报错，会导致安装失败的情况。进入CMD直接进入的mysql的目录。在MySQL的安装目录的仓目录下执行命令：</p>\n</li>\n</ol>\n<p><code>mysqld --initialize --console</code><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-03673a273b1803c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"root@localhost: 0?qRk)L6AjyT 冒号后面为密码\"></p>\n<ol start=\"8\">\n<li>安装服务<code>mysqld --install</code>,  启动MySQL的服务<code>net start mysql</code></li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3d46a184c40a6b9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装并启动服务\"></p>\n<ol start=\"9\">\n<li>改密</li>\n</ol>\n"},{"title":"java简介","date":"2019-09-18T03:51:16.000Z","_content":"## java简介\nJava分为三个体系：\n\nJavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)\n\nJavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\n\nJavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)\n\n### 开发环境配置(windows下)\n\n[java下载](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n下载后安装，配置系统环境变量\n\n此电脑 > 右键属性 > 高级 > 环境变量\n```\n变量名：JAVA_HOME\n变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置\n变量名：CLASSPATH\n变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个\".\"\n变量名：Path\n变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\nwindows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量\n```\n\n重启后生效\n\n### 测试JDK是否安装成功\n\n1. \"开始\"->\"运行\"，键入\"cmd\"；\n\n2. 键入命令: java -version、java、javac 几个命令\n","source":"_posts/java/readme.md","raw":"---\n\ntitle: java简介\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## java简介\nJava分为三个体系：\n\nJavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)\n\nJavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)\n\nJavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)\n\n### 开发环境配置(windows下)\n\n[java下载](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n下载后安装，配置系统环境变量\n\n此电脑 > 右键属性 > 高级 > 环境变量\n```\n变量名：JAVA_HOME\n变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置\n变量名：CLASSPATH\n变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个\".\"\n变量名：Path\n变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\nwindows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量\n```\n\n重启后生效\n\n### 测试JDK是否安装成功\n\n1. \"开始\"->\"运行\"，键入\"cmd\"；\n\n2. 键入命令: java -version、java、javac 几个命令\n","slug":"java/readme","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owt0009tssa95ayh1ay","content":"<h2 id=\"java简介\"><a href=\"#java简介\" class=\"headerlink\" title=\"java简介\"></a>java简介</h2><p>Java分为三个体系：</p>\n<p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p>\n<p>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</p>\n<p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p>\n<h3 id=\"开发环境配置-windows下\"><a href=\"#开发环境配置-windows下\" class=\"headerlink\" title=\"开发环境配置(windows下)\"></a>开发环境配置(windows下)</h3><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java下载</a></p>\n<p>下载后安装，配置系统环境变量</p>\n<p>此电脑 &gt; 右键属性 &gt; 高级 &gt; 环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名：JAVA_HOME</span><br><span class=\"line\">变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class=\"line\">变量名：CLASSPATH</span><br><span class=\"line\">变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class=\"line\">变量名：Path</span><br><span class=\"line\">变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\"></span><br><span class=\"line\">windows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量</span><br></pre></td></tr></table></figure></p>\n<p>重启后生效</p>\n<h3 id=\"测试JDK是否安装成功\"><a href=\"#测试JDK是否安装成功\" class=\"headerlink\" title=\"测试JDK是否安装成功\"></a>测试JDK是否安装成功</h3><ol>\n<li><p>“开始”-&gt;”运行”，键入”cmd”；</p>\n</li>\n<li><p>键入命令: java -version、java、javac 几个命令</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java简介\"><a href=\"#java简介\" class=\"headerlink\" title=\"java简介\"></a>java简介</h2><p>Java分为三个体系：</p>\n<p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p>\n<p>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</p>\n<p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p>\n<h3 id=\"开发环境配置-windows下\"><a href=\"#开发环境配置-windows下\" class=\"headerlink\" title=\"开发环境配置(windows下)\"></a>开发环境配置(windows下)</h3><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">java下载</a></p>\n<p>下载后安装，配置系统环境变量</p>\n<p>此电脑 &gt; 右键属性 &gt; 高级 &gt; 环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名：JAVA_HOME</span><br><span class=\"line\">变量值：C:\\Program Files (x86)\\Java\\jdk1.8.0_91        // 要根据自己的实际路径配置</span><br><span class=\"line\">变量名：CLASSPATH</span><br><span class=\"line\">变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;         //记得前面有个&quot;.&quot;</span><br><span class=\"line\">变量名：Path</span><br><span class=\"line\">变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</span><br><span class=\"line\"></span><br><span class=\"line\">windows10 变量值已有的上面点开，然后新建加到下方，以免破坏原有的环境变量</span><br></pre></td></tr></table></figure></p>\n<p>重启后生效</p>\n<h3 id=\"测试JDK是否安装成功\"><a href=\"#测试JDK是否安装成功\" class=\"headerlink\" title=\"测试JDK是否安装成功\"></a>测试JDK是否安装成功</h3><ol>\n<li><p>“开始”-&gt;”运行”，键入”cmd”；</p>\n</li>\n<li><p>键入命令: java -version、java、javac 几个命令</p>\n</li>\n</ol>\n"},{"title":"java基础语法","date":"2019-09-18T03:51:16.000Z","_content":"## hello world\n\nHelloWorld.java  (源文件名必须和类名相同)\n```\npublic class HelloWorld {\n   /* 第一个Java程序.  \n    * 它将打印字符串 Hello World\n    */\n    public static void main(String []args) {  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行\n       System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n} \n```\n（cmd在java文件的同一路径下）\n1. 编译 `javac -encoding utf-8 HelloWorld.java`  (含中文最好使用 -encoding utf-8编译，以免出现错误)\n2. 运行 `java HelloWorld`  打印  HelloWorld\n\n## 类和对象\n```\npublic class Puppy{  // Puppy 类  一个源文件中只能有一个public类\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"Passed Name is :\" + name ); \n   }\n\n   public void setAge( int age ){\n       puppyAge = age;\n   }\n\n   public int getAge( ){\n       System.out.println(\"Puppy's age is :\" + puppyAge ); \n       return puppyAge;\n   }\n\n   public static void main(String []args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge ); \n   }\n}\n```\n## import\n\nEmployee.java\n```\nimport java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n```\n\nEmployeeTest.java\n```\nimport java.io.*;\npublic class EmployeeTest{\n\n   public static void main(String args[]){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n编译后，执行EmployeeTest就可以得到结果\n","source":"_posts/java/java基础语法.md","raw":"---\n\ntitle: java基础语法\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## hello world\n\nHelloWorld.java  (源文件名必须和类名相同)\n```\npublic class HelloWorld {\n   /* 第一个Java程序.  \n    * 它将打印字符串 Hello World\n    */\n    public static void main(String []args) {  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行\n       System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n} \n```\n（cmd在java文件的同一路径下）\n1. 编译 `javac -encoding utf-8 HelloWorld.java`  (含中文最好使用 -encoding utf-8编译，以免出现错误)\n2. 运行 `java HelloWorld`  打印  HelloWorld\n\n## 类和对象\n```\npublic class Puppy{  // Puppy 类  一个源文件中只能有一个public类\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"Passed Name is :\" + name ); \n   }\n\n   public void setAge( int age ){\n       puppyAge = age;\n   }\n\n   public int getAge( ){\n       System.out.println(\"Puppy's age is :\" + puppyAge ); \n       return puppyAge;\n   }\n\n   public static void main(String []args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge ); \n   }\n}\n```\n## import\n\nEmployee.java\n```\nimport java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n```\n\nEmployeeTest.java\n```\nimport java.io.*;\npublic class EmployeeTest{\n\n   public static void main(String args[]){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n编译后，执行EmployeeTest就可以得到结果\n","slug":"java/java基础语法","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oww000btssabn1vm4yj","content":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><p>HelloWorld.java  (源文件名必须和类名相同)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">   /* 第一个Java程序.  </span><br><span class=\"line\">    * 它将打印字符串 Hello World</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static void main(String []args) &#123;  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行</span><br><span class=\"line\">       System.out.println(&quot;Hello World&quot;); // 打印 Hello World</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（cmd在java文件的同一路径下）</p>\n<ol>\n<li>编译 <code>javac -encoding utf-8 HelloWorld.java</code>  (含中文最好使用 -encoding utf-8编译，以免出现错误)</li>\n<li>运行 <code>java HelloWorld</code>  打印  HelloWorld</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Puppy&#123;  // Puppy 类  一个源文件中只能有一个public类</span><br><span class=\"line\">   int puppyAge;</span><br><span class=\"line\">   public Puppy(String name)&#123;</span><br><span class=\"line\">      // 这个构造器仅有一个参数：name</span><br><span class=\"line\">      System.out.println(&quot;Passed Name is :&quot; + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void setAge( int age )&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public int getAge( )&#123;</span><br><span class=\"line\">       System.out.println(&quot;Puppy&apos;s age is :&quot; + puppyAge ); </span><br><span class=\"line\">       return puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String []args)&#123;</span><br><span class=\"line\">      /* 创建对象 */</span><br><span class=\"line\">      Puppy myPuppy = new Puppy( &quot;tommy&quot; );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象</span><br><span class=\"line\">      /* 通过方法来设定age */</span><br><span class=\"line\">      myPuppy.setAge( 2 );</span><br><span class=\"line\">      /* 调用另一个方法获取age */</span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      /*你也可以像下面这样访问成员变量 */</span><br><span class=\"line\">      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>Employee.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EmployeeTest.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class EmployeeTest&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      /* 使用构造器创建两个对象 */</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;James Smith&quot;);</span><br><span class=\"line\">      Employee empTwo = new Employee(&quot;Mary Anne&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 调用这两个对象的成员方法</span><br><span class=\"line\">      empOne.empAge(26);</span><br><span class=\"line\">      empOne.empDesignation(&quot;Senior Software Engineer&quot;);</span><br><span class=\"line\">      empOne.empSalary(1000);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"></span><br><span class=\"line\">      empTwo.empAge(21);</span><br><span class=\"line\">      empTwo.empDesignation(&quot;Software Engineer&quot;);</span><br><span class=\"line\">      empTwo.empSalary(500);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译后，执行EmployeeTest就可以得到结果</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><p>HelloWorld.java  (源文件名必须和类名相同)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">   /* 第一个Java程序.  </span><br><span class=\"line\">    * 它将打印字符串 Hello World</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static void main(String []args) &#123;  // 主方法入口：所有的Java 程序由public static void main(String args[])方法开始执行</span><br><span class=\"line\">       System.out.println(&quot;Hello World&quot;); // 打印 Hello World</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>（cmd在java文件的同一路径下）</p>\n<ol>\n<li>编译 <code>javac -encoding utf-8 HelloWorld.java</code>  (含中文最好使用 -encoding utf-8编译，以免出现错误)</li>\n<li>运行 <code>java HelloWorld</code>  打印  HelloWorld</li>\n</ol>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Puppy&#123;  // Puppy 类  一个源文件中只能有一个public类</span><br><span class=\"line\">   int puppyAge;</span><br><span class=\"line\">   public Puppy(String name)&#123;</span><br><span class=\"line\">      // 这个构造器仅有一个参数：name</span><br><span class=\"line\">      System.out.println(&quot;Passed Name is :&quot; + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public void setAge( int age )&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public int getAge( )&#123;</span><br><span class=\"line\">       System.out.println(&quot;Puppy&apos;s age is :&quot; + puppyAge ); </span><br><span class=\"line\">       return puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String []args)&#123;</span><br><span class=\"line\">      /* 创建对象 */</span><br><span class=\"line\">      Puppy myPuppy = new Puppy( &quot;tommy&quot; );  // 声明：声明一个对象，包括对象名称和对象类型 实例化：使用关键字new来创建一个对象 初始化：使用new创建对象时，会调用构造方法初始化对象</span><br><span class=\"line\">      /* 通过方法来设定age */</span><br><span class=\"line\">      myPuppy.setAge( 2 );</span><br><span class=\"line\">      /* 调用另一个方法获取age */</span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      /*你也可以像下面这样访问成员变量 */</span><br><span class=\"line\">      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>Employee.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;  //下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>EmployeeTest.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class EmployeeTest&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      /* 使用构造器创建两个对象 */</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;James Smith&quot;);</span><br><span class=\"line\">      Employee empTwo = new Employee(&quot;Mary Anne&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 调用这两个对象的成员方法</span><br><span class=\"line\">      empOne.empAge(26);</span><br><span class=\"line\">      empOne.empDesignation(&quot;Senior Software Engineer&quot;);</span><br><span class=\"line\">      empOne.empSalary(1000);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"></span><br><span class=\"line\">      empTwo.empAge(21);</span><br><span class=\"line\">      empTwo.empDesignation(&quot;Software Engineer&quot;);</span><br><span class=\"line\">      empTwo.empSalary(500);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译后，执行EmployeeTest就可以得到结果</p>\n"},{"title":"java修饰符","date":"2019-09-18T03:51:16.000Z","_content":"## Java修饰符\n主要分为以下两类：\n1. 访问修饰符\n2. 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端\n\n```\npublic class className {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 访问控制修饰符\n#### 默认访问修饰符-不使用任何关键字\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。\n```\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n#### 私有访问修饰符-private\n私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。\n\n声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。\n\nPrivate访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n```\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n#### 公有访问修饰符-public\n被声明为public的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n```\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\n#### 受保护的访问修饰符-protected\n被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。\n\nProtected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。\n\n子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法\n\n```\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n\nclass StreamingAudioPlayer {\n   boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。\n\n#### 访问控制和继承\n请注意以下方法继承的规则：\n1. 父类中声明为public的方法在子类中也必须为public。\n2. 父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。\n3. 父类中声明为private的方法，不能够被继承。\n###  非访问修饰符\n\n`static` : 用来创建类方法和类变量。\n\n`final` : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\n`abstract` : 用来创建抽象类和抽象方法。\n\n`synchronized`和`volatile` : 主要用于线程的编程。\n\n#### static修饰符\n1. 静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量\n2. 静态方法 ： 来声明独立于对象的静态方法\n```\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n\n   private static void addInstance() {\n      numInstances++;\n   }\n\n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n\n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n      } \n      System.out.println(\"Created \" +       InstanceCounter.getCount() + \" instances\");\n   } \n}\n```\n\n#### final修饰符\nfinal变量:\n```\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n\n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\nfinal方法:\n类中的Final方法可以被子类继承，但是不能被子类修改。\n\n声明final方法的主要目的是防止该方法的内容被修改\n```\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\nfinal类： 不能被继承\n```\npublic final class Test {\n   // 类体\n}\n```\n\n","source":"_posts/java/修饰符.md","raw":"---\n\ntitle: java修饰符\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## Java修饰符\n主要分为以下两类：\n1. 访问修饰符\n2. 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端\n\n```\npublic class className {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 访问控制修饰符\n#### 默认访问修饰符-不使用任何关键字\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。\n```\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n#### 私有访问修饰符-private\n私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。\n\n声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。\n\nPrivate访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n```\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n#### 公有访问修饰符-public\n被声明为public的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n```\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\n#### 受保护的访问修饰符-protected\n被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。\n\nProtected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。\n\n子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法\n\n```\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n\nclass StreamingAudioPlayer {\n   boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。\n\n#### 访问控制和继承\n请注意以下方法继承的规则：\n1. 父类中声明为public的方法在子类中也必须为public。\n2. 父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。\n3. 父类中声明为private的方法，不能够被继承。\n###  非访问修饰符\n\n`static` : 用来创建类方法和类变量。\n\n`final` : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\n`abstract` : 用来创建抽象类和抽象方法。\n\n`synchronized`和`volatile` : 主要用于线程的编程。\n\n#### static修饰符\n1. 静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量\n2. 静态方法 ： 来声明独立于对象的静态方法\n```\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n\n   private static void addInstance() {\n      numInstances++;\n   }\n\n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n\n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" + InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n      } \n      System.out.println(\"Created \" +       InstanceCounter.getCount() + \" instances\");\n   } \n}\n```\n\n#### final修饰符\nfinal变量:\n```\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n\n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\nfinal方法:\n类中的Final方法可以被子类继承，但是不能被子类修改。\n\n声明final方法的主要目的是防止该方法的内容被修改\n```\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\nfinal类： 不能被继承\n```\npublic final class Test {\n   // 类体\n}\n```\n\n","slug":"java/修饰符","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owx000ctssah5xukm9r","content":"<h2 id=\"Java修饰符\"><a href=\"#Java修饰符\" class=\"headerlink\" title=\"Java修饰符\"></a>Java修饰符</h2><p>主要分为以下两类：</p>\n<ol>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ol>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class className &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private boolean myFlag;</span><br><span class=\"line\">static final double weeks = 9.5;</span><br><span class=\"line\">protected static final int BOXWIDTH = 42;</span><br><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // 方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问控制修饰符\"><a href=\"#访问控制修饰符\" class=\"headerlink\" title=\"访问控制修饰符\"></a>访问控制修饰符</h3><h4 id=\"默认访问修饰符-不使用任何关键字\"><a href=\"#默认访问修饰符-不使用任何关键字\" class=\"headerlink\" title=\"默认访问修饰符-不使用任何关键字\"></a>默认访问修饰符-不使用任何关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String version = &quot;1.5.1&quot;;</span><br><span class=\"line\">boolean processOrder() &#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"私有访问修饰符-private\"><a href=\"#私有访问修饰符-private\" class=\"headerlink\" title=\"私有访问修饰符-private\"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。</p>\n<p>Private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Logger &#123;</span><br><span class=\"line\">   private String format;</span><br><span class=\"line\">   public String getFormat() &#123;</span><br><span class=\"line\">      return this.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void setFormat(String format) &#123;</span><br><span class=\"line\">      this.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"公有访问修饰符-public\"><a href=\"#公有访问修饰符-public\" class=\"headerlink\" title=\"公有访问修饰符-public\"></a>公有访问修饰符-public</h4><p>被声明为public的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"受保护的访问修饰符-protected\"><a href=\"#受保护的访问修饰符-protected\" class=\"headerlink\" title=\"受保护的访问修饰符-protected\"></a>受保护的访问修饰符-protected</h4><p>被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。</p>\n<p>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</p>\n<p>子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AudioPlayer &#123;</span><br><span class=\"line\">   protected boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StreamingAudioPlayer &#123;</span><br><span class=\"line\">   boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。</p>\n<h4 id=\"访问控制和继承\"><a href=\"#访问控制和继承\" class=\"headerlink\" title=\"访问控制和继承\"></a>访问控制和继承</h4><p>请注意以下方法继承的规则：</p>\n<ol>\n<li>父类中声明为public的方法在子类中也必须为public。</li>\n<li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li>\n<li>父类中声明为private的方法，不能够被继承。<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3></li>\n</ol>\n<p><code>static</code> : 用来创建类方法和类变量。</p>\n<p><code>final</code> : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p><code>abstract</code> : 用来创建抽象类和抽象方法。</p>\n<p><code>synchronized</code>和<code>volatile</code> : 主要用于线程的编程。</p>\n<h4 id=\"static修饰符\"><a href=\"#static修饰符\" class=\"headerlink\" title=\"static修饰符\"></a>static修饰符</h4><ol>\n<li>静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量</li>\n<li>静态方法 ： 来声明独立于对象的静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InstanceCounter &#123;</span><br><span class=\"line\">   private static int numInstances = 0;</span><br><span class=\"line\">   protected static int getCount() &#123;</span><br><span class=\"line\">      return numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   private static void addInstance() &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] arguments) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Starting with &quot; + InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">      for (int i = 0; i &lt; 500; ++i)&#123;</span><br><span class=\"line\">         new InstanceCounter();</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(&quot;Created &quot; +       InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"final修饰符\"><a href=\"#final修饰符\" class=\"headerlink\" title=\"final修饰符\"></a>final修饰符</h4><p>final变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">  final int value = 10;</span><br><span class=\"line\">  // 下面是声明常量的实例</span><br><span class=\"line\">  public static final int BOXWIDTH = 6;</span><br><span class=\"line\">  static final String TITLE = &quot;Manager&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void changeValue()&#123;</span><br><span class=\"line\">     value = 12; //将输出一个错误</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final方法:<br>类中的Final方法可以被子类继承，但是不能被子类修改。</p>\n<p>声明final方法的主要目的是防止该方法的内容被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public final void changeName()&#123;</span><br><span class=\"line\">       // 方法体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final类： 不能被继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\">   // 类体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java修饰符\"><a href=\"#Java修饰符\" class=\"headerlink\" title=\"Java修饰符\"></a>Java修饰符</h2><p>主要分为以下两类：</p>\n<ol>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ol>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class className &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private boolean myFlag;</span><br><span class=\"line\">static final double weeks = 9.5;</span><br><span class=\"line\">protected static final int BOXWIDTH = 42;</span><br><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // 方法体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问控制修饰符\"><a href=\"#访问控制修饰符\" class=\"headerlink\" title=\"访问控制修饰符\"></a>访问控制修饰符</h3><h4 id=\"默认访问修饰符-不使用任何关键字\"><a href=\"#默认访问修饰符-不使用任何关键字\" class=\"headerlink\" title=\"默认访问修饰符-不使用任何关键字\"></a>默认访问修饰符-不使用任何关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String version = &quot;1.5.1&quot;;</span><br><span class=\"line\">boolean processOrder() &#123;</span><br><span class=\"line\">   return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"私有访问修饰符-private\"><a href=\"#私有访问修饰符-private\" class=\"headerlink\" title=\"私有访问修饰符-private\"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。</p>\n<p>Private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Logger &#123;</span><br><span class=\"line\">   private String format;</span><br><span class=\"line\">   public String getFormat() &#123;</span><br><span class=\"line\">      return this.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   public void setFormat(String format) &#123;</span><br><span class=\"line\">      this.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"公有访问修饰符-public\"><a href=\"#公有访问修饰符-public\" class=\"headerlink\" title=\"公有访问修饰符-public\"></a>公有访问修饰符-public</h4><p>被声明为public的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] arguments) &#123;</span><br><span class=\"line\">   // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"受保护的访问修饰符-protected\"><a href=\"#受保护的访问修饰符-protected\" class=\"headerlink\" title=\"受保护的访问修饰符-protected\"></a>受保护的访问修饰符-protected</h4><p>被声明为protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。</p>\n<p>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</p>\n<p>子类能访问Protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了protected访问修饰符，子类重载了父类的openSpeaker()方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AudioPlayer &#123;</span><br><span class=\"line\">   protected boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StreamingAudioPlayer &#123;</span><br><span class=\"line\">   boolean openSpeaker(Speaker sp) &#123;</span><br><span class=\"line\">      // 实现细节</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果把openSpeaker()方法声明为private，那么除了AudioPlayer之外的类将不能访问该方法。如果把openSpeaker()声明为public，那么所有的类都能够访问该方法。如果我们只想让该方法对其所在类的子类可见，则将该方法声明为protected。</p>\n<h4 id=\"访问控制和继承\"><a href=\"#访问控制和继承\" class=\"headerlink\" title=\"访问控制和继承\"></a>访问控制和继承</h4><p>请注意以下方法继承的规则：</p>\n<ol>\n<li>父类中声明为public的方法在子类中也必须为public。</li>\n<li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li>\n<li>父类中声明为private的方法，不能够被继承。<h3 id=\"非访问修饰符\"><a href=\"#非访问修饰符\" class=\"headerlink\" title=\"非访问修饰符\"></a>非访问修饰符</h3></li>\n</ol>\n<p><code>static</code> : 用来创建类方法和类变量。</p>\n<p><code>final</code> : 用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p><code>abstract</code> : 用来创建抽象类和抽象方法。</p>\n<p><code>synchronized</code>和<code>volatile</code> : 主要用于线程的编程。</p>\n<h4 id=\"static修饰符\"><a href=\"#static修饰符\" class=\"headerlink\" title=\"static修饰符\"></a>static修饰符</h4><ol>\n<li>静态变量 ： 也被称为类变量。用来声明独立于对象的静态变量,局部变量不能被声明为static变量</li>\n<li>静态方法 ： 来声明独立于对象的静态方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InstanceCounter &#123;</span><br><span class=\"line\">   private static int numInstances = 0;</span><br><span class=\"line\">   protected static int getCount() &#123;</span><br><span class=\"line\">      return numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   private static void addInstance() &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String[] arguments) &#123;</span><br><span class=\"line\">      System.out.println(&quot;Starting with &quot; + InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">      for (int i = 0; i &lt; 500; ++i)&#123;</span><br><span class=\"line\">         new InstanceCounter();</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      System.out.println(&quot;Created &quot; +       InstanceCounter.getCount() + &quot; instances&quot;);</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"final修饰符\"><a href=\"#final修饰符\" class=\"headerlink\" title=\"final修饰符\"></a>final修饰符</h4><p>final变量:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">  final int value = 10;</span><br><span class=\"line\">  // 下面是声明常量的实例</span><br><span class=\"line\">  public static final int BOXWIDTH = 6;</span><br><span class=\"line\">  static final String TITLE = &quot;Manager&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void changeValue()&#123;</span><br><span class=\"line\">     value = 12; //将输出一个错误</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final方法:<br>类中的Final方法可以被子类继承，但是不能被子类修改。</p>\n<p>声明final方法的主要目的是防止该方法的内容被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public final void changeName()&#123;</span><br><span class=\"line\">       // 方法体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>final类： 不能被继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\">   // 类体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java变量类型","date":"2019-09-18T03:51:16.000Z","_content":"\n## 变量类型\n在Java语言中\n\n1. 局部变量\n2. 实例变量\n3. 类变量\n\n所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n`type identifier [ = value][, identifier [= value] ...] ;`\n\n```\nint a, b, c;         // 声明三个int型整数：a、b、c。\nint d = 3, e, f = 5; // 声明三个整数并赋予初值。\nbyte z = 22;         // 声明并初始化z。\ndouble pi = 3.14159; // 声明了pi。\nchar x = 'x';        // 变量x的值是字符'x'。\n```\n### 局部变量\n```\npublic class Test{ \n   public void pupAge(){\n      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n   \n   public static void main(String args[]){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n### 实例变量\n```\nimport java.io.*;\npublic class Employee{\n   // 这个成员变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]){\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n```\n\n## 类变量\n```\nimport java.io.*;\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n\n// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT\n```\n\n","source":"_posts/java/变量类型.md","raw":"---\n\ntitle: java变量类型\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n\n## 变量类型\n在Java语言中\n\n1. 局部变量\n2. 实例变量\n3. 类变量\n\n所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n`type identifier [ = value][, identifier [= value] ...] ;`\n\n```\nint a, b, c;         // 声明三个int型整数：a、b、c。\nint d = 3, e, f = 5; // 声明三个整数并赋予初值。\nbyte z = 22;         // 声明并初始化z。\ndouble pi = 3.14159; // 声明了pi。\nchar x = 'x';        // 变量x的值是字符'x'。\n```\n### 局部变量\n```\npublic class Test{ \n   public void pupAge(){\n      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n   \n   public static void main(String args[]){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n### 实例变量\n```\nimport java.io.*;\npublic class Employee{\n   // 这个成员变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]){\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n```\n\n## 类变量\n```\nimport java.io.*;\npublic class Employee{\n   //salary是静态的私有变量\n   private static double salary;\n   // DEPARTMENT是一个常量\n   public static final String DEPARTMENT = \"Development \";\n   public static void main(String args[]){\n      salary = 1000;\n      System.out.println(DEPARTMENT+\"average salary:\"+salary);\n   }\n}\n\n// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT\n```\n\n","slug":"java/变量类型","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4owz000ftssadr0ofz66","content":"<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在Java语言中</p>\n<ol>\n<li>局部变量</li>\n<li>实例变量</li>\n<li>类变量</li>\n</ol>\n<p>所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n<p><code>type identifier [ = value][, identifier [= value] ...] ;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a, b, c;         // 声明三个int型整数：a、b、c。</span><br><span class=\"line\">int d = 3, e, f = 5; // 声明三个整数并赋予初值。</span><br><span class=\"line\">byte z = 22;         // 声明并初始化z。</span><br><span class=\"line\">double pi = 3.14159; // 声明了pi。</span><br><span class=\"line\">char x = &apos;x&apos;;        // 变量x的值是字符&apos;x&apos;。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123; </span><br><span class=\"line\">   public void pupAge()&#123;</span><br><span class=\"line\">      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中</span><br><span class=\"line\">      age = age + 7;</span><br><span class=\"line\">      System.out.println(&quot;Puppy age is : &quot; + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Test test = new Test();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   // 这个成员变量对子类可见</span><br><span class=\"line\">   public String name;</span><br><span class=\"line\">   // 私有变量，仅在该类可见</span><br><span class=\"line\">   private double salary;</span><br><span class=\"line\">   //在构造器中对name赋值</span><br><span class=\"line\">   public Employee (String empName)&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //设定salary的值</span><br><span class=\"line\">   public void setSalary(double empSal)&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   // 打印信息</span><br><span class=\"line\">   public void printEmp()&#123;</span><br><span class=\"line\">      System.out.println(&quot;name  : &quot; + name );</span><br><span class=\"line\">      System.out.println(&quot;salary :&quot; + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;Ransika&quot;);</span><br><span class=\"line\">      empOne.setSalary(1000);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>在Java语言中</p>\n<ol>\n<li>局部变量</li>\n<li>实例变量</li>\n<li>类变量</li>\n</ol>\n<p>所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n<p><code>type identifier [ = value][, identifier [= value] ...] ;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a, b, c;         // 声明三个int型整数：a、b、c。</span><br><span class=\"line\">int d = 3, e, f = 5; // 声明三个整数并赋予初值。</span><br><span class=\"line\">byte z = 22;         // 声明并初始化z。</span><br><span class=\"line\">double pi = 3.14159; // 声明了pi。</span><br><span class=\"line\">char x = &apos;x&apos;;        // 变量x的值是字符&apos;x&apos;。</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123; </span><br><span class=\"line\">   public void pupAge()&#123;</span><br><span class=\"line\">      int age = 0;   // age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中</span><br><span class=\"line\">      age = age + 7;</span><br><span class=\"line\">      System.out.println(&quot;Puppy age is : &quot; + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Test test = new Test();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   // 这个成员变量对子类可见</span><br><span class=\"line\">   public String name;</span><br><span class=\"line\">   // 私有变量，仅在该类可见</span><br><span class=\"line\">   private double salary;</span><br><span class=\"line\">   //在构造器中对name赋值</span><br><span class=\"line\">   public Employee (String empName)&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //设定salary的值</span><br><span class=\"line\">   public void setSalary(double empSal)&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   // 打印信息</span><br><span class=\"line\">   public void printEmp()&#123;</span><br><span class=\"line\">      System.out.println(&quot;name  : &quot; + name );</span><br><span class=\"line\">      System.out.println(&quot;salary :&quot; + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Employee empOne = new Employee(&quot;Ransika&quot;);</span><br><span class=\"line\">      empOne.setSalary(1000);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\">public class Employee&#123;</span><br><span class=\"line\">   //salary是静态的私有变量</span><br><span class=\"line\">   private static double salary;</span><br><span class=\"line\">   // DEPARTMENT是一个常量</span><br><span class=\"line\">   public static final String DEPARTMENT = &quot;Development &quot;;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      salary = 1000;</span><br><span class=\"line\">      System.out.println(DEPARTMENT+&quot;average salary:&quot;+salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果其他类想要访问该变量，可以这样访问：Employee.DEPARTMENT</span><br></pre></td></tr></table></figure>\n"},{"title":"java基本数据类型","date":"2019-09-18T03:51:16.000Z","_content":"\n## 基本数据类型\n两大数据类型：\n1. 内置数据类型\n2. 引用数据类型\n\n### 内置数据类型\n```\npublic class PrimitiveTypeTest {\n    public static void main(String[] args) {\n        // byte\n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);\n        System.out.println(\"包装类：java.lang.Byte\");\n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);\n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);\n        System.out.println();\n    // short\n    System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);\n    System.out.println(\"包装类：java.lang.Short\");\n    System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);\n    System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);\n    System.out.println();\n\n    // int\n    System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);\n    System.out.println(\"包装类：java.lang.Integer\");\n    System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);\n    System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);\n    System.out.println();\n\n    // long\n    System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);\n    System.out.println(\"包装类：java.lang.Long\");\n    System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);\n    System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);\n    System.out.println();\n\n    // float\n    System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);\n    System.out.println(\"包装类：java.lang.Float\");\n    System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);\n    System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);\n    System.out.println();\n\n    // double\n    System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);\n    System.out.println(\"包装类：java.lang.Double\");\n    System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);\n    System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);\n    System.out.println();\n\n    // char\n    System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);\n    System.out.println(\"包装类：java.lang.Character\");\n    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台\n    System.out.println(\"最小值：Character.MIN_VALUE=\"\n            + (int) Character.MIN_VALUE);\n    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台\n    System.out.println(\"最大值：Character.MAX_VALUE=\"\n            + (int) Character.MAX_VALUE);\n}\n}\n```\n\n### 引用数据类型\n1. 引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。\n2. 对象、数组都是引用数据类型。\n3. 所有引用类型的默认值都是null。\n4. 一个引用变量可以用来引用与任何与之兼容的类型。\n5. 例子：Animal animal = new Animal(\"giraffe\"）\n\n### 常量\n```\nfinal double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识\n```\n\n```\nint decimal = 100;   // 十进值\nint octal = 0144;  // 8进值\nint hexa =  0x64;  // 16进值\n```\n### 字符串\n双引号\n\n```\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n\n```\nchar a = '\\u0001';   // 变量a 的值为 '\\u0001'\nString a = \"\\u0001\";\n```\n\n\n\n","source":"_posts/java/基本数据类型.md","raw":"---\n\ntitle: java基本数据类型\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n\n## 基本数据类型\n两大数据类型：\n1. 内置数据类型\n2. 引用数据类型\n\n### 内置数据类型\n```\npublic class PrimitiveTypeTest {\n    public static void main(String[] args) {\n        // byte\n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);\n        System.out.println(\"包装类：java.lang.Byte\");\n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);\n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);\n        System.out.println();\n    // short\n    System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);\n    System.out.println(\"包装类：java.lang.Short\");\n    System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);\n    System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);\n    System.out.println();\n\n    // int\n    System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);\n    System.out.println(\"包装类：java.lang.Integer\");\n    System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);\n    System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);\n    System.out.println();\n\n    // long\n    System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);\n    System.out.println(\"包装类：java.lang.Long\");\n    System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);\n    System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);\n    System.out.println();\n\n    // float\n    System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);\n    System.out.println(\"包装类：java.lang.Float\");\n    System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);\n    System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);\n    System.out.println();\n\n    // double\n    System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);\n    System.out.println(\"包装类：java.lang.Double\");\n    System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);\n    System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);\n    System.out.println();\n\n    // char\n    System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);\n    System.out.println(\"包装类：java.lang.Character\");\n    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台\n    System.out.println(\"最小值：Character.MIN_VALUE=\"\n            + (int) Character.MIN_VALUE);\n    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台\n    System.out.println(\"最大值：Character.MAX_VALUE=\"\n            + (int) Character.MAX_VALUE);\n}\n}\n```\n\n### 引用数据类型\n1. 引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。\n2. 对象、数组都是引用数据类型。\n3. 所有引用类型的默认值都是null。\n4. 一个引用变量可以用来引用与任何与之兼容的类型。\n5. 例子：Animal animal = new Animal(\"giraffe\"）\n\n### 常量\n```\nfinal double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识\n```\n\n```\nint decimal = 100;   // 十进值\nint octal = 0144;  // 8进值\nint hexa =  0x64;  // 16进值\n```\n### 字符串\n双引号\n\n```\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n\n```\nchar a = '\\u0001';   // 变量a 的值为 '\\u0001'\nString a = \"\\u0001\";\n```\n\n\n\n","slug":"java/基本数据类型","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4ox1000htssanmj5sj6m","content":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>两大数据类型：</p>\n<ol>\n<li>内置数据类型</li>\n<li>引用数据类型</li>\n</ol>\n<h3 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimitiveTypeTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // byte</span><br><span class=\"line\">        System.out.println(&quot;基本类型：byte 二进制位数：&quot; + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(&quot;包装类：java.lang.Byte&quot;);</span><br><span class=\"line\">        System.out.println(&quot;最小值：Byte.MIN_VALUE=&quot; + Byte.MIN_VALUE);</span><br><span class=\"line\">        System.out.println(&quot;最大值：Byte.MAX_VALUE=&quot; + Byte.MAX_VALUE);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    // short</span><br><span class=\"line\">    System.out.println(&quot;基本类型：short 二进制位数：&quot; + Short.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Short&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Short.MIN_VALUE=&quot; + Short.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Short.MAX_VALUE=&quot; + Short.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // int</span><br><span class=\"line\">    System.out.println(&quot;基本类型：int 二进制位数：&quot; + Integer.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Integer&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Integer.MIN_VALUE=&quot; + Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Integer.MAX_VALUE=&quot; + Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // long</span><br><span class=\"line\">    System.out.println(&quot;基本类型：long 二进制位数：&quot; + Long.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Long&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Long.MIN_VALUE=&quot; + Long.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Long.MAX_VALUE=&quot; + Long.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // float</span><br><span class=\"line\">    System.out.println(&quot;基本类型：float 二进制位数：&quot; + Float.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Float&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Float.MIN_VALUE=&quot; + Float.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Float.MAX_VALUE=&quot; + Float.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // double</span><br><span class=\"line\">    System.out.println(&quot;基本类型：double 二进制位数：&quot; + Double.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Double&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Double.MIN_VALUE=&quot; + Double.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Double.MAX_VALUE=&quot; + Double.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // char</span><br><span class=\"line\">    System.out.println(&quot;基本类型：char 二进制位数：&quot; + Character.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Character&quot;);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最小值：Character.MIN_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MIN_VALUE);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最大值：Character.MAX_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><ol>\n<li>引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用与任何与之兼容的类型。</li>\n<li>例子：Animal animal = new Animal(“giraffe”）</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int decimal = 100;   // 十进值</span><br><span class=\"line\">int octal = 0144;  // 8进值</span><br><span class=\"line\">int hexa =  0x64;  // 16进值</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello World&quot;</span><br><span class=\"line\">&quot;two\\nlines&quot;</span><br><span class=\"line\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char a = &apos;\\u0001&apos;;   // 变量a 的值为 &apos;\\u0001&apos;</span><br><span class=\"line\">String a = &quot;\\u0001&quot;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>两大数据类型：</p>\n<ol>\n<li>内置数据类型</li>\n<li>引用数据类型</li>\n</ol>\n<h3 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimitiveTypeTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // byte</span><br><span class=\"line\">        System.out.println(&quot;基本类型：byte 二进制位数：&quot; + Byte.SIZE);</span><br><span class=\"line\">        System.out.println(&quot;包装类：java.lang.Byte&quot;);</span><br><span class=\"line\">        System.out.println(&quot;最小值：Byte.MIN_VALUE=&quot; + Byte.MIN_VALUE);</span><br><span class=\"line\">        System.out.println(&quot;最大值：Byte.MAX_VALUE=&quot; + Byte.MAX_VALUE);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    // short</span><br><span class=\"line\">    System.out.println(&quot;基本类型：short 二进制位数：&quot; + Short.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Short&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Short.MIN_VALUE=&quot; + Short.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Short.MAX_VALUE=&quot; + Short.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // int</span><br><span class=\"line\">    System.out.println(&quot;基本类型：int 二进制位数：&quot; + Integer.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Integer&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Integer.MIN_VALUE=&quot; + Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Integer.MAX_VALUE=&quot; + Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // long</span><br><span class=\"line\">    System.out.println(&quot;基本类型：long 二进制位数：&quot; + Long.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Long&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Long.MIN_VALUE=&quot; + Long.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Long.MAX_VALUE=&quot; + Long.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // float</span><br><span class=\"line\">    System.out.println(&quot;基本类型：float 二进制位数：&quot; + Float.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Float&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Float.MIN_VALUE=&quot; + Float.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Float.MAX_VALUE=&quot; + Float.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // double</span><br><span class=\"line\">    System.out.println(&quot;基本类型：double 二进制位数：&quot; + Double.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Double&quot;);</span><br><span class=\"line\">    System.out.println(&quot;最小值：Double.MIN_VALUE=&quot; + Double.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(&quot;最大值：Double.MAX_VALUE=&quot; + Double.MAX_VALUE);</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    // char</span><br><span class=\"line\">    System.out.println(&quot;基本类型：char 二进制位数：&quot; + Character.SIZE);</span><br><span class=\"line\">    System.out.println(&quot;包装类：java.lang.Character&quot;);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最小值：Character.MIN_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MIN_VALUE);</span><br><span class=\"line\">    // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br><span class=\"line\">    System.out.println(&quot;最大值：Character.MAX_VALUE=&quot;</span><br><span class=\"line\">            + (int) Character.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h3><ol>\n<li>引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用与任何与之兼容的类型。</li>\n<li>例子：Animal animal = new Animal(“giraffe”）</li>\n</ol>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final double PI = 3.1415927;  //常量指不能改变的量,用final标志,通常用大写标识</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int decimal = 100;   // 十进值</span><br><span class=\"line\">int octal = 0144;  // 8进值</span><br><span class=\"line\">int hexa =  0x64;  // 16进值</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>双引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello World&quot;</span><br><span class=\"line\">&quot;two\\nlines&quot;</span><br><span class=\"line\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char a = &apos;\\u0001&apos;;   // 变量a 的值为 &apos;\\u0001&apos;</span><br><span class=\"line\">String a = &quot;\\u0001&quot;;</span><br></pre></td></tr></table></figure>\n"},{"title":"java分支结构","date":"2019-09-18T03:51:16.000Z","_content":"### if else \nIfElse.java\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n\n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }\n      else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }\n      else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }\n      else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n### 嵌套的if…else语句\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n\n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n### switch语句\n\n```\npublic class Test {\n\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n\n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n         case 'F' :\n            System.out.println(\"你需要继续努力\");\n            break;\n         default :\n            System.out.println(\"无效等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n","source":"_posts/java/分支结构.md","raw":"\n---\n\ntitle: java分支结构\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n### if else \nIfElse.java\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n\n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }\n      else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }\n      else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }\n      else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n### 嵌套的if…else语句\n```\npublic class Test {\n\n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n\n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n### switch语句\n\n```\npublic class Test {\n\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n\n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n         case 'F' :\n            System.out.println(\"你需要继续努力\");\n            break;\n         default :\n            System.out.println(\"无效等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n","slug":"java/分支结构","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4ox3000ktssay38ipia6","content":"<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><p>IfElse.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 10 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 10&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 20 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 20&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 30 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 30&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else&#123;</span><br><span class=\"line\">         System.out.print(&quot;这是 else 语句&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌套的if…else语句\"><a href=\"#嵌套的if…else语句\" class=\"headerlink\" title=\"嵌套的if…else语句\"></a>嵌套的if…else语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\">      int y = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 30 )&#123;</span><br><span class=\"line\">         if( y == 10 )&#123;</span><br><span class=\"line\">             System.out.print(&quot;X = 30 and Y = 10&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      //char grade = args[0].charAt(0);</span><br><span class=\"line\">      char grade = &apos;C&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      switch(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         case &apos;A&apos; :</span><br><span class=\"line\">            System.out.println(&quot;优秀&quot;); </span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;B&apos; :</span><br><span class=\"line\">         case &apos;C&apos; :</span><br><span class=\"line\">            System.out.println(&quot;良好&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;D&apos; :</span><br><span class=\"line\">            System.out.println(&quot;及格&quot;);</span><br><span class=\"line\">         case &apos;F&apos; :</span><br><span class=\"line\">            System.out.println(&quot;你需要继续努力&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         default :</span><br><span class=\"line\">            System.out.println(&quot;无效等级&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(&quot;你的等级是 &quot; + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h3><p>IfElse.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 10 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 10&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 20 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 20&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if( x == 30 )&#123;</span><br><span class=\"line\">         System.out.print(&quot;Value of X is 30&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else&#123;</span><br><span class=\"line\">         System.out.print(&quot;这是 else 语句&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌套的if…else语句\"><a href=\"#嵌套的if…else语句\" class=\"headerlink\" title=\"嵌套的if…else语句\"></a>嵌套的if…else语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int x = 30;</span><br><span class=\"line\">      int y = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">      if( x == 30 )&#123;</span><br><span class=\"line\">         if( y == 10 )&#123;</span><br><span class=\"line\">             System.out.print(&quot;X = 30 and Y = 10&quot;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      //char grade = args[0].charAt(0);</span><br><span class=\"line\">      char grade = &apos;C&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">      switch(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         case &apos;A&apos; :</span><br><span class=\"line\">            System.out.println(&quot;优秀&quot;); </span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;B&apos; :</span><br><span class=\"line\">         case &apos;C&apos; :</span><br><span class=\"line\">            System.out.println(&quot;良好&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         case &apos;D&apos; :</span><br><span class=\"line\">            System.out.println(&quot;及格&quot;);</span><br><span class=\"line\">         case &apos;F&apos; :</span><br><span class=\"line\">            System.out.println(&quot;你需要继续努力&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">         default :</span><br><span class=\"line\">            System.out.println(&quot;无效等级&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(&quot;你的等级是 &quot; + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"java运算符","date":"2019-09-18T03:51:16.000Z","_content":"## Java 运算符\n主要分为一下几种\n\n1. 算术运算符\n2. 关系运算符\n3. 位运算符\n4. 逻辑运算符\n5. 赋值运算符\n6. 其他运算符\n\n###  算术运算符\nArithmeticOperator.java\n```\npublic class ArithmeticOperator {\n\n    public static void main(String args[]) {\n       int a = 10;\n       int b = 20;\n       int c = 25;\n       int d = 25;\n       System.out.println(\"a + b = \" + (a + b) );\n       System.out.println(\"a - b = \" + (a - b) );\n       System.out.println(\"a * b = \" + (a * b) );\n       System.out.println(\"b / a = \" + (b / a) );\n       System.out.println(\"b % a = \" + (b % a) );\n       System.out.println(\"c % a = \" + (c % a) );\n       System.out.println(\"a++   = \" +  (a++) );\n       System.out.println(\"a--   = \" +  (a--) );\n       // 查看  d++ 与 ++d 的不同\n       System.out.println(\"d++   = \" +  (d++) );  // 当前语句后 +1\n       System.out.println(\"++d   = \" +  (++d) );  // 当前语句前 +1\n    }\n  } \n```\n\n### 关系运算符\n\nRelationalOperator.java\n```\npublic class RelationalOperator {\n\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      System.out.println(\"a == b = \" + (a == b) );\n      System.out.println(\"a != b = \" + (a != b) );\n      System.out.println(\"a > b = \" + (a > b) );\n      System.out.println(\"a < b = \" + (a < b) );\n      System.out.println(\"b >= a = \" + (b >= a) );\n      System.out.println(\"b <= a = \" + (b <= a) ); \n   } \n}\n```\n### 逻辑运算符\nLogicalOperators.java\n```\npublic class LogicalOperators {\n   public static void main(String args[]) {\n      boolean a = true;\n      boolean b = false;\n      System.out.println(\"a && b = \" + (a&&b));\n      System.out.println(\"a || b = \" + (a||b) );\n      System.out.println(\"!(a && b) = \" + !(a && b));\n   }\n } \n```\n### 赋值运算符\n\nAssignmentOperator.java\n```\npublic class AssignmentOperator {\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      int c;\n      c = a + b;\n      System.out.println(\"c = a + b is \" + (a + b));\n      System.out.println(\"c += a  is \" + (c+=a) );\n      System.out.println(\"c -= a is \" + (c -=a));\n      System.out.println(\"c *= a is \" + (c *= a));\n      a = 10;\n      c = 15;\n      System.out.println(\"c /= a is \" + (c/=a) );\n      a = 10;\n      c = 15;\n      System.out.println(\"c %= a  is \" + (c %= a));\n   }\n } \n```\n\n### 条件运算符\nConditionalOperator.java\n```\npublic class ConditionalOperator {\n   public static void main(String args[]){\n      int a , b;   \n      a = 10;    \n      b = (a == 1) ? 20: 30;   // 不成立 \n      System.out.println( \"Value of b is : \" +  b );  // 30\n      b = (a == 10) ? 20: 30;    // 成立\n      System.out.println( \"Value of b is : \" + b );  // 20\n   }\n}\n```\n### instanceOf 运算符\nCar.java\n```\nclass Vehicle {}\n\npublic class Car extends Vehicle {  // Car 继承了Vehicle所有属性和方法\n   public static void main(String args[]){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true\n      System.out.println( result);  // true\n   }\n}\n```\n\n\n","source":"_posts/java/运算符.md","raw":"---\n\ntitle: java运算符\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: java\n\n---\n## Java 运算符\n主要分为一下几种\n\n1. 算术运算符\n2. 关系运算符\n3. 位运算符\n4. 逻辑运算符\n5. 赋值运算符\n6. 其他运算符\n\n###  算术运算符\nArithmeticOperator.java\n```\npublic class ArithmeticOperator {\n\n    public static void main(String args[]) {\n       int a = 10;\n       int b = 20;\n       int c = 25;\n       int d = 25;\n       System.out.println(\"a + b = \" + (a + b) );\n       System.out.println(\"a - b = \" + (a - b) );\n       System.out.println(\"a * b = \" + (a * b) );\n       System.out.println(\"b / a = \" + (b / a) );\n       System.out.println(\"b % a = \" + (b % a) );\n       System.out.println(\"c % a = \" + (c % a) );\n       System.out.println(\"a++   = \" +  (a++) );\n       System.out.println(\"a--   = \" +  (a--) );\n       // 查看  d++ 与 ++d 的不同\n       System.out.println(\"d++   = \" +  (d++) );  // 当前语句后 +1\n       System.out.println(\"++d   = \" +  (++d) );  // 当前语句前 +1\n    }\n  } \n```\n\n### 关系运算符\n\nRelationalOperator.java\n```\npublic class RelationalOperator {\n\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      System.out.println(\"a == b = \" + (a == b) );\n      System.out.println(\"a != b = \" + (a != b) );\n      System.out.println(\"a > b = \" + (a > b) );\n      System.out.println(\"a < b = \" + (a < b) );\n      System.out.println(\"b >= a = \" + (b >= a) );\n      System.out.println(\"b <= a = \" + (b <= a) ); \n   } \n}\n```\n### 逻辑运算符\nLogicalOperators.java\n```\npublic class LogicalOperators {\n   public static void main(String args[]) {\n      boolean a = true;\n      boolean b = false;\n      System.out.println(\"a && b = \" + (a&&b));\n      System.out.println(\"a || b = \" + (a||b) );\n      System.out.println(\"!(a && b) = \" + !(a && b));\n   }\n } \n```\n### 赋值运算符\n\nAssignmentOperator.java\n```\npublic class AssignmentOperator {\n   public static void main(String args[]) {\n      int a = 10;\n      int b = 20;\n      int c;\n      c = a + b;\n      System.out.println(\"c = a + b is \" + (a + b));\n      System.out.println(\"c += a  is \" + (c+=a) );\n      System.out.println(\"c -= a is \" + (c -=a));\n      System.out.println(\"c *= a is \" + (c *= a));\n      a = 10;\n      c = 15;\n      System.out.println(\"c /= a is \" + (c/=a) );\n      a = 10;\n      c = 15;\n      System.out.println(\"c %= a  is \" + (c %= a));\n   }\n } \n```\n\n### 条件运算符\nConditionalOperator.java\n```\npublic class ConditionalOperator {\n   public static void main(String args[]){\n      int a , b;   \n      a = 10;    \n      b = (a == 1) ? 20: 30;   // 不成立 \n      System.out.println( \"Value of b is : \" +  b );  // 30\n      b = (a == 10) ? 20: 30;    // 成立\n      System.out.println( \"Value of b is : \" + b );  // 20\n   }\n}\n```\n### instanceOf 运算符\nCar.java\n```\nclass Vehicle {}\n\npublic class Car extends Vehicle {  // Car 继承了Vehicle所有属性和方法\n   public static void main(String args[]){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true\n      System.out.println( result);  // true\n   }\n}\n```\n\n\n","slug":"java/运算符","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4ox9000ltssal0djauu2","content":"<h2 id=\"Java-运算符\"><a href=\"#Java-运算符\" class=\"headerlink\" title=\"Java 运算符\"></a>Java 运算符</h2><p>主要分为一下几种</p>\n<ol>\n<li>算术运算符</li>\n<li>关系运算符</li>\n<li>位运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>其他运算符</li>\n</ol>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>ArithmeticOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ArithmeticOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">       int a = 10;</span><br><span class=\"line\">       int b = 20;</span><br><span class=\"line\">       int c = 25;</span><br><span class=\"line\">       int d = 25;</span><br><span class=\"line\">       System.out.println(&quot;a + b = &quot; + (a + b) );</span><br><span class=\"line\">       System.out.println(&quot;a - b = &quot; + (a - b) );</span><br><span class=\"line\">       System.out.println(&quot;a * b = &quot; + (a * b) );</span><br><span class=\"line\">       System.out.println(&quot;b / a = &quot; + (b / a) );</span><br><span class=\"line\">       System.out.println(&quot;b % a = &quot; + (b % a) );</span><br><span class=\"line\">       System.out.println(&quot;c % a = &quot; + (c % a) );</span><br><span class=\"line\">       System.out.println(&quot;a++   = &quot; +  (a++) );</span><br><span class=\"line\">       System.out.println(&quot;a--   = &quot; +  (a--) );</span><br><span class=\"line\">       // 查看  d++ 与 ++d 的不同</span><br><span class=\"line\">       System.out.println(&quot;d++   = &quot; +  (d++) );  // 当前语句后 +1</span><br><span class=\"line\">       System.out.println(&quot;++d   = &quot; +  (++d) );  // 当前语句前 +1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>RelationalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RelationalOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      System.out.println(&quot;a == b = &quot; + (a == b) );</span><br><span class=\"line\">      System.out.println(&quot;a != b = &quot; + (a != b) );</span><br><span class=\"line\">      System.out.println(&quot;a &gt; b = &quot; + (a &gt; b) );</span><br><span class=\"line\">      System.out.println(&quot;a &lt; b = &quot; + (a &lt; b) );</span><br><span class=\"line\">      System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a) );</span><br><span class=\"line\">      System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a) ); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>LogicalOperators.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogicalOperators &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      boolean a = true;</span><br><span class=\"line\">      boolean b = false;</span><br><span class=\"line\">      System.out.println(&quot;a &amp;&amp; b = &quot; + (a&amp;&amp;b));</span><br><span class=\"line\">      System.out.println(&quot;a || b = &quot; + (a||b) );</span><br><span class=\"line\">      System.out.println(&quot;!(a &amp;&amp; b) = &quot; + !(a &amp;&amp; b));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>AssignmentOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AssignmentOperator &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      int c;</span><br><span class=\"line\">      c = a + b;</span><br><span class=\"line\">      System.out.println(&quot;c = a + b is &quot; + (a + b));</span><br><span class=\"line\">      System.out.println(&quot;c += a  is &quot; + (c+=a) );</span><br><span class=\"line\">      System.out.println(&quot;c -= a is &quot; + (c -=a));</span><br><span class=\"line\">      System.out.println(&quot;c *= a is &quot; + (c *= a));</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c /= a is &quot; + (c/=a) );</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c %= a  is &quot; + (c %= a));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><p>ConditionalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ConditionalOperator &#123;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int a , b;   </span><br><span class=\"line\">      a = 10;    </span><br><span class=\"line\">      b = (a == 1) ? 20: 30;   // 不成立 </span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; +  b );  // 30</span><br><span class=\"line\">      b = (a == 10) ? 20: 30;    // 成立</span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; + b );  // 20</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"instanceOf-运算符\"><a href=\"#instanceOf-运算符\" class=\"headerlink\" title=\"instanceOf 运算符\"></a>instanceOf 运算符</h3><p>Car.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vehicle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Car extends Vehicle &#123;  // Car 继承了Vehicle所有属性和方法</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Vehicle a = new Car();</span><br><span class=\"line\">      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true</span><br><span class=\"line\">      System.out.println( result);  // true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-运算符\"><a href=\"#Java-运算符\" class=\"headerlink\" title=\"Java 运算符\"></a>Java 运算符</h2><p>主要分为一下几种</p>\n<ol>\n<li>算术运算符</li>\n<li>关系运算符</li>\n<li>位运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n<li>其他运算符</li>\n</ol>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>ArithmeticOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ArithmeticOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">       int a = 10;</span><br><span class=\"line\">       int b = 20;</span><br><span class=\"line\">       int c = 25;</span><br><span class=\"line\">       int d = 25;</span><br><span class=\"line\">       System.out.println(&quot;a + b = &quot; + (a + b) );</span><br><span class=\"line\">       System.out.println(&quot;a - b = &quot; + (a - b) );</span><br><span class=\"line\">       System.out.println(&quot;a * b = &quot; + (a * b) );</span><br><span class=\"line\">       System.out.println(&quot;b / a = &quot; + (b / a) );</span><br><span class=\"line\">       System.out.println(&quot;b % a = &quot; + (b % a) );</span><br><span class=\"line\">       System.out.println(&quot;c % a = &quot; + (c % a) );</span><br><span class=\"line\">       System.out.println(&quot;a++   = &quot; +  (a++) );</span><br><span class=\"line\">       System.out.println(&quot;a--   = &quot; +  (a--) );</span><br><span class=\"line\">       // 查看  d++ 与 ++d 的不同</span><br><span class=\"line\">       System.out.println(&quot;d++   = &quot; +  (d++) );  // 当前语句后 +1</span><br><span class=\"line\">       System.out.println(&quot;++d   = &quot; +  (++d) );  // 当前语句前 +1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>RelationalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class RelationalOperator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      System.out.println(&quot;a == b = &quot; + (a == b) );</span><br><span class=\"line\">      System.out.println(&quot;a != b = &quot; + (a != b) );</span><br><span class=\"line\">      System.out.println(&quot;a &gt; b = &quot; + (a &gt; b) );</span><br><span class=\"line\">      System.out.println(&quot;a &lt; b = &quot; + (a &lt; b) );</span><br><span class=\"line\">      System.out.println(&quot;b &gt;= a = &quot; + (b &gt;= a) );</span><br><span class=\"line\">      System.out.println(&quot;b &lt;= a = &quot; + (b &lt;= a) ); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>LogicalOperators.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogicalOperators &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      boolean a = true;</span><br><span class=\"line\">      boolean b = false;</span><br><span class=\"line\">      System.out.println(&quot;a &amp;&amp; b = &quot; + (a&amp;&amp;b));</span><br><span class=\"line\">      System.out.println(&quot;a || b = &quot; + (a||b) );</span><br><span class=\"line\">      System.out.println(&quot;!(a &amp;&amp; b) = &quot; + !(a &amp;&amp; b));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>AssignmentOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AssignmentOperator &#123;</span><br><span class=\"line\">   public static void main(String args[]) &#123;</span><br><span class=\"line\">      int a = 10;</span><br><span class=\"line\">      int b = 20;</span><br><span class=\"line\">      int c;</span><br><span class=\"line\">      c = a + b;</span><br><span class=\"line\">      System.out.println(&quot;c = a + b is &quot; + (a + b));</span><br><span class=\"line\">      System.out.println(&quot;c += a  is &quot; + (c+=a) );</span><br><span class=\"line\">      System.out.println(&quot;c -= a is &quot; + (c -=a));</span><br><span class=\"line\">      System.out.println(&quot;c *= a is &quot; + (c *= a));</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c /= a is &quot; + (c/=a) );</span><br><span class=\"line\">      a = 10;</span><br><span class=\"line\">      c = 15;</span><br><span class=\"line\">      System.out.println(&quot;c %= a  is &quot; + (c %= a));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><p>ConditionalOperator.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ConditionalOperator &#123;</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      int a , b;   </span><br><span class=\"line\">      a = 10;    </span><br><span class=\"line\">      b = (a == 1) ? 20: 30;   // 不成立 </span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; +  b );  // 30</span><br><span class=\"line\">      b = (a == 10) ? 20: 30;    // 成立</span><br><span class=\"line\">      System.out.println( &quot;Value of b is : &quot; + b );  // 20</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"instanceOf-运算符\"><a href=\"#instanceOf-运算符\" class=\"headerlink\" title=\"instanceOf 运算符\"></a>instanceOf 运算符</h3><p>Car.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Vehicle &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Car extends Vehicle &#123;  // Car 继承了Vehicle所有属性和方法</span><br><span class=\"line\">   public static void main(String args[])&#123;</span><br><span class=\"line\">      Vehicle a = new Car();</span><br><span class=\"line\">      boolean result =  a instanceof Car;   // 被比较的对象兼容于右侧类型,该运算符仍然返回true</span><br><span class=\"line\">      System.out.println( result);  // true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"python操作mysql(ORM)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n\n### 使用SQLAlchemy\n![](https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**安装方法**\n`pip install SQLAlchemy`\n\n\n更多内容参考[flask鱼书项目](https://itswl.github.io/categories/flask/)\n\n\n```\nfrom sqlalchemy import create_engine\n\nfrom sqlalchemy.ext.declarative import declarative_base \nfrom sqlalchemy import Column, Integer, String ,DateTime, Boolean\n\n# 连接数据库\nengine = create_engine('mysql://root:password@localhost:3306/school?charset=utf8')\n## 编码问题\n\n# # 获取基类\nBase = declarative_base()\n\nclass News(Base): # 继承基类\n    __tablename__ = 'students1'\n    id = Column(Integer, primary_key = True)\n    nickname = Column(String(20))\n    name = Column(String(20), nullable = False)\n    sex = Column(String(1))\n    in_time = Column(DateTime)\n    is_vaild = Column(Boolean)\n    idcard = Column(Integer, unique = True)\n        \nNews.metadata.create_all(engine)   # 创建表格\n\n## 新增数据\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\n\nclass OrmTest(object):\n    def __init__(self):\n        self.session = Session()\n\n    def add_one(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n\n    def add_more(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        new_obj2 = News(\n            nickname = 'wei',\n            name = 'lai',\n            sex = '女',\n        )\n        self.session.add_all([new_obj,\n                        new_obj2])\n        self.session.commit()\n        return new_obj\n\n## 查询数据        \n    def get_one(self):\n        return self.session.query(News).get(10)  # get 是选id为2的\n\n    def get_more(self):\n        return self.session.query(News).filter_by(is_vaild=True)\n\n\n## 修改数据\n## 将一条当作多条的一种情况\n    def update_data(self):\n        data_list = self.session.query(News).filter(News.id >= 5)\n        for item in data_list:\n            if item:\n                item.is_vaild = 0 \n                self.session.add(item)  # 加入\n        self.session.commit()  # 提交\n## filter 与 filter_by 的区别\n\n\n## 删除数据\n    def delete_data(self):\n        data = self.session.query(News).get(8)\n        if data:\n            self.session.delete(data)\n            self.session.commit()\n        else:\n            return False\n\n    def delete_data_more(self):\n        delete_list = self.session.query(News).filter(News.id <= 5)\n        for item in delete_list:\n            if item:\n                self.session.delete(item)       \n            else:\n                return False\n        self.session.commit() \n\n\n\ndef main():\n    obj = OrmTest()\n    obj.add_one()\n    obj.add_more()\n\n    data = obj.get_one() \n\n    ## 防止查询失误\n    if data:  \n        print('ID:{0}  {1}'.format(data.id,data.sex))\n    else:\n        print('Not exist')\n\n    data_more = obj.get_more()\n    print(data_more.count())  # 计数\n    for new_obj in data_more:\n        print('ID:{0}  {1} {2} {3}'.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))\n\n    obj.update_data()\n    print('数据修改成功')\n    \n    obj.delete_data()\n    print('数据删除成功')\n\n    obj.delete_data_more()\n\n\nif __name__ == '__main__':\n    main()\n```\n","source":"_posts/python操作数据库/python操作mysql(ORM).md","raw":"\n---\ntitle: python操作mysql(ORM)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n\n### 使用SQLAlchemy\n![](https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**安装方法**\n`pip install SQLAlchemy`\n\n\n更多内容参考[flask鱼书项目](https://itswl.github.io/categories/flask/)\n\n\n```\nfrom sqlalchemy import create_engine\n\nfrom sqlalchemy.ext.declarative import declarative_base \nfrom sqlalchemy import Column, Integer, String ,DateTime, Boolean\n\n# 连接数据库\nengine = create_engine('mysql://root:password@localhost:3306/school?charset=utf8')\n## 编码问题\n\n# # 获取基类\nBase = declarative_base()\n\nclass News(Base): # 继承基类\n    __tablename__ = 'students1'\n    id = Column(Integer, primary_key = True)\n    nickname = Column(String(20))\n    name = Column(String(20), nullable = False)\n    sex = Column(String(1))\n    in_time = Column(DateTime)\n    is_vaild = Column(Boolean)\n    idcard = Column(Integer, unique = True)\n        \nNews.metadata.create_all(engine)   # 创建表格\n\n## 新增数据\nfrom sqlalchemy.orm import sessionmaker\nSession = sessionmaker(bind=engine)\n\nclass OrmTest(object):\n    def __init__(self):\n        self.session = Session()\n\n    def add_one(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n\n    def add_more(self):\n        new_obj = News(\n            nickname = '123',\n            name = '321',\n            sex = '男',\n        )\n        new_obj2 = News(\n            nickname = 'wei',\n            name = 'lai',\n            sex = '女',\n        )\n        self.session.add_all([new_obj,\n                        new_obj2])\n        self.session.commit()\n        return new_obj\n\n## 查询数据        \n    def get_one(self):\n        return self.session.query(News).get(10)  # get 是选id为2的\n\n    def get_more(self):\n        return self.session.query(News).filter_by(is_vaild=True)\n\n\n## 修改数据\n## 将一条当作多条的一种情况\n    def update_data(self):\n        data_list = self.session.query(News).filter(News.id >= 5)\n        for item in data_list:\n            if item:\n                item.is_vaild = 0 \n                self.session.add(item)  # 加入\n        self.session.commit()  # 提交\n## filter 与 filter_by 的区别\n\n\n## 删除数据\n    def delete_data(self):\n        data = self.session.query(News).get(8)\n        if data:\n            self.session.delete(data)\n            self.session.commit()\n        else:\n            return False\n\n    def delete_data_more(self):\n        delete_list = self.session.query(News).filter(News.id <= 5)\n        for item in delete_list:\n            if item:\n                self.session.delete(item)       \n            else:\n                return False\n        self.session.commit() \n\n\n\ndef main():\n    obj = OrmTest()\n    obj.add_one()\n    obj.add_more()\n\n    data = obj.get_one() \n\n    ## 防止查询失误\n    if data:  \n        print('ID:{0}  {1}'.format(data.id,data.sex))\n    else:\n        print('Not exist')\n\n    data_more = obj.get_more()\n    print(data_more.count())  # 计数\n    for new_obj in data_more:\n        print('ID:{0}  {1} {2} {3}'.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))\n\n    obj.update_data()\n    print('数据修改成功')\n    \n    obj.delete_data()\n    print('数据删除成功')\n\n    obj.delete_data_more()\n\n\nif __name__ == '__main__':\n    main()\n```\n","slug":"python操作数据库/python操作mysql(ORM)","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxa000otssa8wlnuumd","content":"<h3 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>安装方法</strong><br><code>pip install SQLAlchemy</code></p>\n<p>更多内容参考<a href=\"https://itswl.github.io/categories/flask/\" target=\"_blank\" rel=\"noopener\">flask鱼书项目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base </span><br><span class=\"line\">from sqlalchemy import Column, Integer, String ,DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接数据库</span><br><span class=\"line\">engine = create_engine(&apos;mysql://root:password@localhost:3306/school?charset=utf8&apos;)</span><br><span class=\"line\">## 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\"># # 获取基类</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\">class News(Base): # 继承基类</span><br><span class=\"line\">    __tablename__ = &apos;students1&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key = True)</span><br><span class=\"line\">    nickname = Column(String(20))</span><br><span class=\"line\">    name = Column(String(20), nullable = False)</span><br><span class=\"line\">    sex = Column(String(1))</span><br><span class=\"line\">    in_time = Column(DateTime)</span><br><span class=\"line\">    is_vaild = Column(Boolean)</span><br><span class=\"line\">    idcard = Column(Integer, unique = True)</span><br><span class=\"line\">        </span><br><span class=\"line\">News.metadata.create_all(engine)   # 创建表格</span><br><span class=\"line\"></span><br><span class=\"line\">## 新增数据</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\">class OrmTest(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_more(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        new_obj2 = News(</span><br><span class=\"line\">            nickname = &apos;wei&apos;,</span><br><span class=\"line\">            name = &apos;lai&apos;,</span><br><span class=\"line\">            sex = &apos;女&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add_all([new_obj,</span><br><span class=\"line\">                        new_obj2])</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询数据        </span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.session.query(News).get(10)  # get 是选id为2的</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.session.query(News).filter_by(is_vaild=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 修改数据</span><br><span class=\"line\">## 将一条当作多条的一种情况</span><br><span class=\"line\">    def update_data(self):</span><br><span class=\"line\">        data_list = self.session.query(News).filter(News.id &gt;= 5)</span><br><span class=\"line\">        for item in data_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                item.is_vaild = 0 </span><br><span class=\"line\">                self.session.add(item)  # 加入</span><br><span class=\"line\">        self.session.commit()  # 提交</span><br><span class=\"line\">## filter 与 filter_by 的区别</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 删除数据</span><br><span class=\"line\">    def delete_data(self):</span><br><span class=\"line\">        data = self.session.query(News).get(8)</span><br><span class=\"line\">        if data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_data_more(self):</span><br><span class=\"line\">        delete_list = self.session.query(News).filter(News.id &lt;= 5)</span><br><span class=\"line\">        for item in delete_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                self.session.delete(item)       </span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">        self.session.commit() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = OrmTest()</span><br><span class=\"line\">    obj.add_one()</span><br><span class=\"line\">    obj.add_more()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = obj.get_one() </span><br><span class=\"line\"></span><br><span class=\"line\">    ## 防止查询失误</span><br><span class=\"line\">    if data:  </span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125;&apos;.format(data.id,data.sex))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;Not exist&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    data_more = obj.get_more()</span><br><span class=\"line\">    print(data_more.count())  # 计数</span><br><span class=\"line\">    for new_obj in data_more:</span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125; &#123;2&#125; &#123;3&#125;&apos;.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.update_data()</span><br><span class=\"line\">    print(&apos;数据修改成功&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    obj.delete_data()</span><br><span class=\"line\">    print(&apos;数据删除成功&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.delete_data_more()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用SQLAlchemy\"><a href=\"#使用SQLAlchemy\" class=\"headerlink\" title=\"使用SQLAlchemy\"></a>使用SQLAlchemy</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-16cd209b71c38636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>安装方法</strong><br><code>pip install SQLAlchemy</code></p>\n<p>更多内容参考<a href=\"https://itswl.github.io/categories/flask/\" target=\"_blank\" rel=\"noopener\">flask鱼书项目</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy.ext.declarative import declarative_base </span><br><span class=\"line\">from sqlalchemy import Column, Integer, String ,DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接数据库</span><br><span class=\"line\">engine = create_engine(&apos;mysql://root:password@localhost:3306/school?charset=utf8&apos;)</span><br><span class=\"line\">## 编码问题</span><br><span class=\"line\"></span><br><span class=\"line\"># # 获取基类</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\">class News(Base): # 继承基类</span><br><span class=\"line\">    __tablename__ = &apos;students1&apos;</span><br><span class=\"line\">    id = Column(Integer, primary_key = True)</span><br><span class=\"line\">    nickname = Column(String(20))</span><br><span class=\"line\">    name = Column(String(20), nullable = False)</span><br><span class=\"line\">    sex = Column(String(1))</span><br><span class=\"line\">    in_time = Column(DateTime)</span><br><span class=\"line\">    is_vaild = Column(Boolean)</span><br><span class=\"line\">    idcard = Column(Integer, unique = True)</span><br><span class=\"line\">        </span><br><span class=\"line\">News.metadata.create_all(engine)   # 创建表格</span><br><span class=\"line\"></span><br><span class=\"line\">## 新增数据</span><br><span class=\"line\">from sqlalchemy.orm import sessionmaker</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\">class OrmTest(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_more(self):</span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            nickname = &apos;123&apos;,</span><br><span class=\"line\">            name = &apos;321&apos;,</span><br><span class=\"line\">            sex = &apos;男&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        new_obj2 = News(</span><br><span class=\"line\">            nickname = &apos;wei&apos;,</span><br><span class=\"line\">            name = &apos;lai&apos;,</span><br><span class=\"line\">            sex = &apos;女&apos;,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add_all([new_obj,</span><br><span class=\"line\">                        new_obj2])</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        return new_obj</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询数据        </span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.session.query(News).get(10)  # get 是选id为2的</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.session.query(News).filter_by(is_vaild=True)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 修改数据</span><br><span class=\"line\">## 将一条当作多条的一种情况</span><br><span class=\"line\">    def update_data(self):</span><br><span class=\"line\">        data_list = self.session.query(News).filter(News.id &gt;= 5)</span><br><span class=\"line\">        for item in data_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                item.is_vaild = 0 </span><br><span class=\"line\">                self.session.add(item)  # 加入</span><br><span class=\"line\">        self.session.commit()  # 提交</span><br><span class=\"line\">## filter 与 filter_by 的区别</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 删除数据</span><br><span class=\"line\">    def delete_data(self):</span><br><span class=\"line\">        data = self.session.query(News).get(8)</span><br><span class=\"line\">        if data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_data_more(self):</span><br><span class=\"line\">        delete_list = self.session.query(News).filter(News.id &lt;= 5)</span><br><span class=\"line\">        for item in delete_list:</span><br><span class=\"line\">            if item:</span><br><span class=\"line\">                self.session.delete(item)       </span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">        self.session.commit() </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = OrmTest()</span><br><span class=\"line\">    obj.add_one()</span><br><span class=\"line\">    obj.add_more()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = obj.get_one() </span><br><span class=\"line\"></span><br><span class=\"line\">    ## 防止查询失误</span><br><span class=\"line\">    if data:  </span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125;&apos;.format(data.id,data.sex))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;Not exist&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    data_more = obj.get_more()</span><br><span class=\"line\">    print(data_more.count())  # 计数</span><br><span class=\"line\">    for new_obj in data_more:</span><br><span class=\"line\">        print(&apos;ID:&#123;0&#125;  &#123;1&#125; &#123;2&#125; &#123;3&#125;&apos;.format(new_obj.id,new_obj.sex,new_obj.name,new_obj.nickname))</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.update_data()</span><br><span class=\"line\">    print(&apos;数据修改成功&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    obj.delete_data()</span><br><span class=\"line\">    print(&apos;数据删除成功&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.delete_data_more()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql基础(1)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n\n**windows安装过程参考之前的文章**\nhttps://www.jianshu.com/p/e35185ec3294\n\n## MySQL语法基础\n### 创建表\n![](https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**-- 为注释，不会被执行**\n![](https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 使用查询语句建表\n```\n-- 新建数据库\nCREATE DATABASE`school`;\n\n-- 使用数据库\nUSE `school`;\n\n-- 创建表格\n-- id\n-- name\n-- nickname\n-- sex\n-- in_time\nCREATE TABLE `students`(\n\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n\t`name` VARCHAR(20) NOT NULL,\n\t`nickname` VARCHAR(20) NULL,\n\t`sex` CHAR(1) NULL,\n\t`in_time` DATETIME NULL\n) DEFAULT CHARSET 'UTF8';\n-- PRIMARY KEY 主键是用来唯一定位记录的\n-- 建议不使用任何业务相关的字段作为主键\n\n-- 在students表中添加一个class id\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n### 插入数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 插入students表   \n-- now():mysql中当前时间\nINSERT INTO `students` VALUE(1,'weilai','imwl','男',now());\n\n-- 可以选择性插入\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES('weilai','imwl','男',now());\n\n-- 插入多行数据\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES\n('weilai2','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now());\n```\n### 查询数据\n![得按照上面的先后顺序，不能颠倒](https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 查询数据库\n-- * 表示所有的\nSELECT * FROM `students`;\n-- 只查询name 和 nickname\nSELECT `name`,`nickname` FROM `students`;\n-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)\nSELECT `name`,`nickname` FROM `students` WHERE `sex`='男';\n-- 在上面基础上id倒序\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC;\n-- 在上面基础上分页\n-- 0，2  : 从第1条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 0,2;\n-- 1,2 : 从第2条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 1,2;\n```\n### 修改数据\n![](https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**where 很重要，不然就是改动整张表的数据**\n```\n-- 修改\n-- 将所有的性别改女\nUPDATE `students` SET `sex`='女';\n-- 将name为weilai 的性别回男\nUPDATE `students` SET `sex`='男' WHERE `name` = 'weilai';\n-- 将name为weilai 的性别为男,nickname改为没有昵称\nUPDATE `students` SET `sex`='男',`nickname`='没有昵称' WHERE `name` = 'weilai';\n-- 将id <3 的性别改为女\nUPDATE `students` SET `sex`='女' WHERE `id` < 3\n\n```\n### 删除数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n```\n-- 删除数据  \n-- 删除students表中，性别为女的数据\nDELETE FROM `students` WHERE `sex` = '女'\n-- 删除students表中全部数据\nDELETE FROM `students`\n```\n444\n","source":"_posts/python操作数据库/mysql基础(1).md","raw":"\n---\ntitle: mysql基础(1)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n\n**windows安装过程参考之前的文章**\nhttps://www.jianshu.com/p/e35185ec3294\n\n## MySQL语法基础\n### 创建表\n![](https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**-- 为注释，不会被执行**\n![](https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 使用查询语句建表\n```\n-- 新建数据库\nCREATE DATABASE`school`;\n\n-- 使用数据库\nUSE `school`;\n\n-- 创建表格\n-- id\n-- name\n-- nickname\n-- sex\n-- in_time\nCREATE TABLE `students`(\n\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n\t`name` VARCHAR(20) NOT NULL,\n\t`nickname` VARCHAR(20) NULL,\n\t`sex` CHAR(1) NULL,\n\t`in_time` DATETIME NULL\n) DEFAULT CHARSET 'UTF8';\n-- PRIMARY KEY 主键是用来唯一定位记录的\n-- 建议不使用任何业务相关的字段作为主键\n\n-- 在students表中添加一个class id\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n### 插入数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 插入students表   \n-- now():mysql中当前时间\nINSERT INTO `students` VALUE(1,'weilai','imwl','男',now());\n\n-- 可以选择性插入\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES('weilai','imwl','男',now());\n\n-- 插入多行数据\nINSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES\n('weilai2','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now()),\n('weilai','imwl','男',now());\n```\n### 查询数据\n![得按照上面的先后顺序，不能颠倒](https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n-- 查询数据库\n-- * 表示所有的\nSELECT * FROM `students`;\n-- 只查询name 和 nickname\nSELECT `name`,`nickname` FROM `students`;\n-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)\nSELECT `name`,`nickname` FROM `students` WHERE `sex`='男';\n-- 在上面基础上id倒序\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC;\n-- 在上面基础上分页\n-- 0，2  : 从第1条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 0,2;\n-- 1,2 : 从第2条数据开始，显示2条\nSELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`='男'\nORDER BY `id` DESC LIMIT 1,2;\n```\n### 修改数据\n![](https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**where 很重要，不然就是改动整张表的数据**\n```\n-- 修改\n-- 将所有的性别改女\nUPDATE `students` SET `sex`='女';\n-- 将name为weilai 的性别回男\nUPDATE `students` SET `sex`='男' WHERE `name` = 'weilai';\n-- 将name为weilai 的性别为男,nickname改为没有昵称\nUPDATE `students` SET `sex`='男',`nickname`='没有昵称' WHERE `name` = 'weilai';\n-- 将id <3 的性别改为女\nUPDATE `students` SET `sex`='女' WHERE `id` < 3\n\n```\n### 删除数据\n![](https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n \n```\n-- 删除数据  \n-- 删除students表中，性别为女的数据\nDELETE FROM `students` WHERE `sex` = '女'\n-- 删除students表中全部数据\nDELETE FROM `students`\n```\n444\n","slug":"python操作数据库/mysql基础(1)","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxc000ptssau96078ce","content":"<p><strong>windows安装过程参考之前的文章</strong><br><a href=\"https://www.jianshu.com/p/e35185ec3294\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e35185ec3294</a></p>\n<h2 id=\"MySQL语法基础\"><a href=\"#MySQL语法基础\" class=\"headerlink\" title=\"MySQL语法基础\"></a>MySQL语法基础</h2><h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>– 为注释，不会被执行</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"使用查询语句建表\"><a href=\"#使用查询语句建表\" class=\"headerlink\" title=\"使用查询语句建表\"></a>使用查询语句建表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 新建数据库</span><br><span class=\"line\">CREATE DATABASE`school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 使用数据库</span><br><span class=\"line\">USE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建表格</span><br><span class=\"line\">-- id</span><br><span class=\"line\">-- name</span><br><span class=\"line\">-- nickname</span><br><span class=\"line\">-- sex</span><br><span class=\"line\">-- in_time</span><br><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">\t`name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">\t`nickname` VARCHAR(20) NULL,</span><br><span class=\"line\">\t`sex` CHAR(1) NULL,</span><br><span class=\"line\">\t`in_time` DATETIME NULL</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br><span class=\"line\">-- PRIMARY KEY 主键是用来唯一定位记录的</span><br><span class=\"line\">-- 建议不使用任何业务相关的字段作为主键</span><br><span class=\"line\"></span><br><span class=\"line\">-- 在students表中添加一个class id</span><br><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 插入students表   </span><br><span class=\"line\">-- now():mysql中当前时间</span><br><span class=\"line\">INSERT INTO `students` VALUE(1,&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以选择性插入</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 插入多行数据</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES</span><br><span class=\"line\">(&apos;weilai2&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"得按照上面的先后顺序，不能颠倒\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询数据库</span><br><span class=\"line\">-- * 表示所有的</span><br><span class=\"line\">SELECT * FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;;</span><br><span class=\"line\">-- 在上面基础上id倒序</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC;</span><br><span class=\"line\">-- 在上面基础上分页</span><br><span class=\"line\">-- 0，2  : 从第1条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 0,2;</span><br><span class=\"line\">-- 1,2 : 从第2条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 1,2;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>where 很重要，不然就是改动整张表的数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改</span><br><span class=\"line\">-- 将所有的性别改女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别回男</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别为男,nickname改为没有昵称</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos;,`nickname`=&apos;没有昵称&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将id &lt;3 的性别改为女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos; WHERE `id` &lt; 3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 删除数据  </span><br><span class=\"line\">-- 删除students表中，性别为女的数据</span><br><span class=\"line\">DELETE FROM `students` WHERE `sex` = &apos;女&apos;</span><br><span class=\"line\">-- 删除students表中全部数据</span><br><span class=\"line\">DELETE FROM `students`</span><br></pre></td></tr></table></figure>\n<p>444</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>windows安装过程参考之前的文章</strong><br><a href=\"https://www.jianshu.com/p/e35185ec3294\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e35185ec3294</a></p>\n<h2 id=\"MySQL语法基础\"><a href=\"#MySQL语法基础\" class=\"headerlink\" title=\"MySQL语法基础\"></a>MySQL语法基础</h2><h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e5337691cb52df57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6f81961566f3b52a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>– 为注释，不会被执行</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f5e3b6d515a3c27f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h4 id=\"使用查询语句建表\"><a href=\"#使用查询语句建表\" class=\"headerlink\" title=\"使用查询语句建表\"></a>使用查询语句建表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 新建数据库</span><br><span class=\"line\">CREATE DATABASE`school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 使用数据库</span><br><span class=\"line\">USE `school`;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 创建表格</span><br><span class=\"line\">-- id</span><br><span class=\"line\">-- name</span><br><span class=\"line\">-- nickname</span><br><span class=\"line\">-- sex</span><br><span class=\"line\">-- in_time</span><br><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">\t`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">\t`name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">\t`nickname` VARCHAR(20) NULL,</span><br><span class=\"line\">\t`sex` CHAR(1) NULL,</span><br><span class=\"line\">\t`in_time` DATETIME NULL</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br><span class=\"line\">-- PRIMARY KEY 主键是用来唯一定位记录的</span><br><span class=\"line\">-- 建议不使用任何业务相关的字段作为主键</span><br><span class=\"line\"></span><br><span class=\"line\">-- 在students表中添加一个class id</span><br><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bcf9fc45ccef45c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 插入students表   </span><br><span class=\"line\">-- now():mysql中当前时间</span><br><span class=\"line\">INSERT INTO `students` VALUE(1,&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 可以选择性插入</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br><span class=\"line\"></span><br><span class=\"line\">-- 插入多行数据</span><br><span class=\"line\">INSERT INTO `students`(`name`,`nickname`,`sex`,`in_time`) VALUES</span><br><span class=\"line\">(&apos;weilai2&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now()),</span><br><span class=\"line\">(&apos;weilai&apos;,&apos;imwl&apos;,&apos;男&apos;,now());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-53f0c41769e97f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"得按照上面的先后顺序，不能颠倒\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询数据库</span><br><span class=\"line\">-- * 表示所有的</span><br><span class=\"line\">SELECT * FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students`;</span><br><span class=\"line\">-- 只查询name 和 nickname,同时性别为男的(查询表中不显示男)</span><br><span class=\"line\">SELECT `name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;;</span><br><span class=\"line\">-- 在上面基础上id倒序</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC;</span><br><span class=\"line\">-- 在上面基础上分页</span><br><span class=\"line\">-- 0，2  : 从第1条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 0,2;</span><br><span class=\"line\">-- 1,2 : 从第2条数据开始，显示2条</span><br><span class=\"line\">SELECT `id`,`name`,`nickname` FROM `students` WHERE `sex`=&apos;男&apos;</span><br><span class=\"line\">ORDER BY `id` DESC LIMIT 1,2;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-55179cbdc79cdbb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><strong>where 很重要，不然就是改动整张表的数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 修改</span><br><span class=\"line\">-- 将所有的性别改女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别回男</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将name为weilai 的性别为男,nickname改为没有昵称</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;男&apos;,`nickname`=&apos;没有昵称&apos; WHERE `name` = &apos;weilai&apos;;</span><br><span class=\"line\">-- 将id &lt;3 的性别改为女</span><br><span class=\"line\">UPDATE `students` SET `sex`=&apos;女&apos; WHERE `id` &lt; 3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bbe41919edbb6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 删除数据  </span><br><span class=\"line\">-- 删除students表中，性别为女的数据</span><br><span class=\"line\">DELETE FROM `students` WHERE `sex` = &apos;女&apos;</span><br><span class=\"line\">-- 删除students表中全部数据</span><br><span class=\"line\">DELETE FROM `students`</span><br></pre></td></tr></table></figure>\n<p>444</p>\n"},{"title":"mysql基础(2)","date":"2019-01-14T13:57:47.000Z","_content":"\n## 外键\n在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。\n\n**在students表中添加一个class id(id的后一列)**\n```\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n**在数据库school中建立一个班级表**\n```\nCREATE TABLE `students`(\n    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(20) NOT NULL,\n) DEFAULT CHARSET 'UTF8';\n```\n**添加/删除 外键**\n```\nALTER TABLE `students`\nADD CONSTRAINT `qe`\n-- 外键约束名称，随意取值 \nFOREIGN KEY (`class id`)\nREFERENCES `class` (`id`);\n\n-- ALTER TABLE `school`.`students` \n-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);\n\n-- 删除外键\nALTER TABLE `students`\nDROP FOREIGN KEY `qe`;\n删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的\n```\n\n通过中间表，可以定义了一个“多对多”关系。\n\n**一对一：**一个表的记录对应到另一个表的唯一一个记录\n\n有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度\n\n## 索引\n在查找记录的时候，想要获得非常快的速度，就需要使用索引\n```\nALTER TABLE `school`.`students` \nADD INDEX `sex search`(`sex`);   \n-- 名称为sex search，使用列 sex 的索引\n-- 也可以多列\nALTER TABLE `school`.`students` \nADD INDEX `search`(`sex`，`name`); \n```\n索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。\n```\nALTER TABLE `school`.`students` \nDROP INDEX `sex search`;\n-- 删除索引\n```\n\n**假设name不重复，那么可以创建唯一索引\n```\n ADD UNIQUE INDEX `search`(`name`) \n```\n**没索引，但对is_vaild进行唯一约束\n```\nALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (is_vaild);\n```\n**通过对数据库表创建索引，可以提高查询速度。**\n\n**通过创建唯一索引，可以保证某一列的值具有唯一性。**\n\n**数据库索引对于用户和应用程序来说都是透明的。**\n\n## 查询补充\n```\nSELECT * FROM `students` WHERE  `id` >= 10 AND `sex` != '女'  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;\n\nSELECT  COUNT(*)  num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n\nSELECT  AVG(id) num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n```\n![GROUP BY](https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![sql内置函数](https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4\n","source":"_posts/python操作数据库/mysql基础(2).md","raw":"\n---\ntitle: mysql基础(2)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n## 外键\n在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。\n\n**在students表中添加一个class id(id的后一列)**\n```\nALTER TABLE `school`.`students`\nADD COLUMN `class id` int NULL AFTER `id`;\n```\n**在数据库school中建立一个班级表**\n```\nCREATE TABLE `students`(\n    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(20) NOT NULL,\n) DEFAULT CHARSET 'UTF8';\n```\n**添加/删除 外键**\n```\nALTER TABLE `students`\nADD CONSTRAINT `qe`\n-- 外键约束名称，随意取值 \nFOREIGN KEY (`class id`)\nREFERENCES `class` (`id`);\n\n-- ALTER TABLE `school`.`students` \n-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);\n\n-- 删除外键\nALTER TABLE `students`\nDROP FOREIGN KEY `qe`;\n删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的\n```\n\n通过中间表，可以定义了一个“多对多”关系。\n\n**一对一：**一个表的记录对应到另一个表的唯一一个记录\n\n有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度\n\n## 索引\n在查找记录的时候，想要获得非常快的速度，就需要使用索引\n```\nALTER TABLE `school`.`students` \nADD INDEX `sex search`(`sex`);   \n-- 名称为sex search，使用列 sex 的索引\n-- 也可以多列\nALTER TABLE `school`.`students` \nADD INDEX `search`(`sex`，`name`); \n```\n索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。\n```\nALTER TABLE `school`.`students` \nDROP INDEX `sex search`;\n-- 删除索引\n```\n\n**假设name不重复，那么可以创建唯一索引\n```\n ADD UNIQUE INDEX `search`(`name`) \n```\n**没索引，但对is_vaild进行唯一约束\n```\nALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (is_vaild);\n```\n**通过对数据库表创建索引，可以提高查询速度。**\n\n**通过创建唯一索引，可以保证某一列的值具有唯一性。**\n\n**数据库索引对于用户和应用程序来说都是透明的。**\n\n## 查询补充\n```\nSELECT * FROM `students` WHERE  `id` >= 10 AND `sex` != '女'  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;\n\nSELECT  COUNT(*)  num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n\nSELECT  AVG(id) num FROM `students` WHERE NOT `id` >= 10 AND `sex` != '女'  ORDER BY `id` DESC LIMIT 0,8 ;\n```\n![GROUP BY](https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![sql内置函数](https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n4\n","slug":"python操作数据库/mysql基础(2)","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxe000stssaw32oihjd","content":"<h2 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h2><p>在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。</p>\n<p><strong>在students表中添加一个class id(id的后一列)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在数据库school中建立一个班级表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>添加/删除 外键</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">ADD CONSTRAINT `qe`</span><br><span class=\"line\">-- 外键约束名称，随意取值 </span><br><span class=\"line\">FOREIGN KEY (`class id`)</span><br><span class=\"line\">REFERENCES `class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- ALTER TABLE `school`.`students` </span><br><span class=\"line\">-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除外键</span><br><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">DROP FOREIGN KEY `qe`;</span><br><span class=\"line\">删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的</span><br></pre></td></tr></table></figure></p>\n<p>通过中间表，可以定义了一个“多对多”关系。</p>\n<p><strong>一对一：</strong>一个表的记录对应到另一个表的唯一一个记录</p>\n<p>有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在查找记录的时候，想要获得非常快的速度，就需要使用索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `sex search`(`sex`);   </span><br><span class=\"line\">-- 名称为sex search，使用列 sex 的索引</span><br><span class=\"line\">-- 也可以多列</span><br><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `search`(`sex`，`name`);</span><br></pre></td></tr></table></figure></p>\n<p>索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">DROP INDEX `sex search`;</span><br><span class=\"line\">-- 删除索引</span><br></pre></td></tr></table></figure></p>\n<p>**假设name不重复，那么可以创建唯一索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD UNIQUE INDEX `search`(`name`)</span><br></pre></td></tr></table></figure></p>\n<p>**没索引，但对is_vaild进行唯一约束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE students</span><br><span class=\"line\">ADD CONSTRAINT uni_name UNIQUE (is_vaild);</span><br></pre></td></tr></table></figure></p>\n<p><strong>通过对数据库表创建索引，可以提高查询速度。</strong></p>\n<p><strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong></p>\n<p><strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p>\n<h2 id=\"查询补充\"><a href=\"#查询补充\" class=\"headerlink\" title=\"查询补充\"></a>查询补充</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `students` WHERE  `id` &gt;= 10 AND `sex` != &apos;女&apos;  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  COUNT(*)  num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  AVG(id) num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"GROUP BY\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"sql内置函数\"><br>4</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h2><p>在students表中，通过class id的字段，可以把数据与另一张表（class）关联起来，这种列称为外键。</p>\n<p><strong>在students表中添加一个class id(id的后一列)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students`</span><br><span class=\"line\">ADD COLUMN `class id` int NULL AFTER `id`;</span><br></pre></td></tr></table></figure></p>\n<p><strong>在数据库school中建立一个班级表</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `students`(</span><br><span class=\"line\">    `class id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">    `name` VARCHAR(20) NOT NULL,</span><br><span class=\"line\">) DEFAULT CHARSET &apos;UTF8&apos;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>添加/删除 外键</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">ADD CONSTRAINT `qe`</span><br><span class=\"line\">-- 外键约束名称，随意取值 </span><br><span class=\"line\">FOREIGN KEY (`class id`)</span><br><span class=\"line\">REFERENCES `class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- ALTER TABLE `school`.`students` </span><br><span class=\"line\">-- ADD FOREIGN KEY (`class id`) REFERENCES `school`.`class` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除外键</span><br><span class=\"line\">ALTER TABLE `students`</span><br><span class=\"line\">DROP FOREIGN KEY `qe`;</span><br><span class=\"line\">删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的</span><br></pre></td></tr></table></figure></p>\n<p>通过中间表，可以定义了一个“多对多”关系。</p>\n<p><strong>一对一：</strong>一个表的记录对应到另一个表的唯一一个记录</p>\n<p>有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在查找记录的时候，想要获得非常快的速度，就需要使用索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `sex search`(`sex`);   </span><br><span class=\"line\">-- 名称为sex search，使用列 sex 的索引</span><br><span class=\"line\">-- 也可以多列</span><br><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">ADD INDEX `search`(`sex`，`name`);</span><br></pre></td></tr></table></figure></p>\n<p>索引的效率取决于索引列的值是否散列，例如sex列，大约一半的记录值是男，另一半是女，因此，对该列创建索引就没有意义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `school`.`students` </span><br><span class=\"line\">DROP INDEX `sex search`;</span><br><span class=\"line\">-- 删除索引</span><br></pre></td></tr></table></figure></p>\n<p>**假设name不重复，那么可以创建唯一索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADD UNIQUE INDEX `search`(`name`)</span><br></pre></td></tr></table></figure></p>\n<p>**没索引，但对is_vaild进行唯一约束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE students</span><br><span class=\"line\">ADD CONSTRAINT uni_name UNIQUE (is_vaild);</span><br></pre></td></tr></table></figure></p>\n<p><strong>通过对数据库表创建索引，可以提高查询速度。</strong></p>\n<p><strong>通过创建唯一索引，可以保证某一列的值具有唯一性。</strong></p>\n<p><strong>数据库索引对于用户和应用程序来说都是透明的。</strong></p>\n<h2 id=\"查询补充\"><a href=\"#查询补充\" class=\"headerlink\" title=\"查询补充\"></a>查询补充</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM `students` WHERE  `id` &gt;= 10 AND `sex` != &apos;女&apos;  GROUP BY `id`  HAVING `in_time` ORDER BY `id` DESC LIMIT 0,3;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  COUNT(*)  num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT  AVG(id) num FROM `students` WHERE NOT `id` &gt;= 10 AND `sex` != &apos;女&apos;  ORDER BY `id` DESC LIMIT 0,8 ;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b7ad0cd7670e55c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"GROUP BY\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b4e8a4680f18d4e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"sql内置函数\"><br>4</p>\n"},{"title":"mysql基础(3)","date":"2019-01-14T13:57:47.000Z","_content":"\n\n### 多表联查\n![多表联查](https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![投影查询 简写](https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![加where](https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用多表查询可以获取M x N行记录**（M,N为两个表各自的行数）\n**多表查询的结果集可能非常巨大，要小心使用。**\n\n### 内连接\n```\nmysql>   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |\n|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |\n|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |\n| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |\n| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |\n| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |\n| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n\n```\n**INNER JOIN查询的写法是：**\n\n先确定主表，仍然使用`FROM <表1>`的语法；\n再确定需要连接的表，使用`INNER JOIN <表2>`的语法；\n然后确定连接条件，使用`ON <条件...>`，这里的条件是`s.class id = c.id`，表示`students`表的`class id`列与`class`表的`id`列相同的行需要连接；\n**可选：**加上`WHERE`子句、`ORDER BY`等子句。\n\n### 小结\n`JOIN`查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；\n\n`INNER JOIN`是最常用的一种`JOIN`查询，它的语法是`SELECT ... FROM <表1> INNER JOIN <表2> ON <条件...>；`\n\n`JOIN`查询仍然可以使用`WHERE`条件和`ORDER BY`排序。\n  ##  补充知识\n假设查询语句是：\n\n```\nSELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;\n\n```\n\n我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：\n\n![inner-join](http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nLEFT OUTER JOIN是选出左表存在的记录：\n\n![left-outer-join](http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nRIGHT OUTER JOIN是选出右表存在的记录：\n\n![right-outer-join](http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nFULL OUTER JOIN则是选出左右表都存在的记录：\n\n![full-outer-join](http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/python操作数据库/mysql基础(3).md","raw":"---\ntitle: mysql基础(3)\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n### 多表联查\n![多表联查](https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![投影查询 简写](https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![加where](https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用多表查询可以获取M x N行记录**（M,N为两个表各自的行数）\n**多表查询的结果集可能非常巨大，要小心使用。**\n\n### 内连接\n```\nmysql>   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |\n|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |\n|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |\n| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |\n| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |\n| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |\n| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |\n| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |\n+----+---------+----------+-----------+------+--------------+---------------------+----------+\n\n```\n**INNER JOIN查询的写法是：**\n\n先确定主表，仍然使用`FROM <表1>`的语法；\n再确定需要连接的表，使用`INNER JOIN <表2>`的语法；\n然后确定连接条件，使用`ON <条件...>`，这里的条件是`s.class id = c.id`，表示`students`表的`class id`列与`class`表的`id`列相同的行需要连接；\n**可选：**加上`WHERE`子句、`ORDER BY`等子句。\n\n### 小结\n`JOIN`查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；\n\n`INNER JOIN`是最常用的一种`JOIN`查询，它的语法是`SELECT ... FROM <表1> INNER JOIN <表2> ON <条件...>；`\n\n`JOIN`查询仍然可以使用`WHERE`条件和`ORDER BY`排序。\n  ##  补充知识\n假设查询语句是：\n\n```\nSELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;\n\n```\n\n我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：\n\n![inner-join](http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nLEFT OUTER JOIN是选出左表存在的记录：\n\n![left-outer-join](http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nRIGHT OUTER JOIN是选出右表存在的记录：\n\n![right-outer-join](http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nFULL OUTER JOIN则是选出左右表都存在的记录：\n\n![full-outer-join](http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"python操作数据库/mysql基础(3)","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxg000utssayxasg4oa","content":"<h3 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"多表联查\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"投影查询 简写\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"加where\"></p>\n<p><strong>使用多表查询可以获取M x N行记录</strong>（M,N为两个表各自的行数）<br><strong>多表查询的结果集可能非常巨大，要小心使用。</strong></p>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |</span><br><span class=\"line\">|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |</span><br><span class=\"line\">|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br></pre></td></tr></table></figure>\n<p><strong>INNER JOIN查询的写法是：</strong></p>\n<p>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；<br>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；<br>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class id = c.id</code>，表示<code>students</code>表的<code>class id</code>列与<code>class</code>表的<code>id</code>列相同的行需要连接；<br><strong>可选：</strong>加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>JOIN</code>查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p>\n<p><code>INNER JOIN</code>是最常用的一种<code>JOIN</code>查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；</code></p>\n<p><code>JOIN</code>查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p>假设查询语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</span><br></pre></td></tr></table></figure>\n<p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inner-join\"></p>\n<p>LEFT OUTER JOIN是选出左表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"left-outer-join\"></p>\n<p>RIGHT OUTER JOIN是选出右表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"right-outer-join\"></p>\n<p>FULL OUTER JOIN则是选出左右表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"full-outer-join\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1fa4f7a5a63d4bb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"多表联查\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b63431d5c819503c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"投影查询 简写\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d745bdc83fac0f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"加where\"></p>\n<p><strong>使用多表查询可以获取M x N行记录</strong>（M,N为两个表各自的行数）<br><strong>多表查询的结果集可能非常巨大，要小心使用。</strong></p>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;   SELECT  s.id, s.name,`s`.`class id`, s.nickname,s.sex,c.name,s.in_time,s.is_vaild FROM students s INNER JOIN class c ON `s`.`class id` = c.id;</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">| id | name    | class id | nickname  | sex  | name         | in_time             | is_vaild |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br><span class=\"line\">|  7 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        1 |</span><br><span class=\"line\">|  8 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |        2 |</span><br><span class=\"line\">|  9 | weilai  |      202 | imwl      | 男   | 二年二班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 10 | weilai2 |      201 | imwl      | 男   | 二年一班     | 2018-12-27 22:05:41 |     NULL |</span><br><span class=\"line\">| 12 | name1   |      201 | nickname1 | 女   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 13 | name2   |      201 | nickname2 | 男   | 二年一班     | NULL                |     NULL |</span><br><span class=\"line\">| 19 | 2       |      301 | i         | 男   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 20 | 3       |      301 | m         | 女   | 三年一班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 21 | 4       |      302 | w         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">| 22 | 5       |      302 | l         | 男   | 三年二班     | 2019-02-27 12:02:04 |     NULL |</span><br><span class=\"line\">+----+---------+----------+-----------+------+--------------+---------------------+----------+</span><br></pre></td></tr></table></figure>\n<p><strong>INNER JOIN查询的写法是：</strong></p>\n<p>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；<br>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；<br>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class id = c.id</code>，表示<code>students</code>表的<code>class id</code>列与<code>class</code>表的<code>id</code>列相同的行需要连接；<br><strong>可选：</strong>加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><code>JOIN</code>查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p>\n<p><code>INNER JOIN</code>是最常用的一种<code>JOIN</code>查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；</code></p>\n<p><code>JOIN</code>查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p>假设查询语句是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</span><br></pre></td></tr></table></figure>\n<p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-09046e20094fd1a3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"inner-join\"></p>\n<p>LEFT OUTER JOIN是选出左表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-50bdf5c6968d8023?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"left-outer-join\"></p>\n<p>RIGHT OUTER JOIN是选出右表存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-73c084a179aae278?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"right-outer-join\"></p>\n<p>FULL OUTER JOIN则是选出左右表都存在的记录：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3720c7085052d139?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"full-outer-join\"></p>\n"},{"title":"数据库","date":"2019-01-14T13:57:47.000Z","_content":"\n\n### 数据库分类\n1. 关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）\n2. 非关系型数据库 (mongoDB,redis等）\n>非关系型数据库分类\n>1 . 文档型\n>2 . key-value型\n>3 . 列式数据库\n>4 . 图形数据库\n\n![文档型](https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![key-value型](https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列式数据库](https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![图形数据库](https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","source":"_posts/python操作数据库/数据库.md","raw":"---\ntitle: 数据库\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n\n### 数据库分类\n1. 关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）\n2. 非关系型数据库 (mongoDB,redis等）\n>非关系型数据库分类\n>1 . 文档型\n>2 . key-value型\n>3 . 列式数据库\n>4 . 图形数据库\n\n![文档型](https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![key-value型](https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![列式数据库](https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![图形数据库](https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n","slug":"python操作数据库/数据库","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxi000xtssa2y1yw2mb","content":"<h3 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h3><ol>\n<li>关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）</li>\n<li>非关系型数据库 (mongoDB,redis等）<blockquote>\n<p>非关系型数据库分类<br>1 . 文档型<br>2 . key-value型<br>3 . 列式数据库<br>4 . 图形数据库</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文档型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key-value型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列式数据库\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图形数据库\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据库分类\"><a href=\"#数据库分类\" class=\"headerlink\" title=\"数据库分类\"></a>数据库分类</h3><ol>\n<li>关系型数据库 （MySQL,SQLServer,MariaDB,ORACLE等）</li>\n<li>非关系型数据库 (mongoDB,redis等）<blockquote>\n<p>非关系型数据库分类<br>1 . 文档型<br>2 . key-value型<br>3 . 列式数据库<br>4 . 图形数据库</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fc6fb37e658ccdef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文档型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8327d7388351ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"key-value型\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c8cba2661e5e89b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"列式数据库\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8fbd4988bfc90592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图形数据库\"></p>\n"},{"title":"docker","date":"2019-08-21T03:51:16.000Z","_content":"\n\n## docker\n**Linux 容器**不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离\n\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口\n\n**Docker** 将应用程序与该程序的依赖，打包在一个文件(**image**)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.\n容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n**image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例**\n## docker 安装\n```\ncurl https://get.docker.com > /tmp/install.sh\nchmod +x /tmp/install.sh\n/tmp/install.sh\nsudo usermod -aG docker root\nservice docker restart\nservice docker status\n```\n\n## 快速确认\n`docker version `\n\n## 第一个镜像\n\n```\ndocker run debian echo \"hello world\"\n```\n\n1. **docker run**  : 启动容器\n2. **debian** : 使用的镜像名称  （在docker hub 进行搜素，并下载最新版）\n3. **echo \"hello world\"** : 执行的命令\n\n\n```\ndocker run -i -t debian /bin/bash\n```\n\n\n1. **-i -t**  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端\n2. **/bin/bash** : 获得一个 bash shell\n3. **退出 shell, 容器就会停止**\n\n``` \ndocker run --name weilai -h docker -i -t debian /bin/bash  # -h 指定hostname --name 指定docker name\ndocker inspect weilai # 获取 weilai 容器的更多信息\ndoker diff weilai  # 查看 weilai 文件的更改\ndocker logs weilai # weilai 容器里曾经发生的事情\ndocker ps # 正在运行的 docker 容器\ndocker ps -a # 列出所有容器\ndocker start weilai # 启动已有容器   docker run 是启动一个新的实例  \ndocker attach weilai  # 切换到运行交互式容器\ndocker stop weilai  # 停止容器\ndocker rm weilai \n\n```\n\n\n`docker run`；创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；\n`docker exec`: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；\n`docker attach`: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；\n","source":"_posts/docker/readme.md","raw":"---\n\ntitle: docker\n\ndate: 2019-8-21 11:51:16\n\ntags: \n\ncategories: docker\n\n---\n\n\n## docker\n**Linux 容器**不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离\n\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口\n\n**Docker** 将应用程序与该程序的依赖，打包在一个文件(**image**)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.\n容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n**image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例**\n## docker 安装\n```\ncurl https://get.docker.com > /tmp/install.sh\nchmod +x /tmp/install.sh\n/tmp/install.sh\nsudo usermod -aG docker root\nservice docker restart\nservice docker status\n```\n\n## 快速确认\n`docker version `\n\n## 第一个镜像\n\n```\ndocker run debian echo \"hello world\"\n```\n\n1. **docker run**  : 启动容器\n2. **debian** : 使用的镜像名称  （在docker hub 进行搜素，并下载最新版）\n3. **echo \"hello world\"** : 执行的命令\n\n\n```\ndocker run -i -t debian /bin/bash\n```\n\n\n1. **-i -t**  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端\n2. **/bin/bash** : 获得一个 bash shell\n3. **退出 shell, 容器就会停止**\n\n``` \ndocker run --name weilai -h docker -i -t debian /bin/bash  # -h 指定hostname --name 指定docker name\ndocker inspect weilai # 获取 weilai 容器的更多信息\ndoker diff weilai  # 查看 weilai 文件的更改\ndocker logs weilai # weilai 容器里曾经发生的事情\ndocker ps # 正在运行的 docker 容器\ndocker ps -a # 列出所有容器\ndocker start weilai # 启动已有容器   docker run 是启动一个新的实例  \ndocker attach weilai  # 切换到运行交互式容器\ndocker stop weilai  # 停止容器\ndocker rm weilai \n\n```\n\n\n`docker run`；创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；\n`docker exec`: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；\n`docker attach`: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；\n","slug":"docker/readme","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxj000ztssaiu8bjqa3","content":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p><strong>Linux 容器</strong>不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离</p>\n<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</p>\n<p><strong>Docker</strong> 将应用程序与该程序的依赖，打包在一个文件(<strong>image</strong>)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.<br>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p><strong>image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例</strong></p>\n<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; /tmp/install.sh</span><br><span class=\"line\">chmod +x /tmp/install.sh</span><br><span class=\"line\">/tmp/install.sh</span><br><span class=\"line\">sudo usermod -aG docker root</span><br><span class=\"line\">service docker restart</span><br><span class=\"line\">service docker status</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速确认\"><a href=\"#快速确认\" class=\"headerlink\" title=\"快速确认\"></a>快速确认</h2><p><code>docker version</code></p>\n<h2 id=\"第一个镜像\"><a href=\"#第一个镜像\" class=\"headerlink\" title=\"第一个镜像\"></a>第一个镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run debian echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>docker run</strong>  : 启动容器</li>\n<li><strong>debian</strong> : 使用的镜像名称  （在docker hub 进行搜素，并下载最新版）</li>\n<li><strong>echo “hello world”</strong> : 执行的命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t debian /bin/bash</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>-i -t</strong>  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端</li>\n<li><strong>/bin/bash</strong> : 获得一个 bash shell</li>\n<li><strong>退出 shell, 容器就会停止</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name weilai -h docker -i -t debian /bin/bash  # -h 指定hostname --name 指定docker name</span><br><span class=\"line\">docker inspect weilai # 获取 weilai 容器的更多信息</span><br><span class=\"line\">doker diff weilai  # 查看 weilai 文件的更改</span><br><span class=\"line\">docker logs weilai # weilai 容器里曾经发生的事情</span><br><span class=\"line\">docker ps # 正在运行的 docker 容器</span><br><span class=\"line\">docker ps -a # 列出所有容器</span><br><span class=\"line\">docker start weilai # 启动已有容器   docker run 是启动一个新的实例  </span><br><span class=\"line\">docker attach weilai  # 切换到运行交互式容器</span><br><span class=\"line\">docker stop weilai  # 停止容器</span><br><span class=\"line\">docker rm weilai</span><br></pre></td></tr></table></figure>\n<p><code>docker run</code>；创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；<br><code>docker exec</code>: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；<br><code>docker attach</code>: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p><strong>Linux 容器</strong>不是模拟一个完整的操作系统，而是对进程进行隔离。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离</p>\n<p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口</p>\n<p><strong>Docker</strong> 将应用程序与该程序的依赖，打包在一个文件(<strong>image</strong>)里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.<br>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p><strong>image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例</strong></p>\n<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://get.docker.com &gt; /tmp/install.sh</span><br><span class=\"line\">chmod +x /tmp/install.sh</span><br><span class=\"line\">/tmp/install.sh</span><br><span class=\"line\">sudo usermod -aG docker root</span><br><span class=\"line\">service docker restart</span><br><span class=\"line\">service docker status</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速确认\"><a href=\"#快速确认\" class=\"headerlink\" title=\"快速确认\"></a>快速确认</h2><p><code>docker version</code></p>\n<h2 id=\"第一个镜像\"><a href=\"#第一个镜像\" class=\"headerlink\" title=\"第一个镜像\"></a>第一个镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run debian echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>docker run</strong>  : 启动容器</li>\n<li><strong>debian</strong> : 使用的镜像名称  （在docker hub 进行搜素，并下载最新版）</li>\n<li><strong>echo “hello world”</strong> : 执行的命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t debian /bin/bash</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>-i -t</strong>  : 附有一个 tty 的交互会话     -i 支持stdin , -t 终端或伪终端</li>\n<li><strong>/bin/bash</strong> : 获得一个 bash shell</li>\n<li><strong>退出 shell, 容器就会停止</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name weilai -h docker -i -t debian /bin/bash  # -h 指定hostname --name 指定docker name</span><br><span class=\"line\">docker inspect weilai # 获取 weilai 容器的更多信息</span><br><span class=\"line\">doker diff weilai  # 查看 weilai 文件的更改</span><br><span class=\"line\">docker logs weilai # weilai 容器里曾经发生的事情</span><br><span class=\"line\">docker ps # 正在运行的 docker 容器</span><br><span class=\"line\">docker ps -a # 列出所有容器</span><br><span class=\"line\">docker start weilai # 启动已有容器   docker run 是启动一个新的实例  </span><br><span class=\"line\">docker attach weilai  # 切换到运行交互式容器</span><br><span class=\"line\">docker stop weilai  # 停止容器</span><br><span class=\"line\">docker rm weilai</span><br></pre></td></tr></table></figure>\n<p><code>docker run</code>；创建和启动一个新的容器实例，操作对象是镜像，选项较多，如果你要创建和启动一个容器，只能用run；<br><code>docker exec</code>: 在已运行的容器中，执行命令，操作对象是容器，如果你要进入已运行的容器，并且执行命令，用exec；<br><code>docker attach</code>: 同样操作的是已运行的容器，可以将本机标准输入（键盘输入）输到容器中，也可以将容器的输出显示在本机的屏幕上，如果你想查看容器运行过程中产生的标准输入输出，用attach；</p>\n"},{"title":"使用MySQL","date":"2019-01-14T13:57:47.000Z","_content":"\n示例数据 `https://codeload.github.com/datacharmer/test_db/zip/master`\n导入 eg: `mysql -u root -p < employees.sql`\n\n## 连接到 MySQL\n \\g 输出水平显示\n \\G 输出垂直显示\n\n```\nmysql -h localhost -P 3306 -u root -p  - 连接到mysql\nALTER USER `root`@`localhost` IDENTIFIED BY 'password';  - 修改密码\n```\n### 创建数据库\n数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库\n\n`数据库服务器 → 数据库 → 表（由列定义） → 行`\n\n1. CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 **数据定义语言（DDL）操作**\n2. INSERT/UPDATE/DELETE /SELECT  称为 **数据操作语言（DML）** 前三项也称 **写**，SELECT 也称 **读**\n\n```\nCREATE DATABASE company;  - 创建数据库 建议都用 ``\nCREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） \nUSE `company`; - 使用 company 数据库\nmysql -u root -p company  - 直接连接到 company 数据库\nSELECT DATABASE(); - 查找连接到的数据库\nSHOW DATABASES; - 查找有权访问的所有数据库\nSHOW VARIABLES LIKE 'company'; - 获取当前的数据目录\n\n```\n`sudo ls -lhtr /usr/lcoal/mysql/data/`\n\n### 创建表\n```\nCREATE TABLE IF NOT EXISITS `company`.`customers`(\n`id` int unsigned AUTO_INCREMENT PRIMARY KEY,\n`first_name` varchar(20),\n`last_name` varchar(20),\n`country` varchar(20)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n\nSHOW TABLES - 查看所有表\nSHOW CREATE TABLE customers\\G - 查看表结构\nDESC customers;\nCREATE TABLE new_costomers Like customers - 克隆表结构\n```\n\n### 增删改查\n参考\n\n删除表的所有行最快的方式 `TRUNCATE TABLE customers`  DDL操作。\n\n## 创建用户\n**除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句**\n\n\n\n","source":"_posts/python操作数据库/使用MySQL.md","raw":"\n---\ntitle: 使用MySQL\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n示例数据 `https://codeload.github.com/datacharmer/test_db/zip/master`\n导入 eg: `mysql -u root -p < employees.sql`\n\n## 连接到 MySQL\n \\g 输出水平显示\n \\G 输出垂直显示\n\n```\nmysql -h localhost -P 3306 -u root -p  - 连接到mysql\nALTER USER `root`@`localhost` IDENTIFIED BY 'password';  - 修改密码\n```\n### 创建数据库\n数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库\n\n`数据库服务器 → 数据库 → 表（由列定义） → 行`\n\n1. CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 **数据定义语言（DDL）操作**\n2. INSERT/UPDATE/DELETE /SELECT  称为 **数据操作语言（DML）** 前三项也称 **写**，SELECT 也称 **读**\n\n```\nCREATE DATABASE company;  - 创建数据库 建议都用 ``\nCREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） \nUSE `company`; - 使用 company 数据库\nmysql -u root -p company  - 直接连接到 company 数据库\nSELECT DATABASE(); - 查找连接到的数据库\nSHOW DATABASES; - 查找有权访问的所有数据库\nSHOW VARIABLES LIKE 'company'; - 获取当前的数据目录\n\n```\n`sudo ls -lhtr /usr/lcoal/mysql/data/`\n\n### 创建表\n```\nCREATE TABLE IF NOT EXISITS `company`.`customers`(\n`id` int unsigned AUTO_INCREMENT PRIMARY KEY,\n`first_name` varchar(20),\n`last_name` varchar(20),\n`country` varchar(20)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n\nSHOW TABLES - 查看所有表\nSHOW CREATE TABLE customers\\G - 查看表结构\nDESC customers;\nCREATE TABLE new_costomers Like customers - 克隆表结构\n```\n\n### 增删改查\n参考\n\n删除表的所有行最快的方式 `TRUNCATE TABLE customers`  DDL操作。\n\n## 创建用户\n**除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句**\n\n\n\n","slug":"python操作数据库/使用MySQL","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxk0012tssag8oldtus","content":"<p>示例数据 <code>https://codeload.github.com/datacharmer/test_db/zip/master</code><br>导入 eg: <code>mysql -u root -p &lt; employees.sql</code></p>\n<h2 id=\"连接到-MySQL\"><a href=\"#连接到-MySQL\" class=\"headerlink\" title=\"连接到 MySQL\"></a>连接到 MySQL</h2><p> \\g 输出水平显示<br> \\G 输出垂直显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -P 3306 -u root -p  - 连接到mysql</span><br><span class=\"line\">ALTER USER `root`@`localhost` IDENTIFIED BY &apos;password&apos;;  - 修改密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库</p>\n<p><code>数据库服务器 → 数据库 → 表（由列定义） → 行</code></p>\n<ol>\n<li>CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 <strong>数据定义语言（DDL）操作</strong></li>\n<li>INSERT/UPDATE/DELETE /SELECT  称为 <strong>数据操作语言（DML）</strong> 前三项也称 <strong>写</strong>，SELECT 也称 <strong>读</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE company;  - 创建数据库 建议都用 ``</span><br><span class=\"line\">CREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） </span><br><span class=\"line\">USE `company`; - 使用 company 数据库</span><br><span class=\"line\">mysql -u root -p company  - 直接连接到 company 数据库</span><br><span class=\"line\">SELECT DATABASE(); - 查找连接到的数据库</span><br><span class=\"line\">SHOW DATABASES; - 查找有权访问的所有数据库</span><br><span class=\"line\">SHOW VARIABLES LIKE &apos;company&apos;; - 获取当前的数据目录</span><br></pre></td></tr></table></figure>\n<p><code>sudo ls -lhtr /usr/lcoal/mysql/data/</code></p>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE IF NOT EXISITS `company`.`customers`(</span><br><span class=\"line\">`id` int unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">`first_name` varchar(20),</span><br><span class=\"line\">`last_name` varchar(20),</span><br><span class=\"line\">`country` varchar(20)</span><br><span class=\"line\">) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW TABLES - 查看所有表</span><br><span class=\"line\">SHOW CREATE TABLE customers\\G - 查看表结构</span><br><span class=\"line\">DESC customers;</span><br><span class=\"line\">CREATE TABLE new_costomers Like customers - 克隆表结构</span><br></pre></td></tr></table></figure>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>参考</p>\n<p>删除表的所有行最快的方式 <code>TRUNCATE TABLE customers</code>  DDL操作。</p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p><strong>除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>示例数据 <code>https://codeload.github.com/datacharmer/test_db/zip/master</code><br>导入 eg: <code>mysql -u root -p &lt; employees.sql</code></p>\n<h2 id=\"连接到-MySQL\"><a href=\"#连接到-MySQL\" class=\"headerlink\" title=\"连接到 MySQL\"></a>连接到 MySQL</h2><p> \\g 输出水平显示<br> \\G 输出垂直显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h localhost -P 3306 -u root -p  - 连接到mysql</span><br><span class=\"line\">ALTER USER `root`@`localhost` IDENTIFIED BY &apos;password&apos;;  - 修改密码</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h3><p>数据库是许多表的集合，数据库服务器可以容纳许多这样的数据库</p>\n<p><code>数据库服务器 → 数据库 → 表（由列定义） → 行</code></p>\n<ol>\n<li>CREATE/ALTER/DROP  数据库对象（数据库和表） 称为 <strong>数据定义语言（DDL）操作</strong></li>\n<li>INSERT/UPDATE/DELETE /SELECT  称为 <strong>数据操作语言（DML）</strong> 前三项也称 <strong>写</strong>，SELECT 也称 <strong>读</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE company;  - 创建数据库 建议都用 ``</span><br><span class=\"line\">CREATE DATABASE `my.contacts`; - 用反标记字符 ``（当数据库和表含特殊字符时） </span><br><span class=\"line\">USE `company`; - 使用 company 数据库</span><br><span class=\"line\">mysql -u root -p company  - 直接连接到 company 数据库</span><br><span class=\"line\">SELECT DATABASE(); - 查找连接到的数据库</span><br><span class=\"line\">SHOW DATABASES; - 查找有权访问的所有数据库</span><br><span class=\"line\">SHOW VARIABLES LIKE &apos;company&apos;; - 获取当前的数据目录</span><br></pre></td></tr></table></figure>\n<p><code>sudo ls -lhtr /usr/lcoal/mysql/data/</code></p>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE IF NOT EXISITS `company`.`customers`(</span><br><span class=\"line\">`id` int unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class=\"line\">`first_name` varchar(20),</span><br><span class=\"line\">`last_name` varchar(20),</span><br><span class=\"line\">`country` varchar(20)</span><br><span class=\"line\">) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW TABLES - 查看所有表</span><br><span class=\"line\">SHOW CREATE TABLE customers\\G - 查看表结构</span><br><span class=\"line\">DESC customers;</span><br><span class=\"line\">CREATE TABLE new_costomers Like customers - 克隆表结构</span><br></pre></td></tr></table></figure>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>参考</p>\n<p>删除表的所有行最快的方式 <code>TRUNCATE TABLE customers</code>  DDL操作。</p>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p><strong>除非是localhost的管理任务等，一般不推荐使用root 用户连接到 mysql执行语句</strong></p>\n"},{"title":"python操作mysql（增删改查）","date":"2019-01-14T13:57:47.000Z","_content":"\n## 使用mysqlclient\n### 先安装mysqlclient\n网址：https://pypi.org/project/mysqlclient/\npython中可使用pip安装，`pip install mysqlclient`\n>也可以使用别的方法，详细可查看之前的文章：\n[爬取百度百科词条写入数据库](https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n### python操作mysql\n#### 查询数据\n```\nimport MySQLdb\n\n# 获取连接\nconnection = MySQLdb.connect(\n    host = 'localhost',\n    user = 'root',\n    password = 'password',\n    db = 'school',\n    charset = 'utf8mb4',\n    port = 3306 # 默认3306，可不填port\n)\n\n# 获取数据\ncursor = connection.cursor()\ncursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \nresult =  cursor.fetchone()  # 获取第一条数据\nprint (result)\n\n# 关闭连接\nconnection.close()\n```\n**可能会出现异常，所以改写**\n```\nimport MySQLdb\n\ntry:\n# 获取连接\n    connection = MySQLdb.connect(\n        host = 'localhost',\n        user = 'root',\n        password = 'password',\n        db = 'school',\n        charset = 'utf8mb4',\n        port = 3306 # 默认3306，可不填port\n    )\n    # 获取数据\n    cursor = connection.cursor()\n    cursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \n    result =  cursor.fetchone()  # 获取第一条数据\n    print (result)\n\nexcept MySQLdb.Error as e:\n    print('Error : %s ' % e)\n\n\nfinally:\n    # 关闭连接\n    connection.close()\n```\n### 因为这个操作是所有都有的，所以封装成一个对象\n```\nimport MySQLdb\n\nclass MysqlSearch:\n    def __init__(self):\n        self.get_connection()\n    \n    def get_connection(self):\n        try:\n            self.connection = MySQLdb.connect(\n                host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'school',\n                charset = 'utf8mb4',\n                port = 3306 # 默认3306，可不填port\n            )          \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def close_connection(self):\n        try:\n            if self.connection:\n                self.connection.close()\n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def get_one(self):\n            # 获取会话指针\n            cursor = self.connection.cursor()\n            # 准备sql\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            # 执行sql\n            cursor.execute(sql,('weilai',)) \n            # print(cursor.description)\n            ## (('id', 3, 1, 11, 11, 0, 0), ('name', 253, 6, 80, 80, 0, 0), \n            ## ('nickname', 253, 4, 80, 80, 0, 1), ('sex', 254, 3, 4, 4, 0, 1),\n            ## ('in_time', 12, 19, 19, 19, 0, 1))\n            ## 获得一条结果\n            # a = [k[0] for k in cursor.description],\n            ## a = ['id', 'name', 'nickname', 'sex', 'in_time']\n            # b = [k[0] for k in cursor.description],cursor.fetchone()\n            ## (['id', 'name', 'nickname', 'sex', 'in_time'],\n            ##  (7, 'weilai', 'imwl', '男', datetime.datetime(2018, 12, 27, 22, 5, 41)))\n            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  \n            # 关闭 cursor 和连接\n            cursor.close()\n            self.close_connection()\n            return result\n\n    def get_more(self):\n            cursor = self.connection.cursor()\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            cursor.execute(sql,('weilai',)) \n            result = [dict(zip([k[0] for k in cursor.description],row))\n                for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n            cursor.close()\n            self.close_connection()\n            return result\n\n\ndef main():\n    obj = MysqlSearch()\n    # a = obj.get_one()\n    # print(a)\n    # print(a['id'])\n\n    b = obj.get_more()\n    for item in b:\n        print(item)\n\n\nif __name__ == '__main__':\n    main()\n\n# zip函数\n'''\nzip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致\n>>> a = [1,2,3]\n>>> b = [4,5,6]\n>>> c = [4,5,6,7,8]\n>>> zipped = zip(a,b)     # 返回一个对象\n>>> zipped\n<zip object at 0x103abc288>\n>>> list(zipped)  # list() 转换为列表\n[(1, 4), (2, 5), (3, 6)]\n>>> list(zip(a,c))              # 元素个数与最短的列表一致\n[(1, 4), (2, 5), (3, 6)]\n \n>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式\n>>> list(a1)\n[1, 2, 3]\n>>> list(a2)\n[4, 5, 6]\n'''\n```\n** 补充(分页查询)：\n```\n    def get_more_by_pages(self, page, page_size):\n        # 分页查询数据\n        offset =  (page -1) * page_size\n\n        cursor = self.connection.cursor()\n        sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;'\n        cursor.execute(sql,('weilai', offset, page_size)) \n        result = [dict(zip([k[0] for k in cursor.description],row))\n         for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n        cursor.close()\n        self.close_connection()\n        return result\n```\n#### 新增/修改数据到数据库\n**出现问题不应该提交**\n\n```\n    def add_one(self):\n        # 准备SQL\n        try:\n            sql = (\n                \"INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE\"\n                \"(%s,%s,%s,%s);\"\n                )\n            cursor = self.connection.cursor()\n\n            # 可以提交多条\n            cursor.execute(sql,('name1', 'nickname1', '男', None))\n            cursor.execute(sql,('name2', 'nickname2', '男', 'haha'))\n            # 提交事务\n            self.connection.commit()\n            # 关闭cursor和连接\n            cursor.close()\n            \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n            self.connection.rollback()\n        \n        self.close_connection()\n```\n","source":"_posts/python操作数据库/python操作mysql(增删改查).md","raw":"---\ntitle: python操作mysql（增删改查）\ndate: 2019-01-14 21:57:47\ntags:\ncategories: mysql学习\n---\n\n## 使用mysqlclient\n### 先安装mysqlclient\n网址：https://pypi.org/project/mysqlclient/\npython中可使用pip安装，`pip install mysqlclient`\n>也可以使用别的方法，详细可查看之前的文章：\n[爬取百度百科词条写入数据库](https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n### python操作mysql\n#### 查询数据\n```\nimport MySQLdb\n\n# 获取连接\nconnection = MySQLdb.connect(\n    host = 'localhost',\n    user = 'root',\n    password = 'password',\n    db = 'school',\n    charset = 'utf8mb4',\n    port = 3306 # 默认3306，可不填port\n)\n\n# 获取数据\ncursor = connection.cursor()\ncursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \nresult =  cursor.fetchone()  # 获取第一条数据\nprint (result)\n\n# 关闭连接\nconnection.close()\n```\n**可能会出现异常，所以改写**\n```\nimport MySQLdb\n\ntry:\n# 获取连接\n    connection = MySQLdb.connect(\n        host = 'localhost',\n        user = 'root',\n        password = 'password',\n        db = 'school',\n        charset = 'utf8mb4',\n        port = 3306 # 默认3306，可不填port\n    )\n    # 获取数据\n    cursor = connection.cursor()\n    cursor.execute('SELECT * FROM `students`ORDER BY `in_time`DESC;') \n    result =  cursor.fetchone()  # 获取第一条数据\n    print (result)\n\nexcept MySQLdb.Error as e:\n    print('Error : %s ' % e)\n\n\nfinally:\n    # 关闭连接\n    connection.close()\n```\n### 因为这个操作是所有都有的，所以封装成一个对象\n```\nimport MySQLdb\n\nclass MysqlSearch:\n    def __init__(self):\n        self.get_connection()\n    \n    def get_connection(self):\n        try:\n            self.connection = MySQLdb.connect(\n                host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'school',\n                charset = 'utf8mb4',\n                port = 3306 # 默认3306，可不填port\n            )          \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def close_connection(self):\n        try:\n            if self.connection:\n                self.connection.close()\n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n\n    def get_one(self):\n            # 获取会话指针\n            cursor = self.connection.cursor()\n            # 准备sql\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            # 执行sql\n            cursor.execute(sql,('weilai',)) \n            # print(cursor.description)\n            ## (('id', 3, 1, 11, 11, 0, 0), ('name', 253, 6, 80, 80, 0, 0), \n            ## ('nickname', 253, 4, 80, 80, 0, 1), ('sex', 254, 3, 4, 4, 0, 1),\n            ## ('in_time', 12, 19, 19, 19, 0, 1))\n            ## 获得一条结果\n            # a = [k[0] for k in cursor.description],\n            ## a = ['id', 'name', 'nickname', 'sex', 'in_time']\n            # b = [k[0] for k in cursor.description],cursor.fetchone()\n            ## (['id', 'name', 'nickname', 'sex', 'in_time'],\n            ##  (7, 'weilai', 'imwl', '男', datetime.datetime(2018, 12, 27, 22, 5, 41)))\n            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  \n            # 关闭 cursor 和连接\n            cursor.close()\n            self.close_connection()\n            return result\n\n    def get_more(self):\n            cursor = self.connection.cursor()\n            sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;'\n            cursor.execute(sql,('weilai',)) \n            result = [dict(zip([k[0] for k in cursor.description],row))\n                for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n            cursor.close()\n            self.close_connection()\n            return result\n\n\ndef main():\n    obj = MysqlSearch()\n    # a = obj.get_one()\n    # print(a)\n    # print(a['id'])\n\n    b = obj.get_more()\n    for item in b:\n        print(item)\n\n\nif __name__ == '__main__':\n    main()\n\n# zip函数\n'''\nzip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致\n>>> a = [1,2,3]\n>>> b = [4,5,6]\n>>> c = [4,5,6,7,8]\n>>> zipped = zip(a,b)     # 返回一个对象\n>>> zipped\n<zip object at 0x103abc288>\n>>> list(zipped)  # list() 转换为列表\n[(1, 4), (2, 5), (3, 6)]\n>>> list(zip(a,c))              # 元素个数与最短的列表一致\n[(1, 4), (2, 5), (3, 6)]\n \n>>> a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式\n>>> list(a1)\n[1, 2, 3]\n>>> list(a2)\n[4, 5, 6]\n'''\n```\n** 补充(分页查询)：\n```\n    def get_more_by_pages(self, page, page_size):\n        # 分页查询数据\n        offset =  (page -1) * page_size\n\n        cursor = self.connection.cursor()\n        sql = 'SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;'\n        cursor.execute(sql,('weilai', offset, page_size)) \n        result = [dict(zip([k[0] for k in cursor.description],row))\n         for row in cursor.fetchall()] \n            # print(result) \n            # [{'id': 7, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}, \n            # {'id': 8, 'name':'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)},\n            # {'id': 9, 'name': 'weilai', 'nickname': 'imwl', 'sex': '男', 'in_time': datetime.datetime(2018, 12, 27, 22, 5, 41)}]\n        cursor.close()\n        self.close_connection()\n        return result\n```\n#### 新增/修改数据到数据库\n**出现问题不应该提交**\n\n```\n    def add_one(self):\n        # 准备SQL\n        try:\n            sql = (\n                \"INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE\"\n                \"(%s,%s,%s,%s);\"\n                )\n            cursor = self.connection.cursor()\n\n            # 可以提交多条\n            cursor.execute(sql,('name1', 'nickname1', '男', None))\n            cursor.execute(sql,('name2', 'nickname2', '男', 'haha'))\n            # 提交事务\n            self.connection.commit()\n            # 关闭cursor和连接\n            cursor.close()\n            \n        except MySQLdb.Error as e:\n            print('Error : %s ' % e)\n            self.connection.rollback()\n        \n        self.close_connection()\n```\n","slug":"python操作数据库/python操作mysql(增删改查)","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxm0013tssajuojilyj","content":"<h2 id=\"使用mysqlclient\"><a href=\"#使用mysqlclient\" class=\"headerlink\" title=\"使用mysqlclient\"></a>使用mysqlclient</h2><h3 id=\"先安装mysqlclient\"><a href=\"#先安装mysqlclient\" class=\"headerlink\" title=\"先安装mysqlclient\"></a>先安装mysqlclient</h3><p>网址：<a href=\"https://pypi.org/project/mysqlclient/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/mysqlclient/</a><br>python中可使用pip安装，<code>pip install mysqlclient</code></p>\n<blockquote>\n<p>也可以使用别的方法，详细可查看之前的文章：<br><a href=\"https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">爬取百度百科词条写入数据库</a></p>\n</blockquote>\n<h3 id=\"python操作mysql\"><a href=\"#python操作mysql\" class=\"headerlink\" title=\"python操作mysql\"></a>python操作mysql</h3><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">connection = MySQLdb.connect(</span><br><span class=\"line\">    host = &apos;localhost&apos;,</span><br><span class=\"line\">    user = &apos;root&apos;,</span><br><span class=\"line\">    password = &apos;password&apos;,</span><br><span class=\"line\">    db = &apos;school&apos;,</span><br><span class=\"line\">    charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">    port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数据</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\">cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">print (result)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>可能会出现异常，所以改写</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">    connection = MySQLdb.connect(</span><br><span class=\"line\">        host = &apos;localhost&apos;,</span><br><span class=\"line\">        user = &apos;root&apos;,</span><br><span class=\"line\">        password = &apos;password&apos;,</span><br><span class=\"line\">        db = &apos;school&apos;,</span><br><span class=\"line\">        charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">        port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">    )</span><br><span class=\"line\">    # 获取数据</span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">    result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">    print (result)</span><br><span class=\"line\"></span><br><span class=\"line\">except MySQLdb.Error as e:</span><br><span class=\"line\">    print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 关闭连接</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"因为这个操作是所有都有的，所以封装成一个对象\"><a href=\"#因为这个操作是所有都有的，所以封装成一个对象\" class=\"headerlink\" title=\"因为这个操作是所有都有的，所以封装成一个对象\"></a>因为这个操作是所有都有的，所以封装成一个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">class MysqlSearch:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.get_connection()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.connection = MySQLdb.connect(</span><br><span class=\"line\">                host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;school&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">            )          </span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def close_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if self.connection:</span><br><span class=\"line\">                self.connection.close()</span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">            # 获取会话指针</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            # 准备sql</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            # 执行sql</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            # print(cursor.description)</span><br><span class=\"line\">            ## ((&apos;id&apos;, 3, 1, 11, 11, 0, 0), (&apos;name&apos;, 253, 6, 80, 80, 0, 0), </span><br><span class=\"line\">            ## (&apos;nickname&apos;, 253, 4, 80, 80, 0, 1), (&apos;sex&apos;, 254, 3, 4, 4, 0, 1),</span><br><span class=\"line\">            ## (&apos;in_time&apos;, 12, 19, 19, 19, 0, 1))</span><br><span class=\"line\">            ## 获得一条结果</span><br><span class=\"line\">            # a = [k[0] for k in cursor.description],</span><br><span class=\"line\">            ## a = [&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;]</span><br><span class=\"line\">            # b = [k[0] for k in cursor.description],cursor.fetchone()</span><br><span class=\"line\">            ## ([&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;],</span><br><span class=\"line\">            ##  (7, &apos;weilai&apos;, &apos;imwl&apos;, &apos;男&apos;, datetime.datetime(2018, 12, 27, 22, 5, 41)))</span><br><span class=\"line\">            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  </span><br><span class=\"line\">            # 关闭 cursor 和连接</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">                for row in cursor.fetchall()] </span><br><span class=\"line\">            # print(result) </span><br><span class=\"line\">            # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">            # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">            # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = MysqlSearch()</span><br><span class=\"line\">    # a = obj.get_one()</span><br><span class=\"line\">    # print(a)</span><br><span class=\"line\">    # print(a[&apos;id&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    b = obj.get_more()</span><br><span class=\"line\">    for item in b:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"># zip函数</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">zip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致</span><br><span class=\"line\">&gt;&gt;&gt; a = [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; b = [4,5,6]</span><br><span class=\"line\">&gt;&gt;&gt; c = [4,5,6,7,8]</span><br><span class=\"line\">&gt;&gt;&gt; zipped = zip(a,b)     # 返回一个对象</span><br><span class=\"line\">&gt;&gt;&gt; zipped</span><br><span class=\"line\">&lt;zip object at 0x103abc288&gt;</span><br><span class=\"line\">&gt;&gt;&gt; list(zipped)  # list() 转换为列表</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\">&gt;&gt;&gt; list(zip(a,c))              # 元素个数与最短的列表一致</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt;&gt;&gt; a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span><br><span class=\"line\">&gt;&gt;&gt; list(a1)</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; list(a2)</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>** 补充(分页查询)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_more_by_pages(self, page, page_size):</span><br><span class=\"line\">    # 分页查询数据</span><br><span class=\"line\">    offset =  (page -1) * page_size</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = self.connection.cursor()</span><br><span class=\"line\">    sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;&apos;</span><br><span class=\"line\">    cursor.execute(sql,(&apos;weilai&apos;, offset, page_size)) </span><br><span class=\"line\">    result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">     for row in cursor.fetchall()] </span><br><span class=\"line\">        # print(result) </span><br><span class=\"line\">        # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">        # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">        # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    self.close_connection()</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"新增-修改数据到数据库\"><a href=\"#新增-修改数据到数据库\" class=\"headerlink\" title=\"新增/修改数据到数据库\"></a>新增/修改数据到数据库</h4><p><strong>出现问题不应该提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add_one(self):</span><br><span class=\"line\">    # 准备SQL</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        sql = (</span><br><span class=\"line\">            &quot;INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE&quot;</span><br><span class=\"line\">            &quot;(%s,%s,%s,%s);&quot;</span><br><span class=\"line\">            )</span><br><span class=\"line\">        cursor = self.connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 可以提交多条</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name1&apos;, &apos;nickname1&apos;, &apos;男&apos;, None))</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name2&apos;, &apos;nickname2&apos;, &apos;男&apos;, &apos;haha&apos;))</span><br><span class=\"line\">        # 提交事务</span><br><span class=\"line\">        self.connection.commit()</span><br><span class=\"line\">        # 关闭cursor和连接</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">    except MySQLdb.Error as e:</span><br><span class=\"line\">        print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\">        self.connection.rollback()</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.close_connection()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用mysqlclient\"><a href=\"#使用mysqlclient\" class=\"headerlink\" title=\"使用mysqlclient\"></a>使用mysqlclient</h2><h3 id=\"先安装mysqlclient\"><a href=\"#先安装mysqlclient\" class=\"headerlink\" title=\"先安装mysqlclient\"></a>先安装mysqlclient</h3><p>网址：<a href=\"https://pypi.org/project/mysqlclient/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/mysqlclient/</a><br>python中可使用pip安装，<code>pip install mysqlclient</code></p>\n<blockquote>\n<p>也可以使用别的方法，详细可查看之前的文章：<br><a href=\"https://itswl.github.io/python%E7%BB%83%E4%B9%A0/%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">爬取百度百科词条写入数据库</a></p>\n</blockquote>\n<h3 id=\"python操作mysql\"><a href=\"#python操作mysql\" class=\"headerlink\" title=\"python操作mysql\"></a>python操作mysql</h3><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">connection = MySQLdb.connect(</span><br><span class=\"line\">    host = &apos;localhost&apos;,</span><br><span class=\"line\">    user = &apos;root&apos;,</span><br><span class=\"line\">    password = &apos;password&apos;,</span><br><span class=\"line\">    db = &apos;school&apos;,</span><br><span class=\"line\">    charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">    port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数据</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\">cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">print (result)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭连接</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>可能会出现异常，所以改写</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\"># 获取连接</span><br><span class=\"line\">    connection = MySQLdb.connect(</span><br><span class=\"line\">        host = &apos;localhost&apos;,</span><br><span class=\"line\">        user = &apos;root&apos;,</span><br><span class=\"line\">        password = &apos;password&apos;,</span><br><span class=\"line\">        db = &apos;school&apos;,</span><br><span class=\"line\">        charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">        port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">    )</span><br><span class=\"line\">    # 获取数据</span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    cursor.execute(&apos;SELECT * FROM `students`ORDER BY `in_time`DESC;&apos;) </span><br><span class=\"line\">    result =  cursor.fetchone()  # 获取第一条数据</span><br><span class=\"line\">    print (result)</span><br><span class=\"line\"></span><br><span class=\"line\">except MySQLdb.Error as e:</span><br><span class=\"line\">    print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 关闭连接</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"因为这个操作是所有都有的，所以封装成一个对象\"><a href=\"#因为这个操作是所有都有的，所以封装成一个对象\" class=\"headerlink\" title=\"因为这个操作是所有都有的，所以封装成一个对象\"></a>因为这个操作是所有都有的，所以封装成一个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">class MysqlSearch:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.get_connection()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            self.connection = MySQLdb.connect(</span><br><span class=\"line\">                host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;school&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                port = 3306 # 默认3306，可不填port</span><br><span class=\"line\">            )          </span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def close_connection(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            if self.connection:</span><br><span class=\"line\">                self.connection.close()</span><br><span class=\"line\">        except MySQLdb.Error as e:</span><br><span class=\"line\">            print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">            # 获取会话指针</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            # 准备sql</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            # 执行sql</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            # print(cursor.description)</span><br><span class=\"line\">            ## ((&apos;id&apos;, 3, 1, 11, 11, 0, 0), (&apos;name&apos;, 253, 6, 80, 80, 0, 0), </span><br><span class=\"line\">            ## (&apos;nickname&apos;, 253, 4, 80, 80, 0, 1), (&apos;sex&apos;, 254, 3, 4, 4, 0, 1),</span><br><span class=\"line\">            ## (&apos;in_time&apos;, 12, 19, 19, 19, 0, 1))</span><br><span class=\"line\">            ## 获得一条结果</span><br><span class=\"line\">            # a = [k[0] for k in cursor.description],</span><br><span class=\"line\">            ## a = [&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;]</span><br><span class=\"line\">            # b = [k[0] for k in cursor.description],cursor.fetchone()</span><br><span class=\"line\">            ## ([&apos;id&apos;, &apos;name&apos;, &apos;nickname&apos;, &apos;sex&apos;, &apos;in_time&apos;],</span><br><span class=\"line\">            ##  (7, &apos;weilai&apos;, &apos;imwl&apos;, &apos;男&apos;, datetime.datetime(2018, 12, 27, 22, 5, 41)))</span><br><span class=\"line\">            result = dict(zip([k[0] for k in cursor.description],cursor.fetchone()))  </span><br><span class=\"line\">            # 关闭 cursor 和连接</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">            cursor = self.connection.cursor()</span><br><span class=\"line\">            sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC;&apos;</span><br><span class=\"line\">            cursor.execute(sql,(&apos;weilai&apos;,)) </span><br><span class=\"line\">            result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">                for row in cursor.fetchall()] </span><br><span class=\"line\">            # print(result) </span><br><span class=\"line\">            # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">            # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">            # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">            self.close_connection()</span><br><span class=\"line\">            return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = MysqlSearch()</span><br><span class=\"line\">    # a = obj.get_one()</span><br><span class=\"line\">    # print(a)</span><br><span class=\"line\">    # print(a[&apos;id&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    b = obj.get_more()</span><br><span class=\"line\">    for item in b:</span><br><span class=\"line\">        print(item)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"># zip函数</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">zip() 将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，元素个数与最短的一致</span><br><span class=\"line\">&gt;&gt;&gt; a = [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; b = [4,5,6]</span><br><span class=\"line\">&gt;&gt;&gt; c = [4,5,6,7,8]</span><br><span class=\"line\">&gt;&gt;&gt; zipped = zip(a,b)     # 返回一个对象</span><br><span class=\"line\">&gt;&gt;&gt; zipped</span><br><span class=\"line\">&lt;zip object at 0x103abc288&gt;</span><br><span class=\"line\">&gt;&gt;&gt; list(zipped)  # list() 转换为列表</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\">&gt;&gt;&gt; list(zip(a,c))              # 元素个数与最短的列表一致</span><br><span class=\"line\">[(1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\"> </span><br><span class=\"line\">&gt;&gt;&gt; a1, a2 = zip(*zip(a,b))          # 与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</span><br><span class=\"line\">&gt;&gt;&gt; list(a1)</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; list(a2)</span><br><span class=\"line\">[4, 5, 6]</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>** 补充(分页查询)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_more_by_pages(self, page, page_size):</span><br><span class=\"line\">    # 分页查询数据</span><br><span class=\"line\">    offset =  (page -1) * page_size</span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = self.connection.cursor()</span><br><span class=\"line\">    sql = &apos;SELECT * FROM `students`WHERE`name`=%s ORDER BY `in_time`DESC LIMIT %s , %s;&apos;</span><br><span class=\"line\">    cursor.execute(sql,(&apos;weilai&apos;, offset, page_size)) </span><br><span class=\"line\">    result = [dict(zip([k[0] for k in cursor.description],row))</span><br><span class=\"line\">     for row in cursor.fetchall()] </span><br><span class=\"line\">        # print(result) </span><br><span class=\"line\">        # [&#123;&apos;id&apos;: 7, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;, </span><br><span class=\"line\">        # &#123;&apos;id&apos;: 8, &apos;name&apos;:&apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;,</span><br><span class=\"line\">        # &#123;&apos;id&apos;: 9, &apos;name&apos;: &apos;weilai&apos;, &apos;nickname&apos;: &apos;imwl&apos;, &apos;sex&apos;: &apos;男&apos;, &apos;in_time&apos;: datetime.datetime(2018, 12, 27, 22, 5, 41)&#125;]</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    self.close_connection()</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"新增-修改数据到数据库\"><a href=\"#新增-修改数据到数据库\" class=\"headerlink\" title=\"新增/修改数据到数据库\"></a>新增/修改数据到数据库</h4><p><strong>出现问题不应该提交</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add_one(self):</span><br><span class=\"line\">    # 准备SQL</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        sql = (</span><br><span class=\"line\">            &quot;INSERT INTO `students` (`name`,`nickname`,`sex`,`in_time`) VALUE&quot;</span><br><span class=\"line\">            &quot;(%s,%s,%s,%s);&quot;</span><br><span class=\"line\">            )</span><br><span class=\"line\">        cursor = self.connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 可以提交多条</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name1&apos;, &apos;nickname1&apos;, &apos;男&apos;, None))</span><br><span class=\"line\">        cursor.execute(sql,(&apos;name2&apos;, &apos;nickname2&apos;, &apos;男&apos;, &apos;haha&apos;))</span><br><span class=\"line\">        # 提交事务</span><br><span class=\"line\">        self.connection.commit()</span><br><span class=\"line\">        # 关闭cursor和连接</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">    except MySQLdb.Error as e:</span><br><span class=\"line\">        print(&apos;Error : %s &apos; % e)</span><br><span class=\"line\">        self.connection.rollback()</span><br><span class=\"line\">    </span><br><span class=\"line\">    self.close_connection()</span><br></pre></td></tr></table></figure>\n"},{"title":"Flask构建可扩展的RESTful-API-1--起步与红图","date":"2018-12-25T02:51:16.000Z","_content":"\n\n\n# 前言\n### flask VS Django\n可以理解为安装各种插件的 flask = Django\n\n\n\n# 1.1 初始化项目\n\n### 1.一个项目的初始化流程如下：\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-e18c55d1fb28effc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n### 2.新建入口文件\n\napp/__init__.py\n```\nfrom flask import Flask\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    \n    return app\n```\n\nginger.py\n```\nfrom app import create_app\n\napp = create_app()\n\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n# 1.2 红图\n\n### 1.蓝图拆分视图函数的缺陷的缺陷\n\n1.蓝图的作用并不是用来拆分视图函数的，而是用来拆分模块的 2.使用蓝图，统一个业务模型的试图函数的前缀都一样，代码重复啰嗦\n\n### 2.打开思维，创建自己的redprint-红图\n\n为了解决上面的两个问题，我们可以模仿蓝图，构建一个自定义的对象-红图，红图的定位是用来拆分视图，也就是视图函数层\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-e0fda6bfede1225d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n我们采用自顶向下的编程思想，先编写redprint在试图函数中的使用代码，再编写redprint具体的实现\n\n#### 2.1 视图函数向红图的注册\n\napp/api/v1/book.py\n```\nfrom app.libs.redprint import Redprint\n\n\napi = Redprint('book')   # 实例化一个Redprint\n\n@api.route('/get')     # 使用Redprint 来注册视图函数\ndef get_book():\n    return 'get_book'\n\n@api.route('/create')\ndef create_book():\n    return 'create_book'\n```\napp/api/v1/user.py\n```\n# 使用Blueprint注册视图函数\n# from flask import Blueprint\n\n# user = Blueprint('user',__name__)\n\n# @user.route('/v1/user/get')\n# def get_user():\n#     return 'imwl'\n\nfrom app.libs.redprint import Redprint\n\napi = Redprint('user')\n\n@api.route('/get')\ndef get_user():\n    return 'get_user'\n\n@api.route('/create')\ndef create_user():\n    return 'create_user'\n```\n#### 2.2 红图向蓝图的注册\n\napp/api/__init__.py\n```\nfrom flask import Blueprint\nfrom app.api.v1 import user, book\n\n #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀'/book\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__) \n    \n# 假设api有register的方法，后面再实现, url_prefix解决前缀问题\n  #  book.api.register(bp_v1, url_prefix='/book')\n  #  user.api.register(bp_v1, url_prefix='/user')  # 后文 有解释为什么不传 url_prefix  \n\n    user.api.register(bp_v1) \n    book.api.register(bp_v1)  \n    return bp_v1\nfrom flask import Blueprint\nfrom app.api.v1 import book, user\n\n\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__)\n\n    book.api.register(bp_v1, url_prefix='/book')\n    user.api.register(bp_v1, url_prefix='/user')\n    return bp_v1\n```\n#### 2.3 蓝图向Flask核心对象的注册\n\napp/app.py\n```\nfrom flask import Flask\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user  #（这些是没改造前，用blueprint的注册方式）\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure ,app/config/secure.py\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting, app/config/setting.py\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    \n    return app\n    \n```\n### 3.实现Redprint\n\n因为我们的红图的作用就是要代替蓝图来实现试图函数的拆分，所以功能实现上可以参考蓝图的实现。\n\n#### 3.1 装饰性route的实现\n\n蓝图的实现\n```\ndef route(self, rule, **options):\n\"\"\"Like :meth:`Flask.route` but for a blueprint. The endpoint for the\n:func:`url_for` function is prefixed with the name of the blueprint.\n\"\"\"\ndef decorator(f):\n# 获取endpoint，默认为试图函数名\nendpoint = options.pop(\"endpoint\", f.__name__)\n# 注册视图函数\nself.add_url_rule(rule, endpoint, f, **options)\nreturn f\nreturn decorator\n```\n红图的实现可以模仿蓝图的实现结构 ，由于红图的route里没有办法拿到蓝图的对象，所以我们可以先把他们存储起来，等碰到的时候再进行注册\n```\nclass Redprint:\n    def __init__(self,name):\n        self.name = name \n        self.mound = []\n\n    def route(self, rule, **options):\n        def decorator(f):\n            self.mound.append((f, rule, options))\n            return f\n        return decorator\n```\n#### 3.2 register方法\n\n在register方法中可以获取到蓝图对象，所以之前route中视图函数的注册延迟到这里进行\n```\n# 红图的实现可以模仿蓝图的实现结构 ，\n# 由于红图的route里没有办法拿到蓝图的对象，\n# 所以我们可以先把他们存储起来，等碰到的时候再进行注册\n\nclass Redprint:\n    def __init__(self,name):\n        self.name = name \n        self.mound = []\n\n    def route(self, rule, **options):\n        def decorator(f):\n            self.mound.append((f, rule, options))\n            return f\n        return decorator\n\n    # 在register方法中可以获取到蓝图对象，\n    # 所以之前route中视图函数的注册延迟到这里进行\n    def register(self, bp,  url_prefix = None):\n    # 如果不传url_prefix 则默认使用name\n        if url_prefix is None:\n            url_prefix = '/'+self.name   # 定义 Redprint 前缀\n        # python的自动拆包\n        for f, rule, options in self.mound:\n            endpoint = options.pop(\"endpoint\", f.__name__)\n            # 将视图函数注册到蓝图上来\n            bp.add_url_rule(url_prefix + rule, endpoint, f, **options)\n\n```\n\n## 流程梳理\n\n1. 模仿Blueprint自定义Redprint\n2. app/api/v1/book.py中实例化一个Redprint 来注册视图函数。\n3. app/api/v1/__init__.py 中创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀,如: '/book'\n4. 在app/__init__.py 中 将Blueprint注册到flask核心对象上,并传入一个前缀，如： '/v1'\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-1--起步与红图.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-1--起步与红图\ndate: 2018-12-25 10:51:16\ntags:\ncategories: flask-api\n---\n\n\n\n# 前言\n### flask VS Django\n可以理解为安装各种插件的 flask = Django\n\n\n\n# 1.1 初始化项目\n\n### 1.一个项目的初始化流程如下：\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-e18c55d1fb28effc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n### 2.新建入口文件\n\napp/__init__.py\n```\nfrom flask import Flask\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    \n    return app\n```\n\nginger.py\n```\nfrom app import create_app\n\napp = create_app()\n\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n# 1.2 红图\n\n### 1.蓝图拆分视图函数的缺陷的缺陷\n\n1.蓝图的作用并不是用来拆分视图函数的，而是用来拆分模块的 2.使用蓝图，统一个业务模型的试图函数的前缀都一样，代码重复啰嗦\n\n### 2.打开思维，创建自己的redprint-红图\n\n为了解决上面的两个问题，我们可以模仿蓝图，构建一个自定义的对象-红图，红图的定位是用来拆分视图，也就是视图函数层\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-e0fda6bfede1225d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n我们采用自顶向下的编程思想，先编写redprint在试图函数中的使用代码，再编写redprint具体的实现\n\n#### 2.1 视图函数向红图的注册\n\napp/api/v1/book.py\n```\nfrom app.libs.redprint import Redprint\n\n\napi = Redprint('book')   # 实例化一个Redprint\n\n@api.route('/get')     # 使用Redprint 来注册视图函数\ndef get_book():\n    return 'get_book'\n\n@api.route('/create')\ndef create_book():\n    return 'create_book'\n```\napp/api/v1/user.py\n```\n# 使用Blueprint注册视图函数\n# from flask import Blueprint\n\n# user = Blueprint('user',__name__)\n\n# @user.route('/v1/user/get')\n# def get_user():\n#     return 'imwl'\n\nfrom app.libs.redprint import Redprint\n\napi = Redprint('user')\n\n@api.route('/get')\ndef get_user():\n    return 'get_user'\n\n@api.route('/create')\ndef create_user():\n    return 'create_user'\n```\n#### 2.2 红图向蓝图的注册\n\napp/api/__init__.py\n```\nfrom flask import Blueprint\nfrom app.api.v1 import user, book\n\n #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀'/book\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__) \n    \n# 假设api有register的方法，后面再实现, url_prefix解决前缀问题\n  #  book.api.register(bp_v1, url_prefix='/book')\n  #  user.api.register(bp_v1, url_prefix='/user')  # 后文 有解释为什么不传 url_prefix  \n\n    user.api.register(bp_v1) \n    book.api.register(bp_v1)  \n    return bp_v1\nfrom flask import Blueprint\nfrom app.api.v1 import book, user\n\n\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__)\n\n    book.api.register(bp_v1, url_prefix='/book')\n    user.api.register(bp_v1, url_prefix='/user')\n    return bp_v1\n```\n#### 2.3 蓝图向Flask核心对象的注册\n\napp/app.py\n```\nfrom flask import Flask\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user  #（这些是没改造前，用blueprint的注册方式）\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure ,app/config/secure.py\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting, app/config/setting.py\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    \n    return app\n    \n```\n### 3.实现Redprint\n\n因为我们的红图的作用就是要代替蓝图来实现试图函数的拆分，所以功能实现上可以参考蓝图的实现。\n\n#### 3.1 装饰性route的实现\n\n蓝图的实现\n```\ndef route(self, rule, **options):\n\"\"\"Like :meth:`Flask.route` but for a blueprint. The endpoint for the\n:func:`url_for` function is prefixed with the name of the blueprint.\n\"\"\"\ndef decorator(f):\n# 获取endpoint，默认为试图函数名\nendpoint = options.pop(\"endpoint\", f.__name__)\n# 注册视图函数\nself.add_url_rule(rule, endpoint, f, **options)\nreturn f\nreturn decorator\n```\n红图的实现可以模仿蓝图的实现结构 ，由于红图的route里没有办法拿到蓝图的对象，所以我们可以先把他们存储起来，等碰到的时候再进行注册\n```\nclass Redprint:\n    def __init__(self,name):\n        self.name = name \n        self.mound = []\n\n    def route(self, rule, **options):\n        def decorator(f):\n            self.mound.append((f, rule, options))\n            return f\n        return decorator\n```\n#### 3.2 register方法\n\n在register方法中可以获取到蓝图对象，所以之前route中视图函数的注册延迟到这里进行\n```\n# 红图的实现可以模仿蓝图的实现结构 ，\n# 由于红图的route里没有办法拿到蓝图的对象，\n# 所以我们可以先把他们存储起来，等碰到的时候再进行注册\n\nclass Redprint:\n    def __init__(self,name):\n        self.name = name \n        self.mound = []\n\n    def route(self, rule, **options):\n        def decorator(f):\n            self.mound.append((f, rule, options))\n            return f\n        return decorator\n\n    # 在register方法中可以获取到蓝图对象，\n    # 所以之前route中视图函数的注册延迟到这里进行\n    def register(self, bp,  url_prefix = None):\n    # 如果不传url_prefix 则默认使用name\n        if url_prefix is None:\n            url_prefix = '/'+self.name   # 定义 Redprint 前缀\n        # python的自动拆包\n        for f, rule, options in self.mound:\n            endpoint = options.pop(\"endpoint\", f.__name__)\n            # 将视图函数注册到蓝图上来\n            bp.add_url_rule(url_prefix + rule, endpoint, f, **options)\n\n```\n\n## 流程梳理\n\n1. 模仿Blueprint自定义Redprint\n2. app/api/v1/book.py中实例化一个Redprint 来注册视图函数。\n3. app/api/v1/__init__.py 中创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀,如: '/book'\n4. 在app/__init__.py 中 将Blueprint注册到flask核心对象上,并传入一个前缀，如： '/v1'\n","slug":"flask-api/Flask构建可扩展的RESTful-API-1--起步与红图","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxo0016tssa3zy2bybf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h3 id=\"flask-VS-Django\"><a href=\"#flask-VS-Django\" class=\"headerlink\" title=\"flask VS Django\"></a>flask VS Django</h3><p>可以理解为安装各种插件的 flask = Django</p>\n<h1 id=\"1-1-初始化项目\"><a href=\"#1-1-初始化项目\" class=\"headerlink\" title=\"1.1 初始化项目\"></a>1.1 初始化项目</h1><h3 id=\"1-一个项目的初始化流程如下：\"><a href=\"#1-一个项目的初始化流程如下：\" class=\"headerlink\" title=\"1.一个项目的初始化流程如下：\"></a>1.一个项目的初始化流程如下：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-e18c55d1fb28effc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h3 id=\"2-新建入口文件\"><a href=\"#2-新建入口文件\" class=\"headerlink\" title=\"2.新建入口文件\"></a>2.新建入口文件</h3><p>app/<strong>init</strong>.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>ginger.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(debug=True)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"1-2-红图\"><a href=\"#1-2-红图\" class=\"headerlink\" title=\"1.2 红图\"></a>1.2 红图</h1><h3 id=\"1-蓝图拆分视图函数的缺陷的缺陷\"><a href=\"#1-蓝图拆分视图函数的缺陷的缺陷\" class=\"headerlink\" title=\"1.蓝图拆分视图函数的缺陷的缺陷\"></a>1.蓝图拆分视图函数的缺陷的缺陷</h3><p>1.蓝图的作用并不是用来拆分视图函数的，而是用来拆分模块的 2.使用蓝图，统一个业务模型的试图函数的前缀都一样，代码重复啰嗦</p>\n<h3 id=\"2-打开思维，创建自己的redprint-红图\"><a href=\"#2-打开思维，创建自己的redprint-红图\" class=\"headerlink\" title=\"2.打开思维，创建自己的redprint-红图\"></a>2.打开思维，创建自己的redprint-红图</h3><p>为了解决上面的两个问题，我们可以模仿蓝图，构建一个自定义的对象-红图，红图的定位是用来拆分视图，也就是视图函数层</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-e0fda6bfede1225d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>我们采用自顶向下的编程思想，先编写redprint在试图函数中的使用代码，再编写redprint具体的实现</p>\n<h4 id=\"2-1-视图函数向红图的注册\"><a href=\"#2-1-视图函数向红图的注册\" class=\"headerlink\" title=\"2.1 视图函数向红图的注册\"></a>2.1 视图函数向红图的注册</h4><p>app/api/v1/book.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;book&apos;)   # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/get&apos;)     # 使用Redprint 来注册视图函数</span><br><span class=\"line\">def get_book():</span><br><span class=\"line\">    return &apos;get_book&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_book():</span><br><span class=\"line\">    return &apos;create_book&apos;</span><br></pre></td></tr></table></figure></p>\n<p>app/api/v1/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用Blueprint注册视图函数</span><br><span class=\"line\"># from flask import Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"># user = Blueprint(&apos;user&apos;,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"># @user.route(&apos;/v1/user/get&apos;)</span><br><span class=\"line\"># def get_user():</span><br><span class=\"line\">#     return &apos;imwl&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/get&apos;)</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_user():</span><br><span class=\"line\">    return &apos;create_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-红图向蓝图的注册\"><a href=\"#2-2-红图向蓝图的注册\" class=\"headerlink\" title=\"2.2 红图向蓝图的注册\"></a>2.2 红图向蓝图的注册</h4><p>app/api/<strong>init</strong>.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import user, book</span><br><span class=\"line\"></span><br><span class=\"line\"> #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀&apos;/book</span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__) </span><br><span class=\"line\">    </span><br><span class=\"line\"># 假设api有register的方法，后面再实现, url_prefix解决前缀问题</span><br><span class=\"line\">  #  book.api.register(bp_v1, url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">  #  user.api.register(bp_v1, url_prefix=&apos;/user&apos;)  # 后文 有解释为什么不传 url_prefix  </span><br><span class=\"line\"></span><br><span class=\"line\">    user.api.register(bp_v1) </span><br><span class=\"line\">    book.api.register(bp_v1)  </span><br><span class=\"line\">    return bp_v1</span><br><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import book, user</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\">    book.api.register(bp_v1, url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">    user.api.register(bp_v1, url_prefix=&apos;/user&apos;)</span><br><span class=\"line\">    return bp_v1</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-蓝图向Flask核心对象的注册\"><a href=\"#2-3-蓝图向Flask核心对象的注册\" class=\"headerlink\" title=\"2.3 蓝图向Flask核心对象的注册\"></a>2.3 蓝图向Flask核心对象的注册</h4><p>app/app.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user  #（这些是没改造前，用blueprint的注册方式）</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure ,app/config/secure.py</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting, app/config/setting.py</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-实现Redprint\"><a href=\"#3-实现Redprint\" class=\"headerlink\" title=\"3.实现Redprint\"></a>3.实现Redprint</h3><p>因为我们的红图的作用就是要代替蓝图来实现试图函数的拆分，所以功能实现上可以参考蓝图的实现。</p>\n<h4 id=\"3-1-装饰性route的实现\"><a href=\"#3-1-装饰性route的实现\" class=\"headerlink\" title=\"3.1 装饰性route的实现\"></a>3.1 装饰性route的实现</h4><p>蓝图的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def route(self, rule, **options):</span><br><span class=\"line\">&quot;&quot;&quot;Like :meth:`Flask.route` but for a blueprint. The endpoint for the</span><br><span class=\"line\">:func:`url_for` function is prefixed with the name of the blueprint.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def decorator(f):</span><br><span class=\"line\"># 获取endpoint，默认为试图函数名</span><br><span class=\"line\">endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\"># 注册视图函数</span><br><span class=\"line\">self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">return f</span><br><span class=\"line\">return decorator</span><br></pre></td></tr></table></figure></p>\n<p>红图的实现可以模仿蓝图的实现结构 ，由于红图的route里没有办法拿到蓝图的对象，所以我们可以先把他们存储起来，等碰到的时候再进行注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Redprint:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        self.mound = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def route(self, rule, **options):</span><br><span class=\"line\">        def decorator(f):</span><br><span class=\"line\">            self.mound.append((f, rule, options))</span><br><span class=\"line\">            return f</span><br><span class=\"line\">        return decorator</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-2-register方法\"><a href=\"#3-2-register方法\" class=\"headerlink\" title=\"3.2 register方法\"></a>3.2 register方法</h4><p>在register方法中可以获取到蓝图对象，所以之前route中视图函数的注册延迟到这里进行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 红图的实现可以模仿蓝图的实现结构 ，</span><br><span class=\"line\"># 由于红图的route里没有办法拿到蓝图的对象，</span><br><span class=\"line\"># 所以我们可以先把他们存储起来，等碰到的时候再进行注册</span><br><span class=\"line\"></span><br><span class=\"line\">class Redprint:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        self.mound = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def route(self, rule, **options):</span><br><span class=\"line\">        def decorator(f):</span><br><span class=\"line\">            self.mound.append((f, rule, options))</span><br><span class=\"line\">            return f</span><br><span class=\"line\">        return decorator</span><br><span class=\"line\"></span><br><span class=\"line\">    # 在register方法中可以获取到蓝图对象，</span><br><span class=\"line\">    # 所以之前route中视图函数的注册延迟到这里进行</span><br><span class=\"line\">    def register(self, bp,  url_prefix = None):</span><br><span class=\"line\">    # 如果不传url_prefix 则默认使用name</span><br><span class=\"line\">        if url_prefix is None:</span><br><span class=\"line\">            url_prefix = &apos;/&apos;+self.name   # 定义 Redprint 前缀</span><br><span class=\"line\">        # python的自动拆包</span><br><span class=\"line\">        for f, rule, options in self.mound:</span><br><span class=\"line\">            endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">            # 将视图函数注册到蓝图上来</span><br><span class=\"line\">            bp.add_url_rule(url_prefix + rule, endpoint, f, **options)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"流程梳理\"><a href=\"#流程梳理\" class=\"headerlink\" title=\"流程梳理\"></a>流程梳理</h2><ol>\n<li>模仿Blueprint自定义Redprint</li>\n<li>app/api/v1/book.py中实例化一个Redprint 来注册视图函数。</li>\n<li>app/api/v1/<strong>init</strong>.py 中创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀,如: ‘/book’</li>\n<li>在app/<strong>init</strong>.py 中 将Blueprint注册到flask核心对象上,并传入一个前缀，如： ‘/v1’</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h3 id=\"flask-VS-Django\"><a href=\"#flask-VS-Django\" class=\"headerlink\" title=\"flask VS Django\"></a>flask VS Django</h3><p>可以理解为安装各种插件的 flask = Django</p>\n<h1 id=\"1-1-初始化项目\"><a href=\"#1-1-初始化项目\" class=\"headerlink\" title=\"1.1 初始化项目\"></a>1.1 初始化项目</h1><h3 id=\"1-一个项目的初始化流程如下：\"><a href=\"#1-一个项目的初始化流程如下：\" class=\"headerlink\" title=\"1.一个项目的初始化流程如下：\"></a>1.一个项目的初始化流程如下：</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-e18c55d1fb28effc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h3 id=\"2-新建入口文件\"><a href=\"#2-新建入口文件\" class=\"headerlink\" title=\"2.新建入口文件\"></a>2.新建入口文件</h3><p>app/<strong>init</strong>.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>ginger.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(debug=True)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"1-2-红图\"><a href=\"#1-2-红图\" class=\"headerlink\" title=\"1.2 红图\"></a>1.2 红图</h1><h3 id=\"1-蓝图拆分视图函数的缺陷的缺陷\"><a href=\"#1-蓝图拆分视图函数的缺陷的缺陷\" class=\"headerlink\" title=\"1.蓝图拆分视图函数的缺陷的缺陷\"></a>1.蓝图拆分视图函数的缺陷的缺陷</h3><p>1.蓝图的作用并不是用来拆分视图函数的，而是用来拆分模块的 2.使用蓝图，统一个业务模型的试图函数的前缀都一样，代码重复啰嗦</p>\n<h3 id=\"2-打开思维，创建自己的redprint-红图\"><a href=\"#2-打开思维，创建自己的redprint-红图\" class=\"headerlink\" title=\"2.打开思维，创建自己的redprint-红图\"></a>2.打开思维，创建自己的redprint-红图</h3><p>为了解决上面的两个问题，我们可以模仿蓝图，构建一个自定义的对象-红图，红图的定位是用来拆分视图，也就是视图函数层</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-e0fda6bfede1225d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>我们采用自顶向下的编程思想，先编写redprint在试图函数中的使用代码，再编写redprint具体的实现</p>\n<h4 id=\"2-1-视图函数向红图的注册\"><a href=\"#2-1-视图函数向红图的注册\" class=\"headerlink\" title=\"2.1 视图函数向红图的注册\"></a>2.1 视图函数向红图的注册</h4><p>app/api/v1/book.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;book&apos;)   # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/get&apos;)     # 使用Redprint 来注册视图函数</span><br><span class=\"line\">def get_book():</span><br><span class=\"line\">    return &apos;get_book&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_book():</span><br><span class=\"line\">    return &apos;create_book&apos;</span><br></pre></td></tr></table></figure></p>\n<p>app/api/v1/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用Blueprint注册视图函数</span><br><span class=\"line\"># from flask import Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"># user = Blueprint(&apos;user&apos;,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"># @user.route(&apos;/v1/user/get&apos;)</span><br><span class=\"line\"># def get_user():</span><br><span class=\"line\">#     return &apos;imwl&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/get&apos;)</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_user():</span><br><span class=\"line\">    return &apos;create_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-红图向蓝图的注册\"><a href=\"#2-2-红图向蓝图的注册\" class=\"headerlink\" title=\"2.2 红图向蓝图的注册\"></a>2.2 红图向蓝图的注册</h4><p>app/api/<strong>init</strong>.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import user, book</span><br><span class=\"line\"></span><br><span class=\"line\"> #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀&apos;/book</span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__) </span><br><span class=\"line\">    </span><br><span class=\"line\"># 假设api有register的方法，后面再实现, url_prefix解决前缀问题</span><br><span class=\"line\">  #  book.api.register(bp_v1, url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">  #  user.api.register(bp_v1, url_prefix=&apos;/user&apos;)  # 后文 有解释为什么不传 url_prefix  </span><br><span class=\"line\"></span><br><span class=\"line\">    user.api.register(bp_v1) </span><br><span class=\"line\">    book.api.register(bp_v1)  </span><br><span class=\"line\">    return bp_v1</span><br><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import book, user</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\">    book.api.register(bp_v1, url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">    user.api.register(bp_v1, url_prefix=&apos;/user&apos;)</span><br><span class=\"line\">    return bp_v1</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-蓝图向Flask核心对象的注册\"><a href=\"#2-3-蓝图向Flask核心对象的注册\" class=\"headerlink\" title=\"2.3 蓝图向Flask核心对象的注册\"></a>2.3 蓝图向Flask核心对象的注册</h4><p>app/app.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user  #（这些是没改造前，用blueprint的注册方式）</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure ,app/config/secure.py</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting, app/config/setting.py</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    </span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-实现Redprint\"><a href=\"#3-实现Redprint\" class=\"headerlink\" title=\"3.实现Redprint\"></a>3.实现Redprint</h3><p>因为我们的红图的作用就是要代替蓝图来实现试图函数的拆分，所以功能实现上可以参考蓝图的实现。</p>\n<h4 id=\"3-1-装饰性route的实现\"><a href=\"#3-1-装饰性route的实现\" class=\"headerlink\" title=\"3.1 装饰性route的实现\"></a>3.1 装饰性route的实现</h4><p>蓝图的实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def route(self, rule, **options):</span><br><span class=\"line\">&quot;&quot;&quot;Like :meth:`Flask.route` but for a blueprint. The endpoint for the</span><br><span class=\"line\">:func:`url_for` function is prefixed with the name of the blueprint.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">def decorator(f):</span><br><span class=\"line\"># 获取endpoint，默认为试图函数名</span><br><span class=\"line\">endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\"># 注册视图函数</span><br><span class=\"line\">self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">return f</span><br><span class=\"line\">return decorator</span><br></pre></td></tr></table></figure></p>\n<p>红图的实现可以模仿蓝图的实现结构 ，由于红图的route里没有办法拿到蓝图的对象，所以我们可以先把他们存储起来，等碰到的时候再进行注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Redprint:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        self.mound = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def route(self, rule, **options):</span><br><span class=\"line\">        def decorator(f):</span><br><span class=\"line\">            self.mound.append((f, rule, options))</span><br><span class=\"line\">            return f</span><br><span class=\"line\">        return decorator</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-2-register方法\"><a href=\"#3-2-register方法\" class=\"headerlink\" title=\"3.2 register方法\"></a>3.2 register方法</h4><p>在register方法中可以获取到蓝图对象，所以之前route中视图函数的注册延迟到这里进行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 红图的实现可以模仿蓝图的实现结构 ，</span><br><span class=\"line\"># 由于红图的route里没有办法拿到蓝图的对象，</span><br><span class=\"line\"># 所以我们可以先把他们存储起来，等碰到的时候再进行注册</span><br><span class=\"line\"></span><br><span class=\"line\">class Redprint:</span><br><span class=\"line\">    def __init__(self,name):</span><br><span class=\"line\">        self.name = name </span><br><span class=\"line\">        self.mound = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def route(self, rule, **options):</span><br><span class=\"line\">        def decorator(f):</span><br><span class=\"line\">            self.mound.append((f, rule, options))</span><br><span class=\"line\">            return f</span><br><span class=\"line\">        return decorator</span><br><span class=\"line\"></span><br><span class=\"line\">    # 在register方法中可以获取到蓝图对象，</span><br><span class=\"line\">    # 所以之前route中视图函数的注册延迟到这里进行</span><br><span class=\"line\">    def register(self, bp,  url_prefix = None):</span><br><span class=\"line\">    # 如果不传url_prefix 则默认使用name</span><br><span class=\"line\">        if url_prefix is None:</span><br><span class=\"line\">            url_prefix = &apos;/&apos;+self.name   # 定义 Redprint 前缀</span><br><span class=\"line\">        # python的自动拆包</span><br><span class=\"line\">        for f, rule, options in self.mound:</span><br><span class=\"line\">            endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">            # 将视图函数注册到蓝图上来</span><br><span class=\"line\">            bp.add_url_rule(url_prefix + rule, endpoint, f, **options)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"流程梳理\"><a href=\"#流程梳理\" class=\"headerlink\" title=\"流程梳理\"></a>流程梳理</h2><ol>\n<li>模仿Blueprint自定义Redprint</li>\n<li>app/api/v1/book.py中实例化一个Redprint 来注册视图函数。</li>\n<li>app/api/v1/<strong>init</strong>.py 中创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀,如: ‘/book’</li>\n<li>在app/<strong>init</strong>.py 中 将Blueprint注册到flask核心对象上,并传入一个前缀，如： ‘/v1’</li>\n</ol>\n"},{"title":"Flask构建可扩展的RESTful-API-2--REST基本特征","date":"2018-12-18T10:36:16.000Z","_content":"\n\n\n# 2\\. REST基本特征\n\n### 1.REST的最基本特征\n\n我们把服务器提供的服务统一称为资源。 我们可以使用URL来定位资源，如/v1/book/user/1 来定位一个用户 定位到资源以后，可以使用HTPP动词来操作资源，类似使用DDL操作数据库。\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a994cb294ad609e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n对于视图函数的URL，尽量不应该包含动词，因为URL是用来定位资源的，例如我们之前的试图函数，应该这样改写\n```\n\n# from flask import Blueprint\n\n# user = Blueprint('user',__name__)\n\n# @user.route('/v1/user/get')\n# def get_user():\n#     return 'imwl'\n\nfrom app.libs.redprint import Redprint\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('',methods = ['GET'])\ndef get_user():\n    return 'get_user'\n\n@api.route('',methods = ['PUT'])\ndef update_user():\n    return 'update_user'\n\n@api.route('',methods = ['DELETE'])\ndef delete_user():\n    return 'deletete_user'\n\n@api.route('',methods = ['POST'])\ndef create_user():\n    return 'create_user'\n```\n### 2.为什么标准的REST不适合内部开发\n\nREST的使用场景有两个：内部开发API，开放API。 标准的REST比较适合开放性的API。只负责提供数据，不负责业务逻辑\n\n1.  由于内部的开发，业务逻辑非常复杂，想用简单的四个接口来标示所有的业务逻辑，基本上是不可能的\n2.  REST的接口粒度比较粗（返回的资源属性比较多；服务器不会负责处理数据），这样前端的开发是不太方便的\n3.  标准的REST会造成HTTP请求的数量大幅度的增加\n\n### 3.建议\n\n*   尽量遵从REST的设计风格规范\n*   要灵活一些，如果前端要考虑业务逻辑的话，我们就不要遵从资源的限制了，应该让API具有业务逻辑的性质\n*   如果前端需要几个资源合并在一起的数据，那么我们就为前端定制一个合并数据的接口\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-2--REST基本特征.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-2--REST基本特征\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n\n\n# 2\\. REST基本特征\n\n### 1.REST的最基本特征\n\n我们把服务器提供的服务统一称为资源。 我们可以使用URL来定位资源，如/v1/book/user/1 来定位一个用户 定位到资源以后，可以使用HTPP动词来操作资源，类似使用DDL操作数据库。\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a994cb294ad609e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n对于视图函数的URL，尽量不应该包含动词，因为URL是用来定位资源的，例如我们之前的试图函数，应该这样改写\n```\n\n# from flask import Blueprint\n\n# user = Blueprint('user',__name__)\n\n# @user.route('/v1/user/get')\n# def get_user():\n#     return 'imwl'\n\nfrom app.libs.redprint import Redprint\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('',methods = ['GET'])\ndef get_user():\n    return 'get_user'\n\n@api.route('',methods = ['PUT'])\ndef update_user():\n    return 'update_user'\n\n@api.route('',methods = ['DELETE'])\ndef delete_user():\n    return 'deletete_user'\n\n@api.route('',methods = ['POST'])\ndef create_user():\n    return 'create_user'\n```\n### 2.为什么标准的REST不适合内部开发\n\nREST的使用场景有两个：内部开发API，开放API。 标准的REST比较适合开放性的API。只负责提供数据，不负责业务逻辑\n\n1.  由于内部的开发，业务逻辑非常复杂，想用简单的四个接口来标示所有的业务逻辑，基本上是不可能的\n2.  REST的接口粒度比较粗（返回的资源属性比较多；服务器不会负责处理数据），这样前端的开发是不太方便的\n3.  标准的REST会造成HTTP请求的数量大幅度的增加\n\n### 3.建议\n\n*   尽量遵从REST的设计风格规范\n*   要灵活一些，如果前端要考虑业务逻辑的话，我们就不要遵从资源的限制了，应该让API具有业务逻辑的性质\n*   如果前端需要几个资源合并在一起的数据，那么我们就为前端定制一个合并数据的接口\n","slug":"flask-api/Flask构建可扩展的RESTful-API-2--REST基本特征","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxp0017tssa0hzl07xg","content":"<h1 id=\"2-REST基本特征\"><a href=\"#2-REST基本特征\" class=\"headerlink\" title=\"2. REST基本特征\"></a>2. REST基本特征</h1><h3 id=\"1-REST的最基本特征\"><a href=\"#1-REST的最基本特征\" class=\"headerlink\" title=\"1.REST的最基本特征\"></a>1.REST的最基本特征</h3><p>我们把服务器提供的服务统一称为资源。 我们可以使用URL来定位资源，如/v1/book/user/1 来定位一个用户 定位到资源以后，可以使用HTPP动词来操作资源，类似使用DDL操作数据库。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a994cb294ad609e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>对于视图函数的URL，尽量不应该包含动词，因为URL是用来定位资源的，例如我们之前的试图函数，应该这样改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># from flask import Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"># user = Blueprint(&apos;user&apos;,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"># @user.route(&apos;/v1/user/get&apos;)</span><br><span class=\"line\"># def get_user():</span><br><span class=\"line\">#     return &apos;imwl&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;GET&apos;])</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;PUT&apos;])</span><br><span class=\"line\">def update_user():</span><br><span class=\"line\">    return &apos;update_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;DELETE&apos;])</span><br><span class=\"line\">def delete_user():</span><br><span class=\"line\">    return &apos;deletete_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;POST&apos;])</span><br><span class=\"line\">def create_user():</span><br><span class=\"line\">    return &apos;create_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-为什么标准的REST不适合内部开发\"><a href=\"#2-为什么标准的REST不适合内部开发\" class=\"headerlink\" title=\"2.为什么标准的REST不适合内部开发\"></a>2.为什么标准的REST不适合内部开发</h3><p>REST的使用场景有两个：内部开发API，开放API。 标准的REST比较适合开放性的API。只负责提供数据，不负责业务逻辑</p>\n<ol>\n<li>由于内部的开发，业务逻辑非常复杂，想用简单的四个接口来标示所有的业务逻辑，基本上是不可能的</li>\n<li>REST的接口粒度比较粗（返回的资源属性比较多；服务器不会负责处理数据），这样前端的开发是不太方便的</li>\n<li>标准的REST会造成HTTP请求的数量大幅度的增加</li>\n</ol>\n<h3 id=\"3-建议\"><a href=\"#3-建议\" class=\"headerlink\" title=\"3.建议\"></a>3.建议</h3><ul>\n<li>尽量遵从REST的设计风格规范</li>\n<li>要灵活一些，如果前端要考虑业务逻辑的话，我们就不要遵从资源的限制了，应该让API具有业务逻辑的性质</li>\n<li>如果前端需要几个资源合并在一起的数据，那么我们就为前端定制一个合并数据的接口</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2-REST基本特征\"><a href=\"#2-REST基本特征\" class=\"headerlink\" title=\"2. REST基本特征\"></a>2. REST基本特征</h1><h3 id=\"1-REST的最基本特征\"><a href=\"#1-REST的最基本特征\" class=\"headerlink\" title=\"1.REST的最基本特征\"></a>1.REST的最基本特征</h3><p>我们把服务器提供的服务统一称为资源。 我们可以使用URL来定位资源，如/v1/book/user/1 来定位一个用户 定位到资源以后，可以使用HTPP动词来操作资源，类似使用DDL操作数据库。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a994cb294ad609e5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>对于视图函数的URL，尽量不应该包含动词，因为URL是用来定位资源的，例如我们之前的试图函数，应该这样改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># from flask import Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"># user = Blueprint(&apos;user&apos;,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"># @user.route(&apos;/v1/user/get&apos;)</span><br><span class=\"line\"># def get_user():</span><br><span class=\"line\">#     return &apos;imwl&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;GET&apos;])</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;PUT&apos;])</span><br><span class=\"line\">def update_user():</span><br><span class=\"line\">    return &apos;update_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;DELETE&apos;])</span><br><span class=\"line\">def delete_user():</span><br><span class=\"line\">    return &apos;deletete_user&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;POST&apos;])</span><br><span class=\"line\">def create_user():</span><br><span class=\"line\">    return &apos;create_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-为什么标准的REST不适合内部开发\"><a href=\"#2-为什么标准的REST不适合内部开发\" class=\"headerlink\" title=\"2.为什么标准的REST不适合内部开发\"></a>2.为什么标准的REST不适合内部开发</h3><p>REST的使用场景有两个：内部开发API，开放API。 标准的REST比较适合开放性的API。只负责提供数据，不负责业务逻辑</p>\n<ol>\n<li>由于内部的开发，业务逻辑非常复杂，想用简单的四个接口来标示所有的业务逻辑，基本上是不可能的</li>\n<li>REST的接口粒度比较粗（返回的资源属性比较多；服务器不会负责处理数据），这样前端的开发是不太方便的</li>\n<li>标准的REST会造成HTTP请求的数量大幅度的增加</li>\n</ol>\n<h3 id=\"3-建议\"><a href=\"#3-建议\" class=\"headerlink\" title=\"3.建议\"></a>3.建议</h3><ul>\n<li>尽量遵从REST的设计风格规范</li>\n<li>要灵活一些，如果前端要考虑业务逻辑的话，我们就不要遵从资源的限制了，应该让API具有业务逻辑的性质</li>\n<li>如果前端需要几个资源合并在一起的数据，那么我们就为前端定制一个合并数据的接口</li>\n</ul>\n"},{"title":"Flask构建可扩展的RESTful-API-3--自定义异常对象","date":"2018-12-18T10:36:16.000Z","_content":"\n\n# 3.1 关于用户的思考\n \n 不管是网站也好，还是API也好，我们都逃脱不了用户这个概念，我们下面就要来讨论用户的相关操作\n \n\n 对于用户而言，第一件事情，我们就要完成用户注册的操作，说到注册用户，我们想到，可以在视图函数文件中增加一个注册用户的视图函数--create_user，并且我们会在其中接受账号和密码，来完成用户的注册，这个逻辑是通常意义上的用户的概念。\n \n\n 普通用户：使用鱼书的人相对于鱼书来说，就是用户；我们相对于QQ和微信，也是他的用户。\n \n\n 但是我们在做API的时候，不能只考虑这些普通意义的用户，我们还要考虑一些特别的用户。例如：我们开发了一个向外提供数据的API，加入有一天，有一个公司，想使用我们的API开发他们自己的产品（小程序或者APP），这些其他的客户端，都是我们API的用户\n \n\n根据以上的分析，我们可以得出几个结论：\n对于API而言，再叫做用户就不太合适 ，我们更倾向于把人，第三方的产品等同于成为客户端（client）来代替User。\n客户端的种类非常多，注册的形式就非常多。如对于普通的用户而言，就是账号和密码，但是账号和密码又可以分成，短信，邮件，社交用户。对于多种的注册形式，也不是所有的都需要密码，如小程序就不需要。\nAPI和普通的业务系统是不一样的，他具有开发性和通用性。\n因为注册的形式就非常多，所以我们不可能用万能的方式来解决。如果我们不能很好的处理多种多样的形式，我们的代码就会非常的杂乱\n\n3.2 注册client\n对于登录/注册这些比较重要的接口，我们建议提供一个统一的调用接口，而不应该拆分成多个。\n\n我们可以编写一个枚举类，来枚举所有的客户端类型。\napp\\libs\\enums.py\n```\nfrom enum import Enum\n\n# 定义一个枚举\nclass ClientTypeEnum(Enum):\n    USER_EMAIL =  100\n    USER_MOBILE = 101\n\n    # 微信小程序\n    USER_MINA = 200\n    #微信公众号\n    UESR_WX = 201\n\n```\n1.构建client验证器\napp\\validators\\forms.py\n```\nfrom wtforms import Form, StringField, IntegerField    # 字符串类型,数字类型\nfrom wtforms.validators import DataRequired, length\nfrom app.libs.enums import ClientTypeEnum\n\n# 构建client验证器\nclass ClientForm(Form):\n    account = StringField(validators=[DataRequired(), length(min=1, max=32)])\n    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入\n    type = IntegerField(validators=[DataRequired()])\n\n    # 验证client_type\n    def validate_type(self, value):\n        try:\n        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常\n        # 如果匹配成功则将int转换成枚举\n            client = ClientTypeEnum(value.data)  # value.data 取到值\n        except ValueError as e:\n            raise e\n\n```\n2.处理不同客户端注册的方案\n由于python没有switch-case，我们可以使用dict来替换\napp\\api\\v1\\client.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['PSOT'] )  # 路由注册\ndef create_client():\n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data=data)\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n\ndef __register_user_by_email():\n    pass\n\n# def __register_user_by_MINA():\n#     pass\n```\n3.用户模型的设计\napp\\models\\base.py\n\n```\nfrom datetime import datetime\n\nfrom flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery\nfrom sqlalchemy import Column, Integer, SmallInteger\nfrom contextlib import contextmanager\n\n\nclass SQLAlchemy(_SQLAlchemy):\n    @contextmanager\n    def auto_commit(self):\n        try:\n            yield\n            self.session.commit()\n        except Exception as e:\n            db.session.rollback()\n            raise e\n\n\nclass Query(BaseQuery):\n    def filter_by(self, **kwargs):\n        if 'status' not in kwargs.keys():\n            kwargs['status'] = 1\n        return super(Query, self).filter_by(**kwargs)\n\n\ndb = SQLAlchemy(query_class=Query)\n\n\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column(Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    @property\n    def create_datetime(self):\n        if self.create_time:\n            return datetime.fromtimestamp(self.create_time)\n        else:\n            return None\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n\n    def delete(self):\n        self.status = 0\n\n```\napp\\models\\user.py\n\n```\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# from app.libs.error_code import NotFound, AuthFailed\nfrom app.models.base import Base\nimport datetime\n\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n```\n添加一个注册的方法\n```\n\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# from app.libs.error_code import NotFound, AuthFailed\nfrom app.models.base import Base , db\nimport datetime\n\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n\n    @staticmethod\n    def register_by_email(nickname, account, secret):\n        with db.auto_commit():\n            user = User()\n            user.nickname = nickname\n            user.email = account\n            user.password = secret\n            db.session.add(user)\n```\n插件的注册\napp\\__init__.py\n```\n\nfrom flask import Flask\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef registe_plugin(app):  # 插件的注册\n    from app.models.base import db\n    db.init_app(app)\n\n    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all\n        db.create_all()  # 来创建所有数据库，数据表\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    registe_plugin(app)  # 最后调用 registe_plugin\n\n    return app\n    \n    \n```\n\n4.完成客户端注册\n之前我们的ClientForm并没有nickname，但是注册email用户的时候是需要的，所以我们建立一个UserEmailForm继承ClientForm完成他自己的业务\n不能从request.json 中拿，因为这个参数没经过校验\n```\n\nfrom wtforms import Form, StringField, IntegerField ,ValidationError    # 字符串类型,数字类型,异常\nfrom wtforms.validators import DataRequired, length,  Email, Regexp\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n# 构建client验证器\nclass ClientForm(Form):\n    account = StringField(validators=[DataRequired(), length(min=1, max=32)])\n    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入\n    type = IntegerField(validators=[DataRequired()])\n\n    # 验证client_type\n    def validate_type(self, value):\n        try:\n        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常\n        # 如果匹配成功则将int转换成枚举\n            client = ClientTypeEnum(value.data)  # value.data 取到值\n        except ValueError as e:\n            raise e\n    # 面向对象的继承特性，减少代码量，ClientForm是很有必要存在的\n        self.type = client  # 将枚举赋值给 type\n\nclass UserEmailForm(ClientForm):\n    account = StringField(validators=[\n        Email(message='validate email')\n        ])  # 必须是Email\n    secret = StringField(validators=[\n        DataRequired(),\n        Regexp(r'^[A-Za-z0-9_*&$#@]{6,22}$')\n        ]) #必须要密码，密码格式 \n    nickname = StringField(validators=[DataRequired(),\n                                       length(min=2, max=22)])  # 新增一个个性化参数nickname\n\n    def validate_account(self, value):   # 验证账号是否已经注册\n        if User.query.filter_by(email=value.data).first():  # 如果能查询到email\n            raise ValidationError()   # 则抛出异常\n```\n完成视图函数的编写\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n        promise[form.type.data]()\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n\n```\ncreate_client和__register_user_by_email是一个总-分的关系，客户端注册的种类是比较多的，但是这些众多的种类又有一些共通的东西，比如处理客户端的type的值，就是所有的客户端都要携带的参数。对于这些共有的参数，我们就统一在create_client,ClientForm中进行处理\n 对于不同的客户端的特色的属性和功能，我们放在“分”里面来，比如email的nikename\n\n3.3 重构代码-自定义验证对象\n我们之前写的代码，有一些细节问题。\n\n1.传入错误的参数，虽然没有添加到数据库，但是返回 结果显示正常\n这是因为，form.validate()如果校验不通过，他不会抛出异常，而是会将异常信息存储在form对象中。\n 所以这个时候我们应该判断如果校验不通过，就抛出一个自定义的异常。\n \n **比如我之前在\"type\" = \"100\",错误，但还是会return sucess。**\n\nwerkzeug为我们提供的大量的异常，都继承自HTTPException，但是这些异常都很具体，不能为我们所用。不过我们可以自己定义一个异常来继承HTTPException\n\n2.自定义异常\nrest中状态码代表的意义\n400 参数错误\n401 未授权\n403 禁止访问\n404 没有找到资源或者页面\n500 服务器未知错误\n200 查询成功\n201 更新/创建成功\n204 删除成功\n301/302 重定向\n\napp\\libs\\erro_code.py\n```\nfrom werkzeug.exceptions import HTTPException\n# 自定义异常类\n\nclass ClientTypeErro(HTTPException):\n    code = 400\n    description = (\n        'client is invalid'\n    )\n```\n修改后的试图函数\napp\\api\\v1\\client.py\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro   # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n        promise[form.type.data]()\n    else:\n        raise ClientTypeErro()  # 抛出自定义异常\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题：\n 1.代码太啰嗦了，每个试图函数里，都需要这么写\n 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适\n\n2.异常返回的标准与重要性\n我们的restapi返回的信息主要分为以下三类:\n 1.页数数据信息\n 2.操作成功提示信息\n 3.错误异常信息\n\n如果错误异常信息不够标准，那么客户端很难去处理我们的错误异常。\n\n无论上面三种，都属于输出，REST-API要求输入输出都要返回JSON\n\n3.自定义ApiException\n通过分析HttpException的get_body,get_header源码我们可以知道，这两个方法分别组成了默认异常页面的header和html文本，所以如果要让我们的异常返回json格式的信息，需要继承HttpException并重写这两个方法.  **万不得已,不要动框架源代码**  \n HttpException 源代码部分\n```\nclass HTTPException(Exception):\n\n    \"\"\"\n    Baseclass for all HTTP exceptions.  This exception can be called as WSGI\n    application to render a default error page or you can catch the subclasses\n    of it independently and render nicer error messages.\n    \"\"\"\n\n    code = None\n    description = None\n\n    def __init__(self, description=None, response=None):\n        Exception.__init__(self)\n        if description is not None:\n            self.description = description\n        self.response = response\n\n    def get_body(self, environ=None):\n        \"\"\"Get the HTML body.\"\"\"\n        return text_type((\n            u'<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n'\n            u'<title>%(code)s %(name)s</title>\\n'\n            u'<h1>%(name)s</h1>\\n'\n            u'%(description)s\\n'\n        ) % {\n            'code':         self.code,\n            'name':         escape(self.name),\n            'description':  self.get_description(environ)\n        })\n\n    def get_headers(self, environ=None):\n        \"\"\"Get a list of headers.\"\"\"\n        return [('Content-Type', 'text/html')]\n```\napp\\libs\\erro.py\n```\n\nfrom werkzeug.exceptions import HTTPException\nfrom flask import request,json\n\n# 重写 HTTPException\n\nclass APIException(HTTPException):\n    # 定义默认异常信息\n    code = 500\n    msg = 'sorry, we make a mistake'\n    erro_code = 999     # 自定义的错误码   # 建议新建一个code.md记录自定义的错误码\n\n    def __init__(self, msg = None, code = None, erro_code = None,\n                headers = None):   # 给定None ,不传就是默认值\n\n        # 传了的话，就是选传的值\n        if code:\n            self.code = code\n        if erro_code:\n            self.erro_code = erro_code\n        if msg:\n            self.msg = msg   \n        super(APIException, self).__init__(self.msg, None)   # 继承\n\n    def get_body(self, environ=None):\n        body = dict(\n            msg = self.msg,\n            erro_code = self.erro_code,\n            # request = 'POST v1/client/register'\n            request = request.method+' '+self.get_url_no_param() \n        )       \n        text = json.dumps(body)  # 将字典转换为json 文本  json 序列化\n        return text\n\n    def get_headers(self, environ=None):\n        return [('Content-Type', 'application/json')]  # 将返回标识成json\n\n    @staticmethod\n    def get_url_no_param():  # 没有？后面的参数\n        full_path = request.full_path  # 拿到 url完整路径\n        main_path = full_path.split('?') # 去掉？和后面\n        return main_path[0]\n\n\n```\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-3--自定义异常对象.md","raw":"\n---\ntitle: Flask构建可扩展的RESTful-API-3--自定义异常对象\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n\n# 3.1 关于用户的思考\n \n 不管是网站也好，还是API也好，我们都逃脱不了用户这个概念，我们下面就要来讨论用户的相关操作\n \n\n 对于用户而言，第一件事情，我们就要完成用户注册的操作，说到注册用户，我们想到，可以在视图函数文件中增加一个注册用户的视图函数--create_user，并且我们会在其中接受账号和密码，来完成用户的注册，这个逻辑是通常意义上的用户的概念。\n \n\n 普通用户：使用鱼书的人相对于鱼书来说，就是用户；我们相对于QQ和微信，也是他的用户。\n \n\n 但是我们在做API的时候，不能只考虑这些普通意义的用户，我们还要考虑一些特别的用户。例如：我们开发了一个向外提供数据的API，加入有一天，有一个公司，想使用我们的API开发他们自己的产品（小程序或者APP），这些其他的客户端，都是我们API的用户\n \n\n根据以上的分析，我们可以得出几个结论：\n对于API而言，再叫做用户就不太合适 ，我们更倾向于把人，第三方的产品等同于成为客户端（client）来代替User。\n客户端的种类非常多，注册的形式就非常多。如对于普通的用户而言，就是账号和密码，但是账号和密码又可以分成，短信，邮件，社交用户。对于多种的注册形式，也不是所有的都需要密码，如小程序就不需要。\nAPI和普通的业务系统是不一样的，他具有开发性和通用性。\n因为注册的形式就非常多，所以我们不可能用万能的方式来解决。如果我们不能很好的处理多种多样的形式，我们的代码就会非常的杂乱\n\n3.2 注册client\n对于登录/注册这些比较重要的接口，我们建议提供一个统一的调用接口，而不应该拆分成多个。\n\n我们可以编写一个枚举类，来枚举所有的客户端类型。\napp\\libs\\enums.py\n```\nfrom enum import Enum\n\n# 定义一个枚举\nclass ClientTypeEnum(Enum):\n    USER_EMAIL =  100\n    USER_MOBILE = 101\n\n    # 微信小程序\n    USER_MINA = 200\n    #微信公众号\n    UESR_WX = 201\n\n```\n1.构建client验证器\napp\\validators\\forms.py\n```\nfrom wtforms import Form, StringField, IntegerField    # 字符串类型,数字类型\nfrom wtforms.validators import DataRequired, length\nfrom app.libs.enums import ClientTypeEnum\n\n# 构建client验证器\nclass ClientForm(Form):\n    account = StringField(validators=[DataRequired(), length(min=1, max=32)])\n    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入\n    type = IntegerField(validators=[DataRequired()])\n\n    # 验证client_type\n    def validate_type(self, value):\n        try:\n        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常\n        # 如果匹配成功则将int转换成枚举\n            client = ClientTypeEnum(value.data)  # value.data 取到值\n        except ValueError as e:\n            raise e\n\n```\n2.处理不同客户端注册的方案\n由于python没有switch-case，我们可以使用dict来替换\napp\\api\\v1\\client.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['PSOT'] )  # 路由注册\ndef create_client():\n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data=data)\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n\ndef __register_user_by_email():\n    pass\n\n# def __register_user_by_MINA():\n#     pass\n```\n3.用户模型的设计\napp\\models\\base.py\n\n```\nfrom datetime import datetime\n\nfrom flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery\nfrom sqlalchemy import Column, Integer, SmallInteger\nfrom contextlib import contextmanager\n\n\nclass SQLAlchemy(_SQLAlchemy):\n    @contextmanager\n    def auto_commit(self):\n        try:\n            yield\n            self.session.commit()\n        except Exception as e:\n            db.session.rollback()\n            raise e\n\n\nclass Query(BaseQuery):\n    def filter_by(self, **kwargs):\n        if 'status' not in kwargs.keys():\n            kwargs['status'] = 1\n        return super(Query, self).filter_by(**kwargs)\n\n\ndb = SQLAlchemy(query_class=Query)\n\n\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column(Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    @property\n    def create_datetime(self):\n        if self.create_time:\n            return datetime.fromtimestamp(self.create_time)\n        else:\n            return None\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n\n    def delete(self):\n        self.status = 0\n\n```\napp\\models\\user.py\n\n```\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# from app.libs.error_code import NotFound, AuthFailed\nfrom app.models.base import Base\nimport datetime\n\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n```\n添加一个注册的方法\n```\n\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# from app.libs.error_code import NotFound, AuthFailed\nfrom app.models.base import Base , db\nimport datetime\n\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n\n    @staticmethod\n    def register_by_email(nickname, account, secret):\n        with db.auto_commit():\n            user = User()\n            user.nickname = nickname\n            user.email = account\n            user.password = secret\n            db.session.add(user)\n```\n插件的注册\napp\\__init__.py\n```\n\nfrom flask import Flask\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef registe_plugin(app):  # 插件的注册\n    from app.models.base import db\n    db.init_app(app)\n\n    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all\n        db.create_all()  # 来创建所有数据库，数据表\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    registe_plugin(app)  # 最后调用 registe_plugin\n\n    return app\n    \n    \n```\n\n4.完成客户端注册\n之前我们的ClientForm并没有nickname，但是注册email用户的时候是需要的，所以我们建立一个UserEmailForm继承ClientForm完成他自己的业务\n不能从request.json 中拿，因为这个参数没经过校验\n```\n\nfrom wtforms import Form, StringField, IntegerField ,ValidationError    # 字符串类型,数字类型,异常\nfrom wtforms.validators import DataRequired, length,  Email, Regexp\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n# 构建client验证器\nclass ClientForm(Form):\n    account = StringField(validators=[DataRequired(), length(min=1, max=32)])\n    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入\n    type = IntegerField(validators=[DataRequired()])\n\n    # 验证client_type\n    def validate_type(self, value):\n        try:\n        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常\n        # 如果匹配成功则将int转换成枚举\n            client = ClientTypeEnum(value.data)  # value.data 取到值\n        except ValueError as e:\n            raise e\n    # 面向对象的继承特性，减少代码量，ClientForm是很有必要存在的\n        self.type = client  # 将枚举赋值给 type\n\nclass UserEmailForm(ClientForm):\n    account = StringField(validators=[\n        Email(message='validate email')\n        ])  # 必须是Email\n    secret = StringField(validators=[\n        DataRequired(),\n        Regexp(r'^[A-Za-z0-9_*&$#@]{6,22}$')\n        ]) #必须要密码，密码格式 \n    nickname = StringField(validators=[DataRequired(),\n                                       length(min=2, max=22)])  # 新增一个个性化参数nickname\n\n    def validate_account(self, value):   # 验证账号是否已经注册\n        if User.query.filter_by(email=value.data).first():  # 如果能查询到email\n            raise ValidationError()   # 则抛出异常\n```\n完成视图函数的编写\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n        promise[form.type.data]()\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n\n```\ncreate_client和__register_user_by_email是一个总-分的关系，客户端注册的种类是比较多的，但是这些众多的种类又有一些共通的东西，比如处理客户端的type的值，就是所有的客户端都要携带的参数。对于这些共有的参数，我们就统一在create_client,ClientForm中进行处理\n 对于不同的客户端的特色的属性和功能，我们放在“分”里面来，比如email的nikename\n\n3.3 重构代码-自定义验证对象\n我们之前写的代码，有一些细节问题。\n\n1.传入错误的参数，虽然没有添加到数据库，但是返回 结果显示正常\n这是因为，form.validate()如果校验不通过，他不会抛出异常，而是会将异常信息存储在form对象中。\n 所以这个时候我们应该判断如果校验不通过，就抛出一个自定义的异常。\n \n **比如我之前在\"type\" = \"100\",错误，但还是会return sucess。**\n\nwerkzeug为我们提供的大量的异常，都继承自HTTPException，但是这些异常都很具体，不能为我们所用。不过我们可以自己定义一个异常来继承HTTPException\n\n2.自定义异常\nrest中状态码代表的意义\n400 参数错误\n401 未授权\n403 禁止访问\n404 没有找到资源或者页面\n500 服务器未知错误\n200 查询成功\n201 更新/创建成功\n204 删除成功\n301/302 重定向\n\napp\\libs\\erro_code.py\n```\nfrom werkzeug.exceptions import HTTPException\n# 自定义异常类\n\nclass ClientTypeErro(HTTPException):\n    code = 400\n    description = (\n        'client is invalid'\n    )\n```\n修改后的试图函数\napp\\api\\v1\\client.py\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro   # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n\n    if form.validate():\n# 替代switchcase-{Enum_name:handle_func}\n        promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n        promise[form.type.data]()\n    else:\n        raise ClientTypeErro()  # 抛出自定义异常\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题：\n 1.代码太啰嗦了，每个试图函数里，都需要这么写\n 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适\n\n2.异常返回的标准与重要性\n我们的restapi返回的信息主要分为以下三类:\n 1.页数数据信息\n 2.操作成功提示信息\n 3.错误异常信息\n\n如果错误异常信息不够标准，那么客户端很难去处理我们的错误异常。\n\n无论上面三种，都属于输出，REST-API要求输入输出都要返回JSON\n\n3.自定义ApiException\n通过分析HttpException的get_body,get_header源码我们可以知道，这两个方法分别组成了默认异常页面的header和html文本，所以如果要让我们的异常返回json格式的信息，需要继承HttpException并重写这两个方法.  **万不得已,不要动框架源代码**  \n HttpException 源代码部分\n```\nclass HTTPException(Exception):\n\n    \"\"\"\n    Baseclass for all HTTP exceptions.  This exception can be called as WSGI\n    application to render a default error page or you can catch the subclasses\n    of it independently and render nicer error messages.\n    \"\"\"\n\n    code = None\n    description = None\n\n    def __init__(self, description=None, response=None):\n        Exception.__init__(self)\n        if description is not None:\n            self.description = description\n        self.response = response\n\n    def get_body(self, environ=None):\n        \"\"\"Get the HTML body.\"\"\"\n        return text_type((\n            u'<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n'\n            u'<title>%(code)s %(name)s</title>\\n'\n            u'<h1>%(name)s</h1>\\n'\n            u'%(description)s\\n'\n        ) % {\n            'code':         self.code,\n            'name':         escape(self.name),\n            'description':  self.get_description(environ)\n        })\n\n    def get_headers(self, environ=None):\n        \"\"\"Get a list of headers.\"\"\"\n        return [('Content-Type', 'text/html')]\n```\napp\\libs\\erro.py\n```\n\nfrom werkzeug.exceptions import HTTPException\nfrom flask import request,json\n\n# 重写 HTTPException\n\nclass APIException(HTTPException):\n    # 定义默认异常信息\n    code = 500\n    msg = 'sorry, we make a mistake'\n    erro_code = 999     # 自定义的错误码   # 建议新建一个code.md记录自定义的错误码\n\n    def __init__(self, msg = None, code = None, erro_code = None,\n                headers = None):   # 给定None ,不传就是默认值\n\n        # 传了的话，就是选传的值\n        if code:\n            self.code = code\n        if erro_code:\n            self.erro_code = erro_code\n        if msg:\n            self.msg = msg   \n        super(APIException, self).__init__(self.msg, None)   # 继承\n\n    def get_body(self, environ=None):\n        body = dict(\n            msg = self.msg,\n            erro_code = self.erro_code,\n            # request = 'POST v1/client/register'\n            request = request.method+' '+self.get_url_no_param() \n        )       \n        text = json.dumps(body)  # 将字典转换为json 文本  json 序列化\n        return text\n\n    def get_headers(self, environ=None):\n        return [('Content-Type', 'application/json')]  # 将返回标识成json\n\n    @staticmethod\n    def get_url_no_param():  # 没有？后面的参数\n        full_path = request.full_path  # 拿到 url完整路径\n        main_path = full_path.split('?') # 去掉？和后面\n        return main_path[0]\n\n\n```\n","slug":"flask-api/Flask构建可扩展的RESTful-API-3--自定义异常对象","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxr001atssamedaj8yv","content":"<h1 id=\"3-1-关于用户的思考\"><a href=\"#3-1-关于用户的思考\" class=\"headerlink\" title=\"3.1 关于用户的思考\"></a>3.1 关于用户的思考</h1><p> 不管是网站也好，还是API也好，我们都逃脱不了用户这个概念，我们下面就要来讨论用户的相关操作</p>\n<p> 对于用户而言，第一件事情，我们就要完成用户注册的操作，说到注册用户，我们想到，可以在视图函数文件中增加一个注册用户的视图函数–create_user，并且我们会在其中接受账号和密码，来完成用户的注册，这个逻辑是通常意义上的用户的概念。</p>\n<p> 普通用户：使用鱼书的人相对于鱼书来说，就是用户；我们相对于QQ和微信，也是他的用户。</p>\n<p> 但是我们在做API的时候，不能只考虑这些普通意义的用户，我们还要考虑一些特别的用户。例如：我们开发了一个向外提供数据的API，加入有一天，有一个公司，想使用我们的API开发他们自己的产品（小程序或者APP），这些其他的客户端，都是我们API的用户</p>\n<p>根据以上的分析，我们可以得出几个结论：<br>对于API而言，再叫做用户就不太合适 ，我们更倾向于把人，第三方的产品等同于成为客户端（client）来代替User。<br>客户端的种类非常多，注册的形式就非常多。如对于普通的用户而言，就是账号和密码，但是账号和密码又可以分成，短信，邮件，社交用户。对于多种的注册形式，也不是所有的都需要密码，如小程序就不需要。<br>API和普通的业务系统是不一样的，他具有开发性和通用性。<br>因为注册的形式就非常多，所以我们不可能用万能的方式来解决。如果我们不能很好的处理多种多样的形式，我们的代码就会非常的杂乱</p>\n<p>3.2 注册client<br>对于登录/注册这些比较重要的接口，我们建议提供一个统一的调用接口，而不应该拆分成多个。</p>\n<p>我们可以编写一个枚举类，来枚举所有的客户端类型。<br>app\\libs\\enums.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义一个枚举</span><br><span class=\"line\">class ClientTypeEnum(Enum):</span><br><span class=\"line\">    USER_EMAIL =  100</span><br><span class=\"line\">    USER_MOBILE = 101</span><br><span class=\"line\"></span><br><span class=\"line\">    # 微信小程序</span><br><span class=\"line\">    USER_MINA = 200</span><br><span class=\"line\">    #微信公众号</span><br><span class=\"line\">    UESR_WX = 201</span><br></pre></td></tr></table></figure></p>\n<p>1.构建client验证器<br>app\\validators\\forms.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form, StringField, IntegerField    # 字符串类型,数字类型</span><br><span class=\"line\">from wtforms.validators import DataRequired, length</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建client验证器</span><br><span class=\"line\">class ClientForm(Form):</span><br><span class=\"line\">    account = StringField(validators=[DataRequired(), length(min=1, max=32)])</span><br><span class=\"line\">    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入</span><br><span class=\"line\">    type = IntegerField(validators=[DataRequired()])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 验证client_type</span><br><span class=\"line\">    def validate_type(self, value):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常</span><br><span class=\"line\">        # 如果匹配成功则将int转换成枚举</span><br><span class=\"line\">            client = ClientTypeEnum(value.data)  # value.data 取到值</span><br><span class=\"line\">        except ValueError as e:</span><br><span class=\"line\">            raise e</span><br></pre></td></tr></table></figure></p>\n<p>2.处理不同客户端注册的方案<br>由于python没有switch-case，我们可以使用dict来替换<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;PSOT&apos;] )  # 路由注册</span><br><span class=\"line\">def create_client():</span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data=data)</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>3.用户模型的设计<br>app\\models\\base.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery</span><br><span class=\"line\">from sqlalchemy import Column, Integer, SmallInteger</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SQLAlchemy(_SQLAlchemy):</span><br><span class=\"line\">    @contextmanager</span><br><span class=\"line\">    def auto_commit(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            yield</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            db.session.rollback()</span><br><span class=\"line\">            raise e</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Query(BaseQuery):</span><br><span class=\"line\">    def filter_by(self, **kwargs):</span><br><span class=\"line\">        if &apos;status&apos; not in kwargs.keys():</span><br><span class=\"line\">            kwargs[&apos;status&apos;] = 1</span><br><span class=\"line\">        return super(Query, self).filter_by(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(query_class=Query)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def create_datetime(self):</span><br><span class=\"line\">        if self.create_time:</span><br><span class=\"line\">            return datetime.fromtimestamp(self.create_time)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete(self):</span><br><span class=\"line\">        self.status = 0</span><br></pre></td></tr></table></figure>\n<p>app\\models\\user.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\"># from app.libs.error_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br></pre></td></tr></table></figure>\n<p>添加一个注册的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\"># from app.libs.error_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base , db</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def register_by_email(nickname, account, secret):</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            user = User()</span><br><span class=\"line\">            user.nickname = nickname</span><br><span class=\"line\">            user.email = account</span><br><span class=\"line\">            user.password = secret</span><br><span class=\"line\">            db.session.add(user)</span><br></pre></td></tr></table></figure></p>\n<p>插件的注册<br>app__init__.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def registe_plugin(app):  # 插件的注册</span><br><span class=\"line\">    from app.models.base import db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all</span><br><span class=\"line\">        db.create_all()  # 来创建所有数据库，数据表</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    registe_plugin(app)  # 最后调用 registe_plugin</span><br><span class=\"line\"></span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>4.完成客户端注册<br>之前我们的ClientForm并没有nickname，但是注册email用户的时候是需要的，所以我们建立一个UserEmailForm继承ClientForm完成他自己的业务<br>不能从request.json 中拿，因为这个参数没经过校验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from wtforms import Form, StringField, IntegerField ,ValidationError    # 字符串类型,数字类型,异常</span><br><span class=\"line\">from wtforms.validators import DataRequired, length,  Email, Regexp</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建client验证器</span><br><span class=\"line\">class ClientForm(Form):</span><br><span class=\"line\">    account = StringField(validators=[DataRequired(), length(min=1, max=32)])</span><br><span class=\"line\">    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入</span><br><span class=\"line\">    type = IntegerField(validators=[DataRequired()])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 验证client_type</span><br><span class=\"line\">    def validate_type(self, value):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常</span><br><span class=\"line\">        # 如果匹配成功则将int转换成枚举</span><br><span class=\"line\">            client = ClientTypeEnum(value.data)  # value.data 取到值</span><br><span class=\"line\">        except ValueError as e:</span><br><span class=\"line\">            raise e</span><br><span class=\"line\">    # 面向对象的继承特性，减少代码量，ClientForm是很有必要存在的</span><br><span class=\"line\">        self.type = client  # 将枚举赋值给 type</span><br><span class=\"line\"></span><br><span class=\"line\">class UserEmailForm(ClientForm):</span><br><span class=\"line\">    account = StringField(validators=[</span><br><span class=\"line\">        Email(message=&apos;validate email&apos;)</span><br><span class=\"line\">        ])  # 必须是Email</span><br><span class=\"line\">    secret = StringField(validators=[</span><br><span class=\"line\">        DataRequired(),</span><br><span class=\"line\">        Regexp(r&apos;^[A-Za-z0-9_*&amp;$#@]&#123;6,22&#125;$&apos;)</span><br><span class=\"line\">        ]) #必须要密码，密码格式 </span><br><span class=\"line\">    nickname = StringField(validators=[DataRequired(),</span><br><span class=\"line\">                                       length(min=2, max=22)])  # 新增一个个性化参数nickname</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_account(self, value):   # 验证账号是否已经注册</span><br><span class=\"line\">        if User.query.filter_by(email=value.data).first():  # 如果能查询到email</span><br><span class=\"line\">            raise ValidationError()   # 则抛出异常</span><br></pre></td></tr></table></figure></p>\n<p>完成视图函数的编写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        promise[form.type.data]()</span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>create_client和__register_user_by_email是一个总-分的关系，客户端注册的种类是比较多的，但是这些众多的种类又有一些共通的东西，比如处理客户端的type的值，就是所有的客户端都要携带的参数。对于这些共有的参数，我们就统一在create_client,ClientForm中进行处理<br> 对于不同的客户端的特色的属性和功能，我们放在“分”里面来，比如email的nikename</p>\n<p>3.3 重构代码-自定义验证对象<br>我们之前写的代码，有一些细节问题。</p>\n<p>1.传入错误的参数，虽然没有添加到数据库，但是返回 结果显示正常<br>这是因为，form.validate()如果校验不通过，他不会抛出异常，而是会将异常信息存储在form对象中。<br> 所以这个时候我们应该判断如果校验不通过，就抛出一个自定义的异常。</p>\n<p> <strong>比如我之前在”type” = “100”,错误，但还是会return sucess。</strong></p>\n<p>werkzeug为我们提供的大量的异常，都继承自HTTPException，但是这些异常都很具体，不能为我们所用。不过我们可以自己定义一个异常来继承HTTPException</p>\n<p>2.自定义异常<br>rest中状态码代表的意义<br>400 参数错误<br>401 未授权<br>403 禁止访问<br>404 没有找到资源或者页面<br>500 服务器未知错误<br>200 查询成功<br>201 更新/创建成功<br>204 删除成功<br>301/302 重定向</p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"># 自定义异常类</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(HTTPException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    description = (</span><br><span class=\"line\">        &apos;client is invalid&apos;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n<p>修改后的试图函数<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro   # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        promise[form.type.data]()</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        raise ClientTypeErro()  # 抛出自定义异常</span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题：<br> 1.代码太啰嗦了，每个试图函数里，都需要这么写<br> 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适</p>\n<p>2.异常返回的标准与重要性<br>我们的restapi返回的信息主要分为以下三类:<br> 1.页数数据信息<br> 2.操作成功提示信息<br> 3.错误异常信息</p>\n<p>如果错误异常信息不够标准，那么客户端很难去处理我们的错误异常。</p>\n<p>无论上面三种，都属于输出，REST-API要求输入输出都要返回JSON</p>\n<p>3.自定义ApiException<br>通过分析HttpException的get_body,get_header源码我们可以知道，这两个方法分别组成了默认异常页面的header和html文本，所以如果要让我们的异常返回json格式的信息，需要继承HttpException并重写这两个方法.  <strong>万不得已,不要动框架源代码</strong><br> HttpException 源代码部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HTTPException(Exception):</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Baseclass for all HTTP exceptions.  This exception can be called as WSGI</span><br><span class=\"line\">    application to render a default error page or you can catch the subclasses</span><br><span class=\"line\">    of it independently and render nicer error messages.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    code = None</span><br><span class=\"line\">    description = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, description=None, response=None):</span><br><span class=\"line\">        Exception.__init__(self)</span><br><span class=\"line\">        if description is not None:</span><br><span class=\"line\">            self.description = description</span><br><span class=\"line\">        self.response = response</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_body(self, environ=None):</span><br><span class=\"line\">        &quot;&quot;&quot;Get the HTML body.&quot;&quot;&quot;</span><br><span class=\"line\">        return text_type((</span><br><span class=\"line\">            u&apos;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;&lt;title&gt;%(code)s %(name)s&lt;/title&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;&lt;h1&gt;%(name)s&lt;/h1&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;%(description)s\\n&apos;</span><br><span class=\"line\">        ) % &#123;</span><br><span class=\"line\">            &apos;code&apos;:         self.code,</span><br><span class=\"line\">            &apos;name&apos;:         escape(self.name),</span><br><span class=\"line\">            &apos;description&apos;:  self.get_description(environ)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_headers(self, environ=None):</span><br><span class=\"line\">        &quot;&quot;&quot;Get a list of headers.&quot;&quot;&quot;</span><br><span class=\"line\">        return [(&apos;Content-Type&apos;, &apos;text/html&apos;)]</span><br></pre></td></tr></table></figure></p>\n<p>app\\libs\\erro.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\">from flask import request,json</span><br><span class=\"line\"></span><br><span class=\"line\"># 重写 HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\">class APIException(HTTPException):</span><br><span class=\"line\">    # 定义默认异常信息</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg = &apos;sorry, we make a mistake&apos;</span><br><span class=\"line\">    erro_code = 999     # 自定义的错误码   # 建议新建一个code.md记录自定义的错误码</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, msg = None, code = None, erro_code = None,</span><br><span class=\"line\">                headers = None):   # 给定None ,不传就是默认值</span><br><span class=\"line\"></span><br><span class=\"line\">        # 传了的话，就是选传的值</span><br><span class=\"line\">        if code:</span><br><span class=\"line\">            self.code = code</span><br><span class=\"line\">        if erro_code:</span><br><span class=\"line\">            self.erro_code = erro_code</span><br><span class=\"line\">        if msg:</span><br><span class=\"line\">            self.msg = msg   </span><br><span class=\"line\">        super(APIException, self).__init__(self.msg, None)   # 继承</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_body(self, environ=None):</span><br><span class=\"line\">        body = dict(</span><br><span class=\"line\">            msg = self.msg,</span><br><span class=\"line\">            erro_code = self.erro_code,</span><br><span class=\"line\">            # request = &apos;POST v1/client/register&apos;</span><br><span class=\"line\">            request = request.method+&apos; &apos;+self.get_url_no_param() </span><br><span class=\"line\">        )       </span><br><span class=\"line\">        text = json.dumps(body)  # 将字典转换为json 文本  json 序列化</span><br><span class=\"line\">        return text</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_headers(self, environ=None):</span><br><span class=\"line\">        return [(&apos;Content-Type&apos;, &apos;application/json&apos;)]  # 将返回标识成json</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get_url_no_param():  # 没有？后面的参数</span><br><span class=\"line\">        full_path = request.full_path  # 拿到 url完整路径</span><br><span class=\"line\">        main_path = full_path.split(&apos;?&apos;) # 去掉？和后面</span><br><span class=\"line\">        return main_path[0]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"3-1-关于用户的思考\"><a href=\"#3-1-关于用户的思考\" class=\"headerlink\" title=\"3.1 关于用户的思考\"></a>3.1 关于用户的思考</h1><p> 不管是网站也好，还是API也好，我们都逃脱不了用户这个概念，我们下面就要来讨论用户的相关操作</p>\n<p> 对于用户而言，第一件事情，我们就要完成用户注册的操作，说到注册用户，我们想到，可以在视图函数文件中增加一个注册用户的视图函数–create_user，并且我们会在其中接受账号和密码，来完成用户的注册，这个逻辑是通常意义上的用户的概念。</p>\n<p> 普通用户：使用鱼书的人相对于鱼书来说，就是用户；我们相对于QQ和微信，也是他的用户。</p>\n<p> 但是我们在做API的时候，不能只考虑这些普通意义的用户，我们还要考虑一些特别的用户。例如：我们开发了一个向外提供数据的API，加入有一天，有一个公司，想使用我们的API开发他们自己的产品（小程序或者APP），这些其他的客户端，都是我们API的用户</p>\n<p>根据以上的分析，我们可以得出几个结论：<br>对于API而言，再叫做用户就不太合适 ，我们更倾向于把人，第三方的产品等同于成为客户端（client）来代替User。<br>客户端的种类非常多，注册的形式就非常多。如对于普通的用户而言，就是账号和密码，但是账号和密码又可以分成，短信，邮件，社交用户。对于多种的注册形式，也不是所有的都需要密码，如小程序就不需要。<br>API和普通的业务系统是不一样的，他具有开发性和通用性。<br>因为注册的形式就非常多，所以我们不可能用万能的方式来解决。如果我们不能很好的处理多种多样的形式，我们的代码就会非常的杂乱</p>\n<p>3.2 注册client<br>对于登录/注册这些比较重要的接口，我们建议提供一个统一的调用接口，而不应该拆分成多个。</p>\n<p>我们可以编写一个枚举类，来枚举所有的客户端类型。<br>app\\libs\\enums.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义一个枚举</span><br><span class=\"line\">class ClientTypeEnum(Enum):</span><br><span class=\"line\">    USER_EMAIL =  100</span><br><span class=\"line\">    USER_MOBILE = 101</span><br><span class=\"line\"></span><br><span class=\"line\">    # 微信小程序</span><br><span class=\"line\">    USER_MINA = 200</span><br><span class=\"line\">    #微信公众号</span><br><span class=\"line\">    UESR_WX = 201</span><br></pre></td></tr></table></figure></p>\n<p>1.构建client验证器<br>app\\validators\\forms.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form, StringField, IntegerField    # 字符串类型,数字类型</span><br><span class=\"line\">from wtforms.validators import DataRequired, length</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建client验证器</span><br><span class=\"line\">class ClientForm(Form):</span><br><span class=\"line\">    account = StringField(validators=[DataRequired(), length(min=1, max=32)])</span><br><span class=\"line\">    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入</span><br><span class=\"line\">    type = IntegerField(validators=[DataRequired()])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 验证client_type</span><br><span class=\"line\">    def validate_type(self, value):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常</span><br><span class=\"line\">        # 如果匹配成功则将int转换成枚举</span><br><span class=\"line\">            client = ClientTypeEnum(value.data)  # value.data 取到值</span><br><span class=\"line\">        except ValueError as e:</span><br><span class=\"line\">            raise e</span><br></pre></td></tr></table></figure></p>\n<p>2.处理不同客户端注册的方案<br>由于python没有switch-case，我们可以使用dict来替换<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;PSOT&apos;] )  # 路由注册</span><br><span class=\"line\">def create_client():</span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data=data)</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>3.用户模型的设计<br>app\\models\\base.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery</span><br><span class=\"line\">from sqlalchemy import Column, Integer, SmallInteger</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SQLAlchemy(_SQLAlchemy):</span><br><span class=\"line\">    @contextmanager</span><br><span class=\"line\">    def auto_commit(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            yield</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            db.session.rollback()</span><br><span class=\"line\">            raise e</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Query(BaseQuery):</span><br><span class=\"line\">    def filter_by(self, **kwargs):</span><br><span class=\"line\">        if &apos;status&apos; not in kwargs.keys():</span><br><span class=\"line\">            kwargs[&apos;status&apos;] = 1</span><br><span class=\"line\">        return super(Query, self).filter_by(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(query_class=Query)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def create_datetime(self):</span><br><span class=\"line\">        if self.create_time:</span><br><span class=\"line\">            return datetime.fromtimestamp(self.create_time)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete(self):</span><br><span class=\"line\">        self.status = 0</span><br></pre></td></tr></table></figure>\n<p>app\\models\\user.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\"># from app.libs.error_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br></pre></td></tr></table></figure>\n<p>添加一个注册的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\"># from app.libs.error_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base , db</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def register_by_email(nickname, account, secret):</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            user = User()</span><br><span class=\"line\">            user.nickname = nickname</span><br><span class=\"line\">            user.email = account</span><br><span class=\"line\">            user.password = secret</span><br><span class=\"line\">            db.session.add(user)</span><br></pre></td></tr></table></figure></p>\n<p>插件的注册<br>app__init__.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def registe_plugin(app):  # 插件的注册</span><br><span class=\"line\">    from app.models.base import db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all</span><br><span class=\"line\">        db.create_all()  # 来创建所有数据库，数据表</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    registe_plugin(app)  # 最后调用 registe_plugin</span><br><span class=\"line\"></span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>4.完成客户端注册<br>之前我们的ClientForm并没有nickname，但是注册email用户的时候是需要的，所以我们建立一个UserEmailForm继承ClientForm完成他自己的业务<br>不能从request.json 中拿，因为这个参数没经过校验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from wtforms import Form, StringField, IntegerField ,ValidationError    # 字符串类型,数字类型,异常</span><br><span class=\"line\">from wtforms.validators import DataRequired, length,  Email, Regexp</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建client验证器</span><br><span class=\"line\">class ClientForm(Form):</span><br><span class=\"line\">    account = StringField(validators=[DataRequired(), length(min=1, max=32)])</span><br><span class=\"line\">    secret = StringField()   # 由于客户端类型的不同，密码不一定要传入</span><br><span class=\"line\">    type = IntegerField(validators=[DataRequired()])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 验证client_type</span><br><span class=\"line\">    def validate_type(self, value):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">        # 将用户传来的参数去枚举类中匹配，如果匹配失败，则抛出异常</span><br><span class=\"line\">        # 如果匹配成功则将int转换成枚举</span><br><span class=\"line\">            client = ClientTypeEnum(value.data)  # value.data 取到值</span><br><span class=\"line\">        except ValueError as e:</span><br><span class=\"line\">            raise e</span><br><span class=\"line\">    # 面向对象的继承特性，减少代码量，ClientForm是很有必要存在的</span><br><span class=\"line\">        self.type = client  # 将枚举赋值给 type</span><br><span class=\"line\"></span><br><span class=\"line\">class UserEmailForm(ClientForm):</span><br><span class=\"line\">    account = StringField(validators=[</span><br><span class=\"line\">        Email(message=&apos;validate email&apos;)</span><br><span class=\"line\">        ])  # 必须是Email</span><br><span class=\"line\">    secret = StringField(validators=[</span><br><span class=\"line\">        DataRequired(),</span><br><span class=\"line\">        Regexp(r&apos;^[A-Za-z0-9_*&amp;$#@]&#123;6,22&#125;$&apos;)</span><br><span class=\"line\">        ]) #必须要密码，密码格式 </span><br><span class=\"line\">    nickname = StringField(validators=[DataRequired(),</span><br><span class=\"line\">                                       length(min=2, max=22)])  # 新增一个个性化参数nickname</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_account(self, value):   # 验证账号是否已经注册</span><br><span class=\"line\">        if User.query.filter_by(email=value.data).first():  # 如果能查询到email</span><br><span class=\"line\">            raise ValidationError()   # 则抛出异常</span><br></pre></td></tr></table></figure></p>\n<p>完成视图函数的编写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        promise[form.type.data]()</span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>create_client和__register_user_by_email是一个总-分的关系，客户端注册的种类是比较多的，但是这些众多的种类又有一些共通的东西，比如处理客户端的type的值，就是所有的客户端都要携带的参数。对于这些共有的参数，我们就统一在create_client,ClientForm中进行处理<br> 对于不同的客户端的特色的属性和功能，我们放在“分”里面来，比如email的nikename</p>\n<p>3.3 重构代码-自定义验证对象<br>我们之前写的代码，有一些细节问题。</p>\n<p>1.传入错误的参数，虽然没有添加到数据库，但是返回 结果显示正常<br>这是因为，form.validate()如果校验不通过，他不会抛出异常，而是会将异常信息存储在form对象中。<br> 所以这个时候我们应该判断如果校验不通过，就抛出一个自定义的异常。</p>\n<p> <strong>比如我之前在”type” = “100”,错误，但还是会return sucess。</strong></p>\n<p>werkzeug为我们提供的大量的异常，都继承自HTTPException，但是这些异常都很具体，不能为我们所用。不过我们可以自己定义一个异常来继承HTTPException</p>\n<p>2.自定义异常<br>rest中状态码代表的意义<br>400 参数错误<br>401 未授权<br>403 禁止访问<br>404 没有找到资源或者页面<br>500 服务器未知错误<br>200 查询成功<br>201 更新/创建成功<br>204 删除成功<br>301/302 重定向</p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"># 自定义异常类</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(HTTPException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    description = (</span><br><span class=\"line\">        &apos;client is invalid&apos;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></p>\n<p>修改后的试图函数<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro   # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\"></span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">        promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        promise[form.type.data]()</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        raise ClientTypeErro()  # 抛出自定义异常</span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题：<br> 1.代码太啰嗦了，每个试图函数里，都需要这么写<br> 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适</p>\n<p>2.异常返回的标准与重要性<br>我们的restapi返回的信息主要分为以下三类:<br> 1.页数数据信息<br> 2.操作成功提示信息<br> 3.错误异常信息</p>\n<p>如果错误异常信息不够标准，那么客户端很难去处理我们的错误异常。</p>\n<p>无论上面三种，都属于输出，REST-API要求输入输出都要返回JSON</p>\n<p>3.自定义ApiException<br>通过分析HttpException的get_body,get_header源码我们可以知道，这两个方法分别组成了默认异常页面的header和html文本，所以如果要让我们的异常返回json格式的信息，需要继承HttpException并重写这两个方法.  <strong>万不得已,不要动框架源代码</strong><br> HttpException 源代码部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HTTPException(Exception):</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Baseclass for all HTTP exceptions.  This exception can be called as WSGI</span><br><span class=\"line\">    application to render a default error page or you can catch the subclasses</span><br><span class=\"line\">    of it independently and render nicer error messages.</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    code = None</span><br><span class=\"line\">    description = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, description=None, response=None):</span><br><span class=\"line\">        Exception.__init__(self)</span><br><span class=\"line\">        if description is not None:</span><br><span class=\"line\">            self.description = description</span><br><span class=\"line\">        self.response = response</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_body(self, environ=None):</span><br><span class=\"line\">        &quot;&quot;&quot;Get the HTML body.&quot;&quot;&quot;</span><br><span class=\"line\">        return text_type((</span><br><span class=\"line\">            u&apos;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;&lt;title&gt;%(code)s %(name)s&lt;/title&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;&lt;h1&gt;%(name)s&lt;/h1&gt;\\n&apos;</span><br><span class=\"line\">            u&apos;%(description)s\\n&apos;</span><br><span class=\"line\">        ) % &#123;</span><br><span class=\"line\">            &apos;code&apos;:         self.code,</span><br><span class=\"line\">            &apos;name&apos;:         escape(self.name),</span><br><span class=\"line\">            &apos;description&apos;:  self.get_description(environ)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_headers(self, environ=None):</span><br><span class=\"line\">        &quot;&quot;&quot;Get a list of headers.&quot;&quot;&quot;</span><br><span class=\"line\">        return [(&apos;Content-Type&apos;, &apos;text/html&apos;)]</span><br></pre></td></tr></table></figure></p>\n<p>app\\libs\\erro.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\">from flask import request,json</span><br><span class=\"line\"></span><br><span class=\"line\"># 重写 HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\">class APIException(HTTPException):</span><br><span class=\"line\">    # 定义默认异常信息</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg = &apos;sorry, we make a mistake&apos;</span><br><span class=\"line\">    erro_code = 999     # 自定义的错误码   # 建议新建一个code.md记录自定义的错误码</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, msg = None, code = None, erro_code = None,</span><br><span class=\"line\">                headers = None):   # 给定None ,不传就是默认值</span><br><span class=\"line\"></span><br><span class=\"line\">        # 传了的话，就是选传的值</span><br><span class=\"line\">        if code:</span><br><span class=\"line\">            self.code = code</span><br><span class=\"line\">        if erro_code:</span><br><span class=\"line\">            self.erro_code = erro_code</span><br><span class=\"line\">        if msg:</span><br><span class=\"line\">            self.msg = msg   </span><br><span class=\"line\">        super(APIException, self).__init__(self.msg, None)   # 继承</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_body(self, environ=None):</span><br><span class=\"line\">        body = dict(</span><br><span class=\"line\">            msg = self.msg,</span><br><span class=\"line\">            erro_code = self.erro_code,</span><br><span class=\"line\">            # request = &apos;POST v1/client/register&apos;</span><br><span class=\"line\">            request = request.method+&apos; &apos;+self.get_url_no_param() </span><br><span class=\"line\">        )       </span><br><span class=\"line\">        text = json.dumps(body)  # 将字典转换为json 文本  json 序列化</span><br><span class=\"line\">        return text</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_headers(self, environ=None):</span><br><span class=\"line\">        return [(&apos;Content-Type&apos;, &apos;application/json&apos;)]  # 将返回标识成json</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def get_url_no_param():  # 没有？后面的参数</span><br><span class=\"line\">        full_path = request.full_path  # 拿到 url完整路径</span><br><span class=\"line\">        main_path = full_path.split(&apos;?&apos;) # 去掉？和后面</span><br><span class=\"line\">        return main_path[0]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她","date":"2018-12-18T10:36:16.000Z","_content":"\n\n# 4.1 重写WTForms\n\n### 优化1\n\n之前的代码，修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题： 1.代码太啰嗦了，每个试图函数里，都需要这么写 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适\n\n为了解决上面的问题，我们需要重写wtforms\n\n## 思路\n  继承原有的wtforms,重写validate_for_api，**修改wtforms为抛出异常**\n定义一个自定义BaseForm，让其他的Form来继承\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\n\nclass BaseForm(Form):\n    def __init__(self, data):\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n```\n定义公共异常类\n\napp\\libs\\erro_code.py\n```\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n```\n\n以后我们的试图函数就可以这样编写\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro   # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n   \n    form.validate_for_api()\n# 替代switchcase-{Enum_name:handle_func}\n    promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n    promise[form.type.data]()\n\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n\n### 优化2\n\n目前我们每次都需要从request中取出json信息再传入到Form对象中，优化的思路是，直接传入request，在BaseForm中取出json\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        data = request.json\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n```\n\n\n### 优化3\n\n每次都需要实例化Form对象，再调用validate_for_api()方法，我们可以让validate_for_api方法返回一个self对象，这样就只需要一行代码就可以解决了\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        data = request.json\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n        return self\n```\n### 优化4\n\n操作成功也需要返回json结构，且结构应该和异常的时候一样，所以我们可以定义一个Success继承APIException\napp\\libs\\erro_code.py\n```\n\n# from werkzeug.exceptions import HTTPException\n# # 自定义异常类\n\n# class ClientTypeErro(HTTPException):\n#     code = 400\n#     description = (\n#         'client is invalid'\n#     )\n  \n\n# ↑ 不再继承HTTPException\n\n# ↓ 继承APIException\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n\n# 将成功返回也当作一中 APIException，来优化代码\nclass Success(APIException):\n    code = 201\n    msg = 'ok'\n    erro_code = 0\n    \nclass ServerError(APIException):\n    code = 500\n    msg  = 'sorry,we made a mistaake'\n    erro_code = 999\n```\n优化后视图函数\napp\\api\\v1\\client.py\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\n# from flask import request  #  转移到Baseform中去了\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro, ParameterException ,Success    # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    # data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    # form = ClientForm(data = data)  # data =   来接收json\n    # form = ClientForm()   # 转移到 BaseForm 中\n\n    # form.validate_for_api()\n    form = ClientForm().validate_for_api()\n# 替代switchcase-{Enum_name:handle_func}\n    promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n    promise[form.type.data]()\n\n    return Success()  #  将成功返回也当作一中 APIException\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n#     form = UserEmailForm()\n# # if form.validate():\n#     form.validate_for_api() \n    form = UserEmailForm().validate_for_api()   # 为什么有括号\n    User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n我们可以接受定义时候的复杂，但是不能够接受调用的时候复杂\n\n定义是一次性的，但是调用是多次的，如果调用太过于复杂，会使得我们的 代码太过于臃肿\n\n# 4.2 全局异常处理\n\n当系统抛出不是我们自己定义的APIException的时候，返回的结果仍然会变成一个HTML文本。\n\n我们在写代码的过程中，有那么类型的异常： 1.已知异常：我们可以预知的。如枚举转换的时候抛出的异常，这时候我们就会提前使用try-except进行处理。也可以抛出APIException 2.未知异常：完全没有预料到的。会由框架抛出的内置异常\n\n我们可以使用flask给我们提供的处理全局异常的装饰器，采用AOP的设计思想，捕捉所有类型的异常。\n```\nfrom app import create_app\nfrom app.libs.erro_code import ServerError\nfrom app.libs.erro import APIException\nfrom werkzeug.exceptions import HTTPException\n\napp = create_app()\n\n@app.errorhandler(Exception)  # python 基类的异常,因为我们要捕捉所有异常\ndef framework_error(e):\n    if isinstance(e, APIException):\n        return e\n    if isinstance(e, HTTPException):  # 转化成APIException\n        code = e.code\n        msg = e.description\n        error_code = 1007\n        return APIException(msg, code, error_code)\n    else:\n        if not app.config['DEBUG']: # 判断是否在调试模式,不再,直接返回\n            return ServerError()\n        else:\n            raise e \n        return ServerError()\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n\n# 4.1 重写WTForms\n\n### 优化1\n\n之前的代码，修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题： 1.代码太啰嗦了，每个试图函数里，都需要这么写 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适\n\n为了解决上面的问题，我们需要重写wtforms\n\n## 思路\n  继承原有的wtforms,重写validate_for_api，**修改wtforms为抛出异常**\n定义一个自定义BaseForm，让其他的Form来继承\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\n\nclass BaseForm(Form):\n    def __init__(self, data):\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n```\n定义公共异常类\n\napp\\libs\\erro_code.py\n```\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n```\n\n以后我们的试图函数就可以这样编写\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\nfrom flask import request\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro   # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    form = ClientForm(data = data)  # data =   来接收json\n   \n    form.validate_for_api()\n# 替代switchcase-{Enum_name:handle_func}\n    promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n    promise[form.type.data]()\n\n    return 'sucess'  #  暂时返回sucess\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n    form = UserEmailForm(data=request.json)\n    if form.validate():\n        User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n\n### 优化2\n\n目前我们每次都需要从request中取出json信息再传入到Form对象中，优化的思路是，直接传入request，在BaseForm中取出json\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        data = request.json\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n```\n\n\n### 优化3\n\n每次都需要实例化Form对象，再调用validate_for_api()方法，我们可以让validate_for_api方法返回一个self对象，这样就只需要一行代码就可以解决了\napp\\validators\\base.py\n```\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        data = request.json\n        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n        return self\n```\n### 优化4\n\n操作成功也需要返回json结构，且结构应该和异常的时候一样，所以我们可以定义一个Success继承APIException\napp\\libs\\erro_code.py\n```\n\n# from werkzeug.exceptions import HTTPException\n# # 自定义异常类\n\n# class ClientTypeErro(HTTPException):\n#     code = 400\n#     description = (\n#         'client is invalid'\n#     )\n  \n\n# ↑ 不再继承HTTPException\n\n# ↓ 继承APIException\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n\n# 将成功返回也当作一中 APIException，来优化代码\nclass Success(APIException):\n    code = 201\n    msg = 'ok'\n    erro_code = 0\n    \nclass ServerError(APIException):\n    code = 500\n    msg  = 'sorry,we made a mistaake'\n    erro_code = 999\n```\n优化后视图函数\napp\\api\\v1\\client.py\n```\n\nfrom app.libs.redprint import Redprint\n\nfrom app.validators.forms import ClientForm,UserEmailForm\n# from flask import request  #  转移到Baseform中去了\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\n\n\n# from werkzeug.exceptions import HTTPException   #  异常\nfrom app.libs.erro_code import ClientTypeErro, ParameterException ,Success    # 导入自定义异常\n\napi = Redprint('client')  # 实例化一个Redprint\n\n@api.route('/register', methods = ['POST'] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405\ndef create_client():                         \n    # 表单 - 一般网页  json - 一般移动端\n    # 注册 登录\n    # 参数 校验  接收参数\n    # WTForms 验证表单\n\n#用来接收json类型的参数\n    # data = request.json\n# 关键字参数data是wtform中用来接收json参数的方法\n    # form = ClientForm(data = data)  # data =   来接收json\n    # form = ClientForm()   # 转移到 BaseForm 中\n\n    # form.validate_for_api()\n    form = ClientForm().validate_for_api()\n# 替代switchcase-{Enum_name:handle_func}\n    promise = {\n            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,\n            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型\n        }\n    promise[form.type.data]()\n\n    return Success()  #  将成功返回也当作一中 APIException\n#总 ↑\n\n#分 ↓\n\ndef __register_user_by_email():\n#     form = UserEmailForm()\n# # if form.validate():\n#     form.validate_for_api() \n    form = UserEmailForm().validate_for_api()   # 为什么有括号\n    User.register_by_email(form.nickname.data,\n                               form.account.data,\n                               form.secret.data)\n\n\n# def __register_user_by_MINA():\n#     pass\n```\n我们可以接受定义时候的复杂，但是不能够接受调用的时候复杂\n\n定义是一次性的，但是调用是多次的，如果调用太过于复杂，会使得我们的 代码太过于臃肿\n\n# 4.2 全局异常处理\n\n当系统抛出不是我们自己定义的APIException的时候，返回的结果仍然会变成一个HTML文本。\n\n我们在写代码的过程中，有那么类型的异常： 1.已知异常：我们可以预知的。如枚举转换的时候抛出的异常，这时候我们就会提前使用try-except进行处理。也可以抛出APIException 2.未知异常：完全没有预料到的。会由框架抛出的内置异常\n\n我们可以使用flask给我们提供的处理全局异常的装饰器，采用AOP的设计思想，捕捉所有类型的异常。\n```\nfrom app import create_app\nfrom app.libs.erro_code import ServerError\nfrom app.libs.erro import APIException\nfrom werkzeug.exceptions import HTTPException\n\napp = create_app()\n\n@app.errorhandler(Exception)  # python 基类的异常,因为我们要捕捉所有异常\ndef framework_error(e):\n    if isinstance(e, APIException):\n        return e\n    if isinstance(e, HTTPException):  # 转化成APIException\n        code = e.code\n        msg = e.description\n        error_code = 1007\n        return APIException(msg, code, error_code)\n    else:\n        if not app.config['DEBUG']: # 判断是否在调试模式,不再,直接返回\n            return ServerError()\n        else:\n            raise e \n        return ServerError()\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n","slug":"flask-api/Flask构建可扩展的RESTful-API-4--理解WTForms并灵活改造她","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxu001btssab02jf45j","content":"<h1 id=\"4-1-重写WTForms\"><a href=\"#4-1-重写WTForms\" class=\"headerlink\" title=\"4.1 重写WTForms\"></a>4.1 重写WTForms</h1><h3 id=\"优化1\"><a href=\"#优化1\" class=\"headerlink\" title=\"优化1\"></a>优化1</h3><p>之前的代码，修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题： 1.代码太啰嗦了，每个试图函数里，都需要这么写 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适</p>\n<p>为了解决上面的问题，我们需要重写wtforms</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>  继承原有的wtforms,重写validate_for_api，<strong>修改wtforms为抛出异常</strong><br>定义一个自定义BaseForm，让其他的Form来继承<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br></pre></td></tr></table></figure></p>\n<p>定义公共异常类</p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br></pre></td></tr></table></figure></p>\n<p>以后我们的试图函数就可以这样编写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro   # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\">   </span><br><span class=\"line\">    form.validate_for_api()</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    promise[form.type.data]()</span><br><span class=\"line\"></span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化2\"><a href=\"#优化2\" class=\"headerlink\" title=\"优化2\"></a>优化2</h3><p>目前我们每次都需要从request中取出json信息再传入到Form对象中，优化的思路是，直接传入request，在BaseForm中取出json<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        data = request.json</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化3\"><a href=\"#优化3\" class=\"headerlink\" title=\"优化3\"></a>优化3</h3><p>每次都需要实例化Form对象，再调用validate_for_api()方法，我们可以让validate_for_api方法返回一个self对象，这样就只需要一行代码就可以解决了<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        data = request.json</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化4\"><a href=\"#优化4\" class=\"headerlink\" title=\"优化4\"></a>优化4</h3><p>操作成功也需要返回json结构，且结构应该和异常的时候一样，所以我们可以定义一个Success继承APIException<br>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"># # 自定义异常类</span><br><span class=\"line\"></span><br><span class=\"line\"># class ClientTypeErro(HTTPException):</span><br><span class=\"line\">#     code = 400</span><br><span class=\"line\">#     description = (</span><br><span class=\"line\">#         &apos;client is invalid&apos;</span><br><span class=\"line\">#     )</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"># ↑ 不再继承HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\"># ↓ 继承APIException</span><br><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 将成功返回也当作一中 APIException，来优化代码</span><br><span class=\"line\">class Success(APIException):</span><br><span class=\"line\">    code = 201</span><br><span class=\"line\">    msg = &apos;ok&apos;</span><br><span class=\"line\">    erro_code = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">class ServerError(APIException):</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg  = &apos;sorry,we made a mistaake&apos;</span><br><span class=\"line\">    erro_code = 999</span><br></pre></td></tr></table></figure></p>\n<p>优化后视图函数<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\"># from flask import request  #  转移到Baseform中去了</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro, ParameterException ,Success    # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    # data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    # form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\">    # form = ClientForm()   # 转移到 BaseForm 中</span><br><span class=\"line\"></span><br><span class=\"line\">    # form.validate_for_api()</span><br><span class=\"line\">    form = ClientForm().validate_for_api()</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    promise[form.type.data]()</span><br><span class=\"line\"></span><br><span class=\"line\">    return Success()  #  将成功返回也当作一中 APIException</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">#     form = UserEmailForm()</span><br><span class=\"line\"># # if form.validate():</span><br><span class=\"line\">#     form.validate_for_api() </span><br><span class=\"line\">    form = UserEmailForm().validate_for_api()   # 为什么有括号</span><br><span class=\"line\">    User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>我们可以接受定义时候的复杂，但是不能够接受调用的时候复杂</p>\n<p>定义是一次性的，但是调用是多次的，如果调用太过于复杂，会使得我们的 代码太过于臃肿</p>\n<h1 id=\"4-2-全局异常处理\"><a href=\"#4-2-全局异常处理\" class=\"headerlink\" title=\"4.2 全局异常处理\"></a>4.2 全局异常处理</h1><p>当系统抛出不是我们自己定义的APIException的时候，返回的结果仍然会变成一个HTML文本。</p>\n<p>我们在写代码的过程中，有那么类型的异常： 1.已知异常：我们可以预知的。如枚举转换的时候抛出的异常，这时候我们就会提前使用try-except进行处理。也可以抛出APIException 2.未知异常：完全没有预料到的。会由框架抛出的内置异常</p>\n<p>我们可以使用flask给我们提供的处理全局异常的装饰器，采用AOP的设计思想，捕捉所有类型的异常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\">from app.libs.erro_code import ServerError</span><br><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\"></span><br><span class=\"line\">@app.errorhandler(Exception)  # python 基类的异常,因为我们要捕捉所有异常</span><br><span class=\"line\">def framework_error(e):</span><br><span class=\"line\">    if isinstance(e, APIException):</span><br><span class=\"line\">        return e</span><br><span class=\"line\">    if isinstance(e, HTTPException):  # 转化成APIException</span><br><span class=\"line\">        code = e.code</span><br><span class=\"line\">        msg = e.description</span><br><span class=\"line\">        error_code = 1007</span><br><span class=\"line\">        return APIException(msg, code, error_code)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        if not app.config[&apos;DEBUG&apos;]: # 判断是否在调试模式,不再,直接返回</span><br><span class=\"line\">            return ServerError()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise e </span><br><span class=\"line\">        return ServerError()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(debug=True)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"4-1-重写WTForms\"><a href=\"#4-1-重写WTForms\" class=\"headerlink\" title=\"4.1 重写WTForms\"></a>4.1 重写WTForms</h1><h3 id=\"优化1\"><a href=\"#优化1\" class=\"headerlink\" title=\"优化1\"></a>优化1</h3><p>之前的代码，修改完成之后，已经修复了之前的缺陷，但是这样爆出了两个问题： 1.代码太啰嗦了，每个试图函数里，都需要这么写 2.ClientTypeError只是代表客户端类型异常，其他的参数校验不通过也抛出这个异常的话不合适</p>\n<p>为了解决上面的问题，我们需要重写wtforms</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>  继承原有的wtforms,重写validate_for_api，<strong>修改wtforms为抛出异常</strong><br>定义一个自定义BaseForm，让其他的Form来继承<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    def __init__(self, data):</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br></pre></td></tr></table></figure></p>\n<p>定义公共异常类</p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br></pre></td></tr></table></figure></p>\n<p>以后我们的试图函数就可以这样编写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro   # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\">   </span><br><span class=\"line\">    form.validate_for_api()</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    promise[form.type.data]()</span><br><span class=\"line\"></span><br><span class=\"line\">    return &apos;sucess&apos;  #  暂时返回sucess</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">    form = UserEmailForm(data=request.json)</span><br><span class=\"line\">    if form.validate():</span><br><span class=\"line\">        User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化2\"><a href=\"#优化2\" class=\"headerlink\" title=\"优化2\"></a>优化2</h3><p>目前我们每次都需要从request中取出json信息再传入到Form对象中，优化的思路是，直接传入request，在BaseForm中取出json<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        data = request.json</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化3\"><a href=\"#优化3\" class=\"headerlink\" title=\"优化3\"></a>优化3</h3><p>每次都需要实例化Form对象，再调用validate_for_api()方法，我们可以让validate_for_api方法返回一个self对象，这样就只需要一行代码就可以解决了<br>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        data = request.json</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优化4\"><a href=\"#优化4\" class=\"headerlink\" title=\"优化4\"></a>优化4</h3><p>操作成功也需要返回json结构，且结构应该和异常的时候一样，所以我们可以定义一个Success继承APIException<br>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"># # 自定义异常类</span><br><span class=\"line\"></span><br><span class=\"line\"># class ClientTypeErro(HTTPException):</span><br><span class=\"line\">#     code = 400</span><br><span class=\"line\">#     description = (</span><br><span class=\"line\">#         &apos;client is invalid&apos;</span><br><span class=\"line\">#     )</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"># ↑ 不再继承HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\"># ↓ 继承APIException</span><br><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 将成功返回也当作一中 APIException，来优化代码</span><br><span class=\"line\">class Success(APIException):</span><br><span class=\"line\">    code = 201</span><br><span class=\"line\">    msg = &apos;ok&apos;</span><br><span class=\"line\">    erro_code = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">class ServerError(APIException):</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg  = &apos;sorry,we made a mistaake&apos;</span><br><span class=\"line\">    erro_code = 999</span><br></pre></td></tr></table></figure></p>\n<p>优化后视图函数<br>app\\api\\v1\\client.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from app.validators.forms import ClientForm,UserEmailForm</span><br><span class=\"line\"># from flask import request  #  转移到Baseform中去了</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># from werkzeug.exceptions import HTTPException   #  异常</span><br><span class=\"line\">from app.libs.erro_code import ClientTypeErro, ParameterException ,Success    # 导入自定义异常</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;client&apos;)  # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/register&apos;, methods = [&apos;POST&apos;] )  # 路由注册  # 因为这里把POST打成PSOT，导致不能使用POST访问，状态码405</span><br><span class=\"line\">def create_client():                         </span><br><span class=\"line\">    # 表单 - 一般网页  json - 一般移动端</span><br><span class=\"line\">    # 注册 登录</span><br><span class=\"line\">    # 参数 校验  接收参数</span><br><span class=\"line\">    # WTForms 验证表单</span><br><span class=\"line\"></span><br><span class=\"line\">#用来接收json类型的参数</span><br><span class=\"line\">    # data = request.json</span><br><span class=\"line\"># 关键字参数data是wtform中用来接收json参数的方法</span><br><span class=\"line\">    # form = ClientForm(data = data)  # data =   来接收json</span><br><span class=\"line\">    # form = ClientForm()   # 转移到 BaseForm 中</span><br><span class=\"line\"></span><br><span class=\"line\">    # form.validate_for_api()</span><br><span class=\"line\">    form = ClientForm().validate_for_api()</span><br><span class=\"line\"># 替代switchcase-&#123;Enum_name:handle_func&#125;</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">            ClientTypeEnum.USER_EMAIL: __register_user_by_email#,</span><br><span class=\"line\">            # ClientTypeEnum.USER_MINA: __register_user_by_MINA   # 可在此处构建多种枚举类型</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    promise[form.type.data]()</span><br><span class=\"line\"></span><br><span class=\"line\">    return Success()  #  将成功返回也当作一中 APIException</span><br><span class=\"line\">#总 ↑</span><br><span class=\"line\"></span><br><span class=\"line\">#分 ↓</span><br><span class=\"line\"></span><br><span class=\"line\">def __register_user_by_email():</span><br><span class=\"line\">#     form = UserEmailForm()</span><br><span class=\"line\"># # if form.validate():</span><br><span class=\"line\">#     form.validate_for_api() </span><br><span class=\"line\">    form = UserEmailForm().validate_for_api()   # 为什么有括号</span><br><span class=\"line\">    User.register_by_email(form.nickname.data,</span><br><span class=\"line\">                               form.account.data,</span><br><span class=\"line\">                               form.secret.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># def __register_user_by_MINA():</span><br><span class=\"line\">#     pass</span><br></pre></td></tr></table></figure></p>\n<p>我们可以接受定义时候的复杂，但是不能够接受调用的时候复杂</p>\n<p>定义是一次性的，但是调用是多次的，如果调用太过于复杂，会使得我们的 代码太过于臃肿</p>\n<h1 id=\"4-2-全局异常处理\"><a href=\"#4-2-全局异常处理\" class=\"headerlink\" title=\"4.2 全局异常处理\"></a>4.2 全局异常处理</h1><p>当系统抛出不是我们自己定义的APIException的时候，返回的结果仍然会变成一个HTML文本。</p>\n<p>我们在写代码的过程中，有那么类型的异常： 1.已知异常：我们可以预知的。如枚举转换的时候抛出的异常，这时候我们就会提前使用try-except进行处理。也可以抛出APIException 2.未知异常：完全没有预料到的。会由框架抛出的内置异常</p>\n<p>我们可以使用flask给我们提供的处理全局异常的装饰器，采用AOP的设计思想，捕捉所有类型的异常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\">from app.libs.erro_code import ServerError</span><br><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\">from werkzeug.exceptions import HTTPException</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\"></span><br><span class=\"line\">@app.errorhandler(Exception)  # python 基类的异常,因为我们要捕捉所有异常</span><br><span class=\"line\">def framework_error(e):</span><br><span class=\"line\">    if isinstance(e, APIException):</span><br><span class=\"line\">        return e</span><br><span class=\"line\">    if isinstance(e, HTTPException):  # 转化成APIException</span><br><span class=\"line\">        code = e.code</span><br><span class=\"line\">        msg = e.description</span><br><span class=\"line\">        error_code = 1007</span><br><span class=\"line\">        return APIException(msg, code, error_code)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        if not app.config[&apos;DEBUG&apos;]: # 判断是否在调试模式,不再,直接返回</span><br><span class=\"line\">            return ServerError()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise e </span><br><span class=\"line\">        return ServerError()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(debug=True)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户","date":"2018-12-18T10:36:16.000Z","_content":"\n# 5.1 Token\n\n### 1.Token概述\n\n以下是网站登录和使用API登录的区别\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-16de41d674064a75?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n与网站登录不同的是，网站登录将登录信息写入cookie存储在浏览器，而API只负责生成token发送给客户端，而客户端怎么存储有自己决定。\n\n*   Token具有有效期\n*   Token可以标示用户身份，如存储用户id\n\n### 2.获取Token令牌\n\n密码校验--app.models/user.py\n\n```\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom app.libs.erro_code import NotFound, AuthFailed\nfrom app.models.base import Base , db #, MixinJSONSerializer\nimport datetime\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n\n    @staticmethod\n    def register_by_email(nickname, account, secret):\n        with db.auto_commit():\n            user = User()\n            user.nickname = nickname\n            user.email = account\n            user.password = secret\n            db.session.add(user)\n\n    @staticmethod\n    def verify(email, password):\n        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户\n        if not user:\n            raise NotFound(msg = 'user not found...')\n        if not user.check_password(password):  # 检验密码\n            raise AuthFailed()   #抛出异常\n        return {'uid': user.id}  #成功，返回uid\n\n    def check_password(self, raw):   # 密码检验\n        if not self._password:\n            return False\n        return check_password_hash(self._password, raw)\n```\n返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\napp\\api\\v1\\token.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom flask import current_app\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\nfrom app.validators.forms import ClientForm\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n\nfrom flask import jsonify\n\n\napi = Redprint('token') # 实例化一个Redprint\n\n@api.route('', methods=['POST'])  # 路由注册\n# 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\ndef get_token():\n    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分\n    promise = {\n        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify\n        # ClientTypeEnum.USER_MINA: __register_user_by_MINA \n    }\n    # 拿到用户信息\n    identity = promise[form.type.data](\n        form.account.data,\n        form.secret.data\n    )\n\n    # 调用函数生成token\n    expiration = current_app.config['TOKEN_EXPIRATION']  #过期时间\n    token = generator_auth_token(identity['uid'],\n                                form.type.data,\n                                None,\n                                expiration=expiration)\n    t = {\n            'token': token.decode('utf-8')  # 因为是byte\n        }\n    return jsonify(t), 201  # 返回 json 字典\n\ndef generator_auth_token(uid, ac_type, scope=None,expiration=7200):\n    \"\"\"生成令牌  ，拿到uid,client类型，权限作用域，过期时间\"\"\"\n    s = Serializer(current_app.config['SECRET_KEY'],expires_in=expiration)  # expires_in 生成令牌的有效期\n    return s.dumps({\n                    'uid': uid,\n                    'type': ac_type.value\n                })  # 将想写入的信息以字典形式写入令牌\n```\napp.setting.py\n\n```\n\nTOKEN_EXPIRATION = 30 * 24 * 3600\n\n```\napp\\libs\\erro_code.py\n```\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n\n# 将成功返回也当作一中 APIException，来优化代码\nclass Success(APIException):\n    code = 201\n    msg = 'ok'\n    erro_code = 0\n\nclass ServerError(APIException):\n    code = 500\n    msg  = 'sorry,we made a mistaake'\n    erro_code = 999\n\nclass NotFound(APIException):\n    code = 404\n    msg = 'the resource are not found O__O...'\n    error_code = 1001\n\n\nclass AuthFailed(APIException):\n    code = 401\n    error_code = 1005\n    msg = 'authorization failed'\n\n\nclass Forbidden(APIException):\n    code = 403\n    error_code = 1004\n    msg = 'forbidden, not in scope'\n```\n注册到Blueprint\napp\\api\\v1\\__init__.py\n\n```\n\nfrom flask import Blueprint\nfrom app.api.v1 import user, book ,client ,token\n\n #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀'/book\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__) \n\n    user.api.register(bp_v1)  # , url_prefix='/uesr')\n    book.api.register(bp_v1)  # ,url_prefix='/book')\n    client.api.register(bp_v1)\n    token.api.register(bp_v1)\n    return bp_v1\n```\n\n### 3.Token的用处\n\n![成功拿到token](https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们不可能让任何一个用户都来访问我们获取用户资料的接口，必须对这个加以控制，也就是说只有确定了身份的用户可以访问我们的接口。\n\n如何对这个接口做保护呢？\n\n当用户访问问的接口的时候，我们需要获取他传来的token并进行解析验证，只有token是合法的且没有过期，我们才允许访问。\n\n由于每个需要验证token的试图函数都需要上面的业务逻辑，所以我们可以编写一个装饰器，以面向切面的方式统一处理，编写一个函数验证token，如果验证通过，我们就继续执行试图函数的方法，如果不通过，我们就返回一个自定义异常。\n\napp.libs/token_auth.py\n\n```\nfrom flask_httpauth import HTTPBasicAuth\n\n\nauth = HTTPBasicAuth()\n\n@auth.verify_password\ndef verify_password(account, password):\n    pass\n    \n\n```\napp/api/v1/user.py\n```\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('',methods = ['GET'])\n@auth.login_required\ndef get_user():\n    return 'get_user'\n```\n\n# 5.2 HTTPBasicAuth\n\n### 1.HTTPBasicAuth基本原理\n\n除了自定义发送账号和密码之外，HTTP这种协议本身就有多种规范，来允许我们来传递账号和密码。其中一种就是HTTPBasic\n\nHTTPBasic：需要在HTTP请求的头部设置一个固定的键值对key=Authorization,value=basic base64(account:psd)\n![](https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 2.以BasicAuth方式来发送token\n\n我们可以将token作为上面所说的账号account，而密码psd传递空值\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-3cd26baf973aba35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n# 5.3 Token的发送与验证\n\n### 1.验证token\n\napp\\libs\\token_auth.py\n```\n# 编写一个验证token的装饰器\n\nfrom flask_httpauth import HTTPBasicAuth\n\nfrom flask import current_app, g\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\\n          SignatureExpired\n\nfrom collections import namedtuple\n\nfrom app.libs.erro_code import AuthFailed\n\nauth = HTTPBasicAuth()\n\nUser = namedtuple('User', ['uid', 'ac_type', 'scope'])\n\n# @auth.verify_password\n# def verify_password(account, password):\n\n#   # 需要在HTTP请求的头部设置一个固定的键值对\n#   # key=Authorization,value=basic base64(account:psd)\n#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#     return True\n\n@auth.verify_password\ndef verify_password(token, password):\n    user_info =  verify_auth_token(token) # token 赋值给 user_info\n    if not user_info:\n        return False\n    else:\n        g.user = user_info  # g 变量 ,代理模式\n        return True\n\n\ndef verify_auth_token(token):\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(token)   # 解密 token\n    # token不合法抛出的异常\n    except BadSignature:\n        raise AuthFailed(msg='token is valid', erro_code=1002)\n    # token过期抛出的异常\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n\n    uid = data['uid']\n    ac_type = data['type']   # 生成令牌的时候写入了 uid ac_type\n\n    return User(uid, ac_type, '')   # 定义对象式 接口返回回去 ,scope 先返回为空字符串\n```\n### 2.视图函数的编写\napp\\api\\v1\\user.py\n```\n\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\nfrom app.models.user import User\nfrom app.models.base import db\nfrom flask import jsonify\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('/<int:uid>', methods = ['GET'])  # 获取到用户的uid\n@auth.login_required\ndef get_user(uid):   # 接收 uid\n    user = User.query.get_or_404 (uid) # 获取到用户，用get_or_404简化判断用户是否存在\n                                # 因为get_or_404 抛出的不是APIException,所以要重写\n                                # query 属性下的方法 \n    r = {\n        'nickname':user.nickname,\n        'email':user.email,\n        'password':user.password\n    }         #  追求更好的写法\n\n```\n### 3.重写后的get_or_404,抛出自定义异常\napp\\models\\base.py\n```\nfrom datetime import datetime\n\nfrom flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery\nfrom sqlalchemy import Column, Integer, SmallInteger\nfrom contextlib import contextmanager\n\n\nclass SQLAlchemy(_SQLAlchemy):\n    @contextmanager\n    def auto_commit(self):\n        try:\n            yield\n            self.session.commit()\n        except Exception as e:\n            db.session.rollback()\n            raise e\n\nfrom app.libs.erro_code import NotFound\nclass Query(BaseQuery):\n    def filter_by(self, **kwargs):\n        if 'status' not in kwargs.keys():\n            kwargs['status'] = 1\n        return super(Query, self).filter_by(**kwargs)\n\n    #  仿照源码改写get_or_404，覆盖原来的 get_or_404]\n\n    def get_or_404(self, ident):\n        \"\"\"Like :meth:`get` but aborts with 404 if not found instead of returning ``None``.\"\"\"\n\n        rv = self.get(ident)\n        if rv is None:\n            raise NotFound()\n        return rv\n\n    def first_or_404(self):\n\n        rv = self.first()\n        if rv is None:\n            raise NotFound()\n        return rv\n\n\ndb = SQLAlchemy(query_class=Query)\n\n\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column(Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    @property\n    def create_datetime(self):\n        if self.create_time:\n            return datetime.fromtimestamp(self.create_time)\n        else:\n            return None\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n\n    def delete(self):\n        self.status = 0\n\n```\n### 4.获取令牌信息\n```\n@api.route('/secret', methods=['POST'])\ndef get_token_info():\n\"\"\"获取令牌信息\"\"\"\n    form = TokenForm().validate_for_api()\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(form.token.data, return_header=True)\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', error_code=1003)\n    except BadSignature:\n        raise AuthFailed(msg='token is invalid', error_code=1002)\n\n    r = {\n        'scope': data[0]['scope'],\n        'create_at': data[1]['iat'],\n        'expire_in': data[1]['exp'],\n        'uid': data[0]['uid']\n    }\n    return jsonify(r)\n```\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n# 5.1 Token\n\n### 1.Token概述\n\n以下是网站登录和使用API登录的区别\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-16de41d674064a75?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n与网站登录不同的是，网站登录将登录信息写入cookie存储在浏览器，而API只负责生成token发送给客户端，而客户端怎么存储有自己决定。\n\n*   Token具有有效期\n*   Token可以标示用户身份，如存储用户id\n\n### 2.获取Token令牌\n\n密码校验--app.models/user.py\n\n```\nfrom sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom app.libs.erro_code import NotFound, AuthFailed\nfrom app.models.base import Base , db #, MixinJSONSerializer\nimport datetime\n\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(24), unique=True, nullable=False)\n    nickname = Column(String(24), unique=True)\n    auth = Column(SmallInteger, default=1)   # 做层级的标志\n    _password = Column('password', String(100))\n\n    def keys(self):\n        return ['id', 'email', 'nickname', 'auth']\n\n    @property               \n    def password(self):\n        return self._password   #  对密码的处理\n\n    @password.setter\n    def password(self, raw):\n        self._password = generate_password_hash(raw)    #  对密码的处理\n\n    @staticmethod\n    def register_by_email(nickname, account, secret):\n        with db.auto_commit():\n            user = User()\n            user.nickname = nickname\n            user.email = account\n            user.password = secret\n            db.session.add(user)\n\n    @staticmethod\n    def verify(email, password):\n        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户\n        if not user:\n            raise NotFound(msg = 'user not found...')\n        if not user.check_password(password):  # 检验密码\n            raise AuthFailed()   #抛出异常\n        return {'uid': user.id}  #成功，返回uid\n\n    def check_password(self, raw):   # 密码检验\n        if not self._password:\n            return False\n        return check_password_hash(self._password, raw)\n```\n返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\napp\\api\\v1\\token.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom flask import current_app\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\nfrom app.validators.forms import ClientForm\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n\nfrom flask import jsonify\n\n\napi = Redprint('token') # 实例化一个Redprint\n\n@api.route('', methods=['POST'])  # 路由注册\n# 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\ndef get_token():\n    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分\n    promise = {\n        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify\n        # ClientTypeEnum.USER_MINA: __register_user_by_MINA \n    }\n    # 拿到用户信息\n    identity = promise[form.type.data](\n        form.account.data,\n        form.secret.data\n    )\n\n    # 调用函数生成token\n    expiration = current_app.config['TOKEN_EXPIRATION']  #过期时间\n    token = generator_auth_token(identity['uid'],\n                                form.type.data,\n                                None,\n                                expiration=expiration)\n    t = {\n            'token': token.decode('utf-8')  # 因为是byte\n        }\n    return jsonify(t), 201  # 返回 json 字典\n\ndef generator_auth_token(uid, ac_type, scope=None,expiration=7200):\n    \"\"\"生成令牌  ，拿到uid,client类型，权限作用域，过期时间\"\"\"\n    s = Serializer(current_app.config['SECRET_KEY'],expires_in=expiration)  # expires_in 生成令牌的有效期\n    return s.dumps({\n                    'uid': uid,\n                    'type': ac_type.value\n                })  # 将想写入的信息以字典形式写入令牌\n```\napp.setting.py\n\n```\n\nTOKEN_EXPIRATION = 30 * 24 * 3600\n\n```\napp\\libs\\erro_code.py\n```\nfrom app.libs.erro import APIException\n\nclass ClientTypeErro(APIException):\n    code = 400\n    msg = 'client is invalid'\n    erro_code = 1006\n\n\nclass ParameterException(APIException):\n    code = 400\n    msg = 'invalid parameter'\n    erro_code = 1000\n\n# 将成功返回也当作一中 APIException，来优化代码\nclass Success(APIException):\n    code = 201\n    msg = 'ok'\n    erro_code = 0\n\nclass ServerError(APIException):\n    code = 500\n    msg  = 'sorry,we made a mistaake'\n    erro_code = 999\n\nclass NotFound(APIException):\n    code = 404\n    msg = 'the resource are not found O__O...'\n    error_code = 1001\n\n\nclass AuthFailed(APIException):\n    code = 401\n    error_code = 1005\n    msg = 'authorization failed'\n\n\nclass Forbidden(APIException):\n    code = 403\n    error_code = 1004\n    msg = 'forbidden, not in scope'\n```\n注册到Blueprint\napp\\api\\v1\\__init__.py\n\n```\n\nfrom flask import Blueprint\nfrom app.api.v1 import user, book ,client ,token\n\n #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀'/book\ndef create_blueprint_v1():\n    bp_v1 = Blueprint('v1', __name__) \n\n    user.api.register(bp_v1)  # , url_prefix='/uesr')\n    book.api.register(bp_v1)  # ,url_prefix='/book')\n    client.api.register(bp_v1)\n    token.api.register(bp_v1)\n    return bp_v1\n```\n\n### 3.Token的用处\n\n![成功拿到token](https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们不可能让任何一个用户都来访问我们获取用户资料的接口，必须对这个加以控制，也就是说只有确定了身份的用户可以访问我们的接口。\n\n如何对这个接口做保护呢？\n\n当用户访问问的接口的时候，我们需要获取他传来的token并进行解析验证，只有token是合法的且没有过期，我们才允许访问。\n\n由于每个需要验证token的试图函数都需要上面的业务逻辑，所以我们可以编写一个装饰器，以面向切面的方式统一处理，编写一个函数验证token，如果验证通过，我们就继续执行试图函数的方法，如果不通过，我们就返回一个自定义异常。\n\napp.libs/token_auth.py\n\n```\nfrom flask_httpauth import HTTPBasicAuth\n\n\nauth = HTTPBasicAuth()\n\n@auth.verify_password\ndef verify_password(account, password):\n    pass\n    \n\n```\napp/api/v1/user.py\n```\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('',methods = ['GET'])\n@auth.login_required\ndef get_user():\n    return 'get_user'\n```\n\n# 5.2 HTTPBasicAuth\n\n### 1.HTTPBasicAuth基本原理\n\n除了自定义发送账号和密码之外，HTTP这种协议本身就有多种规范，来允许我们来传递账号和密码。其中一种就是HTTPBasic\n\nHTTPBasic：需要在HTTP请求的头部设置一个固定的键值对key=Authorization,value=basic base64(account:psd)\n![](https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 2.以BasicAuth方式来发送token\n\n我们可以将token作为上面所说的账号account，而密码psd传递空值\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-3cd26baf973aba35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n# 5.3 Token的发送与验证\n\n### 1.验证token\n\napp\\libs\\token_auth.py\n```\n# 编写一个验证token的装饰器\n\nfrom flask_httpauth import HTTPBasicAuth\n\nfrom flask import current_app, g\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\\n          SignatureExpired\n\nfrom collections import namedtuple\n\nfrom app.libs.erro_code import AuthFailed\n\nauth = HTTPBasicAuth()\n\nUser = namedtuple('User', ['uid', 'ac_type', 'scope'])\n\n# @auth.verify_password\n# def verify_password(account, password):\n\n#   # 需要在HTTP请求的头部设置一个固定的键值对\n#   # key=Authorization,value=basic base64(account:psd)\n#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#     return True\n\n@auth.verify_password\ndef verify_password(token, password):\n    user_info =  verify_auth_token(token) # token 赋值给 user_info\n    if not user_info:\n        return False\n    else:\n        g.user = user_info  # g 变量 ,代理模式\n        return True\n\n\ndef verify_auth_token(token):\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(token)   # 解密 token\n    # token不合法抛出的异常\n    except BadSignature:\n        raise AuthFailed(msg='token is valid', erro_code=1002)\n    # token过期抛出的异常\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n\n    uid = data['uid']\n    ac_type = data['type']   # 生成令牌的时候写入了 uid ac_type\n\n    return User(uid, ac_type, '')   # 定义对象式 接口返回回去 ,scope 先返回为空字符串\n```\n### 2.视图函数的编写\napp\\api\\v1\\user.py\n```\n\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\nfrom app.models.user import User\nfrom app.models.base import db\nfrom flask import jsonify\n\napi = Redprint('user')\n#@api.route('/get')  URL中不应该包含动词\n@api.route('/<int:uid>', methods = ['GET'])  # 获取到用户的uid\n@auth.login_required\ndef get_user(uid):   # 接收 uid\n    user = User.query.get_or_404 (uid) # 获取到用户，用get_or_404简化判断用户是否存在\n                                # 因为get_or_404 抛出的不是APIException,所以要重写\n                                # query 属性下的方法 \n    r = {\n        'nickname':user.nickname,\n        'email':user.email,\n        'password':user.password\n    }         #  追求更好的写法\n\n```\n### 3.重写后的get_or_404,抛出自定义异常\napp\\models\\base.py\n```\nfrom datetime import datetime\n\nfrom flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery\nfrom sqlalchemy import Column, Integer, SmallInteger\nfrom contextlib import contextmanager\n\n\nclass SQLAlchemy(_SQLAlchemy):\n    @contextmanager\n    def auto_commit(self):\n        try:\n            yield\n            self.session.commit()\n        except Exception as e:\n            db.session.rollback()\n            raise e\n\nfrom app.libs.erro_code import NotFound\nclass Query(BaseQuery):\n    def filter_by(self, **kwargs):\n        if 'status' not in kwargs.keys():\n            kwargs['status'] = 1\n        return super(Query, self).filter_by(**kwargs)\n\n    #  仿照源码改写get_or_404，覆盖原来的 get_or_404]\n\n    def get_or_404(self, ident):\n        \"\"\"Like :meth:`get` but aborts with 404 if not found instead of returning ``None``.\"\"\"\n\n        rv = self.get(ident)\n        if rv is None:\n            raise NotFound()\n        return rv\n\n    def first_or_404(self):\n\n        rv = self.first()\n        if rv is None:\n            raise NotFound()\n        return rv\n\n\ndb = SQLAlchemy(query_class=Query)\n\n\nclass Base(db.Model):\n    __abstract__ = True\n    create_time = Column(Integer)\n    status = Column(SmallInteger, default=1)\n\n    def __init__(self):\n        self.create_time = int(datetime.now().timestamp())\n\n    @property\n    def create_datetime(self):\n        if self.create_time:\n            return datetime.fromtimestamp(self.create_time)\n        else:\n            return None\n\n    def set_attrs(self, attrs_dict):\n        for key, value in attrs_dict.items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n\n    def delete(self):\n        self.status = 0\n\n```\n### 4.获取令牌信息\n```\n@api.route('/secret', methods=['POST'])\ndef get_token_info():\n\"\"\"获取令牌信息\"\"\"\n    form = TokenForm().validate_for_api()\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(form.token.data, return_header=True)\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', error_code=1003)\n    except BadSignature:\n        raise AuthFailed(msg='token is invalid', error_code=1002)\n\n    r = {\n        'scope': data[0]['scope'],\n        'create_at': data[1]['iat'],\n        'expire_in': data[1]['exp'],\n        'uid': data[0]['uid']\n    }\n    return jsonify(r)\n```\n","slug":"flask-api/Flask构建可扩展的RESTful-API-5--Token与HTTPBasic验证-——-用令牌来管理用户","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxv001etssaz0l8lop8","content":"<h1 id=\"5-1-Token\"><a href=\"#5-1-Token\" class=\"headerlink\" title=\"5.1 Token\"></a>5.1 Token</h1><h3 id=\"1-Token概述\"><a href=\"#1-Token概述\" class=\"headerlink\" title=\"1.Token概述\"></a>1.Token概述</h3><p>以下是网站登录和使用API登录的区别</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-16de41d674064a75?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>与网站登录不同的是，网站登录将登录信息写入cookie存储在浏览器，而API只负责生成token发送给客户端，而客户端怎么存储有自己决定。</p>\n<ul>\n<li>Token具有有效期</li>\n<li>Token可以标示用户身份，如存储用户id</li>\n</ul>\n<h3 id=\"2-获取Token令牌\"><a href=\"#2-获取Token令牌\" class=\"headerlink\" title=\"2.获取Token令牌\"></a>2.获取Token令牌</h3><p>密码校验–app.models/user.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base , db #, MixinJSONSerializer</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def register_by_email(nickname, account, secret):</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            user = User()</span><br><span class=\"line\">            user.nickname = nickname</span><br><span class=\"line\">            user.email = account</span><br><span class=\"line\">            user.password = secret</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def verify(email, password):</span><br><span class=\"line\">        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户</span><br><span class=\"line\">        if not user:</span><br><span class=\"line\">            raise NotFound(msg = &apos;user not found...&apos;)</span><br><span class=\"line\">        if not user.check_password(password):  # 检验密码</span><br><span class=\"line\">            raise AuthFailed()   #抛出异常</span><br><span class=\"line\">        return &#123;&apos;uid&apos;: user.id&#125;  #成功，返回uid</span><br><span class=\"line\"></span><br><span class=\"line\">    def check_password(self, raw):   # 密码检验</span><br><span class=\"line\">        if not self._password:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        return check_password_hash(self._password, raw)</span><br></pre></td></tr></table></figure>\n<p>返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏<br>app\\api\\v1\\token.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;token&apos;) # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods=[&apos;POST&apos;])  # 路由注册</span><br><span class=\"line\"># 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏</span><br><span class=\"line\">def get_token():</span><br><span class=\"line\">    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify</span><br><span class=\"line\">        # ClientTypeEnum.USER_MINA: __register_user_by_MINA </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 拿到用户信息</span><br><span class=\"line\">    identity = promise[form.type.data](</span><br><span class=\"line\">        form.account.data,</span><br><span class=\"line\">        form.secret.data</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    # 调用函数生成token</span><br><span class=\"line\">    expiration = current_app.config[&apos;TOKEN_EXPIRATION&apos;]  #过期时间</span><br><span class=\"line\">    token = generator_auth_token(identity[&apos;uid&apos;],</span><br><span class=\"line\">                                form.type.data,</span><br><span class=\"line\">                                None,</span><br><span class=\"line\">                                expiration=expiration)</span><br><span class=\"line\">    t = &#123;</span><br><span class=\"line\">            &apos;token&apos;: token.decode(&apos;utf-8&apos;)  # 因为是byte</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return jsonify(t), 201  # 返回 json 字典</span><br><span class=\"line\"></span><br><span class=\"line\">def generator_auth_token(uid, ac_type, scope=None,expiration=7200):</span><br><span class=\"line\">    &quot;&quot;&quot;生成令牌  ，拿到uid,client类型，权限作用域，过期时间&quot;&quot;&quot;</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;],expires_in=expiration)  # expires_in 生成令牌的有效期</span><br><span class=\"line\">    return s.dumps(&#123;</span><br><span class=\"line\">                    &apos;uid&apos;: uid,</span><br><span class=\"line\">                    &apos;type&apos;: ac_type.value</span><br><span class=\"line\">                &#125;)  # 将想写入的信息以字典形式写入令牌</span><br></pre></td></tr></table></figure></p>\n<p>app.setting.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">TOKEN_EXPIRATION = 30 * 24 * 3600</span><br></pre></td></tr></table></figure>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 将成功返回也当作一中 APIException，来优化代码</span><br><span class=\"line\">class Success(APIException):</span><br><span class=\"line\">    code = 201</span><br><span class=\"line\">    msg = &apos;ok&apos;</span><br><span class=\"line\">    erro_code = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class ServerError(APIException):</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg  = &apos;sorry,we made a mistaake&apos;</span><br><span class=\"line\">    erro_code = 999</span><br><span class=\"line\"></span><br><span class=\"line\">class NotFound(APIException):</span><br><span class=\"line\">    code = 404</span><br><span class=\"line\">    msg = &apos;the resource are not found O__O...&apos;</span><br><span class=\"line\">    error_code = 1001</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AuthFailed(APIException):</span><br><span class=\"line\">    code = 401</span><br><span class=\"line\">    error_code = 1005</span><br><span class=\"line\">    msg = &apos;authorization failed&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Forbidden(APIException):</span><br><span class=\"line\">    code = 403</span><br><span class=\"line\">    error_code = 1004</span><br><span class=\"line\">    msg = &apos;forbidden, not in scope&apos;</span><br></pre></td></tr></table></figure></p>\n<p>注册到Blueprint<br>app\\api\\v1__init__.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import user, book ,client ,token</span><br><span class=\"line\"></span><br><span class=\"line\"> #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀&apos;/book</span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__) </span><br><span class=\"line\"></span><br><span class=\"line\">    user.api.register(bp_v1)  # , url_prefix=&apos;/uesr&apos;)</span><br><span class=\"line\">    book.api.register(bp_v1)  # ,url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">    client.api.register(bp_v1)</span><br><span class=\"line\">    token.api.register(bp_v1)</span><br><span class=\"line\">    return bp_v1</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Token的用处\"><a href=\"#3-Token的用处\" class=\"headerlink\" title=\"3.Token的用处\"></a>3.Token的用处</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"成功拿到token\"></p>\n<p>我们不可能让任何一个用户都来访问我们获取用户资料的接口，必须对这个加以控制，也就是说只有确定了身份的用户可以访问我们的接口。</p>\n<p>如何对这个接口做保护呢？</p>\n<p>当用户访问问的接口的时候，我们需要获取他传来的token并进行解析验证，只有token是合法的且没有过期，我们才允许访问。</p>\n<p>由于每个需要验证token的试图函数都需要上面的业务逻辑，所以我们可以编写一个装饰器，以面向切面的方式统一处理，编写一个函数验证token，如果验证通过，我们就继续执行试图函数的方法，如果不通过，我们就返回一个自定义异常。</p>\n<p>app.libs/token_auth.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(account, password):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>app/api/v1/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;GET&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-2-HTTPBasicAuth\"><a href=\"#5-2-HTTPBasicAuth\" class=\"headerlink\" title=\"5.2 HTTPBasicAuth\"></a>5.2 HTTPBasicAuth</h1><h3 id=\"1-HTTPBasicAuth基本原理\"><a href=\"#1-HTTPBasicAuth基本原理\" class=\"headerlink\" title=\"1.HTTPBasicAuth基本原理\"></a>1.HTTPBasicAuth基本原理</h3><p>除了自定义发送账号和密码之外，HTTP这种协议本身就有多种规范，来允许我们来传递账号和密码。其中一种就是HTTPBasic</p>\n<p>HTTPBasic：需要在HTTP请求的头部设置一个固定的键值对key=Authorization,value=basic base64(account:psd)<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"2-以BasicAuth方式来发送token\"><a href=\"#2-以BasicAuth方式来发送token\" class=\"headerlink\" title=\"2.以BasicAuth方式来发送token\"></a>2.以BasicAuth方式来发送token</h3><p>我们可以将token作为上面所说的账号account，而密码psd传递空值</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3cd26baf973aba35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h1 id=\"5-3-Token的发送与验证\"><a href=\"#5-3-Token的发送与验证\" class=\"headerlink\" title=\"5.3 Token的发送与验证\"></a>5.3 Token的发送与验证</h1><h3 id=\"1-验证token\"><a href=\"#1-验证token\" class=\"headerlink\" title=\"1.验证token\"></a>1.验证token</h3><p>app\\libs\\token_auth.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编写一个验证token的装饰器</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app, g</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\</span><br><span class=\"line\">          SignatureExpired</span><br><span class=\"line\"></span><br><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import AuthFailed</span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">User = namedtuple(&apos;User&apos;, [&apos;uid&apos;, &apos;ac_type&apos;, &apos;scope&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\"># @auth.verify_password</span><br><span class=\"line\"># def verify_password(account, password):</span><br><span class=\"line\"></span><br><span class=\"line\">#   # 需要在HTTP请求的头部设置一个固定的键值对</span><br><span class=\"line\">#   # key=Authorization,value=basic base64(account:psd)</span><br><span class=\"line\">#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#     return True</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(token, password):</span><br><span class=\"line\">    user_info =  verify_auth_token(token) # token 赋值给 user_info</span><br><span class=\"line\">    if not user_info:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g.user = user_info  # g 变量 ,代理模式</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def verify_auth_token(token):</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(token)   # 解密 token</span><br><span class=\"line\">    # token不合法抛出的异常</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is valid&apos;, erro_code=1002)</span><br><span class=\"line\">    # token过期抛出的异常</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\"></span><br><span class=\"line\">    uid = data[&apos;uid&apos;]</span><br><span class=\"line\">    ac_type = data[&apos;type&apos;]   # 生成令牌的时候写入了 uid ac_type</span><br><span class=\"line\"></span><br><span class=\"line\">    return User(uid, ac_type, &apos;&apos;)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-视图函数的编写\"><a href=\"#2-视图函数的编写\" class=\"headerlink\" title=\"2.视图函数的编写\"></a>2.视图函数的编写</h3><p>app\\api\\v1\\user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods = [&apos;GET&apos;])  # 获取到用户的uid</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user(uid):   # 接收 uid</span><br><span class=\"line\">    user = User.query.get_or_404 (uid) # 获取到用户，用get_or_404简化判断用户是否存在</span><br><span class=\"line\">                                # 因为get_or_404 抛出的不是APIException,所以要重写</span><br><span class=\"line\">                                # query 属性下的方法 </span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;nickname&apos;:user.nickname,</span><br><span class=\"line\">        &apos;email&apos;:user.email,</span><br><span class=\"line\">        &apos;password&apos;:user.password</span><br><span class=\"line\">    &#125;         #  追求更好的写法</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-重写后的get-or-404-抛出自定义异常\"><a href=\"#3-重写后的get-or-404-抛出自定义异常\" class=\"headerlink\" title=\"3.重写后的get_or_404,抛出自定义异常\"></a>3.重写后的get_or_404,抛出自定义异常</h3><p>app\\models\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery</span><br><span class=\"line\">from sqlalchemy import Column, Integer, SmallInteger</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SQLAlchemy(_SQLAlchemy):</span><br><span class=\"line\">    @contextmanager</span><br><span class=\"line\">    def auto_commit(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            yield</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            db.session.rollback()</span><br><span class=\"line\">            raise e</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import NotFound</span><br><span class=\"line\">class Query(BaseQuery):</span><br><span class=\"line\">    def filter_by(self, **kwargs):</span><br><span class=\"line\">        if &apos;status&apos; not in kwargs.keys():</span><br><span class=\"line\">            kwargs[&apos;status&apos;] = 1</span><br><span class=\"line\">        return super(Query, self).filter_by(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    #  仿照源码改写get_or_404，覆盖原来的 get_or_404]</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_or_404(self, ident):</span><br><span class=\"line\">        &quot;&quot;&quot;Like :meth:`get` but aborts with 404 if not found instead of returning ``None``.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = self.get(ident)</span><br><span class=\"line\">        if rv is None:</span><br><span class=\"line\">            raise NotFound()</span><br><span class=\"line\">        return rv</span><br><span class=\"line\"></span><br><span class=\"line\">    def first_or_404(self):</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = self.first()</span><br><span class=\"line\">        if rv is None:</span><br><span class=\"line\">            raise NotFound()</span><br><span class=\"line\">        return rv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(query_class=Query)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def create_datetime(self):</span><br><span class=\"line\">        if self.create_time:</span><br><span class=\"line\">            return datetime.fromtimestamp(self.create_time)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete(self):</span><br><span class=\"line\">        self.status = 0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-获取令牌信息\"><a href=\"#4-获取令牌信息\" class=\"headerlink\" title=\"4.获取令牌信息\"></a>4.获取令牌信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/secret&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">def get_token_info():</span><br><span class=\"line\">&quot;&quot;&quot;获取令牌信息&quot;&quot;&quot;</span><br><span class=\"line\">    form = TokenForm().validate_for_api()</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(form.token.data, return_header=True)</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, error_code=1003)</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is invalid&apos;, error_code=1002)</span><br><span class=\"line\"></span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;scope&apos;: data[0][&apos;scope&apos;],</span><br><span class=\"line\">        &apos;create_at&apos;: data[1][&apos;iat&apos;],</span><br><span class=\"line\">        &apos;expire_in&apos;: data[1][&apos;exp&apos;],</span><br><span class=\"line\">        &apos;uid&apos;: data[0][&apos;uid&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return jsonify(r)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"5-1-Token\"><a href=\"#5-1-Token\" class=\"headerlink\" title=\"5.1 Token\"></a>5.1 Token</h1><h3 id=\"1-Token概述\"><a href=\"#1-Token概述\" class=\"headerlink\" title=\"1.Token概述\"></a>1.Token概述</h3><p>以下是网站登录和使用API登录的区别</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-16de41d674064a75?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>与网站登录不同的是，网站登录将登录信息写入cookie存储在浏览器，而API只负责生成token发送给客户端，而客户端怎么存储有自己决定。</p>\n<ul>\n<li>Token具有有效期</li>\n<li>Token可以标示用户身份，如存储用户id</li>\n</ul>\n<h3 id=\"2-获取Token令牌\"><a href=\"#2-获取Token令牌\" class=\"headerlink\" title=\"2.获取Token令牌\"></a>2.获取Token令牌</h3><p>密码校验–app.models/user.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import inspect, Column, Integer, String, SmallInteger, orm</span><br><span class=\"line\">from werkzeug.security import generate_password_hash, check_password_hash</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import NotFound, AuthFailed</span><br><span class=\"line\">from app.models.base import Base , db #, MixinJSONSerializer</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(24), unique=True, nullable=False)</span><br><span class=\"line\">    nickname = Column(String(24), unique=True)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)   # 做层级的标志</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(100))</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;, &apos;auth&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    @property               </span><br><span class=\"line\">    def password(self):</span><br><span class=\"line\">        return self._password   #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @password.setter</span><br><span class=\"line\">    def password(self, raw):</span><br><span class=\"line\">        self._password = generate_password_hash(raw)    #  对密码的处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def register_by_email(nickname, account, secret):</span><br><span class=\"line\">        with db.auto_commit():</span><br><span class=\"line\">            user = User()</span><br><span class=\"line\">            user.nickname = nickname</span><br><span class=\"line\">            user.email = account</span><br><span class=\"line\">            user.password = secret</span><br><span class=\"line\">            db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def verify(email, password):</span><br><span class=\"line\">        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户</span><br><span class=\"line\">        if not user:</span><br><span class=\"line\">            raise NotFound(msg = &apos;user not found...&apos;)</span><br><span class=\"line\">        if not user.check_password(password):  # 检验密码</span><br><span class=\"line\">            raise AuthFailed()   #抛出异常</span><br><span class=\"line\">        return &#123;&apos;uid&apos;: user.id&#125;  #成功，返回uid</span><br><span class=\"line\"></span><br><span class=\"line\">    def check_password(self, raw):   # 密码检验</span><br><span class=\"line\">        if not self._password:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        return check_password_hash(self._password, raw)</span><br></pre></td></tr></table></figure>\n<p>返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏<br>app\\api\\v1\\token.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;token&apos;) # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods=[&apos;POST&apos;])  # 路由注册</span><br><span class=\"line\"># 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏</span><br><span class=\"line\">def get_token():</span><br><span class=\"line\">    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify</span><br><span class=\"line\">        # ClientTypeEnum.USER_MINA: __register_user_by_MINA </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 拿到用户信息</span><br><span class=\"line\">    identity = promise[form.type.data](</span><br><span class=\"line\">        form.account.data,</span><br><span class=\"line\">        form.secret.data</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    # 调用函数生成token</span><br><span class=\"line\">    expiration = current_app.config[&apos;TOKEN_EXPIRATION&apos;]  #过期时间</span><br><span class=\"line\">    token = generator_auth_token(identity[&apos;uid&apos;],</span><br><span class=\"line\">                                form.type.data,</span><br><span class=\"line\">                                None,</span><br><span class=\"line\">                                expiration=expiration)</span><br><span class=\"line\">    t = &#123;</span><br><span class=\"line\">            &apos;token&apos;: token.decode(&apos;utf-8&apos;)  # 因为是byte</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return jsonify(t), 201  # 返回 json 字典</span><br><span class=\"line\"></span><br><span class=\"line\">def generator_auth_token(uid, ac_type, scope=None,expiration=7200):</span><br><span class=\"line\">    &quot;&quot;&quot;生成令牌  ，拿到uid,client类型，权限作用域，过期时间&quot;&quot;&quot;</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;],expires_in=expiration)  # expires_in 生成令牌的有效期</span><br><span class=\"line\">    return s.dumps(&#123;</span><br><span class=\"line\">                    &apos;uid&apos;: uid,</span><br><span class=\"line\">                    &apos;type&apos;: ac_type.value</span><br><span class=\"line\">                &#125;)  # 将想写入的信息以字典形式写入令牌</span><br></pre></td></tr></table></figure></p>\n<p>app.setting.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">TOKEN_EXPIRATION = 30 * 24 * 3600</span><br></pre></td></tr></table></figure>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.erro import APIException</span><br><span class=\"line\"></span><br><span class=\"line\">class ClientTypeErro(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;client is invalid&apos;</span><br><span class=\"line\">    erro_code = 1006</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class ParameterException(APIException):</span><br><span class=\"line\">    code = 400</span><br><span class=\"line\">    msg = &apos;invalid parameter&apos;</span><br><span class=\"line\">    erro_code = 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 将成功返回也当作一中 APIException，来优化代码</span><br><span class=\"line\">class Success(APIException):</span><br><span class=\"line\">    code = 201</span><br><span class=\"line\">    msg = &apos;ok&apos;</span><br><span class=\"line\">    erro_code = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class ServerError(APIException):</span><br><span class=\"line\">    code = 500</span><br><span class=\"line\">    msg  = &apos;sorry,we made a mistaake&apos;</span><br><span class=\"line\">    erro_code = 999</span><br><span class=\"line\"></span><br><span class=\"line\">class NotFound(APIException):</span><br><span class=\"line\">    code = 404</span><br><span class=\"line\">    msg = &apos;the resource are not found O__O...&apos;</span><br><span class=\"line\">    error_code = 1001</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AuthFailed(APIException):</span><br><span class=\"line\">    code = 401</span><br><span class=\"line\">    error_code = 1005</span><br><span class=\"line\">    msg = &apos;authorization failed&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Forbidden(APIException):</span><br><span class=\"line\">    code = 403</span><br><span class=\"line\">    error_code = 1004</span><br><span class=\"line\">    msg = &apos;forbidden, not in scope&apos;</span><br></pre></td></tr></table></figure></p>\n<p>注册到Blueprint<br>app\\api\\v1__init__.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from flask import Blueprint</span><br><span class=\"line\">from app.api.v1 import user, book ,client ,token</span><br><span class=\"line\"></span><br><span class=\"line\"> #  创建一个Bluerint,把Redprint注册到Blueprint上，并传入Redprint一个前缀&apos;/book</span><br><span class=\"line\">def create_blueprint_v1():</span><br><span class=\"line\">    bp_v1 = Blueprint(&apos;v1&apos;, __name__) </span><br><span class=\"line\"></span><br><span class=\"line\">    user.api.register(bp_v1)  # , url_prefix=&apos;/uesr&apos;)</span><br><span class=\"line\">    book.api.register(bp_v1)  # ,url_prefix=&apos;/book&apos;)</span><br><span class=\"line\">    client.api.register(bp_v1)</span><br><span class=\"line\">    token.api.register(bp_v1)</span><br><span class=\"line\">    return bp_v1</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Token的用处\"><a href=\"#3-Token的用处\" class=\"headerlink\" title=\"3.Token的用处\"></a>3.Token的用处</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"成功拿到token\"></p>\n<p>我们不可能让任何一个用户都来访问我们获取用户资料的接口，必须对这个加以控制，也就是说只有确定了身份的用户可以访问我们的接口。</p>\n<p>如何对这个接口做保护呢？</p>\n<p>当用户访问问的接口的时候，我们需要获取他传来的token并进行解析验证，只有token是合法的且没有过期，我们才允许访问。</p>\n<p>由于每个需要验证token的试图函数都需要上面的业务逻辑，所以我们可以编写一个装饰器，以面向切面的方式统一处理，编写一个函数验证token，如果验证通过，我们就继续执行试图函数的方法，如果不通过，我们就返回一个自定义异常。</p>\n<p>app.libs/token_auth.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(account, password):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>app/api/v1/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;&apos;,methods = [&apos;GET&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    return &apos;get_user&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-2-HTTPBasicAuth\"><a href=\"#5-2-HTTPBasicAuth\" class=\"headerlink\" title=\"5.2 HTTPBasicAuth\"></a>5.2 HTTPBasicAuth</h1><h3 id=\"1-HTTPBasicAuth基本原理\"><a href=\"#1-HTTPBasicAuth基本原理\" class=\"headerlink\" title=\"1.HTTPBasicAuth基本原理\"></a>1.HTTPBasicAuth基本原理</h3><p>除了自定义发送账号和密码之外，HTTP这种协议本身就有多种规范，来允许我们来传递账号和密码。其中一种就是HTTPBasic</p>\n<p>HTTPBasic：需要在HTTP请求的头部设置一个固定的键值对key=Authorization,value=basic base64(account:psd)<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h3 id=\"2-以BasicAuth方式来发送token\"><a href=\"#2-以BasicAuth方式来发送token\" class=\"headerlink\" title=\"2.以BasicAuth方式来发送token\"></a>2.以BasicAuth方式来发送token</h3><p>我们可以将token作为上面所说的账号account，而密码psd传递空值</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-3cd26baf973aba35?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h1 id=\"5-3-Token的发送与验证\"><a href=\"#5-3-Token的发送与验证\" class=\"headerlink\" title=\"5.3 Token的发送与验证\"></a>5.3 Token的发送与验证</h1><h3 id=\"1-验证token\"><a href=\"#1-验证token\" class=\"headerlink\" title=\"1.验证token\"></a>1.验证token</h3><p>app\\libs\\token_auth.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编写一个验证token的装饰器</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app, g</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\</span><br><span class=\"line\">          SignatureExpired</span><br><span class=\"line\"></span><br><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import AuthFailed</span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">User = namedtuple(&apos;User&apos;, [&apos;uid&apos;, &apos;ac_type&apos;, &apos;scope&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\"># @auth.verify_password</span><br><span class=\"line\"># def verify_password(account, password):</span><br><span class=\"line\"></span><br><span class=\"line\">#   # 需要在HTTP请求的头部设置一个固定的键值对</span><br><span class=\"line\">#   # key=Authorization,value=basic base64(account:psd)</span><br><span class=\"line\">#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#     return True</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(token, password):</span><br><span class=\"line\">    user_info =  verify_auth_token(token) # token 赋值给 user_info</span><br><span class=\"line\">    if not user_info:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g.user = user_info  # g 变量 ,代理模式</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def verify_auth_token(token):</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(token)   # 解密 token</span><br><span class=\"line\">    # token不合法抛出的异常</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is valid&apos;, erro_code=1002)</span><br><span class=\"line\">    # token过期抛出的异常</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\"></span><br><span class=\"line\">    uid = data[&apos;uid&apos;]</span><br><span class=\"line\">    ac_type = data[&apos;type&apos;]   # 生成令牌的时候写入了 uid ac_type</span><br><span class=\"line\"></span><br><span class=\"line\">    return User(uid, ac_type, &apos;&apos;)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-视图函数的编写\"><a href=\"#2-视图函数的编写\" class=\"headerlink\" title=\"2.视图函数的编写\"></a>2.视图函数的编写</h3><p>app\\api\\v1\\user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;user&apos;)</span><br><span class=\"line\">#@api.route(&apos;/get&apos;)  URL中不应该包含动词</span><br><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods = [&apos;GET&apos;])  # 获取到用户的uid</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user(uid):   # 接收 uid</span><br><span class=\"line\">    user = User.query.get_or_404 (uid) # 获取到用户，用get_or_404简化判断用户是否存在</span><br><span class=\"line\">                                # 因为get_or_404 抛出的不是APIException,所以要重写</span><br><span class=\"line\">                                # query 属性下的方法 </span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;nickname&apos;:user.nickname,</span><br><span class=\"line\">        &apos;email&apos;:user.email,</span><br><span class=\"line\">        &apos;password&apos;:user.password</span><br><span class=\"line\">    &#125;         #  追求更好的写法</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-重写后的get-or-404-抛出自定义异常\"><a href=\"#3-重写后的get-or-404-抛出自定义异常\" class=\"headerlink\" title=\"3.重写后的get_or_404,抛出自定义异常\"></a>3.重写后的get_or_404,抛出自定义异常</h3><p>app\\models\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from datetime import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery</span><br><span class=\"line\">from sqlalchemy import Column, Integer, SmallInteger</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SQLAlchemy(_SQLAlchemy):</span><br><span class=\"line\">    @contextmanager</span><br><span class=\"line\">    def auto_commit(self):</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            yield</span><br><span class=\"line\">            self.session.commit()</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            db.session.rollback()</span><br><span class=\"line\">            raise e</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import NotFound</span><br><span class=\"line\">class Query(BaseQuery):</span><br><span class=\"line\">    def filter_by(self, **kwargs):</span><br><span class=\"line\">        if &apos;status&apos; not in kwargs.keys():</span><br><span class=\"line\">            kwargs[&apos;status&apos;] = 1</span><br><span class=\"line\">        return super(Query, self).filter_by(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    #  仿照源码改写get_or_404，覆盖原来的 get_or_404]</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_or_404(self, ident):</span><br><span class=\"line\">        &quot;&quot;&quot;Like :meth:`get` but aborts with 404 if not found instead of returning ``None``.&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = self.get(ident)</span><br><span class=\"line\">        if rv is None:</span><br><span class=\"line\">            raise NotFound()</span><br><span class=\"line\">        return rv</span><br><span class=\"line\"></span><br><span class=\"line\">    def first_or_404(self):</span><br><span class=\"line\"></span><br><span class=\"line\">        rv = self.first()</span><br><span class=\"line\">        if rv is None:</span><br><span class=\"line\">            raise NotFound()</span><br><span class=\"line\">        return rv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(query_class=Query)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Base(db.Model):</span><br><span class=\"line\">    __abstract__ = True</span><br><span class=\"line\">    create_time = Column(Integer)</span><br><span class=\"line\">    status = Column(SmallInteger, default=1)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.create_time = int(datetime.now().timestamp())</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def create_datetime(self):</span><br><span class=\"line\">        if self.create_time:</span><br><span class=\"line\">            return datetime.fromtimestamp(self.create_time)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return None</span><br><span class=\"line\"></span><br><span class=\"line\">    def set_attrs(self, attrs_dict):</span><br><span class=\"line\">        for key, value in attrs_dict.items():</span><br><span class=\"line\">            if hasattr(self, key) and key != &apos;id&apos;:</span><br><span class=\"line\">                setattr(self, key, value)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete(self):</span><br><span class=\"line\">        self.status = 0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-获取令牌信息\"><a href=\"#4-获取令牌信息\" class=\"headerlink\" title=\"4.获取令牌信息\"></a>4.获取令牌信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/secret&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">def get_token_info():</span><br><span class=\"line\">&quot;&quot;&quot;获取令牌信息&quot;&quot;&quot;</span><br><span class=\"line\">    form = TokenForm().validate_for_api()</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(form.token.data, return_header=True)</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, error_code=1003)</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is invalid&apos;, error_code=1002)</span><br><span class=\"line\"></span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;scope&apos;: data[0][&apos;scope&apos;],</span><br><span class=\"line\">        &apos;create_at&apos;: data[1][&apos;iat&apos;],</span><br><span class=\"line\">        &apos;expire_in&apos;: data[1][&apos;exp&apos;],</span><br><span class=\"line\">        &apos;uid&apos;: data[0][&apos;uid&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return jsonify(r)</span><br></pre></td></tr></table></figure>\n"},{"title":"Flask构建可扩展的RESTful-API-6--模型对象的序列化","date":"2018-12-18T10:36:16.000Z","_content":"\n# 6\\. 模型对象的序列化\n\n### 1.理解序列化时的default函数\n\n我们最想做的一件事情，就是在视图函数中，读取出模型之后，还要把他的属性读出来，转换成一个字典。我们想直接`jsonfiy(user)`\n\n现在jsonfiy并不能直接序列化对象，所以我们的目标就是必须想办法让jsonfiy直接序列化对象。\n\njsonfiy在序列化对象的时候，如果不知道如何序列化当前传进来的参数，就会去调用JSONEncoder类的default函数。\n```\ndef default(self, o):\n\"\"\"Implement this method in a subclass such that it returns a\nserializable object for ``o``, or calls the base implementation (to\nraise a :exc:`TypeError`).\n\nFor example, to support arbitrary iterators, you could implement\ndefault like this::\n\ndef default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    return JSONEncoder.default(self, o)\n\"\"\"\n    if isinstance(o, datetime):\n        return http_date(o.utctimetuple())\n    if isinstance(o, date):\n        return http_date(o.timetuple())\n    if isinstance(o, uuid.UUID):\n        return str(o)\n    if hasattr(o, '__html__'):\n        return text_type(o.__html__())\n    return _json.JSONEncoder.default(self, o)\n```\n目前的default是没有提供对对象的序列化的，所以我们这里最关键的就是要重写default方法。在重写的过程中实现对对象的序列化就可以了\n\n### 2.不完美的对象转字典\n\n我们首先要做到的就是让Flask可以调用到我们自己定义的default函数。要做到这一点，我们需要继承JSONEncoder，然后重写defualt方法，然后继承Flask，在子类里，替换掉Flask原有的json_encoder对象。然后，是实例化Flask核心对象的时候，使用我们的子类进行实例化\napp\\__init__.py\n```\nfrom flask import Flask as _Flask\n\nfrom flask.json import JSONEncoder as _JSONEncoder\n\nclass JSONEncoder(_JSONEncoder):\n\tdef default(self,o):\n\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典\n    return dict(o)\n\nclass Flask(_Flask):  # 定义自己的Flask核心对象，继承原来的Flask核心对象\n\tjson_encoder = JSONEncoder # 替换原本的JSONEncoder\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef registe_plugin(app):  # 插件的注册\n    from app.models.base import db\n    db.init_app(app)\n\n    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all\n        db.create_all()  # 来创建所有数据库，数据表\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    registe_plugin(app)  # 最后调用 registe_plugin\n\n    return app\n```\n上面的写法o.__dict__只能转换实例变量，不能将类变量也转换成字典。\n\n### 3.深入理解dict机制\n\n在Python中创建一个dict有很多种方式:\n\n1.  直接定义一个字典\n```\nr = {\n'name': 'gwf'\n}\n```\n1.  使用dict函数\n```\nr = dict(name='gwf')\n```\n\n1.  将一个对象传入dict函数 值得研究的是这第三种方法，当将一个对象传入dict函数的时候，他会去调用keys函数\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-b9ec37217f768ff1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\nkeys 方法的目的就是为了拿到字典里所有的键，至于说这些键有那么，完全有我们自己来定义。keys 返回的必须是一个元组或者列表来声明要序列化的键。\n\n而dict会以中括号的形式来拿到对应的值，如o[\"name\"]，但是默认是不能这么访问的，我们需要编写__getitem__函数\n```\nr = {'name': 'weilai'}  # 直接定义一个字典\n\nr = dict(name= 'weilai') # 使用dict函数\n\nclass Wei():\n    name = 'weilai'\n    age = 'age'\n\n    def __init__(self):\n        self.gender = 'male'\n\n    def keys(self):   \n        return ('name','age','gender')  #  取到 key ,  做到自定义key \n        # # return ('name',)  # 一个元素的元组\n        # return ['name']  # return 序列类型的都可以\n\n    def __getitem__(self,item):  \n        return getattr(self,item)   # 取到 key对应的value\n\no = Wei()\nprint(dict(o))   # {'name': 'weilai', 'age': 'age', 'gender': 'male'}\n ```\n这样我们就成功的讲一个对象转化成了字典的形式，并且无论类变量和实例变量，都可以转化，更加灵活的是，我们可以自己控制，那些变量需要转化，哪些变量不需要转化\n\n### 4.序列化SQLALChemy模型\n\n有了之前的基础，我们就知道怎么序列化user对象了，我们只需要在User类中定义keys和getitem方法，然后在default函数中使用dict()函数即可\n```\nclass JSONEncoder(_JSONEncoder):\n    def default(self, o):\n        return dict(o)\n\nclass Flask(_Flask):\n    json_encoder = JSONEncoder\n```\nmodels/user.py\n```\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(50), unique=True, nullable=False)\n    auth = Column(SmallInteger, default=1)\n    nickname = Column(String(24), nullable=False)\n    _password = Column('password', String(128))\n\n# SQLALChemy的实例化是不会调用__init__函数的，要想让他调用就需要\n# @orm.reconstructor这个装饰器\n    @orm.reconstructor\n    def __init__(self):\n        self.fields = ['id', 'email', 'nickname']\n\n    def keys(self):\n\treturn self.fields\n\n\t# 支持隐藏字段\n    def hide(self, *keys):\n\t[self.fields.remove(key) for key in keys]\n\t# 支持添加字段\n    def append(self, *keys):\n\t[self.fields.append(key) for key in keys]\n```\n### 5.完善序列化\n\n优化1：每一个模型如果需要序列化，都要有getitem方法，可以放到基类里面去\n\n优化2：default函数，是递归调用的，只要遇到不能序列化的对象，就会调用default函数。所以如果有其他类型，我们需要修改完善我们的default函数\n\n优化3：我们的default函数需要增加容错性\n```\nclass JSONEncoder(_JSONEncoder):\n\tdef default(self,o):\n\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典\n\t\t# return dict(o) # 考虑不全面.o得有上次定义的那两种方法才不会报错\n\n\t\tif hasattr(o, 'keys') and hasattr(o, '__getitem__'):\n\t\t\treturn dict(o)   # 得有这两种方法 才会return dict(o)\n\t\tif isinstance(o, date):  # 如果是 时间类型\n\t\t\treturn o.strftime('%Y-%m-%d')\n\t\traise ServerError()\n```\n优化4：之前编写的新的Flask类，JsonEncoder类都是不会轻易改变的，放到app.py中。\n一些其他方法，却是 经常改变的，应该把他们放在init文件中\n\n### 6.ViewModel对于API有意义吗？\n\nviewmodel对于API来说，特别是内部开发来说非常有意义\n\nviewmodel是为了我们的视图层，提供个性化的试图模型。SQLALChemy返回的模型是原始模型（格式和数据库中存储的一模一样）。 而前端可能需要我们返回一个意义更加明确的字段。\n\n原始模型是根据数据库来生成的，他的格式是一定的，但是我们在视图层中或者API的返回中，要根据业务去具体的个性化一个个属性的 格式，这就必然存在一个由原始模型向视图模型转换的过程，这个过程最适合的是在View_model中进行一个转换。\n\n我们在视图层写转换的代码，一来会污染视图层的代码，二来会难以复用 并且有的试图模型可能会比较复杂，设计到多个原始模型，这个代码必定会比较复杂，写在视图函数中就会非常不合适\n\n对于完全严格意义上的RESTFul，viewmodel的意义并不大，因为完全资源意义的RESTFul是不考虑业务逻辑的\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-6--模型对象的序列化.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-6--模型对象的序列化\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n# 6\\. 模型对象的序列化\n\n### 1.理解序列化时的default函数\n\n我们最想做的一件事情，就是在视图函数中，读取出模型之后，还要把他的属性读出来，转换成一个字典。我们想直接`jsonfiy(user)`\n\n现在jsonfiy并不能直接序列化对象，所以我们的目标就是必须想办法让jsonfiy直接序列化对象。\n\njsonfiy在序列化对象的时候，如果不知道如何序列化当前传进来的参数，就会去调用JSONEncoder类的default函数。\n```\ndef default(self, o):\n\"\"\"Implement this method in a subclass such that it returns a\nserializable object for ``o``, or calls the base implementation (to\nraise a :exc:`TypeError`).\n\nFor example, to support arbitrary iterators, you could implement\ndefault like this::\n\ndef default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    return JSONEncoder.default(self, o)\n\"\"\"\n    if isinstance(o, datetime):\n        return http_date(o.utctimetuple())\n    if isinstance(o, date):\n        return http_date(o.timetuple())\n    if isinstance(o, uuid.UUID):\n        return str(o)\n    if hasattr(o, '__html__'):\n        return text_type(o.__html__())\n    return _json.JSONEncoder.default(self, o)\n```\n目前的default是没有提供对对象的序列化的，所以我们这里最关键的就是要重写default方法。在重写的过程中实现对对象的序列化就可以了\n\n### 2.不完美的对象转字典\n\n我们首先要做到的就是让Flask可以调用到我们自己定义的default函数。要做到这一点，我们需要继承JSONEncoder，然后重写defualt方法，然后继承Flask，在子类里，替换掉Flask原有的json_encoder对象。然后，是实例化Flask核心对象的时候，使用我们的子类进行实例化\napp\\__init__.py\n```\nfrom flask import Flask as _Flask\n\nfrom flask.json import JSONEncoder as _JSONEncoder\n\nclass JSONEncoder(_JSONEncoder):\n\tdef default(self,o):\n\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典\n    return dict(o)\n\nclass Flask(_Flask):  # 定义自己的Flask核心对象，继承原来的Flask核心对象\n\tjson_encoder = JSONEncoder # 替换原本的JSONEncoder\n\n\n# 将Blueprint注册到flask核心对象上,并传入一个前缀'/v1'\ndef register_blueprints(app):\n    # from app.api.v1.user import user\n    # from app.api.v1.book import book\n    # app.register_blueprint(user)\n    # app.register_blueprint(book)\n    from app.api.v1 import create_blueprint_v1\n    app.register_blueprint(create_blueprint_v1(), url_prefix = '/v1')\n\ndef registe_plugin(app):  # 插件的注册\n    from app.models.base import db\n    db.init_app(app)\n\n    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all\n        db.create_all()  # 来创建所有数据库，数据表\n\ndef create_app():\n    app = Flask(__name__)   # 实例化flask核心对象\n    app.config.from_object('app.config.secure')  # 读取配置文件下的secure\n    app.config.from_object('app.config.setting') # 读取配置文件下的setting\n\n    register_blueprints(app)    # 注册蓝图到核心对象上\n    registe_plugin(app)  # 最后调用 registe_plugin\n\n    return app\n```\n上面的写法o.__dict__只能转换实例变量，不能将类变量也转换成字典。\n\n### 3.深入理解dict机制\n\n在Python中创建一个dict有很多种方式:\n\n1.  直接定义一个字典\n```\nr = {\n'name': 'gwf'\n}\n```\n1.  使用dict函数\n```\nr = dict(name='gwf')\n```\n\n1.  将一个对象传入dict函数 值得研究的是这第三种方法，当将一个对象传入dict函数的时候，他会去调用keys函数\n\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-b9ec37217f768ff1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\nkeys 方法的目的就是为了拿到字典里所有的键，至于说这些键有那么，完全有我们自己来定义。keys 返回的必须是一个元组或者列表来声明要序列化的键。\n\n而dict会以中括号的形式来拿到对应的值，如o[\"name\"]，但是默认是不能这么访问的，我们需要编写__getitem__函数\n```\nr = {'name': 'weilai'}  # 直接定义一个字典\n\nr = dict(name= 'weilai') # 使用dict函数\n\nclass Wei():\n    name = 'weilai'\n    age = 'age'\n\n    def __init__(self):\n        self.gender = 'male'\n\n    def keys(self):   \n        return ('name','age','gender')  #  取到 key ,  做到自定义key \n        # # return ('name',)  # 一个元素的元组\n        # return ['name']  # return 序列类型的都可以\n\n    def __getitem__(self,item):  \n        return getattr(self,item)   # 取到 key对应的value\n\no = Wei()\nprint(dict(o))   # {'name': 'weilai', 'age': 'age', 'gender': 'male'}\n ```\n这样我们就成功的讲一个对象转化成了字典的形式，并且无论类变量和实例变量，都可以转化，更加灵活的是，我们可以自己控制，那些变量需要转化，哪些变量不需要转化\n\n### 4.序列化SQLALChemy模型\n\n有了之前的基础，我们就知道怎么序列化user对象了，我们只需要在User类中定义keys和getitem方法，然后在default函数中使用dict()函数即可\n```\nclass JSONEncoder(_JSONEncoder):\n    def default(self, o):\n        return dict(o)\n\nclass Flask(_Flask):\n    json_encoder = JSONEncoder\n```\nmodels/user.py\n```\nclass User(Base):\n    id = Column(Integer, primary_key=True)\n    email = Column(String(50), unique=True, nullable=False)\n    auth = Column(SmallInteger, default=1)\n    nickname = Column(String(24), nullable=False)\n    _password = Column('password', String(128))\n\n# SQLALChemy的实例化是不会调用__init__函数的，要想让他调用就需要\n# @orm.reconstructor这个装饰器\n    @orm.reconstructor\n    def __init__(self):\n        self.fields = ['id', 'email', 'nickname']\n\n    def keys(self):\n\treturn self.fields\n\n\t# 支持隐藏字段\n    def hide(self, *keys):\n\t[self.fields.remove(key) for key in keys]\n\t# 支持添加字段\n    def append(self, *keys):\n\t[self.fields.append(key) for key in keys]\n```\n### 5.完善序列化\n\n优化1：每一个模型如果需要序列化，都要有getitem方法，可以放到基类里面去\n\n优化2：default函数，是递归调用的，只要遇到不能序列化的对象，就会调用default函数。所以如果有其他类型，我们需要修改完善我们的default函数\n\n优化3：我们的default函数需要增加容错性\n```\nclass JSONEncoder(_JSONEncoder):\n\tdef default(self,o):\n\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典\n\t\t# return dict(o) # 考虑不全面.o得有上次定义的那两种方法才不会报错\n\n\t\tif hasattr(o, 'keys') and hasattr(o, '__getitem__'):\n\t\t\treturn dict(o)   # 得有这两种方法 才会return dict(o)\n\t\tif isinstance(o, date):  # 如果是 时间类型\n\t\t\treturn o.strftime('%Y-%m-%d')\n\t\traise ServerError()\n```\n优化4：之前编写的新的Flask类，JsonEncoder类都是不会轻易改变的，放到app.py中。\n一些其他方法，却是 经常改变的，应该把他们放在init文件中\n\n### 6.ViewModel对于API有意义吗？\n\nviewmodel对于API来说，特别是内部开发来说非常有意义\n\nviewmodel是为了我们的视图层，提供个性化的试图模型。SQLALChemy返回的模型是原始模型（格式和数据库中存储的一模一样）。 而前端可能需要我们返回一个意义更加明确的字段。\n\n原始模型是根据数据库来生成的，他的格式是一定的，但是我们在视图层中或者API的返回中，要根据业务去具体的个性化一个个属性的 格式，这就必然存在一个由原始模型向视图模型转换的过程，这个过程最适合的是在View_model中进行一个转换。\n\n我们在视图层写转换的代码，一来会污染视图层的代码，二来会难以复用 并且有的试图模型可能会比较复杂，设计到多个原始模型，这个代码必定会比较复杂，写在视图函数中就会非常不合适\n\n对于完全严格意义上的RESTFul，viewmodel的意义并不大，因为完全资源意义的RESTFul是不考虑业务逻辑的\n","slug":"flask-api/Flask构建可扩展的RESTful-API-6--模型对象的序列化","published":1,"updated":"2020-04-01T09:23:43.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxw001ftssauy0ykovf","content":"<h1 id=\"6-模型对象的序列化\"><a href=\"#6-模型对象的序列化\" class=\"headerlink\" title=\"6. 模型对象的序列化\"></a>6. 模型对象的序列化</h1><h3 id=\"1-理解序列化时的default函数\"><a href=\"#1-理解序列化时的default函数\" class=\"headerlink\" title=\"1.理解序列化时的default函数\"></a>1.理解序列化时的default函数</h3><p>我们最想做的一件事情，就是在视图函数中，读取出模型之后，还要把他的属性读出来，转换成一个字典。我们想直接<code>jsonfiy(user)</code></p>\n<p>现在jsonfiy并不能直接序列化对象，所以我们的目标就是必须想办法让jsonfiy直接序列化对象。</p>\n<p>jsonfiy在序列化对象的时候，如果不知道如何序列化当前传进来的参数，就会去调用JSONEncoder类的default函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def default(self, o):</span><br><span class=\"line\">&quot;&quot;&quot;Implement this method in a subclass such that it returns a</span><br><span class=\"line\">serializable object for ``o``, or calls the base implementation (to</span><br><span class=\"line\">raise a :exc:`TypeError`).</span><br><span class=\"line\"></span><br><span class=\"line\">For example, to support arbitrary iterators, you could implement</span><br><span class=\"line\">default like this::</span><br><span class=\"line\"></span><br><span class=\"line\">def default(self, o):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        iterable = iter(o)</span><br><span class=\"line\">    except TypeError:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return list(iterable)</span><br><span class=\"line\">    return JSONEncoder.default(self, o)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">    if isinstance(o, datetime):</span><br><span class=\"line\">        return http_date(o.utctimetuple())</span><br><span class=\"line\">    if isinstance(o, date):</span><br><span class=\"line\">        return http_date(o.timetuple())</span><br><span class=\"line\">    if isinstance(o, uuid.UUID):</span><br><span class=\"line\">        return str(o)</span><br><span class=\"line\">    if hasattr(o, &apos;__html__&apos;):</span><br><span class=\"line\">        return text_type(o.__html__())</span><br><span class=\"line\">    return _json.JSONEncoder.default(self, o)</span><br></pre></td></tr></table></figure></p>\n<p>目前的default是没有提供对对象的序列化的，所以我们这里最关键的就是要重写default方法。在重写的过程中实现对对象的序列化就可以了</p>\n<h3 id=\"2-不完美的对象转字典\"><a href=\"#2-不完美的对象转字典\" class=\"headerlink\" title=\"2.不完美的对象转字典\"></a>2.不完美的对象转字典</h3><p>我们首先要做到的就是让Flask可以调用到我们自己定义的default函数。要做到这一点，我们需要继承JSONEncoder，然后重写defualt方法，然后继承Flask，在子类里，替换掉Flask原有的json_encoder对象。然后，是实例化Flask核心对象的时候，使用我们的子类进行实例化<br>app__init__.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask as _Flask</span><br><span class=\"line\"></span><br><span class=\"line\">from flask.json import JSONEncoder as _JSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">\tdef default(self,o):</span><br><span class=\"line\">\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典</span><br><span class=\"line\">    return dict(o)</span><br><span class=\"line\"></span><br><span class=\"line\">class Flask(_Flask):  # 定义自己的Flask核心对象，继承原来的Flask核心对象</span><br><span class=\"line\">\tjson_encoder = JSONEncoder # 替换原本的JSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def registe_plugin(app):  # 插件的注册</span><br><span class=\"line\">    from app.models.base import db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all</span><br><span class=\"line\">        db.create_all()  # 来创建所有数据库，数据表</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    registe_plugin(app)  # 最后调用 registe_plugin</span><br><span class=\"line\"></span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>上面的写法o.<strong>dict</strong>只能转换实例变量，不能将类变量也转换成字典。</p>\n<h3 id=\"3-深入理解dict机制\"><a href=\"#3-深入理解dict机制\" class=\"headerlink\" title=\"3.深入理解dict机制\"></a>3.深入理解dict机制</h3><p>在Python中创建一个dict有很多种方式:</p>\n<ol>\n<li><p>直接定义一个字典</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = &#123;</span><br><span class=\"line\">&apos;name&apos;: &apos;gwf&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用dict函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = dict(name=&apos;gwf&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个对象传入dict函数 值得研究的是这第三种方法，当将一个对象传入dict函数的时候，他会去调用keys函数</p>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-b9ec37217f768ff1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>keys 方法的目的就是为了拿到字典里所有的键，至于说这些键有那么，完全有我们自己来定义。keys 返回的必须是一个元组或者列表来声明要序列化的键。</p>\n<p>而dict会以中括号的形式来拿到对应的值，如o[“name”]，但是默认是不能这么访问的，我们需要编写<strong>getitem</strong>函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = &#123;&apos;name&apos;: &apos;weilai&apos;&#125;  # 直接定义一个字典</span><br><span class=\"line\"></span><br><span class=\"line\">r = dict(name= &apos;weilai&apos;) # 使用dict函数</span><br><span class=\"line\"></span><br><span class=\"line\">class Wei():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = &apos;age&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.gender = &apos;male&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):   </span><br><span class=\"line\">        return (&apos;name&apos;,&apos;age&apos;,&apos;gender&apos;)  #  取到 key ,  做到自定义key </span><br><span class=\"line\">        # # return (&apos;name&apos;,)  # 一个元素的元组</span><br><span class=\"line\">        # return [&apos;name&apos;]  # return 序列类型的都可以</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getitem__(self,item):  </span><br><span class=\"line\">        return getattr(self,item)   # 取到 key对应的value</span><br><span class=\"line\"></span><br><span class=\"line\">o = Wei()</span><br><span class=\"line\">print(dict(o))   # &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: &apos;age&apos;, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就成功的讲一个对象转化成了字典的形式，并且无论类变量和实例变量，都可以转化，更加灵活的是，我们可以自己控制，那些变量需要转化，哪些变量不需要转化</p>\n<h3 id=\"4-序列化SQLALChemy模型\"><a href=\"#4-序列化SQLALChemy模型\" class=\"headerlink\" title=\"4.序列化SQLALChemy模型\"></a>4.序列化SQLALChemy模型</h3><p>有了之前的基础，我们就知道怎么序列化user对象了，我们只需要在User类中定义keys和getitem方法，然后在default函数中使用dict()函数即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">    def default(self, o):</span><br><span class=\"line\">        return dict(o)</span><br><span class=\"line\"></span><br><span class=\"line\">class Flask(_Flask):</span><br><span class=\"line\">    json_encoder = JSONEncoder</span><br></pre></td></tr></table></figure></p>\n<p>models/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(50), unique=True, nullable=False)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)</span><br><span class=\"line\">    nickname = Column(String(24), nullable=False)</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(128))</span><br><span class=\"line\"></span><br><span class=\"line\"># SQLALChemy的实例化是不会调用__init__函数的，要想让他调用就需要</span><br><span class=\"line\"># @orm.reconstructor这个装饰器</span><br><span class=\"line\">    @orm.reconstructor</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">\treturn self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">\t# 支持隐藏字段</span><br><span class=\"line\">    def hide(self, *keys):</span><br><span class=\"line\">\t[self.fields.remove(key) for key in keys]</span><br><span class=\"line\">\t# 支持添加字段</span><br><span class=\"line\">    def append(self, *keys):</span><br><span class=\"line\">\t[self.fields.append(key) for key in keys]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-完善序列化\"><a href=\"#5-完善序列化\" class=\"headerlink\" title=\"5.完善序列化\"></a>5.完善序列化</h3><p>优化1：每一个模型如果需要序列化，都要有getitem方法，可以放到基类里面去</p>\n<p>优化2：default函数，是递归调用的，只要遇到不能序列化的对象，就会调用default函数。所以如果有其他类型，我们需要修改完善我们的default函数</p>\n<p>优化3：我们的default函数需要增加容错性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">\tdef default(self,o):</span><br><span class=\"line\">\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典</span><br><span class=\"line\">\t\t# return dict(o) # 考虑不全面.o得有上次定义的那两种方法才不会报错</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif hasattr(o, &apos;keys&apos;) and hasattr(o, &apos;__getitem__&apos;):</span><br><span class=\"line\">\t\t\treturn dict(o)   # 得有这两种方法 才会return dict(o)</span><br><span class=\"line\">\t\tif isinstance(o, date):  # 如果是 时间类型</span><br><span class=\"line\">\t\t\treturn o.strftime(&apos;%Y-%m-%d&apos;)</span><br><span class=\"line\">\t\traise ServerError()</span><br></pre></td></tr></table></figure></p>\n<p>优化4：之前编写的新的Flask类，JsonEncoder类都是不会轻易改变的，放到app.py中。<br>一些其他方法，却是 经常改变的，应该把他们放在init文件中</p>\n<h3 id=\"6-ViewModel对于API有意义吗？\"><a href=\"#6-ViewModel对于API有意义吗？\" class=\"headerlink\" title=\"6.ViewModel对于API有意义吗？\"></a>6.ViewModel对于API有意义吗？</h3><p>viewmodel对于API来说，特别是内部开发来说非常有意义</p>\n<p>viewmodel是为了我们的视图层，提供个性化的试图模型。SQLALChemy返回的模型是原始模型（格式和数据库中存储的一模一样）。 而前端可能需要我们返回一个意义更加明确的字段。</p>\n<p>原始模型是根据数据库来生成的，他的格式是一定的，但是我们在视图层中或者API的返回中，要根据业务去具体的个性化一个个属性的 格式，这就必然存在一个由原始模型向视图模型转换的过程，这个过程最适合的是在View_model中进行一个转换。</p>\n<p>我们在视图层写转换的代码，一来会污染视图层的代码，二来会难以复用 并且有的试图模型可能会比较复杂，设计到多个原始模型，这个代码必定会比较复杂，写在视图函数中就会非常不合适</p>\n<p>对于完全严格意义上的RESTFul，viewmodel的意义并不大，因为完全资源意义的RESTFul是不考虑业务逻辑的</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"6-模型对象的序列化\"><a href=\"#6-模型对象的序列化\" class=\"headerlink\" title=\"6. 模型对象的序列化\"></a>6. 模型对象的序列化</h1><h3 id=\"1-理解序列化时的default函数\"><a href=\"#1-理解序列化时的default函数\" class=\"headerlink\" title=\"1.理解序列化时的default函数\"></a>1.理解序列化时的default函数</h3><p>我们最想做的一件事情，就是在视图函数中，读取出模型之后，还要把他的属性读出来，转换成一个字典。我们想直接<code>jsonfiy(user)</code></p>\n<p>现在jsonfiy并不能直接序列化对象，所以我们的目标就是必须想办法让jsonfiy直接序列化对象。</p>\n<p>jsonfiy在序列化对象的时候，如果不知道如何序列化当前传进来的参数，就会去调用JSONEncoder类的default函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def default(self, o):</span><br><span class=\"line\">&quot;&quot;&quot;Implement this method in a subclass such that it returns a</span><br><span class=\"line\">serializable object for ``o``, or calls the base implementation (to</span><br><span class=\"line\">raise a :exc:`TypeError`).</span><br><span class=\"line\"></span><br><span class=\"line\">For example, to support arbitrary iterators, you could implement</span><br><span class=\"line\">default like this::</span><br><span class=\"line\"></span><br><span class=\"line\">def default(self, o):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        iterable = iter(o)</span><br><span class=\"line\">    except TypeError:</span><br><span class=\"line\">        pass</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return list(iterable)</span><br><span class=\"line\">    return JSONEncoder.default(self, o)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">    if isinstance(o, datetime):</span><br><span class=\"line\">        return http_date(o.utctimetuple())</span><br><span class=\"line\">    if isinstance(o, date):</span><br><span class=\"line\">        return http_date(o.timetuple())</span><br><span class=\"line\">    if isinstance(o, uuid.UUID):</span><br><span class=\"line\">        return str(o)</span><br><span class=\"line\">    if hasattr(o, &apos;__html__&apos;):</span><br><span class=\"line\">        return text_type(o.__html__())</span><br><span class=\"line\">    return _json.JSONEncoder.default(self, o)</span><br></pre></td></tr></table></figure></p>\n<p>目前的default是没有提供对对象的序列化的，所以我们这里最关键的就是要重写default方法。在重写的过程中实现对对象的序列化就可以了</p>\n<h3 id=\"2-不完美的对象转字典\"><a href=\"#2-不完美的对象转字典\" class=\"headerlink\" title=\"2.不完美的对象转字典\"></a>2.不完美的对象转字典</h3><p>我们首先要做到的就是让Flask可以调用到我们自己定义的default函数。要做到这一点，我们需要继承JSONEncoder，然后重写defualt方法，然后继承Flask，在子类里，替换掉Flask原有的json_encoder对象。然后，是实例化Flask核心对象的时候，使用我们的子类进行实例化<br>app__init__.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask as _Flask</span><br><span class=\"line\"></span><br><span class=\"line\">from flask.json import JSONEncoder as _JSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">\tdef default(self,o):</span><br><span class=\"line\">\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典</span><br><span class=\"line\">    return dict(o)</span><br><span class=\"line\"></span><br><span class=\"line\">class Flask(_Flask):  # 定义自己的Flask核心对象，继承原来的Flask核心对象</span><br><span class=\"line\">\tjson_encoder = JSONEncoder # 替换原本的JSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Blueprint注册到flask核心对象上,并传入一个前缀&apos;/v1&apos;</span><br><span class=\"line\">def register_blueprints(app):</span><br><span class=\"line\">    # from app.api.v1.user import user</span><br><span class=\"line\">    # from app.api.v1.book import book</span><br><span class=\"line\">    # app.register_blueprint(user)</span><br><span class=\"line\">    # app.register_blueprint(book)</span><br><span class=\"line\">    from app.api.v1 import create_blueprint_v1</span><br><span class=\"line\">    app.register_blueprint(create_blueprint_v1(), url_prefix = &apos;/v1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def registe_plugin(app):  # 插件的注册</span><br><span class=\"line\">    from app.models.base import db</span><br><span class=\"line\">    db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    with app.app_context():  # 上下文环境 把app推入到上下文栈中 才能使用create_all</span><br><span class=\"line\">        db.create_all()  # 来创建所有数据库，数据表</span><br><span class=\"line\"></span><br><span class=\"line\">def create_app():</span><br><span class=\"line\">    app = Flask(__name__)   # 实例化flask核心对象</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.secure&apos;)  # 读取配置文件下的secure</span><br><span class=\"line\">    app.config.from_object(&apos;app.config.setting&apos;) # 读取配置文件下的setting</span><br><span class=\"line\"></span><br><span class=\"line\">    register_blueprints(app)    # 注册蓝图到核心对象上</span><br><span class=\"line\">    registe_plugin(app)  # 最后调用 registe_plugin</span><br><span class=\"line\"></span><br><span class=\"line\">    return app</span><br></pre></td></tr></table></figure></p>\n<p>上面的写法o.<strong>dict</strong>只能转换实例变量，不能将类变量也转换成字典。</p>\n<h3 id=\"3-深入理解dict机制\"><a href=\"#3-深入理解dict机制\" class=\"headerlink\" title=\"3.深入理解dict机制\"></a>3.深入理解dict机制</h3><p>在Python中创建一个dict有很多种方式:</p>\n<ol>\n<li><p>直接定义一个字典</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = &#123;</span><br><span class=\"line\">&apos;name&apos;: &apos;gwf&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用dict函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = dict(name=&apos;gwf&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个对象传入dict函数 值得研究的是这第三种方法，当将一个对象传入dict函数的时候，他会去调用keys函数</p>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-b9ec37217f768ff1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<p>keys 方法的目的就是为了拿到字典里所有的键，至于说这些键有那么，完全有我们自己来定义。keys 返回的必须是一个元组或者列表来声明要序列化的键。</p>\n<p>而dict会以中括号的形式来拿到对应的值，如o[“name”]，但是默认是不能这么访问的，我们需要编写<strong>getitem</strong>函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = &#123;&apos;name&apos;: &apos;weilai&apos;&#125;  # 直接定义一个字典</span><br><span class=\"line\"></span><br><span class=\"line\">r = dict(name= &apos;weilai&apos;) # 使用dict函数</span><br><span class=\"line\"></span><br><span class=\"line\">class Wei():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = &apos;age&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.gender = &apos;male&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):   </span><br><span class=\"line\">        return (&apos;name&apos;,&apos;age&apos;,&apos;gender&apos;)  #  取到 key ,  做到自定义key </span><br><span class=\"line\">        # # return (&apos;name&apos;,)  # 一个元素的元组</span><br><span class=\"line\">        # return [&apos;name&apos;]  # return 序列类型的都可以</span><br><span class=\"line\"></span><br><span class=\"line\">    def __getitem__(self,item):  </span><br><span class=\"line\">        return getattr(self,item)   # 取到 key对应的value</span><br><span class=\"line\"></span><br><span class=\"line\">o = Wei()</span><br><span class=\"line\">print(dict(o))   # &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: &apos;age&apos;, &apos;gender&apos;: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就成功的讲一个对象转化成了字典的形式，并且无论类变量和实例变量，都可以转化，更加灵活的是，我们可以自己控制，那些变量需要转化，哪些变量不需要转化</p>\n<h3 id=\"4-序列化SQLALChemy模型\"><a href=\"#4-序列化SQLALChemy模型\" class=\"headerlink\" title=\"4.序列化SQLALChemy模型\"></a>4.序列化SQLALChemy模型</h3><p>有了之前的基础，我们就知道怎么序列化user对象了，我们只需要在User类中定义keys和getitem方法，然后在default函数中使用dict()函数即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">    def default(self, o):</span><br><span class=\"line\">        return dict(o)</span><br><span class=\"line\"></span><br><span class=\"line\">class Flask(_Flask):</span><br><span class=\"line\">    json_encoder = JSONEncoder</span><br></pre></td></tr></table></figure></p>\n<p>models/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class User(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    email = Column(String(50), unique=True, nullable=False)</span><br><span class=\"line\">    auth = Column(SmallInteger, default=1)</span><br><span class=\"line\">    nickname = Column(String(24), nullable=False)</span><br><span class=\"line\">    _password = Column(&apos;password&apos;, String(128))</span><br><span class=\"line\"></span><br><span class=\"line\"># SQLALChemy的实例化是不会调用__init__函数的，要想让他调用就需要</span><br><span class=\"line\"># @orm.reconstructor这个装饰器</span><br><span class=\"line\">    @orm.reconstructor</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;email&apos;, &apos;nickname&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">\treturn self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">\t# 支持隐藏字段</span><br><span class=\"line\">    def hide(self, *keys):</span><br><span class=\"line\">\t[self.fields.remove(key) for key in keys]</span><br><span class=\"line\">\t# 支持添加字段</span><br><span class=\"line\">    def append(self, *keys):</span><br><span class=\"line\">\t[self.fields.append(key) for key in keys]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-完善序列化\"><a href=\"#5-完善序列化\" class=\"headerlink\" title=\"5.完善序列化\"></a>5.完善序列化</h3><p>优化1：每一个模型如果需要序列化，都要有getitem方法，可以放到基类里面去</p>\n<p>优化2：default函数，是递归调用的，只要遇到不能序列化的对象，就会调用default函数。所以如果有其他类型，我们需要修改完善我们的default函数</p>\n<p>优化3：我们的default函数需要增加容错性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class JSONEncoder(_JSONEncoder):</span><br><span class=\"line\">\tdef default(self,o):</span><br><span class=\"line\">\t\t# return o.__dict__  # 内置方法，将对象转化为字典  # 缺点是只能转换实例变量，不能将类变量也转换成字典</span><br><span class=\"line\">\t\t# return dict(o) # 考虑不全面.o得有上次定义的那两种方法才不会报错</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif hasattr(o, &apos;keys&apos;) and hasattr(o, &apos;__getitem__&apos;):</span><br><span class=\"line\">\t\t\treturn dict(o)   # 得有这两种方法 才会return dict(o)</span><br><span class=\"line\">\t\tif isinstance(o, date):  # 如果是 时间类型</span><br><span class=\"line\">\t\t\treturn o.strftime(&apos;%Y-%m-%d&apos;)</span><br><span class=\"line\">\t\traise ServerError()</span><br></pre></td></tr></table></figure></p>\n<p>优化4：之前编写的新的Flask类，JsonEncoder类都是不会轻易改变的，放到app.py中。<br>一些其他方法，却是 经常改变的，应该把他们放在init文件中</p>\n<h3 id=\"6-ViewModel对于API有意义吗？\"><a href=\"#6-ViewModel对于API有意义吗？\" class=\"headerlink\" title=\"6.ViewModel对于API有意义吗？\"></a>6.ViewModel对于API有意义吗？</h3><p>viewmodel对于API来说，特别是内部开发来说非常有意义</p>\n<p>viewmodel是为了我们的视图层，提供个性化的试图模型。SQLALChemy返回的模型是原始模型（格式和数据库中存储的一模一样）。 而前端可能需要我们返回一个意义更加明确的字段。</p>\n<p>原始模型是根据数据库来生成的，他的格式是一定的，但是我们在视图层中或者API的返回中，要根据业务去具体的个性化一个个属性的 格式，这就必然存在一个由原始模型向视图模型转换的过程，这个过程最适合的是在View_model中进行一个转换。</p>\n<p>我们在视图层写转换的代码，一来会污染视图层的代码，二来会难以复用 并且有的试图模型可能会比较复杂，设计到多个原始模型，这个代码必定会比较复杂，写在视图函数中就会非常不合适</p>\n<p>对于完全严格意义上的RESTFul，viewmodel的意义并不大，因为完全资源意义的RESTFul是不考虑业务逻辑的</p>\n"},{"title":"Flask构建可扩展的RESTful-API-7--权限控制","date":"2018-12-18T10:36:16.000Z","_content":"\n\n# 7.1 删除模型的注意事项\n\n1.204 的HTTP状态码代表的是NO CONTENT，无内容。所以如果状态码是204，那么无论返回什么，前端都接受不到，但是我们要尽量返回格式化的信息，让前端能够判断，为此，我们可以使用状态码202，并且添加一个特殊的error_code=-1 来代表删除操作\n\n2.由于我们的删除是逻辑删除，使用get的方法会一直可以查询出当前用户，这里我们应该使用filter_by()，传入status=1，好在，我们之前已经在基类重写了filter_by()，所以我们只需要调用filter_by()传入id即可\napp\\api\\v1\\user.py\n```\n@api.route('/<int:uid>', methods = ['DELETE']) \n@auth.login_required\ndef delete_user(uid):\n    with db.auto_commit():\n        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写\n        user = User.query.filter_by(id=uid).first_or_404()\n        user.delete()     #  软删除\n    # return 'delete sucess'\n    return DeleteSuccess()\n\n```\napp\\libs\\erro_code.py\n```\nclass DeleteSuccess(Success):\n    code = 202\n    error_code = 1\n```\n3.防止超权现象 id=1的用户，不能删除id=2的用户，为了解决这个问题，我们的uid不能由用户传入，而是应该从他传入的token中取出来。由于我们之前做token验证的时候，已经把取出来的信息存入到了flask的g中，所以我们只需要从g中取出来做判断即可\n```\n@api.route('', methods = ['DELETE'])   \n@auth.login_required\ndef delete_user():\n    uid = g.user.uid   #  防止超权，从token中读取  已存储在 g 变量中 ，g 变量线程隔离。\n                    # 对于管理员来说，可以超权，删除别的用户\n\n    with db.auto_commit():\n\n        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写\n        user = User.query.filter_by(id=uid).first_or_404()\n        user.delete()     #  软删除\n    # return 'delete sucess'\n    return DeleteSuccess()\n```\n> 两个知识点\n1.g.user.uid之所以可以这样用.的方式获取uid，是因为我们在向g中存储user的时候，使用的是namedtuple，而不是dict，不然我们就只能g.user['uid']这样获取了  \n> 2.即使两个用户同时访问这个接口，我们也不会出错，g会正确的指向每一个请求的user，这是因为g是线程隔离的\n\n4.我们是需要一个超级管理员用户的试图函数super_delete_user，可以通过传入uid来删除指定用户的。但是对这两个接口，普通用户应该只能访问delete_user，而超级管理员都能够访问。\n\n首先我们需要创建一个管理员用户，不过管理员用户不能通过公开API来创建，而应该直接在数据库里创建，但是这又涉及到一个问题，就是直接在数据库里创建，密码不好生成。所以最好的方式是创建一个离线脚本文件.也可以普通注册，改auth为2\n```\nfrom app import create_app\nfrom app.models.base import db\nfrom app.models.user import User\n\napp = create_app()\nwith app.app_context():\n    with db.auto_commit():\n        # 离线脚本，创建一个超级管理员\n        user = User()\n        user.nickname = 'Super'\n        user.password = '123456'\n        user.email = '999@qq.com'\n        user.auth = 2\n        db.session.add(user)\n\n# 直接运行就能创建\n```\n这个脚本不仅仅可以生成管理员，还可以使用它生成大量的假数据，测试数据\n\n\n\n\n# 7.2 权限管理方案\n\n通过之前的分析，我们可以发现，我们之前的get_user，实际上应该是super_get_user，而我们应该在多添加一个get_user作为普通用户的获取方法\n```\n@api.route('/<int:uid>', methods=['GET'])\n@auth.login_required\ndef super_get_user(uid):\n    user = User.query.filter_by(id=uid).first_or_404(uid)\n    return jsonify(user)\n\n@api.route('', methods = ['GET'])   \n@auth.login_required\ndef get_user():\n    uid = g.user.uid \n    user = User.query.filter_by(id=uid).first_or_404()\n    return jsonify(user)\n```\n### 1.不太好的权限管理方案\n\n我们只要可以在视图函数中获取到用户的权限，就可以根据权限来判断，用户的身份，来做出不同的控制。\n\n要做到这一点，我们只需要在生成令牌的时候，将is_admin的字段写入到token中。然后再视图函数中取出这个字段来进行不同的判断就好了。\n\n这样的方案有两个缺点： 1.代码太啰嗦了，每个视图函数都需要做这样的判断。 2.我们把全新想的太简单了，我们这个项目只有管理员和普通用户两种，但是真正的权限应该有各种分组，每个分组每个用户都有不同的权限，如果这样，再在视图函数里进行控制基本上是不可能\n\n### 2.比较好的权限管理方案\n\n假如说我们在代码里做三张表（Mysql，Redis，配置文件），每一张表都记录着某一种权限，现在假如某一个请求过来了。当用户访问@auto.login的接口的话，他必须要带有一个token令牌中的，而我们是可以从token中读取到当前的权限种类的，并且我们是可以知道他所访问的接口的。我们可以拿权限种类和接口做匹配，然后来做判断。 这样做还有一个很好的优势，是我们可以在进入方法前进行权限判断，如果不能够访问根本就不会进入该方法。\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-c5171f4d51fe6475?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n\n# 7.3 Scope权限管理的实现\n\n## 遇到的坑\n用的之前生成的token，当时token并没有写入scope,所以报错重新生成就好了。\n\n### 1.编码实现\n\n根据上一小节的编写，我们来动手编写权限管理方案\n\n#### 1.1 scope配置\n\napp/libs/scope.py\n```\nclass AdminScope:\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n\nclass UserScope:\n    allow_api = ['v1.get_user']\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    if endpoint in scope.allow_api:\n        return True\n    else:\n        return False\n```\n#### 1.2 生成令牌\n\napp/models/user.py\n```\n    @staticmethod\n    def verify(email, password):\n        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户\n        if not user.check_password(password):  # 检验密码\n            raise AuthFailed()   #抛出异常\n        scope = 'AdminScope' if user.auth == 2 else 'UserScope'  # 判断用户作用域，假设只有两个作用域\n        return {'uid': user.id,'scope': scope}  #成功，返回uid   # 返回scope\n```\napp/api/v1/token.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom flask import current_app\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\nfrom app.validators.forms import ClientForm\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n\nfrom flask import jsonify\n\n\napi = Redprint('token') # 实例化一个Redprint\n\n@api.route('', methods=['POST'])  # 路由注册\n# 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\ndef get_token():\n    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分\n    promise = {\n        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify\n        # ClientTypeEnum.USER_MINA: __register_user_by_MINA \n    }\n    # 拿到用户信息\n    identity = promise[form.type.data](\n        form.account.data,\n        form.secret.data\n    )\n\n    # 调用函数生成token\n    expiration = current_app.config['TOKEN_EXPIRATION']  #过期时间\n    token = generator_auth_token(identity['uid'],\n                                form.type.data,\n                                identity['scope'],\n                                expiration=expiration)\n    t = {\n            'token': token.decode('ascii')  # 因为是byte\n        }\n    return jsonify(t), 201  # 返回 json 字典\n\ndef generator_auth_token(uid, ac_type, scope=None,expiration=7200):\n    \"\"\"生成令牌  ，拿到uid,client类型，权限作用域，过期时间\"\"\"\n    s = Serializer(current_app.config['SECRET_KEY'],expires_in=expiration)  # expires_in 生成令牌的有效期\n    return s.dumps({\n                    'uid': uid,\n                    'type': ac_type.value,\n                    'scope': scope\n                })  # 将想写入的信息以字典形式写入令牌\n```\n#### 1.3 验证令牌\n```\n# 编写一个验证token的装饰器\n\nfrom flask_httpauth import HTTPBasicAuth\n\nfrom flask import current_app, g, request\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\\n          SignatureExpired\n\nfrom collections import namedtuple\n\nfrom app.libs.erro_code import AuthFailed, Forbidden\nfrom app.libs.scope import is_in_scope\n\nauth = HTTPBasicAuth()\n\nUser = namedtuple('User', ['uid', 'ac_type', 'scope'])\n\n# @auth.verify_password\n# def verify_password(account, password):\n\n#   # 需要在HTTP请求的头部设置一个固定的键值对\n#   # key=Authorization,value=basic base64(account:psd)\n#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#     return True\n\n@auth.verify_password\ndef verify_password(token, password):\n    user_info =  verify_auth_token(token) # token 赋值给 user_info\n    if not user_info:\n        return False\n    else:\n        g.user = user_info  # g 变量 ,代理模式\n        return True\n\n\ndef verify_auth_token(token):\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(token)   # 解密 token\n    # token不合法抛出的异常\n    except BadSignature:\n        raise AuthFailed(msg='token is valid', erro_code=1002)\n    # token过期抛出的异常\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n\n    uid = data['uid']\n    ac_type = data['type']   # 生成令牌的时候写入了 uid ac_type\n    scope = data['scope']\n    # 也可在这拿到当前request的视图函数\n    allow = is_in_scope(scope ,request.endpoint) # request.endpoint  拿到当前视图函数的endpoint 判断是否有权限。\n    if not allow:\n        raise Forbidden()\n    return User(uid, ac_type, scope)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串\n\n```\n\n\n\n\n# 7.4 Scope优化\n\n#### 1.支持权限相加\n\n假如我们的UserScope的权限是A，B，C。而AdminScope的权限是A，B，C，D。按照我们的写法，我们的A，B，C就需要些两遍。况且这只是一个简单的例子，实际情况下会更复杂。所以我们需要实现一种方法，可以让AdminScope的allow_api可以和UserScope的allow_api相加得到新的allow_api。\n\n```\nclass UserScope:\n    allow_api = ['v1.A','v1.B']\n\nclass SuperScope:    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope())\n# 这个方法可以将其他的Scope合并到当前Scope。省去重复代码的编写\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n\n```\n#### 2.支持权限链式相加\n\n现在我们只能讲AdminScope和UserScope的权限相加，如果还想再加上其他的Scope，就需要链式的操作\n```\nclass AdminScope:\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n\nclass UserScope:\n    allow_api = ['v1.A','v1.B']\n\nclass SuperScope:    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope()).add(AdminScope())\n        \n\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self  # 将self return不然第二段调用为None.add(),报错\n```\n#### 3.所有子类支持相加\n\nadd方法不应该写在具体的Scope类中，因为这样就只有当前Scope类有该功能了。应该将add方法写在基类Scope中\n```\nclass Scope:\n    allow_api = []\n\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self.add(UserScope())\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope()).add(AdminScope())\n        \n#  重复问题，得去重SuperScope为['v1.C', 'v1.D', 'v1.A', 'v1.B', 'v1.super_get_user', 'v1.A', 'v1.B']\n#  要是能直接相加就好了      self + UserScope() + AdminScope()\n\n```\n#### 4.运算符重载\n\n现在我们一直使用add()方法，太啰嗦了，我们可以修改我们的代码，使得我们可以使用+号来完成add()方法的功能。 要完成这个功能，就要使用到运算符重载的技术\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n```\n#### 5.去重\n\n我们现在的scope，编写完成之后，由于可能会连续相加，会有很多重复的试图函数，如SuperScope()中会出现两次v1.A,现在我们就需要将这些重复的试图函数去除掉。我们只需要使用set这个数据结构，就可以完成。\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n```\n也可以直接定义的时候，就定义成集合,例如：`allow_api = {'v1.C','v1.D'}`\n\n以上全部代码\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n\n        \n   # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    if endpoint in scope.allow_api:\n        return True\n    else:\n        return False\n```\n\n#### 6.模块级别的Scope\n\n现在我们的Scope都是试图函数级别的，加入我们的user下面有100个试图函数，我们就需要把这100个全都加入进来，我们可以想办法，让我们的Scope支持可以添加一个模块下的视图函数。\n\n我们可以添加一个变量，allow_moudle，来标示允许通过的模块。然后现在我们的is_in_scope只是简单的判断endpoint是否在scope.allow_api中，endpoint默认的形式是blueprint.view_func 的形式，我们可以自定义endpoint为blueprint.moudle_name+view_func这样的形式，这样我们我们就可以在is_in_scope进行模块的判断\n\n修改红图的注册：\n```\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n    allow_moudle = ['v1.user']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n```\n```\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n\n        self.allow_moudle = self.allow_moudle + other.allow_moudle\n        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.user+super_get_user','v1.user+super_delete_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    \n    # allow_moudle = ['v1.user']\n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.user+get_user','v1.user+delete_user']\n\n\n# class SuperScope(Scope):    # 相加操作\n#     allow_api = ['v1.C','v1.D']\n#     allow_moudle = ['v1.user']\n\n#     def __init__(self):\n#         self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n```\n**模块级别的权限控制一定得特别注意**\n#### 7.支持排除\n\n如果一个模块又100个视图函数，UserScope需要访问98个，AdminScope需要访问所有，那么UserScope的编写就太麻烦了，我们可以让我们的Scope 支持排除操作，这样UserScope就可以添加AdminScope的全部，然后再排除掉他不能访问的两个就好了\n```\n\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    forbidden = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n\n        self.allow_moudle = self.allow_moudle + other.allow_moudle\n        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作\n\n        self.forbidden = self.forbidden + other.forbidden\n        self.forbidden = list(set(self.forbidden)) \n        return self\n\n\nclass AdminScope(Scope):\n    # allow_api = ['v1.user+super_get_user','v1.user+super_delete_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    \n    allow_moudle = ['v1.user']\n    # def __init__(self):\n    #     self + UserScope()\n\n\nclass UserScope(Scope):\n    forbidden =  ['v1.user+super_get_user','v1.user+super_delete_user']\n    # allow_api = ['v1.user+get_user','v1.user+delete_user']\n    def __init__(self):\n        self + AdminScope()\n\n\n\n\n# class SuperScope(Scope):    # 相加操作\n#     allow_api = ['v1.C','v1.D']\n#     allow_moudle = ['v1.user']\n\n#     def __init__(self):\n#         self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.forbidden:   # 排除\n        return False\n\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n# 首先判断是否在要排除的列表里\n\n```\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-7--权限控制.md","raw":"\n---\ntitle: Flask构建可扩展的RESTful-API-7--权限控制\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n\n# 7.1 删除模型的注意事项\n\n1.204 的HTTP状态码代表的是NO CONTENT，无内容。所以如果状态码是204，那么无论返回什么，前端都接受不到，但是我们要尽量返回格式化的信息，让前端能够判断，为此，我们可以使用状态码202，并且添加一个特殊的error_code=-1 来代表删除操作\n\n2.由于我们的删除是逻辑删除，使用get的方法会一直可以查询出当前用户，这里我们应该使用filter_by()，传入status=1，好在，我们之前已经在基类重写了filter_by()，所以我们只需要调用filter_by()传入id即可\napp\\api\\v1\\user.py\n```\n@api.route('/<int:uid>', methods = ['DELETE']) \n@auth.login_required\ndef delete_user(uid):\n    with db.auto_commit():\n        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写\n        user = User.query.filter_by(id=uid).first_or_404()\n        user.delete()     #  软删除\n    # return 'delete sucess'\n    return DeleteSuccess()\n\n```\napp\\libs\\erro_code.py\n```\nclass DeleteSuccess(Success):\n    code = 202\n    error_code = 1\n```\n3.防止超权现象 id=1的用户，不能删除id=2的用户，为了解决这个问题，我们的uid不能由用户传入，而是应该从他传入的token中取出来。由于我们之前做token验证的时候，已经把取出来的信息存入到了flask的g中，所以我们只需要从g中取出来做判断即可\n```\n@api.route('', methods = ['DELETE'])   \n@auth.login_required\ndef delete_user():\n    uid = g.user.uid   #  防止超权，从token中读取  已存储在 g 变量中 ，g 变量线程隔离。\n                    # 对于管理员来说，可以超权，删除别的用户\n\n    with db.auto_commit():\n\n        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写\n        user = User.query.filter_by(id=uid).first_or_404()\n        user.delete()     #  软删除\n    # return 'delete sucess'\n    return DeleteSuccess()\n```\n> 两个知识点\n1.g.user.uid之所以可以这样用.的方式获取uid，是因为我们在向g中存储user的时候，使用的是namedtuple，而不是dict，不然我们就只能g.user['uid']这样获取了  \n> 2.即使两个用户同时访问这个接口，我们也不会出错，g会正确的指向每一个请求的user，这是因为g是线程隔离的\n\n4.我们是需要一个超级管理员用户的试图函数super_delete_user，可以通过传入uid来删除指定用户的。但是对这两个接口，普通用户应该只能访问delete_user，而超级管理员都能够访问。\n\n首先我们需要创建一个管理员用户，不过管理员用户不能通过公开API来创建，而应该直接在数据库里创建，但是这又涉及到一个问题，就是直接在数据库里创建，密码不好生成。所以最好的方式是创建一个离线脚本文件.也可以普通注册，改auth为2\n```\nfrom app import create_app\nfrom app.models.base import db\nfrom app.models.user import User\n\napp = create_app()\nwith app.app_context():\n    with db.auto_commit():\n        # 离线脚本，创建一个超级管理员\n        user = User()\n        user.nickname = 'Super'\n        user.password = '123456'\n        user.email = '999@qq.com'\n        user.auth = 2\n        db.session.add(user)\n\n# 直接运行就能创建\n```\n这个脚本不仅仅可以生成管理员，还可以使用它生成大量的假数据，测试数据\n\n\n\n\n# 7.2 权限管理方案\n\n通过之前的分析，我们可以发现，我们之前的get_user，实际上应该是super_get_user，而我们应该在多添加一个get_user作为普通用户的获取方法\n```\n@api.route('/<int:uid>', methods=['GET'])\n@auth.login_required\ndef super_get_user(uid):\n    user = User.query.filter_by(id=uid).first_or_404(uid)\n    return jsonify(user)\n\n@api.route('', methods = ['GET'])   \n@auth.login_required\ndef get_user():\n    uid = g.user.uid \n    user = User.query.filter_by(id=uid).first_or_404()\n    return jsonify(user)\n```\n### 1.不太好的权限管理方案\n\n我们只要可以在视图函数中获取到用户的权限，就可以根据权限来判断，用户的身份，来做出不同的控制。\n\n要做到这一点，我们只需要在生成令牌的时候，将is_admin的字段写入到token中。然后再视图函数中取出这个字段来进行不同的判断就好了。\n\n这样的方案有两个缺点： 1.代码太啰嗦了，每个视图函数都需要做这样的判断。 2.我们把全新想的太简单了，我们这个项目只有管理员和普通用户两种，但是真正的权限应该有各种分组，每个分组每个用户都有不同的权限，如果这样，再在视图函数里进行控制基本上是不可能\n\n### 2.比较好的权限管理方案\n\n假如说我们在代码里做三张表（Mysql，Redis，配置文件），每一张表都记录着某一种权限，现在假如某一个请求过来了。当用户访问@auto.login的接口的话，他必须要带有一个token令牌中的，而我们是可以从token中读取到当前的权限种类的，并且我们是可以知道他所访问的接口的。我们可以拿权限种类和接口做匹配，然后来做判断。 这样做还有一个很好的优势，是我们可以在进入方法前进行权限判断，如果不能够访问根本就不会进入该方法。\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-c5171f4d51fe6475?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) \n\n\n\n\n\n# 7.3 Scope权限管理的实现\n\n## 遇到的坑\n用的之前生成的token，当时token并没有写入scope,所以报错重新生成就好了。\n\n### 1.编码实现\n\n根据上一小节的编写，我们来动手编写权限管理方案\n\n#### 1.1 scope配置\n\napp/libs/scope.py\n```\nclass AdminScope:\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n\nclass UserScope:\n    allow_api = ['v1.get_user']\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    if endpoint in scope.allow_api:\n        return True\n    else:\n        return False\n```\n#### 1.2 生成令牌\n\napp/models/user.py\n```\n    @staticmethod\n    def verify(email, password):\n        user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户\n        if not user.check_password(password):  # 检验密码\n            raise AuthFailed()   #抛出异常\n        scope = 'AdminScope' if user.auth == 2 else 'UserScope'  # 判断用户作用域，假设只有两个作用域\n        return {'uid': user.id,'scope': scope}  #成功，返回uid   # 返回scope\n```\napp/api/v1/token.py\n```\nfrom app.libs.redprint import Redprint\n\nfrom flask import current_app\nfrom app.libs.enums import ClientTypeEnum\nfrom app.models.user import User\nfrom app.validators.forms import ClientForm\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n\nfrom flask import jsonify\n\n\napi = Redprint('token') # 实例化一个Redprint\n\n@api.route('', methods=['POST'])  # 路由注册\n# 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏\ndef get_token():\n    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分\n    promise = {\n        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify\n        # ClientTypeEnum.USER_MINA: __register_user_by_MINA \n    }\n    # 拿到用户信息\n    identity = promise[form.type.data](\n        form.account.data,\n        form.secret.data\n    )\n\n    # 调用函数生成token\n    expiration = current_app.config['TOKEN_EXPIRATION']  #过期时间\n    token = generator_auth_token(identity['uid'],\n                                form.type.data,\n                                identity['scope'],\n                                expiration=expiration)\n    t = {\n            'token': token.decode('ascii')  # 因为是byte\n        }\n    return jsonify(t), 201  # 返回 json 字典\n\ndef generator_auth_token(uid, ac_type, scope=None,expiration=7200):\n    \"\"\"生成令牌  ，拿到uid,client类型，权限作用域，过期时间\"\"\"\n    s = Serializer(current_app.config['SECRET_KEY'],expires_in=expiration)  # expires_in 生成令牌的有效期\n    return s.dumps({\n                    'uid': uid,\n                    'type': ac_type.value,\n                    'scope': scope\n                })  # 将想写入的信息以字典形式写入令牌\n```\n#### 1.3 验证令牌\n```\n# 编写一个验证token的装饰器\n\nfrom flask_httpauth import HTTPBasicAuth\n\nfrom flask import current_app, g, request\nfrom itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\\n          SignatureExpired\n\nfrom collections import namedtuple\n\nfrom app.libs.erro_code import AuthFailed, Forbidden\nfrom app.libs.scope import is_in_scope\n\nauth = HTTPBasicAuth()\n\nUser = namedtuple('User', ['uid', 'ac_type', 'scope'])\n\n# @auth.verify_password\n# def verify_password(account, password):\n\n#   # 需要在HTTP请求的头部设置一个固定的键值对\n#   # key=Authorization,value=basic base64(account:psd)\n#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==\n#     return True\n\n@auth.verify_password\ndef verify_password(token, password):\n    user_info =  verify_auth_token(token) # token 赋值给 user_info\n    if not user_info:\n        return False\n    else:\n        g.user = user_info  # g 变量 ,代理模式\n        return True\n\n\ndef verify_auth_token(token):\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(token)   # 解密 token\n    # token不合法抛出的异常\n    except BadSignature:\n        raise AuthFailed(msg='token is valid', erro_code=1002)\n    # token过期抛出的异常\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n\n    uid = data['uid']\n    ac_type = data['type']   # 生成令牌的时候写入了 uid ac_type\n    scope = data['scope']\n    # 也可在这拿到当前request的视图函数\n    allow = is_in_scope(scope ,request.endpoint) # request.endpoint  拿到当前视图函数的endpoint 判断是否有权限。\n    if not allow:\n        raise Forbidden()\n    return User(uid, ac_type, scope)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串\n\n```\n\n\n\n\n# 7.4 Scope优化\n\n#### 1.支持权限相加\n\n假如我们的UserScope的权限是A，B，C。而AdminScope的权限是A，B，C，D。按照我们的写法，我们的A，B，C就需要些两遍。况且这只是一个简单的例子，实际情况下会更复杂。所以我们需要实现一种方法，可以让AdminScope的allow_api可以和UserScope的allow_api相加得到新的allow_api。\n\n```\nclass UserScope:\n    allow_api = ['v1.A','v1.B']\n\nclass SuperScope:    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope())\n# 这个方法可以将其他的Scope合并到当前Scope。省去重复代码的编写\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n\n```\n#### 2.支持权限链式相加\n\n现在我们只能讲AdminScope和UserScope的权限相加，如果还想再加上其他的Scope，就需要链式的操作\n```\nclass AdminScope:\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n\nclass UserScope:\n    allow_api = ['v1.A','v1.B']\n\nclass SuperScope:    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope()).add(AdminScope())\n        \n\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self  # 将self return不然第二段调用为None.add(),报错\n```\n#### 3.所有子类支持相加\n\nadd方法不应该写在具体的Scope类中，因为这样就只有当前Scope类有该功能了。应该将add方法写在基类Scope中\n```\nclass Scope:\n    allow_api = []\n\n    def add(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self.add(UserScope())\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self.add(UserScope()).add(AdminScope())\n        \n#  重复问题，得去重SuperScope为['v1.C', 'v1.D', 'v1.A', 'v1.B', 'v1.super_get_user', 'v1.A', 'v1.B']\n#  要是能直接相加就好了      self + UserScope() + AdminScope()\n\n```\n#### 4.运算符重载\n\n现在我们一直使用add()方法，太啰嗦了，我们可以修改我们的代码，使得我们可以使用+号来完成add()方法的功能。 要完成这个功能，就要使用到运算符重载的技术\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n```\n#### 5.去重\n\n我们现在的scope，编写完成之后，由于可能会连续相加，会有很多重复的试图函数，如SuperScope()中会出现两次v1.A,现在我们就需要将这些重复的试图函数去除掉。我们只需要使用set这个数据结构，就可以完成。\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n```\n也可以直接定义的时候，就定义成集合,例如：`allow_api = {'v1.C','v1.D'}`\n\n以上全部代码\n```\nclass Scope:\n    allow_api = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n\n        \n   # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    if endpoint in scope.allow_api:\n        return True\n    else:\n        return False\n```\n\n#### 6.模块级别的Scope\n\n现在我们的Scope都是试图函数级别的，加入我们的user下面有100个试图函数，我们就需要把这100个全都加入进来，我们可以想办法，让我们的Scope支持可以添加一个模块下的视图函数。\n\n我们可以添加一个变量，allow_moudle，来标示允许通过的模块。然后现在我们的is_in_scope只是简单的判断endpoint是否在scope.allow_api中，endpoint默认的形式是blueprint.view_func 的形式，我们可以自定义endpoint为blueprint.moudle_name+view_func这样的形式，这样我们我们就可以在is_in_scope进行模块的判断\n\n修改红图的注册：\n```\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.super_get_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.A','v1.B']\n\n\nclass SuperScope(Scope):    # 相加操作\n    allow_api = ['v1.C','v1.D']\n    allow_moudle = ['v1.user']\n\n    def __init__(self):\n        self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n```\n```\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n\n        self.allow_moudle = self.allow_moudle + other.allow_moudle\n        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作\n        return self\n\n\nclass AdminScope(Scope):\n    allow_api = ['v1.user+super_get_user','v1.user+super_delete_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    \n    # allow_moudle = ['v1.user']\n    def __init__(self):\n        self + UserScope()\n\n\nclass UserScope(Scope):\n    allow_api = ['v1.user+get_user','v1.user+delete_user']\n\n\n# class SuperScope(Scope):    # 相加操作\n#     allow_api = ['v1.C','v1.D']\n#     allow_moudle = ['v1.user']\n\n#     def __init__(self):\n#         self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n```\n**模块级别的权限控制一定得特别注意**\n#### 7.支持排除\n\n如果一个模块又100个视图函数，UserScope需要访问98个，AdminScope需要访问所有，那么UserScope的编写就太麻烦了，我们可以让我们的Scope 支持排除操作，这样UserScope就可以添加AdminScope的全部，然后再排除掉他不能访问的两个就好了\n```\n\nclass Scope:\n    allow_api = []\n    allow_moudle = []\n    forbidden = []\n    # def add(self, other):\n# 运算符重载，支持对象相加操作\n    def __add__(self, other):\n        self.allow_api = self.allow_api + other.allow_api\n        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重\n\n        self.allow_moudle = self.allow_moudle + other.allow_moudle\n        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作\n\n        self.forbidden = self.forbidden + other.forbidden\n        self.forbidden = list(set(self.forbidden)) \n        return self\n\n\nclass AdminScope(Scope):\n    # allow_api = ['v1.user+super_get_user','v1.user+super_delete_user']  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 \n    \n    allow_moudle = ['v1.user']\n    # def __init__(self):\n    #     self + UserScope()\n\n\nclass UserScope(Scope):\n    forbidden =  ['v1.user+super_get_user','v1.user+super_delete_user']\n    # allow_api = ['v1.user+get_user','v1.user+delete_user']\n    def __init__(self):\n        self + AdminScope()\n\n\n\n\n# class SuperScope(Scope):    # 相加操作\n#     allow_api = ['v1.C','v1.D']\n#     allow_moudle = ['v1.user']\n\n#     def __init__(self):\n#         self + UserScope() + AdminScope()\n\n\n\n        \n\n    # def add(self, other):\n    #     self.allow_api = self.allow_api + other.allow_api\n    #     return self  # 将self return不然第二段调用为None.add(),报错\n# 提取到基类中，每个都继承这个基类\n\n\n\n    # 判断当前访问的endpoint是否在scope中\ndef is_in_scope(scope, endpoint):\n    # 反射获取类\n    scope = globals()[scope]()  # globals使用类的名字动态创建对象\n    splits = endpoint.split('+')\n    red_name = splits[0]\n    if endpoint in scope.forbidden:   # 排除\n        return False\n\n    if endpoint in scope.allow_api:\n        return True\n    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint\n    # 从Redprint 入手  v1.red_name +view_func\n    '''\n    从   endpoint = options.pop(\"endpoint\", f.__name__)\n    改为 endpoint = self.name + '+' + options.pop(\"endpoint\", f.__name__) # 改成Redprint+视图函数名字\n            '''\n    if red_name in scope.allow_moudle:\n        return True\n    else:\n        return False\n# 首先判断是否在要排除的列表里\n\n```\n","slug":"flask-api/Flask构建可扩展的RESTful-API-7--权限控制","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oxy001itssal8koq02n","content":"<h1 id=\"7-1-删除模型的注意事项\"><a href=\"#7-1-删除模型的注意事项\" class=\"headerlink\" title=\"7.1 删除模型的注意事项\"></a>7.1 删除模型的注意事项</h1><p>1.204 的HTTP状态码代表的是NO CONTENT，无内容。所以如果状态码是204，那么无论返回什么，前端都接受不到，但是我们要尽量返回格式化的信息，让前端能够判断，为此，我们可以使用状态码202，并且添加一个特殊的error_code=-1 来代表删除操作</p>\n<p>2.由于我们的删除是逻辑删除，使用get的方法会一直可以查询出当前用户，这里我们应该使用filter_by()，传入status=1，好在，我们之前已经在基类重写了filter_by()，所以我们只需要调用filter_by()传入id即可<br>app\\api\\v1\\user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods = [&apos;DELETE&apos;]) </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def delete_user(uid):</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写</span><br><span class=\"line\">        user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">        user.delete()     #  软删除</span><br><span class=\"line\">    # return &apos;delete sucess&apos;</span><br><span class=\"line\">    return DeleteSuccess()</span><br></pre></td></tr></table></figure></p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DeleteSuccess(Success):</span><br><span class=\"line\">    code = 202</span><br><span class=\"line\">    error_code = 1</span><br></pre></td></tr></table></figure></p>\n<p>3.防止超权现象 id=1的用户，不能删除id=2的用户，为了解决这个问题，我们的uid不能由用户传入，而是应该从他传入的token中取出来。由于我们之前做token验证的时候，已经把取出来的信息存入到了flask的g中，所以我们只需要从g中取出来做判断即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;&apos;, methods = [&apos;DELETE&apos;])   </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def delete_user():</span><br><span class=\"line\">    uid = g.user.uid   #  防止超权，从token中读取  已存储在 g 变量中 ，g 变量线程隔离。</span><br><span class=\"line\">                    # 对于管理员来说，可以超权，删除别的用户</span><br><span class=\"line\"></span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\"></span><br><span class=\"line\">        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写</span><br><span class=\"line\">        user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">        user.delete()     #  软删除</span><br><span class=\"line\">    # return &apos;delete sucess&apos;</span><br><span class=\"line\">    return DeleteSuccess()</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>两个知识点<br>1.g.user.uid之所以可以这样用.的方式获取uid，是因为我们在向g中存储user的时候，使用的是namedtuple，而不是dict，不然我们就只能g.user[‘uid’]这样获取了<br>2.即使两个用户同时访问这个接口，我们也不会出错，g会正确的指向每一个请求的user，这是因为g是线程隔离的</p>\n</blockquote>\n<p>4.我们是需要一个超级管理员用户的试图函数super_delete_user，可以通过传入uid来删除指定用户的。但是对这两个接口，普通用户应该只能访问delete_user，而超级管理员都能够访问。</p>\n<p>首先我们需要创建一个管理员用户，不过管理员用户不能通过公开API来创建，而应该直接在数据库里创建，但是这又涉及到一个问题，就是直接在数据库里创建，密码不好生成。所以最好的方式是创建一个离线脚本文件.也可以普通注册，改auth为2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\">with app.app_context():</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        # 离线脚本，创建一个超级管理员</span><br><span class=\"line\">        user = User()</span><br><span class=\"line\">        user.nickname = &apos;Super&apos;</span><br><span class=\"line\">        user.password = &apos;123456&apos;</span><br><span class=\"line\">        user.email = &apos;999@qq.com&apos;</span><br><span class=\"line\">        user.auth = 2</span><br><span class=\"line\">        db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接运行就能创建</span><br></pre></td></tr></table></figure></p>\n<p>这个脚本不仅仅可以生成管理员，还可以使用它生成大量的假数据，测试数据</p>\n<h1 id=\"7-2-权限管理方案\"><a href=\"#7-2-权限管理方案\" class=\"headerlink\" title=\"7.2 权限管理方案\"></a>7.2 权限管理方案</h1><p>通过之前的分析，我们可以发现，我们之前的get_user，实际上应该是super_get_user，而我们应该在多添加一个get_user作为普通用户的获取方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods=[&apos;GET&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def super_get_user(uid):</span><br><span class=\"line\">    user = User.query.filter_by(id=uid).first_or_404(uid)</span><br><span class=\"line\">    return jsonify(user)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods = [&apos;GET&apos;])   </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    uid = g.user.uid </span><br><span class=\"line\">    user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">    return jsonify(user)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-不太好的权限管理方案\"><a href=\"#1-不太好的权限管理方案\" class=\"headerlink\" title=\"1.不太好的权限管理方案\"></a>1.不太好的权限管理方案</h3><p>我们只要可以在视图函数中获取到用户的权限，就可以根据权限来判断，用户的身份，来做出不同的控制。</p>\n<p>要做到这一点，我们只需要在生成令牌的时候，将is_admin的字段写入到token中。然后再视图函数中取出这个字段来进行不同的判断就好了。</p>\n<p>这样的方案有两个缺点： 1.代码太啰嗦了，每个视图函数都需要做这样的判断。 2.我们把全新想的太简单了，我们这个项目只有管理员和普通用户两种，但是真正的权限应该有各种分组，每个分组每个用户都有不同的权限，如果这样，再在视图函数里进行控制基本上是不可能</p>\n<h3 id=\"2-比较好的权限管理方案\"><a href=\"#2-比较好的权限管理方案\" class=\"headerlink\" title=\"2.比较好的权限管理方案\"></a>2.比较好的权限管理方案</h3><p>假如说我们在代码里做三张表（Mysql，Redis，配置文件），每一张表都记录着某一种权限，现在假如某一个请求过来了。当用户访问@auto.login的接口的话，他必须要带有一个token令牌中的，而我们是可以从token中读取到当前的权限种类的，并且我们是可以知道他所访问的接口的。我们可以拿权限种类和接口做匹配，然后来做判断。 这样做还有一个很好的优势，是我们可以在进入方法前进行权限判断，如果不能够访问根本就不会进入该方法。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-c5171f4d51fe6475?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h1 id=\"7-3-Scope权限管理的实现\"><a href=\"#7-3-Scope权限管理的实现\" class=\"headerlink\" title=\"7.3 Scope权限管理的实现\"></a>7.3 Scope权限管理的实现</h1><h2 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h2><p>用的之前生成的token，当时token并没有写入scope,所以报错重新生成就好了。</p>\n<h3 id=\"1-编码实现\"><a href=\"#1-编码实现\" class=\"headerlink\" title=\"1.编码实现\"></a>1.编码实现</h3><p>根据上一小节的编写，我们来动手编写权限管理方案</p>\n<h4 id=\"1-1-scope配置\"><a href=\"#1-1-scope配置\" class=\"headerlink\" title=\"1.1 scope配置\"></a>1.1 scope配置</h4><p>app/libs/scope.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AdminScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.get_user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-生成令牌\"><a href=\"#1-2-生成令牌\" class=\"headerlink\" title=\"1.2 生成令牌\"></a>1.2 生成令牌</h4><p>app/models/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@staticmethod</span><br><span class=\"line\">def verify(email, password):</span><br><span class=\"line\">    user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户</span><br><span class=\"line\">    if not user.check_password(password):  # 检验密码</span><br><span class=\"line\">        raise AuthFailed()   #抛出异常</span><br><span class=\"line\">    scope = &apos;AdminScope&apos; if user.auth == 2 else &apos;UserScope&apos;  # 判断用户作用域，假设只有两个作用域</span><br><span class=\"line\">    return &#123;&apos;uid&apos;: user.id,&apos;scope&apos;: scope&#125;  #成功，返回uid   # 返回scope</span><br></pre></td></tr></table></figure></p>\n<p>app/api/v1/token.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;token&apos;) # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods=[&apos;POST&apos;])  # 路由注册</span><br><span class=\"line\"># 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏</span><br><span class=\"line\">def get_token():</span><br><span class=\"line\">    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify</span><br><span class=\"line\">        # ClientTypeEnum.USER_MINA: __register_user_by_MINA </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 拿到用户信息</span><br><span class=\"line\">    identity = promise[form.type.data](</span><br><span class=\"line\">        form.account.data,</span><br><span class=\"line\">        form.secret.data</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    # 调用函数生成token</span><br><span class=\"line\">    expiration = current_app.config[&apos;TOKEN_EXPIRATION&apos;]  #过期时间</span><br><span class=\"line\">    token = generator_auth_token(identity[&apos;uid&apos;],</span><br><span class=\"line\">                                form.type.data,</span><br><span class=\"line\">                                identity[&apos;scope&apos;],</span><br><span class=\"line\">                                expiration=expiration)</span><br><span class=\"line\">    t = &#123;</span><br><span class=\"line\">            &apos;token&apos;: token.decode(&apos;ascii&apos;)  # 因为是byte</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return jsonify(t), 201  # 返回 json 字典</span><br><span class=\"line\"></span><br><span class=\"line\">def generator_auth_token(uid, ac_type, scope=None,expiration=7200):</span><br><span class=\"line\">    &quot;&quot;&quot;生成令牌  ，拿到uid,client类型，权限作用域，过期时间&quot;&quot;&quot;</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;],expires_in=expiration)  # expires_in 生成令牌的有效期</span><br><span class=\"line\">    return s.dumps(&#123;</span><br><span class=\"line\">                    &apos;uid&apos;: uid,</span><br><span class=\"line\">                    &apos;type&apos;: ac_type.value,</span><br><span class=\"line\">                    &apos;scope&apos;: scope</span><br><span class=\"line\">                &#125;)  # 将想写入的信息以字典形式写入令牌</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-验证令牌\"><a href=\"#1-3-验证令牌\" class=\"headerlink\" title=\"1.3 验证令牌\"></a>1.3 验证令牌</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编写一个验证token的装饰器</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app, g, request</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\</span><br><span class=\"line\">          SignatureExpired</span><br><span class=\"line\"></span><br><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import AuthFailed, Forbidden</span><br><span class=\"line\">from app.libs.scope import is_in_scope</span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">User = namedtuple(&apos;User&apos;, [&apos;uid&apos;, &apos;ac_type&apos;, &apos;scope&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\"># @auth.verify_password</span><br><span class=\"line\"># def verify_password(account, password):</span><br><span class=\"line\"></span><br><span class=\"line\">#   # 需要在HTTP请求的头部设置一个固定的键值对</span><br><span class=\"line\">#   # key=Authorization,value=basic base64(account:psd)</span><br><span class=\"line\">#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#     return True</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(token, password):</span><br><span class=\"line\">    user_info =  verify_auth_token(token) # token 赋值给 user_info</span><br><span class=\"line\">    if not user_info:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g.user = user_info  # g 变量 ,代理模式</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def verify_auth_token(token):</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(token)   # 解密 token</span><br><span class=\"line\">    # token不合法抛出的异常</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is valid&apos;, erro_code=1002)</span><br><span class=\"line\">    # token过期抛出的异常</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\"></span><br><span class=\"line\">    uid = data[&apos;uid&apos;]</span><br><span class=\"line\">    ac_type = data[&apos;type&apos;]   # 生成令牌的时候写入了 uid ac_type</span><br><span class=\"line\">    scope = data[&apos;scope&apos;]</span><br><span class=\"line\">    # 也可在这拿到当前request的视图函数</span><br><span class=\"line\">    allow = is_in_scope(scope ,request.endpoint) # request.endpoint  拿到当前视图函数的endpoint 判断是否有权限。</span><br><span class=\"line\">    if not allow:</span><br><span class=\"line\">        raise Forbidden()</span><br><span class=\"line\">    return User(uid, ac_type, scope)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-4-Scope优化\"><a href=\"#7-4-Scope优化\" class=\"headerlink\" title=\"7.4 Scope优化\"></a>7.4 Scope优化</h1><h4 id=\"1-支持权限相加\"><a href=\"#1-支持权限相加\" class=\"headerlink\" title=\"1.支持权限相加\"></a>1.支持权限相加</h4><p>假如我们的UserScope的权限是A，B，C。而AdminScope的权限是A，B，C，D。按照我们的写法，我们的A，B，C就需要些两遍。况且这只是一个简单的例子，实际情况下会更复杂。所以我们需要实现一种方法，可以让AdminScope的allow_api可以和UserScope的allow_api相加得到新的allow_api。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope:    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope())</span><br><span class=\"line\"># 这个方法可以将其他的Scope合并到当前Scope。省去重复代码的编写</span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-支持权限链式相加\"><a href=\"#2-支持权限链式相加\" class=\"headerlink\" title=\"2.支持权限链式相加\"></a>2.支持权限链式相加</h4><p>现在我们只能讲AdminScope和UserScope的权限相加，如果还想再加上其他的Scope，就需要链式的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AdminScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope:    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope()).add(AdminScope())</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self  # 将self return不然第二段调用为None.add(),报错</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-所有子类支持相加\"><a href=\"#3-所有子类支持相加\" class=\"headerlink\" title=\"3.所有子类支持相加\"></a>3.所有子类支持相加</h4><p>add方法不应该写在具体的Scope类中，因为这样就只有当前Scope类有该功能了。应该将add方法写在基类Scope中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope()).add(AdminScope())</span><br><span class=\"line\">        </span><br><span class=\"line\">#  重复问题，得去重SuperScope为[&apos;v1.C&apos;, &apos;v1.D&apos;, &apos;v1.A&apos;, &apos;v1.B&apos;, &apos;v1.super_get_user&apos;, &apos;v1.A&apos;, &apos;v1.B&apos;]</span><br><span class=\"line\">#  要是能直接相加就好了      self + UserScope() + AdminScope()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-运算符重载\"><a href=\"#4-运算符重载\" class=\"headerlink\" title=\"4.运算符重载\"></a>4.运算符重载</h4><p>现在我们一直使用add()方法，太啰嗦了，我们可以修改我们的代码，使得我们可以使用+号来完成add()方法的功能。 要完成这个功能，就要使用到运算符重载的技术<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-去重\"><a href=\"#5-去重\" class=\"headerlink\" title=\"5.去重\"></a>5.去重</h4><p>我们现在的scope，编写完成之后，由于可能会连续相加，会有很多重复的试图函数，如SuperScope()中会出现两次v1.A,现在我们就需要将这些重复的试图函数去除掉。我们只需要使用set这个数据结构，就可以完成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>也可以直接定义的时候，就定义成集合,例如：<code>allow_api = {&#39;v1.C&#39;,&#39;v1.D&#39;}</code></p>\n<p>以上全部代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">   # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-模块级别的Scope\"><a href=\"#6-模块级别的Scope\" class=\"headerlink\" title=\"6.模块级别的Scope\"></a>6.模块级别的Scope</h4><p>现在我们的Scope都是试图函数级别的，加入我们的user下面有100个试图函数，我们就需要把这100个全都加入进来，我们可以想办法，让我们的Scope支持可以添加一个模块下的视图函数。</p>\n<p>我们可以添加一个变量，allow_moudle，来标示允许通过的模块。然后现在我们的is_in_scope只是简单的判断endpoint是否在scope.allow_api中，endpoint默认的形式是blueprint.view_func 的形式，我们可以自定义endpoint为blueprint.moudle_name+view_func这样的形式，这样我们我们就可以在is_in_scope进行模块的判断</p>\n<p>修改红图的注册：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">    allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\"></span><br><span class=\"line\">        self.allow_moudle = self.allow_moudle + other.allow_moudle</span><br><span class=\"line\">        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    </span><br><span class=\"line\">    # allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.user+get_user&apos;,&apos;v1.user+delete_user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">#     allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">#     allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">#     def __init__(self):</span><br><span class=\"line\">#         self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure>\n<p><strong>模块级别的权限控制一定得特别注意</strong></p>\n<h4 id=\"7-支持排除\"><a href=\"#7-支持排除\" class=\"headerlink\" title=\"7.支持排除\"></a>7.支持排除</h4><p>如果一个模块又100个视图函数，UserScope需要访问98个，AdminScope需要访问所有，那么UserScope的编写就太麻烦了，我们可以让我们的Scope 支持排除操作，这样UserScope就可以添加AdminScope的全部，然后再排除掉他不能访问的两个就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    forbidden = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\"></span><br><span class=\"line\">        self.allow_moudle = self.allow_moudle + other.allow_moudle</span><br><span class=\"line\">        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作</span><br><span class=\"line\"></span><br><span class=\"line\">        self.forbidden = self.forbidden + other.forbidden</span><br><span class=\"line\">        self.forbidden = list(set(self.forbidden)) </span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    # allow_api = [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    </span><br><span class=\"line\">    allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\">    # def __init__(self):</span><br><span class=\"line\">    #     self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    forbidden =  [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]</span><br><span class=\"line\">    # allow_api = [&apos;v1.user+get_user&apos;,&apos;v1.user+delete_user&apos;]</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">#     allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">#     allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">#     def __init__(self):</span><br><span class=\"line\">#         self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.forbidden:   # 排除</span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\"># 首先判断是否在要排除的列表里</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"7-1-删除模型的注意事项\"><a href=\"#7-1-删除模型的注意事项\" class=\"headerlink\" title=\"7.1 删除模型的注意事项\"></a>7.1 删除模型的注意事项</h1><p>1.204 的HTTP状态码代表的是NO CONTENT，无内容。所以如果状态码是204，那么无论返回什么，前端都接受不到，但是我们要尽量返回格式化的信息，让前端能够判断，为此，我们可以使用状态码202，并且添加一个特殊的error_code=-1 来代表删除操作</p>\n<p>2.由于我们的删除是逻辑删除，使用get的方法会一直可以查询出当前用户，这里我们应该使用filter_by()，传入status=1，好在，我们之前已经在基类重写了filter_by()，所以我们只需要调用filter_by()传入id即可<br>app\\api\\v1\\user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods = [&apos;DELETE&apos;]) </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def delete_user(uid):</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写</span><br><span class=\"line\">        user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">        user.delete()     #  软删除</span><br><span class=\"line\">    # return &apos;delete sucess&apos;</span><br><span class=\"line\">    return DeleteSuccess()</span><br></pre></td></tr></table></figure></p>\n<p>app\\libs\\erro_code.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DeleteSuccess(Success):</span><br><span class=\"line\">    code = 202</span><br><span class=\"line\">    error_code = 1</span><br></pre></td></tr></table></figure></p>\n<p>3.防止超权现象 id=1的用户，不能删除id=2的用户，为了解决这个问题，我们的uid不能由用户传入，而是应该从他传入的token中取出来。由于我们之前做token验证的时候，已经把取出来的信息存入到了flask的g中，所以我们只需要从g中取出来做判断即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;&apos;, methods = [&apos;DELETE&apos;])   </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def delete_user():</span><br><span class=\"line\">    uid = g.user.uid   #  防止超权，从token中读取  已存储在 g 变量中 ，g 变量线程隔离。</span><br><span class=\"line\">                    # 对于管理员来说，可以超权，删除别的用户</span><br><span class=\"line\"></span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\"></span><br><span class=\"line\">        # user = User.query.get_or_404(uid)   #软删除后，用get 还是能查询到，所以改写</span><br><span class=\"line\">        user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">        user.delete()     #  软删除</span><br><span class=\"line\">    # return &apos;delete sucess&apos;</span><br><span class=\"line\">    return DeleteSuccess()</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>两个知识点<br>1.g.user.uid之所以可以这样用.的方式获取uid，是因为我们在向g中存储user的时候，使用的是namedtuple，而不是dict，不然我们就只能g.user[‘uid’]这样获取了<br>2.即使两个用户同时访问这个接口，我们也不会出错，g会正确的指向每一个请求的user，这是因为g是线程隔离的</p>\n</blockquote>\n<p>4.我们是需要一个超级管理员用户的试图函数super_delete_user，可以通过传入uid来删除指定用户的。但是对这两个接口，普通用户应该只能访问delete_user，而超级管理员都能够访问。</p>\n<p>首先我们需要创建一个管理员用户，不过管理员用户不能通过公开API来创建，而应该直接在数据库里创建，但是这又涉及到一个问题，就是直接在数据库里创建，密码不好生成。所以最好的方式是创建一个离线脚本文件.也可以普通注册，改auth为2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app import create_app</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\"></span><br><span class=\"line\">app = create_app()</span><br><span class=\"line\">with app.app_context():</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        # 离线脚本，创建一个超级管理员</span><br><span class=\"line\">        user = User()</span><br><span class=\"line\">        user.nickname = &apos;Super&apos;</span><br><span class=\"line\">        user.password = &apos;123456&apos;</span><br><span class=\"line\">        user.email = &apos;999@qq.com&apos;</span><br><span class=\"line\">        user.auth = 2</span><br><span class=\"line\">        db.session.add(user)</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接运行就能创建</span><br></pre></td></tr></table></figure></p>\n<p>这个脚本不仅仅可以生成管理员，还可以使用它生成大量的假数据，测试数据</p>\n<h1 id=\"7-2-权限管理方案\"><a href=\"#7-2-权限管理方案\" class=\"headerlink\" title=\"7.2 权限管理方案\"></a>7.2 权限管理方案</h1><p>通过之前的分析，我们可以发现，我们之前的get_user，实际上应该是super_get_user，而我们应该在多添加一个get_user作为普通用户的获取方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/&lt;int:uid&gt;&apos;, methods=[&apos;GET&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def super_get_user(uid):</span><br><span class=\"line\">    user = User.query.filter_by(id=uid).first_or_404(uid)</span><br><span class=\"line\">    return jsonify(user)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods = [&apos;GET&apos;])   </span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def get_user():</span><br><span class=\"line\">    uid = g.user.uid </span><br><span class=\"line\">    user = User.query.filter_by(id=uid).first_or_404()</span><br><span class=\"line\">    return jsonify(user)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-不太好的权限管理方案\"><a href=\"#1-不太好的权限管理方案\" class=\"headerlink\" title=\"1.不太好的权限管理方案\"></a>1.不太好的权限管理方案</h3><p>我们只要可以在视图函数中获取到用户的权限，就可以根据权限来判断，用户的身份，来做出不同的控制。</p>\n<p>要做到这一点，我们只需要在生成令牌的时候，将is_admin的字段写入到token中。然后再视图函数中取出这个字段来进行不同的判断就好了。</p>\n<p>这样的方案有两个缺点： 1.代码太啰嗦了，每个视图函数都需要做这样的判断。 2.我们把全新想的太简单了，我们这个项目只有管理员和普通用户两种，但是真正的权限应该有各种分组，每个分组每个用户都有不同的权限，如果这样，再在视图函数里进行控制基本上是不可能</p>\n<h3 id=\"2-比较好的权限管理方案\"><a href=\"#2-比较好的权限管理方案\" class=\"headerlink\" title=\"2.比较好的权限管理方案\"></a>2.比较好的权限管理方案</h3><p>假如说我们在代码里做三张表（Mysql，Redis，配置文件），每一张表都记录着某一种权限，现在假如某一个请求过来了。当用户访问@auto.login的接口的话，他必须要带有一个token令牌中的，而我们是可以从token中读取到当前的权限种类的，并且我们是可以知道他所访问的接口的。我们可以拿权限种类和接口做匹配，然后来做判断。 这样做还有一个很好的优势，是我们可以在进入方法前进行权限判断，如果不能够访问根本就不会进入该方法。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-c5171f4d51fe6475?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"> </p>\n<h1 id=\"7-3-Scope权限管理的实现\"><a href=\"#7-3-Scope权限管理的实现\" class=\"headerlink\" title=\"7.3 Scope权限管理的实现\"></a>7.3 Scope权限管理的实现</h1><h2 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h2><p>用的之前生成的token，当时token并没有写入scope,所以报错重新生成就好了。</p>\n<h3 id=\"1-编码实现\"><a href=\"#1-编码实现\" class=\"headerlink\" title=\"1.编码实现\"></a>1.编码实现</h3><p>根据上一小节的编写，我们来动手编写权限管理方案</p>\n<h4 id=\"1-1-scope配置\"><a href=\"#1-1-scope配置\" class=\"headerlink\" title=\"1.1 scope配置\"></a>1.1 scope配置</h4><p>app/libs/scope.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AdminScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.get_user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-生成令牌\"><a href=\"#1-2-生成令牌\" class=\"headerlink\" title=\"1.2 生成令牌\"></a>1.2 生成令牌</h4><p>app/models/user.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@staticmethod</span><br><span class=\"line\">def verify(email, password):</span><br><span class=\"line\">    user = User.query.filter_by(email=email).first_or_404()   # 查询出当前用户</span><br><span class=\"line\">    if not user.check_password(password):  # 检验密码</span><br><span class=\"line\">        raise AuthFailed()   #抛出异常</span><br><span class=\"line\">    scope = &apos;AdminScope&apos; if user.auth == 2 else &apos;UserScope&apos;  # 判断用户作用域，假设只有两个作用域</span><br><span class=\"line\">    return &#123;&apos;uid&apos;: user.id,&apos;scope&apos;: scope&#125;  #成功，返回uid   # 返回scope</span><br></pre></td></tr></table></figure></p>\n<p>app/api/v1/token.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app</span><br><span class=\"line\">from app.libs.enums import ClientTypeEnum</span><br><span class=\"line\">from app.models.user import User</span><br><span class=\"line\">from app.validators.forms import ClientForm</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import jsonify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;token&apos;) # 实例化一个Redprint</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;&apos;, methods=[&apos;POST&apos;])  # 路由注册</span><br><span class=\"line\"># 返回token的试图函数，这里稍微破坏一下REST的规则，由于登录操作密码安全性较高，使用GET的话会泄漏</span><br><span class=\"line\">def get_token():</span><br><span class=\"line\">    form = ClientForm().validate_for_api()   # 同注册过程，不同client 区分</span><br><span class=\"line\">    promise = &#123;</span><br><span class=\"line\">        ClientTypeEnum.USER_EMAIL: User.verify,  #验证 # 在 user中编写 verify</span><br><span class=\"line\">        # ClientTypeEnum.USER_MINA: __register_user_by_MINA </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    # 拿到用户信息</span><br><span class=\"line\">    identity = promise[form.type.data](</span><br><span class=\"line\">        form.account.data,</span><br><span class=\"line\">        form.secret.data</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    # 调用函数生成token</span><br><span class=\"line\">    expiration = current_app.config[&apos;TOKEN_EXPIRATION&apos;]  #过期时间</span><br><span class=\"line\">    token = generator_auth_token(identity[&apos;uid&apos;],</span><br><span class=\"line\">                                form.type.data,</span><br><span class=\"line\">                                identity[&apos;scope&apos;],</span><br><span class=\"line\">                                expiration=expiration)</span><br><span class=\"line\">    t = &#123;</span><br><span class=\"line\">            &apos;token&apos;: token.decode(&apos;ascii&apos;)  # 因为是byte</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    return jsonify(t), 201  # 返回 json 字典</span><br><span class=\"line\"></span><br><span class=\"line\">def generator_auth_token(uid, ac_type, scope=None,expiration=7200):</span><br><span class=\"line\">    &quot;&quot;&quot;生成令牌  ，拿到uid,client类型，权限作用域，过期时间&quot;&quot;&quot;</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;],expires_in=expiration)  # expires_in 生成令牌的有效期</span><br><span class=\"line\">    return s.dumps(&#123;</span><br><span class=\"line\">                    &apos;uid&apos;: uid,</span><br><span class=\"line\">                    &apos;type&apos;: ac_type.value,</span><br><span class=\"line\">                    &apos;scope&apos;: scope</span><br><span class=\"line\">                &#125;)  # 将想写入的信息以字典形式写入令牌</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-验证令牌\"><a href=\"#1-3-验证令牌\" class=\"headerlink\" title=\"1.3 验证令牌\"></a>1.3 验证令牌</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编写一个验证token的装饰器</span><br><span class=\"line\"></span><br><span class=\"line\">from flask_httpauth import HTTPBasicAuth</span><br><span class=\"line\"></span><br><span class=\"line\">from flask import current_app, g, request</span><br><span class=\"line\">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer, BadSignature, \\</span><br><span class=\"line\">          SignatureExpired</span><br><span class=\"line\"></span><br><span class=\"line\">from collections import namedtuple</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import AuthFailed, Forbidden</span><br><span class=\"line\">from app.libs.scope import is_in_scope</span><br><span class=\"line\"></span><br><span class=\"line\">auth = HTTPBasicAuth()</span><br><span class=\"line\"></span><br><span class=\"line\">User = namedtuple(&apos;User&apos;, [&apos;uid&apos;, &apos;ac_type&apos;, &apos;scope&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\"># @auth.verify_password</span><br><span class=\"line\"># def verify_password(account, password):</span><br><span class=\"line\"></span><br><span class=\"line\">#   # 需要在HTTP请求的头部设置一个固定的键值对</span><br><span class=\"line\">#   # key=Authorization,value=basic base64(account:psd)</span><br><span class=\"line\">#   #    imwl@live.com:12345678   编码后 aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#   #  key=Authorization,value=basic aW13bEBsaXZlLmNvbToxMjM0NTY3OA==</span><br><span class=\"line\">#     return True</span><br><span class=\"line\"></span><br><span class=\"line\">@auth.verify_password</span><br><span class=\"line\">def verify_password(token, password):</span><br><span class=\"line\">    user_info =  verify_auth_token(token) # token 赋值给 user_info</span><br><span class=\"line\">    if not user_info:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g.user = user_info  # g 变量 ,代理模式</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def verify_auth_token(token):</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(token)   # 解密 token</span><br><span class=\"line\">    # token不合法抛出的异常</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is valid&apos;, erro_code=1002)</span><br><span class=\"line\">    # token过期抛出的异常</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\"></span><br><span class=\"line\">    uid = data[&apos;uid&apos;]</span><br><span class=\"line\">    ac_type = data[&apos;type&apos;]   # 生成令牌的时候写入了 uid ac_type</span><br><span class=\"line\">    scope = data[&apos;scope&apos;]</span><br><span class=\"line\">    # 也可在这拿到当前request的视图函数</span><br><span class=\"line\">    allow = is_in_scope(scope ,request.endpoint) # request.endpoint  拿到当前视图函数的endpoint 判断是否有权限。</span><br><span class=\"line\">    if not allow:</span><br><span class=\"line\">        raise Forbidden()</span><br><span class=\"line\">    return User(uid, ac_type, scope)   # 定义对象式 接口返回回去 ,scope 先返回为空字符串</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-4-Scope优化\"><a href=\"#7-4-Scope优化\" class=\"headerlink\" title=\"7.4 Scope优化\"></a>7.4 Scope优化</h1><h4 id=\"1-支持权限相加\"><a href=\"#1-支持权限相加\" class=\"headerlink\" title=\"1.支持权限相加\"></a>1.支持权限相加</h4><p>假如我们的UserScope的权限是A，B，C。而AdminScope的权限是A，B，C，D。按照我们的写法，我们的A，B，C就需要些两遍。况且这只是一个简单的例子，实际情况下会更复杂。所以我们需要实现一种方法，可以让AdminScope的allow_api可以和UserScope的allow_api相加得到新的allow_api。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope:    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope())</span><br><span class=\"line\"># 这个方法可以将其他的Scope合并到当前Scope。省去重复代码的编写</span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-支持权限链式相加\"><a href=\"#2-支持权限链式相加\" class=\"headerlink\" title=\"2.支持权限链式相加\"></a>2.支持权限链式相加</h4><p>现在我们只能讲AdminScope和UserScope的权限相加，如果还想再加上其他的Scope，就需要链式的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class AdminScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope:</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope:    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope()).add(AdminScope())</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self  # 将self return不然第二段调用为None.add(),报错</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-所有子类支持相加\"><a href=\"#3-所有子类支持相加\" class=\"headerlink\" title=\"3.所有子类支持相加\"></a>3.所有子类支持相加</h4><p>add方法不应该写在具体的Scope类中，因为这样就只有当前Scope类有该功能了。应该将add方法写在基类Scope中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\"></span><br><span class=\"line\">    def add(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.add(UserScope()).add(AdminScope())</span><br><span class=\"line\">        </span><br><span class=\"line\">#  重复问题，得去重SuperScope为[&apos;v1.C&apos;, &apos;v1.D&apos;, &apos;v1.A&apos;, &apos;v1.B&apos;, &apos;v1.super_get_user&apos;, &apos;v1.A&apos;, &apos;v1.B&apos;]</span><br><span class=\"line\">#  要是能直接相加就好了      self + UserScope() + AdminScope()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-运算符重载\"><a href=\"#4-运算符重载\" class=\"headerlink\" title=\"4.运算符重载\"></a>4.运算符重载</h4><p>现在我们一直使用add()方法，太啰嗦了，我们可以修改我们的代码，使得我们可以使用+号来完成add()方法的功能。 要完成这个功能，就要使用到运算符重载的技术<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-去重\"><a href=\"#5-去重\" class=\"headerlink\" title=\"5.去重\"></a>5.去重</h4><p>我们现在的scope，编写完成之后，由于可能会连续相加，会有很多重复的试图函数，如SuperScope()中会出现两次v1.A,现在我们就需要将这些重复的试图函数去除掉。我们只需要使用set这个数据结构，就可以完成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>也可以直接定义的时候，就定义成集合,例如：<code>allow_api = {&#39;v1.C&#39;,&#39;v1.D&#39;}</code></p>\n<p>以上全部代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">   # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-模块级别的Scope\"><a href=\"#6-模块级别的Scope\" class=\"headerlink\" title=\"6.模块级别的Scope\"></a>6.模块级别的Scope</h4><p>现在我们的Scope都是试图函数级别的，加入我们的user下面有100个试图函数，我们就需要把这100个全都加入进来，我们可以想办法，让我们的Scope支持可以添加一个模块下的视图函数。</p>\n<p>我们可以添加一个变量，allow_moudle，来标示允许通过的模块。然后现在我们的is_in_scope只是简单的判断endpoint是否在scope.allow_api中，endpoint默认的形式是blueprint.view_func 的形式，我们可以自定义endpoint为blueprint.moudle_name+view_func这样的形式，这样我们我们就可以在is_in_scope进行模块的判断</p>\n<p>修改红图的注册：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.super_get_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.A&apos;,&apos;v1.B&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">    allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">    allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\"></span><br><span class=\"line\">        self.allow_moudle = self.allow_moudle + other.allow_moudle</span><br><span class=\"line\">        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作</span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    </span><br><span class=\"line\">    # allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    allow_api = [&apos;v1.user+get_user&apos;,&apos;v1.user+delete_user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">#     allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">#     allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">#     def __init__(self):</span><br><span class=\"line\">#         self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure>\n<p><strong>模块级别的权限控制一定得特别注意</strong></p>\n<h4 id=\"7-支持排除\"><a href=\"#7-支持排除\" class=\"headerlink\" title=\"7.支持排除\"></a>7.支持排除</h4><p>如果一个模块又100个视图函数，UserScope需要访问98个，AdminScope需要访问所有，那么UserScope的编写就太麻烦了，我们可以让我们的Scope 支持排除操作，这样UserScope就可以添加AdminScope的全部，然后再排除掉他不能访问的两个就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Scope:</span><br><span class=\"line\">    allow_api = []</span><br><span class=\"line\">    allow_moudle = []</span><br><span class=\"line\">    forbidden = []</span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\"># 运算符重载，支持对象相加操作</span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">        self.allow_api = list(set(self.allow_api)) # 先转化为set，后转为list 从而去重</span><br><span class=\"line\"></span><br><span class=\"line\">        self.allow_moudle = self.allow_moudle + other.allow_moudle</span><br><span class=\"line\">        self.allow_moudle = list(set(self.allow_moudle))   # 模块级别的相加操作</span><br><span class=\"line\"></span><br><span class=\"line\">        self.forbidden = self.forbidden + other.forbidden</span><br><span class=\"line\">        self.forbidden = list(set(self.forbidden)) </span><br><span class=\"line\">        return self</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class AdminScope(Scope):</span><br><span class=\"line\">    # allow_api = [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]  # 因为是注册在Blueprint上，所以endpoint 前缀为 v1 </span><br><span class=\"line\">    </span><br><span class=\"line\">    allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\">    # def __init__(self):</span><br><span class=\"line\">    #     self + UserScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserScope(Scope):</span><br><span class=\"line\">    forbidden =  [&apos;v1.user+super_get_user&apos;,&apos;v1.user+super_delete_user&apos;]</span><br><span class=\"line\">    # allow_api = [&apos;v1.user+get_user&apos;,&apos;v1.user+delete_user&apos;]</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># class SuperScope(Scope):    # 相加操作</span><br><span class=\"line\">#     allow_api = [&apos;v1.C&apos;,&apos;v1.D&apos;]</span><br><span class=\"line\">#     allow_moudle = [&apos;v1.user&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">#     def __init__(self):</span><br><span class=\"line\">#         self + UserScope() + AdminScope()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    # def add(self, other):</span><br><span class=\"line\">    #     self.allow_api = self.allow_api + other.allow_api</span><br><span class=\"line\">    #     return self  # 将self return不然第二段调用为None.add(),报错</span><br><span class=\"line\"># 提取到基类中，每个都继承这个基类</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前访问的endpoint是否在scope中</span><br><span class=\"line\">def is_in_scope(scope, endpoint):</span><br><span class=\"line\">    # 反射获取类</span><br><span class=\"line\">    scope = globals()[scope]()  # globals使用类的名字动态创建对象</span><br><span class=\"line\">    splits = endpoint.split(&apos;+&apos;)</span><br><span class=\"line\">    red_name = splits[0]</span><br><span class=\"line\">    if endpoint in scope.forbidden:   # 排除</span><br><span class=\"line\">        return False</span><br><span class=\"line\"></span><br><span class=\"line\">    if endpoint in scope.allow_api:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    # v1.view_func  改为v1.moudle_name+view_func  # 改写endpoint</span><br><span class=\"line\">    # 从Redprint 入手  v1.red_name +view_func</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    从   endpoint = options.pop(&quot;endpoint&quot;, f.__name__)</span><br><span class=\"line\">    改为 endpoint = self.name + &apos;+&apos; + options.pop(&quot;endpoint&quot;, f.__name__) # 改成Redprint+视图函数名字</span><br><span class=\"line\">            &apos;&apos;&apos;</span><br><span class=\"line\">    if red_name in scope.allow_moudle:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\"># 首先判断是否在要排除的列表里</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Flask构建可扩展的RESTful-API-8--补充完善","date":"2018-12-18T10:36:16.000Z","_content":"\n\n![直接return q 时](https://upload-images.jianshu.io/upload_images/14597179-430f03fc7686561d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n会报内置错误，因为在body中指定了json格式。可以更改为slient模式\n\n\napp\\validators\\base.py\n```\n\n\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request,jsonify\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        # data = request.json\n        data = request.get_json(silent = True)  #  出现错误，不报异常\n        args = request.args.to_dict()  # 完成查询参数的获取\n        super(BaseForm, self).__init__(data=data,**args)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n        return self\n```\n搜索界面不需要返回全部字段，详情页面则返回全部字段。可以在app\\modles\\book.py中隐藏\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    fields = ['id', 'title', 'author', 'binding',\n                        'publisher',\n                        'price','pages', 'pubdate', 'isbn',\n                        'summary',\n                        'image']\n\n    def keys(self):\n        return self.fields\n\n    def hide(self,key):  \n        self.fields.remove(key)\n        return self\n\n```\n**第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败**\n**因为改动的是类变量**\n改动如下：\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    # fields = ['id', 'title', 'author', 'binding',\n    #                    'publisher',\n    #                    'price','pages', 'pubdate', 'isbn',\n    #                    'summary',\n    #                    'image']\n    \n    '''\n    第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败。\n    因为改动的是类变量,改写如下:\n    '''\n \n    @orm.reconstructor  \n    # 因为通过sqlalchemy创建的构造函数不会被执行，通过这个装饰器构造函数可以执行  \n    # 这就是有追求的啊\n    def __init__(self):\n        self.fields = ['id', 'title', 'author', 'binding',\n                       'publisher',\n                       'price','pages', 'pubdate', 'isbn',\n                       'summary',\n                       'image']   # 定义成实例变量。\n\n    def keys(self):\n        return self.fields\n\n    def hide(self,*keys):  # 支持隐藏多个关键字\n        for key in keys:\n            self.fields.remove(key)\n        return self\n```\n并非只有book模型需要隐藏字段，所以可以提取到base基类中,同理，还可以追加append.\n\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    @orm.reconstructor  \n    def __init__(self):\n        self.fields = ['id', 'title', 'author', 'binding',\n                       'publisher',\n                       'price','pages', 'pubdate', 'isbn',\n                       'summary',\n                       'image']   # 定义成实例变量。\n\n```\napp\\api\\v1\\book.py\n```\nfrom flask import jsonify\nfrom sqlalchemy import or_  # 模糊查询 或\n\nfrom app.libs.redprint import Redprint\nfrom app.models.book import Book\nfrom app.validators.forms import BookSearchForm\n\napi=Redprint('book')\n\n@api.route('/create')\ndef create_book():\n    return 'create_book'\n@api.route('/get')\ndef get_book():\n    return 'get book'\n@api.route('/search')\ndef search():\n    #url http://locahost:5000/v1/book/search?q={}\n    # request.args.to_dict() 在base中完成\n    form = BookSearchForm().validate_for_api() #  完成验证\n    q='%'+form.q.data+'%'  # 模糊搜索前后得加 %\n    # return q\n    books=Book.query.filter(or_(Book.title.like(q),Book.publisher.like(q))).all()  \n#like 指定关键字 q\n    books=[book.hide('summary','id').append('pages') for book in books]   \n# 只 返回指定的 关键字\n    # 隐藏summary，id.追加pages.\n    return jsonify(books)\n\n@api.route('/<int:isbn>/detail')\ndef detail(isbn):\n    book=Book.query.filter_by(isbn=isbn).first_or_404()  \n# detail 中可以返回所有字段\n    return jsonify(book)\n```\n### 新建礼gift模型\napp\\models\\gift.py\n```\nfrom sqlalchemy import Column, String, Boolean, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\n\nfrom app.models.base import Base\n\n\n\nclass Gift(Base):\n    id = Column(Integer, primary_key=True)\n    \n    # 建立和user关系\n    user = relationship('User')\n    uid = Column(Integer, ForeignKey('user.id'))\n\n    isbn = Column(String(15), nullable=False)\n    launched = Column(Boolean, default=False)\n\n```\napp\\api\\v1\\gift.py\n```\nfrom flask import g\n\nfrom app.libs.erro_code import Success, DuplicateGift\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\nfrom app.models.base import db\nfrom app.models.book import Book\nfrom app.models.gift import Gift\n\n# 得去app\\api\\v1\\__init__.py注册到Blueprint\n\napi = Redprint('gift')   \n\n\n@api.route('/<isbn>', methods=['POST'])\n@auth.login_required\ndef create(isbn):\n    uid = g.user.uid  # 拿到当前需要赠送礼物的uid号\n    with db.auto_commit():\n        Book.query.filter_by(isbn=isbn).first_or_404()  #检测是否是在数据库中\n        gift = Gift.query.filter_by(isbn=isbn, uid=uid).first()\n        if gift:   # 检测是否重复\n            raise DuplicateGift()\n        gift = Gift()\n        gift.isbn = isbn\n        gift.uid = uid\n        db.session.add(gift)\n    return Success()\n\n```\n为token新增一个接口验证是否过期\n```\n@api.route('/secret', methods=['POST'])\ndef get_token_info():\n    \"\"\"获取令牌信息\"\"\"\n    form = TokenForm().validate_for_api()\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(form.token.data, return_header=True)  # 不报错就是合法的token\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n    except BadSignature:\n        raise AuthFailed(msg='token is invalid', erro_code=1002)\n\n    r = {\n        'scope': data[0]['scope'],\n        'create_at': data[1]['iat'],  # 创建时间\n        'expire_in': data[1]['exp'],   # 过期时间\n        'uid': data[0]['uid']\n    } # 把令牌信息读取出来，以明文方式返回到客户端去\n    # 自定义返回字段，甚至不返回，只提供验证功能\n    return jsonify(r)\n```\n![](https://upload-images.jianshu.io/upload_images/14597179-66943d92f81d0cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-a5d2f999a87ddc3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/flask-api/Flask构建可扩展的RESTful-API-8--补充完善.md","raw":"---\ntitle: Flask构建可扩展的RESTful-API-8--补充完善\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n\n\n![直接return q 时](https://upload-images.jianshu.io/upload_images/14597179-430f03fc7686561d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n会报内置错误，因为在body中指定了json格式。可以更改为slient模式\n\n\napp\\validators\\base.py\n```\n\n\nfrom wtforms import Form\nfrom app.libs.erro_code import ParameterException\nfrom flask import request,jsonify\n\nclass BaseForm(Form):\n    # def __init__(self, data):\n    def __init__(self):\n        # data = request.json\n        data = request.get_json(silent = True)  #  出现错误，不报异常\n        args = request.args.to_dict()  # 完成查询参数的获取\n        super(BaseForm, self).__init__(data=data,**args)   # 调用父类构造函数\n\n    def validate_for_api(self):\n        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过\n        if not valid:   # 没通过\n            # 所有异常类信息在form errors 中 \n            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类\n        return self\n```\n搜索界面不需要返回全部字段，详情页面则返回全部字段。可以在app\\modles\\book.py中隐藏\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    fields = ['id', 'title', 'author', 'binding',\n                        'publisher',\n                        'price','pages', 'pubdate', 'isbn',\n                        'summary',\n                        'image']\n\n    def keys(self):\n        return self.fields\n\n    def hide(self,key):  \n        self.fields.remove(key)\n        return self\n\n```\n**第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败**\n**因为改动的是类变量**\n改动如下：\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    # fields = ['id', 'title', 'author', 'binding',\n    #                    'publisher',\n    #                    'price','pages', 'pubdate', 'isbn',\n    #                    'summary',\n    #                    'image']\n    \n    '''\n    第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败。\n    因为改动的是类变量,改写如下:\n    '''\n \n    @orm.reconstructor  \n    # 因为通过sqlalchemy创建的构造函数不会被执行，通过这个装饰器构造函数可以执行  \n    # 这就是有追求的啊\n    def __init__(self):\n        self.fields = ['id', 'title', 'author', 'binding',\n                       'publisher',\n                       'price','pages', 'pubdate', 'isbn',\n                       'summary',\n                       'image']   # 定义成实例变量。\n\n    def keys(self):\n        return self.fields\n\n    def hide(self,*keys):  # 支持隐藏多个关键字\n        for key in keys:\n            self.fields.remove(key)\n        return self\n```\n并非只有book模型需要隐藏字段，所以可以提取到base基类中,同理，还可以追加append.\n\n```\nfrom sqlalchemy import Column, String, Integer, orm\n\nfrom app.models.base import Base\n\n\n\nclass Book(Base):\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(50), nullable=False)\n    author = Column(String(30), default='未名')\n    binding = Column(String(20))\n    publisher = Column(String(50))\n    price = Column(String(20))\n    pages = Column(Integer)\n    pubdate = Column(String(20))\n    isbn = Column(String(15), nullable=False, unique=True)\n    summary = Column(String(1000))\n    image = Column(String(50))\n\n    @orm.reconstructor  \n    def __init__(self):\n        self.fields = ['id', 'title', 'author', 'binding',\n                       'publisher',\n                       'price','pages', 'pubdate', 'isbn',\n                       'summary',\n                       'image']   # 定义成实例变量。\n\n```\napp\\api\\v1\\book.py\n```\nfrom flask import jsonify\nfrom sqlalchemy import or_  # 模糊查询 或\n\nfrom app.libs.redprint import Redprint\nfrom app.models.book import Book\nfrom app.validators.forms import BookSearchForm\n\napi=Redprint('book')\n\n@api.route('/create')\ndef create_book():\n    return 'create_book'\n@api.route('/get')\ndef get_book():\n    return 'get book'\n@api.route('/search')\ndef search():\n    #url http://locahost:5000/v1/book/search?q={}\n    # request.args.to_dict() 在base中完成\n    form = BookSearchForm().validate_for_api() #  完成验证\n    q='%'+form.q.data+'%'  # 模糊搜索前后得加 %\n    # return q\n    books=Book.query.filter(or_(Book.title.like(q),Book.publisher.like(q))).all()  \n#like 指定关键字 q\n    books=[book.hide('summary','id').append('pages') for book in books]   \n# 只 返回指定的 关键字\n    # 隐藏summary，id.追加pages.\n    return jsonify(books)\n\n@api.route('/<int:isbn>/detail')\ndef detail(isbn):\n    book=Book.query.filter_by(isbn=isbn).first_or_404()  \n# detail 中可以返回所有字段\n    return jsonify(book)\n```\n### 新建礼gift模型\napp\\models\\gift.py\n```\nfrom sqlalchemy import Column, String, Boolean, Integer, ForeignKey\nfrom sqlalchemy.orm import relationship\n\nfrom app.models.base import Base\n\n\n\nclass Gift(Base):\n    id = Column(Integer, primary_key=True)\n    \n    # 建立和user关系\n    user = relationship('User')\n    uid = Column(Integer, ForeignKey('user.id'))\n\n    isbn = Column(String(15), nullable=False)\n    launched = Column(Boolean, default=False)\n\n```\napp\\api\\v1\\gift.py\n```\nfrom flask import g\n\nfrom app.libs.erro_code import Success, DuplicateGift\nfrom app.libs.redprint import Redprint\nfrom app.libs.token_auth import auth\nfrom app.models.base import db\nfrom app.models.book import Book\nfrom app.models.gift import Gift\n\n# 得去app\\api\\v1\\__init__.py注册到Blueprint\n\napi = Redprint('gift')   \n\n\n@api.route('/<isbn>', methods=['POST'])\n@auth.login_required\ndef create(isbn):\n    uid = g.user.uid  # 拿到当前需要赠送礼物的uid号\n    with db.auto_commit():\n        Book.query.filter_by(isbn=isbn).first_or_404()  #检测是否是在数据库中\n        gift = Gift.query.filter_by(isbn=isbn, uid=uid).first()\n        if gift:   # 检测是否重复\n            raise DuplicateGift()\n        gift = Gift()\n        gift.isbn = isbn\n        gift.uid = uid\n        db.session.add(gift)\n    return Success()\n\n```\n为token新增一个接口验证是否过期\n```\n@api.route('/secret', methods=['POST'])\ndef get_token_info():\n    \"\"\"获取令牌信息\"\"\"\n    form = TokenForm().validate_for_api()\n    s = Serializer(current_app.config['SECRET_KEY'])\n    try:\n        data = s.loads(form.token.data, return_header=True)  # 不报错就是合法的token\n    except SignatureExpired:\n        raise AuthFailed(msg='token is expired', erro_code=1003)\n    except BadSignature:\n        raise AuthFailed(msg='token is invalid', erro_code=1002)\n\n    r = {\n        'scope': data[0]['scope'],\n        'create_at': data[1]['iat'],  # 创建时间\n        'expire_in': data[1]['exp'],   # 过期时间\n        'uid': data[0]['uid']\n    } # 把令牌信息读取出来，以明文方式返回到客户端去\n    # 自定义返回字段，甚至不返回，只提供验证功能\n    return jsonify(r)\n```\n![](https://upload-images.jianshu.io/upload_images/14597179-66943d92f81d0cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-a5d2f999a87ddc3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"flask-api/Flask构建可扩展的RESTful-API-8--补充完善","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oy0001jtssamk9lyt59","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-430f03fc7686561d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"直接return q 时\"></p>\n<p>会报内置错误，因为在body中指定了json格式。可以更改为slient模式</p>\n<p>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request,jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        # data = request.json</span><br><span class=\"line\">        data = request.get_json(silent = True)  #  出现错误，不报异常</span><br><span class=\"line\">        args = request.args.to_dict()  # 完成查询参数的获取</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data,**args)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>搜索界面不需要返回全部字段，详情页面则返回全部字段。可以在app\\modles\\book.py中隐藏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                        &apos;publisher&apos;,</span><br><span class=\"line\">                        &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                        &apos;summary&apos;,</span><br><span class=\"line\">                        &apos;image&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">    def hide(self,key):  </span><br><span class=\"line\">        self.fields.remove(key)</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p><strong>第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败</strong><br><strong>因为改动的是类变量</strong><br>改动如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    # fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">    #                    &apos;publisher&apos;,</span><br><span class=\"line\">    #                    &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">    #                    &apos;summary&apos;,</span><br><span class=\"line\">    #                    &apos;image&apos;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败。</span><br><span class=\"line\">    因为改动的是类变量,改写如下:</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @orm.reconstructor  </span><br><span class=\"line\">    # 因为通过sqlalchemy创建的构造函数不会被执行，通过这个装饰器构造函数可以执行  </span><br><span class=\"line\">    # 这就是有追求的啊</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                       &apos;publisher&apos;,</span><br><span class=\"line\">                       &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                       &apos;summary&apos;,</span><br><span class=\"line\">                       &apos;image&apos;]   # 定义成实例变量。</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">    def hide(self,*keys):  # 支持隐藏多个关键字</span><br><span class=\"line\">        for key in keys:</span><br><span class=\"line\">            self.fields.remove(key)</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>并非只有book模型需要隐藏字段，所以可以提取到base基类中,同理，还可以追加append.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    @orm.reconstructor  </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                       &apos;publisher&apos;,</span><br><span class=\"line\">                       &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                       &apos;summary&apos;,</span><br><span class=\"line\">                       &apos;image&apos;]   # 定义成实例变量。</span><br></pre></td></tr></table></figure>\n<p>app\\api\\v1\\book.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import jsonify</span><br><span class=\"line\">from sqlalchemy import or_  # 模糊查询 或</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.models.book import Book</span><br><span class=\"line\">from app.validators.forms import BookSearchForm</span><br><span class=\"line\"></span><br><span class=\"line\">api=Redprint(&apos;book&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_book():</span><br><span class=\"line\">    return &apos;create_book&apos;</span><br><span class=\"line\">@api.route(&apos;/get&apos;)</span><br><span class=\"line\">def get_book():</span><br><span class=\"line\">    return &apos;get book&apos;</span><br><span class=\"line\">@api.route(&apos;/search&apos;)</span><br><span class=\"line\">def search():</span><br><span class=\"line\">    #url http://locahost:5000/v1/book/search?q=&#123;&#125;</span><br><span class=\"line\">    # request.args.to_dict() 在base中完成</span><br><span class=\"line\">    form = BookSearchForm().validate_for_api() #  完成验证</span><br><span class=\"line\">    q=&apos;%&apos;+form.q.data+&apos;%&apos;  # 模糊搜索前后得加 %</span><br><span class=\"line\">    # return q</span><br><span class=\"line\">    books=Book.query.filter(or_(Book.title.like(q),Book.publisher.like(q))).all()  </span><br><span class=\"line\">#like 指定关键字 q</span><br><span class=\"line\">    books=[book.hide(&apos;summary&apos;,&apos;id&apos;).append(&apos;pages&apos;) for book in books]   </span><br><span class=\"line\"># 只 返回指定的 关键字</span><br><span class=\"line\">    # 隐藏summary，id.追加pages.</span><br><span class=\"line\">    return jsonify(books)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/&lt;int:isbn&gt;/detail&apos;)</span><br><span class=\"line\">def detail(isbn):</span><br><span class=\"line\">    book=Book.query.filter_by(isbn=isbn).first_or_404()  </span><br><span class=\"line\"># detail 中可以返回所有字段</span><br><span class=\"line\">    return jsonify(book)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新建礼gift模型\"><a href=\"#新建礼gift模型\" class=\"headerlink\" title=\"新建礼gift模型\"></a>新建礼gift模型</h3><p>app\\models\\gift.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Boolean, Integer, ForeignKey</span><br><span class=\"line\">from sqlalchemy.orm import relationship</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Gift(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立和user关系</span><br><span class=\"line\">    user = relationship(&apos;User&apos;)</span><br><span class=\"line\">    uid = Column(Integer, ForeignKey(&apos;user.id&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    isbn = Column(String(15), nullable=False)</span><br><span class=\"line\">    launched = Column(Boolean, default=False)</span><br></pre></td></tr></table></figure></p>\n<p>app\\api\\v1\\gift.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import g</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import Success, DuplicateGift</span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from app.models.book import Book</span><br><span class=\"line\">from app.models.gift import Gift</span><br><span class=\"line\"></span><br><span class=\"line\"># 得去app\\api\\v1\\__init__.py注册到Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;gift&apos;)   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/&lt;isbn&gt;&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def create(isbn):</span><br><span class=\"line\">    uid = g.user.uid  # 拿到当前需要赠送礼物的uid号</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        Book.query.filter_by(isbn=isbn).first_or_404()  #检测是否是在数据库中</span><br><span class=\"line\">        gift = Gift.query.filter_by(isbn=isbn, uid=uid).first()</span><br><span class=\"line\">        if gift:   # 检测是否重复</span><br><span class=\"line\">            raise DuplicateGift()</span><br><span class=\"line\">        gift = Gift()</span><br><span class=\"line\">        gift.isbn = isbn</span><br><span class=\"line\">        gift.uid = uid</span><br><span class=\"line\">        db.session.add(gift)</span><br><span class=\"line\">    return Success()</span><br></pre></td></tr></table></figure></p>\n<p>为token新增一个接口验证是否过期<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/secret&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">def get_token_info():</span><br><span class=\"line\">    &quot;&quot;&quot;获取令牌信息&quot;&quot;&quot;</span><br><span class=\"line\">    form = TokenForm().validate_for_api()</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(form.token.data, return_header=True)  # 不报错就是合法的token</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is invalid&apos;, erro_code=1002)</span><br><span class=\"line\"></span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;scope&apos;: data[0][&apos;scope&apos;],</span><br><span class=\"line\">        &apos;create_at&apos;: data[1][&apos;iat&apos;],  # 创建时间</span><br><span class=\"line\">        &apos;expire_in&apos;: data[1][&apos;exp&apos;],   # 过期时间</span><br><span class=\"line\">        &apos;uid&apos;: data[0][&apos;uid&apos;]</span><br><span class=\"line\">    &#125; # 把令牌信息读取出来，以明文方式返回到客户端去</span><br><span class=\"line\">    # 自定义返回字段，甚至不返回，只提供验证功能</span><br><span class=\"line\">    return jsonify(r)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-66943d92f81d0cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a5d2f999a87ddc3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-430f03fc7686561d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"直接return q 时\"></p>\n<p>会报内置错误，因为在body中指定了json格式。可以更改为slient模式</p>\n<p>app\\validators\\base.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from wtforms import Form</span><br><span class=\"line\">from app.libs.erro_code import ParameterException</span><br><span class=\"line\">from flask import request,jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">class BaseForm(Form):</span><br><span class=\"line\">    # def __init__(self, data):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        # data = request.json</span><br><span class=\"line\">        data = request.get_json(silent = True)  #  出现错误，不报异常</span><br><span class=\"line\">        args = request.args.to_dict()  # 完成查询参数的获取</span><br><span class=\"line\">        super(BaseForm, self).__init__(data=data,**args)   # 调用父类构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">    def validate_for_api(self):</span><br><span class=\"line\">        valid = super(BaseForm, self).validate()  # 调用父类的构造方法 # 验证是否通过</span><br><span class=\"line\">        if not valid:   # 没通过</span><br><span class=\"line\">            # 所有异常类信息在form errors 中 </span><br><span class=\"line\">            raise ParameterException(msg=self.errors) #  抛出异常  # 公共的自定义异常类</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>搜索界面不需要返回全部字段，详情页面则返回全部字段。可以在app\\modles\\book.py中隐藏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                        &apos;publisher&apos;,</span><br><span class=\"line\">                        &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                        &apos;summary&apos;,</span><br><span class=\"line\">                        &apos;image&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">    def hide(self,key):  </span><br><span class=\"line\">        self.fields.remove(key)</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p><strong>第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败</strong><br><strong>因为改动的是类变量</strong><br>改动如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    # fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">    #                    &apos;publisher&apos;,</span><br><span class=\"line\">    #                    &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">    #                    &apos;summary&apos;,</span><br><span class=\"line\">    #                    &apos;image&apos;]</span><br><span class=\"line\">    </span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    第一次能够隐藏成功，而第二次会受到第一次的影响从而隐藏失败。</span><br><span class=\"line\">    因为改动的是类变量,改写如下:</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @orm.reconstructor  </span><br><span class=\"line\">    # 因为通过sqlalchemy创建的构造函数不会被执行，通过这个装饰器构造函数可以执行  </span><br><span class=\"line\">    # 这就是有追求的啊</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                       &apos;publisher&apos;,</span><br><span class=\"line\">                       &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                       &apos;summary&apos;,</span><br><span class=\"line\">                       &apos;image&apos;]   # 定义成实例变量。</span><br><span class=\"line\"></span><br><span class=\"line\">    def keys(self):</span><br><span class=\"line\">        return self.fields</span><br><span class=\"line\"></span><br><span class=\"line\">    def hide(self,*keys):  # 支持隐藏多个关键字</span><br><span class=\"line\">        for key in keys:</span><br><span class=\"line\">            self.fields.remove(key)</span><br><span class=\"line\">        return self</span><br></pre></td></tr></table></figure></p>\n<p>并非只有book模型需要隐藏字段，所以可以提取到base基类中,同理，还可以追加append.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Integer, orm</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Book(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = Column(String(50), nullable=False)</span><br><span class=\"line\">    author = Column(String(30), default=&apos;未名&apos;)</span><br><span class=\"line\">    binding = Column(String(20))</span><br><span class=\"line\">    publisher = Column(String(50))</span><br><span class=\"line\">    price = Column(String(20))</span><br><span class=\"line\">    pages = Column(Integer)</span><br><span class=\"line\">    pubdate = Column(String(20))</span><br><span class=\"line\">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class=\"line\">    summary = Column(String(1000))</span><br><span class=\"line\">    image = Column(String(50))</span><br><span class=\"line\"></span><br><span class=\"line\">    @orm.reconstructor  </span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.fields = [&apos;id&apos;, &apos;title&apos;, &apos;author&apos;, &apos;binding&apos;,</span><br><span class=\"line\">                       &apos;publisher&apos;,</span><br><span class=\"line\">                       &apos;price&apos;,&apos;pages&apos;, &apos;pubdate&apos;, &apos;isbn&apos;,</span><br><span class=\"line\">                       &apos;summary&apos;,</span><br><span class=\"line\">                       &apos;image&apos;]   # 定义成实例变量。</span><br></pre></td></tr></table></figure>\n<p>app\\api\\v1\\book.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import jsonify</span><br><span class=\"line\">from sqlalchemy import or_  # 模糊查询 或</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.models.book import Book</span><br><span class=\"line\">from app.validators.forms import BookSearchForm</span><br><span class=\"line\"></span><br><span class=\"line\">api=Redprint(&apos;book&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/create&apos;)</span><br><span class=\"line\">def create_book():</span><br><span class=\"line\">    return &apos;create_book&apos;</span><br><span class=\"line\">@api.route(&apos;/get&apos;)</span><br><span class=\"line\">def get_book():</span><br><span class=\"line\">    return &apos;get book&apos;</span><br><span class=\"line\">@api.route(&apos;/search&apos;)</span><br><span class=\"line\">def search():</span><br><span class=\"line\">    #url http://locahost:5000/v1/book/search?q=&#123;&#125;</span><br><span class=\"line\">    # request.args.to_dict() 在base中完成</span><br><span class=\"line\">    form = BookSearchForm().validate_for_api() #  完成验证</span><br><span class=\"line\">    q=&apos;%&apos;+form.q.data+&apos;%&apos;  # 模糊搜索前后得加 %</span><br><span class=\"line\">    # return q</span><br><span class=\"line\">    books=Book.query.filter(or_(Book.title.like(q),Book.publisher.like(q))).all()  </span><br><span class=\"line\">#like 指定关键字 q</span><br><span class=\"line\">    books=[book.hide(&apos;summary&apos;,&apos;id&apos;).append(&apos;pages&apos;) for book in books]   </span><br><span class=\"line\"># 只 返回指定的 关键字</span><br><span class=\"line\">    # 隐藏summary，id.追加pages.</span><br><span class=\"line\">    return jsonify(books)</span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/&lt;int:isbn&gt;/detail&apos;)</span><br><span class=\"line\">def detail(isbn):</span><br><span class=\"line\">    book=Book.query.filter_by(isbn=isbn).first_or_404()  </span><br><span class=\"line\"># detail 中可以返回所有字段</span><br><span class=\"line\">    return jsonify(book)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"新建礼gift模型\"><a href=\"#新建礼gift模型\" class=\"headerlink\" title=\"新建礼gift模型\"></a>新建礼gift模型</h3><p>app\\models\\gift.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sqlalchemy import Column, String, Boolean, Integer, ForeignKey</span><br><span class=\"line\">from sqlalchemy.orm import relationship</span><br><span class=\"line\"></span><br><span class=\"line\">from app.models.base import Base</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Gift(Base):</span><br><span class=\"line\">    id = Column(Integer, primary_key=True)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立和user关系</span><br><span class=\"line\">    user = relationship(&apos;User&apos;)</span><br><span class=\"line\">    uid = Column(Integer, ForeignKey(&apos;user.id&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    isbn = Column(String(15), nullable=False)</span><br><span class=\"line\">    launched = Column(Boolean, default=False)</span><br></pre></td></tr></table></figure></p>\n<p>app\\api\\v1\\gift.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import g</span><br><span class=\"line\"></span><br><span class=\"line\">from app.libs.erro_code import Success, DuplicateGift</span><br><span class=\"line\">from app.libs.redprint import Redprint</span><br><span class=\"line\">from app.libs.token_auth import auth</span><br><span class=\"line\">from app.models.base import db</span><br><span class=\"line\">from app.models.book import Book</span><br><span class=\"line\">from app.models.gift import Gift</span><br><span class=\"line\"></span><br><span class=\"line\"># 得去app\\api\\v1\\__init__.py注册到Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">api = Redprint(&apos;gift&apos;)   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@api.route(&apos;/&lt;isbn&gt;&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">@auth.login_required</span><br><span class=\"line\">def create(isbn):</span><br><span class=\"line\">    uid = g.user.uid  # 拿到当前需要赠送礼物的uid号</span><br><span class=\"line\">    with db.auto_commit():</span><br><span class=\"line\">        Book.query.filter_by(isbn=isbn).first_or_404()  #检测是否是在数据库中</span><br><span class=\"line\">        gift = Gift.query.filter_by(isbn=isbn, uid=uid).first()</span><br><span class=\"line\">        if gift:   # 检测是否重复</span><br><span class=\"line\">            raise DuplicateGift()</span><br><span class=\"line\">        gift = Gift()</span><br><span class=\"line\">        gift.isbn = isbn</span><br><span class=\"line\">        gift.uid = uid</span><br><span class=\"line\">        db.session.add(gift)</span><br><span class=\"line\">    return Success()</span><br></pre></td></tr></table></figure></p>\n<p>为token新增一个接口验证是否过期<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@api.route(&apos;/secret&apos;, methods=[&apos;POST&apos;])</span><br><span class=\"line\">def get_token_info():</span><br><span class=\"line\">    &quot;&quot;&quot;获取令牌信息&quot;&quot;&quot;</span><br><span class=\"line\">    form = TokenForm().validate_for_api()</span><br><span class=\"line\">    s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data = s.loads(form.token.data, return_header=True)  # 不报错就是合法的token</span><br><span class=\"line\">    except SignatureExpired:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is expired&apos;, erro_code=1003)</span><br><span class=\"line\">    except BadSignature:</span><br><span class=\"line\">        raise AuthFailed(msg=&apos;token is invalid&apos;, erro_code=1002)</span><br><span class=\"line\"></span><br><span class=\"line\">    r = &#123;</span><br><span class=\"line\">        &apos;scope&apos;: data[0][&apos;scope&apos;],</span><br><span class=\"line\">        &apos;create_at&apos;: data[1][&apos;iat&apos;],  # 创建时间</span><br><span class=\"line\">        &apos;expire_in&apos;: data[1][&apos;exp&apos;],   # 过期时间</span><br><span class=\"line\">        &apos;uid&apos;: data[0][&apos;uid&apos;]</span><br><span class=\"line\">    &#125; # 把令牌信息读取出来，以明文方式返回到客户端去</span><br><span class=\"line\">    # 自定义返回字段，甚至不返回，只提供验证功能</span><br><span class=\"line\">    return jsonify(r)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-66943d92f81d0cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a5d2f999a87ddc3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"环境准备与自动卸载部署","date":"2019-05-13T02:51:16.000Z","_content":"## 记录原因\n**上个月为了减轻自己的工作量，将日常部署工作进行了流程化处理**\n后来根据上级的要求，做了一个全自动化的安装卸载脚本，做完之后，给我提了如下修改意见。\n因为本人又喜欢分享。**但因保密要求，提供的并非完整代码，只是一种示意。**\n[github地址](https://github.com/itswl/work)\n\n### 主要功能\n1. 环境的一键搭建\n2. xx的一键部署\n3. xx的自动部署卸载\nxx部署，部署成功一个小时后，自动卸载后重新部署。如果部署失败，则停止部署。\n(还可以扩展，部署失败自动发邮件等)\n\n### 遇到的主要问题\n\n1. 密码问题(写入到配置文件当中，后续可以进行加密后写入配置文件)\n2. 后台命令，不能read终端输出的问题（用python传入密码，读出解决）\n3. 集群卸载问题（从配置文件中利用正则筛选出集群ip，scp传送文件，ssh执行命令，然后用pexcept解决password以及yes/no的输入。）\n（利用paramiko更加容易，但尽量使用python原生方式）\n4. 自动脚本的停止（对linux 的kill -9 进行了一下封装，统一调用）\n5. 简化使用问题（使用try,except对调用进行提示，尽量减少别人查看使用方法）\n\n### 检视意见\n1. 重复卸载，需要提供提示\n2. 工具运行脚本需简化，提供统一调用接口，接口用法需要提示用户\n3. 工具使用文档内容离散难懂，需要整理说明\n4. 工具代码中增加异常保护和处理\n5. 判断安装是否成功不应该读取日志，而是通过调用脚本返回值判断\n6. xx安装完成后，需要增加判断xx是否能使用\n7. 提供安装策略文件，支持以不同方式安装xx，比如：双平面, 单机, 集群, 多操作系统等\n8. 系统命令统一使用shell脚本，便于修改\n9. 工具需要屏蔽xx版本差异\n10. root节点的密码需要加密保存\n11. 安装过程信息需要记录到日志中\n12. python代码中增加异常保护\n13. 整个工具按照通用的方式去排查，硬编码的内容建议抽取放置到配置文件中\n\n检视的代码，是因为最初只是想完成功能，就面向过程写的，最后要兼容不同的部署方式，以及未来的扩展需求，于是改用面向对象\n**虽然以面向对象的方式写脚本有点刻意，但以面向过程的方式，不易扩展，改写困难，加上训练一下自己，所以改写**。\n\n### 环境准备\n详情见：\n[setting.py](https://github.com/itswl/work/blob/master/setting.py)\n[upload.py](https://github.com/itswl/work/blob/master/upload.py)\n\n### 安装部署\n详情见：\n[部署卸载](https://github.com/itswl/work/blob/master/new/deploy.py)\n[自动部署卸载](https://github.com/itswl/work/blob/master/new/auto_deploy.py)\n","source":"_posts/work/自动部署.md","raw":"---\n\ntitle: 环境准备与自动卸载部署\n\ndate: 2019-5-13 10:51:16\n\ntags:\n\ncategories: work\n\n---\n## 记录原因\n**上个月为了减轻自己的工作量，将日常部署工作进行了流程化处理**\n后来根据上级的要求，做了一个全自动化的安装卸载脚本，做完之后，给我提了如下修改意见。\n因为本人又喜欢分享。**但因保密要求，提供的并非完整代码，只是一种示意。**\n[github地址](https://github.com/itswl/work)\n\n### 主要功能\n1. 环境的一键搭建\n2. xx的一键部署\n3. xx的自动部署卸载\nxx部署，部署成功一个小时后，自动卸载后重新部署。如果部署失败，则停止部署。\n(还可以扩展，部署失败自动发邮件等)\n\n### 遇到的主要问题\n\n1. 密码问题(写入到配置文件当中，后续可以进行加密后写入配置文件)\n2. 后台命令，不能read终端输出的问题（用python传入密码，读出解决）\n3. 集群卸载问题（从配置文件中利用正则筛选出集群ip，scp传送文件，ssh执行命令，然后用pexcept解决password以及yes/no的输入。）\n（利用paramiko更加容易，但尽量使用python原生方式）\n4. 自动脚本的停止（对linux 的kill -9 进行了一下封装，统一调用）\n5. 简化使用问题（使用try,except对调用进行提示，尽量减少别人查看使用方法）\n\n### 检视意见\n1. 重复卸载，需要提供提示\n2. 工具运行脚本需简化，提供统一调用接口，接口用法需要提示用户\n3. 工具使用文档内容离散难懂，需要整理说明\n4. 工具代码中增加异常保护和处理\n5. 判断安装是否成功不应该读取日志，而是通过调用脚本返回值判断\n6. xx安装完成后，需要增加判断xx是否能使用\n7. 提供安装策略文件，支持以不同方式安装xx，比如：双平面, 单机, 集群, 多操作系统等\n8. 系统命令统一使用shell脚本，便于修改\n9. 工具需要屏蔽xx版本差异\n10. root节点的密码需要加密保存\n11. 安装过程信息需要记录到日志中\n12. python代码中增加异常保护\n13. 整个工具按照通用的方式去排查，硬编码的内容建议抽取放置到配置文件中\n\n检视的代码，是因为最初只是想完成功能，就面向过程写的，最后要兼容不同的部署方式，以及未来的扩展需求，于是改用面向对象\n**虽然以面向对象的方式写脚本有点刻意，但以面向过程的方式，不易扩展，改写困难，加上训练一下自己，所以改写**。\n\n### 环境准备\n详情见：\n[setting.py](https://github.com/itswl/work/blob/master/setting.py)\n[upload.py](https://github.com/itswl/work/blob/master/upload.py)\n\n### 安装部署\n详情见：\n[部署卸载](https://github.com/itswl/work/blob/master/new/deploy.py)\n[自动部署卸载](https://github.com/itswl/work/blob/master/new/auto_deploy.py)\n","slug":"work/自动部署","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oy1001mtssaqmavy698","content":"<h2 id=\"记录原因\"><a href=\"#记录原因\" class=\"headerlink\" title=\"记录原因\"></a>记录原因</h2><p><strong>上个月为了减轻自己的工作量，将日常部署工作进行了流程化处理</strong><br>后来根据上级的要求，做了一个全自动化的安装卸载脚本，做完之后，给我提了如下修改意见。<br>因为本人又喜欢分享。<strong>但因保密要求，提供的并非完整代码，只是一种示意。</strong><br><a href=\"https://github.com/itswl/work\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ol>\n<li>环境的一键搭建</li>\n<li>xx的一键部署</li>\n<li>xx的自动部署卸载<br>xx部署，部署成功一个小时后，自动卸载后重新部署。如果部署失败，则停止部署。<br>(还可以扩展，部署失败自动发邮件等)</li>\n</ol>\n<h3 id=\"遇到的主要问题\"><a href=\"#遇到的主要问题\" class=\"headerlink\" title=\"遇到的主要问题\"></a>遇到的主要问题</h3><ol>\n<li>密码问题(写入到配置文件当中，后续可以进行加密后写入配置文件)</li>\n<li>后台命令，不能read终端输出的问题（用python传入密码，读出解决）</li>\n<li>集群卸载问题（从配置文件中利用正则筛选出集群ip，scp传送文件，ssh执行命令，然后用pexcept解决password以及yes/no的输入。）<br>（利用paramiko更加容易，但尽量使用python原生方式）</li>\n<li>自动脚本的停止（对linux 的kill -9 进行了一下封装，统一调用）</li>\n<li>简化使用问题（使用try,except对调用进行提示，尽量减少别人查看使用方法）</li>\n</ol>\n<h3 id=\"检视意见\"><a href=\"#检视意见\" class=\"headerlink\" title=\"检视意见\"></a>检视意见</h3><ol>\n<li>重复卸载，需要提供提示</li>\n<li>工具运行脚本需简化，提供统一调用接口，接口用法需要提示用户</li>\n<li>工具使用文档内容离散难懂，需要整理说明</li>\n<li>工具代码中增加异常保护和处理</li>\n<li>判断安装是否成功不应该读取日志，而是通过调用脚本返回值判断</li>\n<li>xx安装完成后，需要增加判断xx是否能使用</li>\n<li>提供安装策略文件，支持以不同方式安装xx，比如：双平面, 单机, 集群, 多操作系统等</li>\n<li>系统命令统一使用shell脚本，便于修改</li>\n<li>工具需要屏蔽xx版本差异</li>\n<li>root节点的密码需要加密保存</li>\n<li>安装过程信息需要记录到日志中</li>\n<li>python代码中增加异常保护</li>\n<li>整个工具按照通用的方式去排查，硬编码的内容建议抽取放置到配置文件中</li>\n</ol>\n<p>检视的代码，是因为最初只是想完成功能，就面向过程写的，最后要兼容不同的部署方式，以及未来的扩展需求，于是改用面向对象<br><strong>虽然以面向对象的方式写脚本有点刻意，但以面向过程的方式，不易扩展，改写困难，加上训练一下自己，所以改写</strong>。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>详情见：<br><a href=\"https://github.com/itswl/work/blob/master/setting.py\" target=\"_blank\" rel=\"noopener\">setting.py</a><br><a href=\"https://github.com/itswl/work/blob/master/upload.py\" target=\"_blank\" rel=\"noopener\">upload.py</a></p>\n<h3 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h3><p>详情见：<br><a href=\"https://github.com/itswl/work/blob/master/new/deploy.py\" target=\"_blank\" rel=\"noopener\">部署卸载</a><br><a href=\"https://github.com/itswl/work/blob/master/new/auto_deploy.py\" target=\"_blank\" rel=\"noopener\">自动部署卸载</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记录原因\"><a href=\"#记录原因\" class=\"headerlink\" title=\"记录原因\"></a>记录原因</h2><p><strong>上个月为了减轻自己的工作量，将日常部署工作进行了流程化处理</strong><br>后来根据上级的要求，做了一个全自动化的安装卸载脚本，做完之后，给我提了如下修改意见。<br>因为本人又喜欢分享。<strong>但因保密要求，提供的并非完整代码，只是一种示意。</strong><br><a href=\"https://github.com/itswl/work\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><ol>\n<li>环境的一键搭建</li>\n<li>xx的一键部署</li>\n<li>xx的自动部署卸载<br>xx部署，部署成功一个小时后，自动卸载后重新部署。如果部署失败，则停止部署。<br>(还可以扩展，部署失败自动发邮件等)</li>\n</ol>\n<h3 id=\"遇到的主要问题\"><a href=\"#遇到的主要问题\" class=\"headerlink\" title=\"遇到的主要问题\"></a>遇到的主要问题</h3><ol>\n<li>密码问题(写入到配置文件当中，后续可以进行加密后写入配置文件)</li>\n<li>后台命令，不能read终端输出的问题（用python传入密码，读出解决）</li>\n<li>集群卸载问题（从配置文件中利用正则筛选出集群ip，scp传送文件，ssh执行命令，然后用pexcept解决password以及yes/no的输入。）<br>（利用paramiko更加容易，但尽量使用python原生方式）</li>\n<li>自动脚本的停止（对linux 的kill -9 进行了一下封装，统一调用）</li>\n<li>简化使用问题（使用try,except对调用进行提示，尽量减少别人查看使用方法）</li>\n</ol>\n<h3 id=\"检视意见\"><a href=\"#检视意见\" class=\"headerlink\" title=\"检视意见\"></a>检视意见</h3><ol>\n<li>重复卸载，需要提供提示</li>\n<li>工具运行脚本需简化，提供统一调用接口，接口用法需要提示用户</li>\n<li>工具使用文档内容离散难懂，需要整理说明</li>\n<li>工具代码中增加异常保护和处理</li>\n<li>判断安装是否成功不应该读取日志，而是通过调用脚本返回值判断</li>\n<li>xx安装完成后，需要增加判断xx是否能使用</li>\n<li>提供安装策略文件，支持以不同方式安装xx，比如：双平面, 单机, 集群, 多操作系统等</li>\n<li>系统命令统一使用shell脚本，便于修改</li>\n<li>工具需要屏蔽xx版本差异</li>\n<li>root节点的密码需要加密保存</li>\n<li>安装过程信息需要记录到日志中</li>\n<li>python代码中增加异常保护</li>\n<li>整个工具按照通用的方式去排查，硬编码的内容建议抽取放置到配置文件中</li>\n</ol>\n<p>检视的代码，是因为最初只是想完成功能，就面向过程写的，最后要兼容不同的部署方式，以及未来的扩展需求，于是改用面向对象<br><strong>虽然以面向对象的方式写脚本有点刻意，但以面向过程的方式，不易扩展，改写困难，加上训练一下自己，所以改写</strong>。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>详情见：<br><a href=\"https://github.com/itswl/work/blob/master/setting.py\" target=\"_blank\" rel=\"noopener\">setting.py</a><br><a href=\"https://github.com/itswl/work/blob/master/upload.py\" target=\"_blank\" rel=\"noopener\">upload.py</a></p>\n<h3 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h3><p>详情见：<br><a href=\"https://github.com/itswl/work/blob/master/new/deploy.py\" target=\"_blank\" rel=\"noopener\">部署卸载</a><br><a href=\"https://github.com/itswl/work/blob/master/new/auto_deploy.py\" target=\"_blank\" rel=\"noopener\">自动部署卸载</a></p>\n"},{"title":"杂","date":"2018-12-18T10:36:16.000Z","_content":"![](https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/flask-api/图片.md","raw":"---\ntitle: 杂\ndate: 2018-12-18 18:36:16\ntags:\ncategories: flask-api\n---\n![](https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"flask-api/图片","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oyr001ntssapzv10ewh","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-258ed95eac5b0760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-bd0bcffaff1f7451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0682ece851c33e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a2e70aff0db906a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n"},{"title":"2017-2018年总结(初版)","date":"2019-01-11T19:41:44.000Z","_content":"\n**本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。**\n\n**从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)**\n\n## 粗略分为4个方面\n### 工作方面\n\n准确来说，目前从事过两份工作。\n\n1. 2017-08 至 2017-12。\n毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。\n这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）\n\n2. 2018-04至2019-01。\n亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。\n我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。\n目前看来，从事这么久的主要原因:\n一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。\n\n### 学习方面\n第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。\n\n第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的[个人博客](https://itswl.github.io/)来记录，网址为：https://itswl.github.io\n\n### 生活方面\n没有以前那么慵懒了，变得更加的独立。\n\n17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。\n\n今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）\n然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。\n\n\n**当然还有一个特别重大的事：**我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。\n\n### 思想上面\n我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。\n\n## 总结\n**既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。**\n\n**好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。**\n\n**期待:2019，能够真的成长吧**\n\n### 补(一)\n读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。\n\n### 补(二)\n今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。\n\n### 补(三)\n![](https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/随笔/2017-2018 总结(初版).md","raw":"---\ntitle: 2017-2018年总结(初版)\ndate: 2019-01-12 03:41:44\ntags:\ncategories: 随笔\n---\n\n**本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。**\n\n**从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)**\n\n## 粗略分为4个方面\n### 工作方面\n\n准确来说，目前从事过两份工作。\n\n1. 2017-08 至 2017-12。\n毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。\n这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）\n\n2. 2018-04至2019-01。\n亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。\n我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。\n目前看来，从事这么久的主要原因:\n一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。\n\n### 学习方面\n第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。\n\n第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的[个人博客](https://itswl.github.io/)来记录，网址为：https://itswl.github.io\n\n### 生活方面\n没有以前那么慵懒了，变得更加的独立。\n\n17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。\n\n今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）\n然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。\n\n\n**当然还有一个特别重大的事：**我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。\n\n### 思想上面\n我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。\n\n## 总结\n**既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。**\n\n**好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。**\n\n**期待:2019，能够真的成长吧**\n\n### 补(一)\n读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。\n\n### 补(二)\n今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。\n\n### 补(三)\n![](https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"随笔/2017-2018 总结(初版)","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oyw001qtssafixi29e2","content":"<p><strong>本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。</strong></p>\n<p><strong>从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)</strong></p>\n<h2 id=\"粗略分为4个方面\"><a href=\"#粗略分为4个方面\" class=\"headerlink\" title=\"粗略分为4个方面\"></a>粗略分为4个方面</h2><h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>准确来说，目前从事过两份工作。</p>\n<ol>\n<li><p>2017-08 至 2017-12。<br>毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。<br>这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）</p>\n</li>\n<li><p>2018-04至2019-01。<br>亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。<br>我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。<br>目前看来，从事这么久的主要原因:<br>一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。</p>\n</li>\n</ol>\n<h3 id=\"学习方面\"><a href=\"#学习方面\" class=\"headerlink\" title=\"学习方面\"></a>学习方面</h3><p>第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。</p>\n<p>第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的<a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">个人博客</a>来记录，网址为：<a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a></p>\n<h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>没有以前那么慵懒了，变得更加的独立。</p>\n<p>17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。</p>\n<p>今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）<br>然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。</p>\n<p><strong>当然还有一个特别重大的事：</strong>我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。</p>\n<h3 id=\"思想上面\"><a href=\"#思想上面\" class=\"headerlink\" title=\"思想上面\"></a>思想上面</h3><p>我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。</strong></p>\n<p><strong>好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。</strong></p>\n<p><strong>期待:2019，能够真的成长吧</strong></p>\n<h3 id=\"补-一\"><a href=\"#补-一\" class=\"headerlink\" title=\"补(一)\"></a>补(一)</h3><p>读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。</p>\n<h3 id=\"补-二\"><a href=\"#补-二\" class=\"headerlink\" title=\"补(二)\"></a>补(二)</h3><p>今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。</p>\n<h3 id=\"补-三\"><a href=\"#补-三\" class=\"headerlink\" title=\"补(三)\"></a>补(三)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>本打算写一个2018年总结，想了一下，觉得还是从学生时代结束后开始写比较好。</strong></p>\n<p><strong>从2017-07到现在2019-01，没想到竟然已经18个月了。这18个月，真的算是，对自己一个磨练。所以之前元旦所说的空空如也，并不完全正确，至少在某些方面，确实还有点进步。(2018-10应该算是一个比较重要的分水岭吧)</strong></p>\n<h2 id=\"粗略分为4个方面\"><a href=\"#粗略分为4个方面\" class=\"headerlink\" title=\"粗略分为4个方面\"></a>粗略分为4个方面</h2><h3 id=\"工作方面\"><a href=\"#工作方面\" class=\"headerlink\" title=\"工作方面\"></a>工作方面</h3><p>准确来说，目前从事过两份工作。</p>\n<ol>\n<li><p>2017-08 至 2017-12。<br>毕业后在某研究所工作。刚开始得到这个工作机会的时候还是挺开心的，毕竟做毕设拿院优，他们的软件占很大成分；同事之间相处也很和睦。主要工作就是给客户解决软件以及设计上的问题，时常需要出差。<br>这工作太闲了，所以当时一直在胡思乱想。后来，我认真思考了一下以后的出路，如果继续这一行，好像只有去做设计了，而我对设计确实没什么兴趣。(一到冬天我就不想呆在济南的原因,可能就是因为雾霾吧。那个地方雾霾比济南还严重，所以就提出了辞职。）</p>\n</li>\n<li><p>2018-04至2019-01。<br>亲戚介绍了一份工作。当时我其实不想去的，但当时已经在家闲置了快3个月。加上确实很迷茫，不知道以后该干嘛。还有当时说先去看看，然后就过去了。刚开始抱着学习技术的态度去的，后来发现自己多虑了。<br>我从没有想过会从事这么久，期间真的无数次想辞职。刚开始碍于情面，所以不曾开口。后来又因为惰性，习惯了。<br>目前看来，从事这么久的主要原因:<br>一是确实很闲，平常帮师傅们打打下手啥的；二是旅游耗费了太多钱财，弄得经济困难；三是，国庆后，开始认真学习python，有时间学习。</p>\n</li>\n</ol>\n<h3 id=\"学习方面\"><a href=\"#学习方面\" class=\"headerlink\" title=\"学习方面\"></a>学习方面</h3><p>第一个工作阶段，确实很充实，每天都在自学（职业相关的），即使现在对我而言一点意义都没有了。</p>\n<p>第二个工作阶段，到国庆前，即使很闲，但也基本没有主动学习过；国庆后开始感觉自己的学习效率在逐渐提高，也有学习的意识了。在此期间，搭建了自己的<a href=\"https://itswl.github.io/\" target=\"_blank\" rel=\"noopener\">个人博客</a>来记录，网址为：<a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a></p>\n<h3 id=\"生活方面\"><a href=\"#生活方面\" class=\"headerlink\" title=\"生活方面\"></a>生活方面</h3><p>没有以前那么慵懒了，变得更加的独立。</p>\n<p>17年的时候，想着爬华山，看兵马俑，逛陕博，但又因为一个人，懒得行动。心想着不急，终究会去的，结果离开了也未曾去过。</p>\n<p>今年得知，张家界离这里不远。（以前外公曾说，等我们初中的时候，就带我们去张家界玩，结果到现在还没带我们去。我都不知道是不是他不记得了，我中秋的时候回去也忘记提这件事了。）<br>然后五一期间，就一个人去了。去了发现凤凰也不远，于是也去了凤凰。算是一个开端吧。</p>\n<p><strong>当然还有一个特别重大的事：</strong>我从2018-8到现在一滴可乐都没喝过。我并不觉得可乐会带来什么危害，不喝可乐，只是单纯的为了克制一下自己那种欲望。</p>\n<h3 id=\"思想上面\"><a href=\"#思想上面\" class=\"headerlink\" title=\"思想上面\"></a>思想上面</h3><p>我觉得一个人最大的进步就是思想上面的，当然只是我个人现在的想法。挺怀恋刚毕业的时候，自信，洒脱。也享受孤独的感觉，能在元旦的晚上冻成狗，也能在群处怡然自得。更加包容多元，更加心平气和。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>既然是总结，那么总结一下。不好的地方:浪费了太多时间，当断不断。</strong></p>\n<p><strong>好的地方：戒掉了可乐，开始养生，有了学习的意识。变得更加的独立，也不会感到孤独。</strong></p>\n<p><strong>期待:2019，能够真的成长吧</strong></p>\n<h3 id=\"补-一\"><a href=\"#补-一\" class=\"headerlink\" title=\"补(一)\"></a>补(一)</h3><p>读万卷书，行万里路，真的是很有用的话。行，使我开阔；读书使我静下心。</p>\n<h3 id=\"补-二\"><a href=\"#补-二\" class=\"headerlink\" title=\"补(二)\"></a>补(二)</h3><p>今年春运，本着学习爬虫看一下12306，结果还是使用了他人的软件，帮别人买了10多张张春运票，也能算是比较有成就感吧。</p>\n<h3 id=\"补-三\"><a href=\"#补-三\" class=\"headerlink\" title=\"补(三)\"></a>补(三)</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-440fdc7b1ff57656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"Go的package与import","date":"2019-09-17T03:51:16.000Z","_content":"\n# package\n1. package 是最基本的分发单位 和 工程管理中依赖关系的体现\n2. 每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包\n3. 要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数\n4. 同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成\n\n\n\n\n## import 原理\n此处需要插图\n\n## import 导入包的几种方式：点，别名与下划线\n在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：\n```\n     import(\n         \"fmt\"\n     )\n```\n然后在代码里面可以通过如下的方式调用\n`fmt.Println(\"hello world\")`\n\n上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：\n\n相对路径     `import   \"./model\"`  // 当前文件同一目录的model目录，但是不建议这种方式import\n\n绝对路径    `import   \"shorturl/model\"`  // 加载GOPATH/src/shorturl/model模块\n\n## 三种导入包的使用方法。\n\n1. 点操作` import( . \"fmt\" )` \n可以省略前缀的包名，`fmt.Println(\"hello world\") ` 可以省略的写成Println(\"hello world\")\n\n2. 别名操作`import( f \"fmt\" )`   调用包函数时前缀变成了重命名的前缀，即f.Println(\"hello world\")\n\n3.  \\_ 操作`import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) `\n\n\\_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()\n\n","source":"_posts/golang/package与import.md","raw":"---\n\ntitle: Go的package与import\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n\n# package\n1. package 是最基本的分发单位 和 工程管理中依赖关系的体现\n2. 每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包\n3. 要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数\n4. 同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成\n\n\n\n\n## import 原理\n此处需要插图\n\n## import 导入包的几种方式：点，别名与下划线\n在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：\n```\n     import(\n         \"fmt\"\n     )\n```\n然后在代码里面可以通过如下的方式调用\n`fmt.Println(\"hello world\")`\n\n上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：\n\n相对路径     `import   \"./model\"`  // 当前文件同一目录的model目录，但是不建议这种方式import\n\n绝对路径    `import   \"shorturl/model\"`  // 加载GOPATH/src/shorturl/model模块\n\n## 三种导入包的使用方法。\n\n1. 点操作` import( . \"fmt\" )` \n可以省略前缀的包名，`fmt.Println(\"hello world\") ` 可以省略的写成Println(\"hello world\")\n\n2. 别名操作`import( f \"fmt\" )`   调用包函数时前缀变成了重命名的前缀，即f.Println(\"hello world\")\n\n3.  \\_ 操作`import ( \"database/sql\" _ \"github.com/ziutek/mymysql/godrv\" ) `\n\n\\_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()\n\n","slug":"golang/package与import","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oyx001rtssaar5rsq5r","content":"<h1 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h1><ol>\n<li>package 是最基本的分发单位 和 工程管理中依赖关系的体现</li>\n<li>每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包</li>\n<li>要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数</li>\n<li>同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成</li>\n</ol>\n<h2 id=\"import-原理\"><a href=\"#import-原理\" class=\"headerlink\" title=\"import 原理\"></a>import 原理</h2><p>此处需要插图</p>\n<h2 id=\"import-导入包的几种方式：点，别名与下划线\"><a href=\"#import-导入包的几种方式：点，别名与下划线\" class=\"headerlink\" title=\"import 导入包的几种方式：点，别名与下划线\"></a>import 导入包的几种方式：点，别名与下划线</h2><p>在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>然后在代码里面可以通过如下的方式调用<br><code>fmt.Println(&quot;hello world&quot;)</code></p>\n<p>上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<p>相对路径     <code>import   &quot;./model&quot;</code>  // 当前文件同一目录的model目录，但是不建议这种方式import</p>\n<p>绝对路径    <code>import   &quot;shorturl/model&quot;</code>  // 加载GOPATH/src/shorturl/model模块</p>\n<h2 id=\"三种导入包的使用方法。\"><a href=\"#三种导入包的使用方法。\" class=\"headerlink\" title=\"三种导入包的使用方法。\"></a>三种导入包的使用方法。</h2><ol>\n<li><p>点操作<code>import( . &quot;fmt&quot; )</code><br>可以省略前缀的包名，<code>fmt.Println(&quot;hello world&quot;)</code> 可以省略的写成Println(“hello world”)</p>\n</li>\n<li><p>别名操作<code>import( f &quot;fmt&quot; )</code>   调用包函数时前缀变成了重命名的前缀，即f.Println(“hello world”)</p>\n</li>\n<li><p>_ 操作<code>import ( &quot;database/sql&quot; _ &quot;github.com/ziutek/mymysql/godrv&quot; )</code></p>\n</li>\n</ol>\n<p>_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"package\"><a href=\"#package\" class=\"headerlink\" title=\"package\"></a>package</h1><ol>\n<li>package 是最基本的分发单位 和 工程管理中依赖关系的体现</li>\n<li>每个 GO 语言源代码文件开头  都拥有一个 package 声明，表示源代码所属的代码包</li>\n<li>要生成 GO 语言可执行程序，必须要有main 的 package包，且必须在该包下 有 main()函数</li>\n<li>同一个路径下(文件夹) 只能存在 一个 package, 一个package 可以拆分为多个源文件组成</li>\n</ol>\n<h2 id=\"import-原理\"><a href=\"#import-原理\" class=\"headerlink\" title=\"import 原理\"></a>import 原理</h2><p>此处需要插图</p>\n<h2 id=\"import-导入包的几种方式：点，别名与下划线\"><a href=\"#import-导入包的几种方式：点，别名与下划线\" class=\"headerlink\" title=\"import 导入包的几种方式：点，别名与下划线\"></a>import 导入包的几种方式：点，别名与下划线</h2><p>在写Go代码的时候经常用到import这个命令用来导入包文件，看到的方式参考如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>然后在代码里面可以通过如下的方式调用<br><code>fmt.Println(&quot;hello world&quot;)</code></p>\n<p>上面这个fmt是Go语言的标准库，他其实是去GOROOT下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<p>相对路径     <code>import   &quot;./model&quot;</code>  // 当前文件同一目录的model目录，但是不建议这种方式import</p>\n<p>绝对路径    <code>import   &quot;shorturl/model&quot;</code>  // 加载GOPATH/src/shorturl/model模块</p>\n<h2 id=\"三种导入包的使用方法。\"><a href=\"#三种导入包的使用方法。\" class=\"headerlink\" title=\"三种导入包的使用方法。\"></a>三种导入包的使用方法。</h2><ol>\n<li><p>点操作<code>import( . &quot;fmt&quot; )</code><br>可以省略前缀的包名，<code>fmt.Println(&quot;hello world&quot;)</code> 可以省略的写成Println(“hello world”)</p>\n</li>\n<li><p>别名操作<code>import( f &quot;fmt&quot; )</code>   调用包函数时前缀变成了重命名的前缀，即f.Println(“hello world”)</p>\n</li>\n<li><p>_ 操作<code>import ( &quot;database/sql&quot; _ &quot;github.com/ziutek/mymysql/godrv&quot; )</code></p>\n</li>\n</ol>\n<p>_操作其实只是引入该包。即使用_操作引用包是无法通过包名来调用包中的导出函数，而是只是为了简单的调用其init函数()</p>\n"},{"title":"Go基础语法","date":"2019-09-17T03:51:16.000Z","_content":"## 一般结构\n```\n// 当前程序的包名\npackage main\n\n// 导入其他包\nimport . \"fmt\"\n\n// 常量定义\nconst PI = 3.14\n\n// 全局变量的声明和赋值\nvar name = \"gopher\"\n\n// 一般类型声明\ntype newType int\n\n// 结构的声明\ntype gopher struct{}\n\n// 接口的声明\ntype golang interface{}\n\n// 由main函数作为程序入口点启动\nfunc main() {\n    Println(\"Hello World!\")\n}\n```\n\n\n## 变量\n```\npackage main\nimport \"fmt\"\n\nvar x1, y1 int\nvar (  // 这种因式分解关键字的写法一般用于声明全局变量\n    a1 int\n    b1 bool\n)\n\nvar c1, d1 int = 1, 2\nvar e1, f1 = 123, \"hello\"\n\nvar h1 int  // 全局变量 允许声明但不使用\n// e1 := \"weilai\" // 只能被用在函数体内，而不可以用于全局变量的声明与赋值\n\n\nfunc main() {\n   /*\n    多行注释\n   */\n   // 一行注释\n   var a string = \"weilai\"  // 声明一个变量并初始化\n   var b, c int = 1, 2   // 一次声明多个变量：\n   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 ''\n   var z bool // bool 0值 false\n   fmt.Println(z) \n   fmt.Println(a)  // 打印 a 换行\n   fmt.Print(b, c)  // 不会换行\n   fmt.Println(d)\n   fmt.Println(\"hello\")  // 会换行\n   fmt.Println(\"world\" )\n   fmt.Print(\"hello\")\n   fmt.Print(\"world\")\n\n   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := \n   e := \"weilai\"  // 等同于 var e string = \"weilai\"  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明\n   f, g := 20, 30 \n   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。\n \n   // h := 40  // 声明但未使用  局部变量  会报错\n   fmt.Println(\"e=\", e , \",f=\" , f , \",g=\" , g)\n   fmt.Printf(\"e=%s,f=%d,g=%d\" , e , f , g) // Printf 是格式化输出\n   var vname1, vname2, vname3 = \"v1\", \"v2\", \"v3\"\n   fmt.Printf(vname1, vname2, vname3)\n   println(x1, y1, a1, b1, c1, d1, e1, f1)\n\n   _,numb,strs := numbers() //只获取函数返回值的后两个\n   fmt.Println(numb,strs)\n}\n//一个可以返回多个值的函数\nfunc numbers()(int,int,string){\n   a , b , c := 1 , 2 , \"str\"\n   return a,b,c\n}\n\n/*\n\nfalse\nweilai\n1 20\nhello\nworld\nhelloworlde= weilai ,f= 30 ,g= 20\ne=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello\n2 str\n\n*/\n```\n","source":"_posts/golang/基础语法.md","raw":"---\n\ntitle: Go基础语法\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n## 一般结构\n```\n// 当前程序的包名\npackage main\n\n// 导入其他包\nimport . \"fmt\"\n\n// 常量定义\nconst PI = 3.14\n\n// 全局变量的声明和赋值\nvar name = \"gopher\"\n\n// 一般类型声明\ntype newType int\n\n// 结构的声明\ntype gopher struct{}\n\n// 接口的声明\ntype golang interface{}\n\n// 由main函数作为程序入口点启动\nfunc main() {\n    Println(\"Hello World!\")\n}\n```\n\n\n## 变量\n```\npackage main\nimport \"fmt\"\n\nvar x1, y1 int\nvar (  // 这种因式分解关键字的写法一般用于声明全局变量\n    a1 int\n    b1 bool\n)\n\nvar c1, d1 int = 1, 2\nvar e1, f1 = 123, \"hello\"\n\nvar h1 int  // 全局变量 允许声明但不使用\n// e1 := \"weilai\" // 只能被用在函数体内，而不可以用于全局变量的声明与赋值\n\n\nfunc main() {\n   /*\n    多行注释\n   */\n   // 一行注释\n   var a string = \"weilai\"  // 声明一个变量并初始化\n   var b, c int = 1, 2   // 一次声明多个变量：\n   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 ''\n   var z bool // bool 0值 false\n   fmt.Println(z) \n   fmt.Println(a)  // 打印 a 换行\n   fmt.Print(b, c)  // 不会换行\n   fmt.Println(d)\n   fmt.Println(\"hello\")  // 会换行\n   fmt.Println(\"world\" )\n   fmt.Print(\"hello\")\n   fmt.Print(\"world\")\n\n   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := \n   e := \"weilai\"  // 等同于 var e string = \"weilai\"  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明\n   f, g := 20, 30 \n   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。\n \n   // h := 40  // 声明但未使用  局部变量  会报错\n   fmt.Println(\"e=\", e , \",f=\" , f , \",g=\" , g)\n   fmt.Printf(\"e=%s,f=%d,g=%d\" , e , f , g) // Printf 是格式化输出\n   var vname1, vname2, vname3 = \"v1\", \"v2\", \"v3\"\n   fmt.Printf(vname1, vname2, vname3)\n   println(x1, y1, a1, b1, c1, d1, e1, f1)\n\n   _,numb,strs := numbers() //只获取函数返回值的后两个\n   fmt.Println(numb,strs)\n}\n//一个可以返回多个值的函数\nfunc numbers()(int,int,string){\n   a , b , c := 1 , 2 , \"str\"\n   return a,b,c\n}\n\n/*\n\nfalse\nweilai\n1 20\nhello\nworld\nhelloworlde= weilai ,f= 30 ,g= 20\ne=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello\n2 str\n\n*/\n```\n","slug":"golang/基础语法","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oz8001utssa5ku1m03y","content":"<h2 id=\"一般结构\"><a href=\"#一般结构\" class=\"headerlink\" title=\"一般结构\"></a>一般结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前程序的包名</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入其他包</span><br><span class=\"line\">import . &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 常量定义</span><br><span class=\"line\">const PI = 3.14</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量的声明和赋值</span><br><span class=\"line\">var name = &quot;gopher&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 一般类型声明</span><br><span class=\"line\">type newType int</span><br><span class=\"line\"></span><br><span class=\"line\">// 结构的声明</span><br><span class=\"line\">type gopher struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 接口的声明</span><br><span class=\"line\">type golang interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由main函数作为程序入口点启动</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var x1, y1 int</span><br><span class=\"line\">var (  // 这种因式分解关键字的写法一般用于声明全局变量</span><br><span class=\"line\">    a1 int</span><br><span class=\"line\">    b1 bool</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var c1, d1 int = 1, 2</span><br><span class=\"line\">var e1, f1 = 123, &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var h1 int  // 全局变量 允许声明但不使用</span><br><span class=\"line\">// e1 := &quot;weilai&quot; // 只能被用在函数体内，而不可以用于全局变量的声明与赋值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /*</span><br><span class=\"line\">    多行注释</span><br><span class=\"line\">   */</span><br><span class=\"line\">   // 一行注释</span><br><span class=\"line\">   var a string = &quot;weilai&quot;  // 声明一个变量并初始化</span><br><span class=\"line\">   var b, c int = 1, 2   // 一次声明多个变量：</span><br><span class=\"line\">   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 &apos;&apos;</span><br><span class=\"line\">   var z bool // bool 0值 false</span><br><span class=\"line\">   fmt.Println(z) </span><br><span class=\"line\">   fmt.Println(a)  // 打印 a 换行</span><br><span class=\"line\">   fmt.Print(b, c)  // 不会换行</span><br><span class=\"line\">   fmt.Println(d)</span><br><span class=\"line\">   fmt.Println(&quot;hello&quot;)  // 会换行</span><br><span class=\"line\">   fmt.Println(&quot;world&quot; )</span><br><span class=\"line\">   fmt.Print(&quot;hello&quot;)</span><br><span class=\"line\">   fmt.Print(&quot;world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := </span><br><span class=\"line\">   e := &quot;weilai&quot;  // 等同于 var e string = &quot;weilai&quot;  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明</span><br><span class=\"line\">   f, g := 20, 30 </span><br><span class=\"line\">   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。</span><br><span class=\"line\"> </span><br><span class=\"line\">   // h := 40  // 声明但未使用  局部变量  会报错</span><br><span class=\"line\">   fmt.Println(&quot;e=&quot;, e , &quot;,f=&quot; , f , &quot;,g=&quot; , g)</span><br><span class=\"line\">   fmt.Printf(&quot;e=%s,f=%d,g=%d&quot; , e , f , g) // Printf 是格式化输出</span><br><span class=\"line\">   var vname1, vname2, vname3 = &quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;</span><br><span class=\"line\">   fmt.Printf(vname1, vname2, vname3)</span><br><span class=\"line\">   println(x1, y1, a1, b1, c1, d1, e1, f1)</span><br><span class=\"line\"></span><br><span class=\"line\">   _,numb,strs := numbers() //只获取函数返回值的后两个</span><br><span class=\"line\">   fmt.Println(numb,strs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//一个可以返回多个值的函数</span><br><span class=\"line\">func numbers()(int,int,string)&#123;</span><br><span class=\"line\">   a , b , c := 1 , 2 , &quot;str&quot;</span><br><span class=\"line\">   return a,b,c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">false</span><br><span class=\"line\">weilai</span><br><span class=\"line\">1 20</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">helloworlde= weilai ,f= 30 ,g= 20</span><br><span class=\"line\">e=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello</span><br><span class=\"line\">2 str</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一般结构\"><a href=\"#一般结构\" class=\"headerlink\" title=\"一般结构\"></a>一般结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当前程序的包名</span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">// 导入其他包</span><br><span class=\"line\">import . &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 常量定义</span><br><span class=\"line\">const PI = 3.14</span><br><span class=\"line\"></span><br><span class=\"line\">// 全局变量的声明和赋值</span><br><span class=\"line\">var name = &quot;gopher&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 一般类型声明</span><br><span class=\"line\">type newType int</span><br><span class=\"line\"></span><br><span class=\"line\">// 结构的声明</span><br><span class=\"line\">type gopher struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 接口的声明</span><br><span class=\"line\">type golang interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由main函数作为程序入口点启动</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    Println(&quot;Hello World!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var x1, y1 int</span><br><span class=\"line\">var (  // 这种因式分解关键字的写法一般用于声明全局变量</span><br><span class=\"line\">    a1 int</span><br><span class=\"line\">    b1 bool</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">var c1, d1 int = 1, 2</span><br><span class=\"line\">var e1, f1 = 123, &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var h1 int  // 全局变量 允许声明但不使用</span><br><span class=\"line\">// e1 := &quot;weilai&quot; // 只能被用在函数体内，而不可以用于全局变量的声明与赋值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   /*</span><br><span class=\"line\">    多行注释</span><br><span class=\"line\">   */</span><br><span class=\"line\">   // 一行注释</span><br><span class=\"line\">   var a string = &quot;weilai&quot;  // 声明一个变量并初始化</span><br><span class=\"line\">   var b, c int = 1, 2   // 一次声明多个变量：</span><br><span class=\"line\">   var d int  // 声明变量，不初始化，一般情况下，值类型默认为 0, 布尔类型默认值为 false ,string 默认值为空字符串 &apos;&apos;</span><br><span class=\"line\">   var z bool // bool 0值 false</span><br><span class=\"line\">   fmt.Println(z) </span><br><span class=\"line\">   fmt.Println(a)  // 打印 a 换行</span><br><span class=\"line\">   fmt.Print(b, c)  // 不会换行</span><br><span class=\"line\">   fmt.Println(d)</span><br><span class=\"line\">   fmt.Println(&quot;hello&quot;)  // 会换行</span><br><span class=\"line\">   fmt.Println(&quot;world&quot; )</span><br><span class=\"line\">   fmt.Print(&quot;hello&quot;)</span><br><span class=\"line\">   fmt.Print(&quot;world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">   // var e int  这行存在  下行就会报错就会报错 no new variables on left side of := </span><br><span class=\"line\">   e := &quot;weilai&quot;  // 等同于 var e string = &quot;weilai&quot;  // 使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明</span><br><span class=\"line\">   f, g := 20, 30 </span><br><span class=\"line\">   f, g = g, f // 如果你想要交换两个变量的值，，两个变量的类型必须是相同。</span><br><span class=\"line\"> </span><br><span class=\"line\">   // h := 40  // 声明但未使用  局部变量  会报错</span><br><span class=\"line\">   fmt.Println(&quot;e=&quot;, e , &quot;,f=&quot; , f , &quot;,g=&quot; , g)</span><br><span class=\"line\">   fmt.Printf(&quot;e=%s,f=%d,g=%d&quot; , e , f , g) // Printf 是格式化输出</span><br><span class=\"line\">   var vname1, vname2, vname3 = &quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;</span><br><span class=\"line\">   fmt.Printf(vname1, vname2, vname3)</span><br><span class=\"line\">   println(x1, y1, a1, b1, c1, d1, e1, f1)</span><br><span class=\"line\"></span><br><span class=\"line\">   _,numb,strs := numbers() //只获取函数返回值的后两个</span><br><span class=\"line\">   fmt.Println(numb,strs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//一个可以返回多个值的函数</span><br><span class=\"line\">func numbers()(int,int,string)&#123;</span><br><span class=\"line\">   a , b , c := 1 , 2 , &quot;str&quot;</span><br><span class=\"line\">   return a,b,c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"></span><br><span class=\"line\">false</span><br><span class=\"line\">weilai</span><br><span class=\"line\">1 20</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">helloworlde= weilai ,f= 30 ,g= 20</span><br><span class=\"line\">e=weilai,f=30,g=20v1%!(EXTRA string=v2, string=v3)0 0 0 false 1 2 123 hello</span><br><span class=\"line\">2 str</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n"},{"title":"Go简介","date":"2019-09-17T03:51:16.000Z","_content":"\n## 简介\n\n### GO 语言特点\n1. 运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）\n2. 语言层面支持并发，易于利用多核实现并发  （最大特点）\n3. 内置runtime（作用：性能监控，GC等），支持垃圾回收\n4. 丰富标准库，强大网络库\n5. 内置强大的工具（gofmt）,跨平台编译，内嵌C支持\n\n### GO 语言的应用\n1. 服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。\n2. 分布式系统，数据库代理器等\n3. 网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、\n4. 内存数据库，前一段时间google开发的groupcache，couchbase的部分组建\n5. 云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。\n\n### GO 语言命令行工具\n1. go build  用于编译源码文件，代码包，依赖包;\n2. go run    可以编译并运行Go源码文件\n3. go get    主要用来动态获取远程代码包\n\n","source":"_posts/golang/readme.md","raw":"---\n\ntitle: Go简介\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n\n## 简介\n\n### GO 语言特点\n1. 运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）\n2. 语言层面支持并发，易于利用多核实现并发  （最大特点）\n3. 内置runtime（作用：性能监控，GC等），支持垃圾回收\n4. 丰富标准库，强大网络库\n5. 内置强大的工具（gofmt）,跨平台编译，内嵌C支持\n\n### GO 语言的应用\n1. 服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。\n2. 分布式系统，数据库代理器等\n3. 网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、\n4. 内存数据库，前一段时间google开发的groupcache，couchbase的部分组建\n5. 云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。\n\n### GO 语言命令行工具\n1. go build  用于编译源码文件，代码包，依赖包;\n2. go run    可以编译并运行Go源码文件\n3. go get    主要用来动态获取远程代码包\n\n","slug":"golang/readme","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4oza001vtssaus78gzvb","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GO-语言特点\"><a href=\"#GO-语言特点\" class=\"headerlink\" title=\"GO 语言特点\"></a>GO 语言特点</h3><ol>\n<li>运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）</li>\n<li>语言层面支持并发，易于利用多核实现并发  （最大特点）</li>\n<li>内置runtime（作用：性能监控，GC等），支持垃圾回收</li>\n<li>丰富标准库，强大网络库</li>\n<li>内置强大的工具（gofmt）,跨平台编译，内嵌C支持</li>\n</ol>\n<h3 id=\"GO-语言的应用\"><a href=\"#GO-语言的应用\" class=\"headerlink\" title=\"GO 语言的应用\"></a>GO 语言的应用</h3><ol>\n<li>服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。</li>\n<li>分布式系统，数据库代理器等</li>\n<li>网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、</li>\n<li>内存数据库，前一段时间google开发的groupcache，couchbase的部分组建</li>\n<li>云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。</li>\n</ol>\n<h3 id=\"GO-语言命令行工具\"><a href=\"#GO-语言命令行工具\" class=\"headerlink\" title=\"GO 语言命令行工具\"></a>GO 语言命令行工具</h3><ol>\n<li>go build  用于编译源码文件，代码包，依赖包;</li>\n<li>go run    可以编译并运行Go源码文件</li>\n<li>go get    主要用来动态获取远程代码包</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GO-语言特点\"><a href=\"#GO-语言特点\" class=\"headerlink\" title=\"GO 语言特点\"></a>GO 语言特点</h3><ol>\n<li>运行效率高，开发高效，部署简单  （可直接编译成机器码，不依赖其他库，glibc的版本有一定要求，部署就是扔一个文件上去就完成了）</li>\n<li>语言层面支持并发，易于利用多核实现并发  （最大特点）</li>\n<li>内置runtime（作用：性能监控，GC等），支持垃圾回收</li>\n<li>丰富标准库，强大网络库</li>\n<li>内置强大的工具（gofmt）,跨平台编译，内嵌C支持</li>\n</ol>\n<h3 id=\"GO-语言的应用\"><a href=\"#GO-语言的应用\" class=\"headerlink\" title=\"GO 语言的应用\"></a>GO 语言的应用</h3><ol>\n<li>服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等。</li>\n<li>分布式系统，数据库代理器等</li>\n<li>网络编程，这一块目前应用最广，包括Web应用、API应用、下载应用、</li>\n<li>内存数据库，前一段时间google开发的groupcache，couchbase的部分组建</li>\n<li>云平台，目前国外很多云平台在采用Go开发，CloudFoundy的部分组建，前VMare的技术总监自己出来搞的apcera云平台。</li>\n</ol>\n<h3 id=\"GO-语言命令行工具\"><a href=\"#GO-语言命令行工具\" class=\"headerlink\" title=\"GO 语言命令行工具\"></a>GO 语言命令行工具</h3><ol>\n<li>go build  用于编译源码文件，代码包，依赖包;</li>\n<li>go run    可以编译并运行Go源码文件</li>\n<li>go get    主要用来动态获取远程代码包</li>\n</ol>\n"},{"title":"Go指针","date":"2019-09-17T03:51:16.000Z","_content":"\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nGo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int = 10   \n\n   fmt.Printf(\"变量的地址: %x\\n\", &a  )\n}\n```\n\n\n**指针声明** : `var var_name *var-type`  eg: `var fp *float32`\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int= 20   /* 声明实际变量 */\n   var ip *int        /* 声明指针变量 */\n\n   ip = &a  /* 指针变量的存储地址 */\n\n   fmt.Printf(\"a 变量的地址是: %x\\n\", &a  )\n\n   /* 指针变量的存储地址 */\n   fmt.Printf(\"ip 变量的存储地址: %x\\n\", ip )\n\n   /* 使用指针访问值 */\n   fmt.Printf(\"*ip 变量的值: %d\\n\", *ip )\n}\n```\n\n**空指针** :当一个指针被定义后没有分配到任何变量时，它的值为 nil\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var  ptr *int\n   var ptr1 *\n   fmt.Printf(\"ptr 的值为 : %x\\n\", ptr  )  /* 0 */\n}\n```\n","source":"_posts/golang/指针.md","raw":"---\n\ntitle: Go指针\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n\n变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nGo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int = 10   \n\n   fmt.Printf(\"变量的地址: %x\\n\", &a  )\n}\n```\n\n\n**指针声明** : `var var_name *var-type`  eg: `var fp *float32`\n\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var a int= 20   /* 声明实际变量 */\n   var ip *int        /* 声明指针变量 */\n\n   ip = &a  /* 指针变量的存储地址 */\n\n   fmt.Printf(\"a 变量的地址是: %x\\n\", &a  )\n\n   /* 指针变量的存储地址 */\n   fmt.Printf(\"ip 变量的存储地址: %x\\n\", ip )\n\n   /* 使用指针访问值 */\n   fmt.Printf(\"*ip 变量的值: %d\\n\", *ip )\n}\n```\n\n**空指针** :当一个指针被定义后没有分配到任何变量时，它的值为 nil\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n   var  ptr *int\n   var ptr1 *\n   fmt.Printf(\"ptr 的值为 : %x\\n\", ptr  )  /* 0 */\n}\n```\n","slug":"golang/指针","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4ozb001ytssa0c8f41xa","content":"<p>变量是一种使用方便的占位符，用于引用计算机内存地址。</p>\n<p>Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int = 10   </span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;变量的地址: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>指针声明</strong> : <code>var var_name *var-type</code>  eg: <code>var fp *float32</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int= 20   /* 声明实际变量 */</span><br><span class=\"line\">   var ip *int        /* 声明指针变量 */</span><br><span class=\"line\"></span><br><span class=\"line\">   ip = &amp;a  /* 指针变量的存储地址 */</span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;a 变量的地址是: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 指针变量的存储地址 */</span><br><span class=\"line\">   fmt.Printf(&quot;ip 变量的存储地址: %x\\n&quot;, ip )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 使用指针访问值 */</span><br><span class=\"line\">   fmt.Printf(&quot;*ip 变量的值: %d\\n&quot;, *ip )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>空指针</strong> :当一个指针被定义后没有分配到任何变量时，它的值为 nil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var  ptr *int</span><br><span class=\"line\">   var ptr1 *</span><br><span class=\"line\">   fmt.Printf(&quot;ptr 的值为 : %x\\n&quot;, ptr  )  /* 0 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>变量是一种使用方便的占位符，用于引用计算机内存地址。</p>\n<p>Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int = 10   </span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;变量的地址: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>指针声明</strong> : <code>var var_name *var-type</code>  eg: <code>var fp *float32</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var a int= 20   /* 声明实际变量 */</span><br><span class=\"line\">   var ip *int        /* 声明指针变量 */</span><br><span class=\"line\"></span><br><span class=\"line\">   ip = &amp;a  /* 指针变量的存储地址 */</span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Printf(&quot;a 变量的地址是: %x\\n&quot;, &amp;a  )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 指针变量的存储地址 */</span><br><span class=\"line\">   fmt.Printf(&quot;ip 变量的存储地址: %x\\n&quot;, ip )</span><br><span class=\"line\"></span><br><span class=\"line\">   /* 使用指针访问值 */</span><br><span class=\"line\">   fmt.Printf(&quot;*ip 变量的值: %d\\n&quot;, *ip )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>空指针</strong> :当一个指针被定义后没有分配到任何变量时，它的值为 nil<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">   var  ptr *int</span><br><span class=\"line\">   var ptr1 *</span><br><span class=\"line\">   fmt.Printf(&quot;ptr 的值为 : %x\\n&quot;, ptr  )  /* 0 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Go规范","date":"2019-09-17T03:51:16.000Z","_content":"## 变量\n### 声明，初始化，赋值\n1. 同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5\n2. 全局变量声明必须使用`var`关键字,局部变量可以省略（a,b,c int =1,2,3）\n3. 变量 `_` 表示丢弃\n### 变量类型转换\n1. 类型转换必须是显示的，不存在隐式转换\n2. 只发生在兼容类型之间\n3. <变量名称> [:]= <目标类型>(<需要转换的变量>)\n```\npackage main\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc main(){\n\n  var a float32 = 3.1\n  c := int(a)\n  \n  fmt.Println(c)\n  fmt.Println(reflect.TypeOf(c))\n  \n}\n```\n\n### 变量可见性规则\n1. 大写字母开头的变量可导出，其他包可以读取，是共有变量\n2. 小写字母开头的变量不可导出，是私有变量\n\n## 常量\n\n### 常量定义形式\n常量中的数据类型只可以是**布尔型、数字型（整数型、浮点型和复数）和字符串型**\n1. 显示 const identifier [type] = value \n2. 隐式 const identifier = value  (通常叫做  无类型常量)\n3. 常量可以使用 **内置**表达式定义  eg: `len()`,`unsafe.Size0f()`等\n\n### 特殊常量 iota\n1. iota 在 const 关键字出现时被重置为 0 \n2. const 中每新增一行常量声明 iota 就计数一次\n3. iota 只能在常量中使用\n\n**iota** 常见使用法：\n1. 跳值使用法\n2. 插队使用法\n3. 表达式隐式使用法\n4. 单行使用法\n\n\n\n","source":"_posts/golang/规范.md","raw":"---\n\ntitle: Go规范\n\ndate: 2019-9-17 11:51:16\n\ntags: \n\ncategories: golang\n\n---\n## 变量\n### 声明，初始化，赋值\n1. 同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5\n2. 全局变量声明必须使用`var`关键字,局部变量可以省略（a,b,c int =1,2,3）\n3. 变量 `_` 表示丢弃\n### 变量类型转换\n1. 类型转换必须是显示的，不存在隐式转换\n2. 只发生在兼容类型之间\n3. <变量名称> [:]= <目标类型>(<需要转换的变量>)\n```\npackage main\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc main(){\n\n  var a float32 = 3.1\n  c := int(a)\n  \n  fmt.Println(c)\n  fmt.Println(reflect.TypeOf(c))\n  \n}\n```\n\n### 变量可见性规则\n1. 大写字母开头的变量可导出，其他包可以读取，是共有变量\n2. 小写字母开头的变量不可导出，是私有变量\n\n## 常量\n\n### 常量定义形式\n常量中的数据类型只可以是**布尔型、数字型（整数型、浮点型和复数）和字符串型**\n1. 显示 const identifier [type] = value \n2. 隐式 const identifier = value  (通常叫做  无类型常量)\n3. 常量可以使用 **内置**表达式定义  eg: `len()`,`unsafe.Size0f()`等\n\n### 特殊常量 iota\n1. iota 在 const 关键字出现时被重置为 0 \n2. const 中每新增一行常量声明 iota 就计数一次\n3. iota 只能在常量中使用\n\n**iota** 常见使用法：\n1. 跳值使用法\n2. 插队使用法\n3. 表达式隐式使用法\n4. 单行使用法\n\n\n\n","slug":"golang/规范","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p0y002vtssalhwl1343","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"声明，初始化，赋值\"><a href=\"#声明，初始化，赋值\" class=\"headerlink\" title=\"声明，初始化，赋值\"></a>声明，初始化，赋值</h3><ol>\n<li>同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5</li>\n<li>全局变量声明必须使用<code>var</code>关键字,局部变量可以省略（a,b,c int =1,2,3）</li>\n<li>变量 <code>_</code> 表示丢弃<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3></li>\n<li>类型转换必须是显示的，不存在隐式转换</li>\n<li>只发生在兼容类型之间</li>\n<li>&lt;变量名称&gt; [:]= &lt;目标类型&gt;(&lt;需要转换的变量&gt;)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a float32 = 3.1</span><br><span class=\"line\">  c := int(a)</span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(c)</span><br><span class=\"line\">  fmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"变量可见性规则\"><a href=\"#变量可见性规则\" class=\"headerlink\" title=\"变量可见性规则\"></a>变量可见性规则</h3><ol>\n<li>大写字母开头的变量可导出，其他包可以读取，是共有变量</li>\n<li>小写字母开头的变量不可导出，是私有变量</li>\n</ol>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"常量定义形式\"><a href=\"#常量定义形式\" class=\"headerlink\" title=\"常量定义形式\"></a>常量定义形式</h3><p>常量中的数据类型只可以是<strong>布尔型、数字型（整数型、浮点型和复数）和字符串型</strong></p>\n<ol>\n<li>显示 const identifier [type] = value </li>\n<li>隐式 const identifier = value  (通常叫做  无类型常量)</li>\n<li>常量可以使用 <strong>内置</strong>表达式定义  eg: <code>len()</code>,<code>unsafe.Size0f()</code>等</li>\n</ol>\n<h3 id=\"特殊常量-iota\"><a href=\"#特殊常量-iota\" class=\"headerlink\" title=\"特殊常量 iota\"></a>特殊常量 iota</h3><ol>\n<li>iota 在 const 关键字出现时被重置为 0 </li>\n<li>const 中每新增一行常量声明 iota 就计数一次</li>\n<li>iota 只能在常量中使用</li>\n</ol>\n<p><strong>iota</strong> 常见使用法：</p>\n<ol>\n<li>跳值使用法</li>\n<li>插队使用法</li>\n<li>表达式隐式使用法</li>\n<li>单行使用法</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"声明，初始化，赋值\"><a href=\"#声明，初始化，赋值\" class=\"headerlink\" title=\"声明，初始化，赋值\"></a>声明，初始化，赋值</h3><ol>\n<li>同一行声明多个变量并赋值： var a,b,c int =1,2,3   或者  d,e := 4,5</li>\n<li>全局变量声明必须使用<code>var</code>关键字,局部变量可以省略（a,b,c int =1,2,3）</li>\n<li>变量 <code>_</code> 表示丢弃<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3></li>\n<li>类型转换必须是显示的，不存在隐式转换</li>\n<li>只发生在兼容类型之间</li>\n<li>&lt;变量名称&gt; [:]= &lt;目标类型&gt;(&lt;需要转换的变量&gt;)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;fmt&quot;</span><br><span class=\"line\">  &quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var a float32 = 3.1</span><br><span class=\"line\">  c := int(a)</span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Println(c)</span><br><span class=\"line\">  fmt.Println(reflect.TypeOf(c))</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"变量可见性规则\"><a href=\"#变量可见性规则\" class=\"headerlink\" title=\"变量可见性规则\"></a>变量可见性规则</h3><ol>\n<li>大写字母开头的变量可导出，其他包可以读取，是共有变量</li>\n<li>小写字母开头的变量不可导出，是私有变量</li>\n</ol>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><h3 id=\"常量定义形式\"><a href=\"#常量定义形式\" class=\"headerlink\" title=\"常量定义形式\"></a>常量定义形式</h3><p>常量中的数据类型只可以是<strong>布尔型、数字型（整数型、浮点型和复数）和字符串型</strong></p>\n<ol>\n<li>显示 const identifier [type] = value </li>\n<li>隐式 const identifier = value  (通常叫做  无类型常量)</li>\n<li>常量可以使用 <strong>内置</strong>表达式定义  eg: <code>len()</code>,<code>unsafe.Size0f()</code>等</li>\n</ol>\n<h3 id=\"特殊常量-iota\"><a href=\"#特殊常量-iota\" class=\"headerlink\" title=\"特殊常量 iota\"></a>特殊常量 iota</h3><ol>\n<li>iota 在 const 关键字出现时被重置为 0 </li>\n<li>const 中每新增一行常量声明 iota 就计数一次</li>\n<li>iota 只能在常量中使用</li>\n</ol>\n<p><strong>iota</strong> 常见使用法：</p>\n<ol>\n<li>跳值使用法</li>\n<li>插队使用法</li>\n<li>表达式隐式使用法</li>\n<li>单行使用法</li>\n</ol>\n"},{"title":"GitHub+Hexo搭建个人网站","date":"2018-11-06T16:03:32.000Z","_content":"# 过程\n1. **GitHub创建个人仓库**  \n  格式**用户名**.github.io\n2. **安装Git**\n https://git-scm.com/downloads\n3. **安装Node.js** \n https://nodejs.org/en/download/\n4. **安装Hexo**\n``npm install -g hexo-cli ``\n`hexo init blog`\n`hexo new test_my_site`\n`hexo g`\n`hexo s`\nlocalhost:4000\n5. **推送网站**\n改站点配置文件\n![repo：自己的github网址](https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后\n`hexo clean `\n`hexo g `\n`hexo d`\nhttps://itswl.github.io\n# 1.  GitHub创建个人仓库\nhttps://github.com 点击GitHub中的New repository创建新仓库，仓库名应该为：\n**用户名**.http://github.io\n这个**用户名**使用你的GitHub帐号名称代替，这是固定写法。\n# 2. 安装Git\nGit下载地址：https://git-scm.com/downloads\n选择对应版本安装即可\n![右击会出现这个界面](https://upload-images.jianshu.io/upload_images/14597179-00f3f2b21f8574e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit Bash here，设置user.name和user.email配置信息：\n`git config --global user.name \"你的GitHub用户名\"`\n`git config --global user.email \"你的GitHub注册邮箱\"`\n\n生成ssh密钥文件：\n`ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"`\n\n然后直接三个回车即可，默认不需要设置密码\n然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制\n\n打开https//github.com/settings/keys 页面，新建new SSH Key\n\n![new SSH Key](https://upload-images.jianshu.io/upload_images/14597179-3c9dbfa11b3932ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。\n\n在Git Bash中检测GitHub公钥设置是否成功，输入 `ssh git@github.com` \n![](https://upload-images.jianshu.io/upload_images/14597179-85f173ebe40bee18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。\n\n\n# 3.  安装Node.js\nHexo基于Node.js，Node.js下载地址:https://nodejs.org/en/download/\n选择对应版本安装。\n安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入:\n`node -v `\n检测npm是否安装成功，在命令行中输入\n`npm -v` :\n\n![node和npm](https://upload-images.jianshu.io/upload_images/14597179-98b43def7b13f4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n到这了，安装Hexo的环境已经全部搭建完成。\n\n# 4 安装hexo\n新建一个博客文件夹，在博客文件夹中，Git bash here\n\n使用npm命令安装Hexo，输入：\n``npm install -g hexo-cli ``\n\n这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：\n`hexo init blog`\n\n为了检测我们的网站雏形，分别按顺序输入以下三条命令：\n```\nhexo new test_my_site:\n\nhexo g\n\nhexo s\n```\n完成后，打开浏览器输入地址：\n>localhost:4000\n\n可以看出我们写出第一篇博客。\n\n## 常用的Hexo 命令\n```\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级 \nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令\n```\n# 5. 推送网址\n上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。\n**在blog根目录里的_config.yml文件称为站点配置文件，如下图**\n\n![站点配置文件](https://upload-images.jianshu.io/upload_images/14597179-cceae7be06445f95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图**\n![主题配置文件](https://upload-images.jianshu.io/upload_images/14597179-6e5f86669c01ab1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改并保存：**\n\n![repo：自己的github网址](https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n这时，我们分别输入三条命令：\n\n```\nhexo clean \nhexo g \nhexo d\n```\n\n其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径:\nhttps://itswl.github.io\n博客已经上线了，可以在网络上被访问了。\n \n","source":"_posts/vps/GitHub+Hexo搭建个人网站.md","raw":"---\ntitle: GitHub+Hexo搭建个人网站\ndate: 2018-11-07 00:03:32\ntags:\ncategories: VPS\n---\n# 过程\n1. **GitHub创建个人仓库**  \n  格式**用户名**.github.io\n2. **安装Git**\n https://git-scm.com/downloads\n3. **安装Node.js** \n https://nodejs.org/en/download/\n4. **安装Hexo**\n``npm install -g hexo-cli ``\n`hexo init blog`\n`hexo new test_my_site`\n`hexo g`\n`hexo s`\nlocalhost:4000\n5. **推送网站**\n改站点配置文件\n![repo：自己的github网址](https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后\n`hexo clean `\n`hexo g `\n`hexo d`\nhttps://itswl.github.io\n# 1.  GitHub创建个人仓库\nhttps://github.com 点击GitHub中的New repository创建新仓库，仓库名应该为：\n**用户名**.http://github.io\n这个**用户名**使用你的GitHub帐号名称代替，这是固定写法。\n# 2. 安装Git\nGit下载地址：https://git-scm.com/downloads\n选择对应版本安装即可\n![右击会出现这个界面](https://upload-images.jianshu.io/upload_images/14597179-00f3f2b21f8574e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit Bash here，设置user.name和user.email配置信息：\n`git config --global user.name \"你的GitHub用户名\"`\n`git config --global user.email \"你的GitHub注册邮箱\"`\n\n生成ssh密钥文件：\n`ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"`\n\n然后直接三个回车即可，默认不需要设置密码\n然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制\n\n打开https//github.com/settings/keys 页面，新建new SSH Key\n\n![new SSH Key](https://upload-images.jianshu.io/upload_images/14597179-3c9dbfa11b3932ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。\n\n在Git Bash中检测GitHub公钥设置是否成功，输入 `ssh git@github.com` \n![](https://upload-images.jianshu.io/upload_images/14597179-85f173ebe40bee18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。\n\n\n# 3.  安装Node.js\nHexo基于Node.js，Node.js下载地址:https://nodejs.org/en/download/\n选择对应版本安装。\n安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入:\n`node -v `\n检测npm是否安装成功，在命令行中输入\n`npm -v` :\n\n![node和npm](https://upload-images.jianshu.io/upload_images/14597179-98b43def7b13f4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n到这了，安装Hexo的环境已经全部搭建完成。\n\n# 4 安装hexo\n新建一个博客文件夹，在博客文件夹中，Git bash here\n\n使用npm命令安装Hexo，输入：\n``npm install -g hexo-cli ``\n\n这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：\n`hexo init blog`\n\n为了检测我们的网站雏形，分别按顺序输入以下三条命令：\n```\nhexo new test_my_site:\n\nhexo g\n\nhexo s\n```\n完成后，打开浏览器输入地址：\n>localhost:4000\n\n可以看出我们写出第一篇博客。\n\n## 常用的Hexo 命令\n```\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级 \nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令\n```\n# 5. 推送网址\n上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。\n**在blog根目录里的_config.yml文件称为站点配置文件，如下图**\n\n![站点配置文件](https://upload-images.jianshu.io/upload_images/14597179-cceae7be06445f95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图**\n![主题配置文件](https://upload-images.jianshu.io/upload_images/14597179-6e5f86669c01ab1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改并保存：**\n\n![repo：自己的github网址](https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n这时，我们分别输入三条命令：\n\n```\nhexo clean \nhexo g \nhexo d\n```\n\n其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径:\nhttps://itswl.github.io\n博客已经上线了，可以在网络上被访问了。\n \n","slug":"vps/GitHub+Hexo搭建个人网站","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p0z002wtssau1amz4x2","content":"<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><ol>\n<li><strong>GitHub创建个人仓库</strong><br>格式<strong>用户名</strong>.github.io</li>\n<li><strong>安装Git</strong><br><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a></li>\n<li><strong>安装Node.js</strong><br><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li><strong>安装Hexo</strong><br><code>npm install -g hexo-cli</code><br><code>hexo init blog</code><br><code>hexo new test_my_site</code><br><code>hexo g</code><br><code>hexo s</code><br>localhost:4000</li>\n<li><strong>推送网站</strong><br>改站点配置文件<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"repo：自己的github网址\"><br>然后<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a><h1 id=\"1-GitHub创建个人仓库\"><a href=\"#1-GitHub创建个人仓库\" class=\"headerlink\" title=\"1.  GitHub创建个人仓库\"></a>1.  GitHub创建个人仓库</h1><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<br><strong>用户名</strong>.<a href=\"http://github.io\" target=\"_blank\" rel=\"noopener\">http://github.io</a><br>这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法。<h1 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h1>Git下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br>选择对应版本安装即可<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-00f3f2b21f8574e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"右击会出现这个界面\"></li>\n</ol>\n<p>Git Bash here，设置user.name和user.email配置信息：<br><code>git config --global user.name &quot;你的GitHub用户名&quot;</code><br><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></p>\n<p>生成ssh密钥文件：<br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></p>\n<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>\n<p>打开https//github.com/settings/keys 页面，新建new SSH Key</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3c9dbfa11b3932ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"new SSH Key\"></p>\n<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p>\n<p>在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-85f173ebe40bee18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>\n<h1 id=\"3-安装Node-js\"><a href=\"#3-安装Node-js\" class=\"headerlink\" title=\"3.  安装Node.js\"></a>3.  安装Node.js</h1><p>Hexo基于Node.js，Node.js下载地址:<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a><br>选择对应版本安装。<br>安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入:<br><code>node -v</code><br>检测npm是否安装成功，在命令行中输入<br><code>npm -v</code> :</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-98b43def7b13f4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"node和npm\"><br>到这了，安装Hexo的环境已经全部搭建完成。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4 安装hexo\"></a>4 安装hexo</h1><p>新建一个博客文件夹，在博客文件夹中，Git bash here</p>\n<p>使用npm命令安装Hexo，输入：<br><code>npm install -g hexo-cli</code></p>\n<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：<br><code>hexo init blog</code></p>\n<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site:</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完成后，打开浏览器输入地址：</p>\n<blockquote>\n<p>localhost:4000</p>\n</blockquote>\n<p>可以看出我们写出第一篇博客。</p>\n<h2 id=\"常用的Hexo-命令\"><a href=\"#常用的Hexo-命令\" class=\"headerlink\" title=\"常用的Hexo 命令\"></a>常用的Hexo 命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装Hexo</span><br><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">命令简写</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-推送网址\"><a href=\"#5-推送网址\" class=\"headerlink\" title=\"5. 推送网址\"></a>5. 推送网址</h1><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。<br><strong>在blog根目录里的_config.yml文件称为站点配置文件，如下图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-cceae7be06445f95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"站点配置文件\"><br><strong>根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6e5f86669c01ab1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"主题配置文件\"></p>\n<p><strong>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改并保存：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"repo：自己的github网址\"></p>\n<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>这时，我们分别输入三条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径:<br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a><br>博客已经上线了，可以在网络上被访问了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><ol>\n<li><strong>GitHub创建个人仓库</strong><br>格式<strong>用户名</strong>.github.io</li>\n<li><strong>安装Git</strong><br><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a></li>\n<li><strong>安装Node.js</strong><br><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></li>\n<li><strong>安装Hexo</strong><br><code>npm install -g hexo-cli</code><br><code>hexo init blog</code><br><code>hexo new test_my_site</code><br><code>hexo g</code><br><code>hexo s</code><br>localhost:4000</li>\n<li><strong>推送网站</strong><br>改站点配置文件<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"repo：自己的github网址\"><br>然后<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code><br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a><h1 id=\"1-GitHub创建个人仓库\"><a href=\"#1-GitHub创建个人仓库\" class=\"headerlink\" title=\"1.  GitHub创建个人仓库\"></a>1.  GitHub创建个人仓库</h1><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">https://github.com</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<br><strong>用户名</strong>.<a href=\"http://github.io\" target=\"_blank\" rel=\"noopener\">http://github.io</a><br>这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法。<h1 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h1>Git下载地址：<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads</a><br>选择对应版本安装即可<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-00f3f2b21f8574e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"右击会出现这个界面\"></li>\n</ol>\n<p>Git Bash here，设置user.name和user.email配置信息：<br><code>git config --global user.name &quot;你的GitHub用户名&quot;</code><br><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></p>\n<p>生成ssh密钥文件：<br><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></p>\n<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>\n<p>打开https//github.com/settings/keys 页面，新建new SSH Key</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3c9dbfa11b3932ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"new SSH Key\"></p>\n<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p>\n<p>在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-85f173ebe40bee18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>\n<h1 id=\"3-安装Node-js\"><a href=\"#3-安装Node-js\" class=\"headerlink\" title=\"3.  安装Node.js\"></a>3.  安装Node.js</h1><p>Hexo基于Node.js，Node.js下载地址:<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a><br>选择对应版本安装。<br>安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入:<br><code>node -v</code><br>检测npm是否安装成功，在命令行中输入<br><code>npm -v</code> :</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-98b43def7b13f4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"node和npm\"><br>到这了，安装Hexo的环境已经全部搭建完成。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"4 安装hexo\"></a>4 安装hexo</h1><p>新建一个博客文件夹，在博客文件夹中，Git bash here</p>\n<p>使用npm命令安装Hexo，输入：<br><code>npm install -g hexo-cli</code></p>\n<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：<br><code>hexo init blog</code></p>\n<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site:</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>完成后，打开浏览器输入地址：</p>\n<blockquote>\n<p>localhost:4000</p>\n</blockquote>\n<p>可以看出我们写出第一篇博客。</p>\n<h2 id=\"常用的Hexo-命令\"><a href=\"#常用的Hexo-命令\" class=\"headerlink\" title=\"常用的Hexo 命令\"></a>常用的Hexo 命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装Hexo</span><br><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">命令简写</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-推送网址\"><a href=\"#5-推送网址\" class=\"headerlink\" title=\"5. 推送网址\"></a>5. 推送网址</h1><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。<br><strong>在blog根目录里的_config.yml文件称为站点配置文件，如下图</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-cceae7be06445f95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"站点配置文件\"><br><strong>根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6e5f86669c01ab1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"主题配置文件\"></p>\n<p><strong>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改并保存：</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-70886b235322471d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"repo：自己的github网址\"></p>\n<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>这时，我们分别输入三条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径:<br><a href=\"https://itswl.github.io\" target=\"_blank\" rel=\"noopener\">https://itswl.github.io</a><br>博客已经上线了，可以在网络上被访问了。</p>\n"},{"title":"VPS搭建SSR过程","date":"2018-10-24T14:53:08.000Z","_content":"\n首先我们得先有一个VPS。我用的vultr，已经用了快两年了吧，能用支付宝和微信支付，也挺便宜的，我选的3.5美元一月的。这是我的邀请地址https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥!\n的，不过从来没有人点我的邀请地址，我之前给别人介绍的时候也是直接让他们去官网上直接注册，感觉亏大了😄。\n\n**这个billing是支付**\n![可选支付宝和微信支付](https://upload-images.jianshu.io/upload_images/14597179-afcf9aeaf90f2eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**首先可以先建一个VPS**\n\n![VPS地址](https://upload-images.jianshu.io/upload_images/14597179-ee8c2c12ec38c41d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n先在网页中那个加**+**号，然后选择VPS所在地址，我自己选的Los,感觉应该日本新加坡的延迟会低一点吧0.0，但我现在用的挺好的，也没去换。就只是换了一个便宜的资费，以前并没有3.5刀一月的。\n\n![价格与操作系统](https://upload-images.jianshu.io/upload_images/14597179-6144a6b944f010dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我选的就是图中的，debian 9 然后3.5刀的，我需求较少，自用足够了了。\n\n![左键可以复制IP地址和密码](https://upload-images.jianshu.io/upload_images/14597179-5b4710846183c3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后通过SSH，登录到VPS上搭建ssr。我个人用的是**brook**,brook自带PAC模式，并且还很精准。\n我ssh使用的是MobaXterm_Portable。下载地址https://mobaxterm.mobatek.net/download-home-edition.html。\n以root的方式登录，然后输入密码，就会出现以下界面。\n![root@vultr](https://upload-images.jianshu.io/upload_images/14597179-17039f753374123d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**然后刷入SSR**\n一键代码来自秋水逸冰的博客\n\n把下面这三段代码分三次复制粘贴到putty或者终端并按回车运行：\n\n第一段（此段较长，请全部复制粘贴到putty，然后按回车键运行，点击右键即可粘贴）\n\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\\#从github上下载shadowsocks-all.sh\n第二段**（同样复制粘贴然后运行）**\n\nchmod +x shadowsocks-all.sh\n\\#给shadowsocks-all.sh 执行权限\n第三段\n\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n\\运行并记录\n\n下面就是安装过程\n\n![这有四个不同的版本](https://upload-images.jianshu.io/upload_images/14597179-b0df92b3ef5c8d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我选的是2，shadowsocksR,后面的过程可以默认，一直点回车，也可以更改配置。最后安装成功后也会提示所安装的信息。也可以通过vi /etc/shadowsocks-r/config.json 修改配置\n**提速**\n现在自带bbr提速，所以不用更改。。\n**一些常用相关命令**\n修改SSR密码或者协议　vi /etc/shadowsocks-r/config.json（改了密码后需要重启SS）\nSSR重启　/etc/init.d/shadowsocks-r restart\n查看SSR状态   /etc/init.d/shadowsocks-r status\n卸载SSR　./shadowsocks-all.sh uninstall\n\n做到以上服务器端SSR就搭建完成了，然后就是配置客户端了。\n**路由器**\n有些路由器自带SSR，把配置信息填进去就可以用了。我用的裴讯K2P刷了一个openwrt固件，然后可用SSR。路由器好处是，手机电脑可以不用下载客户端，连上网就可以使用SSR带来的功能😊\n![1.png](https://upload-images.jianshu.io/upload_images/14597179-a8921e33abe8bf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**手机端**\nios可用shaodowrocket,potatso 2等，当然国区不行0.0\nAndroid可用SSR，SSRR等https://github.com/shadowsocksrr/shadowsocksr-android/releases\n电脑端可用SSR等\n**Brook配置过程**\n参考https://doub.io/brook-jc1/\n使用一键脚本\n系统要求：CentOS 6+ / Debian 6+ / Ubuntu 14.04 +\n安装步骤\n执行下面的代码下载并运行脚本。\n\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh && chmod +x brook.sh && bash brook.sh\n运行脚本后会出现脚本操作菜单，选择并输入 1 就会开始安装。\n进入下载脚本的目录并运行脚本：\n```\n./brook.sh\n然后选择你要执行的选项即可。\n\n Brook 一键管理脚本 [vx.x.x]\n ---- Toyo | doub.io/brook-jc3 ----\n \n 0. 升级脚本\n————————————\n 1. 安装 Brook\n 2. 升级 Brook\n 3. 卸载 Brook\n————————————\n 4. 启动 Brook\n 5. 停止 Brook\n 6. 重启 Brook\n————————————\n 7. 设置 账号配置\n 8. 查看 账号信息\n 9. 查看 日志信息\n10. 查看 链接信息\n————————————\n \n 当前状态: 已安装 并 已启动\n \n 请输入数字 [0-10]:\n其他操作\n启动：/etc/init.d/brook start\n\n停止：/etc/init.d/brook stop\n\n重启：/etc/init.d/brook restart\n\n查看状态：/etc/init.d/brook status\n\n安装目录：/usr/local/brook\n\n配置文件：/usr/local/brook/brook.conf\n\n日志文件：/usr/local/brook/brook.log\n（注意正常情况下，日志是不会记录使用信息的，只会记录报错）\n```\n**brook客户端**\nios： app store 上目前还有，只是没怎么更新。\n其他客户端：https://github.com/txthinking/brook/releases","source":"_posts/vps/VPS搭建SSR过程.md","raw":"---\ntitle: VPS搭建SSR过程\ndate: 2018-10-24 22:53:08\ntags:\ncategories: VPS\n---\n\n首先我们得先有一个VPS。我用的vultr，已经用了快两年了吧，能用支付宝和微信支付，也挺便宜的，我选的3.5美元一月的。这是我的邀请地址https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥!\n的，不过从来没有人点我的邀请地址，我之前给别人介绍的时候也是直接让他们去官网上直接注册，感觉亏大了😄。\n\n**这个billing是支付**\n![可选支付宝和微信支付](https://upload-images.jianshu.io/upload_images/14597179-afcf9aeaf90f2eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**首先可以先建一个VPS**\n\n![VPS地址](https://upload-images.jianshu.io/upload_images/14597179-ee8c2c12ec38c41d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n先在网页中那个加**+**号，然后选择VPS所在地址，我自己选的Los,感觉应该日本新加坡的延迟会低一点吧0.0，但我现在用的挺好的，也没去换。就只是换了一个便宜的资费，以前并没有3.5刀一月的。\n\n![价格与操作系统](https://upload-images.jianshu.io/upload_images/14597179-6144a6b944f010dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我选的就是图中的，debian 9 然后3.5刀的，我需求较少，自用足够了了。\n\n![左键可以复制IP地址和密码](https://upload-images.jianshu.io/upload_images/14597179-5b4710846183c3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后通过SSH，登录到VPS上搭建ssr。我个人用的是**brook**,brook自带PAC模式，并且还很精准。\n我ssh使用的是MobaXterm_Portable。下载地址https://mobaxterm.mobatek.net/download-home-edition.html。\n以root的方式登录，然后输入密码，就会出现以下界面。\n![root@vultr](https://upload-images.jianshu.io/upload_images/14597179-17039f753374123d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**然后刷入SSR**\n一键代码来自秋水逸冰的博客\n\n把下面这三段代码分三次复制粘贴到putty或者终端并按回车运行：\n\n第一段（此段较长，请全部复制粘贴到putty，然后按回车键运行，点击右键即可粘贴）\n\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\\#从github上下载shadowsocks-all.sh\n第二段**（同样复制粘贴然后运行）**\n\nchmod +x shadowsocks-all.sh\n\\#给shadowsocks-all.sh 执行权限\n第三段\n\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n\\运行并记录\n\n下面就是安装过程\n\n![这有四个不同的版本](https://upload-images.jianshu.io/upload_images/14597179-b0df92b3ef5c8d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我选的是2，shadowsocksR,后面的过程可以默认，一直点回车，也可以更改配置。最后安装成功后也会提示所安装的信息。也可以通过vi /etc/shadowsocks-r/config.json 修改配置\n**提速**\n现在自带bbr提速，所以不用更改。。\n**一些常用相关命令**\n修改SSR密码或者协议　vi /etc/shadowsocks-r/config.json（改了密码后需要重启SS）\nSSR重启　/etc/init.d/shadowsocks-r restart\n查看SSR状态   /etc/init.d/shadowsocks-r status\n卸载SSR　./shadowsocks-all.sh uninstall\n\n做到以上服务器端SSR就搭建完成了，然后就是配置客户端了。\n**路由器**\n有些路由器自带SSR，把配置信息填进去就可以用了。我用的裴讯K2P刷了一个openwrt固件，然后可用SSR。路由器好处是，手机电脑可以不用下载客户端，连上网就可以使用SSR带来的功能😊\n![1.png](https://upload-images.jianshu.io/upload_images/14597179-a8921e33abe8bf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**手机端**\nios可用shaodowrocket,potatso 2等，当然国区不行0.0\nAndroid可用SSR，SSRR等https://github.com/shadowsocksrr/shadowsocksr-android/releases\n电脑端可用SSR等\n**Brook配置过程**\n参考https://doub.io/brook-jc1/\n使用一键脚本\n系统要求：CentOS 6+ / Debian 6+ / Ubuntu 14.04 +\n安装步骤\n执行下面的代码下载并运行脚本。\n\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh && chmod +x brook.sh && bash brook.sh\n运行脚本后会出现脚本操作菜单，选择并输入 1 就会开始安装。\n进入下载脚本的目录并运行脚本：\n```\n./brook.sh\n然后选择你要执行的选项即可。\n\n Brook 一键管理脚本 [vx.x.x]\n ---- Toyo | doub.io/brook-jc3 ----\n \n 0. 升级脚本\n————————————\n 1. 安装 Brook\n 2. 升级 Brook\n 3. 卸载 Brook\n————————————\n 4. 启动 Brook\n 5. 停止 Brook\n 6. 重启 Brook\n————————————\n 7. 设置 账号配置\n 8. 查看 账号信息\n 9. 查看 日志信息\n10. 查看 链接信息\n————————————\n \n 当前状态: 已安装 并 已启动\n \n 请输入数字 [0-10]:\n其他操作\n启动：/etc/init.d/brook start\n\n停止：/etc/init.d/brook stop\n\n重启：/etc/init.d/brook restart\n\n查看状态：/etc/init.d/brook status\n\n安装目录：/usr/local/brook\n\n配置文件：/usr/local/brook/brook.conf\n\n日志文件：/usr/local/brook/brook.log\n（注意正常情况下，日志是不会记录使用信息的，只会记录报错）\n```\n**brook客户端**\nios： app store 上目前还有，只是没怎么更新。\n其他客户端：https://github.com/txthinking/brook/releases","slug":"vps/VPS搭建SSR过程","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p11002xtssa14t3xyhq","content":"<p>首先我们得先有一个VPS。我用的vultr，已经用了快两年了吧，能用支付宝和微信支付，也挺便宜的，我选的3.5美元一月的。这是我的邀请地址<a href=\"https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥</a>!<br>的，不过从来没有人点我的邀请地址，我之前给别人介绍的时候也是直接让他们去官网上直接注册，感觉亏大了😄。</p>\n<p><strong>这个billing是支付</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-afcf9aeaf90f2eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可选支付宝和微信支付\"><br><strong>首先可以先建一个VPS</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ee8c2c12ec38c41d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"VPS地址\"><br>先在网页中那个加<strong>+</strong>号，然后选择VPS所在地址，我自己选的Los,感觉应该日本新加坡的延迟会低一点吧0.0，但我现在用的挺好的，也没去换。就只是换了一个便宜的资费，以前并没有3.5刀一月的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6144a6b944f010dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"价格与操作系统\"><br>我选的就是图中的，debian 9 然后3.5刀的，我需求较少，自用足够了了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5b4710846183c3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"左键可以复制IP地址和密码\"></p>\n<p>然后通过SSH，登录到VPS上搭建ssr。我个人用的是<strong>brook</strong>,brook自带PAC模式，并且还很精准。<br>我ssh使用的是MobaXterm_Portable。下载地址<a href=\"https://mobaxterm.mobatek.net/download-home-edition.html。\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/download-home-edition.html。</a><br>以root的方式登录，然后输入密码，就会出现以下界面。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-17039f753374123d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"root@vultr\"><br><strong>然后刷入SSR</strong><br>一键代码来自秋水逸冰的博客</p>\n<p>把下面这三段代码分三次复制粘贴到putty或者终端并按回车运行：</p>\n<p>第一段（此段较长，请全部复制粘贴到putty，然后按回车键运行，点击右键即可粘贴）</p>\n<p>wget –no-check-certificate -O shadowsocks-all.sh <a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</a><br>#从github上下载shadowsocks-all.sh<br>第二段<strong>（同样复制粘贴然后运行）</strong></p>\n<p>chmod +x shadowsocks-all.sh<br>#给shadowsocks-all.sh 执行权限<br>第三段</p>\n<p>./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log<br>\\运行并记录</p>\n<p>下面就是安装过程</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b0df92b3ef5c8d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"这有四个不同的版本\"><br>我选的是2，shadowsocksR,后面的过程可以默认，一直点回车，也可以更改配置。最后安装成功后也会提示所安装的信息。也可以通过vi /etc/shadowsocks-r/config.json 修改配置<br><strong>提速</strong><br>现在自带bbr提速，所以不用更改。。<br><strong>一些常用相关命令</strong><br>修改SSR密码或者协议　vi /etc/shadowsocks-r/config.json（改了密码后需要重启SS）<br>SSR重启　/etc/init.d/shadowsocks-r restart<br>查看SSR状态   /etc/init.d/shadowsocks-r status<br>卸载SSR　./shadowsocks-all.sh uninstall</p>\n<p>做到以上服务器端SSR就搭建完成了，然后就是配置客户端了。<br><strong>路由器</strong><br>有些路由器自带SSR，把配置信息填进去就可以用了。我用的裴讯K2P刷了一个openwrt固件，然后可用SSR。路由器好处是，手机电脑可以不用下载客户端，连上网就可以使用SSR带来的功能😊<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8921e33abe8bf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"><br><strong>手机端</strong><br>ios可用shaodowrocket,potatso 2等，当然国区不行0.0<br>Android可用SSR，SSRR等<a href=\"https://github.com/shadowsocksrr/shadowsocksr-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a><br>电脑端可用SSR等<br><strong>Brook配置过程</strong><br>参考<a href=\"https://doub.io/brook-jc1/\" target=\"_blank\" rel=\"noopener\">https://doub.io/brook-jc1/</a><br>使用一键脚本<br>系统要求：CentOS 6+ / Debian 6+ / Ubuntu 14.04 +<br>安装步骤<br>执行下面的代码下载并运行脚本。</p>\n<p>wget -N –no-check-certificate <a href=\"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh</a> &amp;&amp; chmod +x brook.sh &amp;&amp; bash brook.sh<br>运行脚本后会出现脚本操作菜单，选择并输入 1 就会开始安装。<br>进入下载脚本的目录并运行脚本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./brook.sh</span><br><span class=\"line\">然后选择你要执行的选项即可。</span><br><span class=\"line\"></span><br><span class=\"line\"> Brook 一键管理脚本 [vx.x.x]</span><br><span class=\"line\"> ---- Toyo | doub.io/brook-jc3 ----</span><br><span class=\"line\"> </span><br><span class=\"line\"> 0. 升级脚本</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 1. 安装 Brook</span><br><span class=\"line\"> 2. 升级 Brook</span><br><span class=\"line\"> 3. 卸载 Brook</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 4. 启动 Brook</span><br><span class=\"line\"> 5. 停止 Brook</span><br><span class=\"line\"> 6. 重启 Brook</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 7. 设置 账号配置</span><br><span class=\"line\"> 8. 查看 账号信息</span><br><span class=\"line\"> 9. 查看 日志信息</span><br><span class=\"line\">10. 查看 链接信息</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> </span><br><span class=\"line\"> 当前状态: 已安装 并 已启动</span><br><span class=\"line\"> </span><br><span class=\"line\"> 请输入数字 [0-10]:</span><br><span class=\"line\">其他操作</span><br><span class=\"line\">启动：/etc/init.d/brook start</span><br><span class=\"line\"></span><br><span class=\"line\">停止：/etc/init.d/brook stop</span><br><span class=\"line\"></span><br><span class=\"line\">重启：/etc/init.d/brook restart</span><br><span class=\"line\"></span><br><span class=\"line\">查看状态：/etc/init.d/brook status</span><br><span class=\"line\"></span><br><span class=\"line\">安装目录：/usr/local/brook</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件：/usr/local/brook/brook.conf</span><br><span class=\"line\"></span><br><span class=\"line\">日志文件：/usr/local/brook/brook.log</span><br><span class=\"line\">（注意正常情况下，日志是不会记录使用信息的，只会记录报错）</span><br></pre></td></tr></table></figure></p>\n<p><strong>brook客户端</strong><br>ios： app store 上目前还有，只是没怎么更新。<br>其他客户端：<a href=\"https://github.com/txthinking/brook/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook/releases</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先我们得先有一个VPS。我用的vultr，已经用了快两年了吧，能用支付宝和微信支付，也挺便宜的，我选的3.5美元一月的。这是我的邀请地址<a href=\"https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7349334。点地址进去注册好像都有奖励啥</a>!<br>的，不过从来没有人点我的邀请地址，我之前给别人介绍的时候也是直接让他们去官网上直接注册，感觉亏大了😄。</p>\n<p><strong>这个billing是支付</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-afcf9aeaf90f2eba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可选支付宝和微信支付\"><br><strong>首先可以先建一个VPS</strong></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ee8c2c12ec38c41d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"VPS地址\"><br>先在网页中那个加<strong>+</strong>号，然后选择VPS所在地址，我自己选的Los,感觉应该日本新加坡的延迟会低一点吧0.0，但我现在用的挺好的，也没去换。就只是换了一个便宜的资费，以前并没有3.5刀一月的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-6144a6b944f010dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"价格与操作系统\"><br>我选的就是图中的，debian 9 然后3.5刀的，我需求较少，自用足够了了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5b4710846183c3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"左键可以复制IP地址和密码\"></p>\n<p>然后通过SSH，登录到VPS上搭建ssr。我个人用的是<strong>brook</strong>,brook自带PAC模式，并且还很精准。<br>我ssh使用的是MobaXterm_Portable。下载地址<a href=\"https://mobaxterm.mobatek.net/download-home-edition.html。\" target=\"_blank\" rel=\"noopener\">https://mobaxterm.mobatek.net/download-home-edition.html。</a><br>以root的方式登录，然后输入密码，就会出现以下界面。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-17039f753374123d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"root@vultr\"><br><strong>然后刷入SSR</strong><br>一键代码来自秋水逸冰的博客</p>\n<p>把下面这三段代码分三次复制粘贴到putty或者终端并按回车运行：</p>\n<p>第一段（此段较长，请全部复制粘贴到putty，然后按回车键运行，点击右键即可粘贴）</p>\n<p>wget –no-check-certificate -O shadowsocks-all.sh <a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</a><br>#从github上下载shadowsocks-all.sh<br>第二段<strong>（同样复制粘贴然后运行）</strong></p>\n<p>chmod +x shadowsocks-all.sh<br>#给shadowsocks-all.sh 执行权限<br>第三段</p>\n<p>./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log<br>\\运行并记录</p>\n<p>下面就是安装过程</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b0df92b3ef5c8d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"这有四个不同的版本\"><br>我选的是2，shadowsocksR,后面的过程可以默认，一直点回车，也可以更改配置。最后安装成功后也会提示所安装的信息。也可以通过vi /etc/shadowsocks-r/config.json 修改配置<br><strong>提速</strong><br>现在自带bbr提速，所以不用更改。。<br><strong>一些常用相关命令</strong><br>修改SSR密码或者协议　vi /etc/shadowsocks-r/config.json（改了密码后需要重启SS）<br>SSR重启　/etc/init.d/shadowsocks-r restart<br>查看SSR状态   /etc/init.d/shadowsocks-r status<br>卸载SSR　./shadowsocks-all.sh uninstall</p>\n<p>做到以上服务器端SSR就搭建完成了，然后就是配置客户端了。<br><strong>路由器</strong><br>有些路由器自带SSR，把配置信息填进去就可以用了。我用的裴讯K2P刷了一个openwrt固件，然后可用SSR。路由器好处是，手机电脑可以不用下载客户端，连上网就可以使用SSR带来的功能😊<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8921e33abe8bf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.png\"><br><strong>手机端</strong><br>ios可用shaodowrocket,potatso 2等，当然国区不行0.0<br>Android可用SSR，SSRR等<a href=\"https://github.com/shadowsocksrr/shadowsocksr-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a><br>电脑端可用SSR等<br><strong>Brook配置过程</strong><br>参考<a href=\"https://doub.io/brook-jc1/\" target=\"_blank\" rel=\"noopener\">https://doub.io/brook-jc1/</a><br>使用一键脚本<br>系统要求：CentOS 6+ / Debian 6+ / Ubuntu 14.04 +<br>安装步骤<br>执行下面的代码下载并运行脚本。</p>\n<p>wget -N –no-check-certificate <a href=\"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh</a> &amp;&amp; chmod +x brook.sh &amp;&amp; bash brook.sh<br>运行脚本后会出现脚本操作菜单，选择并输入 1 就会开始安装。<br>进入下载脚本的目录并运行脚本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./brook.sh</span><br><span class=\"line\">然后选择你要执行的选项即可。</span><br><span class=\"line\"></span><br><span class=\"line\"> Brook 一键管理脚本 [vx.x.x]</span><br><span class=\"line\"> ---- Toyo | doub.io/brook-jc3 ----</span><br><span class=\"line\"> </span><br><span class=\"line\"> 0. 升级脚本</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 1. 安装 Brook</span><br><span class=\"line\"> 2. 升级 Brook</span><br><span class=\"line\"> 3. 卸载 Brook</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 4. 启动 Brook</span><br><span class=\"line\"> 5. 停止 Brook</span><br><span class=\"line\"> 6. 重启 Brook</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> 7. 设置 账号配置</span><br><span class=\"line\"> 8. 查看 账号信息</span><br><span class=\"line\"> 9. 查看 日志信息</span><br><span class=\"line\">10. 查看 链接信息</span><br><span class=\"line\">————————————</span><br><span class=\"line\"> </span><br><span class=\"line\"> 当前状态: 已安装 并 已启动</span><br><span class=\"line\"> </span><br><span class=\"line\"> 请输入数字 [0-10]:</span><br><span class=\"line\">其他操作</span><br><span class=\"line\">启动：/etc/init.d/brook start</span><br><span class=\"line\"></span><br><span class=\"line\">停止：/etc/init.d/brook stop</span><br><span class=\"line\"></span><br><span class=\"line\">重启：/etc/init.d/brook restart</span><br><span class=\"line\"></span><br><span class=\"line\">查看状态：/etc/init.d/brook status</span><br><span class=\"line\"></span><br><span class=\"line\">安装目录：/usr/local/brook</span><br><span class=\"line\"></span><br><span class=\"line\">配置文件：/usr/local/brook/brook.conf</span><br><span class=\"line\"></span><br><span class=\"line\">日志文件：/usr/local/brook/brook.log</span><br><span class=\"line\">（注意正常情况下，日志是不会记录使用信息的，只会记录报错）</span><br></pre></td></tr></table></figure></p>\n<p><strong>brook客户端</strong><br>ios： app store 上目前还有，只是没怎么更新。<br>其他客户端：<a href=\"https://github.com/txthinking/brook/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook/releases</a></p>\n"},{"title":"(4.1) git中分支管理-创建合并","date":"2018-11-06T16:03:32.000Z","_content":"\n#小结\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>` eg:`git branch dev`\n切换分支：`git checkout <name>` eg:`git checkout dev`\n创建+切换分支：`git checkout -b <name>` eg:` git checkout -b dev`(相当于上面两条命令）\n合并某分支到当前分支：`git merge <name>` eg:`git merge dev`\n删除分支：`git branch -d <name>`  eg:`git branch -d dev`\n\n#正文\n**在Git里，master分支叫主分支。**\n一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：\n\n![git-br-initial](http://upload-images.jianshu.io/upload_images/14597179-a9c04e64b6ff65ac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长：\n\n当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：\n\n![git-br-create](http://upload-images.jianshu.io/upload_images/14597179-366bce6dbbfe994a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！\n\n不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：\n\n![git-br-dev-fd](http://upload-images.jianshu.io/upload_images/14597179-02fb9ede79fcd202?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：\n\n![git-br-ff-merge](http://upload-images.jianshu.io/upload_images/14597179-7b53bb949edf3c76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以Git合并分支也很快！就改改指针，工作区内容也不变！\n\n合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：\n\n![git-br-rm](http://upload-images.jianshu.io/upload_images/14597179-d24d4eaddb364f34?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/git/git中分支管理-创建合并.md","raw":"---\ntitle: (4.1) git中分支管理-创建合并\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n#小结\nGit鼓励大量使用分支：\n查看分支：`git branch`\n创建分支：`git branch <name>` eg:`git branch dev`\n切换分支：`git checkout <name>` eg:`git checkout dev`\n创建+切换分支：`git checkout -b <name>` eg:` git checkout -b dev`(相当于上面两条命令）\n合并某分支到当前分支：`git merge <name>` eg:`git merge dev`\n删除分支：`git branch -d <name>`  eg:`git branch -d dev`\n\n#正文\n**在Git里，master分支叫主分支。**\n一开始的时候，`master`分支是一条线，Git用`master`指向最新的提交，再用`HEAD`指向`master`，就能确定当前分支，以及当前分支的提交点：\n\n![git-br-initial](http://upload-images.jianshu.io/upload_images/14597179-a9c04e64b6ff65ac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n每次提交，`master`分支都会向前移动一步，这样，随着你不断提交，`master`分支的线也越来越长：\n\n当我们创建新的分支，例如`dev`时，Git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示当前分支在`dev`上：\n\n![git-br-create](http://upload-images.jianshu.io/upload_images/14597179-366bce6dbbfe994a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n你看，Git创建一个分支很快，因为除了增加一个`dev`指针，改改`HEAD`的指向，工作区的文件都没有任何变化！\n\n不过，从现在开始，对工作区的修改和提交就是针对`dev`分支了，比如新提交一次后，`dev`指针往前移动一步，而`master`指针不变：\n\n![git-br-dev-fd](http://upload-images.jianshu.io/upload_images/14597179-02fb9ede79fcd202?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上。Git怎么合并呢？最简单的方法，就是直接把`master`指向`dev`的当前提交，就完成了合并：\n\n![git-br-ff-merge](http://upload-images.jianshu.io/upload_images/14597179-7b53bb949edf3c76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以Git合并分支也很快！就改改指针，工作区内容也不变！\n\n合并完分支后，甚至可以删除`dev`分支。删除`dev`分支就是把`dev`指针给删掉，删掉后，我们就剩下了一条`master`分支：\n\n![git-br-rm](http://upload-images.jianshu.io/upload_images/14597179-d24d4eaddb364f34?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"git/git中分支管理-创建合并","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p12002ztssa6i4j2npv","content":"<p>#小结<br>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code> eg:<code>git branch dev</code><br>切换分支：<code>git checkout &lt;name&gt;</code> eg:<code>git checkout dev</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code> eg:<code>git checkout -b dev</code>(相当于上面两条命令）<br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code> eg:<code>git merge dev</code><br>删除分支：<code>git branch -d &lt;name&gt;</code>  eg:<code>git branch -d dev</code></p>\n<p>#正文<br><strong>在Git里，master分支叫主分支。</strong><br>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a9c04e64b6ff65ac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-initial\"></p>\n<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p>\n<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-366bce6dbbfe994a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-create\"></p>\n<p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>\n<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-02fb9ede79fcd202?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-dev-fd\"></p>\n<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-7b53bb949edf3c76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-ff-merge\"></p>\n<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>\n<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-d24d4eaddb364f34?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-rm\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结<br>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code> eg:<code>git branch dev</code><br>切换分支：<code>git checkout &lt;name&gt;</code> eg:<code>git checkout dev</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code> eg:<code>git checkout -b dev</code>(相当于上面两条命令）<br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code> eg:<code>git merge dev</code><br>删除分支：<code>git branch -d &lt;name&gt;</code>  eg:<code>git branch -d dev</code></p>\n<p>#正文<br><strong>在Git里，master分支叫主分支。</strong><br>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-a9c04e64b6ff65ac?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-initial\"></p>\n<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长：</p>\n<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-366bce6dbbfe994a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-create\"></p>\n<p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>\n<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-02fb9ede79fcd202?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-dev-fd\"></p>\n<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-7b53bb949edf3c76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-ff-merge\"></p>\n<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>\n<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-d24d4eaddb364f34?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-rm\"></p>\n"},{"title":"(7) git之自定义","date":"2018-11-06T16:03:32.000Z","_content":"\n\n\n实际上，Git还有很多可配置项。\n##让Git显示颜色，会让命令输出看起来更醒目：\n\n```\n$ git config --global color.ui true\n```\n这样，Git会适当地显示不同的颜色，比如`git status`命令：\n\n![git-color](http://upload-images.jianshu.io/upload_images/14597179-328e7d67fd85390c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件名就会标上颜色。\n##忽略特殊文件\n某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等，每次`git status`都会显示`Untracked files ...`\n\n**在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。**\n\n不需要从头写`.gitignore`文件，GitHub已经准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore\n\n忽略文件的原则是：\n\n>1.  忽略操作系统自动生成的文件，比如缩略图等；\n>2.  忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的`.class`文件；\n>3.  忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n举个例子：\n\n假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有`Desktop.ini`文件，因此你需要忽略Windows自动生成的垃圾文件：\n\n```\n# Windows:\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n```\n\n然后，继续忽略Python编译产生的`.pyc`、`.pyo`、`dist`等文件或目录：\n\n```\n# Python:\n*.py[cod]\n*.so\n*.egg\n*.egg-info\ndist\nbuild\n\n```\n\n加上你自己定义的文件，最终得到一个完整的`.gitignore`文件，内容如下：\n\n```\n# Windows:\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# Python:\n*.py[cod]\n*.so\n*.egg\n*.egg-info\ndist\nbuild\n\n# My configurations:\ndb.ini\ndeploy_key_rsa\n\n```\n\n最后一步就是把`.gitignore`也提交到Git，就完成了！当然检验`.gitignore`的标准是`git status`命令是不是说`working directory clean`。\n\n使用Windows的童鞋注意了，如果你在资源管理器里新建一个`.gitignore`文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为`.gitignore`了。\n\n有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被`.gitignore`忽略了：\n\n```\n$ git add App.class\nThe following paths are ignored by one of your .gitignore files:\nApp.class\nUse -f if you really want to add them.\n\n```\n\n如果你确实想添加该文件，可以用`-f`强制添加到Git：\n\n```\n$ git add -f App.class\n\n```\n\n或者你发现，可能是`.gitignore`写得有问题，需要找出来到底哪个规则写错了，可以用`git check-ignore`命令检查：\n\n```\n$ git check-ignore -v App.class\n.gitignore:3:*.class    App.class\n\n```\n\nGit会告诉我们，`.gitignore`的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。\n\n### 小结\n\n*   忽略某些文件时，需要编写`.gitignore`；\n\n*   `.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n#配置别名\n\n比如敲`git st`就表示`git status`\n```\n$ git config --global alias.st status\n```\n当然还有别的命令可以简写，很多人都用`co`表示`checkout`，`ci`表示`commit`，`br`表示`branch`：\n```\n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n```\n\n以后提交就可以简写成：\n\n```\n$ git ci -m \"bala bala bala...\"\n```\n**`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。**\n\n命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个`unstage`别名：\n```\n$ git config --global alias.unstage 'reset HEAD'\n```\n当你敲入命令：\n```\n$ git unstage test.py\n```\n实际上Git执行的是：\n```\n$ git reset HEAD test.py\n```\n\n配置一个`git last`，让其显示最后一次提交信息：\n\n```\n$ git config --global alias.last 'log -1'\n```\n这样，用`git last`就能显示最近一次的提交：\n\n```\n$ git last\ncommit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2\nMerge: bd6ae48 291bea8\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Thu Aug 22 22:49:22 2013 +0800\n\n    merge & fix hello.py\n\n```\n甚至还有人丧心病狂地把`lg`配置成了：\n```\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n来看看`git lg`的效果：\n![git-lg](http://upload-images.jianshu.io/upload_images/14597179-8a4705577f38c01f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！\n\n# 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n\n配置文件放哪了？每个仓库的Git配置文件都放在`.git/config`文件中：\n\n```\n$ cat .git/config \n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[remote \"origin\"]\n    url = git@github.com:michaelliao/learngit.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[alias]\n    last = log -1\n\n```\n\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中：\n\n```\n$ cat .gitconfig\n[alias]\n    co = checkout\n    ci = commit\n    br = branch\n    st = status\n[user]\n    name = Your Name\n    email = your@email.com\n\n```\n\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n### 小结\n\n给Git配置好别名，就可以输入命令时偷个懒。\n","source":"_posts/git/git之自定义.md","raw":"---\ntitle: (7) git之自定义\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n\n\n实际上，Git还有很多可配置项。\n##让Git显示颜色，会让命令输出看起来更醒目：\n\n```\n$ git config --global color.ui true\n```\n这样，Git会适当地显示不同的颜色，比如`git status`命令：\n\n![git-color](http://upload-images.jianshu.io/upload_images/14597179-328e7d67fd85390c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n文件名就会标上颜色。\n##忽略特殊文件\n某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等，每次`git status`都会显示`Untracked files ...`\n\n**在Git工作区的根目录下创建一个特殊的`.gitignore`文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。**\n\n不需要从头写`.gitignore`文件，GitHub已经准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore\n\n忽略文件的原则是：\n\n>1.  忽略操作系统自动生成的文件，比如缩略图等；\n>2.  忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的`.class`文件；\n>3.  忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n\n举个例子：\n\n假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有`Desktop.ini`文件，因此你需要忽略Windows自动生成的垃圾文件：\n\n```\n# Windows:\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n```\n\n然后，继续忽略Python编译产生的`.pyc`、`.pyo`、`dist`等文件或目录：\n\n```\n# Python:\n*.py[cod]\n*.so\n*.egg\n*.egg-info\ndist\nbuild\n\n```\n\n加上你自己定义的文件，最终得到一个完整的`.gitignore`文件，内容如下：\n\n```\n# Windows:\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# Python:\n*.py[cod]\n*.so\n*.egg\n*.egg-info\ndist\nbuild\n\n# My configurations:\ndb.ini\ndeploy_key_rsa\n\n```\n\n最后一步就是把`.gitignore`也提交到Git，就完成了！当然检验`.gitignore`的标准是`git status`命令是不是说`working directory clean`。\n\n使用Windows的童鞋注意了，如果你在资源管理器里新建一个`.gitignore`文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为`.gitignore`了。\n\n有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被`.gitignore`忽略了：\n\n```\n$ git add App.class\nThe following paths are ignored by one of your .gitignore files:\nApp.class\nUse -f if you really want to add them.\n\n```\n\n如果你确实想添加该文件，可以用`-f`强制添加到Git：\n\n```\n$ git add -f App.class\n\n```\n\n或者你发现，可能是`.gitignore`写得有问题，需要找出来到底哪个规则写错了，可以用`git check-ignore`命令检查：\n\n```\n$ git check-ignore -v App.class\n.gitignore:3:*.class    App.class\n\n```\n\nGit会告诉我们，`.gitignore`的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。\n\n### 小结\n\n*   忽略某些文件时，需要编写`.gitignore`；\n\n*   `.gitignore`文件本身要放到版本库里，并且可以对`.gitignore`做版本管理！\n\n#配置别名\n\n比如敲`git st`就表示`git status`\n```\n$ git config --global alias.st status\n```\n当然还有别的命令可以简写，很多人都用`co`表示`checkout`，`ci`表示`commit`，`br`表示`branch`：\n```\n$ git config --global alias.co checkout\n$ git config --global alias.ci commit\n$ git config --global alias.br branch\n```\n\n以后提交就可以简写成：\n\n```\n$ git ci -m \"bala bala bala...\"\n```\n**`--global`参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。**\n\n命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个`unstage`别名：\n```\n$ git config --global alias.unstage 'reset HEAD'\n```\n当你敲入命令：\n```\n$ git unstage test.py\n```\n实际上Git执行的是：\n```\n$ git reset HEAD test.py\n```\n\n配置一个`git last`，让其显示最后一次提交信息：\n\n```\n$ git config --global alias.last 'log -1'\n```\n这样，用`git last`就能显示最近一次的提交：\n\n```\n$ git last\ncommit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2\nMerge: bd6ae48 291bea8\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Thu Aug 22 22:49:22 2013 +0800\n\n    merge & fix hello.py\n\n```\n甚至还有人丧心病狂地把`lg`配置成了：\n```\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n来看看`git lg`的效果：\n![git-lg](http://upload-images.jianshu.io/upload_images/14597179-8a4705577f38c01f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！\n\n# 配置文件\n\n配置Git的时候，加上`--global`是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n\n配置文件放哪了？每个仓库的Git配置文件都放在`.git/config`文件中：\n\n```\n$ cat .git/config \n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[remote \"origin\"]\n    url = git@github.com:michaelliao/learngit.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[alias]\n    last = log -1\n\n```\n\n别名就在`[alias]`后面，要删除别名，直接把对应的行删掉即可。\n\n而当前用户的Git配置文件放在用户主目录下的一个隐藏文件`.gitconfig`中：\n\n```\n$ cat .gitconfig\n[alias]\n    co = checkout\n    ci = commit\n    br = branch\n    st = status\n[user]\n    name = Your Name\n    email = your@email.com\n\n```\n\n配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n### 小结\n\n给Git配置好别名，就可以输入命令时偷个懒。\n","slug":"git/git之自定义","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p140031tssaa8f8i5iu","content":"<p>实际上，Git还有很多可配置项。</p>\n<p>##让Git显示颜色，会让命令输出看起来更醒目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global color.ui true</span><br></pre></td></tr></table></figure>\n<p>这样，Git会适当地显示不同的颜色，比如<code>git status</code>命令：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-328e7d67fd85390c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-color\"></p>\n<p>文件名就会标上颜色。</p>\n<p>##忽略特殊文件<br>某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等，每次<code>git status</code>都会显示<code>Untracked files ...</code></p>\n<p><strong>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</strong></p>\n<p>不需要从头写<code>.gitignore</code>文件，GitHub已经准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a></p>\n<p>忽略文件的原则是：</p>\n<blockquote>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n</blockquote>\n<p>举个例子：</p>\n<p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略Windows自动生成的垃圾文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Windows:</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">ehthumbs.db</span><br><span class=\"line\">Desktop.ini</span><br></pre></td></tr></table></figure>\n<p>然后，继续忽略Python编译产生的<code>.pyc</code>、<code>.pyo</code>、<code>dist</code>等文件或目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python:</span><br><span class=\"line\">*.py[cod]</span><br><span class=\"line\">*.so</span><br><span class=\"line\">*.egg</span><br><span class=\"line\">*.egg-info</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br></pre></td></tr></table></figure>\n<p>加上你自己定义的文件，最终得到一个完整的<code>.gitignore</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Windows:</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">ehthumbs.db</span><br><span class=\"line\">Desktop.ini</span><br><span class=\"line\"></span><br><span class=\"line\"># Python:</span><br><span class=\"line\">*.py[cod]</span><br><span class=\"line\">*.so</span><br><span class=\"line\">*.egg</span><br><span class=\"line\">*.egg-info</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br><span class=\"line\"></span><br><span class=\"line\"># My configurations:</span><br><span class=\"line\">db.ini</span><br><span class=\"line\">deploy_key_rsa</span><br></pre></td></tr></table></figure>\n<p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>。</p>\n<p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p>\n<p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add App.class</span><br><span class=\"line\">The following paths are ignored by one of your .gitignore files:</span><br><span class=\"line\">App.class</span><br><span class=\"line\">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure>\n<p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -f App.class</span><br></pre></td></tr></table></figure>\n<p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git check-ignore -v App.class</span><br><span class=\"line\">.gitignore:3:*.class    App.class</span><br></pre></td></tr></table></figure>\n<p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>忽略某些文件时，需要编写<code>.gitignore</code>；</p>\n</li>\n<li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n</ul>\n<p>#配置别名</p>\n<p>比如敲<code>git st</code>就表示<code>git status</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure></p>\n<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure></p>\n<p>以后提交就可以简写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>\n<p><strong><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</strong></p>\n<p>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.unstage &apos;reset HEAD&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当你敲入命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git unstage test.py</span><br></pre></td></tr></table></figure></p>\n<p>实际上Git执行的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD test.py</span><br></pre></td></tr></table></figure></p>\n<p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.last &apos;log -1&apos;</span><br></pre></td></tr></table></figure>\n<p>这样，用<code>git last</code>就能显示最近一次的提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git last</span><br><span class=\"line\">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class=\"line\">Merge: bd6ae48 291bea8</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure>\n<p>甚至还有人丧心病狂地把<code>lg</code>配置成了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure></p>\n<p>来看看<code>git lg</code>的效果：<br><img src=\"http://upload-images.jianshu.io/upload_images/14597179-8a4705577f38c01f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-lg\"><br>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p>\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>\n<p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .git/config </span><br><span class=\"line\">[core]</span><br><span class=\"line\">    repositoryformatversion = 0</span><br><span class=\"line\">    filemode = true</span><br><span class=\"line\">    bare = false</span><br><span class=\"line\">    logallrefupdates = true</span><br><span class=\"line\">    ignorecase = true</span><br><span class=\"line\">    precomposeunicode = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">    url = git@github.com:michaelliao/learngit.git</span><br><span class=\"line\">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">    remote = origin</span><br><span class=\"line\">    merge = refs/heads/master</span><br><span class=\"line\">[alias]</span><br><span class=\"line\">    last = log -1</span><br></pre></td></tr></table></figure>\n<p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p>\n<p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .gitconfig</span><br><span class=\"line\">[alias]</span><br><span class=\"line\">    co = checkout</span><br><span class=\"line\">    ci = commit</span><br><span class=\"line\">    br = branch</span><br><span class=\"line\">    st = status</span><br><span class=\"line\">[user]</span><br><span class=\"line\">    name = Your Name</span><br><span class=\"line\">    email = your@email.com</span><br></pre></td></tr></table></figure>\n<p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>给Git配置好别名，就可以输入命令时偷个懒。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，Git还有很多可配置项。</p>\n<p>##让Git显示颜色，会让命令输出看起来更醒目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global color.ui true</span><br></pre></td></tr></table></figure>\n<p>这样，Git会适当地显示不同的颜色，比如<code>git status</code>命令：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-328e7d67fd85390c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-color\"></p>\n<p>文件名就会标上颜色。</p>\n<p>##忽略特殊文件<br>某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等，每次<code>git status</code>都会显示<code>Untracked files ...</code></p>\n<p><strong>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</strong></p>\n<p>不需要从头写<code>.gitignore</code>文件，GitHub已经准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a></p>\n<p>忽略文件的原则是：</p>\n<blockquote>\n<ol>\n<li>忽略操作系统自动生成的文件，比如缩略图等；</li>\n<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li>\n<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>\n</ol>\n</blockquote>\n<p>举个例子：</p>\n<p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<code>Desktop.ini</code>文件，因此你需要忽略Windows自动生成的垃圾文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Windows:</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">ehthumbs.db</span><br><span class=\"line\">Desktop.ini</span><br></pre></td></tr></table></figure>\n<p>然后，继续忽略Python编译产生的<code>.pyc</code>、<code>.pyo</code>、<code>dist</code>等文件或目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python:</span><br><span class=\"line\">*.py[cod]</span><br><span class=\"line\">*.so</span><br><span class=\"line\">*.egg</span><br><span class=\"line\">*.egg-info</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br></pre></td></tr></table></figure>\n<p>加上你自己定义的文件，最终得到一个完整的<code>.gitignore</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Windows:</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">ehthumbs.db</span><br><span class=\"line\">Desktop.ini</span><br><span class=\"line\"></span><br><span class=\"line\"># Python:</span><br><span class=\"line\">*.py[cod]</span><br><span class=\"line\">*.so</span><br><span class=\"line\">*.egg</span><br><span class=\"line\">*.egg-info</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br><span class=\"line\"></span><br><span class=\"line\"># My configurations:</span><br><span class=\"line\">db.ini</span><br><span class=\"line\">deploy_key_rsa</span><br></pre></td></tr></table></figure>\n<p>最后一步就是把<code>.gitignore</code>也提交到Git，就完成了！当然检验<code>.gitignore</code>的标准是<code>git status</code>命令是不是说<code>working directory clean</code>。</p>\n<p>使用Windows的童鞋注意了，如果你在资源管理器里新建一个<code>.gitignore</code>文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为<code>.gitignore</code>了。</p>\n<p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add App.class</span><br><span class=\"line\">The following paths are ignored by one of your .gitignore files:</span><br><span class=\"line\">App.class</span><br><span class=\"line\">Use -f if you really want to add them.</span><br></pre></td></tr></table></figure>\n<p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -f App.class</span><br></pre></td></tr></table></figure>\n<p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git check-ignore -v App.class</span><br><span class=\"line\">.gitignore:3:*.class    App.class</span><br></pre></td></tr></table></figure>\n<p>Git会告诉我们，<code>.gitignore</code>的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>忽略某些文件时，需要编写<code>.gitignore</code>；</p>\n</li>\n<li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>\n</li>\n</ul>\n<p>#配置别名</p>\n<p>比如敲<code>git st</code>就表示<code>git status</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure></p>\n<p>当然还有别的命令可以简写，很多人都用<code>co</code>表示<code>checkout</code>，<code>ci</code>表示<code>commit</code>，<code>br</code>表示<code>branch</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure></p>\n<p>以后提交就可以简写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git ci -m &quot;bala bala bala...&quot;</span><br></pre></td></tr></table></figure>\n<p><strong><code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</strong></p>\n<p>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.unstage &apos;reset HEAD&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当你敲入命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git unstage test.py</span><br></pre></td></tr></table></figure></p>\n<p>实际上Git执行的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD test.py</span><br></pre></td></tr></table></figure></p>\n<p>配置一个<code>git last</code>，让其显示最后一次提交信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.last &apos;log -1&apos;</span><br></pre></td></tr></table></figure>\n<p>这样，用<code>git last</code>就能显示最近一次的提交：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git last</span><br><span class=\"line\">commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2</span><br><span class=\"line\">Merge: bd6ae48 291bea8</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Aug 22 22:49:22 2013 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    merge &amp; fix hello.py</span><br></pre></td></tr></table></figure>\n<p>甚至还有人丧心病狂地把<code>lg</code>配置成了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure></p>\n<p>来看看<code>git lg</code>的效果：<br><img src=\"http://upload-images.jianshu.io/upload_images/14597179-8a4705577f38c01f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-lg\"><br>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p>\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p>\n<p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .git/config </span><br><span class=\"line\">[core]</span><br><span class=\"line\">    repositoryformatversion = 0</span><br><span class=\"line\">    filemode = true</span><br><span class=\"line\">    bare = false</span><br><span class=\"line\">    logallrefupdates = true</span><br><span class=\"line\">    ignorecase = true</span><br><span class=\"line\">    precomposeunicode = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">    url = git@github.com:michaelliao/learngit.git</span><br><span class=\"line\">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">    remote = origin</span><br><span class=\"line\">    merge = refs/heads/master</span><br><span class=\"line\">[alias]</span><br><span class=\"line\">    last = log -1</span><br></pre></td></tr></table></figure>\n<p>别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可。</p>\n<p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .gitconfig</span><br><span class=\"line\">[alias]</span><br><span class=\"line\">    co = checkout</span><br><span class=\"line\">    ci = commit</span><br><span class=\"line\">    br = branch</span><br><span class=\"line\">    st = status</span><br><span class=\"line\">[user]</span><br><span class=\"line\">    name = Your Name</span><br><span class=\"line\">    email = your@email.com</span><br></pre></td></tr></table></figure>\n<p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>给Git配置好别名，就可以输入命令时偷个懒。</p>\n"},{"title":"(6) git之使用github","date":"2018-11-06T16:03:32.000Z","_content":"\n\n#小结\n- 在GitHub上，可以任意Fork开源仓库；\n- 自己拥有Fork后的仓库的读写权限；\n- 可以推送pull request给官方仓库来贡献代码。\n\n# 正文\n**参与一个开源项目**\n\n比如bootstrap项目，这是一个非常强大的CSS框架，访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：\n```\ngit clone git@github.com:itswl/bootstrap.git\n```\n从自己账号下clone才可以推送，从原作者仓库地址clone会因为权限问题，不能推送修改。\n你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。\n","source":"_posts/git/git之使用github.md","raw":"---\ntitle: (6) git之使用github\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n\n#小结\n- 在GitHub上，可以任意Fork开源仓库；\n- 自己拥有Fork后的仓库的读写权限；\n- 可以推送pull request给官方仓库来贡献代码。\n\n# 正文\n**参与一个开源项目**\n\n比如bootstrap项目，这是一个非常强大的CSS框架，访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：\n```\ngit clone git@github.com:itswl/bootstrap.git\n```\n从自己账号下clone才可以推送，从原作者仓库地址clone会因为权限问题，不能推送修改。\n你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。\n","slug":"git/git之使用github","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p180032tssanmj54g7m","content":"<p>#小结</p>\n<ul>\n<li>在GitHub上，可以任意Fork开源仓库；</li>\n<li>自己拥有Fork后的仓库的读写权限；</li>\n<li>可以推送pull request给官方仓库来贡献代码。</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><strong>参与一个开源项目</strong></p>\n<p>比如bootstrap项目，这是一个非常强大的CSS框架，访问它的项目主页<a href=\"https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：\" target=\"_blank\" rel=\"noopener\">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:itswl/bootstrap.git</span><br></pre></td></tr></table></figure></p>\n<p>从自己账号下clone才可以推送，从原作者仓库地址clone会因为权限问题，不能推送修改。<br>你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结</p>\n<ul>\n<li>在GitHub上，可以任意Fork开源仓库；</li>\n<li>自己拥有Fork后的仓库的读写权限；</li>\n<li>可以推送pull request给官方仓库来贡献代码。</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><strong>参与一个开源项目</strong></p>\n<p>比如bootstrap项目，这是一个非常强大的CSS框架，访问它的项目主页<a href=\"https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：\" target=\"_blank\" rel=\"noopener\">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:itswl/bootstrap.git</span><br></pre></td></tr></table></figure></p>\n<p>从自己账号下clone才可以推送，从原作者仓库地址clone会因为权限问题，不能推送修改。<br>你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。</p>\n"},{"title":"(2) git中的工作区与暂存区","date":"2018-11-06T16:03:32.000Z","_content":"#小结\n1. 工作区（Working Directory)就是电脑里能看到的目录。\n2. 版本库（Repository）工作区有一个隐藏目录`.git`，这个不算工作区，而是Git的版本库。\n3. `git add`实际上就是把文件修改添加到暂存区，git commit`实际上就是把暂存区的所有内容提交到当前分支。\n4. `git checkout -- file`丢弃工作区的修改。\n5. `git reset HEAD <file>`把暂存区的修改撤销掉（unstage），重新放回工作区。\n6. 从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n7. 把误删的文件恢复到版本库的版本`git checkout`\n\n\n#### 工作区（Working Directory）\n\n就是电脑里能看到的目录，比如`git`文件夹就是一个工作区：\n\n![工作区（Working Directory）](https://upload-images.jianshu.io/upload_images/14597179-37177327fcf2fe92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 版本库（Repository）\n\n工作区有一个隐藏目录`.git`，这个不算工作区，而是Git的版本库。\n![隐藏目录.git](https://upload-images.jianshu.io/upload_images/14597179-a4effd3b3fb5ec5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Git版本库](https://upload-images.jianshu.io/upload_images/14597179-1018795b03191282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支`master`，以及指向`master`的一个指针叫`HEAD`。\n\n\n![git-repo](http://upload-images.jianshu.io/upload_images/14597179-cc335edbf830ab71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n分支和`HEAD`的概念我们以后再讲。\n\n前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n\n第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个`master`分支，所以，现在，`git commit`就是往`master`分支上提交更改。\n\n你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n俗话说，实践出真知。现在，我们再练习一遍，先对`readme.txt`做个修改，比如加上一行内容：\n\n```\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\n\n```\n\n然后，在工作区新增一个`LICENSE`文本文件（内容随便写）。\n\n先用`git status`查看一下状态：\n\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   readme.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    LICENSE\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\nGit非常清楚地告诉我们，`readme.txt`被修改了，而`LICENSE`还从来没有被添加过，所以它的状态是`Untracked`。\n\n现在，使用两次命令`git add`，把`readme.txt`和`LICENSE`都添加后，用`git status`再查看一下：\n\n```\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   LICENSE\n    modified:   readme.txt\n\n```\n\n现在，暂存区的状态就变成这样了：\n\n![git-stage](http://upload-images.jianshu.io/upload_images/14597179-95ddbacf92ccd6b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以，`git add`命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行`git commit`就可以一次性把暂存区的所有修改提交到分支。\n\n```\n$ git commit -m \"understand how stage works\"\n[master e43a48b] understand how stage works\n 2 files changed, 2 insertions(+)\n create mode 100644 LICENSE\n\n```\n\n一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：\n\n```\n$ git status\nOn branch master\nnothing to commit, working tree clean\n\n```\n\n现在版本库变成了这样，暂存区就没有任何内容了：\n\n![git-stage-after-commit](http://upload-images.jianshu.io/upload_images/14597179-83d4fda49d011a61?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**Git跟踪并管理的是修改，而非文件。每次修改，如果不用`git add`到暂存区，那就不会加入到`commit`中**\n**第一次修改 -> ``git add`` -> 第二次修改 -> ``git commit``**,只会管理到第一次修改。\n**可以多次``git add``后一并``git commit``:**\n**第一次修改 -> ``git add`` -> 第二次修改 -> ``git add`` ->`` git commit``**\n**`git checkout -- file`可以丢弃工作区的修改:**\n``git checkout -- readme.md``，就是让这个文件回到最近一次git commit或git add时的状态。\n**如果已经git add,但没有git commit,可以通过命令`git reset HEAD <file>`可以把暂存区的修改撤销掉（unstage），重新放回工作区。例如`git reset HEAD readme.md`**\n`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n已经提交了不合适的修改到版本库时，想要撤销本次提交，可以版本回退，不过前提是没有推送到远程库\n\n###文件删除\n新建一个test.txt文件到Git并提交，`git add test.txt`,`git commit -m \"add test.txt\"`。本地删除后，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    deleted:    test.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n现在你有两个选择:\n**1. 确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`：**\n```\n$ git rm test.txt\nrm 'test.txt'\n\n$ git commit -m \"remove test.txt\"\n[master d46f35e] remove test.txt\n 1 file changed, 1 deletion(-)\n delete mode 100644 test.txt\n```\n**2. 删错了，版本库里还有，所以可以很轻松地把误删的文件恢复到版本库的版本：**\n```\n$ git checkout -- test.txt\n```\n`git checkout`其实是用版本库里的版本替换工作区的版本\n\n","source":"_posts/git/git中的工作区与暂存区.md","raw":"---\ntitle: (2) git中的工作区与暂存区\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n#小结\n1. 工作区（Working Directory)就是电脑里能看到的目录。\n2. 版本库（Repository）工作区有一个隐藏目录`.git`，这个不算工作区，而是Git的版本库。\n3. `git add`实际上就是把文件修改添加到暂存区，git commit`实际上就是把暂存区的所有内容提交到当前分支。\n4. `git checkout -- file`丢弃工作区的修改。\n5. `git reset HEAD <file>`把暂存区的修改撤销掉（unstage），重新放回工作区。\n6. 从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`\n7. 把误删的文件恢复到版本库的版本`git checkout`\n\n\n#### 工作区（Working Directory）\n\n就是电脑里能看到的目录，比如`git`文件夹就是一个工作区：\n\n![工作区（Working Directory）](https://upload-images.jianshu.io/upload_images/14597179-37177327fcf2fe92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n#### 版本库（Repository）\n\n工作区有一个隐藏目录`.git`，这个不算工作区，而是Git的版本库。\n![隐藏目录.git](https://upload-images.jianshu.io/upload_images/14597179-a4effd3b3fb5ec5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Git版本库](https://upload-images.jianshu.io/upload_images/14597179-1018795b03191282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nGit的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支`master`，以及指向`master`的一个指针叫`HEAD`。\n\n\n![git-repo](http://upload-images.jianshu.io/upload_images/14597179-cc335edbf830ab71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n分支和`HEAD`的概念我们以后再讲。\n\n前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n\n第一步是用`git add`把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用`git commit`提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个`master`分支，所以，现在，`git commit`就是往`master`分支上提交更改。\n\n你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n俗话说，实践出真知。现在，我们再练习一遍，先对`readme.txt`做个修改，比如加上一行内容：\n\n```\nGit is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\n\n```\n\n然后，在工作区新增一个`LICENSE`文本文件（内容随便写）。\n\n先用`git status`查看一下状态：\n\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   readme.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    LICENSE\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\nGit非常清楚地告诉我们，`readme.txt`被修改了，而`LICENSE`还从来没有被添加过，所以它的状态是`Untracked`。\n\n现在，使用两次命令`git add`，把`readme.txt`和`LICENSE`都添加后，用`git status`再查看一下：\n\n```\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    new file:   LICENSE\n    modified:   readme.txt\n\n```\n\n现在，暂存区的状态就变成这样了：\n\n![git-stage](http://upload-images.jianshu.io/upload_images/14597179-95ddbacf92ccd6b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以，`git add`命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行`git commit`就可以一次性把暂存区的所有修改提交到分支。\n\n```\n$ git commit -m \"understand how stage works\"\n[master e43a48b] understand how stage works\n 2 files changed, 2 insertions(+)\n create mode 100644 LICENSE\n\n```\n\n一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：\n\n```\n$ git status\nOn branch master\nnothing to commit, working tree clean\n\n```\n\n现在版本库变成了这样，暂存区就没有任何内容了：\n\n![git-stage-after-commit](http://upload-images.jianshu.io/upload_images/14597179-83d4fda49d011a61?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n**Git跟踪并管理的是修改，而非文件。每次修改，如果不用`git add`到暂存区，那就不会加入到`commit`中**\n**第一次修改 -> ``git add`` -> 第二次修改 -> ``git commit``**,只会管理到第一次修改。\n**可以多次``git add``后一并``git commit``:**\n**第一次修改 -> ``git add`` -> 第二次修改 -> ``git add`` ->`` git commit``**\n**`git checkout -- file`可以丢弃工作区的修改:**\n``git checkout -- readme.md``，就是让这个文件回到最近一次git commit或git add时的状态。\n**如果已经git add,但没有git commit,可以通过命令`git reset HEAD <file>`可以把暂存区的修改撤销掉（unstage），重新放回工作区。例如`git reset HEAD readme.md`**\n`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。\n\n已经提交了不合适的修改到版本库时，想要撤销本次提交，可以版本回退，不过前提是没有推送到远程库\n\n###文件删除\n新建一个test.txt文件到Git并提交，`git add test.txt`,`git commit -m \"add test.txt\"`。本地删除后，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    deleted:    test.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n现在你有两个选择:\n**1. 确实要从版本库中删除该文件，那就用命令`git rm`删掉，并且`git commit`：**\n```\n$ git rm test.txt\nrm 'test.txt'\n\n$ git commit -m \"remove test.txt\"\n[master d46f35e] remove test.txt\n 1 file changed, 1 deletion(-)\n delete mode 100644 test.txt\n```\n**2. 删错了，版本库里还有，所以可以很轻松地把误删的文件恢复到版本库的版本：**\n```\n$ git checkout -- test.txt\n```\n`git checkout`其实是用版本库里的版本替换工作区的版本\n\n","slug":"git/git中的工作区与暂存区","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1a0034tssabv36bs5d","content":"<p>#小结</p>\n<ol>\n<li>工作区（Working Directory)就是电脑里能看到的目录。</li>\n<li>版本库（Repository）工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</li>\n<li><code>git add</code>实际上就是把文件修改添加到暂存区，git commit`实际上就是把暂存区的所有内容提交到当前分支。</li>\n<li><code>git checkout -- file</code>丢弃工作区的修改。</li>\n<li><code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉（unstage），重新放回工作区。</li>\n<li>从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></li>\n<li>把误删的文件恢复到版本库的版本<code>git checkout</code></li>\n</ol>\n<h4 id=\"工作区（Working-Directory）\"><a href=\"#工作区（Working-Directory）\" class=\"headerlink\" title=\"工作区（Working Directory）\"></a>工作区（Working Directory）</h4><p>就是电脑里能看到的目录，比如<code>git</code>文件夹就是一个工作区：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-37177327fcf2fe92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"工作区（Working Directory）\"></p>\n<h4 id=\"版本库（Repository）\"><a href=\"#版本库（Repository）\" class=\"headerlink\" title=\"版本库（Repository）\"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a4effd3b3fb5ec5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"隐藏目录.git\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1018795b03191282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Git版本库\"></p>\n<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-cc335edbf830ab71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-repo\"></p>\n<p>分支和<code>HEAD</code>的概念我们以后再讲。</p>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>\n<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software distributed under the GPL.</span><br><span class=\"line\">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure>\n<p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>\n<p>先用<code>git status</code>查看一下状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">    LICENSE</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n<p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>\n<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    new file:   LICENSE</span><br><span class=\"line\">    modified:   readme.txt</span><br></pre></td></tr></table></figure>\n<p>现在，暂存区的状态就变成这样了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-95ddbacf92ccd6b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-stage\"></p>\n<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;understand how stage works&quot;</span><br><span class=\"line\">[master e43a48b] understand how stage works</span><br><span class=\"line\"> 2 files changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>\n<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-83d4fda49d011a61?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-stage-after-commit\"></p>\n<p><strong>Git跟踪并管理的是修改，而非文件。每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</strong><br><strong>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></strong>,只会管理到第一次修改。<br><strong>可以多次<code>git add</code>后一并<code>git commit</code>:</strong><br><strong>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt;<code>git commit</code></strong><br><strong><code>git checkout -- file</code>可以丢弃工作区的修改:</strong><br><code>git checkout -- readme.md</code>，就是让这个文件回到最近一次git commit或git add时的状态。<br><strong>如果已经git add,但没有git commit,可以通过命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。例如<code>git reset HEAD readme.md</code></strong><br><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>已经提交了不合适的修改到版本库时，想要撤销本次提交，可以版本回退，不过前提是没有推送到远程库</p>\n<p>###文件删除<br>新建一个test.txt文件到Git并提交，<code>git add test.txt</code>,<code>git commit -m &quot;add test.txt&quot;</code>。本地删除后，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    deleted:    test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>现在你有两个选择:<br><strong>1. 确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm test.txt</span><br><span class=\"line\">rm &apos;test.txt&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;remove test.txt&quot;</span><br><span class=\"line\">[master d46f35e] remove test.txt</span><br><span class=\"line\"> 1 file changed, 1 deletion(-)</span><br><span class=\"line\"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 删错了，版本库里还有，所以可以很轻松地把误删的文件恢复到版本库的版本：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></p>\n<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结</p>\n<ol>\n<li>工作区（Working Directory)就是电脑里能看到的目录。</li>\n<li>版本库（Repository）工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</li>\n<li><code>git add</code>实际上就是把文件修改添加到暂存区，git commit`实际上就是把暂存区的所有内容提交到当前分支。</li>\n<li><code>git checkout -- file</code>丢弃工作区的修改。</li>\n<li><code>git reset HEAD &lt;file&gt;</code>把暂存区的修改撤销掉（unstage），重新放回工作区。</li>\n<li>从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></li>\n<li>把误删的文件恢复到版本库的版本<code>git checkout</code></li>\n</ol>\n<h4 id=\"工作区（Working-Directory）\"><a href=\"#工作区（Working-Directory）\" class=\"headerlink\" title=\"工作区（Working Directory）\"></a>工作区（Working Directory）</h4><p>就是电脑里能看到的目录，比如<code>git</code>文件夹就是一个工作区：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-37177327fcf2fe92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"工作区（Working Directory）\"></p>\n<h4 id=\"版本库（Repository）\"><a href=\"#版本库（Repository）\" class=\"headerlink\" title=\"版本库（Repository）\"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a4effd3b3fb5ec5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"隐藏目录.git\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1018795b03191282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Git版本库\"></p>\n<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-cc335edbf830ab71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-repo\"></p>\n<p>分支和<code>HEAD</code>的概念我们以后再讲。</p>\n<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>\n<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>\n<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n<p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software distributed under the GPL.</span><br><span class=\"line\">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure>\n<p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>\n<p>先用<code>git status</code>查看一下状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">    LICENSE</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n<p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>\n<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    new file:   LICENSE</span><br><span class=\"line\">    modified:   readme.txt</span><br></pre></td></tr></table></figure>\n<p>现在，暂存区的状态就变成这样了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-95ddbacf92ccd6b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-stage\"></p>\n<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;understand how stage works&quot;</span><br><span class=\"line\">[master e43a48b] understand how stage works</span><br><span class=\"line\"> 2 files changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure>\n<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-83d4fda49d011a61?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-stage-after-commit\"></p>\n<p><strong>Git跟踪并管理的是修改，而非文件。每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</strong><br><strong>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></strong>,只会管理到第一次修改。<br><strong>可以多次<code>git add</code>后一并<code>git commit</code>:</strong><br><strong>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt;<code>git commit</code></strong><br><strong><code>git checkout -- file</code>可以丢弃工作区的修改:</strong><br><code>git checkout -- readme.md</code>，就是让这个文件回到最近一次git commit或git add时的状态。<br><strong>如果已经git add,但没有git commit,可以通过命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。例如<code>git reset HEAD readme.md</code></strong><br><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>\n<p>已经提交了不合适的修改到版本库时，想要撤销本次提交，可以版本回退，不过前提是没有推送到远程库</p>\n<p>###文件删除<br>新建一个test.txt文件到Git并提交，<code>git add test.txt</code>,<code>git commit -m &quot;add test.txt&quot;</code>。本地删除后，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    deleted:    test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>现在你有两个选择:<br><strong>1. 确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm test.txt</span><br><span class=\"line\">rm &apos;test.txt&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;remove test.txt&quot;</span><br><span class=\"line\">[master d46f35e] remove test.txt</span><br><span class=\"line\"> 1 file changed, 1 deletion(-)</span><br><span class=\"line\"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure></p>\n<p><strong>2. 删错了，版本库里还有，所以可以很轻松地把误删的文件恢复到版本库的版本：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure></p>\n<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本</p>\n"},{"title":"(4.4) git分支管理-Bug分支","date":"2018-11-06T16:03:32.000Z","_content":"\n\n#小结\n1. 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n2. 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n#正文\n**当前正在dev上进行的工作还没有提交,但要先建立一个issue-101分支来修复BUG：**\n![保存现场](https://upload-images.jianshu.io/upload_images/14597179-0d67e4e369d30cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：**\n![git stash](https://upload-images.jianshu.io/upload_images/14597179-69249ee4b5c583e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![上次commit后的状态](https://upload-images.jianshu.io/upload_images/14597179-af8c250796d0150e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug](https://upload-images.jianshu.io/upload_images/14597179-5f2306c620ffeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：\n\n![创建Bug分支](https://upload-images.jianshu.io/upload_images/14597179-8c5231f3b4033e30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：\n修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：\n\n![上述步骤](https://upload-images.jianshu.io/upload_images/14597179-ca2dc94b23eac05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>1. 现在，接着回到dev分支干活。\n>2. 工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：\n3>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n![恢复现场（当然BUG也在）](https://upload-images.jianshu.io/upload_images/14597179-2f9da50af30f617a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n再用`git stash list`查看，就看不到任何stash内容了：\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5738c72bf1a16a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**可以多次stash，恢复的时候，先用`git stash list`查看，然后恢复指定的stash，用命令：`git stash apply stash@{0}`\n","source":"_posts/git/git分支管理-Bug分支.md","raw":"\n---\ntitle: (4.4) git分支管理-Bug分支\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n\n#小结\n1. 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n2. 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n#正文\n**当前正在dev上进行的工作还没有提交,但要先建立一个issue-101分支来修复BUG：**\n![保存现场](https://upload-images.jianshu.io/upload_images/14597179-0d67e4e369d30cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：**\n![git stash](https://upload-images.jianshu.io/upload_images/14597179-69249ee4b5c583e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![上次commit后的状态](https://upload-images.jianshu.io/upload_images/14597179-af8c250796d0150e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug](https://upload-images.jianshu.io/upload_images/14597179-5f2306c620ffeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：\n\n![创建Bug分支](https://upload-images.jianshu.io/upload_images/14597179-8c5231f3b4033e30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：\n修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：\n\n![上述步骤](https://upload-images.jianshu.io/upload_images/14597179-ca2dc94b23eac05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n>1. 现在，接着回到dev分支干活。\n>2. 工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：\n3>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：一是用`git stash apply`恢复，但是恢复后，stash内容并不删除，你需要用`git stash drop`来删除；另一种方式是用`git stash pop`，恢复的同时把stash内容也删了：\n\n![恢复现场（当然BUG也在）](https://upload-images.jianshu.io/upload_images/14597179-2f9da50af30f617a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n再用`git stash list`查看，就看不到任何stash内容了：\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5738c72bf1a16a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**可以多次stash，恢复的时候，先用`git stash list`查看，然后恢复指定的stash，用命令：`git stash apply stash@{0}`\n","slug":"git/git分支管理-Bug分支","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1b0035tssa7emdni1o","content":"<p>#小结</p>\n<ol>\n<li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n</li>\n<li><p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n</li>\n</ol>\n<p>#正文<br><strong>当前正在dev上进行的工作还没有提交,但要先建立一个issue-101分支来修复BUG：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0d67e4e369d30cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"保存现场\"><br><strong>Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-69249ee4b5c583e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git stash\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-af8c250796d0150e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上次commit后的状态\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5f2306c620ffeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug\"><br>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c5231f3b4033e30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建Bug分支\"></p>\n<blockquote>\n<p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：<br>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ca2dc94b23eac05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上述步骤\"></p>\n<blockquote>\n<ol>\n<li>现在，接着回到dev分支干活。</li>\n<li>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：<br>3&gt;工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</li>\n</ol>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f9da50af30f617a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"恢复现场（当然BUG也在）\"><br>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5738c72bf1a16a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>**可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：<code>git stash apply stash@{0}</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结</p>\n<ol>\n<li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n</li>\n<li><p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n</li>\n</ol>\n<p>#正文<br><strong>当前正在dev上进行的工作还没有提交,但要先建立一个issue-101分支来修复BUG：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0d67e4e369d30cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"保存现场\"><br><strong>Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-69249ee4b5c583e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git stash\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-af8c250796d0150e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上次commit后的状态\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5f2306c620ffeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug\"><br>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8c5231f3b4033e30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"创建Bug分支\"></p>\n<blockquote>\n<p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：<br>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ca2dc94b23eac05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上述步骤\"></p>\n<blockquote>\n<ol>\n<li>现在，接着回到dev分支干活。</li>\n<li>工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：<br>3&gt;工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</li>\n</ol>\n</blockquote>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f9da50af30f617a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"恢复现场（当然BUG也在）\"><br>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5738c72bf1a16a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>**可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：<code>git stash apply stash@{0}</code></p>\n"},{"title":"(4.5) git分支管理-feature分支","date":"2018-11-06T16:03:32.000Z","_content":"添加一个新功能时，不想把主分支搞乱。所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\neg:现在，加一个Vulcan的新功能，该功能计划用于下一代星际飞船。\n**先添加feature-vulcan分支**\n\n```\n$ git checkout -b feature-vulcan\nSwitched to a new branch 'feature-vulcan'\n```\n\n**开发完毕：**\n\n```\n$ git add vulcan.py\n\n$  git status\nOn branch feature-vulcan\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   hello.py\n        new file:   vulcan.py\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.md\n```\n\n切回`dev`，准备合并：\n```\n$ git checkout dev\n```\n\n一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。\n\n但是！\n\n就在此时，接到上级命令，因经费不足，新功能必须取消！\n\n虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：\n\n```\n$ git branch -d feature-vulcan\nerror: The branch 'feature-vulcan' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D feature-vulcan'.\n\n```\n\n销毁失败。Git友情提醒，`feature-vulcan`分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的`-D`参数。。\n\n现在我们强行删除：\n\n```\n$ git branch -D feature-vulcan\nDeleted branch feature-vulcan (was 287773e).\n\n```\n\n终于删除成功！\n\n### 小结\n\n开发一个新feature，最好新建一个分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过`git branch -D <name>`强行删除。\n","source":"_posts/git/git分支管理-feature分支.md","raw":"---\ntitle: (4.5) git分支管理-feature分支\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n添加一个新功能时，不想把主分支搞乱。所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。\n\neg:现在，加一个Vulcan的新功能，该功能计划用于下一代星际飞船。\n**先添加feature-vulcan分支**\n\n```\n$ git checkout -b feature-vulcan\nSwitched to a new branch 'feature-vulcan'\n```\n\n**开发完毕：**\n\n```\n$ git add vulcan.py\n\n$  git status\nOn branch feature-vulcan\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   hello.py\n        new file:   vulcan.py\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.md\n```\n\n切回`dev`，准备合并：\n```\n$ git checkout dev\n```\n\n一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。\n\n但是！\n\n就在此时，接到上级命令，因经费不足，新功能必须取消！\n\n虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：\n\n```\n$ git branch -d feature-vulcan\nerror: The branch 'feature-vulcan' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D feature-vulcan'.\n\n```\n\n销毁失败。Git友情提醒，`feature-vulcan`分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的`-D`参数。。\n\n现在我们强行删除：\n\n```\n$ git branch -D feature-vulcan\nDeleted branch feature-vulcan (was 287773e).\n\n```\n\n终于删除成功！\n\n### 小结\n\n开发一个新feature，最好新建一个分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过`git branch -D <name>`强行删除。\n","slug":"git/git分支管理-feature分支","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1c0038tssa9wbfhfsq","content":"<p>添加一个新功能时，不想把主分支搞乱。所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>eg:现在，加一个Vulcan的新功能，该功能计划用于下一代星际飞船。<br><strong>先添加feature-vulcan分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature-vulcan</span><br><span class=\"line\">Switched to a new branch &apos;feature-vulcan&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>开发完毕：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add vulcan.py</span><br><span class=\"line\"></span><br><span class=\"line\">$  git status</span><br><span class=\"line\">On branch feature-vulcan</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        new file:   hello.py</span><br><span class=\"line\">        new file:   vulcan.py</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   readme.md</span><br></pre></td></tr></table></figure>\n<p>切回<code>dev</code>，准备合并：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout dev</span><br></pre></td></tr></table></figure></p>\n<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>\n<p>但是！</p>\n<p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p>\n<p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature-vulcan</span><br><span class=\"line\">error: The branch &apos;feature-vulcan&apos; is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run &apos;git branch -D feature-vulcan&apos;.</span><br></pre></td></tr></table></figure>\n<p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p>\n<p>现在我们强行删除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D feature-vulcan</span><br><span class=\"line\">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure>\n<p>终于删除成功！</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>开发一个新feature，最好新建一个分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>添加一个新功能时，不想把主分支搞乱。所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>\n<p>eg:现在，加一个Vulcan的新功能，该功能计划用于下一代星际飞船。<br><strong>先添加feature-vulcan分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature-vulcan</span><br><span class=\"line\">Switched to a new branch &apos;feature-vulcan&apos;</span><br></pre></td></tr></table></figure>\n<p><strong>开发完毕：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add vulcan.py</span><br><span class=\"line\"></span><br><span class=\"line\">$  git status</span><br><span class=\"line\">On branch feature-vulcan</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        new file:   hello.py</span><br><span class=\"line\">        new file:   vulcan.py</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   readme.md</span><br></pre></td></tr></table></figure>\n<p>切回<code>dev</code>，准备合并：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout dev</span><br></pre></td></tr></table></figure></p>\n<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>\n<p>但是！</p>\n<p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p>\n<p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature-vulcan</span><br><span class=\"line\">error: The branch &apos;feature-vulcan&apos; is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run &apos;git branch -D feature-vulcan&apos;.</span><br></pre></td></tr></table></figure>\n<p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p>\n<p>现在我们强行删除：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D feature-vulcan</span><br><span class=\"line\">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure>\n<p>终于删除成功！</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>开发一个新feature，最好新建一个分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p>\n"},{"title":"(4.7) git分支管理-rebase","date":"2018-11-06T16:03:32.000Z","_content":"\n\n多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。\n\n每次合并再push后，分支变成了这样：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* d1be385 (HEAD -> master, origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n| |/  \n* |   12a631b merged bug fix 101\n|\\ \\  \n| * | 4c805e2 fix bug 101\n|/ /  \n* |   e1e9c68 merge with no-ff\n|\\ \\  \n| |/  \n| * f52c633 add merge\n|/  \n*   cf810e4 conflict fixed\n\n```\n\n总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？\n\n其实是可以做到的！\n\nGit有一种称为rebase的操作，有人把它翻译成“变基”。\n\n![h](http://upload-images.jianshu.io/upload_images/14597179-52663ea0731abc01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。\n\n在和远程分支同步后，我们对`hello.py`这个文件做了两次提交。用`git log`命令看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 582d922 (HEAD -> master) add author\n* 8875536 add comment\n* d1be385 (origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n...\n\n```\n\n注意到Git用`(HEAD -> master)`和`(origin/master)`标识出当前分支的HEAD和远程origin的位置分别是`582d922 add author`和`d1be385 init hello`，本地分支比远程分支快两个提交。\n\n现在我们尝试推送本地分支：\n\n```\n$ git push origin master\nTo github.com:michaelliao/learngit.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n```\n\n很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：\n\n```\n$ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:michaelliao/learngit\n   d1be385..f005ed4  master     -> origin/master\n * [new tag]         v1.0       -> v1.0\nAuto-merging hello.py\nMerge made by the 'recursive' strategy.\n hello.py | 1 +\n 1 file changed, 1 insertion(+)\n\n```\n\n再用`git status`看看状态：\n\n```\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\n```\n\n加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。\n\n用`git log`看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n*   e0ea545 (HEAD -> master) Merge branch 'master' of github.com:michaelliao/learngit\n|\\  \n| * f005ed4 (origin/master) set exit=1\n* | 582d922 add author\n* | 8875536 add comment\n|/  \n* d1be385 init hello\n...\n\n```\n\n对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？\n\n有！\n\n什么问题？\n\n不好看！\n\n有没有解决方法？\n\n有！\n\n这个时候，rebase就派上了用场。我们输入命令`git rebase`试试：\n\n```\n$ git rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: add comment\nUsing index info to reconstruct a base tree...\nM    hello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\nApplying: add author\nUsing index info to reconstruct a base tree...\nM    hello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\n\n```\n\n输出了一大堆操作，到底是啥效果？再用`git log`看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master) add author\n* 3611cfe add comment\n* f005ed4 (origin/master) set exit=1\n* d1be385 init hello\n...\n\n```\n\n原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了`f005ed4 (origin/master) set exit=1`之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于`d1be385 init hello`，而是基于`f005ed4 (origin/master) set exit=1`，但最后的提交`7e61ed4`内容是一致的。\n\n这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。\n\n最后，通过push操作把本地分支推送到远程：\n\n```\nMac:~/learngit michael$ git push origin master\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 1 local object.\nTo github.com:michaelliao/learngit.git\n   f005ed4..7e61ed4  master -> master\n\n```\n\n再用`git log`看看效果：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master, origin/master) add author\n* 3611cfe add comment\n* f005ed4 set exit=1\n* d1be385 init hello\n...\n\n```\n\n远程分支的提交历史也是一条直线。\n\n### 小结\n\n*   rebase操作可以把本地未push的分叉提交历史整理成直线；\n\n*   rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n","source":"_posts/git/git分支管理-rebase.md","raw":"---\ntitle: (4.7) git分支管理-rebase\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n\n多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。\n\n每次合并再push后，分支变成了这样：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* d1be385 (HEAD -> master, origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n| |/  \n* |   12a631b merged bug fix 101\n|\\ \\  \n| * | 4c805e2 fix bug 101\n|/ /  \n* |   e1e9c68 merge with no-ff\n|\\ \\  \n| |/  \n| * f52c633 add merge\n|/  \n*   cf810e4 conflict fixed\n\n```\n\n总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？\n\n其实是可以做到的！\n\nGit有一种称为rebase的操作，有人把它翻译成“变基”。\n\n![h](http://upload-images.jianshu.io/upload_images/14597179-52663ea0731abc01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。\n\n在和远程分支同步后，我们对`hello.py`这个文件做了两次提交。用`git log`命令看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 582d922 (HEAD -> master) add author\n* 8875536 add comment\n* d1be385 (origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n...\n\n```\n\n注意到Git用`(HEAD -> master)`和`(origin/master)`标识出当前分支的HEAD和远程origin的位置分别是`582d922 add author`和`d1be385 init hello`，本地分支比远程分支快两个提交。\n\n现在我们尝试推送本地分支：\n\n```\n$ git push origin master\nTo github.com:michaelliao/learngit.git\n ! [rejected]        master -> master (fetch first)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n```\n\n很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：\n\n```\n$ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:michaelliao/learngit\n   d1be385..f005ed4  master     -> origin/master\n * [new tag]         v1.0       -> v1.0\nAuto-merging hello.py\nMerge made by the 'recursive' strategy.\n hello.py | 1 +\n 1 file changed, 1 insertion(+)\n\n```\n\n再用`git status`看看状态：\n\n```\n$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\n```\n\n加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。\n\n用`git log`看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n*   e0ea545 (HEAD -> master) Merge branch 'master' of github.com:michaelliao/learngit\n|\\  \n| * f005ed4 (origin/master) set exit=1\n* | 582d922 add author\n* | 8875536 add comment\n|/  \n* d1be385 init hello\n...\n\n```\n\n对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？\n\n有！\n\n什么问题？\n\n不好看！\n\n有没有解决方法？\n\n有！\n\n这个时候，rebase就派上了用场。我们输入命令`git rebase`试试：\n\n```\n$ git rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: add comment\nUsing index info to reconstruct a base tree...\nM    hello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\nApplying: add author\nUsing index info to reconstruct a base tree...\nM    hello.py\nFalling back to patching base and 3-way merge...\nAuto-merging hello.py\n\n```\n\n输出了一大堆操作，到底是啥效果？再用`git log`看看：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master) add author\n* 3611cfe add comment\n* f005ed4 (origin/master) set exit=1\n* d1be385 init hello\n...\n\n```\n\n原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了`f005ed4 (origin/master) set exit=1`之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于`d1be385 init hello`，而是基于`f005ed4 (origin/master) set exit=1`，但最后的提交`7e61ed4`内容是一致的。\n\n这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。\n\n最后，通过push操作把本地分支推送到远程：\n\n```\nMac:~/learngit michael$ git push origin master\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.\nTotal 6 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 1 local object.\nTo github.com:michaelliao/learngit.git\n   f005ed4..7e61ed4  master -> master\n\n```\n\n再用`git log`看看效果：\n\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n* 7e61ed4 (HEAD -> master, origin/master) add author\n* 3611cfe add comment\n* f005ed4 set exit=1\n* d1be385 init hello\n...\n\n```\n\n远程分支的提交历史也是一条直线。\n\n### 小结\n\n*   rebase操作可以把本地未push的分叉提交历史整理成直线；\n\n*   rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n","slug":"git/git分支管理-rebase","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1d0039tssaa4bsbqga","content":"<p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p>\n<p>每次合并再push后，分支变成了这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class=\"line\">*   e5e69f1 Merge branch &apos;dev&apos;</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class=\"line\">| |\\  </span><br><span class=\"line\">| | * 7a5e5dd add env</span><br><span class=\"line\">| * | 7bd91f1 add new env</span><br><span class=\"line\">| |/  </span><br><span class=\"line\">* |   12a631b merged bug fix 101</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| * | 4c805e2 fix bug 101</span><br><span class=\"line\">|/ /  </span><br><span class=\"line\">* |   e1e9c68 merge with no-ff</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| |/  </span><br><span class=\"line\">| * f52c633 add merge</span><br><span class=\"line\">|/  </span><br><span class=\"line\">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure>\n<p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p>\n<p>其实是可以做到的！</p>\n<p>Git有一种称为rebase的操作，有人把它翻译成“变基”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-52663ea0731abc01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"h\"></p>\n<p>先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。</p>\n<p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 582d922 (HEAD -&gt; master) add author</span><br><span class=\"line\">* 8875536 add comment</span><br><span class=\"line\">* d1be385 (origin/master) init hello</span><br><span class=\"line\">*   e5e69f1 Merge branch &apos;dev&apos;</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class=\"line\">| |\\  </span><br><span class=\"line\">| | * 7a5e5dd add env</span><br><span class=\"line\">| * | 7bd91f1 add new env</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p>\n<p>现在我们尝试推送本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:michaelliao/learngit.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do</span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing</span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class=\"line\">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure>\n<p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">remote: Counting objects: 3, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (1/1), done.</span><br><span class=\"line\">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From github.com:michaelliao/learngit</span><br><span class=\"line\">   d1be385..f005ed4  master     -&gt; origin/master</span><br><span class=\"line\"> * [new tag]         v1.0       -&gt; v1.0</span><br><span class=\"line\">Auto-merging hello.py</span><br><span class=\"line\">Merge made by the &apos;recursive&apos; strategy.</span><br><span class=\"line\"> hello.py | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>再用<code>git status</code>看看状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of &apos;origin/master&apos; by 3 commits.</span><br><span class=\"line\">  (use &quot;git push&quot; to publish your local commits)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p>\n<p>用<code>git log</code>看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   e0ea545 (HEAD -&gt; master) Merge branch &apos;master&apos; of github.com:michaelliao/learngit</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| * f005ed4 (origin/master) set exit=1</span><br><span class=\"line\">* | 582d922 add author</span><br><span class=\"line\">* | 8875536 add comment</span><br><span class=\"line\">|/  </span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p>\n<p>有！</p>\n<p>什么问题？</p>\n<p>不好看！</p>\n<p>有没有解决方法？</p>\n<p>有！</p>\n<p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase</span><br><span class=\"line\">First, rewinding head to replay your work on top of it...</span><br><span class=\"line\">Applying: add comment</span><br><span class=\"line\">Using index info to reconstruct a base tree...</span><br><span class=\"line\">M    hello.py</span><br><span class=\"line\">Falling back to patching base and 3-way merge...</span><br><span class=\"line\">Auto-merging hello.py</span><br><span class=\"line\">Applying: add author</span><br><span class=\"line\">Using index info to reconstruct a base tree...</span><br><span class=\"line\">M    hello.py</span><br><span class=\"line\">Falling back to patching base and 3-way merge...</span><br><span class=\"line\">Auto-merging hello.py</span><br></pre></td></tr></table></figure>\n<p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class=\"line\">* 3611cfe add comment</span><br><span class=\"line\">* f005ed4 (origin/master) set exit=1</span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p>\n<p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p>\n<p>最后，通过push操作把本地分支推送到远程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mac:~/learngit michael$ git push origin master</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (2/2), completed with 1 local object.</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   f005ed4..7e61ed4  master -&gt; master</span><br></pre></td></tr></table></figure>\n<p>再用<code>git log</code>看看效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class=\"line\">* 3611cfe add comment</span><br><span class=\"line\">* f005ed4 set exit=1</span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>远程分支的提交历史也是一条直线。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>\n</li>\n<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p>\n<p>每次合并再push后，分支变成了这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class=\"line\">*   e5e69f1 Merge branch &apos;dev&apos;</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class=\"line\">| |\\  </span><br><span class=\"line\">| | * 7a5e5dd add env</span><br><span class=\"line\">| * | 7bd91f1 add new env</span><br><span class=\"line\">| |/  </span><br><span class=\"line\">* |   12a631b merged bug fix 101</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| * | 4c805e2 fix bug 101</span><br><span class=\"line\">|/ /  </span><br><span class=\"line\">* |   e1e9c68 merge with no-ff</span><br><span class=\"line\">|\\ \\  </span><br><span class=\"line\">| |/  </span><br><span class=\"line\">| * f52c633 add merge</span><br><span class=\"line\">|/  </span><br><span class=\"line\">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure>\n<p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p>\n<p>其实是可以做到的！</p>\n<p>Git有一种称为rebase的操作，有人把它翻译成“变基”。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-52663ea0731abc01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"h\"></p>\n<p>先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。</p>\n<p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 582d922 (HEAD -&gt; master) add author</span><br><span class=\"line\">* 8875536 add comment</span><br><span class=\"line\">* d1be385 (origin/master) init hello</span><br><span class=\"line\">*   e5e69f1 Merge branch &apos;dev&apos;</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class=\"line\">| |\\  </span><br><span class=\"line\">| | * 7a5e5dd add env</span><br><span class=\"line\">| * | 7bd91f1 add new env</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p>\n<p>现在我们尝试推送本地分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:michaelliao/learngit.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do</span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing</span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class=\"line\">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure>\n<p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">remote: Counting objects: 3, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (1/1), done.</span><br><span class=\"line\">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From github.com:michaelliao/learngit</span><br><span class=\"line\">   d1be385..f005ed4  master     -&gt; origin/master</span><br><span class=\"line\"> * [new tag]         v1.0       -&gt; v1.0</span><br><span class=\"line\">Auto-merging hello.py</span><br><span class=\"line\">Merge made by the &apos;recursive&apos; strategy.</span><br><span class=\"line\"> hello.py | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>再用<code>git status</code>看看状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of &apos;origin/master&apos; by 3 commits.</span><br><span class=\"line\">  (use &quot;git push&quot; to publish your local commits)</span><br><span class=\"line\"></span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p>\n<p>用<code>git log</code>看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   e0ea545 (HEAD -&gt; master) Merge branch &apos;master&apos; of github.com:michaelliao/learngit</span><br><span class=\"line\">|\\  </span><br><span class=\"line\">| * f005ed4 (origin/master) set exit=1</span><br><span class=\"line\">* | 582d922 add author</span><br><span class=\"line\">* | 8875536 add comment</span><br><span class=\"line\">|/  </span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p>\n<p>有！</p>\n<p>什么问题？</p>\n<p>不好看！</p>\n<p>有没有解决方法？</p>\n<p>有！</p>\n<p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase</span><br><span class=\"line\">First, rewinding head to replay your work on top of it...</span><br><span class=\"line\">Applying: add comment</span><br><span class=\"line\">Using index info to reconstruct a base tree...</span><br><span class=\"line\">M    hello.py</span><br><span class=\"line\">Falling back to patching base and 3-way merge...</span><br><span class=\"line\">Auto-merging hello.py</span><br><span class=\"line\">Applying: add author</span><br><span class=\"line\">Using index info to reconstruct a base tree...</span><br><span class=\"line\">M    hello.py</span><br><span class=\"line\">Falling back to patching base and 3-way merge...</span><br><span class=\"line\">Auto-merging hello.py</span><br></pre></td></tr></table></figure>\n<p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class=\"line\">* 3611cfe add comment</span><br><span class=\"line\">* f005ed4 (origin/master) set exit=1</span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p>\n<p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p>\n<p>最后，通过push操作把本地分支推送到远程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mac:~/learngit michael$ git push origin master</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (2/2), completed with 1 local object.</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   f005ed4..7e61ed4  master -&gt; master</span><br></pre></td></tr></table></figure>\n<p>再用<code>git log</code>看看效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class=\"line\">* 3611cfe add comment</span><br><span class=\"line\">* f005ed4 set exit=1</span><br><span class=\"line\">* d1be385 init hello</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>远程分支的提交历史也是一条直线。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>\n</li>\n<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>\n</li>\n</ul>\n"},{"title":"(4.3) git分支管理-分支管理政策","date":"2018-11-06T16:03:32.000Z","_content":"\n\n### 小结\n\n1. Git分支十分强大，在团队开发中应该充分应用。\n\n2.合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。\n\n###正文\n通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n\n**首先，仍然创建并切换dev分支：**\n**修改readme.txt文件，并提交一个新的commit：**\n**然后切换回master：**\n![上述三步](https://upload-images.jianshu.io/upload_images/14597179-26fdbcbf3eac114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**合并dev分支，请注意--no-ff参数，表示禁用Fast forward**。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去\n![禁用Fast forward](https://upload-images.jianshu.io/upload_images/14597179-9baca30093697aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**合并后，我们用`git log`看看分支历史：**\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-f4280577935fc9f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到，不使用`Fast forward`模式，merge后就像这样：\n\n![git-no-ff-mode](http://upload-images.jianshu.io/upload_images/14597179-4319afa19f9c1601?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 分支策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，`master`分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在`dev`分支上，也就是说，`dev`分支是不稳定的，到某个时候，比如1.0版本发布时，再把`dev`分支合并到`master`上，在`master`分支发布1.0版本；\n\n你和你的小伙伴们每个人都在`dev`分支上干活，每个人都有自己的分支，时不时地往`dev`分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![git-br-policy](http://upload-images.jianshu.io/upload_images/14597179-301558680fcd8407?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/git/git分支管理-分支管理政策.md","raw":"\n---\ntitle: (4.3) git分支管理-分支管理政策\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n\n### 小结\n\n1. Git分支十分强大，在团队开发中应该充分应用。\n\n2.合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而`fast forward`合并就看不出来曾经做过合并。\n\n###正文\n通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。\n\n如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。\n\n**首先，仍然创建并切换dev分支：**\n**修改readme.txt文件，并提交一个新的commit：**\n**然后切换回master：**\n![上述三步](https://upload-images.jianshu.io/upload_images/14597179-26fdbcbf3eac114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**合并dev分支，请注意--no-ff参数，表示禁用Fast forward**。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去\n![禁用Fast forward](https://upload-images.jianshu.io/upload_images/14597179-9baca30093697aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**合并后，我们用`git log`看看分支历史：**\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-f4280577935fc9f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到，不使用`Fast forward`模式，merge后就像这样：\n\n![git-no-ff-mode](http://upload-images.jianshu.io/upload_images/14597179-4319afa19f9c1601?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n### 分支策略\n\n在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，`master`分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在`dev`分支上，也就是说，`dev`分支是不稳定的，到某个时候，比如1.0版本发布时，再把`dev`分支合并到`master`上，在`master`分支发布1.0版本；\n\n你和你的小伙伴们每个人都在`dev`分支上干活，每个人都有自己的分支，时不时地往`dev`分支上合并就可以了。\n\n所以，团队合作的分支看起来就像这样：\n\n![git-br-policy](http://upload-images.jianshu.io/upload_images/14597179-301558680fcd8407?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"git/git分支管理-分支管理政策","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1e003ctssanurdijwz","content":"<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>Git分支十分强大，在团队开发中应该充分应用。</li>\n</ol>\n<p>2.合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>\n<p>###正文<br>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p>\n<p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>\n<p><strong>首先，仍然创建并切换dev分支：</strong><br><strong>修改readme.txt文件，并提交一个新的commit：</strong><br><strong>然后切换回master：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-26fdbcbf3eac114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上述三步\"><br><strong>合并dev分支，请注意–no-ff参数，表示禁用Fast forward</strong>。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9baca30093697aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"禁用Fast forward\"><br><strong>合并后，我们用<code>git log</code>看看分支历史：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f4280577935fc9f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-4319afa19f9c1601?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-no-ff-mode\"></p>\n<h3 id=\"分支策略\"><a href=\"#分支策略\" class=\"headerlink\" title=\"分支策略\"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-301558680fcd8407?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-policy\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>Git分支十分强大，在团队开发中应该充分应用。</li>\n</ol>\n<p>2.合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>\n<p>###正文<br>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p>\n<p>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>\n<p><strong>首先，仍然创建并切换dev分支：</strong><br><strong>修改readme.txt文件，并提交一个新的commit：</strong><br><strong>然后切换回master：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-26fdbcbf3eac114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"上述三步\"><br><strong>合并dev分支，请注意–no-ff参数，表示禁用Fast forward</strong>。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9baca30093697aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"禁用Fast forward\"><br><strong>合并后，我们用<code>git log</code>看看分支历史：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f4280577935fc9f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-4319afa19f9c1601?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-no-ff-mode\"></p>\n<h3 id=\"分支策略\"><a href=\"#分支策略\" class=\"headerlink\" title=\"分支策略\"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-301558680fcd8407?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-policy\"></p>\n"},{"title":"(1) git初识","date":"2018-11-06T16:03:32.000Z","_content":"#小结\n\n1. 初始化一个Git仓库，使用git init命令。\n\n2. 添加文件到Git仓库，分两步：\n\n使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n使用命令`git commit -m <message>`，完成。\n3. 要随时掌握工作区的状态，使用`git status`命令。\n\n4. 如果git status告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n5. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n\n6. 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n7. 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n参照廖雪峰的git教程学习，感谢廖雪峰老师的教程。\n教程地址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n\ngit是分布式版本控制系统之一，直接在官网上下载安装\n\n进入目录 比如`d/WeiLai/Onedrive/study/git`,然后`git bash here`,输入`pwd`显示当前目录。\n\n输入 `git init `命令把这个目录变成Git可以管理的仓库\n提示`Initialized empty Git repository in D:/WeiLai/OneDrive/study/git/.git/`\n当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的\n这个目录默认是隐藏的，用`ls -ah`命令就可以看见\n\n目录中新建一个文件 readme.md ,内容如下:\n\n>Git is a version control system.\n>Git is free software.\n\n`git add readme.md` 用git add把文件添加到仓库\n`git commit -m \"wrote a readme file\"`用命令git commit把文件提交到仓库(\"wrote a readme file\"本次提交的说明）\n\n**为什么Git添加文件需要add，commit一共两步呢？**\n因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：\n\n`git add file1.txt`\n` git add file2.txt file3.txt`\n` git commit -m \"add 3 files.\"`\n\n对readme.md进行修改如下:\n>Git is a distributed version control system.\n>Git is free software.\n\n修改readme.md后，输入`git status`命令可以让我们时刻掌握仓库当前的状态。(可以查看到readme.md被修改但未提交。)\n\n使用 git diff命令查看具体修改内容，`git diff readme.md` \n\n查看完后（同前面），可通过git add(添加) ,git status(查看当前状态),git committ(提交)。\n\n再次对readme.md进行如下修改:\n\n>Git is a distributed version control system.\nGit is free software distributed under the GPL.\n\n然后尝试提交：\n```\n$ git add readme.md\n$ git commit -m \"append GPL\"\n[master 1094adb] append GPL\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\n#####readme.md文件一共有3个版本被提交到Git仓库里了：\n\n**版本1：wrote a readme file**\n>Git is a version control system.\nGit is free software.\n\n**版本2：add distributed**\n>Git is a distributed version control system.\n>Git is free software.\n\n**版本3：append GPL**\n>Git is a distributed version control system.\n>Git is free software distributed under the GPL.\n\n**也用`git log`命令查看历史记录(git log命令显示从最近到最远的提交日志)**\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git log\ncommit d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -> master)\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 19:14:32 2018 +0800\n\n    append GPL\n\ncommit 8fd1e66ce9631da4fea19205b4f737abcb81f059\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:47:48 2018 +0800\n\n    add distributed\n\ncommit 123e3165aafcea2a49c050beba5f9d2b0099a2ea\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:29:10 2018 +0800\n\n    wrote a readme file\n```\n**使用git log --pretty=oneline只显示commit id 和提交说明**\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git log --pretty=oneline\nd730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -> master) append GPL\n8fd1e66ce9631da4fea19205b4f737abcb81f059 add distributed\n123e3165aafcea2a49c050beba5f9d2b0099a2ea wrote a readme file\n```\n\n在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD\\^，上上一个版本就是HEAD\\^\\^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100\n\n**当前版本`append GPL`回退到上一个版本`add distributed`，可以使用`git reset`命令：**\n```\n$ git reset --hard HEAD^\nHEAD is now at 8fd1e66 add distributed\n```\nreadme.md已被还原成第2个版本\n```\n$ cat readme.md\nGit is a distributed version control system.\nGit is free software.\n```\n**git log再看看现在版本库的状态**\n```\ncommit 8fd1e66ce9631da4fea19205b4f737abcb81f059 (HEAD -> master)\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:47:48 2018 +0800\n\n    add distributed\n\ncommit 123e3165aafcea2a49c050beba5f9d2b0099a2ea\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:29:10 2018 +0800\n\n    wrote a readme file\n```\n**第3个版本已经没有了，找到那个append GPL的commit id是d730a...，于是就可以指定回到未来的某个版本：**\n```\n$ git reset --hard d730a\nHEAD is now at d730a19 append GPL \n```\n版本号不用写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。\n\n再查看readme.md的内容：\n```\n$ cat readme.md\nGit is a distributed version control system.\nGit is free software distributed under the GPL\n```\nGit的版本回退速度非常快，因为Git在内部有个指向当前版本的`HEAD`指针，当你回退版本的时候，Git仅仅是把HEAD从指向`append GPL`：\n\n![git-head](http://upload-images.jianshu.io/upload_images/14597179-5f8a05a5bb5eda91?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n改为指向`add distributed`：\n\n![git-head-move](http://upload-images.jianshu.io/upload_images/14597179-4b94ce0352477016?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后顺便把工作区的文件更新了。所以你让`HEAD`指向哪个版本号，你就把当前版本定位在哪。\n\n当你用` git reset --hard HEAD^`回退到`add distributed`版本时，再想恢复到`append GPL`，就必须找到`append GPL`的`commit id`。Git提供了一个命令`git reflog`用来记录你的每一次命令：\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git reflog\nd730a19 (HEAD -> master) HEAD@{0}: reset: moving to d730a\n8fd1e66 HEAD@{1}: reset: moving to HEAD^\nd730a19 (HEAD -> master) HEAD@{2}: commit: append GPL\n8fd1e66 HEAD@{3}: commit: add distributed\n123e316 HEAD@{4}: commit (initial): wrote a readme file\n```\n","source":"_posts/git/git初识.md","raw":"---\ntitle: (1) git初识\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n#小结\n\n1. 初始化一个Git仓库，使用git init命令。\n\n2. 添加文件到Git仓库，分两步：\n\n使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n使用命令`git commit -m <message>`，完成。\n3. 要随时掌握工作区的状态，使用`git status`命令。\n\n4. 如果git status告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n5. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`。\n\n6. 穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n7. 要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n参照廖雪峰的git教程学习，感谢廖雪峰老师的教程。\n教程地址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n\ngit是分布式版本控制系统之一，直接在官网上下载安装\n\n进入目录 比如`d/WeiLai/Onedrive/study/git`,然后`git bash here`,输入`pwd`显示当前目录。\n\n输入 `git init `命令把这个目录变成Git可以管理的仓库\n提示`Initialized empty Git repository in D:/WeiLai/OneDrive/study/git/.git/`\n当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的\n这个目录默认是隐藏的，用`ls -ah`命令就可以看见\n\n目录中新建一个文件 readme.md ,内容如下:\n\n>Git is a version control system.\n>Git is free software.\n\n`git add readme.md` 用git add把文件添加到仓库\n`git commit -m \"wrote a readme file\"`用命令git commit把文件提交到仓库(\"wrote a readme file\"本次提交的说明）\n\n**为什么Git添加文件需要add，commit一共两步呢？**\n因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：\n\n`git add file1.txt`\n` git add file2.txt file3.txt`\n` git commit -m \"add 3 files.\"`\n\n对readme.md进行修改如下:\n>Git is a distributed version control system.\n>Git is free software.\n\n修改readme.md后，输入`git status`命令可以让我们时刻掌握仓库当前的状态。(可以查看到readme.md被修改但未提交。)\n\n使用 git diff命令查看具体修改内容，`git diff readme.md` \n\n查看完后（同前面），可通过git add(添加) ,git status(查看当前状态),git committ(提交)。\n\n再次对readme.md进行如下修改:\n\n>Git is a distributed version control system.\nGit is free software distributed under the GPL.\n\n然后尝试提交：\n```\n$ git add readme.md\n$ git commit -m \"append GPL\"\n[master 1094adb] append GPL\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\n#####readme.md文件一共有3个版本被提交到Git仓库里了：\n\n**版本1：wrote a readme file**\n>Git is a version control system.\nGit is free software.\n\n**版本2：add distributed**\n>Git is a distributed version control system.\n>Git is free software.\n\n**版本3：append GPL**\n>Git is a distributed version control system.\n>Git is free software distributed under the GPL.\n\n**也用`git log`命令查看历史记录(git log命令显示从最近到最远的提交日志)**\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git log\ncommit d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -> master)\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 19:14:32 2018 +0800\n\n    append GPL\n\ncommit 8fd1e66ce9631da4fea19205b4f737abcb81f059\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:47:48 2018 +0800\n\n    add distributed\n\ncommit 123e3165aafcea2a49c050beba5f9d2b0099a2ea\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:29:10 2018 +0800\n\n    wrote a readme file\n```\n**使用git log --pretty=oneline只显示commit id 和提交说明**\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git log --pretty=oneline\nd730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -> master) append GPL\n8fd1e66ce9631da4fea19205b4f737abcb81f059 add distributed\n123e3165aafcea2a49c050beba5f9d2b0099a2ea wrote a readme file\n```\n\n在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD\\^，上上一个版本就是HEAD\\^\\^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100\n\n**当前版本`append GPL`回退到上一个版本`add distributed`，可以使用`git reset`命令：**\n```\n$ git reset --hard HEAD^\nHEAD is now at 8fd1e66 add distributed\n```\nreadme.md已被还原成第2个版本\n```\n$ cat readme.md\nGit is a distributed version control system.\nGit is free software.\n```\n**git log再看看现在版本库的状态**\n```\ncommit 8fd1e66ce9631da4fea19205b4f737abcb81f059 (HEAD -> master)\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:47:48 2018 +0800\n\n    add distributed\n\ncommit 123e3165aafcea2a49c050beba5f9d2b0099a2ea\nAuthor: itswl <imwl@live.com>\nDate:   Mon Nov 5 18:29:10 2018 +0800\n\n    wrote a readme file\n```\n**第3个版本已经没有了，找到那个append GPL的commit id是d730a...，于是就可以指定回到未来的某个版本：**\n```\n$ git reset --hard d730a\nHEAD is now at d730a19 append GPL \n```\n版本号不用写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。\n\n再查看readme.md的内容：\n```\n$ cat readme.md\nGit is a distributed version control system.\nGit is free software distributed under the GPL\n```\nGit的版本回退速度非常快，因为Git在内部有个指向当前版本的`HEAD`指针，当你回退版本的时候，Git仅仅是把HEAD从指向`append GPL`：\n\n![git-head](http://upload-images.jianshu.io/upload_images/14597179-5f8a05a5bb5eda91?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n改为指向`add distributed`：\n\n![git-head-move](http://upload-images.jianshu.io/upload_images/14597179-4b94ce0352477016?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后顺便把工作区的文件更新了。所以你让`HEAD`指向哪个版本号，你就把当前版本定位在哪。\n\n当你用` git reset --hard HEAD^`回退到`add distributed`版本时，再想恢复到`append GPL`，就必须找到`append GPL`的`commit id`。Git提供了一个命令`git reflog`用来记录你的每一次命令：\n```\nimwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)\n$ git reflog\nd730a19 (HEAD -> master) HEAD@{0}: reset: moving to d730a\n8fd1e66 HEAD@{1}: reset: moving to HEAD^\nd730a19 (HEAD -> master) HEAD@{2}: commit: append GPL\n8fd1e66 HEAD@{3}: commit: add distributed\n123e316 HEAD@{4}: commit (initial): wrote a readme file\n```\n","slug":"git/git初识","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1f003dtssa3hybonqx","content":"<p>#小结</p>\n<ol>\n<li><p>初始化一个Git仓库，使用git init命令。</p>\n</li>\n<li><p>添加文件到Git仓库，分两步：</p>\n</li>\n</ol>\n<p>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</p>\n<ol start=\"3\">\n<li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p>\n</li>\n<li><p>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n</li>\n<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p>\n</li>\n<li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n</li>\n<li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>\n</li>\n</ol>\n<p>参照廖雪峰的git教程学习，感谢廖雪峰老师的教程。<br>教程地址：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>\n<p>git是分布式版本控制系统之一，直接在官网上下载安装</p>\n<p>进入目录 比如<code>d/WeiLai/Onedrive/study/git</code>,然后<code>git bash here</code>,输入<code>pwd</code>显示当前目录。</p>\n<p>输入 <code>git init</code>命令把这个目录变成Git可以管理的仓库<br>提示<code>Initialized empty Git repository in D:/WeiLai/OneDrive/study/git/.git/</code><br>当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的<br>这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见</p>\n<p>目录中新建一个文件 readme.md ,内容如下:</p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p><code>git add readme.md</code> 用git add把文件添加到仓库<br><code>git commit -m &quot;wrote a readme file&quot;</code>用命令git commit把文件提交到仓库(“wrote a readme file”本次提交的说明）</p>\n<p><strong>为什么Git添加文件需要add，commit一共两步呢？</strong><br>因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>\n<p><code>git add file1.txt</code><br><code>git add file2.txt file3.txt</code><br><code>git commit -m &quot;add 3 files.&quot;</code></p>\n<p>对readme.md进行修改如下:</p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.</p>\n</blockquote>\n<p>修改readme.md后，输入<code>git status</code>命令可以让我们时刻掌握仓库当前的状态。(可以查看到readme.md被修改但未提交。)</p>\n<p>使用 git diff命令查看具体修改内容，<code>git diff readme.md</code> </p>\n<p>查看完后（同前面），可通过git add(添加) ,git status(查看当前状态),git committ(提交)。</p>\n<p>再次对readme.md进行如下修改:</p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software distributed under the GPL.</p>\n</blockquote>\n<p>然后尝试提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md</span><br><span class=\"line\">$ git commit -m &quot;append GPL&quot;</span><br><span class=\"line\">[master 1094adb] append GPL</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></p>\n<p>#####readme.md文件一共有3个版本被提交到Git仓库里了：</p>\n<p><strong>版本1：wrote a readme file</strong></p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p><strong>版本2：add distributed</strong></p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.</p>\n</blockquote>\n<p><strong>版本3：append GPL</strong></p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software distributed under the GPL.</p>\n</blockquote>\n<p><strong>也用<code>git log</code>命令查看历史记录(git log命令显示从最近到最远的提交日志)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git log</span><br><span class=\"line\">commit d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -&gt; master)</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 19:14:32 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8fd1e66ce9631da4fea19205b4f737abcb81f059</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:47:48 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add distributed</span><br><span class=\"line\"></span><br><span class=\"line\">commit 123e3165aafcea2a49c050beba5f9d2b0099a2ea</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:29:10 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用git log –pretty=oneline只显示commit id 和提交说明</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -&gt; master) append GPL</span><br><span class=\"line\">8fd1e66ce9631da4fea19205b4f737abcb81f059 add distributed</span><br><span class=\"line\">123e3165aafcea2a49c050beba5f9d2b0099a2ea wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p>在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD\\^，上上一个版本就是HEAD\\^\\^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100</p>\n<p><strong>当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，可以使用<code>git reset</code>命令：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 8fd1e66 add distributed</span><br></pre></td></tr></table></figure></p>\n<p>readme.md已被还原成第2个版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software.</span><br></pre></td></tr></table></figure></p>\n<p><strong>git log再看看现在版本库的状态</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 8fd1e66ce9631da4fea19205b4f737abcb81f059 (HEAD -&gt; master)</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:47:48 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add distributed</span><br><span class=\"line\"></span><br><span class=\"line\">commit 123e3165aafcea2a49c050beba5f9d2b0099a2ea</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:29:10 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p><strong>第3个版本已经没有了，找到那个append GPL的commit id是d730a…，于是就可以指定回到未来的某个版本：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard d730a</span><br><span class=\"line\">HEAD is now at d730a19 append GPL</span><br></pre></td></tr></table></figure></p>\n<p>版本号不用写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>\n<p>再查看readme.md的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software distributed under the GPL</span><br></pre></td></tr></table></figure></p>\n<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5f8a05a5bb5eda91?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-head\"></p>\n<p>改为指向<code>add distributed</code>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-4b94ce0352477016?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-head-move\"></p>\n<p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p>\n<p>当你用<code>git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的<code>commit id</code>。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\">d730a19 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to d730a</span><br><span class=\"line\">8fd1e66 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">d730a19 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class=\"line\">8fd1e66 HEAD@&#123;3&#125;: commit: add distributed</span><br><span class=\"line\">123e316 HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结</p>\n<ol>\n<li><p>初始化一个Git仓库，使用git init命令。</p>\n</li>\n<li><p>添加文件到Git仓库，分两步：</p>\n</li>\n</ol>\n<p>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</p>\n<ol start=\"3\">\n<li><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p>\n</li>\n<li><p>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n</li>\n<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p>\n</li>\n<li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n</li>\n<li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>\n</li>\n</ol>\n<p>参照廖雪峰的git教程学习，感谢廖雪峰老师的教程。<br>教程地址：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>\n<p>git是分布式版本控制系统之一，直接在官网上下载安装</p>\n<p>进入目录 比如<code>d/WeiLai/Onedrive/study/git</code>,然后<code>git bash here</code>,输入<code>pwd</code>显示当前目录。</p>\n<p>输入 <code>git init</code>命令把这个目录变成Git可以管理的仓库<br>提示<code>Initialized empty Git repository in D:/WeiLai/OneDrive/study/git/.git/</code><br>当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的<br>这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见</p>\n<p>目录中新建一个文件 readme.md ,内容如下:</p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p><code>git add readme.md</code> 用git add把文件添加到仓库<br><code>git commit -m &quot;wrote a readme file&quot;</code>用命令git commit把文件提交到仓库(“wrote a readme file”本次提交的说明）</p>\n<p><strong>为什么Git添加文件需要add，commit一共两步呢？</strong><br>因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>\n<p><code>git add file1.txt</code><br><code>git add file2.txt file3.txt</code><br><code>git commit -m &quot;add 3 files.&quot;</code></p>\n<p>对readme.md进行修改如下:</p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.</p>\n</blockquote>\n<p>修改readme.md后，输入<code>git status</code>命令可以让我们时刻掌握仓库当前的状态。(可以查看到readme.md被修改但未提交。)</p>\n<p>使用 git diff命令查看具体修改内容，<code>git diff readme.md</code> </p>\n<p>查看完后（同前面），可通过git add(添加) ,git status(查看当前状态),git committ(提交)。</p>\n<p>再次对readme.md进行如下修改:</p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software distributed under the GPL.</p>\n</blockquote>\n<p>然后尝试提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md</span><br><span class=\"line\">$ git commit -m &quot;append GPL&quot;</span><br><span class=\"line\">[master 1094adb] append GPL</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></p>\n<p>#####readme.md文件一共有3个版本被提交到Git仓库里了：</p>\n<p><strong>版本1：wrote a readme file</strong></p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p><strong>版本2：add distributed</strong></p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.</p>\n</blockquote>\n<p><strong>版本3：append GPL</strong></p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software distributed under the GPL.</p>\n</blockquote>\n<p><strong>也用<code>git log</code>命令查看历史记录(git log命令显示从最近到最远的提交日志)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git log</span><br><span class=\"line\">commit d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -&gt; master)</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 19:14:32 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8fd1e66ce9631da4fea19205b4f737abcb81f059</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:47:48 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add distributed</span><br><span class=\"line\"></span><br><span class=\"line\">commit 123e3165aafcea2a49c050beba5f9d2b0099a2ea</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:29:10 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用git log –pretty=oneline只显示commit id 和提交说明</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">d730a1998de2ac8a90b24482563756eb9b400b88 (HEAD -&gt; master) append GPL</span><br><span class=\"line\">8fd1e66ce9631da4fea19205b4f737abcb81f059 add distributed</span><br><span class=\"line\">123e3165aafcea2a49c050beba5f9d2b0099a2ea wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p>在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD\\^，上上一个版本就是HEAD\\^\\^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100</p>\n<p><strong>当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，可以使用<code>git reset</code>命令：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 8fd1e66 add distributed</span><br></pre></td></tr></table></figure></p>\n<p>readme.md已被还原成第2个版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software.</span><br></pre></td></tr></table></figure></p>\n<p><strong>git log再看看现在版本库的状态</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 8fd1e66ce9631da4fea19205b4f737abcb81f059 (HEAD -&gt; master)</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:47:48 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add distributed</span><br><span class=\"line\"></span><br><span class=\"line\">commit 123e3165aafcea2a49c050beba5f9d2b0099a2ea</span><br><span class=\"line\">Author: itswl &lt;imwl@live.com&gt;</span><br><span class=\"line\">Date:   Mon Nov 5 18:29:10 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p><strong>第3个版本已经没有了，找到那个append GPL的commit id是d730a…，于是就可以指定回到未来的某个版本：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard d730a</span><br><span class=\"line\">HEAD is now at d730a19 append GPL</span><br></pre></td></tr></table></figure></p>\n<p>版本号不用写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>\n<p>再查看readme.md的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software distributed under the GPL</span><br></pre></td></tr></table></figure></p>\n<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5f8a05a5bb5eda91?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-head\"></p>\n<p>改为指向<code>add distributed</code>：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-4b94ce0352477016?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-head-move\"></p>\n<p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p>\n<p>当你用<code>git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的<code>commit id</code>。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imwl@DESKTOP-V2KTJSJ MINGW64 /d/WeiLai/Onedrive/study/git (master)</span><br><span class=\"line\">$ git reflog</span><br><span class=\"line\">d730a19 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to d730a</span><br><span class=\"line\">8fd1e66 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">d730a19 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class=\"line\">8fd1e66 HEAD@&#123;3&#125;: commit: add distributed</span><br><span class=\"line\">123e316 HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(5) git标签管理","date":"2018-11-06T16:03:32.000Z","_content":"\n#小结1\n1. 命令`git tag <tagname>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n2. 命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n3. 命令`git tag`可以查看所有标签。\n\n#小结2\n1. 命令`git push origin <tagname>`可以推送一个本地标签；\n2 .命令`git push origin --tags`可以推送全部未推送过的本地标签；\n3. 命令`git tag -d <tagname>`可以删除一个本地标签；\n4. 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。\n\n#正文\n**Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。**\n\n###创造标签\n在Git中打标签非常简单，首先，切换到需要打标签的分支上：\n```\n$ git branch\n* dev\n  master\n$ git checkout master\nSwitched to branch 'master'\n```\n然后，敲命令`git tag <name>`就可以打一个新标签：\n可以用命令`git tag`查看所有标签：\n```\n$ git tag v1.0\n\n$ git tag\nv1.0\n```\n默认标签是打在最新提交的commit上的。\n应该在周一打的标签没有打，怎么办？\n\n方法是找到历史提交的commit id，然后打上就可以了：\n```\n$ git log --pretty=oneline --abbrev-commit\n12a631b (HEAD -> master, tag: v1.0, origin/master) merged bug fix 101\n4c805e2 fix bug 101\ne1e9c68 merge with no-ff\nf52c633 add merge\ncf810e4 conflict fixed\n5dc6824 & simple\n14096d0 AND simple\nb17d20e branch test\nd46f35e remove test.txt\nb84166e add test.txt\n519219b git tracks changes\ne43a48b understand how stage works\n1094adb append GPL\ne475afc add distributed\neaadf4e wrote a readme file\n```\n比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：`git tag v0.9 f52c633`\n再用命令git tag查看标签：\n```\n$ git tag\nv0.9\nv1.0\n```\n**注意，标签不是按时间顺序列出，而是按字母排序的。可以用`git show <tagname>`查看标签信息：**\n```\n$ git show v0.9\ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:56:54 2018 +0800\n\n    add merge\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n可以看到，v0.9确实打在add merge这次提交上。\n\n**还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：**\n```\n$ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n```\n用命令`git show <tagname>`可以看到说明文字：\n```\n$ git show v0.1\ntag v0.1\nTagger: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 22:48:43 2018 +0800\n\nversion 0.1 released\n\ncommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:06:15 2018 +0800\n\n    append GPL\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。\n\n###操作标签\n如果标签打错了，也可以删除：\n```\n$ git tag -d v0.1\nDeleted tag 'v0.1' (was f15b0dd)\n```\n因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n**推送某个标签到远程，使用命令git push origin <tagname>：**\n```\n$ git push origin v1.0\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n * [new tag]         v1.0 -> v1.0\n```\n**或者，一次性推送全部尚未推送到远程的本地标签：**\n```\n$ git push origin --tags\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n * [new tag]         v0.9 -> v0.9\n```\n**如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：**\n```\n$ git tag -d v0.9\nDeleted tag 'v0.9' (was f52c633)\n```\n然后，从远程删除。删除命令也是push，但是格式如下：\n```\n$ git push origin :refs/tags/v0.9\nTo github.com:michaelliao/learngit.git\n - [deleted]         v0.9\n```\n要看看是否真的从远程库删除了标签，可以登陆GitHub查看。\n","source":"_posts/git/git标签管理.md","raw":"---\ntitle: (5) git标签管理\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\n#小结1\n1. 命令`git tag <tagname>`用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n2. 命令`git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n3. 命令`git tag`可以查看所有标签。\n\n#小结2\n1. 命令`git push origin <tagname>`可以推送一个本地标签；\n2 .命令`git push origin --tags`可以推送全部未推送过的本地标签；\n3. 命令`git tag -d <tagname>`可以删除一个本地标签；\n4. 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签。\n\n#正文\n**Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。**\n\n###创造标签\n在Git中打标签非常简单，首先，切换到需要打标签的分支上：\n```\n$ git branch\n* dev\n  master\n$ git checkout master\nSwitched to branch 'master'\n```\n然后，敲命令`git tag <name>`就可以打一个新标签：\n可以用命令`git tag`查看所有标签：\n```\n$ git tag v1.0\n\n$ git tag\nv1.0\n```\n默认标签是打在最新提交的commit上的。\n应该在周一打的标签没有打，怎么办？\n\n方法是找到历史提交的commit id，然后打上就可以了：\n```\n$ git log --pretty=oneline --abbrev-commit\n12a631b (HEAD -> master, tag: v1.0, origin/master) merged bug fix 101\n4c805e2 fix bug 101\ne1e9c68 merge with no-ff\nf52c633 add merge\ncf810e4 conflict fixed\n5dc6824 & simple\n14096d0 AND simple\nb17d20e branch test\nd46f35e remove test.txt\nb84166e add test.txt\n519219b git tracks changes\ne43a48b understand how stage works\n1094adb append GPL\ne475afc add distributed\neaadf4e wrote a readme file\n```\n比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：`git tag v0.9 f52c633`\n再用命令git tag查看标签：\n```\n$ git tag\nv0.9\nv1.0\n```\n**注意，标签不是按时间顺序列出，而是按字母排序的。可以用`git show <tagname>`查看标签信息：**\n```\n$ git show v0.9\ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:56:54 2018 +0800\n\n    add merge\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n可以看到，v0.9确实打在add merge这次提交上。\n\n**还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：**\n```\n$ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n```\n用命令`git show <tagname>`可以看到说明文字：\n```\n$ git show v0.1\ntag v0.1\nTagger: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 22:48:43 2018 +0800\n\nversion 0.1 released\n\ncommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:06:15 2018 +0800\n\n    append GPL\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。\n\n###操作标签\n如果标签打错了，也可以删除：\n```\n$ git tag -d v0.1\nDeleted tag 'v0.1' (was f15b0dd)\n```\n因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。\n**推送某个标签到远程，使用命令git push origin <tagname>：**\n```\n$ git push origin v1.0\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n * [new tag]         v1.0 -> v1.0\n```\n**或者，一次性推送全部尚未推送到远程的本地标签：**\n```\n$ git push origin --tags\nTotal 0 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n * [new tag]         v0.9 -> v0.9\n```\n**如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：**\n```\n$ git tag -d v0.9\nDeleted tag 'v0.9' (was f52c633)\n```\n然后，从远程删除。删除命令也是push，但是格式如下：\n```\n$ git push origin :refs/tags/v0.9\nTo github.com:michaelliao/learngit.git\n - [deleted]         v0.9\n```\n要看看是否真的从远程库删除了标签，可以登陆GitHub查看。\n","slug":"git/git标签管理","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1h003gtssa1o1kegn9","content":"<p>#小结1</p>\n<ol>\n<li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</li>\n<li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>\n<li>命令<code>git tag</code>可以查看所有标签。</li>\n</ol>\n<p>#小结2</p>\n<ol>\n<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>2 .命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>\n<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>\n<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>\n</ol>\n<p>#正文<br><strong>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</strong></p>\n<p>###创造标签<br>在Git中打标签非常简单，首先，切换到需要打标签的分支上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure></p>\n<p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：<br>可以用命令<code>git tag</code>查看所有标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure></p>\n<p>默认标签是打在最新提交的commit上的。<br>应该在周一打的标签没有打，怎么办？</p>\n<p>方法是找到历史提交的commit id，然后打上就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline --abbrev-commit</span><br><span class=\"line\">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class=\"line\">4c805e2 fix bug 101</span><br><span class=\"line\">e1e9c68 merge with no-ff</span><br><span class=\"line\">f52c633 add merge</span><br><span class=\"line\">cf810e4 conflict fixed</span><br><span class=\"line\">5dc6824 &amp; simple</span><br><span class=\"line\">14096d0 AND simple</span><br><span class=\"line\">b17d20e branch test</span><br><span class=\"line\">d46f35e remove test.txt</span><br><span class=\"line\">b84166e add test.txt</span><br><span class=\"line\">519219b git tracks changes</span><br><span class=\"line\">e43a48b understand how stage works</span><br><span class=\"line\">1094adb append GPL</span><br><span class=\"line\">e475afc add distributed</span><br><span class=\"line\">eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p>比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：<code>git tag v0.9 f52c633</code><br>再用命令git tag查看标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.9</span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.9</span><br><span class=\"line\">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add merge</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，v0.9确实打在add merge这次提交上。</p>\n<p><strong>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure></p>\n<p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.1</span><br><span class=\"line\">tag v0.1</span><br><span class=\"line\">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">version 0.1 released</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p> 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p>\n<p>###操作标签<br>如果标签打错了，也可以删除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.1</span><br><span class=\"line\">Deleted tag &apos;v0.1&apos; (was f15b0dd)</span><br></pre></td></tr></table></figure></p>\n<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。<br><strong>推送某个标签到远程，使用命令git push origin <tagname>：</tagname></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.0</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure></p>\n<p><strong>或者，一次性推送全部尚未推送到远程的本地标签：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.9</span><br><span class=\"line\">Deleted tag &apos;v0.9&apos; (was f52c633)</span><br></pre></td></tr></table></figure></p>\n<p>然后，从远程删除。删除命令也是push，但是格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :refs/tags/v0.9</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure></p>\n<p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结1</p>\n<ol>\n<li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</li>\n<li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>\n<li>命令<code>git tag</code>可以查看所有标签。</li>\n</ol>\n<p>#小结2</p>\n<ol>\n<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；<br>2 .命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>\n<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>\n<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>\n</ol>\n<p>#正文<br><strong>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</strong></p>\n<p>###创造标签<br>在Git中打标签非常简单，首先，切换到需要打标签的分支上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure></p>\n<p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：<br>可以用命令<code>git tag</code>查看所有标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure></p>\n<p>默认标签是打在最新提交的commit上的。<br>应该在周一打的标签没有打，怎么办？</p>\n<p>方法是找到历史提交的commit id，然后打上就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline --abbrev-commit</span><br><span class=\"line\">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class=\"line\">4c805e2 fix bug 101</span><br><span class=\"line\">e1e9c68 merge with no-ff</span><br><span class=\"line\">f52c633 add merge</span><br><span class=\"line\">cf810e4 conflict fixed</span><br><span class=\"line\">5dc6824 &amp; simple</span><br><span class=\"line\">14096d0 AND simple</span><br><span class=\"line\">b17d20e branch test</span><br><span class=\"line\">d46f35e remove test.txt</span><br><span class=\"line\">b84166e add test.txt</span><br><span class=\"line\">519219b git tracks changes</span><br><span class=\"line\">e43a48b understand how stage works</span><br><span class=\"line\">1094adb append GPL</span><br><span class=\"line\">e475afc add distributed</span><br><span class=\"line\">eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure></p>\n<p>比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：<code>git tag v0.9 f52c633</code><br>再用命令git tag查看标签：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.9</span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.9</span><br><span class=\"line\">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add merge</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，v0.9确实打在add merge这次提交上。</p>\n<p><strong>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure></p>\n<p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v0.1</span><br><span class=\"line\">tag v0.1</span><br><span class=\"line\">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">version 0.1 released</span><br><span class=\"line\"></span><br><span class=\"line\">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p> 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p>\n<p>###操作标签<br>如果标签打错了，也可以删除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.1</span><br><span class=\"line\">Deleted tag &apos;v0.1&apos; (was f15b0dd)</span><br></pre></td></tr></table></figure></p>\n<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。<br><strong>推送某个标签到远程，使用命令git push origin <tagname>：</tagname></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.0</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure></p>\n<p><strong>或者，一次性推送全部尚未推送到远程的本地标签：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure></p>\n<p><strong>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -d v0.9</span><br><span class=\"line\">Deleted tag &apos;v0.9&apos; (was f52c633)</span><br></pre></td></tr></table></figure></p>\n<p>然后，从远程删除。删除命令也是push，但是格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :refs/tags/v0.9</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure></p>\n<p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>\n"},{"title":"(4.6) git分支管理-多人协作","date":"2018-11-14T13:55:37.000Z","_content":"\n\n当你从远程仓库克隆时，实际上Git自动把本地的`master`分支和远程的`master`分支对应起来了，并且，远程仓库的默认名称是`origin`。\n\n要查看远程库的信息，用`git remote`：\n\n```\n$ git remote\norigin\n\n```\n\n或者，用`git remote -v`显示更详细的信息：\n\n```\n$ git remote -v\norigin  git@github.com:michaelliao/learngit.git (fetch)\norigin  git@github.com:michaelliao/learngit.git (push)\n\n```\n\n上面显示了可以抓取和推送的`origin`的地址。如果没有推送权限，就看不到push的地址。\n\n### 推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n```\n$ git push origin master\n\n```\n\n如果要推送其他分支，比如`dev`，就改成：\n\n```\n$ git push origin dev\n\n```\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\n*   `master`分支是主分支，因此要时刻与远程同步；\n\n*   `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\n*   bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\n*   feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！\n\n### 抓取分支\n\n多人协作时，大家都会往`master`和`dev`分支上推送各自的修改。\n\n现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：\n\n```\n$ git clone git@github.com:michaelliao/learngit.git\nCloning into 'learngit'...\nremote: Counting objects: 40, done.\nremote: Compressing objects: 100% (21/21), done.\nremote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0\nReceiving objects: 100% (40/40), done.\nResolving deltas: 100% (14/14), done.\n\n```\n\n当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的`master`分支。不信可以用`git branch`命令看看：\n\n```\n$ git branch\n* master\n\n```\n\n现在，你的小伙伴要在`dev`分支上开发，就必须创建远程`origin`的`dev`分支到本地，于是他用这个命令创建本地`dev`分支：\n\n```\n$ git checkout -b dev origin/dev\n\n```\n\n现在，他就可以在`dev`上继续修改，然后，时不时地把`dev`分支`push`到远程：\n\n```\n$ git add env.txt\n\n$ git commit -m \"add env\"\n[dev 7a5e5dd] add env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n   f52c633..7a5e5dd  dev -> dev\n\n```\n\n你的小伙伴已经向`origin/dev`分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：\n\n```\n$ cat env.txt\nenv\n\n$ git add env.txt\n\n$ git commit -m \"add new env\"\n[dev 7bd91f1] add new env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nTo github.com:michaelliao/learngit.git\n ! [rejected]        dev -> dev (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n```\n\n推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用`git pull`把最新的提交从`origin/dev`抓下来，然后，在本地合并，解决冲突，再推送：\n\n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> dev\n\n```\n\n`git pull`也失败了，原因是没有指定本地`dev`分支与远程`origin/dev`分支的链接，根据提示，设置`dev`和`origin/dev`的链接：\n\n```\n$ git branch --set-upstream-to=origin/dev dev\nBranch 'dev' set up to track remote branch 'dev' from 'origin'.\n\n```\n\n再pull：\n\n```\n$ git pull\nAuto-merging env.txt\nCONFLICT (add/add): Merge conflict in env.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n\n这回`git pull`成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的[解决冲突](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000)完全一样。解决后，提交，再push：\n\n```\n$ git commit -m \"fix env conflict\"\n[dev 57c53ab] fix env conflict\n\n$ git push origin dev\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n   7a5e5dd..57c53ab  dev -> dev\n\n```\n\n因此，多人协作的工作模式通常是这样：\n\n1.  首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n\n2.  如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n\n3.  如果合并有冲突，则解决冲突，并在本地提交；\n\n4.  没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n### 小结\n\n*   查看远程库信息，使用`git remote -v`；\n\n*   本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n*   从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n*   在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n*   建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n*   从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n","source":"_posts/git/git分支管理-多人协作.md","raw":"---\ntitle: (4.6) git分支管理-多人协作\ndate: 2018-11-14 21:55:37\ntags:\ncategories: git\n---\n\n\n当你从远程仓库克隆时，实际上Git自动把本地的`master`分支和远程的`master`分支对应起来了，并且，远程仓库的默认名称是`origin`。\n\n要查看远程库的信息，用`git remote`：\n\n```\n$ git remote\norigin\n\n```\n\n或者，用`git remote -v`显示更详细的信息：\n\n```\n$ git remote -v\norigin  git@github.com:michaelliao/learngit.git (fetch)\norigin  git@github.com:michaelliao/learngit.git (push)\n\n```\n\n上面显示了可以抓取和推送的`origin`的地址。如果没有推送权限，就看不到push的地址。\n\n### 推送分支\n\n推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：\n\n```\n$ git push origin master\n\n```\n\n如果要推送其他分支，比如`dev`，就改成：\n\n```\n$ git push origin dev\n\n```\n\n但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？\n\n*   `master`分支是主分支，因此要时刻与远程同步；\n\n*   `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；\n\n*   bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；\n\n*   feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！\n\n### 抓取分支\n\n多人协作时，大家都会往`master`和`dev`分支上推送各自的修改。\n\n现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：\n\n```\n$ git clone git@github.com:michaelliao/learngit.git\nCloning into 'learngit'...\nremote: Counting objects: 40, done.\nremote: Compressing objects: 100% (21/21), done.\nremote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0\nReceiving objects: 100% (40/40), done.\nResolving deltas: 100% (14/14), done.\n\n```\n\n当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的`master`分支。不信可以用`git branch`命令看看：\n\n```\n$ git branch\n* master\n\n```\n\n现在，你的小伙伴要在`dev`分支上开发，就必须创建远程`origin`的`dev`分支到本地，于是他用这个命令创建本地`dev`分支：\n\n```\n$ git checkout -b dev origin/dev\n\n```\n\n现在，他就可以在`dev`上继续修改，然后，时不时地把`dev`分支`push`到远程：\n\n```\n$ git add env.txt\n\n$ git commit -m \"add env\"\n[dev 7a5e5dd] add env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n   f52c633..7a5e5dd  dev -> dev\n\n```\n\n你的小伙伴已经向`origin/dev`分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：\n\n```\n$ cat env.txt\nenv\n\n$ git add env.txt\n\n$ git commit -m \"add new env\"\n[dev 7bd91f1] add new env\n 1 file changed, 1 insertion(+)\n create mode 100644 env.txt\n\n$ git push origin dev\nTo github.com:michaelliao/learngit.git\n ! [rejected]        dev -> dev (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:michaelliao/learngit.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n```\n\n推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用`git pull`把最新的提交从`origin/dev`抓下来，然后，在本地合并，解决冲突，再推送：\n\n```\n$ git pull\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> dev\n\n```\n\n`git pull`也失败了，原因是没有指定本地`dev`分支与远程`origin/dev`分支的链接，根据提示，设置`dev`和`origin/dev`的链接：\n\n```\n$ git branch --set-upstream-to=origin/dev dev\nBranch 'dev' set up to track remote branch 'dev' from 'origin'.\n\n```\n\n再pull：\n\n```\n$ git pull\nAuto-merging env.txt\nCONFLICT (add/add): Merge conflict in env.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\n```\n\n这回`git pull`成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的[解决冲突](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000)完全一样。解决后，提交，再push：\n\n```\n$ git commit -m \"fix env conflict\"\n[dev 57c53ab] fix env conflict\n\n$ git push origin dev\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo github.com:michaelliao/learngit.git\n   7a5e5dd..57c53ab  dev -> dev\n\n```\n\n因此，多人协作的工作模式通常是这样：\n\n1.  首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n\n2.  如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n\n3.  如果合并有冲突，则解决冲突，并在本地提交；\n\n4.  没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n### 小结\n\n*   查看远程库信息，使用`git remote -v`；\n\n*   本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n*   从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n\n*   在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n\n*   建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n*   从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n","slug":"git/git分支管理-多人协作","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1l003itssa2bdkantu","content":"<p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>\n<p>要查看远程库的信息，用<code>git remote</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<p>或者，用<code>git remote -v</code>显示更详细的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class=\"line\">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure>\n<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>\n<h3 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>如果要推送其他分支，比如<code>dev</code>，就改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br></pre></td></tr></table></figure>\n<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<ul>\n<li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p>\n</li>\n<li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n</li>\n<li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n</li>\n<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n</ul>\n<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>\n<h3 id=\"抓取分支\"><a href=\"#抓取分支\" class=\"headerlink\" title=\"抓取分支\"></a>抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>\n<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:michaelliao/learngit.git</span><br><span class=\"line\">Cloning into &apos;learngit&apos;...</span><br><span class=\"line\">remote: Counting objects: 40, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (21/21), done.</span><br><span class=\"line\">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (40/40), done.</span><br><span class=\"line\">Resolving deltas: 100% (14/14), done.</span><br></pre></td></tr></table></figure>\n<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;add env&quot;</span><br><span class=\"line\">[dev 7a5e5dd] add env</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: 3, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat env.txt</span><br><span class=\"line\">env</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;add new env&quot;</span><br><span class=\"line\">[dev 7bd91f1] add new env</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:michaelliao/learngit.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure>\n<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>\n<p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --set-upstream-to=origin/dev dev</span><br><span class=\"line\">Branch &apos;dev&apos; set up to track remote branch &apos;dev&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure>\n<p>再pull：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">Auto-merging env.txt</span><br><span class=\"line\">CONFLICT (add/add): Merge conflict in env.txt</span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>\n<p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000\" target=\"_blank\" rel=\"noopener\">解决冲突</a>完全一样。解决后，提交，再push：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;fix env conflict&quot;</span><br><span class=\"line\">[dev 57c53ab] fix env conflict</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (4/4), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<p>因此，多人协作的工作模式通常是这样：</p>\n<ol>\n<li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>\n</li>\n<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>\n</li>\n<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n</li>\n<li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>\n</li>\n</ol>\n<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>查看远程库信息，使用<code>git remote -v</code>；</p>\n</li>\n<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n</li>\n<li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n</li>\n<li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n</li>\n<li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n</li>\n<li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p>\n<p>要查看远程库的信息，用<code>git remote</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<p>或者，用<code>git remote -v</code>显示更详细的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github.com:michaelliao/learngit.git (fetch)</span><br><span class=\"line\">origin  git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure>\n<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>\n<h3 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>如果要推送其他分支，比如<code>dev</code>，就改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br></pre></td></tr></table></figure>\n<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>\n<ul>\n<li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p>\n</li>\n<li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>\n</li>\n<li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>\n</li>\n<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n</ul>\n<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>\n<h3 id=\"抓取分支\"><a href=\"#抓取分支\" class=\"headerlink\" title=\"抓取分支\"></a>抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p>\n<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:michaelliao/learngit.git</span><br><span class=\"line\">Cloning into &apos;learngit&apos;...</span><br><span class=\"line\">remote: Counting objects: 40, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (21/21), done.</span><br><span class=\"line\">remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (40/40), done.</span><br><span class=\"line\">Resolving deltas: 100% (14/14), done.</span><br></pre></td></tr></table></figure>\n<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>\n<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;add env&quot;</span><br><span class=\"line\">[dev 7a5e5dd] add env</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: 3, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   f52c633..7a5e5dd  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat env.txt</span><br><span class=\"line\">env</span><br><span class=\"line\"></span><br><span class=\"line\">$ git add env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;add new env&quot;</span><br><span class=\"line\">[dev 7bd91f1] add new env</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 env.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:michaelliao/learngit.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure>\n<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is no tracking information for the current branch.</span><br><span class=\"line\">Please specify which branch you want to merge with.</span><br><span class=\"line\">See git-pull(1) for details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you wish to set tracking information for this branch you can do so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>\n<p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --set-upstream-to=origin/dev dev</span><br><span class=\"line\">Branch &apos;dev&apos; set up to track remote branch &apos;dev&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure>\n<p>再pull：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">Auto-merging env.txt</span><br><span class=\"line\">CONFLICT (add/add): Merge conflict in env.txt</span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>\n<p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000\" target=\"_blank\" rel=\"noopener\">解决冲突</a>完全一样。解决后，提交，再push：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;fix env conflict&quot;</span><br><span class=\"line\">[dev 57c53ab] fix env conflict</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">Counting objects: 6, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (4/4), done.</span><br><span class=\"line\">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.</span><br><span class=\"line\">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure>\n<p>因此，多人协作的工作模式通常是这样：</p>\n<ol>\n<li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>\n</li>\n<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>\n</li>\n<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>\n</li>\n<li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>\n</li>\n</ol>\n<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>查看远程库信息，使用<code>git remote -v</code>；</p>\n</li>\n<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n</li>\n<li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>\n</li>\n<li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>\n</li>\n<li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>\n</li>\n<li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>\n</li>\n</ul>\n"},{"title":"(4.2) git分支管理-解决冲突.md","date":"2018-11-06T16:03:32.000Z","_content":"#小结\n1. 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n2. 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n3. 用git log --graph命令可以看到分支合并图。\n\n#正文\n\n**有两个分支，master 和 feature1分别有新的提交：**\n![](https://upload-images.jianshu.io/upload_images/14597179-3edaa975e99dd4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nGit无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突：![](https://upload-images.jianshu.io/upload_images/14597179-448e94dedfe9d19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nreadme.md文件存在冲突，必须手动解决冲突后再提交。`git status`也可以冲突显示文件：\n![](https://upload-images.jianshu.io/upload_images/14597179-05ef6a2b2b483f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n查看readme.md文件：\n![readme.md](https://upload-images.jianshu.io/upload_images/14597179-7842f42d4041f9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容\n修改然后提交\n![修改后的readme.md](https://upload-images.jianshu.io/upload_images/14597179-a290b88508db6a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![重新提交readme.md](https://upload-images.jianshu.io/upload_images/14597179-caead914eec9d86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在，`master`分支和`feature1`分支变成了下图所示：\n\n![git-br-conflict-merged](http://upload-images.jianshu.io/upload_images/14597179-2d83e968a2ca3ae9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n用带参数的`git log`也可以看到分支的合并情况：\n\n```\n$  git log --graph --pretty=oneline --abbrev-commit\n*   8306d83 (HEAD -> master) conflict fixed\n|\\\n| * 6595182 (feature1) branch test\n* | f239080 & simple\n|/\n* b1f5a38 branch test\n* 4046b17 (origin/master, origin/HEAD) add test.txt\n* d730a19 append GPL\n* 8fd1e66 add distributed\n* 123e316 wrote a readme file\n\n```\n\n最后，删除`feature1`分支：\n\n```\n$ git branch -d feature1\nDeleted branch feature1 (was 14096d0).\n```\n工作完成。\n","source":"_posts/git/git分支管理-解决冲突.md","raw":"\n---\ntitle: (4.2) git分支管理-解决冲突.md\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n#小结\n1. 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n2. 解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n3. 用git log --graph命令可以看到分支合并图。\n\n#正文\n\n**有两个分支，master 和 feature1分别有新的提交：**\n![](https://upload-images.jianshu.io/upload_images/14597179-3edaa975e99dd4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nGit无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突：![](https://upload-images.jianshu.io/upload_images/14597179-448e94dedfe9d19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nreadme.md文件存在冲突，必须手动解决冲突后再提交。`git status`也可以冲突显示文件：\n![](https://upload-images.jianshu.io/upload_images/14597179-05ef6a2b2b483f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n查看readme.md文件：\n![readme.md](https://upload-images.jianshu.io/upload_images/14597179-7842f42d4041f9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容\n修改然后提交\n![修改后的readme.md](https://upload-images.jianshu.io/upload_images/14597179-a290b88508db6a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![重新提交readme.md](https://upload-images.jianshu.io/upload_images/14597179-caead914eec9d86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在，`master`分支和`feature1`分支变成了下图所示：\n\n![git-br-conflict-merged](http://upload-images.jianshu.io/upload_images/14597179-2d83e968a2ca3ae9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n用带参数的`git log`也可以看到分支的合并情况：\n\n```\n$  git log --graph --pretty=oneline --abbrev-commit\n*   8306d83 (HEAD -> master) conflict fixed\n|\\\n| * 6595182 (feature1) branch test\n* | f239080 & simple\n|/\n* b1f5a38 branch test\n* 4046b17 (origin/master, origin/HEAD) add test.txt\n* d730a19 append GPL\n* 8fd1e66 add distributed\n* 123e316 wrote a readme file\n\n```\n\n最后，删除`feature1`分支：\n\n```\n$ git branch -d feature1\nDeleted branch feature1 (was 14096d0).\n```\n工作完成。\n","slug":"git/git分支管理-解决冲突","published":1,"updated":"2020-04-01T09:23:43.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1m003ltssawch9fxew","content":"<p>#小结</p>\n<ol>\n<li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li>\n<li>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</li>\n<li>用git log –graph命令可以看到分支合并图。</li>\n</ol>\n<p>#正文</p>\n<p><strong>有两个分支，master 和 feature1分别有新的提交：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3edaa975e99dd4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突：<img src=\"https://upload-images.jianshu.io/upload_images/14597179-448e94dedfe9d19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>readme.md文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以冲突显示文件：<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-05ef6a2b2b483f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>查看readme.md文件：<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7842f42d4041f9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"readme.md\"><br>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容<br>修改然后提交<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a290b88508db6a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后的readme.md\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-caead914eec9d86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重新提交readme.md\"><br>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-2d83e968a2ca3ae9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-conflict-merged\"></p>\n<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   8306d83 (HEAD -&gt; master) conflict fixed</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 6595182 (feature1) branch test</span><br><span class=\"line\">* | f239080 &amp; simple</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b1f5a38 branch test</span><br><span class=\"line\">* 4046b17 (origin/master, origin/HEAD) add test.txt</span><br><span class=\"line\">* d730a19 append GPL</span><br><span class=\"line\">* 8fd1e66 add distributed</span><br><span class=\"line\">* 123e316 wrote a readme file</span><br></pre></td></tr></table></figure>\n<p>最后，删除<code>feature1</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature1</span><br><span class=\"line\">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure>\n<p>工作完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#小结</p>\n<ol>\n<li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li>\n<li>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</li>\n<li>用git log –graph命令可以看到分支合并图。</li>\n</ol>\n<p>#正文</p>\n<p><strong>有两个分支，master 和 feature1分别有新的提交：</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3edaa975e99dd4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突：<img src=\"https://upload-images.jianshu.io/upload_images/14597179-448e94dedfe9d19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>readme.md文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以冲突显示文件：<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-05ef6a2b2b483f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"><br>查看readme.md文件：<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7842f42d4041f9bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"readme.md\"><br>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容<br>修改然后提交<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a290b88508db6a30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后的readme.md\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-caead914eec9d86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"重新提交readme.md\"><br>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-2d83e968a2ca3ae9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"git-br-conflict-merged\"></p>\n<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   8306d83 (HEAD -&gt; master) conflict fixed</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 6595182 (feature1) branch test</span><br><span class=\"line\">* | f239080 &amp; simple</span><br><span class=\"line\">|/</span><br><span class=\"line\">* b1f5a38 branch test</span><br><span class=\"line\">* 4046b17 (origin/master, origin/HEAD) add test.txt</span><br><span class=\"line\">* d730a19 append GPL</span><br><span class=\"line\">* 8fd1e66 add distributed</span><br><span class=\"line\">* 123e316 wrote a readme file</span><br></pre></td></tr></table></figure>\n<p>最后，删除<code>feature1</code>分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature1</span><br><span class=\"line\">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure>\n<p>工作完成。</p>\n"},{"title":"(3) git远程仓库","date":"2018-11-06T16:03:32.000Z","_content":"\nGit是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。一般找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。**也可使用github远程仓库**\nGit仓库和GitHub仓库之间的传输是通过SSH加密的，需要一点设置：\n\n**第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：**\n\n```\n$ ssh-keygen -t rsa -C \"imwl@live.com\"\n```\n把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n**第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：**\n\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n![github-addkey-1](http://upload-images.jianshu.io/upload_images/14597179-10901f2c6cdb2f6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点“Add Key”，你就应该看到已经添加的Key：\n\n![github-addkey-2](http://upload-images.jianshu.io/upload_images/14597179-63e04ca796774279?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/git/git远程仓库.md","raw":"---\ntitle: (3) git远程仓库\ndate: 2018-11-07 00:03:32\ntags:\ncategories: git\n---\n\nGit是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。一般找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。**也可使用github远程仓库**\nGit仓库和GitHub仓库之间的传输是通过SSH加密的，需要一点设置：\n\n**第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：**\n\n```\n$ ssh-keygen -t rsa -C \"imwl@live.com\"\n```\n把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可。\n\n如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n\n**第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：**\n\n然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：\n![github-addkey-1](http://upload-images.jianshu.io/upload_images/14597179-10901f2c6cdb2f6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点“Add Key”，你就应该看到已经添加的Key：\n\n![github-addkey-2](http://upload-images.jianshu.io/upload_images/14597179-63e04ca796774279?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"git/git远程仓库","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1o003ntssaklyv0pn7","content":"<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。一般找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。<strong>也可使用github远程仓库</strong><br>Git仓库和GitHub仓库之间的传输是通过SSH加密的，需要一点设置：</p>\n<p><strong>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;imwl@live.com&quot;</span><br></pre></td></tr></table></figure>\n<p>把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p><strong>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</strong></p>\n<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：<br><img src=\"http://upload-images.jianshu.io/upload_images/14597179-10901f2c6cdb2f6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github-addkey-1\"></p>\n<p>点“Add Key”，你就应该看到已经添加的Key：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-63e04ca796774279?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github-addkey-2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。一般找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。<strong>也可使用github远程仓库</strong><br>Git仓库和GitHub仓库之间的传输是通过SSH加密的，需要一点设置：</p>\n<p><strong>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;imwl@live.com&quot;</span><br></pre></td></tr></table></figure>\n<p>把邮件地址换成自己的邮件地址，然后一路回车，使用默认值即可。</p>\n<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>\n<p><strong>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</strong></p>\n<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：<br><img src=\"http://upload-images.jianshu.io/upload_images/14597179-10901f2c6cdb2f6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github-addkey-1\"></p>\n<p>点“Add Key”，你就应该看到已经添加的Key：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-63e04ca796774279?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github-addkey-2\"></p>\n"},{"title":"HTTP基本原理","date":"2019-06-29T03:05:31.000Z","_content":"## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","source":"_posts/linux学习/HTTP的基本原理.md","raw":"---\ntitle: HTTP基本原理\ndate: 2019-06-29 11:05:31\ntags:\ncategories: linux\n---\n## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","slug":"linux学习/HTTP的基本原理","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1p003qtssafiq7p0af","content":"<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n"},{"title":"IP地址","date":"2019-06-30T03:05:31.000Z","_content":"\nip 地址就是 网络中的 地址信息\n\n## IPv4 与 IPIPV\nIPv4 格式 A.B.C.D  取值范围 0 ~ 255     2\\*32 个 \nIPv6 格式 A:B:C:D:E:F:G:H   十六进制  2\\*128 个 16\\*32\n\n## 公网 ip 和 内网 ip\n公网内 ip 地址由 inter NIC 负责。公有地址全球唯一\n私有地址 是非注册地址，用于组织机构内部使用\n\n### 私有地址范围\n1. A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255\n2. B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255\n3. C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255\n \n私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）\n（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）\n\n内网的地址都是使用的路由器中的公共的公网ip来连接internet。\n\n局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复\n\n## localhost， 127.0.0.1 和 0.0.0.0 区别\n\n1. localhost : 域名， windows默认将 localhost 指向`127.0.0.1`.\n2. 127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）\n3. 0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口\n\n\n\n","source":"_posts/linux学习/ip地址.md","raw":"---\ntitle: IP地址\ndate: 2019-06-30 11:05:31\ntags:\ncategories: linux\n---\n\nip 地址就是 网络中的 地址信息\n\n## IPv4 与 IPIPV\nIPv4 格式 A.B.C.D  取值范围 0 ~ 255     2\\*32 个 \nIPv6 格式 A:B:C:D:E:F:G:H   十六进制  2\\*128 个 16\\*32\n\n## 公网 ip 和 内网 ip\n公网内 ip 地址由 inter NIC 负责。公有地址全球唯一\n私有地址 是非注册地址，用于组织机构内部使用\n\n### 私有地址范围\n1. A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255\n2. B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255\n3. C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255\n \n私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）\n（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）\n\n内网的地址都是使用的路由器中的公共的公网ip来连接internet。\n\n局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复\n\n## localhost， 127.0.0.1 和 0.0.0.0 区别\n\n1. localhost : 域名， windows默认将 localhost 指向`127.0.0.1`.\n2. 127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）\n3. 0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口\n\n\n\n","slug":"linux学习/ip地址","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1q003stssau746rc12","content":"<p>ip 地址就是 网络中的 地址信息</p>\n<h2 id=\"IPv4-与-IPIPV\"><a href=\"#IPv4-与-IPIPV\" class=\"headerlink\" title=\"IPv4 与 IPIPV\"></a>IPv4 与 IPIPV</h2><p>IPv4 格式 A.B.C.D  取值范围 0 ~ 255     2*32 个<br>IPv6 格式 A:B:C:D:E:F:G:H   十六进制  2*128 个 16*32</p>\n<h2 id=\"公网-ip-和-内网-ip\"><a href=\"#公网-ip-和-内网-ip\" class=\"headerlink\" title=\"公网 ip 和 内网 ip\"></a>公网 ip 和 内网 ip</h2><p>公网内 ip 地址由 inter NIC 负责。公有地址全球唯一<br>私有地址 是非注册地址，用于组织机构内部使用</p>\n<h3 id=\"私有地址范围\"><a href=\"#私有地址范围\" class=\"headerlink\" title=\"私有地址范围\"></a>私有地址范围</h3><ol>\n<li>A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255</li>\n<li>B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255</li>\n<li>C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255</li>\n</ol>\n<p>私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）<br>（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）</p>\n<p>内网的地址都是使用的路由器中的公共的公网ip来连接internet。</p>\n<p>局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复</p>\n<h2 id=\"localhost，-127-0-0-1-和-0-0-0-0-区别\"><a href=\"#localhost，-127-0-0-1-和-0-0-0-0-区别\" class=\"headerlink\" title=\"localhost， 127.0.0.1 和 0.0.0.0 区别\"></a>localhost， 127.0.0.1 和 0.0.0.0 区别</h2><ol>\n<li>localhost : 域名， windows默认将 localhost 指向<code>127.0.0.1</code>.</li>\n<li>127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）</li>\n<li>0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>ip 地址就是 网络中的 地址信息</p>\n<h2 id=\"IPv4-与-IPIPV\"><a href=\"#IPv4-与-IPIPV\" class=\"headerlink\" title=\"IPv4 与 IPIPV\"></a>IPv4 与 IPIPV</h2><p>IPv4 格式 A.B.C.D  取值范围 0 ~ 255     2*32 个<br>IPv6 格式 A:B:C:D:E:F:G:H   十六进制  2*128 个 16*32</p>\n<h2 id=\"公网-ip-和-内网-ip\"><a href=\"#公网-ip-和-内网-ip\" class=\"headerlink\" title=\"公网 ip 和 内网 ip\"></a>公网 ip 和 内网 ip</h2><p>公网内 ip 地址由 inter NIC 负责。公有地址全球唯一<br>私有地址 是非注册地址，用于组织机构内部使用</p>\n<h3 id=\"私有地址范围\"><a href=\"#私有地址范围\" class=\"headerlink\" title=\"私有地址范围\"></a>私有地址范围</h3><ol>\n<li>A 类 IP 地址 ： 10.0.0.0 ~ 10.255.255.255</li>\n<li>B 类 IP 地址 ： 172.16.0.0 ~ 172.31.255.255</li>\n<li>C 类 IP 地址 ： 192.168.0.0 ~ 192.168.255.255</li>\n</ol>\n<p>私有地址 不是由 internet分配的，不会出现在internet中。需要将私有 ip地址 转为 公网 IP 地址，与外部连接 （NAT）<br>（私网地址访问互联网地址很方便，但互联网地址访问私有地址很困难）</p>\n<p>内网的地址都是使用的路由器中的公共的公网ip来连接internet。</p>\n<p>局域网内， IP 地址 是唯一的。但不同局域网， IP地址可以重复</p>\n<h2 id=\"localhost，-127-0-0-1-和-0-0-0-0-区别\"><a href=\"#localhost，-127-0-0-1-和-0-0-0-0-区别\" class=\"headerlink\" title=\"localhost， 127.0.0.1 和 0.0.0.0 区别\"></a>localhost， 127.0.0.1 和 0.0.0.0 区别</h2><ol>\n<li>localhost : 域名， windows默认将 localhost 指向<code>127.0.0.1</code>.</li>\n<li>127.0.0.1 : 回环地址，凡是127 开头的 IP地址，都是回环地址（主机上发送给回环地址的数据 会自己接收，根本不传出去）</li>\n<li>0.0.0.0 : 并不是一个真实的IP地址，他表示本机中所有的IPV4地址。监听本机所有的ip端口</li>\n</ol>\n"},{"title":"linux使用者管理","date":"2019-07-07T03:05:31.000Z","_content":"\n## 新建用户\n```\nroot 权限下：\nuseradd test\npasswd test\n\nuserdel -r test # 连同文件夹一起删掉\n```\n\n## 例行工作\n```\nat\ncron\n```\n\n## 程序管理与selinux初探\n1. 程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。\n2. &   后台运行  (关掉终端会停止)   nohup + cmd + &   或者setsid + cmd + &  \n3. fg  %1    将job 1拿到前台来\n4. vi 下 ctrl + z 可将vi 放到后台。\n5. kill  # kill -9 %1\n6. bg  后台暂停的 让 后台运行\n\n7. top -d 5 -p 12345\n8. free -g\n9. uname -a\n10. uptime\n11. netstat -a\n\n### SELinux\n**Security Enhanced Linux**\n\n## screen \n```\nscreen -dmS test   # 创建 test 窗口\nscreen -r test     # 连接 test 窗口\nscreen -d test 后  screen -r test   # 如果连接不上，这样连接\nscreen -S test -X quit  # 删除 test 窗口\n```\n","source":"_posts/linux学习/linux使用者管理.md","raw":"---\ntitle: linux使用者管理\ndate: 2019-07-07 11:05:31\ntags:\ncategories: linux\n---\n\n## 新建用户\n```\nroot 权限下：\nuseradd test\npasswd test\n\nuserdel -r test # 连同文件夹一起删掉\n```\n\n## 例行工作\n```\nat\ncron\n```\n\n## 程序管理与selinux初探\n1. 程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。\n2. &   后台运行  (关掉终端会停止)   nohup + cmd + &   或者setsid + cmd + &  \n3. fg  %1    将job 1拿到前台来\n4. vi 下 ctrl + z 可将vi 放到后台。\n5. kill  # kill -9 %1\n6. bg  后台暂停的 让 后台运行\n\n7. top -d 5 -p 12345\n8. free -g\n9. uname -a\n10. uptime\n11. netstat -a\n\n### SELinux\n**Security Enhanced Linux**\n\n## screen \n```\nscreen -dmS test   # 创建 test 窗口\nscreen -r test     # 连接 test 窗口\nscreen -d test 后  screen -r test   # 如果连接不上，这样连接\nscreen -S test -X quit  # 删除 test 窗口\n```\n","slug":"linux学习/linux使用者管理","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1r003vtssaqhma6kor","content":"<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root 权限下：</span><br><span class=\"line\">useradd test</span><br><span class=\"line\">passwd test</span><br><span class=\"line\"></span><br><span class=\"line\">userdel -r test # 连同文件夹一起删掉</span><br></pre></td></tr></table></figure>\n<h2 id=\"例行工作\"><a href=\"#例行工作\" class=\"headerlink\" title=\"例行工作\"></a>例行工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at</span><br><span class=\"line\">cron</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序管理与selinux初探\"><a href=\"#程序管理与selinux初探\" class=\"headerlink\" title=\"程序管理与selinux初探\"></a>程序管理与selinux初探</h2><ol>\n<li>程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。</li>\n<li>&amp;   后台运行  (关掉终端会停止)   nohup + cmd + &amp;   或者setsid + cmd + &amp;  </li>\n<li>fg  %1    将job 1拿到前台来</li>\n<li>vi 下 ctrl + z 可将vi 放到后台。</li>\n<li>kill  # kill -9 %1</li>\n<li><p>bg  后台暂停的 让 后台运行</p>\n</li>\n<li><p>top -d 5 -p 12345</p>\n</li>\n<li>free -g</li>\n<li>uname -a</li>\n<li>uptime</li>\n<li>netstat -a</li>\n</ol>\n<h3 id=\"SELinux\"><a href=\"#SELinux\" class=\"headerlink\" title=\"SELinux\"></a>SELinux</h3><p><strong>Security Enhanced Linux</strong></p>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -dmS test   # 创建 test 窗口</span><br><span class=\"line\">screen -r test     # 连接 test 窗口</span><br><span class=\"line\">screen -d test 后  screen -r test   # 如果连接不上，这样连接</span><br><span class=\"line\">screen -S test -X quit  # 删除 test 窗口</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root 权限下：</span><br><span class=\"line\">useradd test</span><br><span class=\"line\">passwd test</span><br><span class=\"line\"></span><br><span class=\"line\">userdel -r test # 连同文件夹一起删掉</span><br></pre></td></tr></table></figure>\n<h2 id=\"例行工作\"><a href=\"#例行工作\" class=\"headerlink\" title=\"例行工作\"></a>例行工作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at</span><br><span class=\"line\">cron</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序管理与selinux初探\"><a href=\"#程序管理与selinux初探\" class=\"headerlink\" title=\"程序管理与selinux初探\"></a>程序管理与selinux初探</h2><ol>\n<li>程序一般放在磁盘中，通过用户的执行来触发，触发后会加载到内存中成为一个个体，就是进程。</li>\n<li>&amp;   后台运行  (关掉终端会停止)   nohup + cmd + &amp;   或者setsid + cmd + &amp;  </li>\n<li>fg  %1    将job 1拿到前台来</li>\n<li>vi 下 ctrl + z 可将vi 放到后台。</li>\n<li>kill  # kill -9 %1</li>\n<li><p>bg  后台暂停的 让 后台运行</p>\n</li>\n<li><p>top -d 5 -p 12345</p>\n</li>\n<li>free -g</li>\n<li>uname -a</li>\n<li>uptime</li>\n<li>netstat -a</li>\n</ol>\n<h3 id=\"SELinux\"><a href=\"#SELinux\" class=\"headerlink\" title=\"SELinux\"></a>SELinux</h3><p><strong>Security Enhanced Linux</strong></p>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">screen -dmS test   # 创建 test 窗口</span><br><span class=\"line\">screen -r test     # 连接 test 窗口</span><br><span class=\"line\">screen -d test 后  screen -r test   # 如果连接不上，这样连接</span><br><span class=\"line\">screen -S test -X quit  # 删除 test 窗口</span><br></pre></td></tr></table></figure>\n"},{"title":"linux基础思维导图","date":"2018-12-25T03:30:41.000Z","_content":"\n\n![linux基础思维导图](https://upload-images.jianshu.io/upload_images/14597179-0b895a87d1b43400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/linux学习/linux基础思维导图.md","raw":"\n---\ntitle: linux基础思维导图\ndate: 2018-12-25 11:30:41\ntags:\ncategories: linux学习\n---\n\n\n![linux基础思维导图](https://upload-images.jianshu.io/upload_images/14597179-0b895a87d1b43400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"linux学习/linux基础思维导图","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1r003xtssava3h74ay","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0b895a87d1b43400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"linux基础思维导图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0b895a87d1b43400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"linux基础思维导图\"></p>\n"},{"title":"linux基础","date":"2019-06-28T03:05:31.000Z","_content":"\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. `>/dev/null ,2>/dev/null` 丢弃输出\n5. `> list 2>&1 (都输出 list)或 &> list`\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","source":"_posts/linux学习/readme.md","raw":"---\ntitle: linux基础\ndate: 2019-06-28 11:05:31\ntags:\ncategories: linux\n---\n\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. `>/dev/null ,2>/dev/null` 丢弃输出\n5. `> list 2>&1 (都输出 list)或 &> list`\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","slug":"linux学习/readme","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1s003ztssa6ghmc46z","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. `&gt;/dev/null ,2&gt;/dev/null` 丢弃输出</span><br><span class=\"line\">5. `&gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list`</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. `&gt;/dev/null ,2&gt;/dev/null` 丢弃输出</span><br><span class=\"line\">5. `&gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list`</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n"},{"title":"个人计算机","date":"2019-06-28T03:05:31.000Z","_content":"\n# 个人计算机架构与接口设备\n\n### 主板\n主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。\n\n芯片组 分为两个 **桥接器** 来控制各组件通信\n\n1. 北桥负责连接速度较快的 CPU 、内存、显卡等组件\n2. 南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等\n\ntips : AMD 将内存控制组件集成到 CPU 当中，急速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）\n\n### CPU \n1. 多核 ： 一个 CPU 多个运算内核\n2. 频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）\n3. 32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存\n\n### 内存\n个人计算机的内存主要组件为 **动态随机访问内存** （通电使用与记录，断电数据消失）\n\n双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位\n\nBIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）\n\n\n### 显卡\n显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。\n运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。\n\n### 硬盘\n### PCI适配卡\n### 电源\n\n\n\n","source":"_posts/linux学习/个人计算机.md","raw":"---\ntitle: 个人计算机\ndate: 2019-06-28 11:05:31\ntags:\ncategories: linux\n---\n\n# 个人计算机架构与接口设备\n\n### 主板\n主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。\n\n芯片组 分为两个 **桥接器** 来控制各组件通信\n\n1. 北桥负责连接速度较快的 CPU 、内存、显卡等组件\n2. 南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等\n\ntips : AMD 将内存控制组件集成到 CPU 当中，急速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）\n\n### CPU \n1. 多核 ： 一个 CPU 多个运算内核\n2. 频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）\n3. 32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存\n\n### 内存\n个人计算机的内存主要组件为 **动态随机访问内存** （通电使用与记录，断电数据消失）\n\n双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位\n\nBIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）\n\n\n### 显卡\n显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。\n运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。\n\n### 硬盘\n### PCI适配卡\n### 电源\n\n\n\n","slug":"linux学习/个人计算机","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1t0042tssa6o5jvway","content":"<h1 id=\"个人计算机架构与接口设备\"><a href=\"#个人计算机架构与接口设备\" class=\"headerlink\" title=\"个人计算机架构与接口设备\"></a>个人计算机架构与接口设备</h1><h3 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h3><p>主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。</p>\n<p>芯片组 分为两个 <strong>桥接器</strong> 来控制各组件通信</p>\n<ol>\n<li>北桥负责连接速度较快的 CPU 、内存、显卡等组件</li>\n<li>南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等</li>\n</ol>\n<p>tips : AMD 将内存控制组件集成到 CPU 当中，急速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>多核 ： 一个 CPU 多个运算内核</li>\n<li>频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）</li>\n<li>32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存</li>\n</ol>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>个人计算机的内存主要组件为 <strong>动态随机访问内存</strong> （通电使用与记录，断电数据消失）</p>\n<p>双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位</p>\n<p>BIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）</p>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。<br>运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。</p>\n<h3 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h3><h3 id=\"PCI适配卡\"><a href=\"#PCI适配卡\" class=\"headerlink\" title=\"PCI适配卡\"></a>PCI适配卡</h3><h3 id=\"电源\"><a href=\"#电源\" class=\"headerlink\" title=\"电源\"></a>电源</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人计算机架构与接口设备\"><a href=\"#个人计算机架构与接口设备\" class=\"headerlink\" title=\"个人计算机架构与接口设备\"></a>个人计算机架构与接口设备</h1><h3 id=\"主板\"><a href=\"#主板\" class=\"headerlink\" title=\"主板\"></a>主板</h3><p>主流 x86 开发商（Intel，AMD）的 cpu 架构并不兼容， 两大主流的 CPU 所需要的主板芯片组设计也不相同。</p>\n<p>芯片组 分为两个 <strong>桥接器</strong> 来控制各组件通信</p>\n<ol>\n<li>北桥负责连接速度较快的 CPU 、内存、显卡等组件</li>\n<li>南桥负责连接速度较慢的周边接口，包括usb,硬盘，网卡等</li>\n</ol>\n<p>tips : AMD 将内存控制组件集成到 CPU 当中，急速 CPU 与内存的传输速度。（AMD 和 INTEL 的架构上的主要区别）</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>多核 ： 一个 CPU 多个运算内核</li>\n<li>频率 ： CPU 每秒可进行的工作次数，等于外频和倍数的乘积（外频：CPU与外部组件进行数据传输/运算时的速度，倍频：CPU内部用来加速工作性能的一个倍速）</li>\n<li>32位 与 64位： 主要依据 CPU 解析的字组大小来判定。 32位 CPU 最大只能够支持到 4GB 内存</li>\n</ol>\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>个人计算机的内存主要组件为 <strong>动态随机访问内存</strong> （通电使用与记录，断电数据消失）</p>\n<p>双通道设计理念 ： 一条内存仅达 64位，两条内存可达128位</p>\n<p>BIOS ： Basic input output System , 写死到只读存储器中 （Read Only Memory,rom）,BIOS 系统在开机的时候首先读取的一个程序。（因为升级BIOS，现在BIOS通常写在闪存或EEPROM）</p>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡上面有一个 内存的容量，将会影响到最终的屏幕分辨率与色彩深度。<br>运算速度，显卡上面嵌入一个 3D 加速的芯片 ， GPU 的由来。</p>\n<h3 id=\"硬盘\"><a href=\"#硬盘\" class=\"headerlink\" title=\"硬盘\"></a>硬盘</h3><h3 id=\"PCI适配卡\"><a href=\"#PCI适配卡\" class=\"headerlink\" title=\"PCI适配卡\"></a>PCI适配卡</h3><h3 id=\"电源\"><a href=\"#电源\" class=\"headerlink\" title=\"电源\"></a>电源</h3>"},{"title":"关于vi","date":"2019-07-01T03:05:31.000Z","_content":"\n\n# vi\n## vi的使用\n1. 一般模式   \n2. 编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)\n3. 命令行模式 (: / ?)\n```\ndos2unix filename\n\ndos2unix和unix2dos，dos2unix把\"\\r\\n\"转化成\"\\n\"，unixtodos把\"\\n\"转化成\"\\r\\n\n```\n","source":"_posts/linux学习/关于vi.md","raw":"---\ntitle: 关于vi\ndate: 2019-07-01 11:05:31\ntags:\ncategories: linux\n---\n\n\n# vi\n## vi的使用\n1. 一般模式   \n2. 编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)\n3. 命令行模式 (: / ?)\n```\ndos2unix filename\n\ndos2unix和unix2dos，dos2unix把\"\\r\\n\"转化成\"\\n\"，unixtodos把\"\\n\"转化成\"\\r\\n\n```\n","slug":"linux学习/关于vi","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1u0044tssaxmnl5goh","content":"<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><h2 id=\"vi的使用\"><a href=\"#vi的使用\" class=\"headerlink\" title=\"vi的使用\"></a>vi的使用</h2><ol>\n<li>一般模式   </li>\n<li>编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)</li>\n<li>命令行模式 (: / ?)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dos2unix filename</span><br><span class=\"line\"></span><br><span class=\"line\">dos2unix和unix2dos，dos2unix把&quot;\\r\\n&quot;转化成&quot;\\n&quot;，unixtodos把&quot;\\n&quot;转化成&quot;\\r\\n</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h1><h2 id=\"vi的使用\"><a href=\"#vi的使用\" class=\"headerlink\" title=\"vi的使用\"></a>vi的使用</h2><ol>\n<li>一般模式   </li>\n<li>编辑模式 （i,I，o,O,a,A,r,R）(Ii aA 插入)（oO 插入一行）(Rr 替换)</li>\n<li>命令行模式 (: / ?)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dos2unix filename</span><br><span class=\"line\"></span><br><span class=\"line\">dos2unix和unix2dos，dos2unix把&quot;\\r\\n&quot;转化成&quot;\\n&quot;，unixtodos把&quot;\\n&quot;转化成&quot;\\r\\n</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"安装Chrome浏览器和ChromeDriver","date":"2019-09-18T03:51:16.000Z","_content":"## 一、 安装Chrome浏览器\n1、安装依赖\n\n`sudo apt-get install libxss1 libappindicator1 libindicator7`\n\n2、下载Chrome安装包 (最新稳定版)\n\n`wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb`\n\n3、安装\n\n```\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f\n```\n\n## 二、安装ChromeDriver\n1、安装xvfb以便我们可以无头奔跑地运行Chrome\n\n`sudo apt-get install xvfb`\n\n2、安装依赖\n\n`sudo apt-get install unzip`\n\n3、下载安装包\n\n`wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip`\n\n要下载对应版本 http://chromedriver.storage.googleapis.com/index.html \n\n4、解压缩+添加执行权限\n\n`unzip chromedriver_linux64.zip`\n\n5、移动\n\n`sudo mv -f chromedriver /usr/local/share/chromedriver`\n\n6、建立软连接\n\n`sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver`\n`sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver`\n\n## 三、无头运行Chrome\n1、安装Python依赖\n\n`pip3 install selenium`\n\n`pip3 install pyvirtualdisplay`\n","source":"_posts/linux学习/安装Chrome浏览器和ChromeDriver.md","raw":"---\n\ntitle: 安装Chrome浏览器和ChromeDriver\n\ndate: 2019-9-18 11:51:16\n\ntags: \n\ncategories: linux\n---\n## 一、 安装Chrome浏览器\n1、安装依赖\n\n`sudo apt-get install libxss1 libappindicator1 libindicator7`\n\n2、下载Chrome安装包 (最新稳定版)\n\n`wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb`\n\n3、安装\n\n```\nsudo dpkg -i google-chrome*.deb\nsudo apt-get install -f\n```\n\n## 二、安装ChromeDriver\n1、安装xvfb以便我们可以无头奔跑地运行Chrome\n\n`sudo apt-get install xvfb`\n\n2、安装依赖\n\n`sudo apt-get install unzip`\n\n3、下载安装包\n\n`wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip`\n\n要下载对应版本 http://chromedriver.storage.googleapis.com/index.html \n\n4、解压缩+添加执行权限\n\n`unzip chromedriver_linux64.zip`\n\n5、移动\n\n`sudo mv -f chromedriver /usr/local/share/chromedriver`\n\n6、建立软连接\n\n`sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver`\n`sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver`\n\n## 三、无头运行Chrome\n1、安装Python依赖\n\n`pip3 install selenium`\n\n`pip3 install pyvirtualdisplay`\n","slug":"linux学习/安装Chrome浏览器和ChromeDriver","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1y0047tssanu315tca","content":"<h2 id=\"一、-安装Chrome浏览器\"><a href=\"#一、-安装Chrome浏览器\" class=\"headerlink\" title=\"一、 安装Chrome浏览器\"></a>一、 安装Chrome浏览器</h2><p>1、安装依赖</p>\n<p><code>sudo apt-get install libxss1 libappindicator1 libindicator7</code></p>\n<p>2、下载Chrome安装包 (最新稳定版)</p>\n<p><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</code></p>\n<p>3、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i google-chrome*.deb</span><br><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装ChromeDriver\"><a href=\"#二、安装ChromeDriver\" class=\"headerlink\" title=\"二、安装ChromeDriver\"></a>二、安装ChromeDriver</h2><p>1、安装xvfb以便我们可以无头奔跑地运行Chrome</p>\n<p><code>sudo apt-get install xvfb</code></p>\n<p>2、安装依赖</p>\n<p><code>sudo apt-get install unzip</code></p>\n<p>3、下载安装包</p>\n<p><code>wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip</code></p>\n<p>要下载对应版本 <a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a> </p>\n<p>4、解压缩+添加执行权限</p>\n<p><code>unzip chromedriver_linux64.zip</code></p>\n<p>5、移动</p>\n<p><code>sudo mv -f chromedriver /usr/local/share/chromedriver</code></p>\n<p>6、建立软连接</p>\n<p><code>sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</code><br><code>sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</code></p>\n<h2 id=\"三、无头运行Chrome\"><a href=\"#三、无头运行Chrome\" class=\"headerlink\" title=\"三、无头运行Chrome\"></a>三、无头运行Chrome</h2><p>1、安装Python依赖</p>\n<p><code>pip3 install selenium</code></p>\n<p><code>pip3 install pyvirtualdisplay</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-安装Chrome浏览器\"><a href=\"#一、-安装Chrome浏览器\" class=\"headerlink\" title=\"一、 安装Chrome浏览器\"></a>一、 安装Chrome浏览器</h2><p>1、安装依赖</p>\n<p><code>sudo apt-get install libxss1 libappindicator1 libindicator7</code></p>\n<p>2、下载Chrome安装包 (最新稳定版)</p>\n<p><code>wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</code></p>\n<p>3、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i google-chrome*.deb</span><br><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装ChromeDriver\"><a href=\"#二、安装ChromeDriver\" class=\"headerlink\" title=\"二、安装ChromeDriver\"></a>二、安装ChromeDriver</h2><p>1、安装xvfb以便我们可以无头奔跑地运行Chrome</p>\n<p><code>sudo apt-get install xvfb</code></p>\n<p>2、安装依赖</p>\n<p><code>sudo apt-get install unzip</code></p>\n<p>3、下载安装包</p>\n<p><code>wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip</code></p>\n<p>要下载对应版本 <a href=\"http://chromedriver.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"noopener\">http://chromedriver.storage.googleapis.com/index.html</a> </p>\n<p>4、解压缩+添加执行权限</p>\n<p><code>unzip chromedriver_linux64.zip</code></p>\n<p>5、移动</p>\n<p><code>sudo mv -f chromedriver /usr/local/share/chromedriver</code></p>\n<p>6、建立软连接</p>\n<p><code>sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</code><br><code>sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</code></p>\n<h2 id=\"三、无头运行Chrome\"><a href=\"#三、无头运行Chrome\" class=\"headerlink\" title=\"三、无头运行Chrome\"></a>三、无头运行Chrome</h2><p>1、安装Python依赖</p>\n<p><code>pip3 install selenium</code></p>\n<p><code>pip3 install pyvirtualdisplay</code></p>\n"},{"title":"日志文件","date":"2019-07-03T03:05:31.000Z","_content":"\n\n# 日志文件\n**日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。**\n\n1. syslogd: 主要登录系统与网络等服务的信息。\n2. klogd: 主要登录内核产生的各项信息。\n3. logrotate: 主要进行日志文件的轮替功能。\n\n","source":"_posts/linux学习/日志文件.md","raw":"---\ntitle: 日志文件\ndate: 2019-07-03 11:05:31\ntags:\ncategories: linux\n---\n\n\n# 日志文件\n**日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。**\n\n1. syslogd: 主要登录系统与网络等服务的信息。\n2. klogd: 主要登录内核产生的各项信息。\n3. logrotate: 主要进行日志文件的轮替功能。\n\n","slug":"linux学习/日志文件","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p1z0049tssa362lnh9d","content":"<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p><strong>日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。</strong></p>\n<ol>\n<li>syslogd: 主要登录系统与网络等服务的信息。</li>\n<li>klogd: 主要登录内核产生的各项信息。</li>\n<li>logrotate: 主要进行日志文件的轮替功能。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p><strong>日志文件记录系统在什么时候由哪个进程做了什么样的行为，发生了何种事件等。</strong></p>\n<ol>\n<li>syslogd: 主要登录系统与网络等服务的信息。</li>\n<li>klogd: 主要登录内核产生的各项信息。</li>\n<li>logrotate: 主要进行日志文件的轮替功能。</li>\n</ol>\n"},{"title":"权限目录","date":"2019-07-04T03:05:31.000Z","_content":"\n\n# 用户与用户组\n1. u g o a (user group other all)\n2. r:4 w:2 x:1\n3. chgrp chown chmod \n\n# 目录\n``` \n# 一般情况下\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -> usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  \ndr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置\ndrwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备\ndrwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件\ndrwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -> usr/lib #系统函数库\nlrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -> usr/lib64 \ndrwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段\ndr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备\ndrwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备\ndrwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库\ndr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间\ndr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹\nlrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -> usr/sbin # 开机过程需要的命令\ndrwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录\ndr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。\ndrwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件\ndrwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等\ndrwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。\n```\n可变动的，不可变动的\n\n可分享的，不可分享的\n","source":"_posts/linux学习/权限，目录.md","raw":"---\ntitle: 权限目录\ndate: 2019-07-04 11:05:31\ntags:\ncategories: linux\n---\n\n\n# 用户与用户组\n1. u g o a (user group other all)\n2. r:4 w:2 x:1\n3. chgrp chown chmod \n\n# 目录\n``` \n# 一般情况下\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -> usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  \ndr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置\ndrwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备\ndrwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件\ndrwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹\nlrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -> usr/lib #系统函数库\nlrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -> usr/lib64 \ndrwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段\ndr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备\ndrwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备\ndrwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库\ndr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间\ndr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹\nlrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -> usr/sbin # 开机过程需要的命令\ndrwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录\ndr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。\ndrwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件\ndrwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等\ndrwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。\n```\n可变动的，不可变动的\n\n可分享的，不可分享的\n","slug":"linux学习/权限，目录","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p20004ctssax2zwhqai","content":"<h1 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h1><ol>\n<li>u g o a (user group other all)</li>\n<li>r:4 w:2 x:1</li>\n<li>chgrp chown chmod </li>\n</ol>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一般情况下</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -&gt; usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  </span><br><span class=\"line\">dr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置</span><br><span class=\"line\">drwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备</span><br><span class=\"line\">drwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件</span><br><span class=\"line\">drwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -&gt; usr/lib #系统函数库</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -&gt; usr/lib64 </span><br><span class=\"line\">drwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段</span><br><span class=\"line\">dr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备</span><br><span class=\"line\">drwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备</span><br><span class=\"line\">drwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库</span><br><span class=\"line\">dr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间</span><br><span class=\"line\">dr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -&gt; usr/sbin # 开机过程需要的命令</span><br><span class=\"line\">drwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录</span><br><span class=\"line\">dr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。</span><br><span class=\"line\">drwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件</span><br><span class=\"line\">drwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等</span><br><span class=\"line\">drwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。</span><br></pre></td></tr></table></figure>\n<p>可变动的，不可变动的</p>\n<p>可分享的，不可分享的</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户与用户组\"><a href=\"#用户与用户组\" class=\"headerlink\" title=\"用户与用户组\"></a>用户与用户组</h1><ol>\n<li>u g o a (user group other all)</li>\n<li>r:4 w:2 x:1</li>\n<li>chgrp chown chmod </li>\n</ol>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一般情况下</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 bin -&gt; usr/bin  #bin 放用户可用，启动时会用到的命令 l 连接文件 指向 /usr/bin  </span><br><span class=\"line\">dr-xr-xr-x.   6 root root   4096 Feb 20 10:37 boot # 开机用到的文件，内核，相关设置</span><br><span class=\"line\">drwxr-xr-x.  19 root root   3560 Apr 22 16:07 dev # 任何设备与接口设备</span><br><span class=\"line\">drwxr-xr-x.  93 root root  12288 May 24 16:05 etc # 配置文件</span><br><span class=\"line\">drwxr-xr-x.   6 root root   4096 May 24 14:42 home # 默认用户主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      7 Feb  2 14:33 lib -&gt; usr/lib #系统函数库</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      9 Feb  2 14:33 lib64 -&gt; usr/lib64 </span><br><span class=\"line\">drwx------.   2 root root  16384 Feb  2 14:32 lost+found # 文件系统发生错误时，保存的一些丢失片段</span><br><span class=\"line\">dr-xr-xr-x.   9 root root   2048 Jan 15 21:24 media # 可删除设备</span><br><span class=\"line\">drwxr-xr-x.   2 root root   4096 Jun 25  2018 mnt #  额外挂载设备</span><br><span class=\"line\">drwxr-xr-x.   7 root root   4096 May 24 16:16 opt  # 第三方软件放置库</span><br><span class=\"line\">dr-xr-xr-x. 505 root root      0 Feb 19 17:39 proc #虚拟文件系统，内核进程网络状态等存在于内存中，不占磁盘空间</span><br><span class=\"line\">dr-xr-x---.   4 root root   4096 May 24 14:54 root # 系统管理员主文件夹</span><br><span class=\"line\">lrwxrwxrwx.   1 root root      8 Feb  2 14:33 sbin -&gt; usr/sbin # 开机过程需要的命令</span><br><span class=\"line\">drwxr-xr-x.   3 root root   4096 May 24 14:39 srv # 服务数据目录</span><br><span class=\"line\">dr-xr-xr-x.  13 root root      0 Feb 19 17:40 sys # 同proc ，目前已加载的内核模块，与内存监测到的硬件设备信息等。</span><br><span class=\"line\">drwxrwxrwt.  25 root root   4096 May 24 16:44 tmp # 临时放置文件</span><br><span class=\"line\">drwxr-xr-x.  14 root root   4096 Feb  2 14:33 usr # 可分享不可变动的，所有系统默认软件等</span><br><span class=\"line\">drwxr-xr-x.  21 root root   4096 Feb 20 10:37 var # 缓存，登录文件以及某些软件运行所产生的文件等。</span><br></pre></td></tr></table></figure>\n<p>可变动的，不可变动的</p>\n<p>可分享的，不可分享的</p>\n"},{"title":"文件，目录","date":"2019-07-02T03:05:31.000Z","_content":"\n# 目录与路径\n1. cd pwd mkdir rmdir\n2. mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)\n3. rmdir -p test/test/test/test1 （递归删除空目录）\n\n# 查询\n1. file /user/bin/passwd  # 查询某文本数据类型\n2. which python # 查询某命令位置\n3. whereis passwd # 查询某目录，文件位置\n4. locate passwd # -i 忽略大小写 -r 接正则表达式\n5. find # 能执行额外的动作\n\n# 内存交换空间（swap）\n**CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中**\n\n# \n","source":"_posts/linux学习/文件，目录.md","raw":"---\ntitle: 文件，目录\ndate: 2019-07-02 11:05:31\ntags:\ncategories: linux\n---\n\n# 目录与路径\n1. cd pwd mkdir rmdir\n2. mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)\n3. rmdir -p test/test/test/test1 （递归删除空目录）\n\n# 查询\n1. file /user/bin/passwd  # 查询某文本数据类型\n2. which python # 查询某命令位置\n3. whereis passwd # 查询某目录，文件位置\n4. locate passwd # -i 忽略大小写 -r 接正则表达式\n5. find # 能执行额外的动作\n\n# 内存交换空间（swap）\n**CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中**\n\n# \n","slug":"linux学习/文件，目录","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p21004etssakhgrxbcv","content":"<h1 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h1><ol>\n<li>cd pwd mkdir rmdir</li>\n<li>mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)</li>\n<li>rmdir -p test/test/test/test1 （递归删除空目录）</li>\n</ol>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><ol>\n<li>file /user/bin/passwd  # 查询某文本数据类型</li>\n<li>which python # 查询某命令位置</li>\n<li>whereis passwd # 查询某目录，文件位置</li>\n<li>locate passwd # -i 忽略大小写 -r 接正则表达式</li>\n<li>find # 能执行额外的动作</li>\n</ol>\n<h1 id=\"内存交换空间（swap）\"><a href=\"#内存交换空间（swap）\" class=\"headerlink\" title=\"内存交换空间（swap）\"></a>内存交换空间（swap）</h1><p><strong>CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中</strong></p>\n<p># </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录与路径\"><a href=\"#目录与路径\" class=\"headerlink\" title=\"目录与路径\"></a>目录与路径</h1><ol>\n<li>cd pwd mkdir rmdir</li>\n<li>mkdir -m 711 test , mkdir  -p -m mkdir -m 711 test/test/test/test1  (仅test1 为711)</li>\n<li>rmdir -p test/test/test/test1 （递归删除空目录）</li>\n</ol>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><ol>\n<li>file /user/bin/passwd  # 查询某文本数据类型</li>\n<li>which python # 查询某命令位置</li>\n<li>whereis passwd # 查询某目录，文件位置</li>\n<li>locate passwd # -i 忽略大小写 -r 接正则表达式</li>\n<li>find # 能执行额外的动作</li>\n</ol>\n<h1 id=\"内存交换空间（swap）\"><a href=\"#内存交换空间（swap）\" class=\"headerlink\" title=\"内存交换空间（swap）\"></a>内存交换空间（swap）</h1><p><strong>CPU读取的数据都来自于内存，内存不足时，内存中暂不使用的程序和数据会被移动到swap中</strong></p>\n<p># </p>\n"},{"title":"计算机概论","date":"2019-07-05T03:05:31.000Z","_content":"\n\n# 计算机概论\n## 计算机五大部分\n1. 输入单元\n2. 中央处理器 （控制器，运算器）\n3. 内存\n4. 输出单元\n\n### cpu 种类\n1. 精简指令集 （RISC）\n2. 复杂指令集 （CISC）\n\n**CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成**\n\n#### 精简指令集\nRISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）\n\n#### 复杂指令集\nCISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)\n\n### 接口设备\n最重要的接口设备是**主板**，主板将所有的设备连接在一起，让它们能够协调通信\n\n主板上最重要的组件 ： **主板芯片组** ，将所有设备汇聚在一起\n## 计算机发展简史\n1. 电子管计算机\n2. 晶体管计算机\n3. 集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形\n4. 超大规模集成电路计算机 （当前计算机）\n\n## 计算机分类\n1. 超级计算机 # 天河二号等 \n2. 大型计算机 # 去'IOE' \n3. 微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢\n4. 工作站  # 比个人计算机更强大的性能\n5. 微电脑 （个人 pc ）\n\n## 计算机上常用的计算单位\n### 大小单位\n理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte\n`1Byte = 8 bit `\n`k M G T P 用来简化1024写法`\n\n### 速度单位\nCPU 常用 MHz 和 GHz ，(Hz 秒分之一)\n\n网络上使用的 bit 为单位， `8Mbit/s` ,转化为 Byte 为 `1024 kB/s` 或 `1 MB/s` 或 `8Mbps`\n\n## ","source":"_posts/linux学习/计算机概论.md","raw":"---\ntitle: 计算机概论\ndate: 2019-07-05 11:05:31\ntags:\ncategories: linux\n---\n\n\n# 计算机概论\n## 计算机五大部分\n1. 输入单元\n2. 中央处理器 （控制器，运算器）\n3. 内存\n4. 输出单元\n\n### cpu 种类\n1. 精简指令集 （RISC）\n2. 复杂指令集 （CISC）\n\n**CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成**\n\n#### 精简指令集\nRISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）\n\n#### 复杂指令集\nCISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)\n\n### 接口设备\n最重要的接口设备是**主板**，主板将所有的设备连接在一起，让它们能够协调通信\n\n主板上最重要的组件 ： **主板芯片组** ，将所有设备汇聚在一起\n## 计算机发展简史\n1. 电子管计算机\n2. 晶体管计算机\n3. 集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形\n4. 超大规模集成电路计算机 （当前计算机）\n\n## 计算机分类\n1. 超级计算机 # 天河二号等 \n2. 大型计算机 # 去'IOE' \n3. 微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢\n4. 工作站  # 比个人计算机更强大的性能\n5. 微电脑 （个人 pc ）\n\n## 计算机上常用的计算单位\n### 大小单位\n理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte\n`1Byte = 8 bit `\n`k M G T P 用来简化1024写法`\n\n### 速度单位\nCPU 常用 MHz 和 GHz ，(Hz 秒分之一)\n\n网络上使用的 bit 为单位， `8Mbit/s` ,转化为 Byte 为 `1024 kB/s` 或 `1 MB/s` 或 `8Mbps`\n\n## ","slug":"linux学习/计算机概论","published":1,"updated":"2020-04-01T09:23:43.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p21004gtssa0h6ii3af","content":"<h1 id=\"计算机概论\"><a href=\"#计算机概论\" class=\"headerlink\" title=\"计算机概论\"></a>计算机概论</h1><h2 id=\"计算机五大部分\"><a href=\"#计算机五大部分\" class=\"headerlink\" title=\"计算机五大部分\"></a>计算机五大部分</h2><ol>\n<li>输入单元</li>\n<li>中央处理器 （控制器，运算器）</li>\n<li>内存</li>\n<li>输出单元</li>\n</ol>\n<h3 id=\"cpu-种类\"><a href=\"#cpu-种类\" class=\"headerlink\" title=\"cpu 种类\"></a>cpu 种类</h3><ol>\n<li>精简指令集 （RISC）</li>\n<li>复杂指令集 （CISC）</li>\n</ol>\n<p><strong>CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成</strong></p>\n<h4 id=\"精简指令集\"><a href=\"#精简指令集\" class=\"headerlink\" title=\"精简指令集\"></a>精简指令集</h4><p>RISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）</p>\n<h4 id=\"复杂指令集\"><a href=\"#复杂指令集\" class=\"headerlink\" title=\"复杂指令集\"></a>复杂指令集</h4><p>CISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)</p>\n<h3 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h3><p>最重要的接口设备是<strong>主板</strong>，主板将所有的设备连接在一起，让它们能够协调通信</p>\n<p>主板上最重要的组件 ： <strong>主板芯片组</strong> ，将所有设备汇聚在一起</p>\n<h2 id=\"计算机发展简史\"><a href=\"#计算机发展简史\" class=\"headerlink\" title=\"计算机发展简史\"></a>计算机发展简史</h2><ol>\n<li>电子管计算机</li>\n<li>晶体管计算机</li>\n<li>集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形</li>\n<li>超大规模集成电路计算机 （当前计算机）</li>\n</ol>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ol>\n<li>超级计算机 # 天河二号等 </li>\n<li>大型计算机 # 去’IOE’ </li>\n<li>微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢</li>\n<li>工作站  # 比个人计算机更强大的性能</li>\n<li>微电脑 （个人 pc ）</li>\n</ol>\n<h2 id=\"计算机上常用的计算单位\"><a href=\"#计算机上常用的计算单位\" class=\"headerlink\" title=\"计算机上常用的计算单位\"></a>计算机上常用的计算单位</h2><h3 id=\"大小单位\"><a href=\"#大小单位\" class=\"headerlink\" title=\"大小单位\"></a>大小单位</h3><p>理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte<br><code>1Byte = 8 bit</code><br><code>k M G T P 用来简化1024写法</code></p>\n<h3 id=\"速度单位\"><a href=\"#速度单位\" class=\"headerlink\" title=\"速度单位\"></a>速度单位</h3><p>CPU 常用 MHz 和 GHz ，(Hz 秒分之一)</p>\n<p>网络上使用的 bit 为单位， <code>8Mbit/s</code> ,转化为 Byte 为 <code>1024 kB/s</code> 或 <code>1 MB/s</code> 或 <code>8Mbps</code></p>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机概论\"><a href=\"#计算机概论\" class=\"headerlink\" title=\"计算机概论\"></a>计算机概论</h1><h2 id=\"计算机五大部分\"><a href=\"#计算机五大部分\" class=\"headerlink\" title=\"计算机五大部分\"></a>计算机五大部分</h2><ol>\n<li>输入单元</li>\n<li>中央处理器 （控制器，运算器）</li>\n<li>内存</li>\n<li>输出单元</li>\n</ol>\n<h3 id=\"cpu-种类\"><a href=\"#cpu-种类\" class=\"headerlink\" title=\"cpu 种类\"></a>cpu 种类</h3><ol>\n<li>精简指令集 （RISC）</li>\n<li>复杂指令集 （CISC）</li>\n</ol>\n<p><strong>CPU内部已经含有一小的指令集，我们所使用的软件都要经过 CPU 内部的微指令集来完成</strong></p>\n<h4 id=\"精简指令集\"><a href=\"#精简指令集\" class=\"headerlink\" title=\"精简指令集\"></a>精简指令集</h4><p>RISC比较精简，每个指令执行时间短，完成的操作也很单纯，指令的执行性能比较好，但要做复杂的事情，就要多个指令来完成（ ARM ）</p>\n<h4 id=\"复杂指令集\"><a href=\"#复杂指令集\" class=\"headerlink\" title=\"复杂指令集\"></a>复杂指令集</h4><p>CISC的微指令集中，每个小指令可以执行一些较低阶的硬件操作，指令数目多且复杂，每条指令的长度并不相同。每个指令花费时间长，但每条个别指令可以处理的工作比较丰富。（AMD INTEL 等 x86 架构 CPU ）(64 位的个人计算机CPU 统称为 x86_64 架构)</p>\n<h3 id=\"接口设备\"><a href=\"#接口设备\" class=\"headerlink\" title=\"接口设备\"></a>接口设备</h3><p>最重要的接口设备是<strong>主板</strong>，主板将所有的设备连接在一起，让它们能够协调通信</p>\n<p>主板上最重要的组件 ： <strong>主板芯片组</strong> ，将所有设备汇聚在一起</p>\n<h2 id=\"计算机发展简史\"><a href=\"#计算机发展简史\" class=\"headerlink\" title=\"计算机发展简史\"></a>计算机发展简史</h2><ol>\n<li>电子管计算机</li>\n<li>晶体管计算机</li>\n<li>集成电路计算机   （计算机具备进入千家万户条件）IBM 推出兼容的产品 System/360 操作系统的雏形</li>\n<li>超大规模集成电路计算机 （当前计算机）</li>\n</ol>\n<h2 id=\"计算机分类\"><a href=\"#计算机分类\" class=\"headerlink\" title=\"计算机分类\"></a>计算机分类</h2><ol>\n<li>超级计算机 # 天河二号等 </li>\n<li>大型计算机 # 去’IOE’ </li>\n<li>微型计算机 # 小型机，普通服务器, 已经代替了传统大型机，成为大规模企业计算的中枢</li>\n<li>工作站  # 比个人计算机更强大的性能</li>\n<li>微电脑 （个人 pc ）</li>\n</ol>\n<h2 id=\"计算机上常用的计算单位\"><a href=\"#计算机上常用的计算单位\" class=\"headerlink\" title=\"计算机上常用的计算单位\"></a>计算机上常用的计算单位</h2><h3 id=\"大小单位\"><a href=\"#大小单位\" class=\"headerlink\" title=\"大小单位\"></a>大小单位</h3><p>理论上只认识0与1，0/1 的单位称为 bit，存储数据时，每份简单的数据都会使用 8 个 bit 来记录，称之为 Byte<br><code>1Byte = 8 bit</code><br><code>k M G T P 用来简化1024写法</code></p>\n<h3 id=\"速度单位\"><a href=\"#速度单位\" class=\"headerlink\" title=\"速度单位\"></a>速度单位</h3><p>CPU 常用 MHz 和 GHz ，(Hz 秒分之一)</p>\n<p>网络上使用的 bit 为单位， <code>8Mbit/s</code> ,转化为 Byte 为 <code>1024 kB/s</code> 或 <code>1 MB/s</code> 或 <code>8Mbps</code></p>\n<p>## </p>\n"},{"title":"个人计算机","date":"2019-07-28T03:05:31.000Z","_content":"# 计算机组成原理总结\n## 计算机系统简介\n计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。\n**系统软件**:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。\n**应用软件**:根据用户任务需求所编制的各种程序。\n## 计算机系统的层次结构\n通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 **\n或 **高级语言机器 → → 机器语言机器 **\n\n通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。\n**编译程序**：一次全部翻译成机器语言程序，然后交由机器执行。\n**解释程序**：边翻译，边执行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统**\n\n**高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统**\n\n## 第1章：计算机系统概论\n**1、计算机系统由哪两部分组成？计算机系统性能取决于什么？**\n\n计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。\n1）计算机系统由硬件和软件两部分组成。\n2）计算机系统性能由硬件和软件共同决定。\n\n**2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？**\n\n1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器\n2）微程序机器和传统机器是物理机，其他是虚拟机。\n\n**3、在计算机系统结构中，什么是翻译？什么是解释？**\n\n1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；\n2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。\n\n**4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。**\n\n1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；\n2）计算机组成是指如何实现计算机体系结构所体现出来的属性；\n3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。\n\n**5、冯诺依曼机器的主要特点？**\n\n1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；\n2）指令和数据存储在存储器中，并可以按地址访问；\n3）指令和数据均以二进制表示；\n4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；\n5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；\n6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）\n\n\n**7、什么是存储单元、存储字、存储字长、存储体？**\n\n存储单元：存储一个存储字并具有特定存储地址的存储单位；\n存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。\n存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；\n存储体：由多个存储单元构成的存储器件。\n\n**8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？**\n\n1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。\n2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。\n3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。\n\n**9、什么是机器字长，什么是存储字长长？**\n\n机器字长：CPU一次能够处理的二进制数据的位数。\n存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。\n\n**10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？**\n\n1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；\n2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；\n3）存储器的最大容量为64K * 2B = 128K Byte\n\n## 第三章 系统总线\n**1、为什么要使用总线？**\n\n在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。\n因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。\n\n**2、总线的两大基本特征是什么？**\n\n1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。\n2）分时：同一时刻，总线上只能传输一个部件发送的信息；\n\n**3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？**\n\n1）分成数据总线、地址总线以及控制总线。\n2）数据总线：各个功能部件之间传送数据信息，双向传输；\n3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出\n4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。\n\n**3、什么是总线宽度、总线带宽、总线复用、信号线数？**\n\n1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；\n2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。\n3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；\n4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。\n\n**4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？**\n\n33 * （32/8） = 132 MB/s\n\n**5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）**\n\n在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。\n但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。\n因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。\n例如CPU和Cache之间、I/O设备之间等。\n\n**6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？**\n\n1）链式查询、计数器定时查询、以及独立请求。\n2）链式查询的优先级不能改变，离控制器最近的优先级最高。\n\n\n**8、什么是总线周期，分为哪几个阶段？**\n\n1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；\n2）分为四个阶段：\n申请分配阶段：申请总线\n寻址阶段：发出地址及有关命令\n传数阶段：进行数据交换\n结束：从总线上撤除信号，让出总线\n\n**9、什么是总线通信控制，总线通信控制有哪几种？**\n\n1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；\n2）同步通信、异步通信、半同步通信、分离式通信\n\n**10、什么是同步通信？其优点和缺点？**\n\n１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。\n２）优点：速度快，各个模块间配合简单\n３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。\n\n**11、什么是异步通信？异步通信分为哪几种类型？**\n\n1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）\n2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）\n\n**12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）**\n\n波特率：单位时间内传送的二进制数据数据的位数，单位bps\n比特率：单位时间内传送的有效的二进制位数。\n\n**13、异步通信时，常规需要设置的参数有哪些？**\n\n波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）\n\n**14、简述半同步通信的基本原理。**\n\n半同步通信结合同步通信和异步通信。\n同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；\n异步通信：如果从模块没有准备好，增加一个“等待响应”信号。\n\n**15、简述分离式通信的基本原理。**\n\n主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。\n但是，这种方式控制比较复杂。\n\n**16、奇偶校验可以纠错吗？汉明码可以纠错码？**\n\n1）奇偶校验只能检错，不能纠错。\n2）汉明码可以纠错。\n\n## 第四章 存储器\n\n1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？\n\n1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；\n2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；\n3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。\n\n2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？\n\n1）速度、容量、位价格。\n2）寄存器速度最快，主存最便宜。\n\n3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？\n\n1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。\n2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。\n（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）\n\n4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？\n\n1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；\n2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。\n3）x86CPU采用的是小端方式。\n\n5、主存的三个主要技术指标\n\n存储容量、存取速度和存储带宽\n\n6、什么是存取时间？什么是存取周期？哪个大？\n\n1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；\n2）存取周期：连续两次启动存储器所需要的最小间隔时间；\n3）存取周期包含存取时间；\n\n7、什么是存储器带宽？（要了解如何计算存储器带宽）\n\n单位时间内存储器存取的信息量；\n\n8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。\n\n1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；\n2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。\n\n9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。\n\n1）静态RAM：采用锁存器原理实现；\n2）动态RAM：采用电容原理实现，需要刷新。\n3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。\n\n10、只读存储器有哪几种？\n\n1）掩模ROM（MROM）：出厂后内容不能被更改。\n2）PROM：可编程只读存储器，可以进行一次性编程；\n3）EPROM：可擦除只读ROM，用紫外线照射；\n4）EEPROM：电可擦除只读ROM。\n6）FLash Memory：采用EEPROM的非易失性存储器。\n\n11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。\n存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明\n\n1）位扩展：增加存储器的字长，例如两个1K * 4位的存储芯片构成1个1K*8位的存储器；\n2）字扩展：增加存储器的字数，例如两个1K * 8位的存储芯片构成1个2K * 8位的存储器；\n通常字扩展和位扩展两种方式混合使用。\n\n12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；\n参看P94页，例4.1\n\n13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？\n\n应添加的检测位位数：2的k次方大于等于n+k+1。\n因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位\n出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1\n\n14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。\n\n15、提高访存速度的三种方式。\n\n1）采用高速元器件；\n2）采用存储层次结构：cache-主存结构；\n3）调整主存结构：包括单体多字，多体并行两种方式。\n\n16、简述单体多字的存储系统的工作原理，及其优点。\n\n1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。\n2）优点是：显著提高了存储器带宽。\n\n17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。\n\n1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。\n高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。\n2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。\n低位交叉编址能显著提高单次访存速度。\n\n19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？\n\n1）T= 4τ\n2）连续读取四个字，所需要的时间为T + （4-1）τ\n注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。\n\n20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。\n\n21、在CPU和内存之间引入cache的原因。\n\n1）避免cpu空等I/O访存；\n2）缓解CPU和主存速度不匹配的问题。\n\n22、什么是程序的局部性原理。\n\nCPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。\n\n23、Cache命中率、平均访问时间以及访问效率的计算。\n\n24、Cache写操作有哪两种方式？\n\n1）写直达法：写操作既写入Cache又写入主存；\n2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。\n\n25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？\n\n直接映射、全相联映射、组相联映射。\n\n26、直接映射的优缺点？\n\n优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；\n\n27、全相联映射的优缺点？\n\n优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。\n\n28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。\n\n29、Cache常用的替换算法有哪些？哪个命中率最高？\n\n1）先进先出、近期最少使用算法和随机替换算法；\n2）命中率最高的是近期最少使用算法；\n\n30、磁盘的三地址结构包括哪些？\n\n柱面、磁头号和扇区号\n\n## 第五章 输入输出系统\n1、I/O系统的发展大致可以分为哪4个阶段？\n\n1）早期（分散连接、串行工作、程序查询）\n2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）\n3）通道阶段（通道是具有特殊功能的处理器）\n4）I/O处理机阶段\nI/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；\n\n2、I/O设备编址有哪两种方式？各有什么优缺点？\n\n1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。\n2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。\n\n3、I/O设备与主机的联络方式有哪几种？\n\nI/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：\n1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。\n2）应答信号：通过应答信号来进行交互；\n3）同步时标：采用统一的时钟信号。\n\n4、I/O总线包括哪四类？\n\n数据线、设备选择线、状态线、命令线\n\n5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。\nD=0，B=0：暂停状态；\nD=0，B=1：准备状态\nD=1，B=0：就绪状态\n\n6、程序查询的基本工作原理。\n\ncpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。\n\n7、什么是中断？\n\n计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。\n\n8、中断服务程序的基本流程包括哪四部分？\n\n1）保护现场\n2）中断服务\n3）恢复现场\n4）中断返回\n\n9、什么是单重中断和多重中断？\n\n1）单重中断：不允许中断现行的中断服务程序；\n2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；\n\n10、CPU响应中断的时机？\n\n当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。\n\n11、什么是DMA？\n\nDMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。\n\n12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？\n\n1）停止CPU访问主存：DMA访存优先级高；\n2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；\n3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。\n\n13、DMA工作过程包括哪三部分？\n\n1）预处理\n2）数据传输\n2）后处理\n\n## 第六章 计算机的运算方法\n1、掌握有符号数的原码计算方法，以及通过原码求真值；\n\n2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。\n\n1）通过原码求补码：符号位不变，各位取反，末位加1；\n2）通过补码求原码：符号位不变，各位取反，末位加1；\n\n3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）\n\n4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？\n\n补码能表示的真值范围为-128~+127（参见补码定义\n）\n5、掌握求反码以及移码的方法。\n\n6、什么是定点表示？什么是浮点表示？\n\n１）定点表示：小数点固定在某一位置的数为定点数；\n２）浮点表示：小数点位置可以浮动的数。\n\n7、浮点数在机器中的表示形式，由哪几部分组成？\n\n由尾数、数符、阶码、阶符四部分组成。\n\n8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。\n\n9、IEEE754标准规定的浮点数由哪几部分组成？\n\n由数符、阶码（含阶符）以及尾数组成。\n\n10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？\n\n阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。\n\n11、float占多少位？double占多少位？\n\nfloat为短实数，占32位，其中阶码8位，尾数23位。\ndouble为长实数，占64位，其中阶码占11位，尾数为52位。\n\n12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。\n\n13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于源码，左移或右移时，低位或高位均添补0；\n对于补码：左移时，低位添补0，右移时高位添补1\n对于反码：左移或右移时，低位或高位均添补1；\n\n14、什么是逻辑移位？\n\n逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。\n\n15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？\n\n1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。\n2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。\n3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。\n\n16、定点乘法运算可以使用加法和移位来实现吗？\n\n可以。\n\n17、浮点加减运算基本按照哪几步来进行？\n\n1）对阶：使小数点对齐；\n2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；\n3）规格化：尾数规格化；\n4）舍入：尾数右规时，丢失数值位；\n5）溢出判断：判断结果是否溢出。\n\n18、如何判断浮点运算结果是否溢出？\n\n阶码是否超出了其表示范围。（使用2个符号位判溢出）\n\n\n## 第七章 指令系统\n**1、什么是机器指令？什么是指令系统？**\n1）机器指令：每一条机器语言的语句；\n2）指令系统：全部机器指令的集合。\n\n**2、一条指令包含哪两个主要部分？请简要说明各部分作用。**\n1）操作码：指明指令要完成的操作；\n2）地址码：指明指令要操作的数据或数据来源；\n\n**3、操作码长度有固定长度和可变长度两种，各自有什么优点？**\n1）固定长度：便于硬件设计，指令译码时间短；\n2）可变长度：压缩了操作码平均长度；\n\n**4、指令中地址码中的地址可以是哪些设备的地址？**\n可以是主存地址、寄存器地址或I/O设备的地址；\n\n**5、指令中地址的个数可以有几个？**\n四地址、三地址、二地址、一地址以及零地址。\n\n**6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？**\n1）四地址：访存4次；\n2）三地址：访存4次；\n3）两地址：访存3次；\n4）一地址：访存2次；\n\n**7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？**\n1）扩大指令字的寻址范围；\n2）缩短指令字长；\n3）减少访存次数\n\n**8、数据在存储器中存储时，为什么要按照边界对齐？**\n减少访存次数。\n\n**9、寻址方式包括哪两类？**\n1）指令寻址：下一条将要执行的指令的指令地址；\n2）数据寻址：确定本指令的操作数地址。\n\n**10、什么是形式地址？什么是有效地址？**\n1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；\n2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；\n\n**11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。**\n立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址\n\n**12、什么是RISC？什么是CISC？**\nRISC：精简指令集；\nCISC：复杂指令集；\n","source":"_posts/linux学习/计算机组成原理.md","raw":"\n---\ntitle: 个人计算机\ndate: 2019-07-28 11:05:31\ntags:\ncategories: linux\n---\n# 计算机组成原理总结\n## 计算机系统简介\n计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。\n**系统软件**:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。\n**应用软件**:根据用户任务需求所编制的各种程序。\n## 计算机系统的层次结构\n通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 **\n或 **高级语言机器 → → 机器语言机器 **\n\n通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。\n**编译程序**：一次全部翻译成机器语言程序，然后交由机器执行。\n**解释程序**：边翻译，边执行。\n\n**高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统**\n\n**高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统**\n\n## 第1章：计算机系统概论\n**1、计算机系统由哪两部分组成？计算机系统性能取决于什么？**\n\n计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。\n1）计算机系统由硬件和软件两部分组成。\n2）计算机系统性能由硬件和软件共同决定。\n\n**2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？**\n\n1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器\n2）微程序机器和传统机器是物理机，其他是虚拟机。\n\n**3、在计算机系统结构中，什么是翻译？什么是解释？**\n\n1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；\n2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。\n\n**4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。**\n\n1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；\n2）计算机组成是指如何实现计算机体系结构所体现出来的属性；\n3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。\n\n**5、冯诺依曼机器的主要特点？**\n\n1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；\n2）指令和数据存储在存储器中，并可以按地址访问；\n3）指令和数据均以二进制表示；\n4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；\n5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；\n6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）\n\n\n**7、什么是存储单元、存储字、存储字长、存储体？**\n\n存储单元：存储一个存储字并具有特定存储地址的存储单位；\n存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。\n存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；\n存储体：由多个存储单元构成的存储器件。\n\n**8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？**\n\n1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。\n2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。\n3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。\n\n**9、什么是机器字长，什么是存储字长长？**\n\n机器字长：CPU一次能够处理的二进制数据的位数。\n存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。\n\n**10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？**\n\n1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；\n2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；\n3）存储器的最大容量为64K * 2B = 128K Byte\n\n## 第三章 系统总线\n**1、为什么要使用总线？**\n\n在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。\n因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。\n\n**2、总线的两大基本特征是什么？**\n\n1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。\n2）分时：同一时刻，总线上只能传输一个部件发送的信息；\n\n**3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？**\n\n1）分成数据总线、地址总线以及控制总线。\n2）数据总线：各个功能部件之间传送数据信息，双向传输；\n3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出\n4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。\n\n**3、什么是总线宽度、总线带宽、总线复用、信号线数？**\n\n1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；\n2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。\n3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；\n4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。\n\n**4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？**\n\n33 * （32/8） = 132 MB/s\n\n**5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）**\n\n在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。\n但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。\n因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。\n例如CPU和Cache之间、I/O设备之间等。\n\n**6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？**\n\n1）链式查询、计数器定时查询、以及独立请求。\n2）链式查询的优先级不能改变，离控制器最近的优先级最高。\n\n\n**8、什么是总线周期，分为哪几个阶段？**\n\n1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；\n2）分为四个阶段：\n申请分配阶段：申请总线\n寻址阶段：发出地址及有关命令\n传数阶段：进行数据交换\n结束：从总线上撤除信号，让出总线\n\n**9、什么是总线通信控制，总线通信控制有哪几种？**\n\n1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；\n2）同步通信、异步通信、半同步通信、分离式通信\n\n**10、什么是同步通信？其优点和缺点？**\n\n１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。\n２）优点：速度快，各个模块间配合简单\n３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。\n\n**11、什么是异步通信？异步通信分为哪几种类型？**\n\n1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）\n2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）\n\n**12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）**\n\n波特率：单位时间内传送的二进制数据数据的位数，单位bps\n比特率：单位时间内传送的有效的二进制位数。\n\n**13、异步通信时，常规需要设置的参数有哪些？**\n\n波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）\n\n**14、简述半同步通信的基本原理。**\n\n半同步通信结合同步通信和异步通信。\n同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；\n异步通信：如果从模块没有准备好，增加一个“等待响应”信号。\n\n**15、简述分离式通信的基本原理。**\n\n主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。\n但是，这种方式控制比较复杂。\n\n**16、奇偶校验可以纠错吗？汉明码可以纠错码？**\n\n1）奇偶校验只能检错，不能纠错。\n2）汉明码可以纠错。\n\n## 第四章 存储器\n\n1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？\n\n1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；\n2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；\n3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。\n\n2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？\n\n1）速度、容量、位价格。\n2）寄存器速度最快，主存最便宜。\n\n3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？\n\n1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。\n2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。\n（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）\n\n4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？\n\n1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；\n2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。\n3）x86CPU采用的是小端方式。\n\n5、主存的三个主要技术指标\n\n存储容量、存取速度和存储带宽\n\n6、什么是存取时间？什么是存取周期？哪个大？\n\n1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；\n2）存取周期：连续两次启动存储器所需要的最小间隔时间；\n3）存取周期包含存取时间；\n\n7、什么是存储器带宽？（要了解如何计算存储器带宽）\n\n单位时间内存储器存取的信息量；\n\n8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。\n\n1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；\n2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。\n\n9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。\n\n1）静态RAM：采用锁存器原理实现；\n2）动态RAM：采用电容原理实现，需要刷新。\n3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。\n\n10、只读存储器有哪几种？\n\n1）掩模ROM（MROM）：出厂后内容不能被更改。\n2）PROM：可编程只读存储器，可以进行一次性编程；\n3）EPROM：可擦除只读ROM，用紫外线照射；\n4）EEPROM：电可擦除只读ROM。\n6）FLash Memory：采用EEPROM的非易失性存储器。\n\n11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。\n存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明\n\n1）位扩展：增加存储器的字长，例如两个1K * 4位的存储芯片构成1个1K*8位的存储器；\n2）字扩展：增加存储器的字数，例如两个1K * 8位的存储芯片构成1个2K * 8位的存储器；\n通常字扩展和位扩展两种方式混合使用。\n\n12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；\n参看P94页，例4.1\n\n13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？\n\n应添加的检测位位数：2的k次方大于等于n+k+1。\n因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位\n出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1\n\n14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。\n\n15、提高访存速度的三种方式。\n\n1）采用高速元器件；\n2）采用存储层次结构：cache-主存结构；\n3）调整主存结构：包括单体多字，多体并行两种方式。\n\n16、简述单体多字的存储系统的工作原理，及其优点。\n\n1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。\n2）优点是：显著提高了存储器带宽。\n\n17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。\n\n1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。\n高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。\n2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。\n低位交叉编址能显著提高单次访存速度。\n\n19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？\n\n1）T= 4τ\n2）连续读取四个字，所需要的时间为T + （4-1）τ\n注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。\n\n20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。\n\n21、在CPU和内存之间引入cache的原因。\n\n1）避免cpu空等I/O访存；\n2）缓解CPU和主存速度不匹配的问题。\n\n22、什么是程序的局部性原理。\n\nCPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。\n\n23、Cache命中率、平均访问时间以及访问效率的计算。\n\n24、Cache写操作有哪两种方式？\n\n1）写直达法：写操作既写入Cache又写入主存；\n2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。\n\n25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？\n\n直接映射、全相联映射、组相联映射。\n\n26、直接映射的优缺点？\n\n优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；\n\n27、全相联映射的优缺点？\n\n优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。\n\n28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。\n\n29、Cache常用的替换算法有哪些？哪个命中率最高？\n\n1）先进先出、近期最少使用算法和随机替换算法；\n2）命中率最高的是近期最少使用算法；\n\n30、磁盘的三地址结构包括哪些？\n\n柱面、磁头号和扇区号\n\n## 第五章 输入输出系统\n1、I/O系统的发展大致可以分为哪4个阶段？\n\n1）早期（分散连接、串行工作、程序查询）\n2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）\n3）通道阶段（通道是具有特殊功能的处理器）\n4）I/O处理机阶段\nI/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；\n\n2、I/O设备编址有哪两种方式？各有什么优缺点？\n\n1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。\n2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。\n\n3、I/O设备与主机的联络方式有哪几种？\n\nI/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：\n1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。\n2）应答信号：通过应答信号来进行交互；\n3）同步时标：采用统一的时钟信号。\n\n4、I/O总线包括哪四类？\n\n数据线、设备选择线、状态线、命令线\n\n5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。\nD=0，B=0：暂停状态；\nD=0，B=1：准备状态\nD=1，B=0：就绪状态\n\n6、程序查询的基本工作原理。\n\ncpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。\n\n7、什么是中断？\n\n计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。\n\n8、中断服务程序的基本流程包括哪四部分？\n\n1）保护现场\n2）中断服务\n3）恢复现场\n4）中断返回\n\n9、什么是单重中断和多重中断？\n\n1）单重中断：不允许中断现行的中断服务程序；\n2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；\n\n10、CPU响应中断的时机？\n\n当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。\n\n11、什么是DMA？\n\nDMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。\n\n12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？\n\n1）停止CPU访问主存：DMA访存优先级高；\n2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；\n3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。\n\n13、DMA工作过程包括哪三部分？\n\n1）预处理\n2）数据传输\n2）后处理\n\n## 第六章 计算机的运算方法\n1、掌握有符号数的原码计算方法，以及通过原码求真值；\n\n2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。\n\n1）通过原码求补码：符号位不变，各位取反，末位加1；\n2）通过补码求原码：符号位不变，各位取反，末位加1；\n\n3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）\n\n4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？\n\n补码能表示的真值范围为-128~+127（参见补码定义\n）\n5、掌握求反码以及移码的方法。\n\n6、什么是定点表示？什么是浮点表示？\n\n１）定点表示：小数点固定在某一位置的数为定点数；\n２）浮点表示：小数点位置可以浮动的数。\n\n7、浮点数在机器中的表示形式，由哪几部分组成？\n\n由尾数、数符、阶码、阶符四部分组成。\n\n8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。\n\n9、IEEE754标准规定的浮点数由哪几部分组成？\n\n由数符、阶码（含阶符）以及尾数组成。\n\n10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？\n\n阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。\n\n11、float占多少位？double占多少位？\n\nfloat为短实数，占32位，其中阶码8位，尾数23位。\ndouble为长实数，占64位，其中阶码占11位，尾数为52位。\n\n12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。\n\n13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？\n\n对于源码，左移或右移时，低位或高位均添补0；\n对于补码：左移时，低位添补0，右移时高位添补1\n对于反码：左移或右移时，低位或高位均添补1；\n\n14、什么是逻辑移位？\n\n逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。\n\n15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？\n\n1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。\n2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。\n3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。\n\n16、定点乘法运算可以使用加法和移位来实现吗？\n\n可以。\n\n17、浮点加减运算基本按照哪几步来进行？\n\n1）对阶：使小数点对齐；\n2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；\n3）规格化：尾数规格化；\n4）舍入：尾数右规时，丢失数值位；\n5）溢出判断：判断结果是否溢出。\n\n18、如何判断浮点运算结果是否溢出？\n\n阶码是否超出了其表示范围。（使用2个符号位判溢出）\n\n\n## 第七章 指令系统\n**1、什么是机器指令？什么是指令系统？**\n1）机器指令：每一条机器语言的语句；\n2）指令系统：全部机器指令的集合。\n\n**2、一条指令包含哪两个主要部分？请简要说明各部分作用。**\n1）操作码：指明指令要完成的操作；\n2）地址码：指明指令要操作的数据或数据来源；\n\n**3、操作码长度有固定长度和可变长度两种，各自有什么优点？**\n1）固定长度：便于硬件设计，指令译码时间短；\n2）可变长度：压缩了操作码平均长度；\n\n**4、指令中地址码中的地址可以是哪些设备的地址？**\n可以是主存地址、寄存器地址或I/O设备的地址；\n\n**5、指令中地址的个数可以有几个？**\n四地址、三地址、二地址、一地址以及零地址。\n\n**6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？**\n1）四地址：访存4次；\n2）三地址：访存4次；\n3）两地址：访存3次；\n4）一地址：访存2次；\n\n**7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？**\n1）扩大指令字的寻址范围；\n2）缩短指令字长；\n3）减少访存次数\n\n**8、数据在存储器中存储时，为什么要按照边界对齐？**\n减少访存次数。\n\n**9、寻址方式包括哪两类？**\n1）指令寻址：下一条将要执行的指令的指令地址；\n2）数据寻址：确定本指令的操作数地址。\n\n**10、什么是形式地址？什么是有效地址？**\n1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；\n2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；\n\n**11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。**\n立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址\n\n**12、什么是RISC？什么是CISC？**\nRISC：精简指令集；\nCISC：复杂指令集；\n","slug":"linux学习/计算机组成原理","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p23004itssa4ev1sq73","content":"<h1 id=\"计算机组成原理总结\"><a href=\"#计算机组成原理总结\" class=\"headerlink\" title=\"计算机组成原理总结\"></a>计算机组成原理总结</h1><h2 id=\"计算机系统简介\"><a href=\"#计算机系统简介\" class=\"headerlink\" title=\"计算机系统简介\"></a>计算机系统简介</h2><p>计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。<br><strong>系统软件</strong>:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。<br><strong>应用软件</strong>:根据用户任务需求所编制的各种程序。</p>\n<h2 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h2><p>通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 </strong><br>或 <strong>高级语言机器 → → 机器语言机器 </strong></p>\n<p>通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。<br><strong>编译程序</strong>：一次全部翻译成机器语言程序，然后交由机器执行。<br><strong>解释程序</strong>：边翻译，边执行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统</strong></p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统</strong></p>\n<h2 id=\"第1章：计算机系统概论\"><a href=\"#第1章：计算机系统概论\" class=\"headerlink\" title=\"第1章：计算机系统概论\"></a>第1章：计算机系统概论</h2><p><strong>1、计算机系统由哪两部分组成？计算机系统性能取决于什么？</strong></p>\n<p>计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。<br>1）计算机系统由硬件和软件两部分组成。<br>2）计算机系统性能由硬件和软件共同决定。</p>\n<p><strong>2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？</strong></p>\n<p>1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器<br>2）微程序机器和传统机器是物理机，其他是虚拟机。</p>\n<p><strong>3、在计算机系统结构中，什么是翻译？什么是解释？</strong></p>\n<p>1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；<br>2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。</p>\n<p><strong>4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。</strong></p>\n<p>1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；<br>2）计算机组成是指如何实现计算机体系结构所体现出来的属性；<br>3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。</p>\n<p><strong>5、冯诺依曼机器的主要特点？</strong></p>\n<p>1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；<br>2）指令和数据存储在存储器中，并可以按地址访问；<br>3）指令和数据均以二进制表示；<br>4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；<br>5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；<br>6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）</p>\n<p><strong>7、什么是存储单元、存储字、存储字长、存储体？</strong></p>\n<p>存储单元：存储一个存储字并具有特定存储地址的存储单位；<br>存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。<br>存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；<br>存储体：由多个存储单元构成的存储器件。</p>\n<p><strong>8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？</strong></p>\n<p>1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。<br>2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。<br>3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。</p>\n<p><strong>9、什么是机器字长，什么是存储字长长？</strong></p>\n<p>机器字长：CPU一次能够处理的二进制数据的位数。<br>存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。</p>\n<p><strong>10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？</strong></p>\n<p>1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；<br>2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；<br>3）存储器的最大容量为64K * 2B = 128K Byte</p>\n<h2 id=\"第三章-系统总线\"><a href=\"#第三章-系统总线\" class=\"headerlink\" title=\"第三章 系统总线\"></a>第三章 系统总线</h2><p><strong>1、为什么要使用总线？</strong></p>\n<p>在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。<br>因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。</p>\n<p><strong>2、总线的两大基本特征是什么？</strong></p>\n<p>1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。<br>2）分时：同一时刻，总线上只能传输一个部件发送的信息；</p>\n<p><strong>3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？</strong></p>\n<p>1）分成数据总线、地址总线以及控制总线。<br>2）数据总线：各个功能部件之间传送数据信息，双向传输；<br>3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出<br>4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。</p>\n<p><strong>3、什么是总线宽度、总线带宽、总线复用、信号线数？</strong></p>\n<p>1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；<br>2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。<br>3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；<br>4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。</p>\n<p><strong>4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？</strong></p>\n<p>33 * （32/8） = 132 MB/s</p>\n<p><strong>5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）</strong></p>\n<p>在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。<br>但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。<br>因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。<br>例如CPU和Cache之间、I/O设备之间等。</p>\n<p><strong>6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？</strong></p>\n<p>1）链式查询、计数器定时查询、以及独立请求。<br>2）链式查询的优先级不能改变，离控制器最近的优先级最高。</p>\n<p><strong>8、什么是总线周期，分为哪几个阶段？</strong></p>\n<p>1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；<br>2）分为四个阶段：<br>申请分配阶段：申请总线<br>寻址阶段：发出地址及有关命令<br>传数阶段：进行数据交换<br>结束：从总线上撤除信号，让出总线</p>\n<p><strong>9、什么是总线通信控制，总线通信控制有哪几种？</strong></p>\n<p>1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；<br>2）同步通信、异步通信、半同步通信、分离式通信</p>\n<p><strong>10、什么是同步通信？其优点和缺点？</strong></p>\n<p>１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。<br>２）优点：速度快，各个模块间配合简单<br>３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。</p>\n<p><strong>11、什么是异步通信？异步通信分为哪几种类型？</strong></p>\n<p>1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）<br>2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）</p>\n<p><strong>12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）</strong></p>\n<p>波特率：单位时间内传送的二进制数据数据的位数，单位bps<br>比特率：单位时间内传送的有效的二进制位数。</p>\n<p><strong>13、异步通信时，常规需要设置的参数有哪些？</strong></p>\n<p>波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）</p>\n<p><strong>14、简述半同步通信的基本原理。</strong></p>\n<p>半同步通信结合同步通信和异步通信。<br>同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；<br>异步通信：如果从模块没有准备好，增加一个“等待响应”信号。</p>\n<p><strong>15、简述分离式通信的基本原理。</strong></p>\n<p>主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。<br>但是，这种方式控制比较复杂。</p>\n<p><strong>16、奇偶校验可以纠错吗？汉明码可以纠错码？</strong></p>\n<p>1）奇偶校验只能检错，不能纠错。<br>2）汉明码可以纠错。</p>\n<h2 id=\"第四章-存储器\"><a href=\"#第四章-存储器\" class=\"headerlink\" title=\"第四章 存储器\"></a>第四章 存储器</h2><p>1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？</p>\n<p>1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；<br>2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；<br>3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。</p>\n<p>2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？</p>\n<p>1）速度、容量、位价格。<br>2）寄存器速度最快，主存最便宜。</p>\n<p>3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？</p>\n<p>1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。<br>2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。<br>（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）</p>\n<p>4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？</p>\n<p>1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；<br>2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。<br>3）x86CPU采用的是小端方式。</p>\n<p>5、主存的三个主要技术指标</p>\n<p>存储容量、存取速度和存储带宽</p>\n<p>6、什么是存取时间？什么是存取周期？哪个大？</p>\n<p>1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；<br>2）存取周期：连续两次启动存储器所需要的最小间隔时间；<br>3）存取周期包含存取时间；</p>\n<p>7、什么是存储器带宽？（要了解如何计算存储器带宽）</p>\n<p>单位时间内存储器存取的信息量；</p>\n<p>8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。</p>\n<p>1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；<br>2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。</p>\n<p>9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。</p>\n<p>1）静态RAM：采用锁存器原理实现；<br>2）动态RAM：采用电容原理实现，需要刷新。<br>3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。</p>\n<p>10、只读存储器有哪几种？</p>\n<p>1）掩模ROM（MROM）：出厂后内容不能被更改。<br>2）PROM：可编程只读存储器，可以进行一次性编程；<br>3）EPROM：可擦除只读ROM，用紫外线照射；<br>4）EEPROM：电可擦除只读ROM。<br>6）FLash Memory：采用EEPROM的非易失性存储器。</p>\n<p>11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。<br>存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明</p>\n<p>1）位扩展：增加存储器的字长，例如两个1K <em> 4位的存储芯片构成1个1K</em>8位的存储器；<br>2）字扩展：增加存储器的字数，例如两个1K <em> 8位的存储芯片构成1个2K </em> 8位的存储器；<br>通常字扩展和位扩展两种方式混合使用。</p>\n<p>12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；<br>参看P94页，例4.1</p>\n<p>13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？</p>\n<p>应添加的检测位位数：2的k次方大于等于n+k+1。<br>因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位<br>出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1</p>\n<p>14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。</p>\n<p>15、提高访存速度的三种方式。</p>\n<p>1）采用高速元器件；<br>2）采用存储层次结构：cache-主存结构；<br>3）调整主存结构：包括单体多字，多体并行两种方式。</p>\n<p>16、简述单体多字的存储系统的工作原理，及其优点。</p>\n<p>1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。<br>2）优点是：显著提高了存储器带宽。</p>\n<p>17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。</p>\n<p>1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。<br>高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。<br>2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。<br>低位交叉编址能显著提高单次访存速度。</p>\n<p>19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？</p>\n<p>1）T= 4τ<br>2）连续读取四个字，所需要的时间为T + （4-1）τ<br>注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。</p>\n<p>20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。</p>\n<p>21、在CPU和内存之间引入cache的原因。</p>\n<p>1）避免cpu空等I/O访存；<br>2）缓解CPU和主存速度不匹配的问题。</p>\n<p>22、什么是程序的局部性原理。</p>\n<p>CPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。</p>\n<p>23、Cache命中率、平均访问时间以及访问效率的计算。</p>\n<p>24、Cache写操作有哪两种方式？</p>\n<p>1）写直达法：写操作既写入Cache又写入主存；<br>2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。</p>\n<p>25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？</p>\n<p>直接映射、全相联映射、组相联映射。</p>\n<p>26、直接映射的优缺点？</p>\n<p>优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；</p>\n<p>27、全相联映射的优缺点？</p>\n<p>优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。</p>\n<p>28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。</p>\n<p>29、Cache常用的替换算法有哪些？哪个命中率最高？</p>\n<p>1）先进先出、近期最少使用算法和随机替换算法；<br>2）命中率最高的是近期最少使用算法；</p>\n<p>30、磁盘的三地址结构包括哪些？</p>\n<p>柱面、磁头号和扇区号</p>\n<h2 id=\"第五章-输入输出系统\"><a href=\"#第五章-输入输出系统\" class=\"headerlink\" title=\"第五章 输入输出系统\"></a>第五章 输入输出系统</h2><p>1、I/O系统的发展大致可以分为哪4个阶段？</p>\n<p>1）早期（分散连接、串行工作、程序查询）<br>2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）<br>3）通道阶段（通道是具有特殊功能的处理器）<br>4）I/O处理机阶段<br>I/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；</p>\n<p>2、I/O设备编址有哪两种方式？各有什么优缺点？</p>\n<p>1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。<br>2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。</p>\n<p>3、I/O设备与主机的联络方式有哪几种？</p>\n<p>I/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：<br>1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。<br>2）应答信号：通过应答信号来进行交互；<br>3）同步时标：采用统一的时钟信号。</p>\n<p>4、I/O总线包括哪四类？</p>\n<p>数据线、设备选择线、状态线、命令线</p>\n<p>5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。<br>D=0，B=0：暂停状态；<br>D=0，B=1：准备状态<br>D=1，B=0：就绪状态</p>\n<p>6、程序查询的基本工作原理。</p>\n<p>cpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。</p>\n<p>7、什么是中断？</p>\n<p>计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。</p>\n<p>8、中断服务程序的基本流程包括哪四部分？</p>\n<p>1）保护现场<br>2）中断服务<br>3）恢复现场<br>4）中断返回</p>\n<p>9、什么是单重中断和多重中断？</p>\n<p>1）单重中断：不允许中断现行的中断服务程序；<br>2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；</p>\n<p>10、CPU响应中断的时机？</p>\n<p>当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。</p>\n<p>11、什么是DMA？</p>\n<p>DMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。</p>\n<p>12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？</p>\n<p>1）停止CPU访问主存：DMA访存优先级高；<br>2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；<br>3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。</p>\n<p>13、DMA工作过程包括哪三部分？</p>\n<p>1）预处理<br>2）数据传输<br>2）后处理</p>\n<h2 id=\"第六章-计算机的运算方法\"><a href=\"#第六章-计算机的运算方法\" class=\"headerlink\" title=\"第六章 计算机的运算方法\"></a>第六章 计算机的运算方法</h2><p>1、掌握有符号数的原码计算方法，以及通过原码求真值；</p>\n<p>2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。</p>\n<p>1）通过原码求补码：符号位不变，各位取反，末位加1；<br>2）通过补码求原码：符号位不变，各位取反，末位加1；</p>\n<p>3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）</p>\n<p>4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？</p>\n<p>补码能表示的真值范围为-128~+127（参见补码定义<br>）<br>5、掌握求反码以及移码的方法。</p>\n<p>6、什么是定点表示？什么是浮点表示？</p>\n<p>１）定点表示：小数点固定在某一位置的数为定点数；<br>２）浮点表示：小数点位置可以浮动的数。</p>\n<p>7、浮点数在机器中的表示形式，由哪几部分组成？</p>\n<p>由尾数、数符、阶码、阶符四部分组成。</p>\n<p>8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。</p>\n<p>9、IEEE754标准规定的浮点数由哪几部分组成？</p>\n<p>由数符、阶码（含阶符）以及尾数组成。</p>\n<p>10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？</p>\n<p>阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。</p>\n<p>11、float占多少位？double占多少位？</p>\n<p>float为短实数，占32位，其中阶码8位，尾数23位。<br>double为长实数，占64位，其中阶码占11位，尾数为52位。</p>\n<p>12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。</p>\n<p>13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于源码，左移或右移时，低位或高位均添补0；<br>对于补码：左移时，低位添补0，右移时高位添补1<br>对于反码：左移或右移时，低位或高位均添补1；</p>\n<p>14、什么是逻辑移位？</p>\n<p>逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。</p>\n<p>15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？</p>\n<p>1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。<br>2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。<br>3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。</p>\n<p>16、定点乘法运算可以使用加法和移位来实现吗？</p>\n<p>可以。</p>\n<p>17、浮点加减运算基本按照哪几步来进行？</p>\n<p>1）对阶：使小数点对齐；<br>2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；<br>3）规格化：尾数规格化；<br>4）舍入：尾数右规时，丢失数值位；<br>5）溢出判断：判断结果是否溢出。</p>\n<p>18、如何判断浮点运算结果是否溢出？</p>\n<p>阶码是否超出了其表示范围。（使用2个符号位判溢出）</p>\n<h2 id=\"第七章-指令系统\"><a href=\"#第七章-指令系统\" class=\"headerlink\" title=\"第七章 指令系统\"></a>第七章 指令系统</h2><p><strong>1、什么是机器指令？什么是指令系统？</strong><br>1）机器指令：每一条机器语言的语句；<br>2）指令系统：全部机器指令的集合。</p>\n<p><strong>2、一条指令包含哪两个主要部分？请简要说明各部分作用。</strong><br>1）操作码：指明指令要完成的操作；<br>2）地址码：指明指令要操作的数据或数据来源；</p>\n<p><strong>3、操作码长度有固定长度和可变长度两种，各自有什么优点？</strong><br>1）固定长度：便于硬件设计，指令译码时间短；<br>2）可变长度：压缩了操作码平均长度；</p>\n<p><strong>4、指令中地址码中的地址可以是哪些设备的地址？</strong><br>可以是主存地址、寄存器地址或I/O设备的地址；</p>\n<p><strong>5、指令中地址的个数可以有几个？</strong><br>四地址、三地址、二地址、一地址以及零地址。</p>\n<p><strong>6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？</strong><br>1）四地址：访存4次；<br>2）三地址：访存4次；<br>3）两地址：访存3次；<br>4）一地址：访存2次；</p>\n<p><strong>7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？</strong><br>1）扩大指令字的寻址范围；<br>2）缩短指令字长；<br>3）减少访存次数</p>\n<p><strong>8、数据在存储器中存储时，为什么要按照边界对齐？</strong><br>减少访存次数。</p>\n<p><strong>9、寻址方式包括哪两类？</strong><br>1）指令寻址：下一条将要执行的指令的指令地址；<br>2）数据寻址：确定本指令的操作数地址。</p>\n<p><strong>10、什么是形式地址？什么是有效地址？</strong><br>1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；<br>2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；</p>\n<p><strong>11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。</strong><br>立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址</p>\n<p><strong>12、什么是RISC？什么是CISC？</strong><br>RISC：精简指令集；<br>CISC：复杂指令集；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机组成原理总结\"><a href=\"#计算机组成原理总结\" class=\"headerlink\" title=\"计算机组成原理总结\"></a>计算机组成原理总结</h1><h2 id=\"计算机系统简介\"><a href=\"#计算机系统简介\" class=\"headerlink\" title=\"计算机系统简介\"></a>计算机系统简介</h2><p>计算机系统由“软件“及”硬件“组成，软件通常分为系统软件和应用软件。<br><strong>系统软件</strong>:用来管理整个计算机系统，监视服务，使系统资源得到合理调度，高效运行。<br><strong>应用软件</strong>:根据用户任务需求所编制的各种程序。</p>\n<h2 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h2><p>通常用户用高级语言编写程序，然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能识别的机器语言程序，然后交由机器运行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 </strong><br>或 <strong>高级语言机器 → → 机器语言机器 </strong></p>\n<p>通常，将高级语言程序翻译成机器语言程序的软件成为翻译程序。翻译程序分为：编译程序，解释程序。<br><strong>编译程序</strong>：一次全部翻译成机器语言程序，然后交由机器执行。<br><strong>解释程序</strong>：边翻译，边执行。</p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →机器语言机器 → →微指令系统</strong></p>\n<p><strong>高级语言机器 → → 汇编语言机器 → →操作系统机器→ →机器语言机器 → →微指令系统</strong></p>\n<h2 id=\"第1章：计算机系统概论\"><a href=\"#第1章：计算机系统概论\" class=\"headerlink\" title=\"第1章：计算机系统概论\"></a>第1章：计算机系统概论</h2><p><strong>1、计算机系统由哪两部分组成？计算机系统性能取决于什么？</strong></p>\n<p>计算机系统是由“硬件”和“软件”组成。衡量一台计算机性能的优劣是根据多项技术指标综合确定的，既包括硬件的各种性能指标，又包括软件的各种功能。<br>1）计算机系统由硬件和软件两部分组成。<br>2）计算机系统性能由硬件和软件共同决定。</p>\n<p><strong>2、计算机系统5层层次结构从下到上由哪五层组成？哪些是物理机，哪些是虚拟机？</strong></p>\n<p>1）微程序机器、传统机器、操作系统机器、汇编语言机器、高级语言机器<br>2）微程序机器和传统机器是物理机，其他是虚拟机。</p>\n<p><strong>3、在计算机系统结构中，什么是翻译？什么是解释？</strong></p>\n<p>1）翻译：将一种语言编写的程序全部翻译成另一种语言，然后再执行；<br>2）解释：将一种语言编写的程序的一条语句翻译成另一种语言的一条或多条语句，然后执行，执行完这条语言后，再解释下一条。</p>\n<p><strong>4、什么是计算机体系结构？什么是计算机组成？以乘法指令为例说明二者区别。</strong></p>\n<p>1）计算机体系结构是指那些能够被程序员看到的计算机的属性。如指令集、数据类型等；<br>2）计算机组成是指如何实现计算机体系结构所体现出来的属性；<br>3）以乘法指令为例，计算机是否有乘法指令，属于体系结构的问题。乘法指令是采用专用的乘法器，还是使用加法器和移位器构成，属于计算机组成的问题。</p>\n<p><strong>5、冯诺依曼机器的主要特点？</strong></p>\n<p>1）计算机由运算器、存储器、控制器、输入设备和输出设备五大部分组成；<br>2）指令和数据存储在存储器中，并可以按地址访问；<br>3）指令和数据均以二进制表示；<br>4）指令由操作码和地址码构成，操作码指明操作的性质，地址码表示操作数在存储器中的位置；<br>5）指令在存储器内按顺序存放，通常按自动的顺序取出执行；<br>6）机器以运算器为中心，I/O设备与存储器交换数据也要通过运算器。（因此，后来有了以存储器为中心的计算机结构）</p>\n<p><strong>7、什么是存储单元、存储字、存储字长、存储体？</strong></p>\n<p>存储单元：存储一个存储字并具有特定存储地址的存储单位；<br>存储字：一个存储单元中存放的所有的二进制数据，按照某个地址访问某个存储单元获取的二进制数据。<br>存储字长：存储字中二进制数据的位数，即按照某个地址访问某个存储单元获取的二进制数据的位数；<br>存储体：由多个存储单元构成的存储器件。</p>\n<p><strong>8、主存储器中，什么是MAR，什么是MDR，存储器的最大容量由什么决定？</strong></p>\n<p>1）MAR：存储地址寄存器，保存需要访问的存储单元地址。反映存储单元的个数。<br>2）MDR：存储数据寄存器，缓存读出/写入存储单元的数据。反映存储字长。<br>3）存储器的最大容量由MAR寄存器的位数和MDR寄存器的位数决定。</p>\n<p><strong>9、什么是机器字长，什么是存储字长长？</strong></p>\n<p>机器字长：CPU一次能够处理的二进制数据的位数。<br>存储字长：按照某个地址访问某个存储单元获取的二进制数据的位数。</p>\n<p><strong>10、假设MAR寄存器的位数为16位，MDR寄存器的位数为16位，存储器的最大容量是多少？</strong></p>\n<p>1）MAR寄存器的位数为16位，能表示的地址个数为2的16次方，为64K；<br>2）MDR寄存器的位数为16位，说明存储字长为16位，也即2个字节；<br>3）存储器的最大容量为64K * 2B = 128K Byte</p>\n<h2 id=\"第三章-系统总线\"><a href=\"#第三章-系统总线\" class=\"headerlink\" title=\"第三章 系统总线\"></a>第三章 系统总线</h2><p><strong>1、为什么要使用总线？</strong></p>\n<p>在冯诺依曼结构中，各个部件之间均有单独连线，不仅线多，而且导致扩展I/O设备很不容易。即扩展一个I/O设备，需要连接很多线。<br>因此，引入了总线连接方式，将多个设备连接在同一组总线上，构成设备之间的公共传输通道。</p>\n<p><strong>2、总线的两大基本特征是什么？</strong></p>\n<p>1）共享：多个部件连接在同一组总线上，各个部件之间都通过该总线进行数据交换。<br>2）分时：同一时刻，总线上只能传输一个部件发送的信息；</p>\n<p><strong>3、系统总线按照传输信息的不同，分成哪几类？是单向的，还是双向的？</strong></p>\n<p>1）分成数据总线、地址总线以及控制总线。<br>2）数据总线：各个功能部件之间传送数据信息，双向传输；<br>3）地址总线：用来指明数据总线上，源数据或目的数据所在的主存单元的地址。单向：由CPU发出<br>4）控制总线：用来发送各种控制信号。对于控制总线中的单根线，是单向的，即只能由一个部件发向另一个部件。而一组控制总线中，有输入也有输出，因此，控制总线也可以看成是双向的。</p>\n<p><strong>3、什么是总线宽度、总线带宽、总线复用、信号线数？</strong></p>\n<p>1）总线宽度：数据总线的根数，一般是8的倍数。是衡量计算机系统性能的重要指标；<br>2）总线带宽：即总线数据传输速率，总线上每秒能够传输的最大字节量。<br>3）总线复用：一条信号线上分时传送两种信号。例如数据总线和地址总线的分时复用；<br>4）信号线数：地址总线、数据总线和控制总线三种总线的线数之和。</p>\n<p><strong>4、假设总线的工作频率为33MHz，总线宽度为32位，则它最大的传输速率是多少？</strong></p>\n<p>33 * （32/8） = 132 MB/s</p>\n<p><strong>5、简要说明单总线结构的概念及缺点？（现代计算机为什么要采用多总线结构？）</strong></p>\n<p>在单总线结构中，所有的部件（CPU、主存、I/O设备）都连接在一组总线上。<br>但所有的信息传送都要通过这组总线，同时只能有一个部件向总线上发送信息，导致总线成为系统的瓶颈。<br>因此，发展出来了多总线结构，其基本思想均是将速度相近的设备挂接在同一组总线上，总线之间通过总线控制器相连。<br>例如CPU和Cache之间、I/O设备之间等。</p>\n<p><strong>6、集中式总线判优控制有哪三种方式，哪种方式的优先级不能改变？</strong></p>\n<p>1）链式查询、计数器定时查询、以及独立请求。<br>2）链式查询的优先级不能改变，离控制器最近的优先级最高。</p>\n<p><strong>8、什么是总线周期，分为哪几个阶段？</strong></p>\n<p>1）总线周期：总线上两个部件完成一次完整且可靠的数据传输时间；<br>2）分为四个阶段：<br>申请分配阶段：申请总线<br>寻址阶段：发出地址及有关命令<br>传数阶段：进行数据交换<br>结束：从总线上撤除信号，让出总线</p>\n<p><strong>9、什么是总线通信控制，总线通信控制有哪几种？</strong></p>\n<p>1）总线通信控制：解决通信双方如何获知传输开始和传输结束，以及如何协调配合；<br>2）同步通信、异步通信、半同步通信、分离式通信</p>\n<p><strong>10、什么是同步通信？其优点和缺点？</strong></p>\n<p>１）同步通信：总线上各个部件由统一的时钟信号控制；在总线周期中，每个时钟周期各个部件如何动作都有明确的规定。<br>２）优点：速度快，各个模块间配合简单<br>３）缺点：以总线上最慢的部件来设计公共时钟，影响总线效率。</p>\n<p><strong>11、什么是异步通信？异步通信分为哪几种类型？</strong></p>\n<p>1）异步通信：总线上各部件没有统一的时钟标准，采用应答式通信；（主模块发出请求后，一直等到从模块反馈回来应答信号之后才开始通信）<br>2）不互锁、半互锁、全互锁。（需要了解各种方式的含义）</p>\n<p><strong>12、什么是波特率？什么是比特率？（需要掌握如何计算波特率、比特率）</strong></p>\n<p>波特率：单位时间内传送的二进制数据数据的位数，单位bps<br>比特率：单位时间内传送的有效的二进制位数。</p>\n<p><strong>13、异步通信时，常规需要设置的参数有哪些？</strong></p>\n<p>波特率、停止位（1/2/1.5）、校验位（奇校验、偶校验、无校验）</p>\n<p><strong>14、简述半同步通信的基本原理。</strong></p>\n<p>半同步通信结合同步通信和异步通信。<br>同步通信：采用统一的时钟，规定了在一定的时钟周期干什么事情；<br>异步通信：如果从模块没有准备好，增加一个“等待响应”信号。</p>\n<p><strong>15、简述分离式通信的基本原理。</strong></p>\n<p>主模块发出地址和命令之后，放弃总线，在从模块准备数据期间，使得总线可以被其他设备所用。提高总线利用率。<br>但是，这种方式控制比较复杂。</p>\n<p><strong>16、奇偶校验可以纠错吗？汉明码可以纠错码？</strong></p>\n<p>1）奇偶校验只能检错，不能纠错。<br>2）汉明码可以纠错。</p>\n<h2 id=\"第四章-存储器\"><a href=\"#第四章-存储器\" class=\"headerlink\" title=\"第四章 存储器\"></a>第四章 存储器</h2><p>1、存储器按存取方式，可以分成哪四类？哪些属于随机访问存储器，哪些属于串行访问存储器？</p>\n<p>1）可以分为随机存储器、只读存储器、顺序存储器和直接存储器；<br>2）随机存储器和只读存储器属于随机存储器，即存取时间与物理地址无关；<br>3）顺序存储器（典型的如磁带）和直接存储器（典型的如磁盘）属于串行存储器，即存取时间与物理地址有关。</p>\n<p>2、衡量存储器使用哪三个指标？寄存器、缓存、主存中，哪个速度最快？哪个最便宜？</p>\n<p>1）速度、容量、位价格。<br>2）寄存器速度最快，主存最便宜。</p>\n<p>3、常见的存储系统层次结构有哪两种？透明性如何？各自用来解决什么问题的？</p>\n<p>1）缓存-主存层次：用来缓解CPU和主存速度不匹配的问题，由硬件来完成，对所有的程序员完全透明。<br>2）主存-辅存层次：用来解决主存容量不够的问题，由操作系统和硬件共同完成，对应用程序设计者透明，对系统程序设计者不透明。<br>（现在一般存储器都即能按字访问，也能按照字节访问，因此，存储器编址时，每个字节都有一个独立的地址。）</p>\n<p>4、字在存储单元中有两种存储方式，大端方式和小端方式。各是什么含义？x86采用的是哪种存储方式？</p>\n<p>1）大端方式：字的低位存在内存的高地址中，而字的高位存在内存的低地址中；<br>2）小端方式：字的低位存在内存的低地址中，而字的高位存在内存的高地址中。<br>3）x86CPU采用的是小端方式。</p>\n<p>5、主存的三个主要技术指标</p>\n<p>存储容量、存取速度和存储带宽</p>\n<p>6、什么是存取时间？什么是存取周期？哪个大？</p>\n<p>1）存取时间：启动一次存储器完成本次操作（读或写）所需的时间；<br>2）存取周期：连续两次启动存储器所需要的最小间隔时间；<br>3）存取周期包含存取时间；</p>\n<p>7、什么是存储器带宽？（要了解如何计算存储器带宽）</p>\n<p>单位时间内存储器存取的信息量；</p>\n<p>8、半导体存储芯片译码驱动包含哪两种方式，请简要说明。</p>\n<p>1）线选法：所有的地址芯片通过一个译码器译码，选择一个存储单元的各位，适合于存储容量不大的芯片；<br>2）重合法：将地址分为两组，每组通过一个译码器译码，选择行或列，行、列交叉处就是要访问的存储位。</p>\n<p>9、随机存储器包含哪两大类？哪个需要刷新？请从速度、容量、价格等方面进行简要比较。</p>\n<p>1）静态RAM：采用锁存器原理实现；<br>2）动态RAM：采用电容原理实现，需要刷新。<br>3）相比于动态RAM，静态RAM的速度快、容量小、价格高，一般用于缓存，而动态RAM一般用于内存。</p>\n<p>10、只读存储器有哪几种？</p>\n<p>1）掩模ROM（MROM）：出厂后内容不能被更改。<br>2）PROM：可编程只读存储器，可以进行一次性编程；<br>3）EPROM：可擦除只读ROM，用紫外线照射；<br>4）EEPROM：电可擦除只读ROM。<br>6）FLash Memory：采用EEPROM的非易失性存储器。</p>\n<p>11、单片存储器芯片的容量有限，很难满足实际需要，因此必须将若干存储芯片连接在一起才能组成足够容量的存储器。<br>存储器的扩展通常有位扩展和字扩展，什么是字扩展，什么是位扩展？请举例简要说明</p>\n<p>1）位扩展：增加存储器的字长，例如两个1K <em> 4位的存储芯片构成1个1K</em>8位的存储器；<br>2）字扩展：增加存储器的字数，例如两个1K <em> 8位的存储芯片构成1个2K </em> 8位的存储器；<br>通常字扩展和位扩展两种方式混合使用。</p>\n<p>12、熟虑掌握存储器的扩展，包括地址空间分配、地址线的连接、数据线的连接、片选信号的产生及连接等；<br>参看P94页，例4.1</p>\n<p>13、假设欲检测的二进制代码为n位，为了使其具有1位的纠错能力，需添加K位检测位，组成n+k位的代码。问，应添加多少位检测位？</p>\n<p>应添加的检测位位数：2的k次方大于等于n+k+1。<br>因为要使其有1位的检测能力，必须使用k位来说明n+k位到底哪一位出现了错误，k位能表达的数量为2的k次方，而n+k位到底哪一位<br>出现了错误或者是全部正确，共有n+k+1种状况，因此，k的取值需要满足：2的k次方大于等于n+k+1</p>\n<p>14、对于汉明码，应熟练掌握汉明码的编码方式（按照配偶或配奇的原则），以及给出汉明码，得到要传送的原始信息（包括纠错过程）。</p>\n<p>15、提高访存速度的三种方式。</p>\n<p>1）采用高速元器件；<br>2）采用存储层次结构：cache-主存结构；<br>3）调整主存结构：包括单体多字，多体并行两种方式。</p>\n<p>16、简述单体多字的存储系统的工作原理，及其优点。</p>\n<p>1）单体多字存储系统一次访存取出多个CPU字，即存储字为CPU字的n倍（假设一次访存取出n个cpu字）。<br>2）优点是：显著提高了存储器带宽。</p>\n<p>17、多体并行系统有哪两种编址方式？请简要说明其编址方式及其优点。</p>\n<p>1）高位交叉编址方式：存储体的编址方式为顺序存储，即一个存储体存满后，再存入下一个；存储单元地址的高位为存储体的编号。<br>高位交叉编址并不能提高单次访存速度，但能使多应用并行访存，提高系统的并发性。<br>2）低位交叉编址方式：存储体的编址方式为交叉存储。即程序连续存放在相邻的存储体之中。存储单元地址的低位为存储体的编号。<br>低位交叉编址能显著提高单次访存速度。</p>\n<p>19、在四位低位交叉编址中，假设存取周期为T，总线传输周期为τ，为了实现流水线方式存储，应满足什么条件？如果连续读取四个字，所需要的时间是多少？</p>\n<p>1）T= 4τ<br>2）连续读取四个字，所需要的时间为T + （4-1）τ<br>注意：假设不是低位交叉编址，而是高位交叉编址，连续读取四个字所需要的时间仍然为4T。</p>\n<p>20、需要大家掌握多体并行存储器在高位交叉编址（顺序存储）和低位交叉编址（交叉存储）的情况下，存储器带宽的计算方式。</p>\n<p>21、在CPU和内存之间引入cache的原因。</p>\n<p>1）避免cpu空等I/O访存；<br>2）缓解CPU和主存速度不匹配的问题。</p>\n<p>22、什么是程序的局部性原理。</p>\n<p>CPU从主存取指令或数据，在一定时间内，只是对主存局部地址区域访问。</p>\n<p>23、Cache命中率、平均访问时间以及访问效率的计算。</p>\n<p>24、Cache写操作有哪两种方式？</p>\n<p>1）写直达法：写操作既写入Cache又写入主存；<br>2）写回法：只把数据写入Cache而不写入主存，当Cache中数据被替换出去之后才写入主存。</p>\n<p>25、将主存地址映射到Cache地址称为地址映射，常见的Cache映射方式有哪几种？</p>\n<p>直接映射、全相联映射、组相联映射。</p>\n<p>26、直接映射的优缺点？</p>\n<p>优点：地址变换速度快。缺点：cache利用率不高，块冲突率高；</p>\n<p>27、全相联映射的优缺点？</p>\n<p>优点：cache利用率高，块冲突率低。缺点：地址变换复杂，需要较多的硬件。</p>\n<p>28、需要大家掌握各种映射方式之下，写出主存地址格式、cache地址格式，以及主存地址向cache地址的转换。</p>\n<p>29、Cache常用的替换算法有哪些？哪个命中率最高？</p>\n<p>1）先进先出、近期最少使用算法和随机替换算法；<br>2）命中率最高的是近期最少使用算法；</p>\n<p>30、磁盘的三地址结构包括哪些？</p>\n<p>柱面、磁头号和扇区号</p>\n<h2 id=\"第五章-输入输出系统\"><a href=\"#第五章-输入输出系统\" class=\"headerlink\" title=\"第五章 输入输出系统\"></a>第五章 输入输出系统</h2><p>1、I/O系统的发展大致可以分为哪4个阶段？</p>\n<p>1）早期（分散连接、串行工作、程序查询）<br>2）接口模块和DMA阶段（总线连接、并行工作、中断及DMA）<br>3）通道阶段（通道是具有特殊功能的处理器）<br>4）I/O处理机阶段<br>I/O系统的发展实际上是逐步将CPU从繁重的I/O工作中解放出来的过程；</p>\n<p>2、I/O设备编址有哪两种方式？各有什么优缺点？</p>\n<p>1）统一编址方式：和存储器统一编址，I/O地址作为存储器地址的一部分；无须用专用的I/O指令，但占用存储器空间。<br>2）独立编址方式：和存储地址分开编址，需用专用的I/O指令。</p>\n<p>3、I/O设备与主机的联络方式有哪几种？</p>\n<p>I/O设备与主机间交互信息时必须了解彼此的状态。根据I/O设备工作速度的不同，可以分为3类：<br>1）立即响应：不管其状态（认为其时刻准备好），适用于慢速设备。<br>2）应答信号：通过应答信号来进行交互；<br>3）同步时标：采用统一的时钟信号。</p>\n<p>4、I/O总线包括哪四类？</p>\n<p>数据线、设备选择线、状态线、命令线</p>\n<p>5、I/O设备通常使用D触发器（完成触发器）和B触发器（工作触发器）来标识设备所处的状态。<br>D=0，B=0：暂停状态；<br>D=0，B=1：准备状态<br>D=1，B=0：就绪状态</p>\n<p>6、程序查询的基本工作原理。</p>\n<p>cpu不断去查询I/O设备状态，导致CPU和I/O设备串行工作。</p>\n<p>7、什么是中断？</p>\n<p>计算机在执行程序过程中，当出现异常清空或特殊请求时，计算机停止现行程序的运行，转去处理这些异常清空或特殊请求，处理结束后，再返回现行程序的间断处，继续执行原程序，即为中断。</p>\n<p>8、中断服务程序的基本流程包括哪四部分？</p>\n<p>1）保护现场<br>2）中断服务<br>3）恢复现场<br>4）中断返回</p>\n<p>9、什么是单重中断和多重中断？</p>\n<p>1）单重中断：不允许中断现行的中断服务程序；<br>2）多重中断：允许级别更高的中断源中断现行的中断服务程序，也称为中断嵌套；</p>\n<p>10、CPU响应中断的时机？</p>\n<p>当前指令执行完毕后，cpu发出中断查询信号，也就是说，中断响应一定是在每条指令执行结束之后进行的，不可能在指令执行过程中响应中断。</p>\n<p>11、什么是DMA？</p>\n<p>DMA：直接内存访问。在主存和I/O设备之间建立独立的总线连接。</p>\n<p>12、在DMA方式中，由于DMA接口与CPU共享主存，可能会出现两者争用主存的冲突，为解决冲突，DMA和主存交换数据时，通常采用哪三种工作方式？</p>\n<p>1）停止CPU访问主存：DMA访存优先级高；<br>2）周期挪用（窃取）：DMA挪用存储或窃取总线使用权一个或几个主存存取周期；<br>3）DMA和CPU交替访问：将CPU工作周期分成两部分，一部分供DMA访存，一部分供CPU访存。</p>\n<p>13、DMA工作过程包括哪三部分？</p>\n<p>1）预处理<br>2）数据传输<br>2）后处理</p>\n<h2 id=\"第六章-计算机的运算方法\"><a href=\"#第六章-计算机的运算方法\" class=\"headerlink\" title=\"第六章 计算机的运算方法\"></a>第六章 计算机的运算方法</h2><p>1、掌握有符号数的原码计算方法，以及通过原码求真值；</p>\n<p>2、掌握补码计算的方法，以及通过补码求原码，然后求真值的方法。</p>\n<p>1）通过原码求补码：符号位不变，各位取反，末位加1；<br>2）通过补码求原码：符号位不变，各位取反，末位加1；</p>\n<p>3、原码中0有2种表示方法（正零和负零），补码中0只有一种表示方法（正零和负零的表示方法一致）</p>\n<p>4、假设有符号数的位数为8（包括符号位），补码能表示的真值的范围？</p>\n<p>补码能表示的真值范围为-128~+127（参见补码定义<br>）<br>5、掌握求反码以及移码的方法。</p>\n<p>6、什么是定点表示？什么是浮点表示？</p>\n<p>１）定点表示：小数点固定在某一位置的数为定点数；<br>２）浮点表示：小数点位置可以浮动的数。</p>\n<p>7、浮点数在机器中的表示形式，由哪几部分组成？</p>\n<p>由尾数、数符、阶码、阶符四部分组成。</p>\n<p>8、掌握规格化浮点数的表示范围（最大正数、最小正数、最大负数、最小负数）的计算方法。</p>\n<p>9、IEEE754标准规定的浮点数由哪几部分组成？</p>\n<p>由数符、阶码（含阶符）以及尾数组成。</p>\n<p>10、IEEE754标准规定的浮点数中，阶码和尾数用什么形式表示？</p>\n<p>阶码用移码表示，其偏移量是2^(n-1)，尾数用原码表示。</p>\n<p>11、float占多少位？double占多少位？</p>\n<p>float为短实数，占32位，其中阶码8位，尾数23位。<br>double为长实数，占64位，其中阶码占11位，尾数为52位。</p>\n<p>12、对正数进行算术移位，当正数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于正数，其源码、补码、反码均等于真值，左移时，低位添补0，右移时，高位添补0。</p>\n<p>13、对负数进行算术移位，当负数采用源码、补码、反码时，左移或右移时，低位或高位添补什么代码？</p>\n<p>对于源码，左移或右移时，低位或高位均添补0；<br>对于补码：左移时，低位添补0，右移时高位添补1<br>对于反码：左移或右移时，低位或高位均添补1；</p>\n<p>14、什么是逻辑移位？</p>\n<p>逻辑移位是对无符号数的移位，由于无符号数不存在符号位，左移时，高位移丢，低位补零。右移时，低位移丢，高位补零。</p>\n<p>15、加法和减法时，什么情况下可能发生溢出？如何简单判断发生溢出？</p>\n<p>1）正数加正数，正数减负数，负数加负数，负数减正数时，可能会发生溢出。<br>2）如果参加操作的两个数符号相同（转换成补码的加法），其结果与源操作数符号不同，即为溢出。<br>3）如果补码采用1位符号位，如果最高有效位的进位和符号位的进位不同，则发生溢出。</p>\n<p>16、定点乘法运算可以使用加法和移位来实现吗？</p>\n<p>可以。</p>\n<p>17、浮点加减运算基本按照哪几步来进行？</p>\n<p>1）对阶：使小数点对齐；<br>2）尾数求和：将对阶后的两个尾数按照定点加减运算规则求和；<br>3）规格化：尾数规格化；<br>4）舍入：尾数右规时，丢失数值位；<br>5）溢出判断：判断结果是否溢出。</p>\n<p>18、如何判断浮点运算结果是否溢出？</p>\n<p>阶码是否超出了其表示范围。（使用2个符号位判溢出）</p>\n<h2 id=\"第七章-指令系统\"><a href=\"#第七章-指令系统\" class=\"headerlink\" title=\"第七章 指令系统\"></a>第七章 指令系统</h2><p><strong>1、什么是机器指令？什么是指令系统？</strong><br>1）机器指令：每一条机器语言的语句；<br>2）指令系统：全部机器指令的集合。</p>\n<p><strong>2、一条指令包含哪两个主要部分？请简要说明各部分作用。</strong><br>1）操作码：指明指令要完成的操作；<br>2）地址码：指明指令要操作的数据或数据来源；</p>\n<p><strong>3、操作码长度有固定长度和可变长度两种，各自有什么优点？</strong><br>1）固定长度：便于硬件设计，指令译码时间短；<br>2）可变长度：压缩了操作码平均长度；</p>\n<p><strong>4、指令中地址码中的地址可以是哪些设备的地址？</strong><br>可以是主存地址、寄存器地址或I/O设备的地址；</p>\n<p><strong>5、指令中地址的个数可以有几个？</strong><br>四地址、三地址、二地址、一地址以及零地址。</p>\n<p><strong>6、假设指令中有四个地址、三个地址、两个地址以及一个地址，各自需要访存几次？</strong><br>1）四地址：访存4次；<br>2）三地址：访存4次；<br>3）两地址：访存3次；<br>4）一地址：访存2次；</p>\n<p><strong>7、当使用寄存器代替指令字中的地址码字段后，有哪些优点？</strong><br>1）扩大指令字的寻址范围；<br>2）缩短指令字长；<br>3）减少访存次数</p>\n<p><strong>8、数据在存储器中存储时，为什么要按照边界对齐？</strong><br>减少访存次数。</p>\n<p><strong>9、寻址方式包括哪两类？</strong><br>1）指令寻址：下一条将要执行的指令的指令地址；<br>2）数据寻址：确定本指令的操作数地址。</p>\n<p><strong>10、什么是形式地址？什么是有效地址？</strong><br>1）形式地址：指令的地址码字段通常都不代表操作数的真实地址，成为形式地址，记为A；<br>2）有效地址：操作数的真实地址，记为EA，由寻址特征和形式地址共同决定；</p>\n<p><strong>11、了解各种寻址方式的概念及根据形式地址形成有效地址的方式。</strong><br>立即寻址、直接寻址、隐含寻址、间接寻址、寄存器寻址、寄存器间接寻址、基址寻址（隐式或显式）、变址寻址、相对寻址、堆栈寻址</p>\n<p><strong>12、什么是RISC？什么是CISC？</strong><br>RISC：精简指令集；<br>CISC：复杂指令集；</p>\n"},{"title":"(1) python","date":"2018-11-14T13:57:47.000Z","_content":"\n\n\n编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。\n\n解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。\n\nPython 是一门先编译后解释的语言。\n\n当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。\n\n当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。\n\n pyc 文件其实是 PyCodeObject 的一种持久化保存方式。\n\n**执行 Python 程序的三种方式：\n解释器、交互式运行、IDE运行**\n\n","source":"_posts/python基础/python.md","raw":"\n---\ntitle: (1) python\ndate: 2018-11-14 21:57:47\ntags:\ncategories: python基础\n---\n\n\n\n编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。\n\n解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。\n\nPython 是一门先编译后解释的语言。\n\n当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。\n\n当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。\n\n pyc 文件其实是 PyCodeObject 的一种持久化保存方式。\n\n**执行 Python 程序的三种方式：\n解释器、交互式运行、IDE运行**\n\n","slug":"python基础/python","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p24004ktssax5uzwc6i","content":"<p>编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。</p>\n<p>解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。</p>\n<p>Python 是一门先编译后解释的语言。</p>\n<p>当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。</p>\n<p>当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。</p>\n<p> pyc 文件其实是 PyCodeObject 的一种持久化保存方式。</p>\n<p><strong>执行 Python 程序的三种方式：<br>解释器、交互式运行、IDE运行</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是 C 语言。</p>\n<p>解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是 Ruby。</p>\n<p>Python 是一门先编译后解释的语言。</p>\n<p>当 Python 程序运行时，编译的结果则是保存在位于内存中的 PyCodeObject 中，当 Python 程序运行结束时，Python 解释器则将 PyCodeObject 写回到 pyc 文件中。</p>\n<p>当 Python 程序第二次运行时，首先程序会在硬盘中寻找 pyc 文件，如果找到，则直接载入，否则就重复上面的过程。</p>\n<p> pyc 文件其实是 PyCodeObject 的一种持久化保存方式。</p>\n<p><strong>执行 Python 程序的三种方式：<br>解释器、交互式运行、IDE运行</strong></p>\n"},{"title":"部分命令","date":"2019-07-06T03:05:31.000Z","_content":"\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. >/dev/null ,2>/dev/null 丢弃输出\n5. > list 2>&1 (都输出 list)或 &> list\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","source":"_posts/linux学习/部分.md","raw":"---\ntitle: 部分命令\ndate: 2019-07-06 11:05:31\ntags:\ncategories: linux\n---\n\n# 基础\n 1. `.bash_history` 历史记录\n 2. `Tab` 补全\n 3. `alias` 命令别名， alias lm = 'ls -al' , unalias lm (临时)  vi /root/.bashrc （永久）\n 4. `type cd` 命令类型 \n 5. `\\` 转义\n\n## 变量\n1. 变量未设置时，默认为空\n2. `PATH=$PATH:/home/bin` 变量累加\n3. `export PATH` 使变量成为环境变量\n4. 一般默认  大写为系统变量   小写为自行设置变量\n5. 变量中 单引号''（纯文本）  与 双引号 “” (保持原本特性)\n6. `current_path=$(pwd)`  接命令赋值给变量。  等同于 \n``` \ncurrent_path=`pwd`\n# 建议都用 $(pwd)\n``` \n\n7. `unset current_path` 取消变量\n8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。\n9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。\n10. `env` 查看环境变量\n11. `set` 查看所有变量\n12. `echo $?` 只与上一个命令有关，上一个命令成功返回0\n\n## 变量读取，数组与声明\n```\nread -s -p \"please input root password:\" serverPwd # -p 提示 -s 不显示\necho $serverPwd\necho -e \"\\n\" # -e 启用反斜杠转义 （换行）\n```\n**数组**\n```\nvar[1]='small'\nvar[2]='big'\necho \"$var[1],$var[2]\"\n```\ndeclare 和 typeset 一样声明变量类型\n```\nsum=100+1\necho $sun  # 100+1\ndeclare -i sum=100+1\necho $sun # 101\n\n```\n## $ \n```\n$0\t\t当前脚本的文件名\n$n\t\t传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。\n$#\t\t传递给脚本或函数的参数个数。\n$*\t\t传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体\n$@\t\t传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数\n$?\t\t上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n$$\t\t当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID\n```\n## 与文件系统及程序的限制关系：ulimit\n\n## 数据流重定向\nst:standard\n1. stdin < << (代码0)\n2. stout > >> (代码0)\n3. stderr 2> 2>> (代码2)\n4. >/dev/null ,2>/dev/null 丢弃输出\n5. > list 2>&1 (都输出 list)或 &> list\n\n## 命令执行判断依据\n1. cmd1,cmd2,cmd3 依次执行\n2. cmd1 && cmd2 && cmd3 前面成功，后面才执行（$# = 0）\n3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）\n\n## 管道命令（pipe）\n**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**\n```\nyes|bash ...sh(执行命令输入yes)\necho $PATH |cut -d ':' -f 4 # 以 : 分割$PATH ,取出第4个\necho $PATH |cut -d ':' -f 3,5 # 以 : 分割$PATH ,取出第3,5个\nexport | cut -c 12- # 取出12到最后的字符\nlast | grep -i root # 找出last中的含root行，忽略大小写 \nlast | grep -v root # 不含root行\nlast | grep root|cut -d ' ' -f 1| sort | uniq -ic # i 忽略大小写 c 计数\ncat /etc/os-release | wc  # 输出  行 字数 字符数\nwc -l(行) -w(英文单字) -m (多少字符)\n```\n## 双向重定向（tee）\n**将数据流同时输出到屏幕和文件中**\n```\nlast |tee -a last.list # -a 累加\n```\n# shell脚本\n**shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。**\n","slug":"linux学习/部分","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p25004mtssal9bls5av","content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. &gt;/dev/null ,2&gt;/dev/null 丢弃输出</span><br><span class=\"line\">5. &gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><ol>\n<li><code>.bash_history</code> 历史记录</li>\n<li><code>Tab</code> 补全</li>\n<li><code>alias</code> 命令别名， alias lm = ‘ls -al’ , unalias lm (临时)  vi /root/.bashrc （永久）</li>\n<li><code>type cd</code> 命令类型 </li>\n<li><code>\\</code> 转义</li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>变量未设置时，默认为空</li>\n<li><code>PATH=$PATH:/home/bin</code> 变量累加</li>\n<li><code>export PATH</code> 使变量成为环境变量</li>\n<li>一般默认  大写为系统变量   小写为自行设置变量</li>\n<li>变量中 单引号’’（纯文本）  与 双引号 “” (保持原本特性)</li>\n<li><code>current_path=$(pwd)</code>  接命令赋值给变量。  等同于 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\"># 建议都用 $(pwd)</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">7. `unset current_path` 取消变量</span><br><span class=\"line\">8. 子进程取消的变量 对 父进程无影响，子进程只继承父进程的环境变量与export。</span><br><span class=\"line\">9. `work=/opt/software`  可以`cd $work` 。写入.bash_profile 全局生效。</span><br><span class=\"line\">10. `env` 查看环境变量</span><br><span class=\"line\">11. `set` 查看所有变量</span><br><span class=\"line\">12. `echo $?` 只与上一个命令有关，上一个命令成功返回0</span><br><span class=\"line\"></span><br><span class=\"line\">## 变量读取，数组与声明</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>read -s -p “please input root password:” serverPwd # -p 提示 -s 不显示<br>echo $serverPwd<br>echo -e “\\n” # -e 启用反斜杠转义 （换行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**数组**</span><br></pre></td></tr></table></figure></p>\n<p>var[1]=’small’<br>var[2]=’big’<br>echo “$var[1],$var[2]”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare 和 typeset 一样声明变量类型</span><br></pre></td></tr></table></figure></p>\n<p>sum=100+1<br>echo $sun  # 100+1<br>declare -i sum=100+1<br>echo $sun # 101</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## $</span><br></pre></td></tr></table></figure>\n<p>$0        当前脚本的文件名<br>$n        传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。<br>$#        传递给脚本或函数的参数个数。<br>$*        传递给脚本或函数的所有参数。 # 双引号内，会识别成一个整体<br>$@        传递给脚本或函数的所有参数。 # 双引号内，还是会识别成一个一个参数<br>$?        上个命令的退出状态，或函数的返回值。一般情况下，大部分命令执行成功会返回 0，失败返回 1。<br>$$        当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 与文件系统及程序的限制关系：ulimit</span><br><span class=\"line\"></span><br><span class=\"line\">## 数据流重定向</span><br><span class=\"line\">st:standard</span><br><span class=\"line\">1. stdin &lt; &lt;&lt; (代码0)</span><br><span class=\"line\">2. stout &gt; &gt;&gt; (代码0)</span><br><span class=\"line\">3. stderr 2&gt; 2&gt;&gt; (代码2)</span><br><span class=\"line\">4. &gt;/dev/null ,2&gt;/dev/null 丢弃输出</span><br><span class=\"line\">5. &gt; list 2&gt;&amp;1 (都输出 list)或 &amp;&gt; list</span><br><span class=\"line\"></span><br><span class=\"line\">## 命令执行判断依据</span><br><span class=\"line\">1. cmd1,cmd2,cmd3 依次执行</span><br><span class=\"line\">2. cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3 前面成功，后面才执行（$# = 0）</span><br><span class=\"line\">3. cmd1 || cmd2 || cmd3 前面成功，后面就不执行（$# = 0）</span><br><span class=\"line\"></span><br><span class=\"line\">## 管道命令（pipe）</span><br><span class=\"line\">**将前一个命令的stout(不会处理stderr) 传到下一个命令的stdin中**</span><br></pre></td></tr></table></figure></p>\n<p>yes|bash …sh(执行命令输入yes)<br>echo $PATH |cut -d ‘:’ -f 4 # 以 : 分割$PATH ,取出第4个<br>echo $PATH |cut -d ‘:’ -f 3,5 # 以 : 分割$PATH ,取出第3,5个<br>export | cut -c 12- # 取出12到最后的字符<br>last | grep -i root # 找出last中的含root行，忽略大小写<br>last | grep -v root # 不含root行<br>last | grep root|cut -d ‘ ‘ -f 1| sort | uniq -ic # i 忽略大小写 c 计数<br>cat /etc/os-release | wc  # 输出  行 字数 字符数<br>wc -l(行) -w(英文单字) -m (多少字符)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 双向重定向（tee）</span><br><span class=\"line\">**将数据流同时输出到屏幕和文件中**</span><br></pre></td></tr></table></figure></p>\n<p>last |tee -a last.list # -a 累加<br><code>`</code></p>\n<h1 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h1><p><strong>shell script 是利用shell的功能所写的一个纯文本文件，将一些shell的语法命令写在里面，搭配正则表达式，管道命令与数据流重定向等功能达到我们想要的目的。</strong></p>\n"},{"title":"进程与线程","date":"2019-07-05T03:05:31.000Z","_content":"\n\n1. CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。\n2. 进程的内存空间是共享的，每个线程都可以使用这些共享内存,\n3. 一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,\"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n4. \"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n5. 某些内存区域，只能供给固定数目的线程使用,\"信号量\"（Semaphore），用来保证多个线程不会互相冲突\n\n\n# 概念\n进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。\n\n一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间\n\n","source":"_posts/linux学习/进程与线程.md","raw":"---\ntitle: 进程与线程\ndate: 2019-07-05 11:05:31\ntags:\ncategories: linux\n---\n\n\n1. CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。\n2. 进程的内存空间是共享的，每个线程都可以使用这些共享内存,\n3. 一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,\"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n4. \"互斥锁\"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域\n5. 某些内存区域，只能供给固定数目的线程使用,\"信号量\"（Semaphore），用来保证多个线程不会互相冲突\n\n\n# 概念\n进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。\n\n一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间\n\n","slug":"linux学习/进程与线程","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p26004ptssafy2zuphj","content":"<ol>\n<li>CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。</li>\n<li>进程的内存空间是共享的，每个线程都可以使用这些共享内存,</li>\n<li>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>某些内存区域，只能供给固定数目的线程使用,”信号量”（Semaphore），用来保证多个线程不会互相冲突</li>\n</ol>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p>\n<p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>CPU，它承担了所有的计算任务，进程是指程序的一次执行，线程是CPU的基本调度单位。</li>\n<li>进程的内存空间是共享的，每个线程都可以使用这些共享内存,</li>\n<li>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存,”互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>“互斥锁”（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域</li>\n<li>某些内存区域，只能供给固定数目的线程使用,”信号量”（Semaphore），用来保证多个线程不会互相冲突</li>\n</ol>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p>\n<p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间</p>\n"},{"title":"(3) python中变量与运算符","date":"2018-11-14T13:58:39.000Z","_content":"**变量的命名规则**\n字母，数字，下划线_和他们的组合\n注意：\n```\n1、首字母不能为数字\n2、只有下划线_这一种特殊字符\n3、系统关键字不能作为变量名#True = 1\n  #报错can't assign to keyword\n4、变量是区分大小写的\ncat_name=1\ncatName=1    #变量的两种命名方式\n```\n**运算符**\npython运算符有：\n算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级\n\nPython算术运算符\n```\n+\t加 - 两个对象相加\ta + b 输出结果 31\n-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11\n*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210\n/\t除 - x 除以 y\tb / a 输出结果 2.1\n%\t取模 - 返回除法的余数\tb % a 输出结果 1\n**\t幂 - 返回x的y次幂\ta**b 为10的21次方\n//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0\n```\nPython比较运算符\n```\n==\t等于 - 比较对象是否相等\t(a == b) 返回 False。\n!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。\n>\t大于 - 返回x是否大于y\t(a > b) 返回 False。\n<\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a < b) 返回 True。\n>=\t大于等于 - 返回x是否大于等于y。\t(a >= b) 返回 False。\n<=\t小于等于 - 返回x是否小于等于y。\t(a <= b) 返回 True。\n```\nPython赋值运算符\n```\n=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c\n+=\t加法赋值运算符\tc += a 等效于 c = c + a\n-=\t减法赋值运算符\tc -= a 等效于 c = c - a\n*=\t乘法赋值运算符\tc *= a 等效于 c = c * a\n/=\t除法赋值运算符\tc /= a 等效于 c = c / a\n%=\t取模赋值运算符\tc %= a 等效于 c = c % a\n**=\t幂赋值运算符\tc **= a 等效于 c = c ** a\n//=\t取整除赋值运算符\tc //= a 等效于 c = c // a\n```\nPython位运算符\n\n按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：\n```\n下表中变量 a 为 60，b 为 13二进制格式如下：\n\na = 0011 1100\n\nb = 0000 1101\n\n-----------------\n\na&b = 0000 1100\n\na|b = 0011 1101\n\na^b = 0011 0001\n\n~a  = 1100 0011\n运算符\t\n&\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<\t左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。\ta << 2 输出结果 240 ，二进制解释： 1111 0000\n>>\t右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数\ta >> 2 输出结果 15 ，二进制解释： 0000 1111\n以下实例演示了Python所有位运算符的操作：\n\n实例(Python 3.0+)\n \n#!/usr/bin/python3\n \na = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n \nc = a & b;        # 12 = 0000 1100\nprint (\"1 - c 的值为：\", c)\n \nc = a | b;        # 61 = 0011 1101 \nprint (\"2 - c 的值为：\", c)\n \nc = a ^ b;        # 49 = 0011 0001\nprint (\"3 - c 的值为：\", c)\n \nc = ~a;           # -61 = 1100 0011\nprint (\"4 - c 的值为：\", c)\n \nc = a << 2;       # 240 = 1111 0000\nprint (\"5 - c 的值为：\", c)\n \nc = a >> 2;       # 15 = 0000 1111\nprint (\"6 - c 的值为：\", c)\n以上实例输出结果：\n\n1 - c 的值为： 12\n2 - c 的值为： 61\n3 - c 的值为： 49\n4 - c 的值为： -61\n5 - c 的值为： 240\n6 - c 的值为： 15\n```\nPython逻辑运算符\n```\nand\tx and y\t布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。\nor\tx or y\t布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。\nnot\tnot x\t布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False\n```\nPython成员运算符\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n```\nin\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n```\nPython身份运算符\n身份运算符用于比较两个对象的存储单元\n```\nis\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n注： id() 函数用于获取对象内存地址。\n\nis 与 == 区别：\n\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n\n>>>a = [1, 2, 3] >>> b = a >>> b is a True >>> b == a True >>> b = a[:] >>> b is a False >>> b == a True\n```\nPython运算符优先级\n以下表格列出了从最高到最低优先级的所有运算符：\n```\n**\t指数 (最高优先级)\n~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)\n* / % //\t乘，除，取模和取整除\n+ -\t加法减法\n>> <<\t右移，左移运算符\n&\t位 'AND'\n^ |\t位运算符\n<= < > >=\t比较运算符\n<> == !=\t等于运算符\n= %= /= //= -= += *= **=\t赋值运算符\nis is not\t身份运算符\nin not in\t成员运算符\nand or not\t逻辑运算符\n```\n**一些杂项**\n ```\n3+2-1      #4   同优先级  左集合\nc=a+b     #先算a+b然后赋值给c  右集合\nnot (1 or 2)+2==3   #True  建议括号只用来改变优先级关系\n","source":"_posts/python基础/python中变量与运算符.md","raw":"---\ntitle: (3) python中变量与运算符\ndate: 2018-11-14 21:58:39\ntags:\ncategories: python基础\n---\n**变量的命名规则**\n字母，数字，下划线_和他们的组合\n注意：\n```\n1、首字母不能为数字\n2、只有下划线_这一种特殊字符\n3、系统关键字不能作为变量名#True = 1\n  #报错can't assign to keyword\n4、变量是区分大小写的\ncat_name=1\ncatName=1    #变量的两种命名方式\n```\n**运算符**\npython运算符有：\n算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级\n\nPython算术运算符\n```\n+\t加 - 两个对象相加\ta + b 输出结果 31\n-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11\n*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210\n/\t除 - x 除以 y\tb / a 输出结果 2.1\n%\t取模 - 返回除法的余数\tb % a 输出结果 1\n**\t幂 - 返回x的y次幂\ta**b 为10的21次方\n//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0\n```\nPython比较运算符\n```\n==\t等于 - 比较对象是否相等\t(a == b) 返回 False。\n!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。\n>\t大于 - 返回x是否大于y\t(a > b) 返回 False。\n<\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a < b) 返回 True。\n>=\t大于等于 - 返回x是否大于等于y。\t(a >= b) 返回 False。\n<=\t小于等于 - 返回x是否小于等于y。\t(a <= b) 返回 True。\n```\nPython赋值运算符\n```\n=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c\n+=\t加法赋值运算符\tc += a 等效于 c = c + a\n-=\t减法赋值运算符\tc -= a 等效于 c = c - a\n*=\t乘法赋值运算符\tc *= a 等效于 c = c * a\n/=\t除法赋值运算符\tc /= a 等效于 c = c / a\n%=\t取模赋值运算符\tc %= a 等效于 c = c % a\n**=\t幂赋值运算符\tc **= a 等效于 c = c ** a\n//=\t取整除赋值运算符\tc //= a 等效于 c = c // a\n```\nPython位运算符\n\n按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：\n```\n下表中变量 a 为 60，b 为 13二进制格式如下：\n\na = 0011 1100\n\nb = 0000 1101\n\n-----------------\n\na&b = 0000 1100\n\na|b = 0011 1101\n\na^b = 0011 0001\n\n~a  = 1100 0011\n运算符\t\n&\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a & b) 输出结果 12 ，二进制解释： 0000 1100\n|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101\n^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n<<\t左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。\ta << 2 输出结果 240 ，二进制解释： 1111 0000\n>>\t右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数\ta >> 2 输出结果 15 ，二进制解释： 0000 1111\n以下实例演示了Python所有位运算符的操作：\n\n实例(Python 3.0+)\n \n#!/usr/bin/python3\n \na = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n \nc = a & b;        # 12 = 0000 1100\nprint (\"1 - c 的值为：\", c)\n \nc = a | b;        # 61 = 0011 1101 \nprint (\"2 - c 的值为：\", c)\n \nc = a ^ b;        # 49 = 0011 0001\nprint (\"3 - c 的值为：\", c)\n \nc = ~a;           # -61 = 1100 0011\nprint (\"4 - c 的值为：\", c)\n \nc = a << 2;       # 240 = 1111 0000\nprint (\"5 - c 的值为：\", c)\n \nc = a >> 2;       # 15 = 0000 1111\nprint (\"6 - c 的值为：\", c)\n以上实例输出结果：\n\n1 - c 的值为： 12\n2 - c 的值为： 61\n3 - c 的值为： 49\n4 - c 的值为： -61\n5 - c 的值为： 240\n6 - c 的值为： 15\n```\nPython逻辑运算符\n```\nand\tx and y\t布尔\"与\" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。\nor\tx or y\t布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。\nnot\tnot x\t布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False\n```\nPython成员运算符\n除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。\n```\nin\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n```\nPython身份运算符\n身份运算符用于比较两个对象的存储单元\n```\nis\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\n注： id() 函数用于获取对象内存地址。\n\nis 与 == 区别：\n\nis 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。\n\n>>>a = [1, 2, 3] >>> b = a >>> b is a True >>> b == a True >>> b = a[:] >>> b is a False >>> b == a True\n```\nPython运算符优先级\n以下表格列出了从最高到最低优先级的所有运算符：\n```\n**\t指数 (最高优先级)\n~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)\n* / % //\t乘，除，取模和取整除\n+ -\t加法减法\n>> <<\t右移，左移运算符\n&\t位 'AND'\n^ |\t位运算符\n<= < > >=\t比较运算符\n<> == !=\t等于运算符\n= %= /= //= -= += *= **=\t赋值运算符\nis is not\t身份运算符\nin not in\t成员运算符\nand or not\t逻辑运算符\n```\n**一些杂项**\n ```\n3+2-1      #4   同优先级  左集合\nc=a+b     #先算a+b然后赋值给c  右集合\nnot (1 or 2)+2==3   #True  建议括号只用来改变优先级关系\n","slug":"python基础/python中变量与运算符","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p27004rtssakv67v1ct","content":"<p><strong>变量的命名规则</strong><br>字母，数字，下划线_和他们的组合<br>注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首字母不能为数字</span><br><span class=\"line\">2、只有下划线_这一种特殊字符</span><br><span class=\"line\">3、系统关键字不能作为变量名#True = 1</span><br><span class=\"line\">  #报错can&apos;t assign to keyword</span><br><span class=\"line\">4、变量是区分大小写的</span><br><span class=\"line\">cat_name=1</span><br><span class=\"line\">catName=1    #变量的两种命名方式</span><br></pre></td></tr></table></figure></p>\n<p><strong>运算符</strong><br>python运算符有：<br>算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级</p>\n<p>Python算术运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+\t加 - 两个对象相加\ta + b 输出结果 31</span><br><span class=\"line\">-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11</span><br><span class=\"line\">*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210</span><br><span class=\"line\">/\t除 - x 除以 y\tb / a 输出结果 2.1</span><br><span class=\"line\">%\t取模 - 返回除法的余数\tb % a 输出结果 1</span><br><span class=\"line\">**\t幂 - 返回x的y次幂\ta**b 为10的21次方</span><br><span class=\"line\">//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</span><br></pre></td></tr></table></figure></p>\n<p>Python比较运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==\t等于 - 比较对象是否相等\t(a == b) 返回 False。</span><br><span class=\"line\">!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。</span><br><span class=\"line\">&gt;\t大于 - 返回x是否大于y\t(a &gt; b) 返回 False。</span><br><span class=\"line\">&lt;\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a &lt; b) 返回 True。</span><br><span class=\"line\">&gt;=\t大于等于 - 返回x是否大于等于y。\t(a &gt;= b) 返回 False。</span><br><span class=\"line\">&lt;=\t小于等于 - 返回x是否小于等于y。\t(a &lt;= b) 返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python赋值运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c</span><br><span class=\"line\">+=\t加法赋值运算符\tc += a 等效于 c = c + a</span><br><span class=\"line\">-=\t减法赋值运算符\tc -= a 等效于 c = c - a</span><br><span class=\"line\">*=\t乘法赋值运算符\tc *= a 等效于 c = c * a</span><br><span class=\"line\">/=\t除法赋值运算符\tc /= a 等效于 c = c / a</span><br><span class=\"line\">%=\t取模赋值运算符\tc %= a 等效于 c = c % a</span><br><span class=\"line\">**=\t幂赋值运算符\tc **= a 等效于 c = c ** a</span><br><span class=\"line\">//=\t取整除赋值运算符\tc //= a 等效于 c = c // a</span><br></pre></td></tr></table></figure></p>\n<p>Python位运算符</p>\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下表中变量 a 为 60，b 为 13二进制格式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">a = 0011 1100</span><br><span class=\"line\"></span><br><span class=\"line\">b = 0000 1101</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">a&amp;b = 0000 1100</span><br><span class=\"line\"></span><br><span class=\"line\">a|b = 0011 1101</span><br><span class=\"line\"></span><br><span class=\"line\">a^b = 0011 0001</span><br><span class=\"line\"></span><br><span class=\"line\">~a  = 1100 0011</span><br><span class=\"line\">运算符\t</span><br><span class=\"line\">&amp;\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</span><br><span class=\"line\">|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101</span><br><span class=\"line\">^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</span><br><span class=\"line\">~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</span><br><span class=\"line\">&lt;&lt;\t左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。\ta &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</span><br><span class=\"line\">&gt;&gt;\t右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数\ta &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</span><br><span class=\"line\">以下实例演示了Python所有位运算符的操作：</span><br><span class=\"line\"></span><br><span class=\"line\">实例(Python 3.0+)</span><br><span class=\"line\"> </span><br><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 60            # 60 = 0011 1100 </span><br><span class=\"line\">b = 13            # 13 = 0000 1101 </span><br><span class=\"line\">c = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &amp; b;        # 12 = 0000 1100</span><br><span class=\"line\">print (&quot;1 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a | b;        # 61 = 0011 1101 </span><br><span class=\"line\">print (&quot;2 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a ^ b;        # 49 = 0011 0001</span><br><span class=\"line\">print (&quot;3 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = ~a;           # -61 = 1100 0011</span><br><span class=\"line\">print (&quot;4 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &lt;&lt; 2;       # 240 = 1111 0000</span><br><span class=\"line\">print (&quot;5 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &gt;&gt; 2;       # 15 = 0000 1111</span><br><span class=\"line\">print (&quot;6 - c 的值为：&quot;, c)</span><br><span class=\"line\">以上实例输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\">1 - c 的值为： 12</span><br><span class=\"line\">2 - c 的值为： 61</span><br><span class=\"line\">3 - c 的值为： 49</span><br><span class=\"line\">4 - c 的值为： -61</span><br><span class=\"line\">5 - c 的值为： 240</span><br><span class=\"line\">6 - c 的值为： 15</span><br></pre></td></tr></table></figure></p>\n<p>Python逻辑运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and\tx and y\t布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。</span><br><span class=\"line\">or\tx or y\t布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。</span><br><span class=\"line\">not\tnot x\t布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False</span><br></pre></td></tr></table></figure></p>\n<p>Python成员运算符<br>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。</span><br><span class=\"line\">not in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python身份运算符<br>身份运算符用于比较两个对象的存储单元<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</span><br><span class=\"line\">is not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</span><br><span class=\"line\">注： id() 函数用于获取对象内存地址。</span><br><span class=\"line\"></span><br><span class=\"line\">is 与 == 区别：</span><br><span class=\"line\"></span><br><span class=\"line\">is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</span><br></pre></td></tr></table></figure></p>\n<p>Python运算符优先级<br>以下表格列出了从最高到最低优先级的所有运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**\t指数 (最高优先级)</span><br><span class=\"line\">~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</span><br><span class=\"line\">* / % //\t乘，除，取模和取整除</span><br><span class=\"line\">+ -\t加法减法</span><br><span class=\"line\">&gt;&gt; &lt;&lt;\t右移，左移运算符</span><br><span class=\"line\">&amp;\t位 &apos;AND&apos;</span><br><span class=\"line\">^ |\t位运算符</span><br><span class=\"line\">&lt;= &lt; &gt; &gt;=\t比较运算符</span><br><span class=\"line\">&lt;&gt; == !=\t等于运算符</span><br><span class=\"line\">= %= /= //= -= += *= **=\t赋值运算符</span><br><span class=\"line\">is is not\t身份运算符</span><br><span class=\"line\">in not in\t成员运算符</span><br><span class=\"line\">and or not\t逻辑运算符</span><br></pre></td></tr></table></figure></p>\n<p><strong>一些杂项</strong><br> <code>`</code><br>3+2-1      #4   同优先级  左集合<br>c=a+b     #先算a+b然后赋值给c  右集合<br>not (1 or 2)+2==3   #True  建议括号只用来改变优先级关系</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>变量的命名规则</strong><br>字母，数字，下划线_和他们的组合<br>注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首字母不能为数字</span><br><span class=\"line\">2、只有下划线_这一种特殊字符</span><br><span class=\"line\">3、系统关键字不能作为变量名#True = 1</span><br><span class=\"line\">  #报错can&apos;t assign to keyword</span><br><span class=\"line\">4、变量是区分大小写的</span><br><span class=\"line\">cat_name=1</span><br><span class=\"line\">catName=1    #变量的两种命名方式</span><br></pre></td></tr></table></figure></p>\n<p><strong>运算符</strong><br>python运算符有：<br>算术运算符、比较运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符、运算符优先级</p>\n<p>Python算术运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+\t加 - 两个对象相加\ta + b 输出结果 31</span><br><span class=\"line\">-\t减 - 得到负数或是一个数减去另一个数\ta - b 输出结果 -11</span><br><span class=\"line\">*\t乘 - 两个数相乘或是返回一个被重复若干次的字符串\ta * b 输出结果 210</span><br><span class=\"line\">/\t除 - x 除以 y\tb / a 输出结果 2.1</span><br><span class=\"line\">%\t取模 - 返回除法的余数\tb % a 输出结果 1</span><br><span class=\"line\">**\t幂 - 返回x的y次幂\ta**b 为10的21次方</span><br><span class=\"line\">//\t取整除 - 返回商的整数部分\t9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</span><br></pre></td></tr></table></figure></p>\n<p>Python比较运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==\t等于 - 比较对象是否相等\t(a == b) 返回 False。</span><br><span class=\"line\">!=\t不等于 - 比较两个对象是否不相等\t(a != b) 返回 True。</span><br><span class=\"line\">&gt;\t大于 - 返回x是否大于y\t(a &gt; b) 返回 False。</span><br><span class=\"line\">&lt;\t小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\t(a &lt; b) 返回 True。</span><br><span class=\"line\">&gt;=\t大于等于 - 返回x是否大于等于y。\t(a &gt;= b) 返回 False。</span><br><span class=\"line\">&lt;=\t小于等于 - 返回x是否小于等于y。\t(a &lt;= b) 返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python赋值运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=\t简单的赋值运算符\tc = a + b 将 a + b 的运算结果赋值为 c</span><br><span class=\"line\">+=\t加法赋值运算符\tc += a 等效于 c = c + a</span><br><span class=\"line\">-=\t减法赋值运算符\tc -= a 等效于 c = c - a</span><br><span class=\"line\">*=\t乘法赋值运算符\tc *= a 等效于 c = c * a</span><br><span class=\"line\">/=\t除法赋值运算符\tc /= a 等效于 c = c / a</span><br><span class=\"line\">%=\t取模赋值运算符\tc %= a 等效于 c = c % a</span><br><span class=\"line\">**=\t幂赋值运算符\tc **= a 等效于 c = c ** a</span><br><span class=\"line\">//=\t取整除赋值运算符\tc //= a 等效于 c = c // a</span><br></pre></td></tr></table></figure></p>\n<p>Python位运算符</p>\n<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下表中变量 a 为 60，b 为 13二进制格式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">a = 0011 1100</span><br><span class=\"line\"></span><br><span class=\"line\">b = 0000 1101</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">a&amp;b = 0000 1100</span><br><span class=\"line\"></span><br><span class=\"line\">a|b = 0011 1101</span><br><span class=\"line\"></span><br><span class=\"line\">a^b = 0011 0001</span><br><span class=\"line\"></span><br><span class=\"line\">~a  = 1100 0011</span><br><span class=\"line\">运算符\t</span><br><span class=\"line\">&amp;\t按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\t(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</span><br><span class=\"line\">|\t按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\t(a | b) 输出结果 61 ，二进制解释： 0011 1101</span><br><span class=\"line\">^\t按位异或运算符：当两对应的二进位相异时，结果为1\t(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</span><br><span class=\"line\">~\t按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1\t(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</span><br><span class=\"line\">&lt;&lt;\t左移动运算符：运算数的各二进位全部左移若干位，由&quot;&lt;&lt;&quot;右边的数指定移动的位数，高位丢弃，低位补0。\ta &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</span><br><span class=\"line\">&gt;&gt;\t右移动运算符：把&quot;&gt;&gt;&quot;左边的运算数的各二进位全部右移若干位，&quot;&gt;&gt;&quot;右边的数指定移动的位数\ta &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</span><br><span class=\"line\">以下实例演示了Python所有位运算符的操作：</span><br><span class=\"line\"></span><br><span class=\"line\">实例(Python 3.0+)</span><br><span class=\"line\"> </span><br><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 60            # 60 = 0011 1100 </span><br><span class=\"line\">b = 13            # 13 = 0000 1101 </span><br><span class=\"line\">c = 0</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &amp; b;        # 12 = 0000 1100</span><br><span class=\"line\">print (&quot;1 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a | b;        # 61 = 0011 1101 </span><br><span class=\"line\">print (&quot;2 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a ^ b;        # 49 = 0011 0001</span><br><span class=\"line\">print (&quot;3 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = ~a;           # -61 = 1100 0011</span><br><span class=\"line\">print (&quot;4 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &lt;&lt; 2;       # 240 = 1111 0000</span><br><span class=\"line\">print (&quot;5 - c 的值为：&quot;, c)</span><br><span class=\"line\"> </span><br><span class=\"line\">c = a &gt;&gt; 2;       # 15 = 0000 1111</span><br><span class=\"line\">print (&quot;6 - c 的值为：&quot;, c)</span><br><span class=\"line\">以上实例输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\">1 - c 的值为： 12</span><br><span class=\"line\">2 - c 的值为： 61</span><br><span class=\"line\">3 - c 的值为： 49</span><br><span class=\"line\">4 - c 的值为： -61</span><br><span class=\"line\">5 - c 的值为： 240</span><br><span class=\"line\">6 - c 的值为： 15</span><br></pre></td></tr></table></figure></p>\n<p>Python逻辑运算符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and\tx and y\t布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。\t(a and b) 返回 20。</span><br><span class=\"line\">or\tx or y\t布尔&quot;或&quot; - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\t(a or b) 返回 10。</span><br><span class=\"line\">not\tnot x\t布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\tnot(a and b) 返回 False</span><br></pre></td></tr></table></figure></p>\n<p>Python成员运算符<br>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in\t如果在指定的序列中找到值返回 True，否则返回 False。\tx 在 y 序列中 , 如果 x 在 y 序列中返回 True。</span><br><span class=\"line\">not in\t如果在指定的序列中没有找到值返回 True，否则返回 False。\tx 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</span><br></pre></td></tr></table></figure></p>\n<p>Python身份运算符<br>身份运算符用于比较两个对象的存储单元<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">is\tis 是判断两个标识符是不是引用自一个对象\tx is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</span><br><span class=\"line\">is not\tis not 是判断两个标识符是不是引用自不同对象\tx is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</span><br><span class=\"line\">注： id() 函数用于获取对象内存地址。</span><br><span class=\"line\"></span><br><span class=\"line\">is 与 == 区别：</span><br><span class=\"line\"></span><br><span class=\"line\">is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;a = [1, 2, 3] &gt;&gt;&gt; b = a &gt;&gt;&gt; b is a True &gt;&gt;&gt; b == a True &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; b is a False &gt;&gt;&gt; b == a True</span><br></pre></td></tr></table></figure></p>\n<p>Python运算符优先级<br>以下表格列出了从最高到最低优先级的所有运算符：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**\t指数 (最高优先级)</span><br><span class=\"line\">~ + -\t按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</span><br><span class=\"line\">* / % //\t乘，除，取模和取整除</span><br><span class=\"line\">+ -\t加法减法</span><br><span class=\"line\">&gt;&gt; &lt;&lt;\t右移，左移运算符</span><br><span class=\"line\">&amp;\t位 &apos;AND&apos;</span><br><span class=\"line\">^ |\t位运算符</span><br><span class=\"line\">&lt;= &lt; &gt; &gt;=\t比较运算符</span><br><span class=\"line\">&lt;&gt; == !=\t等于运算符</span><br><span class=\"line\">= %= /= //= -= += *= **=\t赋值运算符</span><br><span class=\"line\">is is not\t身份运算符</span><br><span class=\"line\">in not in\t成员运算符</span><br><span class=\"line\">and or not\t逻辑运算符</span><br></pre></td></tr></table></figure></p>\n<p><strong>一些杂项</strong><br> <code>`</code><br>3+2-1      #4   同优先级  左集合<br>c=a+b     #先算a+b然后赋值给c  右集合<br>not (1 or 2)+2==3   #True  建议括号只用来改变优先级关系</p>\n"},{"title":"(4) python中流程控制语句","date":"2018-11-14T13:58:54.000Z","_content":"\n**条件语句**\nif elif else都是关键字，需要能读和写\n\n基本格式：\n```\n  if 条件语句1：\n    执行语句块1\n  elif 条件语句2：\n    执行语句块2\n  else：\n    执行语句块3\n```\n执行过程：\n```\na.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。\nb.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。\n```\n注意：冒号后边语句块和冒号所在得语句要保持一个缩进。\n\n**if**\n判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。\n```\n  if 条件语句：\n      执行语句块\n  \n  age=20\n  要求判断年龄是否大于18，如果大于18就输出'成年人'\n  if age>18:\n      print('成年人')\n  \n  练习：判断一个数是否是偶数，如果是就打印'xxx是偶数'\n  n=18\n  if n%2==0:\n      print('%d是偶数'%(n))\n```\n2.if-else\n判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.\n```\n  if 条件语句：\n      执行语句块1\n  else：\n      执行语句块2\n  n=17\n  if n%2==0:\n      print('%d是偶数'%(n))\n  else:\n      print('%d是奇数'%(n))\n  练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。\n  input():从控制台获取键盘输入的一个字符串，以回车结束。\n  \n  inputvalue=input('请输入一个数：')\n  print(inputvalue)\n  n=int(inputvalue)\n  比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。\n  if n>10:\n  num=n*2\n      print(num)\n  else:\n  num=n**2\n      print(num)\n```\n3.if-elif-elif-else\n总结:\n\na.如果要求中需要多个判断，可以使用多个elif的if语句。\nb.一个if/elif/else语句中可以嵌套其他的if语句。\n```\n（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)\n方法一：\ngrade=96\nif grade>=90:\n    if grade>100:\n        print('成绩有误')\n    else:\n        print('优秀')\nelif grade>=80:\n    print('良好')\nelif grade>=60:\n      print('中等')\nelif grade>=0:\n      print('不及格')\nelse:\n      print('成绩有误')\n方法二：\ngrade=67\nif 100>=grade>=90:\n  print('优秀')\nelif 90>grade>=80:\n  print('良好')\nelif 80>grade>=60:\n  print('中等')\nelif 60>grade>=0:\n  print('不及格')\nelse:\n  print('成绩有误')\n  \n（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）\nage=1\nif age<2:\n  if age<=0:\n      print('年龄输入错误')\n  else:\n      print('婴儿')\nelif age<5:\n  print('儿童')\nelif age<13:\n  print('少年')\nelif age<19:\n  print('青年')\nelif age<41:\n  print('成年')\nelif age<61:\n  print('中年')\nelse:\n  print('老年')\n说明：Python中没有switch语法。\n\npass：占位，防止因为没有写块结构而出现语法错误。\n\nif n==10:\n    pass\n```\n**转换函数**\n\n1.int()\nint():将其他的数据转换成int类型的数据\n```\nnum=12.56\nprint(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）\nbool1=True\nprint(int(bool1))  # 1 将布尔值转换成整数，True->1  False->0\nstr1='123'\nprint(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。\n```\n2.flot()\nflot():将其他数据转换成浮点型\n3.bool()\nbool()：将其他的数据转换成布尔值\n\n数字转换成布尔，非0是True，0是False。\n```\nprint(bool(12))     # True\nprint(bool(-12.3))  # True\nprint(bool(0))      # False\n字符串转换成布尔，除了空串是False，其他的都是True。\n\nprint(bool('abc'))  # True\nprint(bool(''))     # False\n```\n注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。\n```\nif 10:\n  print('aaa')   # aaa （10转换成bool后是True) \nif 0:\n  print('aaa')   #  （0转换成bool后是False）\n```\n练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”\n```\n方法1：\nstr1=''\nif str1:\n  print(str1)\nelse:\n  print('空串')\n方法2：\nstr1='abc'\nif str1!='':\n  print(str1)\nelse:\n  print('空串')\n```\n4.str()\nstr()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。\n**循环**\npython中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）\n**for循环**\npython中的for循环只有for-in循环：\n```\n格式：\nfor 变量名 in 列表：\n  循环体\n执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。\n\n循环次数：由列表中的数据的个数决定。\n\n去获取字符串中的每一个字符\nstr1='abcdef'\nfor char in str1:\n  print(char)\n\n去统计字符串中'a'出现的次数\nstr1='avaadafvaavafaaa'\nn=0\nfor char in str1:\n  if char=='a':\n      n=n+1       \nprint(n)\nrange（）函数：可以生成一个数值范围\n````\n```\n打印1-100\nfor n in range(1,101):\n  print(n)\n用法1：range(n),生成0~n-1的值\nfor x in range(9):\n  print(x)\n````\n用法2：range(m,n),生成m~n-1的数\n```\nfor n in range(5,9):\n  print(n)\n打印0-100之间所有的偶数\nfor x in range(101):\n  if x%2==0:\n      print(x)\n```\n用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。\n```\nfor x in range(1,8,2):\n  print(x)   # 1,3,5,7 \n\n不通过字符串相乘，打印10次“=”,并且打印在同一行。\nfor _ in range(10):\n  print('=',end=' ')\n```\n求1+2+3...+100\n```\nn=0\nfor x in range(1,101):\n  n=n+x\nprint(n)\n```\n注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。\n\n**while循环**\n``` \n格式：\n while 条件语句：\n    循环体\n```\n执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False\n\nfor循环可以实现的操作，while循环都可以\n\n打印1-100\n```\n方法1：\nx=0\nwhile x<100:\n  x+=1\n  print(x) \n方法2：\nx=1\nwhile x<=100:\n  print(x)\n  x+=1\n```\n计算1+2+3+...+100\n```\nx=0\nn=0\nwhile n<100:\n  n+=1\n  x+=n\n  print(x)\n```\n求1-100中所有偶数的和\n```\n方法1：\nn=0\nx=0\nwhile n<=100:\n  if n%2==0:\n      x=x+n\n      n=n+1\n  print(x)\n方法2：\nn=0\nx=0\nwhile n<100:\n  n+=2\n  x=x+n\nprint(x)\n```\n**break和continue**\n1、break\nbreak是一个让循环提前结束的关键字\n\n如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。\n\n练习:找到1000~9999中第一个能够被13整除的数，打印出来\n```\nfor x in range(1000,10000):\n  if x%13==0:\n      print(x)\n      break    \n  \nfor x in range(1,100):\n  if x==50:\n      break\n      print(x)     # 1 2 3 ...  49\n```\n用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。\n\ninput()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。\n\n注意：break只能写在循环中\n```\n  sum1=0\n  while True:\n  num=int(input(\">>>\"))   # 获取键盘输入的内容，并且转换成int类型\n      sum1+=num   # 将当次输入的数字加起来\n      if num==0:   #  判断输入的数字是否是0，如果是就让循环结束\n          break   \n      print(num)\n  print(sum1)\n```\nfor循环的特点：次数确定，可以在序列中取数据\n\nwhile循环：循环次数不确定的（while True + break）\n\nrandint(m,n):产生一个m到n的随机整数\n\n产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。\n\n  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。\n```\n  import random\n  num=random.randint(0,100)   # 产生一个0到100的随机数\n  n=0\n  while True:\n  num1=int(input(\"请输入你猜的数字：\"))\n  n=n+1\n  if num1>num:\n      print('大了')\n  elif num1<num:\n      print('小了')\n  else:\n      print('恭喜你，猜对了！')       \n      print('一共猜了：%d次'%(n),end='  ')\n      if n<=5:\n          print('你太棒了，只猜了%d次就猜对了'%(n))\n      else:\n          print('下次加油！')\n      break\n```\n2、continue\ncontinue:结束当次循环，进入下次循环\n```\n  for x in range(1,10):\n      print('=')\n      continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断\n      print(x)\n  ````\n  求1~100中所有奇数的和\n```\n  sum=0\n  for x in range(1,100):\n      if x%2==0:\n          continue\n      sum=sum+x\n  print(sum)\n  ```\n  打印100~999中十位数上不是3的所有数：\n```\n  for x in range(100,1000):\n      if x//10%10==3:\n          continue\n      print(x)   \n ``` \n  统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）\n```\n  flag=True\n  n=0\n  while True:\n      num=int(input('请输入一个数：'))  # 输入数据\n      if num%2==1:  # 判断是否是奇数\n          continue\n      if num==0:\n          flag=False\n      n=n+1\n  print(n)\n````\n**else**\npython中循环语句后面可以加else语句。这个else语句会在循环结束后执行。\n```\n for 变量 in 序列：\n  循环体\n else：\n  循环结束后会执行的语句块\n ```\n```\n 1*2*3...*10\n sum1=1\n for x in range(1,11):\n  sum1*=x\n else:\n  print(sum1)\n```\n注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）\n\n  1*2*3...*10，当乘积大于10000就不在执行\n```\n  sum1=1\n  for x in range(1,11):\n      if sum1*x>10000:    \n          break\n      sum1*=x\n  print(sum1)\n  else:\n      print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行\n```\n**多重循环**\n在循环体里面可以有其他的循环语句，结构为：\n```\n for 变量 in 序列：\n     for 变量1 in 序列2：\n      循环体2\n  其它的循环语句\n \n for 变量 in 序列：\n  其他的循环语句1\n  while 条件语句：\n      循环体2\n  其他的循环语句2\n \n while 条件语句1：\n  while 条件语句2：\n      循环体2\n  其他的循环语句2\n```\n例如：\n```\n  如果n=5 打印\n  1\n  12\n  123\n  1234\n  12345\n\n  n=5\n  for x in range(1,n+1):   # 控制行数\n      for b in range(1,x+1):  # 控制当前行的数值\n          print(b,end='')\n      print()   # 一行结束换行\n\n  *****\n  ****\n  ***\n  **\n  *\n  n=5\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n  \n  n=10\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n```\n参考了简书中某人的记录，但找不到具体是谁了。侵删。\n","source":"_posts/python基础/python中流程控制语句.md","raw":"---\ntitle: (4) python中流程控制语句\ndate: 2018-11-14 21:58:54\ntags:\ncategories: python基础\n---\n\n**条件语句**\nif elif else都是关键字，需要能读和写\n\n基本格式：\n```\n  if 条件语句1：\n    执行语句块1\n  elif 条件语句2：\n    执行语句块2\n  else：\n    执行语句块3\n```\n执行过程：\n```\na.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。\nb.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。\n```\n注意：冒号后边语句块和冒号所在得语句要保持一个缩进。\n\n**if**\n判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。\n```\n  if 条件语句：\n      执行语句块\n  \n  age=20\n  要求判断年龄是否大于18，如果大于18就输出'成年人'\n  if age>18:\n      print('成年人')\n  \n  练习：判断一个数是否是偶数，如果是就打印'xxx是偶数'\n  n=18\n  if n%2==0:\n      print('%d是偶数'%(n))\n```\n2.if-else\n判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.\n```\n  if 条件语句：\n      执行语句块1\n  else：\n      执行语句块2\n  n=17\n  if n%2==0:\n      print('%d是偶数'%(n))\n  else:\n      print('%d是奇数'%(n))\n  练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。\n  input():从控制台获取键盘输入的一个字符串，以回车结束。\n  \n  inputvalue=input('请输入一个数：')\n  print(inputvalue)\n  n=int(inputvalue)\n  比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。\n  if n>10:\n  num=n*2\n      print(num)\n  else:\n  num=n**2\n      print(num)\n```\n3.if-elif-elif-else\n总结:\n\na.如果要求中需要多个判断，可以使用多个elif的if语句。\nb.一个if/elif/else语句中可以嵌套其他的if语句。\n```\n（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)\n方法一：\ngrade=96\nif grade>=90:\n    if grade>100:\n        print('成绩有误')\n    else:\n        print('优秀')\nelif grade>=80:\n    print('良好')\nelif grade>=60:\n      print('中等')\nelif grade>=0:\n      print('不及格')\nelse:\n      print('成绩有误')\n方法二：\ngrade=67\nif 100>=grade>=90:\n  print('优秀')\nelif 90>grade>=80:\n  print('良好')\nelif 80>grade>=60:\n  print('中等')\nelif 60>grade>=0:\n  print('不及格')\nelse:\n  print('成绩有误')\n  \n（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）\nage=1\nif age<2:\n  if age<=0:\n      print('年龄输入错误')\n  else:\n      print('婴儿')\nelif age<5:\n  print('儿童')\nelif age<13:\n  print('少年')\nelif age<19:\n  print('青年')\nelif age<41:\n  print('成年')\nelif age<61:\n  print('中年')\nelse:\n  print('老年')\n说明：Python中没有switch语法。\n\npass：占位，防止因为没有写块结构而出现语法错误。\n\nif n==10:\n    pass\n```\n**转换函数**\n\n1.int()\nint():将其他的数据转换成int类型的数据\n```\nnum=12.56\nprint(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）\nbool1=True\nprint(int(bool1))  # 1 将布尔值转换成整数，True->1  False->0\nstr1='123'\nprint(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。\n```\n2.flot()\nflot():将其他数据转换成浮点型\n3.bool()\nbool()：将其他的数据转换成布尔值\n\n数字转换成布尔，非0是True，0是False。\n```\nprint(bool(12))     # True\nprint(bool(-12.3))  # True\nprint(bool(0))      # False\n字符串转换成布尔，除了空串是False，其他的都是True。\n\nprint(bool('abc'))  # True\nprint(bool(''))     # False\n```\n注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。\n```\nif 10:\n  print('aaa')   # aaa （10转换成bool后是True) \nif 0:\n  print('aaa')   #  （0转换成bool后是False）\n```\n练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”\n```\n方法1：\nstr1=''\nif str1:\n  print(str1)\nelse:\n  print('空串')\n方法2：\nstr1='abc'\nif str1!='':\n  print(str1)\nelse:\n  print('空串')\n```\n4.str()\nstr()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。\n**循环**\npython中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）\n**for循环**\npython中的for循环只有for-in循环：\n```\n格式：\nfor 变量名 in 列表：\n  循环体\n执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。\n\n循环次数：由列表中的数据的个数决定。\n\n去获取字符串中的每一个字符\nstr1='abcdef'\nfor char in str1:\n  print(char)\n\n去统计字符串中'a'出现的次数\nstr1='avaadafvaavafaaa'\nn=0\nfor char in str1:\n  if char=='a':\n      n=n+1       \nprint(n)\nrange（）函数：可以生成一个数值范围\n````\n```\n打印1-100\nfor n in range(1,101):\n  print(n)\n用法1：range(n),生成0~n-1的值\nfor x in range(9):\n  print(x)\n````\n用法2：range(m,n),生成m~n-1的数\n```\nfor n in range(5,9):\n  print(n)\n打印0-100之间所有的偶数\nfor x in range(101):\n  if x%2==0:\n      print(x)\n```\n用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。\n```\nfor x in range(1,8,2):\n  print(x)   # 1,3,5,7 \n\n不通过字符串相乘，打印10次“=”,并且打印在同一行。\nfor _ in range(10):\n  print('=',end=' ')\n```\n求1+2+3...+100\n```\nn=0\nfor x in range(1,101):\n  n=n+x\nprint(n)\n```\n注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。\n\n**while循环**\n``` \n格式：\n while 条件语句：\n    循环体\n```\n执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False\n\nfor循环可以实现的操作，while循环都可以\n\n打印1-100\n```\n方法1：\nx=0\nwhile x<100:\n  x+=1\n  print(x) \n方法2：\nx=1\nwhile x<=100:\n  print(x)\n  x+=1\n```\n计算1+2+3+...+100\n```\nx=0\nn=0\nwhile n<100:\n  n+=1\n  x+=n\n  print(x)\n```\n求1-100中所有偶数的和\n```\n方法1：\nn=0\nx=0\nwhile n<=100:\n  if n%2==0:\n      x=x+n\n      n=n+1\n  print(x)\n方法2：\nn=0\nx=0\nwhile n<100:\n  n+=2\n  x=x+n\nprint(x)\n```\n**break和continue**\n1、break\nbreak是一个让循环提前结束的关键字\n\n如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。\n\n练习:找到1000~9999中第一个能够被13整除的数，打印出来\n```\nfor x in range(1000,10000):\n  if x%13==0:\n      print(x)\n      break    \n  \nfor x in range(1,100):\n  if x==50:\n      break\n      print(x)     # 1 2 3 ...  49\n```\n用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。\n\ninput()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。\n\n注意：break只能写在循环中\n```\n  sum1=0\n  while True:\n  num=int(input(\">>>\"))   # 获取键盘输入的内容，并且转换成int类型\n      sum1+=num   # 将当次输入的数字加起来\n      if num==0:   #  判断输入的数字是否是0，如果是就让循环结束\n          break   \n      print(num)\n  print(sum1)\n```\nfor循环的特点：次数确定，可以在序列中取数据\n\nwhile循环：循环次数不确定的（while True + break）\n\nrandint(m,n):产生一个m到n的随机整数\n\n产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。\n\n  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。\n```\n  import random\n  num=random.randint(0,100)   # 产生一个0到100的随机数\n  n=0\n  while True:\n  num1=int(input(\"请输入你猜的数字：\"))\n  n=n+1\n  if num1>num:\n      print('大了')\n  elif num1<num:\n      print('小了')\n  else:\n      print('恭喜你，猜对了！')       \n      print('一共猜了：%d次'%(n),end='  ')\n      if n<=5:\n          print('你太棒了，只猜了%d次就猜对了'%(n))\n      else:\n          print('下次加油！')\n      break\n```\n2、continue\ncontinue:结束当次循环，进入下次循环\n```\n  for x in range(1,10):\n      print('=')\n      continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断\n      print(x)\n  ````\n  求1~100中所有奇数的和\n```\n  sum=0\n  for x in range(1,100):\n      if x%2==0:\n          continue\n      sum=sum+x\n  print(sum)\n  ```\n  打印100~999中十位数上不是3的所有数：\n```\n  for x in range(100,1000):\n      if x//10%10==3:\n          continue\n      print(x)   \n ``` \n  统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）\n```\n  flag=True\n  n=0\n  while True:\n      num=int(input('请输入一个数：'))  # 输入数据\n      if num%2==1:  # 判断是否是奇数\n          continue\n      if num==0:\n          flag=False\n      n=n+1\n  print(n)\n````\n**else**\npython中循环语句后面可以加else语句。这个else语句会在循环结束后执行。\n```\n for 变量 in 序列：\n  循环体\n else：\n  循环结束后会执行的语句块\n ```\n```\n 1*2*3...*10\n sum1=1\n for x in range(1,11):\n  sum1*=x\n else:\n  print(sum1)\n```\n注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）\n\n  1*2*3...*10，当乘积大于10000就不在执行\n```\n  sum1=1\n  for x in range(1,11):\n      if sum1*x>10000:    \n          break\n      sum1*=x\n  print(sum1)\n  else:\n      print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行\n```\n**多重循环**\n在循环体里面可以有其他的循环语句，结构为：\n```\n for 变量 in 序列：\n     for 变量1 in 序列2：\n      循环体2\n  其它的循环语句\n \n for 变量 in 序列：\n  其他的循环语句1\n  while 条件语句：\n      循环体2\n  其他的循环语句2\n \n while 条件语句1：\n  while 条件语句2：\n      循环体2\n  其他的循环语句2\n```\n例如：\n```\n  如果n=5 打印\n  1\n  12\n  123\n  1234\n  12345\n\n  n=5\n  for x in range(1,n+1):   # 控制行数\n      for b in range(1,x+1):  # 控制当前行的数值\n          print(b,end='')\n      print()   # 一行结束换行\n\n  *****\n  ****\n  ***\n  **\n  *\n  n=5\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n  \n  n=10\n  for x in range(1,n+1):\n      for b in range(x,n+1):\n          print('*',end='')\n      print()\n```\n参考了简书中某人的记录，但找不到具体是谁了。侵删。\n","slug":"python基础/python中流程控制语句","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2f004ttssaewpdxhd5","content":"<p><strong>条件语句</strong><br>if elif else都是关键字，需要能读和写</p>\n<p>基本格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句1：</span><br><span class=\"line\">  执行语句块1</span><br><span class=\"line\">elif 条件语句2：</span><br><span class=\"line\">  执行语句块2</span><br><span class=\"line\">else：</span><br><span class=\"line\">  执行语句块3</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。</span><br><span class=\"line\">b.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。</span><br></pre></td></tr></table></figure></p>\n<p>注意：冒号后边语句块和冒号所在得语句要保持一个缩进。</p>\n<p><strong>if</strong><br>判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块</span><br><span class=\"line\"></span><br><span class=\"line\">age=20</span><br><span class=\"line\">要求判断年龄是否大于18，如果大于18就输出&apos;成年人&apos;</span><br><span class=\"line\">if age&gt;18:</span><br><span class=\"line\">    print(&apos;成年人&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">练习：判断一个数是否是偶数，如果是就打印&apos;xxx是偶数&apos;</span><br><span class=\"line\">n=18</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br></pre></td></tr></table></figure></p>\n<p>2.if-else<br>判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块1</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句块2</span><br><span class=\"line\">n=17</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;%d是奇数&apos;%(n))</span><br><span class=\"line\">练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。</span><br><span class=\"line\">input():从控制台获取键盘输入的一个字符串，以回车结束。</span><br><span class=\"line\"></span><br><span class=\"line\">inputvalue=input(&apos;请输入一个数：&apos;)</span><br><span class=\"line\">print(inputvalue)</span><br><span class=\"line\">n=int(inputvalue)</span><br><span class=\"line\">比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。</span><br><span class=\"line\">if n&gt;10:</span><br><span class=\"line\">num=n*2</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">else:</span><br><span class=\"line\">num=n**2</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure></p>\n<p>3.if-elif-elif-else<br>总结:</p>\n<p>a.如果要求中需要多个判断，可以使用多个elif的if语句。<br>b.一个if/elif/else语句中可以嵌套其他的if语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)</span><br><span class=\"line\">方法一：</span><br><span class=\"line\">grade=96</span><br><span class=\"line\">if grade&gt;=90:</span><br><span class=\"line\">    if grade&gt;100:</span><br><span class=\"line\">        print(&apos;成绩有误&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;优秀&apos;)</span><br><span class=\"line\">elif grade&gt;=80:</span><br><span class=\"line\">    print(&apos;良好&apos;)</span><br><span class=\"line\">elif grade&gt;=60:</span><br><span class=\"line\">      print(&apos;中等&apos;)</span><br><span class=\"line\">elif grade&gt;=0:</span><br><span class=\"line\">      print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">      print(&apos;成绩有误&apos;)</span><br><span class=\"line\">方法二：</span><br><span class=\"line\">grade=67</span><br><span class=\"line\">if 100&gt;=grade&gt;=90:</span><br><span class=\"line\">  print(&apos;优秀&apos;)</span><br><span class=\"line\">elif 90&gt;grade&gt;=80:</span><br><span class=\"line\">  print(&apos;良好&apos;)</span><br><span class=\"line\">elif 80&gt;grade&gt;=60:</span><br><span class=\"line\">  print(&apos;中等&apos;)</span><br><span class=\"line\">elif 60&gt;grade&gt;=0:</span><br><span class=\"line\">  print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;成绩有误&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）</span><br><span class=\"line\">age=1</span><br><span class=\"line\">if age&lt;2:</span><br><span class=\"line\">  if age&lt;=0:</span><br><span class=\"line\">      print(&apos;年龄输入错误&apos;)</span><br><span class=\"line\">  else:</span><br><span class=\"line\">      print(&apos;婴儿&apos;)</span><br><span class=\"line\">elif age&lt;5:</span><br><span class=\"line\">  print(&apos;儿童&apos;)</span><br><span class=\"line\">elif age&lt;13:</span><br><span class=\"line\">  print(&apos;少年&apos;)</span><br><span class=\"line\">elif age&lt;19:</span><br><span class=\"line\">  print(&apos;青年&apos;)</span><br><span class=\"line\">elif age&lt;41:</span><br><span class=\"line\">  print(&apos;成年&apos;)</span><br><span class=\"line\">elif age&lt;61:</span><br><span class=\"line\">  print(&apos;中年&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;老年&apos;)</span><br><span class=\"line\">说明：Python中没有switch语法。</span><br><span class=\"line\"></span><br><span class=\"line\">pass：占位，防止因为没有写块结构而出现语法错误。</span><br><span class=\"line\"></span><br><span class=\"line\">if n==10:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>转换函数</strong></p>\n<p>1.int()<br>int():将其他的数据转换成int类型的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=12.56</span><br><span class=\"line\">print(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）</span><br><span class=\"line\">bool1=True</span><br><span class=\"line\">print(int(bool1))  # 1 将布尔值转换成整数，True-&gt;1  False-&gt;0</span><br><span class=\"line\">str1=&apos;123&apos;</span><br><span class=\"line\">print(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。</span><br></pre></td></tr></table></figure></p>\n<p>2.flot()<br>flot():将其他数据转换成浮点型<br>3.bool()<br>bool()：将其他的数据转换成布尔值</p>\n<p>数字转换成布尔，非0是True，0是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(12))     # True</span><br><span class=\"line\">print(bool(-12.3))  # True</span><br><span class=\"line\">print(bool(0))      # False</span><br><span class=\"line\">字符串转换成布尔，除了空串是False，其他的都是True。</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&apos;abc&apos;))  # True</span><br><span class=\"line\">print(bool(&apos;&apos;))     # False</span><br></pre></td></tr></table></figure></p>\n<p>注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 10:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   # aaa （10转换成bool后是True) </span><br><span class=\"line\">if 0:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   #  （0转换成bool后是False）</span><br></pre></td></tr></table></figure></p>\n<p>练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">str1=&apos;&apos;</span><br><span class=\"line\">if str1:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">str1=&apos;abc&apos;</span><br><span class=\"line\">if str1!=&apos;&apos;:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>4.str()<br>str()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。<br><strong>循环</strong><br>python中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）<br><strong>for循环</strong><br>python中的for循环只有for-in循环：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">for 变量名 in 列表：</span><br><span class=\"line\">  循环体</span><br><span class=\"line\">执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。</span><br><span class=\"line\"></span><br><span class=\"line\">循环次数：由列表中的数据的个数决定。</span><br><span class=\"line\"></span><br><span class=\"line\">去获取字符串中的每一个字符</span><br><span class=\"line\">str1=&apos;abcdef&apos;</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  print(char)</span><br><span class=\"line\"></span><br><span class=\"line\">去统计字符串中&apos;a&apos;出现的次数</span><br><span class=\"line\">str1=&apos;avaadafvaavafaaa&apos;</span><br><span class=\"line\">n=0</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  if char==&apos;a&apos;:</span><br><span class=\"line\">      n=n+1       </span><br><span class=\"line\">print(n)</span><br><span class=\"line\">range（）函数：可以生成一个数值范围</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印1-100</span><br><span class=\"line\">for n in range(1,101):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">用法1：range(n),生成0~n-1的值</span><br><span class=\"line\">for x in range(9):</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>用法2：range(m,n),生成m~n-1的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(5,9):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">打印0-100之间所有的偶数</span><br><span class=\"line\">for x in range(101):</span><br><span class=\"line\">  if x%2==0:</span><br><span class=\"line\">      print(x)</span><br></pre></td></tr></table></figure></p>\n<p>用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,8,2):</span><br><span class=\"line\">  print(x)   # 1,3,5,7 </span><br><span class=\"line\"></span><br><span class=\"line\">不通过字符串相乘，打印10次“=”,并且打印在同一行。</span><br><span class=\"line\">for _ in range(10):</span><br><span class=\"line\">  print(&apos;=&apos;,end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>\n<p>求1+2+3…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0</span><br><span class=\"line\">for x in range(1,101):</span><br><span class=\"line\">  n=n+x</span><br><span class=\"line\">print(n)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。</p>\n<p><strong>while循环</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False</p>\n<p>for循环可以实现的操作，while循环都可以</p>\n<p>打印1-100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while x&lt;100:</span><br><span class=\"line\">  x+=1</span><br><span class=\"line\">  print(x) </span><br><span class=\"line\">方法2：</span><br><span class=\"line\">x=1</span><br><span class=\"line\">while x&lt;=100:</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">  x+=1</span><br></pre></td></tr></table></figure></p>\n<p>计算1+2+3+…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=1</span><br><span class=\"line\">  x+=n</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure></p>\n<p>求1-100中所有偶数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;=100:</span><br><span class=\"line\">  if n%2==0:</span><br><span class=\"line\">      x=x+n</span><br><span class=\"line\">      n=n+1</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=2</span><br><span class=\"line\">  x=x+n</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></figure></p>\n<p><strong>break和continue</strong><br>1、break<br>break是一个让循环提前结束的关键字</p>\n<p>如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。</p>\n<p>练习:找到1000~9999中第一个能够被13整除的数，打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1000,10000):</span><br><span class=\"line\">  if x%13==0:</span><br><span class=\"line\">      print(x)</span><br><span class=\"line\">      break    </span><br><span class=\"line\">  </span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">  if x==50:</span><br><span class=\"line\">      break</span><br><span class=\"line\">      print(x)     # 1 2 3 ...  49</span><br></pre></td></tr></table></figure></p>\n<p>用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。</p>\n<p>input()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。</p>\n<p>注意：break只能写在循环中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num=int(input(&quot;&gt;&gt;&gt;&quot;))   # 获取键盘输入的内容，并且转换成int类型</span><br><span class=\"line\">    sum1+=num   # 将当次输入的数字加起来</span><br><span class=\"line\">    if num==0:   #  判断输入的数字是否是0，如果是就让循环结束</span><br><span class=\"line\">        break   </span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>for循环的特点：次数确定，可以在序列中取数据</p>\n<p>while循环：循环次数不确定的（while True + break）</p>\n<p>randint(m,n):产生一个m到n的随机整数</p>\n<p>产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。</p>\n<p>  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">num=random.randint(0,100)   # 产生一个0到100的随机数</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num1=int(input(&quot;请输入你猜的数字：&quot;))</span><br><span class=\"line\">n=n+1</span><br><span class=\"line\">if num1&gt;num:</span><br><span class=\"line\">    print(&apos;大了&apos;)</span><br><span class=\"line\">elif num1&lt;num:</span><br><span class=\"line\">    print(&apos;小了&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;恭喜你，猜对了！&apos;)       </span><br><span class=\"line\">    print(&apos;一共猜了：%d次&apos;%(n),end=&apos;  &apos;)</span><br><span class=\"line\">    if n&lt;=5:</span><br><span class=\"line\">        print(&apos;你太棒了，只猜了%d次就猜对了&apos;%(n))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;下次加油！&apos;)</span><br><span class=\"line\">    break</span><br></pre></td></tr></table></figure></p>\n<p>2、continue<br>continue:结束当次循环，进入下次循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,10):</span><br><span class=\"line\">    print(&apos;=&apos;)</span><br><span class=\"line\">    continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>  求1~100中所有奇数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=0</span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">    if x%2==0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum=sum+x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure></p>\n<p>  打印100~999中十位数上不是3的所有数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> for x in range(100,1000):</span><br><span class=\"line\">     if x//10%10==3:</span><br><span class=\"line\">         continue</span><br><span class=\"line\">     print(x)   </span><br><span class=\"line\">``` </span><br><span class=\"line\"> 统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）</span><br></pre></td></tr></table></figure></p>\n<p>  flag=True<br>  n=0<br>  while True:<br>      num=int(input(‘请输入一个数：’))  # 输入数据<br>      if num%2==1:  # 判断是否是奇数<br>          continue<br>      if num==0:<br>          flag=False<br>      n=n+1<br>  print(n)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**else**</span><br><span class=\"line\">python中循环语句后面可以加else语句。这个else语句会在循环结束后执行。</span><br></pre></td></tr></table></figure></p>\n<p> for 变量 in 序列：<br>  循环体<br> else：<br>  循环结束后会执行的语句块<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"> 1*2*3...*10</span><br><span class=\"line\"> sum1=1</span><br><span class=\"line\"> for x in range(1,11):</span><br><span class=\"line\">  sum1*=x</span><br><span class=\"line\"> else:</span><br><span class=\"line\">  print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）</p>\n<p>  1<em>2</em>3…*10，当乘积大于10000就不在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=1</span><br><span class=\"line\">for x in range(1,11):</span><br><span class=\"line\">    if sum1*x&gt;10000:    </span><br><span class=\"line\">        break</span><br><span class=\"line\">    sum1*=x</span><br><span class=\"line\">print(sum1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行</span><br></pre></td></tr></table></figure></p>\n<p><strong>多重循环</strong><br>在循环体里面可以有其他的循环语句，结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\">    for 变量1 in 序列2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其它的循环语句</span><br><span class=\"line\"></span><br><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\"> 其他的循环语句1</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件语句1：</span><br><span class=\"line\"> while 条件语句2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果n=5 打印</span><br><span class=\"line\">1</span><br><span class=\"line\">12</span><br><span class=\"line\">123</span><br><span class=\"line\">1234</span><br><span class=\"line\">12345</span><br><span class=\"line\"></span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):   # 控制行数</span><br><span class=\"line\">    for b in range(1,x+1):  # 控制当前行的数值</span><br><span class=\"line\">        print(b,end=&apos;&apos;)</span><br><span class=\"line\">    print()   # 一行结束换行</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\">****</span><br><span class=\"line\">***</span><br><span class=\"line\">**</span><br><span class=\"line\">*</span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">n=10</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p>参考了简书中某人的记录，但找不到具体是谁了。侵删。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>条件语句</strong><br>if elif else都是关键字，需要能读和写</p>\n<p>基本格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句1：</span><br><span class=\"line\">  执行语句块1</span><br><span class=\"line\">elif 条件语句2：</span><br><span class=\"line\">  执行语句块2</span><br><span class=\"line\">else：</span><br><span class=\"line\">  执行语句块3</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.先判断条件语句1是否为True，如果为True就执行冒号后边的执行语句块1，整个条件结构就执行完了;如果是False，就去判断条件语句2是否为True。</span><br><span class=\"line\">b.如果是True就执行执行语句块2，再执行其他语句;如果是False,就直接执行语句块3，再执行其他语句。</span><br></pre></td></tr></table></figure></p>\n<p>注意：冒号后边语句块和冒号所在得语句要保持一个缩进。</p>\n<p><strong>if</strong><br>判断条件语句的值是否为True，如果为True，就只执行执行语句块。否则就直接执行if语句后面的其他语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块</span><br><span class=\"line\"></span><br><span class=\"line\">age=20</span><br><span class=\"line\">要求判断年龄是否大于18，如果大于18就输出&apos;成年人&apos;</span><br><span class=\"line\">if age&gt;18:</span><br><span class=\"line\">    print(&apos;成年人&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">练习：判断一个数是否是偶数，如果是就打印&apos;xxx是偶数&apos;</span><br><span class=\"line\">n=18</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br></pre></td></tr></table></figure></p>\n<p>2.if-else<br>判断条件语句是否为True，如果为True，就执行语句块1;否则就执行语句块2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 条件语句：</span><br><span class=\"line\">    执行语句块1</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句块2</span><br><span class=\"line\">n=17</span><br><span class=\"line\">if n%2==0:</span><br><span class=\"line\">    print(&apos;%d是偶数&apos;%(n))</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;%d是奇数&apos;%(n))</span><br><span class=\"line\">练习：输入一个数，如果这个数大于10，就输出他的2倍值。否  则输出这个数的2次幂。</span><br><span class=\"line\">input():从控制台获取键盘输入的一个字符串，以回车结束。</span><br><span class=\"line\"></span><br><span class=\"line\">inputvalue=input(&apos;请输入一个数：&apos;)</span><br><span class=\"line\">print(inputvalue)</span><br><span class=\"line\">n=int(inputvalue)</span><br><span class=\"line\">比较运算符和+以及*，在运算的时候，两边可以都是字符串，也可以都是数字，但是不可以一样一个。</span><br><span class=\"line\">if n&gt;10:</span><br><span class=\"line\">num=n*2</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">else:</span><br><span class=\"line\">num=n**2</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure></p>\n<p>3.if-elif-elif-else<br>总结:</p>\n<p>a.如果要求中需要多个判断，可以使用多个elif的if语句。<br>b.一个if/elif/else语句中可以嵌套其他的if语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）给一个成绩，判断成绩是优秀(90-100)、良好(80-89)、        中等(60-79)、不及格(60以下)</span><br><span class=\"line\">方法一：</span><br><span class=\"line\">grade=96</span><br><span class=\"line\">if grade&gt;=90:</span><br><span class=\"line\">    if grade&gt;100:</span><br><span class=\"line\">        print(&apos;成绩有误&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;优秀&apos;)</span><br><span class=\"line\">elif grade&gt;=80:</span><br><span class=\"line\">    print(&apos;良好&apos;)</span><br><span class=\"line\">elif grade&gt;=60:</span><br><span class=\"line\">      print(&apos;中等&apos;)</span><br><span class=\"line\">elif grade&gt;=0:</span><br><span class=\"line\">      print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">      print(&apos;成绩有误&apos;)</span><br><span class=\"line\">方法二：</span><br><span class=\"line\">grade=67</span><br><span class=\"line\">if 100&gt;=grade&gt;=90:</span><br><span class=\"line\">  print(&apos;优秀&apos;)</span><br><span class=\"line\">elif 90&gt;grade&gt;=80:</span><br><span class=\"line\">  print(&apos;良好&apos;)</span><br><span class=\"line\">elif 80&gt;grade&gt;=60:</span><br><span class=\"line\">  print(&apos;中等&apos;)</span><br><span class=\"line\">elif 60&gt;grade&gt;=0:</span><br><span class=\"line\">  print(&apos;不及格&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;成绩有误&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">（2）给个年龄，判断年龄处于：婴儿（0-1岁）、儿童（2-4         岁）、少年（5-12岁）、青年（13-18岁）、成年（19-40）、       中年（41-60）、老年（60以上）</span><br><span class=\"line\">age=1</span><br><span class=\"line\">if age&lt;2:</span><br><span class=\"line\">  if age&lt;=0:</span><br><span class=\"line\">      print(&apos;年龄输入错误&apos;)</span><br><span class=\"line\">  else:</span><br><span class=\"line\">      print(&apos;婴儿&apos;)</span><br><span class=\"line\">elif age&lt;5:</span><br><span class=\"line\">  print(&apos;儿童&apos;)</span><br><span class=\"line\">elif age&lt;13:</span><br><span class=\"line\">  print(&apos;少年&apos;)</span><br><span class=\"line\">elif age&lt;19:</span><br><span class=\"line\">  print(&apos;青年&apos;)</span><br><span class=\"line\">elif age&lt;41:</span><br><span class=\"line\">  print(&apos;成年&apos;)</span><br><span class=\"line\">elif age&lt;61:</span><br><span class=\"line\">  print(&apos;中年&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;老年&apos;)</span><br><span class=\"line\">说明：Python中没有switch语法。</span><br><span class=\"line\"></span><br><span class=\"line\">pass：占位，防止因为没有写块结构而出现语法错误。</span><br><span class=\"line\"></span><br><span class=\"line\">if n==10:</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure></p>\n<p><strong>转换函数</strong></p>\n<p>1.int()<br>int():将其他的数据转换成int类型的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=12.56</span><br><span class=\"line\">print(int(num))    # 12 将浮点数转换成整数（直接去掉小数部分）</span><br><span class=\"line\">bool1=True</span><br><span class=\"line\">print(int(bool1))  # 1 将布尔值转换成整数，True-&gt;1  False-&gt;0</span><br><span class=\"line\">str1=&apos;123&apos;</span><br><span class=\"line\">print(int(str1))   # 123 只有纯数字字符串或者纯数字字符串前有正负号的字符串才能转换成相应的整数。</span><br></pre></td></tr></table></figure></p>\n<p>2.flot()<br>flot():将其他数据转换成浮点型<br>3.bool()<br>bool()：将其他的数据转换成布尔值</p>\n<p>数字转换成布尔，非0是True，0是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(bool(12))     # True</span><br><span class=\"line\">print(bool(-12.3))  # True</span><br><span class=\"line\">print(bool(0))      # False</span><br><span class=\"line\">字符串转换成布尔，除了空串是False，其他的都是True。</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(&apos;abc&apos;))  # True</span><br><span class=\"line\">print(bool(&apos;&apos;))     # False</span><br></pre></td></tr></table></figure></p>\n<p>注意：在if或者while循环后的条件语句，可以不是结果为True/False的表达式，也可以是值是其他类型的表达式.判断的是时候就看这个值转换成bool后的结果是True还是False。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 10:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   # aaa （10转换成bool后是True) </span><br><span class=\"line\">if 0:</span><br><span class=\"line\">  print(&apos;aaa&apos;)   #  （0转换成bool后是False）</span><br></pre></td></tr></table></figure></p>\n<p>练习：判断一个字符串是否是空串，如果不是就直接打印这个字符       串，否则打印“空串”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">str1=&apos;&apos;</span><br><span class=\"line\">if str1:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">str1=&apos;abc&apos;</span><br><span class=\"line\">if str1!=&apos;&apos;:</span><br><span class=\"line\">  print(str1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">  print(&apos;空串&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>4.str()<br>str()：将其他的数据转换成字符串。所有的数据类型都可以转换成字符串。<br><strong>循环</strong><br>python中循环：for循环、while循环（一个操作需要重复执行多次，这个时候就要考虑使用循环）<br><strong>for循环</strong><br>python中的for循环只有for-in循环：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">for 变量名 in 列表：</span><br><span class=\"line\">  循环体</span><br><span class=\"line\">执行过程：使用变量去依次获取列表中的数据直到获取完为止;没获取一个数据，执行一次循环体。</span><br><span class=\"line\"></span><br><span class=\"line\">循环次数：由列表中的数据的个数决定。</span><br><span class=\"line\"></span><br><span class=\"line\">去获取字符串中的每一个字符</span><br><span class=\"line\">str1=&apos;abcdef&apos;</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  print(char)</span><br><span class=\"line\"></span><br><span class=\"line\">去统计字符串中&apos;a&apos;出现的次数</span><br><span class=\"line\">str1=&apos;avaadafvaavafaaa&apos;</span><br><span class=\"line\">n=0</span><br><span class=\"line\">for char in str1:</span><br><span class=\"line\">  if char==&apos;a&apos;:</span><br><span class=\"line\">      n=n+1       </span><br><span class=\"line\">print(n)</span><br><span class=\"line\">range（）函数：可以生成一个数值范围</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印1-100</span><br><span class=\"line\">for n in range(1,101):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">用法1：range(n),生成0~n-1的值</span><br><span class=\"line\">for x in range(9):</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<p>用法2：range(m,n),生成m~n-1的数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n in range(5,9):</span><br><span class=\"line\">  print(n)</span><br><span class=\"line\">打印0-100之间所有的偶数</span><br><span class=\"line\">for x in range(101):</span><br><span class=\"line\">  if x%2==0:</span><br><span class=\"line\">      print(x)</span><br></pre></td></tr></table></figure></p>\n<p>用法3：range(m,n,step):从m开始每step取一个数，取到n前       一个数为止。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,8,2):</span><br><span class=\"line\">  print(x)   # 1,3,5,7 </span><br><span class=\"line\"></span><br><span class=\"line\">不通过字符串相乘，打印10次“=”,并且打印在同一行。</span><br><span class=\"line\">for _ in range(10):</span><br><span class=\"line\">  print(&apos;=&apos;,end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>\n<p>求1+2+3…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n=0</span><br><span class=\"line\">for x in range(1,101):</span><br><span class=\"line\">  n=n+x</span><br><span class=\"line\">print(n)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果循环中的变量取到的值没有意义，循环只是单纯的控制次数，这个时候for后面的变量名一般用“_”代替。</p>\n<p><strong>while循环</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure></p>\n<p>执行过程：判断条件语句结果是否为True，如果为True就执行一次循环体。执行完循环体后再判断条件语句是否为True，如果为True继续执行循环体。重复这个过程，直到条件语句结果为False</p>\n<p>for循环可以实现的操作，while循环都可以</p>\n<p>打印1-100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while x&lt;100:</span><br><span class=\"line\">  x+=1</span><br><span class=\"line\">  print(x) </span><br><span class=\"line\">方法2：</span><br><span class=\"line\">x=1</span><br><span class=\"line\">while x&lt;=100:</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">  x+=1</span><br></pre></td></tr></table></figure></p>\n<p>计算1+2+3+…+100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=1</span><br><span class=\"line\">  x+=n</span><br><span class=\"line\">  print(x)</span><br></pre></td></tr></table></figure></p>\n<p>求1-100中所有偶数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;=100:</span><br><span class=\"line\">  if n%2==0:</span><br><span class=\"line\">      x=x+n</span><br><span class=\"line\">      n=n+1</span><br><span class=\"line\">  print(x)</span><br><span class=\"line\">方法2：</span><br><span class=\"line\">n=0</span><br><span class=\"line\">x=0</span><br><span class=\"line\">while n&lt;100:</span><br><span class=\"line\">  n+=2</span><br><span class=\"line\">  x=x+n</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></figure></p>\n<p><strong>break和continue</strong><br>1、break<br>break是一个让循环提前结束的关键字</p>\n<p>如果在for循环或者while循环中遇到了break，那么循环就在break的位置直接结束。结束后程序执行循环后边的代码。</p>\n<p>练习:找到1000~9999中第一个能够被13整除的数，打印出来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1000,10000):</span><br><span class=\"line\">  if x%13==0:</span><br><span class=\"line\">      print(x)</span><br><span class=\"line\">      break    </span><br><span class=\"line\">  </span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">  if x==50:</span><br><span class=\"line\">      break</span><br><span class=\"line\">      print(x)     # 1 2 3 ...  49</span><br></pre></td></tr></table></figure></p>\n<p>用while循环实现：不断的让用户去输入数字，直到用户输入的数字是0为止。最后在打印之前输入的数的和。</p>\n<p>input()函数：程序执行到input()函数的时候，程序就会停下来，等待用户从键盘输入并且以回车结束，然后才会往下执行。</p>\n<p>注意：break只能写在循环中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num=int(input(&quot;&gt;&gt;&gt;&quot;))   # 获取键盘输入的内容，并且转换成int类型</span><br><span class=\"line\">    sum1+=num   # 将当次输入的数字加起来</span><br><span class=\"line\">    if num==0:   #  判断输入的数字是否是0，如果是就让循环结束</span><br><span class=\"line\">        break   </span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>for循环的特点：次数确定，可以在序列中取数据</p>\n<p>while循环：循环次数不确定的（while True + break）</p>\n<p>randint(m,n):产生一个m到n的随机整数</p>\n<p>产生随机数：random模块是python内置用来产生随机数的模块，里面提供了很多产生随机数的函数。</p>\n<p>  猜数字：随机生成一个整数。用户输入数字。如果用户输入的数字大于这个随机数就提示：“大了”;如果用户输入的数小于随机数就提示：“小了”。直到用户输入的数和这个随机数大小一样游戏结束。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">num=random.randint(0,100)   # 产生一个0到100的随机数</span><br><span class=\"line\">n=0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">num1=int(input(&quot;请输入你猜的数字：&quot;))</span><br><span class=\"line\">n=n+1</span><br><span class=\"line\">if num1&gt;num:</span><br><span class=\"line\">    print(&apos;大了&apos;)</span><br><span class=\"line\">elif num1&lt;num:</span><br><span class=\"line\">    print(&apos;小了&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;恭喜你，猜对了！&apos;)       </span><br><span class=\"line\">    print(&apos;一共猜了：%d次&apos;%(n),end=&apos;  &apos;)</span><br><span class=\"line\">    if n&lt;=5:</span><br><span class=\"line\">        print(&apos;你太棒了，只猜了%d次就猜对了&apos;%(n))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(&apos;下次加油！&apos;)</span><br><span class=\"line\">    break</span><br></pre></td></tr></table></figure></p>\n<p>2、continue<br>continue:结束当次循环，进入下次循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for x in range(1,10):</span><br><span class=\"line\">    print(&apos;=&apos;)</span><br><span class=\"line\">    continue   # 遇到continue就不再执行循环体后面的内容，直接进入下一次循环的判断</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>  求1~100中所有奇数的和<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum=0</span><br><span class=\"line\">for x in range(1,100):</span><br><span class=\"line\">    if x%2==0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum=sum+x</span><br><span class=\"line\">print(sum)</span><br></pre></td></tr></table></figure></p>\n<p>  打印100~999中十位数上不是3的所有数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> for x in range(100,1000):</span><br><span class=\"line\">     if x//10%10==3:</span><br><span class=\"line\">         continue</span><br><span class=\"line\">     print(x)   </span><br><span class=\"line\">``` </span><br><span class=\"line\"> 统计输入的数字中，偶数的个数。如果输入0，就结束。（必须使用continue）</span><br></pre></td></tr></table></figure></p>\n<p>  flag=True<br>  n=0<br>  while True:<br>      num=int(input(‘请输入一个数：’))  # 输入数据<br>      if num%2==1:  # 判断是否是奇数<br>          continue<br>      if num==0:<br>          flag=False<br>      n=n+1<br>  print(n)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**else**</span><br><span class=\"line\">python中循环语句后面可以加else语句。这个else语句会在循环结束后执行。</span><br></pre></td></tr></table></figure></p>\n<p> for 变量 in 序列：<br>  循环体<br> else：<br>  循环结束后会执行的语句块<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"> 1*2*3...*10</span><br><span class=\"line\"> sum1=1</span><br><span class=\"line\"> for x in range(1,11):</span><br><span class=\"line\">  sum1*=x</span><br><span class=\"line\"> else:</span><br><span class=\"line\">  print(sum1)</span><br></pre></td></tr></table></figure></p>\n<p>注意：如果再循环语句中使用break，那么else语句不会执行。（continue不存在这个问题）</p>\n<p>  1<em>2</em>3…*10，当乘积大于10000就不在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum1=1</span><br><span class=\"line\">for x in range(1,11):</span><br><span class=\"line\">    if sum1*x&gt;10000:    </span><br><span class=\"line\">        break</span><br><span class=\"line\">    sum1*=x</span><br><span class=\"line\">print(sum1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(sum1)  # 如果在循环中执行了break，那么else中的语句不会执行</span><br></pre></td></tr></table></figure></p>\n<p><strong>多重循环</strong><br>在循环体里面可以有其他的循环语句，结构为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\">    for 变量1 in 序列2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其它的循环语句</span><br><span class=\"line\"></span><br><span class=\"line\">for 变量 in 序列：</span><br><span class=\"line\"> 其他的循环语句1</span><br><span class=\"line\"> while 条件语句：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br><span class=\"line\"></span><br><span class=\"line\">while 条件语句1：</span><br><span class=\"line\"> while 条件语句2：</span><br><span class=\"line\">     循环体2</span><br><span class=\"line\"> 其他的循环语句2</span><br></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果n=5 打印</span><br><span class=\"line\">1</span><br><span class=\"line\">12</span><br><span class=\"line\">123</span><br><span class=\"line\">1234</span><br><span class=\"line\">12345</span><br><span class=\"line\"></span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):   # 控制行数</span><br><span class=\"line\">    for b in range(1,x+1):  # 控制当前行的数值</span><br><span class=\"line\">        print(b,end=&apos;&apos;)</span><br><span class=\"line\">    print()   # 一行结束换行</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\">****</span><br><span class=\"line\">***</span><br><span class=\"line\">**</span><br><span class=\"line\">*</span><br><span class=\"line\">n=5</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">n=10</span><br><span class=\"line\">for x in range(1,n+1):</span><br><span class=\"line\">    for b in range(x,n+1):</span><br><span class=\"line\">        print(&apos;*&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p>参考了简书中某人的记录，但找不到具体是谁了。侵删。</p>\n"},{"title":"(13) python中用字典代替switch","date":"2018-11-14T14:02:16.000Z","_content":"**switch语句类型**\n```\n'''\nswitch(n)\n{\ncase 1:\n  执行代码块 1\n  break;\ncase 2:\n  执行代码块 2\n  break;\ndefault:\n  n 与 case 1 和 case 2 不同时执行的代码\n}\n'''\n```\n**例如：**\n```\n'''\nswitch (day)\n{\ncase 0:\n  x=\"Today it's Sunday\";\n  break;\ncase 1:\n  x=\"Today it's Monday\";\n  break;\ncase 2:\n  x=\"Today it's Tuesday\";\n  break;\ncase 3:\n  x=\"unknown\"\n}\n'''\n```\n**python中字典方式**\n```\nday = 3\nswitcher = {\n    0:'Today it\\'s Sunday',\n    1:'Today it\\'s Monday',\n    2:'Today it\\'s Tuesday'\n}\n#day_name =switcher[day]  #并不能显示default\nday_name = switcher.get(day,'Unknown')\nprint(day_name)\n```\n**函数**\n```\nday = 3\n\ndef get_monday():\n    return 'Monday'\n\ndef  get_sunday():\n    return 'Sunday'\n\ndef get_tuesday():\n    return 'Tuesday'\n\ndef get_default():\n    return 'Unknown'\n\nswitcher1 = {\n    0:get_sunday,\n    1:get_monday,\n    2:get_tuesday\n} \n\nday_name = switcher1.get(day,get_default)()\nprint(day_name)\n```\n","source":"_posts/python基础/python中用字典代替switch.md","raw":"---\ntitle: (13) python中用字典代替switch\ndate: 2018-11-14 22:02:16\ntags:\ncategories: python基础\n---\n**switch语句类型**\n```\n'''\nswitch(n)\n{\ncase 1:\n  执行代码块 1\n  break;\ncase 2:\n  执行代码块 2\n  break;\ndefault:\n  n 与 case 1 和 case 2 不同时执行的代码\n}\n'''\n```\n**例如：**\n```\n'''\nswitch (day)\n{\ncase 0:\n  x=\"Today it's Sunday\";\n  break;\ncase 1:\n  x=\"Today it's Monday\";\n  break;\ncase 2:\n  x=\"Today it's Tuesday\";\n  break;\ncase 3:\n  x=\"unknown\"\n}\n'''\n```\n**python中字典方式**\n```\nday = 3\nswitcher = {\n    0:'Today it\\'s Sunday',\n    1:'Today it\\'s Monday',\n    2:'Today it\\'s Tuesday'\n}\n#day_name =switcher[day]  #并不能显示default\nday_name = switcher.get(day,'Unknown')\nprint(day_name)\n```\n**函数**\n```\nday = 3\n\ndef get_monday():\n    return 'Monday'\n\ndef  get_sunday():\n    return 'Sunday'\n\ndef get_tuesday():\n    return 'Tuesday'\n\ndef get_default():\n    return 'Unknown'\n\nswitcher1 = {\n    0:get_sunday,\n    1:get_monday,\n    2:get_tuesday\n} \n\nday_name = switcher1.get(day,get_default)()\nprint(day_name)\n```\n","slug":"python基础/python中用字典代替switch","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2g004vtssan0hn32kj","content":"<p><strong>switch语句类型</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch(n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  执行代码块 1</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  执行代码块 2</span><br><span class=\"line\">  break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">  n 与 case 1 和 case 2 不同时执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch (day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 0:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Sunday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Monday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Tuesday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 3:</span><br><span class=\"line\">  x=&quot;unknown&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>python中字典方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\">switcher = &#123;</span><br><span class=\"line\">    0:&apos;Today it\\&apos;s Sunday&apos;,</span><br><span class=\"line\">    1:&apos;Today it\\&apos;s Monday&apos;,</span><br><span class=\"line\">    2:&apos;Today it\\&apos;s Tuesday&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#day_name =switcher[day]  #并不能显示default</span><br><span class=\"line\">day_name = switcher.get(day,&apos;Unknown&apos;)</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\"></span><br><span class=\"line\">def get_monday():</span><br><span class=\"line\">    return &apos;Monday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def  get_sunday():</span><br><span class=\"line\">    return &apos;Sunday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_tuesday():</span><br><span class=\"line\">    return &apos;Tuesday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_default():</span><br><span class=\"line\">    return &apos;Unknown&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">switcher1 = &#123;</span><br><span class=\"line\">    0:get_sunday,</span><br><span class=\"line\">    1:get_monday,</span><br><span class=\"line\">    2:get_tuesday</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">day_name = switcher1.get(day,get_default)()</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>switch语句类型</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch(n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  执行代码块 1</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  执行代码块 2</span><br><span class=\"line\">  break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">  n 与 case 1 和 case 2 不同时执行的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">switch (day)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">case 0:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Sunday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 1:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Monday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">  x=&quot;Today it&apos;s Tuesday&quot;;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">case 3:</span><br><span class=\"line\">  x=&quot;unknown&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p><strong>python中字典方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\">switcher = &#123;</span><br><span class=\"line\">    0:&apos;Today it\\&apos;s Sunday&apos;,</span><br><span class=\"line\">    1:&apos;Today it\\&apos;s Monday&apos;,</span><br><span class=\"line\">    2:&apos;Today it\\&apos;s Tuesday&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#day_name =switcher[day]  #并不能显示default</span><br><span class=\"line\">day_name = switcher.get(day,&apos;Unknown&apos;)</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">day = 3</span><br><span class=\"line\"></span><br><span class=\"line\">def get_monday():</span><br><span class=\"line\">    return &apos;Monday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def  get_sunday():</span><br><span class=\"line\">    return &apos;Sunday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_tuesday():</span><br><span class=\"line\">    return &apos;Tuesday&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def get_default():</span><br><span class=\"line\">    return &apos;Unknown&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">switcher1 = &#123;</span><br><span class=\"line\">    0:get_sunday,</span><br><span class=\"line\">    1:get_monday,</span><br><span class=\"line\">    2:get_tuesday</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">day_name = switcher1.get(day,get_default)()</span><br><span class=\"line\">print(day_name)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(15) python中的None","date":"2018-11-14T14:02:15.000Z","_content":"\n**None 表示空  不同于** 空字符串 空的列表 0 False\n\n**类型不同，值不同**\n```\nprint(type(None)) <class 'NoneType'>None是None类\na=''\nb=False\nc=[]\nprint(a==None)  #False\nprint(b==None) #False\nprint(c==None) #False  #值不相等\n```\n**深入**\n```\ndef fun():\n    return None\n\na = fun()\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#S\n```\n```\ndef fun():\n    return None\n\na = []\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#F\n```\n**类中默认非空**\n```\nclass Test():\n    pass\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#S\n```\n**类中为空的情况**\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#F\n```\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nprint(bool(None)) #False\nprint(bool({}))#False\nprint(bool([]))#False\nprint(bool(test))#False\n```\n**由__bool__决定True or False,与__len__无关**\n(即print 只有 bool call  True,或者bool call False ))\n```\nclass Test():\n\n    def __bool__(self):\n        print('bool called')\n        return False#(/True)\n\n    def __len__(self):\n        print('len called')\n        return True #(只能为int类型)\n\nprint(bool(Test()))\n#bool called\n#False#(/True)\n```\n","source":"_posts/python基础/python中的None.md","raw":"---\ntitle: (15) python中的None\ndate: 2018-11-14 22:02:15\ntags:\ncategories: python基础\n---\n\n**None 表示空  不同于** 空字符串 空的列表 0 False\n\n**类型不同，值不同**\n```\nprint(type(None)) <class 'NoneType'>None是None类\na=''\nb=False\nc=[]\nprint(a==None)  #False\nprint(b==None) #False\nprint(c==None) #False  #值不相等\n```\n**深入**\n```\ndef fun():\n    return None\n\na = fun()\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#S\n```\n```\ndef fun():\n    return None\n\na = []\nif not a:\n    print('S')\nelse:\n    print('F')\n\nif a is None:\n    print('S')\nelse:\n    print('F')\n#S\n#F\n```\n**类中默认非空**\n```\nclass Test():\n    pass\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#S\n```\n**类中为空的情况**\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nif test:\n    print('S')\nelse:\n    print('F')\n#F\n```\n```\nclass Test():\n    def __len__(self):\n        return 0 #(只能为int类型)\n\ntest = Test()\nprint(bool(None)) #False\nprint(bool({}))#False\nprint(bool([]))#False\nprint(bool(test))#False\n```\n**由__bool__决定True or False,与__len__无关**\n(即print 只有 bool call  True,或者bool call False ))\n```\nclass Test():\n\n    def __bool__(self):\n        print('bool called')\n        return False#(/True)\n\n    def __len__(self):\n        print('len called')\n        return True #(只能为int类型)\n\nprint(bool(Test()))\n#bool called\n#False#(/True)\n```\n","slug":"python基础/python中的None","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2h004xtssa6j8bmpwq","content":"<p><strong>None 表示空  不同于</strong> 空字符串 空的列表 0 False</p>\n<p><strong>类型不同，值不同</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(None)) &lt;class &apos;NoneType&apos;&gt;None是None类</span><br><span class=\"line\">a=&apos;&apos;</span><br><span class=\"line\">b=False</span><br><span class=\"line\">c=[]</span><br><span class=\"line\">print(a==None)  #False</span><br><span class=\"line\">print(b==None) #False</span><br><span class=\"line\">print(c==None) #False  #值不相等</span><br></pre></td></tr></table></figure></p>\n<p><strong>深入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = fun()</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = []</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure>\n<p><strong>类中默认非空</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<p><strong>类中为空的情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">print(bool(None)) #False</span><br><span class=\"line\">print(bool(&#123;&#125;))#False</span><br><span class=\"line\">print(bool([]))#False</span><br><span class=\"line\">print(bool(test))#False</span><br></pre></td></tr></table></figure>\n<p><strong>由<strong>bool</strong>决定True or False,与<strong>len</strong>无关</strong><br>(即print 只有 bool call  True,或者bool call False ))<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __bool__(self):</span><br><span class=\"line\">        print(&apos;bool called&apos;)</span><br><span class=\"line\">        return False#(/True)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        print(&apos;len called&apos;)</span><br><span class=\"line\">        return True #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(Test()))</span><br><span class=\"line\">#bool called</span><br><span class=\"line\">#False#(/True)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>None 表示空  不同于</strong> 空字符串 空的列表 0 False</p>\n<p><strong>类型不同，值不同</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(type(None)) &lt;class &apos;NoneType&apos;&gt;None是None类</span><br><span class=\"line\">a=&apos;&apos;</span><br><span class=\"line\">b=False</span><br><span class=\"line\">c=[]</span><br><span class=\"line\">print(a==None)  #False</span><br><span class=\"line\">print(b==None) #False</span><br><span class=\"line\">print(c==None) #False  #值不相等</span><br></pre></td></tr></table></figure></p>\n<p><strong>深入</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = fun()</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fun():</span><br><span class=\"line\">    return None</span><br><span class=\"line\"></span><br><span class=\"line\">a = []</span><br><span class=\"line\">if not a:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">if a is None:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure>\n<p><strong>类中默认非空</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#S</span><br></pre></td></tr></table></figure></p>\n<p><strong>类中为空的情况</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">if test:</span><br><span class=\"line\">    print(&apos;S&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&apos;F&apos;)</span><br><span class=\"line\">#F</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        return 0 #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">test = Test()</span><br><span class=\"line\">print(bool(None)) #False</span><br><span class=\"line\">print(bool(&#123;&#125;))#False</span><br><span class=\"line\">print(bool([]))#False</span><br><span class=\"line\">print(bool(test))#False</span><br></pre></td></tr></table></figure>\n<p><strong>由<strong>bool</strong>决定True or False,与<strong>len</strong>无关</strong><br>(即print 只有 bool call  True,或者bool call False ))<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\"></span><br><span class=\"line\">    def __bool__(self):</span><br><span class=\"line\">        print(&apos;bool called&apos;)</span><br><span class=\"line\">        return False#(/True)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __len__(self):</span><br><span class=\"line\">        print(&apos;len called&apos;)</span><br><span class=\"line\">        return True #(只能为int类型)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bool(Test()))</span><br><span class=\"line\">#bool called</span><br><span class=\"line\">#False#(/True)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(10) python中的枚举","date":"2018-11-14T14:00:48.000Z","_content":"**在python中，枚举的本质是一个类，所有枚举类都是Enum的子类**\n**枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名**\n\n**表示类型的三种方式**\n```\nfrom enum import Enum\n\nclass VIP(Enum):       #所有枚举类都是Enum的子类\n    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）\n    GREEN = 2   \n    RED =  'str'\n    BLACK = 4\n    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，\n    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: 'YELLOW'\n  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: 'GREEN'\n\n#class Common():\n  #  YELLOW = 1       \n#VIP.YELLOW =6         #会报错，枚举中的值不能被更改\nprint(VIP.PINK)\nprint(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)\nprint(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名\nprint(type(VIP.YELLOW))   #<enum 'VIP'>  枚举类型\nprint(VIP.YELLOW.name)   #YELLOW 获取标签名字\nprint(type(VIP.YELLOW.name))  #<class 'str'> 字符串类型\n\nprint(VIP['YELLOW'])  #VIP.YELLOW\n\nprint(VIP.YELLOW.value)  #1   获取值\n\n#枚举类型、枚举的名字、枚举的值\n\nfor v in VIP:   #遍历枚举类型(并不会把别名打印出来)\n    print(v)    #VIP.YELLOW\n                #VIP.GREEN\n                #VIP.RED\n                #VIP.BLACK \n\n#枚举的比较运算\n#枚举不可以进行大小比较，但可以进行等值比较，身份比较\nresult = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True\nresult1 = VIP.YELLOW == 1    #False\n#result = VIP.YELLOW >= VIP.PINK  #枚举不能进行大小比较报错 \n                                 #'>=' not supported between instances of 'VIP' and 'VIP'\nresult2 = VIP.YELLOW is VIP.PINK #True   身份比较\nprint(result)  \nprint(result1)\nprint(result2)  \n\n\nclass VIP1(Enum):       \n    YELLOW = 1     \n    GREEN = 2   \n    RED = '3'\n    BLACK = 4\n    PINK = 1\n\nresult = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型\nprint(result) \n\nfor v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)\n    print(v)\n'''\n('YELLOW', <VIP.YELLOW: 1>)\n('GREEN', <VIP.GREEN: 2>)\n('RED', <VIP.RED: 3>)\n('BLACK', <VIP.BLACK: 4>)\n('PINK', <VIP.YELLOW: 1>)\n'''\n\nfor v in VIP.__members__:\n    print(v)   #枚举的名字（包括别名）\n'''\nYELLOW\nGREEN\nRED\nBLACK\nPINK\n'''\n\na = 1\na = VIP(a)         #把a变成一个枚举类型\nprint(a)   #VIP.YELLOW     \n\n\nfrom enum import IntEnum #(枚举的值得是int类型)\nfrom enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)\n\nclass VIP2(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n    PINK = 1    \n\n@unique\nclass VIP3(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n  #  PINK = 1       #会报错,取值重复\n\n\n\n#枚举  是单例模式    #23种设计模式        实践中\n```\n","source":"_posts/python基础/python中的枚举.md","raw":"---\ntitle: (10) python中的枚举\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**在python中，枚举的本质是一个类，所有枚举类都是Enum的子类**\n**枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名**\n\n**表示类型的三种方式**\n```\nfrom enum import Enum\n\nclass VIP(Enum):       #所有枚举类都是Enum的子类\n    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）\n    GREEN = 2   \n    RED =  'str'\n    BLACK = 4\n    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，\n    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: 'YELLOW'\n  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: 'GREEN'\n\n#class Common():\n  #  YELLOW = 1       \n#VIP.YELLOW =6         #会报错，枚举中的值不能被更改\nprint(VIP.PINK)\nprint(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)\nprint(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名\nprint(type(VIP.YELLOW))   #<enum 'VIP'>  枚举类型\nprint(VIP.YELLOW.name)   #YELLOW 获取标签名字\nprint(type(VIP.YELLOW.name))  #<class 'str'> 字符串类型\n\nprint(VIP['YELLOW'])  #VIP.YELLOW\n\nprint(VIP.YELLOW.value)  #1   获取值\n\n#枚举类型、枚举的名字、枚举的值\n\nfor v in VIP:   #遍历枚举类型(并不会把别名打印出来)\n    print(v)    #VIP.YELLOW\n                #VIP.GREEN\n                #VIP.RED\n                #VIP.BLACK \n\n#枚举的比较运算\n#枚举不可以进行大小比较，但可以进行等值比较，身份比较\nresult = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True\nresult1 = VIP.YELLOW == 1    #False\n#result = VIP.YELLOW >= VIP.PINK  #枚举不能进行大小比较报错 \n                                 #'>=' not supported between instances of 'VIP' and 'VIP'\nresult2 = VIP.YELLOW is VIP.PINK #True   身份比较\nprint(result)  \nprint(result1)\nprint(result2)  \n\n\nclass VIP1(Enum):       \n    YELLOW = 1     \n    GREEN = 2   \n    RED = '3'\n    BLACK = 4\n    PINK = 1\n\nresult = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型\nprint(result) \n\nfor v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)\n    print(v)\n'''\n('YELLOW', <VIP.YELLOW: 1>)\n('GREEN', <VIP.GREEN: 2>)\n('RED', <VIP.RED: 3>)\n('BLACK', <VIP.BLACK: 4>)\n('PINK', <VIP.YELLOW: 1>)\n'''\n\nfor v in VIP.__members__:\n    print(v)   #枚举的名字（包括别名）\n'''\nYELLOW\nGREEN\nRED\nBLACK\nPINK\n'''\n\na = 1\na = VIP(a)         #把a变成一个枚举类型\nprint(a)   #VIP.YELLOW     \n\n\nfrom enum import IntEnum #(枚举的值得是int类型)\nfrom enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)\n\nclass VIP2(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n    PINK = 1    \n\n@unique\nclass VIP3(IntEnum):       \n    YELLOW = 1     \n    GREEN = 2   \n#    RED = 'str'  #会报错,(枚举的值得是int类型)\n    BLACK = 4\n  #  PINK = 1       #会报错,取值重复\n\n\n\n#枚举  是单例模式    #23种设计模式        实践中\n```\n","slug":"python基础/python中的枚举","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2i004ztssajma0av4p","content":"<p><strong>在python中，枚举的本质是一个类，所有枚举类都是Enum的子类</strong><br><strong>枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名</strong></p>\n<p><strong>表示类型的三种方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP(Enum):       #所有枚举类都是Enum的子类</span><br><span class=\"line\">    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）</span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED =  &apos;str&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，</span><br><span class=\"line\">    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: &apos;YELLOW&apos;</span><br><span class=\"line\">  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: &apos;GREEN&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#class Common():</span><br><span class=\"line\">  #  YELLOW = 1       </span><br><span class=\"line\">#VIP.YELLOW =6         #会报错，枚举中的值不能被更改</span><br><span class=\"line\">print(VIP.PINK)</span><br><span class=\"line\">print(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)</span><br><span class=\"line\">print(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名</span><br><span class=\"line\">print(type(VIP.YELLOW))   #&lt;enum &apos;VIP&apos;&gt;  枚举类型</span><br><span class=\"line\">print(VIP.YELLOW.name)   #YELLOW 获取标签名字</span><br><span class=\"line\">print(type(VIP.YELLOW.name))  #&lt;class &apos;str&apos;&gt; 字符串类型</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP[&apos;YELLOW&apos;])  #VIP.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP.YELLOW.value)  #1   获取值</span><br><span class=\"line\"></span><br><span class=\"line\">#枚举类型、枚举的名字、枚举的值</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP:   #遍历枚举类型(并不会把别名打印出来)</span><br><span class=\"line\">    print(v)    #VIP.YELLOW</span><br><span class=\"line\">                #VIP.GREEN</span><br><span class=\"line\">                #VIP.RED</span><br><span class=\"line\">                #VIP.BLACK </span><br><span class=\"line\"></span><br><span class=\"line\">#枚举的比较运算</span><br><span class=\"line\">#枚举不可以进行大小比较，但可以进行等值比较，身份比较</span><br><span class=\"line\">result = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True</span><br><span class=\"line\">result1 = VIP.YELLOW == 1    #False</span><br><span class=\"line\">#result = VIP.YELLOW &gt;= VIP.PINK  #枚举不能进行大小比较报错 </span><br><span class=\"line\">                                 #&apos;&gt;=&apos; not supported between instances of &apos;VIP&apos; and &apos;VIP&apos;</span><br><span class=\"line\">result2 = VIP.YELLOW is VIP.PINK #True   身份比较</span><br><span class=\"line\">print(result)  </span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">print(result2)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class VIP1(Enum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED = &apos;3&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1</span><br><span class=\"line\"></span><br><span class=\"line\">result = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型</span><br><span class=\"line\">print(result) </span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">(&apos;YELLOW&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">(&apos;GREEN&apos;, &lt;VIP.GREEN: 2&gt;)</span><br><span class=\"line\">(&apos;RED&apos;, &lt;VIP.RED: 3&gt;)</span><br><span class=\"line\">(&apos;BLACK&apos;, &lt;VIP.BLACK: 4&gt;)</span><br><span class=\"line\">(&apos;PINK&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__:</span><br><span class=\"line\">    print(v)   #枚举的名字（包括别名）</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">YELLOW</span><br><span class=\"line\">GREEN</span><br><span class=\"line\">RED</span><br><span class=\"line\">BLACK</span><br><span class=\"line\">PINK</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">a = VIP(a)         #把a变成一个枚举类型</span><br><span class=\"line\">print(a)   #VIP.YELLOW     </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from enum import IntEnum #(枚举的值得是int类型)</span><br><span class=\"line\">from enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP2(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1    </span><br><span class=\"line\"></span><br><span class=\"line\">@unique</span><br><span class=\"line\">class VIP3(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">  #  PINK = 1       #会报错,取值重复</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#枚举  是单例模式    #23种设计模式        实践中</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>在python中，枚举的本质是一个类，所有枚举类都是Enum的子类</strong><br><strong>枚举值不能动态更改且标签唯一，标签唯一但是数值不唯一。如果数值不唯一，相当于起别名</strong></p>\n<p><strong>表示类型的三种方式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from enum import Enum</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP(Enum):       #所有枚举类都是Enum的子类</span><br><span class=\"line\">    YELLOW = 1     #常量是不能更改的   用大写表示（约定的，python中没有真的常量）</span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED =  &apos;str&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1     # 其实就是YELLOW = 1， 可以看作YELLOW 的别名，</span><br><span class=\"line\">    #YELLOW = 1  #会报错，不能同时有两个YELLOW Attempted to reuse key: &apos;YELLOW&apos;</span><br><span class=\"line\">  #  GREEN = 6  #会报错，不能继续使用GREEN这个标签 Attempted to reuse key: &apos;GREEN&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#class Common():</span><br><span class=\"line\">  #  YELLOW = 1       </span><br><span class=\"line\">#VIP.YELLOW =6         #会报错，枚举中的值不能被更改</span><br><span class=\"line\">print(VIP.PINK)</span><br><span class=\"line\">print(VIP.YELLOW)    #VIP.YELLOW   (不关心取值)</span><br><span class=\"line\">print(VIP.PINK)      #VIP.YELLOW   可以看作YELLOW 的别名</span><br><span class=\"line\">print(type(VIP.YELLOW))   #&lt;enum &apos;VIP&apos;&gt;  枚举类型</span><br><span class=\"line\">print(VIP.YELLOW.name)   #YELLOW 获取标签名字</span><br><span class=\"line\">print(type(VIP.YELLOW.name))  #&lt;class &apos;str&apos;&gt; 字符串类型</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP[&apos;YELLOW&apos;])  #VIP.YELLOW</span><br><span class=\"line\"></span><br><span class=\"line\">print(VIP.YELLOW.value)  #1   获取值</span><br><span class=\"line\"></span><br><span class=\"line\">#枚举类型、枚举的名字、枚举的值</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP:   #遍历枚举类型(并不会把别名打印出来)</span><br><span class=\"line\">    print(v)    #VIP.YELLOW</span><br><span class=\"line\">                #VIP.GREEN</span><br><span class=\"line\">                #VIP.RED</span><br><span class=\"line\">                #VIP.BLACK </span><br><span class=\"line\"></span><br><span class=\"line\">#枚举的比较运算</span><br><span class=\"line\">#枚举不可以进行大小比较，但可以进行等值比较，身份比较</span><br><span class=\"line\">result = VIP.YELLOW == VIP.PINK  #枚举之间的等值比较  #True</span><br><span class=\"line\">result1 = VIP.YELLOW == 1    #False</span><br><span class=\"line\">#result = VIP.YELLOW &gt;= VIP.PINK  #枚举不能进行大小比较报错 </span><br><span class=\"line\">                                 #&apos;&gt;=&apos; not supported between instances of &apos;VIP&apos; and &apos;VIP&apos;</span><br><span class=\"line\">result2 = VIP.YELLOW is VIP.PINK #True   身份比较</span><br><span class=\"line\">print(result)  </span><br><span class=\"line\">print(result1)</span><br><span class=\"line\">print(result2)  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class VIP1(Enum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">    RED = &apos;3&apos;</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1</span><br><span class=\"line\"></span><br><span class=\"line\">result = VIP.YELLOW == VIP1.YELLOW  #Fales  虽然值相等，但其实是两个不同的枚举类型</span><br><span class=\"line\">print(result) </span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__.items():   #遍历枚举类型(把别名也打印出来)</span><br><span class=\"line\">    print(v)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">(&apos;YELLOW&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">(&apos;GREEN&apos;, &lt;VIP.GREEN: 2&gt;)</span><br><span class=\"line\">(&apos;RED&apos;, &lt;VIP.RED: 3&gt;)</span><br><span class=\"line\">(&apos;BLACK&apos;, &lt;VIP.BLACK: 4&gt;)</span><br><span class=\"line\">(&apos;PINK&apos;, &lt;VIP.YELLOW: 1&gt;)</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">for v in VIP.__members__:</span><br><span class=\"line\">    print(v)   #枚举的名字（包括别名）</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">YELLOW</span><br><span class=\"line\">GREEN</span><br><span class=\"line\">RED</span><br><span class=\"line\">BLACK</span><br><span class=\"line\">PINK</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 1</span><br><span class=\"line\">a = VIP(a)         #把a变成一个枚举类型</span><br><span class=\"line\">print(a)   #VIP.YELLOW     </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from enum import IntEnum #(枚举的值得是int类型)</span><br><span class=\"line\">from enum import IntEnum,unique #(枚举的值得是int类型,且不能重复)</span><br><span class=\"line\"></span><br><span class=\"line\">class VIP2(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">    PINK = 1    </span><br><span class=\"line\"></span><br><span class=\"line\">@unique</span><br><span class=\"line\">class VIP3(IntEnum):       </span><br><span class=\"line\">    YELLOW = 1     </span><br><span class=\"line\">    GREEN = 2   </span><br><span class=\"line\">#    RED = &apos;str&apos;  #会报错,(枚举的值得是int类型)</span><br><span class=\"line\">    BLACK = 4</span><br><span class=\"line\">  #  PINK = 1       #会报错,取值重复</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#枚举  是单例模式    #23种设计模式        实践中</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(12) python中的装饰器","date":"2018-11-14T14:00:43.000Z","_content":"\n**对修改是封闭的，对扩展是开放的**\n####在原有函数上调用时加时间\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint_current_time(a)\nprint_current_time(b)\n```\n**等同于**\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint(time.time())\na()\nprint(time.time())\nb()\n```\n**更改了内部实现，不够优雅**\n\n####装饰器\n```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\ndef f1():\n    print('This is a function') \n\nf = decorator(f1)\nf()\n```\n**修改一下**\n ```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1():\n    print('This is a function') \n\nf1()   #并没有改变原有函数的调用方式\n#这才是装饰器  意义所在\n```\n**进一步优化，支持不同个数的参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args):\n        print(time.time())\n        func(*args)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\n```\n**进一步优化，加入关键字参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args,**kw):\n        print(time.time())\n        func(*args,**kw)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\n@decorator\ndef f3(func_name1,func_name2,**kw):\n    print('hello world'+ func_name1)\n    print('hello world'+ func_name2)\n    print(kw)\n\n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\nf3('tset func1','tset func2',a = 1,b = 2,c = '123')\n```\n\n**装饰器也可以用来控制访问**\n**一个函数上就可以加多个装饰器**\n","source":"_posts/python基础/python中的装饰器.md","raw":"---\ntitle: (12) python中的装饰器\ndate: 2018-11-14 22:00:43\ntags:\ncategories: python基础\n---\n\n**对修改是封闭的，对扩展是开放的**\n####在原有函数上调用时加时间\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint_current_time(a)\nprint_current_time(b)\n```\n**等同于**\n```\nimport time\n\ndef a():\n    print('This is a function') \n\ndef b():\n    print('Hello world') \n\ndef print_current_time(abc):\n    print(time.time())\n    abc()\n\nprint(time.time())\na()\nprint(time.time())\nb()\n```\n**更改了内部实现，不够优雅**\n\n####装饰器\n```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\ndef f1():\n    print('This is a function') \n\nf = decorator(f1)\nf()\n```\n**修改一下**\n ```\nimport time\n\ndef decorator(func):\n    def wrapper():\n        print(time.time())\n        func()\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1():\n    print('This is a function') \n\nf1()   #并没有改变原有函数的调用方式\n#这才是装饰器  意义所在\n```\n**进一步优化，支持不同个数的参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args):\n        print(time.time())\n        func(*args)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\n```\n**进一步优化，加入关键字参数**\n```\nimport time\n\ndef decorator(func):\n    def wrapper(*args,**kw):\n        print(time.time())\n        func(*args,**kw)\n    return wrapper\n\n@decorator   #@装饰器名字\ndef f1(func_name):\n    print('This is a function'+ func_name) \n\n@decorator\ndef f2(func_name1,func_name2,func_name3):\n    print('hello world'+ func_name1) \n    print('hello world'+ func_name2) \n    print('hello world'+ func_name3) \n\n@decorator\ndef f3(func_name1,func_name2,**kw):\n    print('hello world'+ func_name1)\n    print('hello world'+ func_name2)\n    print(kw)\n\n\nf1('tset func')   \nf2('tset func1','tset func2','tset func3')\nf3('tset func1','tset func2',a = 1,b = 2,c = '123')\n```\n\n**装饰器也可以用来控制访问**\n**一个函数上就可以加多个装饰器**\n","slug":"python基础/python中的装饰器","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2j0051tssa9j7c7t1v","content":"<p><strong>对修改是封闭的，对扩展是开放的</strong></p>\n<p>####在原有函数上调用时加时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print_current_time(a)</span><br><span class=\"line\">print_current_time(b)</span><br></pre></td></tr></table></figure></p>\n<p><strong>等同于</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">a()</span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改了内部实现，不够优雅</strong></p>\n<p>####装饰器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f = decorator(f1)</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改一下</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f1()   #并没有改变原有函数的调用方式</span><br><span class=\"line\">#这才是装饰器  意义所在</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，支持不同个数的参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，加入关键字参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args,**kw):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f3(func_name1,func_name2,**kw):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1)</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2)</span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br><span class=\"line\">f3(&apos;tset func1&apos;,&apos;tset func2&apos;,a = 1,b = 2,c = &apos;123&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>装饰器也可以用来控制访问</strong><br><strong>一个函数上就可以加多个装饰器</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>对修改是封闭的，对扩展是开放的</strong></p>\n<p>####在原有函数上调用时加时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print_current_time(a)</span><br><span class=\"line\">print_current_time(b)</span><br></pre></td></tr></table></figure></p>\n<p><strong>等同于</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def a():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def b():</span><br><span class=\"line\">    print(&apos;Hello world&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">def print_current_time(abc):</span><br><span class=\"line\">    print(time.time())</span><br><span class=\"line\">    abc()</span><br><span class=\"line\"></span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">a()</span><br><span class=\"line\">print(time.time())</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure></p>\n<p><strong>更改了内部实现，不够优雅</strong></p>\n<p>####装饰器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f = decorator(f1)</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure></p>\n<p><strong>修改一下</strong><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper():</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func()</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1():</span><br><span class=\"line\">    print(&apos;This is a function&apos;) </span><br><span class=\"line\"></span><br><span class=\"line\">f1()   #并没有改变原有函数的调用方式</span><br><span class=\"line\">#这才是装饰器  意义所在</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，支持不同个数的参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>进一步优化，加入关键字参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def decorator(func):</span><br><span class=\"line\">    def wrapper(*args,**kw):</span><br><span class=\"line\">        print(time.time())</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@decorator   #@装饰器名字</span><br><span class=\"line\">def f1(func_name):</span><br><span class=\"line\">    print(&apos;This is a function&apos;+ func_name) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f2(func_name1,func_name2,func_name3):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2) </span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name3) </span><br><span class=\"line\"></span><br><span class=\"line\">@decorator</span><br><span class=\"line\">def f3(func_name1,func_name2,**kw):</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name1)</span><br><span class=\"line\">    print(&apos;hello world&apos;+ func_name2)</span><br><span class=\"line\">    print(kw)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1(&apos;tset func&apos;)   </span><br><span class=\"line\">f2(&apos;tset func1&apos;,&apos;tset func2&apos;,&apos;tset func3&apos;)</span><br><span class=\"line\">f3(&apos;tset func1&apos;,&apos;tset func2&apos;,a = 1,b = 2,c = &apos;123&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>装饰器也可以用来控制访问</strong><br><strong>一个函数上就可以加多个装饰器</strong></p>\n"},{"title":"(14) python中的列表推导式","date":"2018-11-14T14:02:15.000Z","_content":"\n#####列表推导式\n#####集合字典也可\n#####元组也可\n\n```\na=[1,2,3,4,5,6,7,8,9]\nb=[i**3 for i in a if i <=5]\nprint(b)   #b={....}为集合，b(...)为元组，与a{[(...)]},什么的无关。\n#为b()时，是一个对象\n```\n\n**也可以map filter表示**\n```\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x*x,r)\nprint(list(s))\n```\n```\n#同上，不建议\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x**3,filter(lambda x:x if x<=5 else 0,list_a))\nprint(list(s))\n```\n#####当为字典时\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\nb = [key for key,value in students.items()]\nprint(b)#['wei', 'lai', 'wan']\nfor x in b:\n    print(x)#wei#lai#wan\n```\n**交换key和value\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\n\nb ={value:key for key,value in students.items()}\nprint(b)#{18: 'wei', 19: 'lai', 20: 'wan'}\n```\n","source":"_posts/python基础/python中的列表推导式.md","raw":"---\ntitle: (14) python中的列表推导式\ndate: 2018-11-14 22:02:15\ntags:\ncategories: python基础\n---\n\n#####列表推导式\n#####集合字典也可\n#####元组也可\n\n```\na=[1,2,3,4,5,6,7,8,9]\nb=[i**3 for i in a if i <=5]\nprint(b)   #b={....}为集合，b(...)为元组，与a{[(...)]},什么的无关。\n#为b()时，是一个对象\n```\n\n**也可以map filter表示**\n```\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x*x,r)\nprint(list(s))\n```\n```\n#同上，不建议\nlist_a=[1,2,3,4,5,6,7,8,9]\nr=filter(lambda x:x if x<=5 else 0,list_a)\ns=map(lambda x:x**3,filter(lambda x:x if x<=5 else 0,list_a))\nprint(list(s))\n```\n#####当为字典时\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\nb = [key for key,value in students.items()]\nprint(b)#['wei', 'lai', 'wan']\nfor x in b:\n    print(x)#wei#lai#wan\n```\n**交换key和value\n```\nstudents ={\n    'wei':18,\n    'lai':19,\n    'wan':20\n}\n\nb ={value:key for key,value in students.items()}\nprint(b)#{18: 'wei', 19: 'lai', 20: 'wan'}\n```\n","slug":"python基础/python中的列表推导式","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2k0053tssauoefqtbo","content":"<p>#####列表推导式</p>\n<p>#####集合字典也可</p>\n<p>#####元组也可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">b=[i**3 for i in a if i &lt;=5]</span><br><span class=\"line\">print(b)   #b=&#123;....&#125;为集合，b(...)为元组，与a&#123;[(...)]&#125;,什么的无关。</span><br><span class=\"line\">#为b()时，是一个对象</span><br></pre></td></tr></table></figure>\n<p><strong>也可以map filter表示</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x*x,r)</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#同上，不建议</span><br><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x**3,filter(lambda x:x if x&lt;=5 else 0,list_a))</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure>\n<p>#####当为字典时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b = [key for key,value in students.items()]</span><br><span class=\"line\">print(b)#[&apos;wei&apos;, &apos;lai&apos;, &apos;wan&apos;]</span><br><span class=\"line\">for x in b:</span><br><span class=\"line\">    print(x)#wei#lai#wan</span><br></pre></td></tr></table></figure></p>\n<p>**交换key和value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b =&#123;value:key for key,value in students.items()&#125;</span><br><span class=\"line\">print(b)#&#123;18: &apos;wei&apos;, 19: &apos;lai&apos;, 20: &apos;wan&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#####列表推导式</p>\n<p>#####集合字典也可</p>\n<p>#####元组也可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">b=[i**3 for i in a if i &lt;=5]</span><br><span class=\"line\">print(b)   #b=&#123;....&#125;为集合，b(...)为元组，与a&#123;[(...)]&#125;,什么的无关。</span><br><span class=\"line\">#为b()时，是一个对象</span><br></pre></td></tr></table></figure>\n<p><strong>也可以map filter表示</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x*x,r)</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#同上，不建议</span><br><span class=\"line\">list_a=[1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">r=filter(lambda x:x if x&lt;=5 else 0,list_a)</span><br><span class=\"line\">s=map(lambda x:x**3,filter(lambda x:x if x&lt;=5 else 0,list_a))</span><br><span class=\"line\">print(list(s))</span><br></pre></td></tr></table></figure>\n<p>#####当为字典时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b = [key for key,value in students.items()]</span><br><span class=\"line\">print(b)#[&apos;wei&apos;, &apos;lai&apos;, &apos;wan&apos;]</span><br><span class=\"line\">for x in b:</span><br><span class=\"line\">    print(x)#wei#lai#wan</span><br></pre></td></tr></table></figure></p>\n<p>**交换key和value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">students =&#123;</span><br><span class=\"line\">    &apos;wei&apos;:18,</span><br><span class=\"line\">    &apos;lai&apos;:19,</span><br><span class=\"line\">    &apos;wan&apos;:20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b =&#123;value:key for key,value in students.items()&#125;</span><br><span class=\"line\">print(b)#&#123;18: &apos;wei&apos;, 19: &apos;lai&apos;, 20: &apos;wan&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(6) python中面向对象","date":"2018-11-14T13:59:27.000Z","_content":"![变量上为 类变量，实例变量](https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有意义的面向对象的代码\n类  是面向对象最核心的观念\n类、对象\n实例化\n类最基本的作用：封装\n一定要用self,引用 self.\n类只负责定义，不会去运行\n类和对象。\n数据成员\n构造函数可以让模板生成不同的对象\n\n**类是现实世界或思维世界中的实体在计算机中的反馈**\n**它将数据以及这些数据上的操作封装在一起**\n\n**类 被   实例化后  就成了一个具体的对象** \n**类就像是一个模板，通过类  就可以产生很多对象。**\n```\n#比如这段代码为  1.py\nclass Human():\n    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）\n    def __init__(self,name,age):#构造函数 ，\n    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.\n    #初始化对象属性  \n        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 \n        self.age = age   #定义实例变量，实例变量只和对象相关 self.\n        #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def get_name(self):\n        print(self.name)\n\n    def do_homework(self):\n        print('This is a parent method')\n```\n```\nfrom 1.py import Human  \n\nclass Student(Human):     #Human是Student的父类，Student是Human的子类\n  \n    def __init__(self,school,name,age):\n        self.school = school \n\n        super(Student,self).__init__(name,age)  #建议以此方式调用父类\n        #super 不仅仅可用于构造函数，也可以用于普通的实例方法\n\n        # Human.__init__(self,name,age)   #子类里调用父类构造函数\n        #self   用类调用实例方法没意义，所以加self\n\n    #     self.age = age \n  \n\n    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类\n        #super(Student,self).do_homework()  #This is a parent method\n        print('English homework')\n        \nstudent1 = Student('jinan university','wei',18) #实例化\nstudent1.do_homework() #English homework\nprint(student1.name) #wei\nprint(student1.age)#18\n#继承   单继承  多继承\n```\n**定义一个类**\n```\nclass Student():\n    name = ''   #在class内部定义变量    类变量 （和类相关联在一起的）\n    age = 0   \n    #行为 与  特征   \n         \n    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)\n        #初始化对象属性\n        self.neme = name \n        self.age = age        #定义实例变量，实例变量只和对象相关 self.\n\n    #    #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def print_files(self):        #在class内部定义函数\n        print('name:'+ self.name)\n        print('age:'+ str(self.age))\n\nstudent = Student()  #类的实例化\nstudent.print_files()  #类下面方法的调用\n#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。\n# 定义实例时需要self，调用实例不需要给self赋参 \n```\n**详解**\n```\n# 模块\nc = 50\n\ndef add(x, y):\n    c= x+y \n    print(c)\n\nadd(1,2)       #3   函数中局部变量的值\nprint(c)       #50  全局变量的值\n \n# 两个print(c)的区别 \n# 局部变量不会改变全局变量的值\n```\n\n**类和模块要区别对待**\n\n###### '类变量'     和 类  关联在一起的 \n######'实例变量'    和 对象 关联在一起的 \n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    def marking(self,sorce):         #内部访问\n        if sorce < 0:                #建议通过方法 对 类变量赋值\n            # sorce =0\n            return '不能给同学打负分'\n        self.__sorce = sorce\n        print(self.name + '同学本次的考试分数为：' + str(self.__sorce))\n        return 'hello'\nresult =  student1.marking(80)#wang同学本次的考试分数为：80\nprint(result)   #hello\n```\n```\nclass Student():        \n    sum=0    #   类变量   和类相关\n    name = 'weilai'   #在class内部定义变量    类变量\n    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这\n    # 行为 与  特征   \n         \n    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法\n        #主要是被用来初始化对象属性\n        self.name = name            #实例方法操控实例变量\n        self.age = age\n        print(self.__class__.sum)   \n        print(Student.sum)\n        self.__class__.sum +=1      #实例方法访问类变量中的sum\n        print(Student.sum)\nstudent1 = Student('wang',18)\nstudent2 = Student('li',19)\n```\n**类方法主要操作和类相关的变量**\n**用类调用类方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nStudent.plus_sum()  #用类调用类方法\nstudent2 = Student('li',19)\nStudent.plus_sum()\n```\n**对象调用类方法(python可用但最好不要用)**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nstudent1.plus_sum()  #用对象调用类方法\nstudent2 = Student('li',19)\nstudent2.plus_sum()\n```\n**静态方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @staticmethod                #静态方法\n    def add(x):\n        print(Student.sum)\n        print('this is a static method')\n```\n**静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)**\n**当和类和对象没多大关系的时候,可以使用静态方法**\n**静态方法和类方法  均不能访问  实例变量**\n\n\n**类中赋值没有意义的。**\n```\nclass Student():\n    name = 'weilai'\n    age = 0\n\n    def __init__(self,name,age): \n        name = name   \n        age = age\n      \nstudent1 = Student('wang',18)\nprint(student1.name)   #weilai\nprint(student1.age)    #0\nprint(student1.__dict__)    #{}   #__dict__显示student1下所有的变量，即没有变量\n# python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）\n# 所以即使student1为空，也显示了类变量下的值\n#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的\n#__init__ 构造函数是python特有的，可以从外部访问\n#print(student1._Student__sorce)    表明python中私有只是改了一个名字\n```\n","source":"_posts/python基础/python中面向对象.md","raw":"---\ntitle: (6) python中面向对象\ndate: 2018-11-14 21:59:27\ntags:\ncategories: python基础\n---\n![变量上为 类变量，实例变量](https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n有意义的面向对象的代码\n类  是面向对象最核心的观念\n类、对象\n实例化\n类最基本的作用：封装\n一定要用self,引用 self.\n类只负责定义，不会去运行\n类和对象。\n数据成员\n构造函数可以让模板生成不同的对象\n\n**类是现实世界或思维世界中的实体在计算机中的反馈**\n**它将数据以及这些数据上的操作封装在一起**\n\n**类 被   实例化后  就成了一个具体的对象** \n**类就像是一个模板，通过类  就可以产生很多对象。**\n```\n#比如这段代码为  1.py\nclass Human():\n    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）\n    def __init__(self,name,age):#构造函数 ，\n    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.\n    #初始化对象属性  \n        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 \n        self.age = age   #定义实例变量，实例变量只和对象相关 self.\n        #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def get_name(self):\n        print(self.name)\n\n    def do_homework(self):\n        print('This is a parent method')\n```\n```\nfrom 1.py import Human  \n\nclass Student(Human):     #Human是Student的父类，Student是Human的子类\n  \n    def __init__(self,school,name,age):\n        self.school = school \n\n        super(Student,self).__init__(name,age)  #建议以此方式调用父类\n        #super 不仅仅可用于构造函数，也可以用于普通的实例方法\n\n        # Human.__init__(self,name,age)   #子类里调用父类构造函数\n        #self   用类调用实例方法没意义，所以加self\n\n    #     self.age = age \n  \n\n    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类\n        #super(Student,self).do_homework()  #This is a parent method\n        print('English homework')\n        \nstudent1 = Student('jinan university','wei',18) #实例化\nstudent1.do_homework() #English homework\nprint(student1.name) #wei\nprint(student1.age)#18\n#继承   单继承  多继承\n```\n**定义一个类**\n```\nclass Student():\n    name = ''   #在class内部定义变量    类变量 （和类相关联在一起的）\n    age = 0   \n    #行为 与  特征   \n         \n    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)\n        #初始化对象属性\n        self.neme = name \n        self.age = age        #定义实例变量，实例变量只和对象相关 self.\n\n    #    #return NONE (构造函数只能返回NONE)  (补充知识)\n\n    def print_files(self):        #在class内部定义函数\n        print('name:'+ self.name)\n        print('age:'+ str(self.age))\n\nstudent = Student()  #类的实例化\nstudent.print_files()  #类下面方法的调用\n#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。\n# 定义实例时需要self，调用实例不需要给self赋参 \n```\n**详解**\n```\n# 模块\nc = 50\n\ndef add(x, y):\n    c= x+y \n    print(c)\n\nadd(1,2)       #3   函数中局部变量的值\nprint(c)       #50  全局变量的值\n \n# 两个print(c)的区别 \n# 局部变量不会改变全局变量的值\n```\n\n**类和模块要区别对待**\n\n###### '类变量'     和 类  关联在一起的 \n######'实例变量'    和 对象 关联在一起的 \n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    def marking(self,sorce):         #内部访问\n        if sorce < 0:                #建议通过方法 对 类变量赋值\n            # sorce =0\n            return '不能给同学打负分'\n        self.__sorce = sorce\n        print(self.name + '同学本次的考试分数为：' + str(self.__sorce))\n        return 'hello'\nresult =  student1.marking(80)#wang同学本次的考试分数为：80\nprint(result)   #hello\n```\n```\nclass Student():        \n    sum=0    #   类变量   和类相关\n    name = 'weilai'   #在class内部定义变量    类变量\n    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这\n    # 行为 与  特征   \n         \n    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法\n        #主要是被用来初始化对象属性\n        self.name = name            #实例方法操控实例变量\n        self.age = age\n        print(self.__class__.sum)   \n        print(Student.sum)\n        self.__class__.sum +=1      #实例方法访问类变量中的sum\n        print(Student.sum)\nstudent1 = Student('wang',18)\nstudent2 = Student('li',19)\n```\n**类方法主要操作和类相关的变量**\n**用类调用类方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nStudent.plus_sum()  #用类调用类方法\nstudent2 = Student('li',19)\nStudent.plus_sum()\n```\n**对象调用类方法(python可用但最好不要用)**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @classmethod                  #让其成为类方法     \n    def plus_sum(cls):             #sum每运行一次就+1\n        cls.sum+=1\n        print(cls.sum)\n\nstudent1 = Student('wang',18)\nstudent1.plus_sum()  #用对象调用类方法\nstudent2 = Student('li',19)\nstudent2.plus_sum()\n```\n**静态方法**\n```\nclass Student():        \n    sum=0   \n    name = 'weilai'   \n    age = 0\n\n    def __init__(self,name,age):   \n        self.name = name            \n        self.age = age\n\n    @staticmethod                #静态方法\n    def add(x):\n        print(Student.sum)\n        print('this is a static method')\n```\n**静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)**\n**当和类和对象没多大关系的时候,可以使用静态方法**\n**静态方法和类方法  均不能访问  实例变量**\n\n\n**类中赋值没有意义的。**\n```\nclass Student():\n    name = 'weilai'\n    age = 0\n\n    def __init__(self,name,age): \n        name = name   \n        age = age\n      \nstudent1 = Student('wang',18)\nprint(student1.name)   #weilai\nprint(student1.age)    #0\nprint(student1.__dict__)    #{}   #__dict__显示student1下所有的变量，即没有变量\n# python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）\n# 所以即使student1为空，也显示了类变量下的值\n#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的\n#__init__ 构造函数是python特有的，可以从外部访问\n#print(student1._Student__sorce)    表明python中私有只是改了一个名字\n```\n","slug":"python基础/python中面向对象","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2l0055tssa9bjh8vxq","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"变量上为 类变量，实例变量\"></p>\n<p>有意义的面向对象的代码<br>类  是面向对象最核心的观念<br>类、对象<br>实例化<br>类最基本的作用：封装<br>一定要用self,引用 self.<br>类只负责定义，不会去运行<br>类和对象。<br>数据成员<br>构造函数可以让模板生成不同的对象</p>\n<p><strong>类是现实世界或思维世界中的实体在计算机中的反馈</strong><br><strong>它将数据以及这些数据上的操作封装在一起</strong></p>\n<p><strong>类 被   实例化后  就成了一个具体的对象</strong><br><strong>类就像是一个模板，通过类  就可以产生很多对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#比如这段代码为  1.py</span><br><span class=\"line\">class Human():</span><br><span class=\"line\">    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    def __init__(self,name,age):#构造函数 ，</span><br><span class=\"line\">    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.</span><br><span class=\"line\">    #初始化对象属性  </span><br><span class=\"line\">        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 </span><br><span class=\"line\">        self.age = age   #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\">        #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        print(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):</span><br><span class=\"line\">        print(&apos;This is a parent method&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from 1.py import Human  </span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Human):     #Human是Student的父类，Student是Human的子类</span><br><span class=\"line\">  </span><br><span class=\"line\">    def __init__(self,school,name,age):</span><br><span class=\"line\">        self.school = school </span><br><span class=\"line\"></span><br><span class=\"line\">        super(Student,self).__init__(name,age)  #建议以此方式调用父类</span><br><span class=\"line\">        #super 不仅仅可用于构造函数，也可以用于普通的实例方法</span><br><span class=\"line\"></span><br><span class=\"line\">        # Human.__init__(self,name,age)   #子类里调用父类构造函数</span><br><span class=\"line\">        #self   用类调用实例方法没意义，所以加self</span><br><span class=\"line\"></span><br><span class=\"line\">    #     self.age = age </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类</span><br><span class=\"line\">        #super(Student,self).do_homework()  #This is a parent method</span><br><span class=\"line\">        print(&apos;English homework&apos;)</span><br><span class=\"line\">        </span><br><span class=\"line\">student1 = Student(&apos;jinan university&apos;,&apos;wei&apos;,18) #实例化</span><br><span class=\"line\">student1.do_homework() #English homework</span><br><span class=\"line\">print(student1.name) #wei</span><br><span class=\"line\">print(student1.age)#18</span><br><span class=\"line\">#继承   单继承  多继承</span><br></pre></td></tr></table></figure>\n<p><strong>定义一个类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;&apos;   #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    age = 0   </span><br><span class=\"line\">    #行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)</span><br><span class=\"line\">        #初始化对象属性</span><br><span class=\"line\">        self.neme = name </span><br><span class=\"line\">        self.age = age        #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\"></span><br><span class=\"line\">    #    #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_files(self):        #在class内部定义函数</span><br><span class=\"line\">        print(&apos;name:&apos;+ self.name)</span><br><span class=\"line\">        print(&apos;age:&apos;+ str(self.age))</span><br><span class=\"line\"></span><br><span class=\"line\">student = Student()  #类的实例化</span><br><span class=\"line\">student.print_files()  #类下面方法的调用</span><br><span class=\"line\">#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。</span><br><span class=\"line\"># 定义实例时需要self，调用实例不需要给self赋参</span><br></pre></td></tr></table></figure></p>\n<p><strong>详解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 模块</span><br><span class=\"line\">c = 50</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    c= x+y </span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2)       #3   函数中局部变量的值</span><br><span class=\"line\">print(c)       #50  全局变量的值</span><br><span class=\"line\"> </span><br><span class=\"line\"># 两个print(c)的区别 </span><br><span class=\"line\"># 局部变量不会改变全局变量的值</span><br></pre></td></tr></table></figure></p>\n<p><strong>类和模块要区别对待</strong></p>\n<h6 id=\"‘类变量’-和-类-关联在一起的\"><a href=\"#‘类变量’-和-类-关联在一起的\" class=\"headerlink\" title=\"‘类变量’     和 类  关联在一起的\"></a>‘类变量’     和 类  关联在一起的</h6><p>######’实例变量’    和 对象 关联在一起的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def marking(self,sorce):         #内部访问</span><br><span class=\"line\">        if sorce &lt; 0:                #建议通过方法 对 类变量赋值</span><br><span class=\"line\">            # sorce =0</span><br><span class=\"line\">            return &apos;不能给同学打负分&apos;</span><br><span class=\"line\">        self.__sorce = sorce</span><br><span class=\"line\">        print(self.name + &apos;同学本次的考试分数为：&apos; + str(self.__sorce))</span><br><span class=\"line\">        return &apos;hello&apos;</span><br><span class=\"line\">result =  student1.marking(80)#wang同学本次的考试分数为：80</span><br><span class=\"line\">print(result)   #hello</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0    #   类变量   和类相关</span><br><span class=\"line\">    name = &apos;weilai&apos;   #在class内部定义变量    类变量</span><br><span class=\"line\">    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这</span><br><span class=\"line\">    # 行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法</span><br><span class=\"line\">        #主要是被用来初始化对象属性</span><br><span class=\"line\">        self.name = name            #实例方法操控实例变量</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(self.__class__.sum)   </span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        self.__class__.sum +=1      #实例方法访问类变量中的sum</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br></pre></td></tr></table></figure>\n<p><strong>类方法主要操作和类相关的变量</strong><br><strong>用类调用类方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">Student.plus_sum()  #用类调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">Student.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>对象调用类方法(python可用但最好不要用)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student1.plus_sum()  #用对象调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">student2.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod                #静态方法</span><br><span class=\"line\">    def add(x):</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        print(&apos;this is a static method&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)</strong><br><strong>当和类和对象没多大关系的时候,可以使用静态方法</strong><br><strong>静态方法和类方法  均不能访问  实例变量</strong></p>\n<p><strong>类中赋值没有意义的。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age): </span><br><span class=\"line\">        name = name   </span><br><span class=\"line\">        age = age</span><br><span class=\"line\">      </span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">print(student1.name)   #weilai</span><br><span class=\"line\">print(student1.age)    #0</span><br><span class=\"line\">print(student1.__dict__)    #&#123;&#125;   #__dict__显示student1下所有的变量，即没有变量</span><br><span class=\"line\"># python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）</span><br><span class=\"line\"># 所以即使student1为空，也显示了类变量下的值</span><br><span class=\"line\">#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的</span><br><span class=\"line\">#__init__ 构造函数是python特有的，可以从外部访问</span><br><span class=\"line\">#print(student1._Student__sorce)    表明python中私有只是改了一个名字</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fa443ae94cd458c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"变量上为 类变量，实例变量\"></p>\n<p>有意义的面向对象的代码<br>类  是面向对象最核心的观念<br>类、对象<br>实例化<br>类最基本的作用：封装<br>一定要用self,引用 self.<br>类只负责定义，不会去运行<br>类和对象。<br>数据成员<br>构造函数可以让模板生成不同的对象</p>\n<p><strong>类是现实世界或思维世界中的实体在计算机中的反馈</strong><br><strong>它将数据以及这些数据上的操作封装在一起</strong></p>\n<p><strong>类 被   实例化后  就成了一个具体的对象</strong><br><strong>类就像是一个模板，通过类  就可以产生很多对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#比如这段代码为  1.py</span><br><span class=\"line\">class Human():</span><br><span class=\"line\">    sum = 0  #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    def __init__(self,name,age):#构造函数 ，</span><br><span class=\"line\">    #文件夹中得含有  _init_.py   模块才会被认为是一个包。包 导入时会优先运行.</span><br><span class=\"line\">    #初始化对象属性  </span><br><span class=\"line\">        self.name = name # 定义实例时需要self，调用实例不需要给self赋参 </span><br><span class=\"line\">        self.age = age   #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\">        #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_name(self):</span><br><span class=\"line\">        print(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):</span><br><span class=\"line\">        print(&apos;This is a parent method&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from 1.py import Human  </span><br><span class=\"line\"></span><br><span class=\"line\">class Student(Human):     #Human是Student的父类，Student是Human的子类</span><br><span class=\"line\">  </span><br><span class=\"line\">    def __init__(self,school,name,age):</span><br><span class=\"line\">        self.school = school </span><br><span class=\"line\"></span><br><span class=\"line\">        super(Student,self).__init__(name,age)  #建议以此方式调用父类</span><br><span class=\"line\">        #super 不仅仅可用于构造函数，也可以用于普通的实例方法</span><br><span class=\"line\"></span><br><span class=\"line\">        # Human.__init__(self,name,age)   #子类里调用父类构造函数</span><br><span class=\"line\">        #self   用类调用实例方法没意义，所以加self</span><br><span class=\"line\"></span><br><span class=\"line\">    #     self.age = age </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    def do_homework(self):      #子类和父类同名的话，不会报错，先使用子类</span><br><span class=\"line\">        #super(Student,self).do_homework()  #This is a parent method</span><br><span class=\"line\">        print(&apos;English homework&apos;)</span><br><span class=\"line\">        </span><br><span class=\"line\">student1 = Student(&apos;jinan university&apos;,&apos;wei&apos;,18) #实例化</span><br><span class=\"line\">student1.do_homework() #English homework</span><br><span class=\"line\">print(student1.name) #wei</span><br><span class=\"line\">print(student1.age)#18</span><br><span class=\"line\">#继承   单继承  多继承</span><br></pre></td></tr></table></figure>\n<p><strong>定义一个类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;&apos;   #在class内部定义变量    类变量 （和类相关联在一起的）</span><br><span class=\"line\">    age = 0   </span><br><span class=\"line\">    #行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,age,name):        #构造函数(实例化后，会自动调用)</span><br><span class=\"line\">        #初始化对象属性</span><br><span class=\"line\">        self.neme = name </span><br><span class=\"line\">        self.age = age        #定义实例变量，实例变量只和对象相关 self.</span><br><span class=\"line\"></span><br><span class=\"line\">    #    #return NONE (构造函数只能返回NONE)  (补充知识)</span><br><span class=\"line\"></span><br><span class=\"line\">    def print_files(self):        #在class内部定义函数</span><br><span class=\"line\">        print(&apos;name:&apos;+ self.name)</span><br><span class=\"line\">        print(&apos;age:&apos;+ str(self.age))</span><br><span class=\"line\"></span><br><span class=\"line\">student = Student()  #类的实例化</span><br><span class=\"line\">student.print_files()  #类下面方法的调用</span><br><span class=\"line\">#  建议 类的实例化以及类下面方法的调用 与类的定义放在不同的模块。</span><br><span class=\"line\"># 定义实例时需要self，调用实例不需要给self赋参</span><br></pre></td></tr></table></figure></p>\n<p><strong>详解</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 模块</span><br><span class=\"line\">c = 50</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x, y):</span><br><span class=\"line\">    c= x+y </span><br><span class=\"line\">    print(c)</span><br><span class=\"line\"></span><br><span class=\"line\">add(1,2)       #3   函数中局部变量的值</span><br><span class=\"line\">print(c)       #50  全局变量的值</span><br><span class=\"line\"> </span><br><span class=\"line\"># 两个print(c)的区别 </span><br><span class=\"line\"># 局部变量不会改变全局变量的值</span><br></pre></td></tr></table></figure></p>\n<p><strong>类和模块要区别对待</strong></p>\n<h6 id=\"‘类变量’-和-类-关联在一起的\"><a href=\"#‘类变量’-和-类-关联在一起的\" class=\"headerlink\" title=\"‘类变量’     和 类  关联在一起的\"></a>‘类变量’     和 类  关联在一起的</h6><p>######’实例变量’    和 对象 关联在一起的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    def marking(self,sorce):         #内部访问</span><br><span class=\"line\">        if sorce &lt; 0:                #建议通过方法 对 类变量赋值</span><br><span class=\"line\">            # sorce =0</span><br><span class=\"line\">            return &apos;不能给同学打负分&apos;</span><br><span class=\"line\">        self.__sorce = sorce</span><br><span class=\"line\">        print(self.name + &apos;同学本次的考试分数为：&apos; + str(self.__sorce))</span><br><span class=\"line\">        return &apos;hello&apos;</span><br><span class=\"line\">result =  student1.marking(80)#wang同学本次的考试分数为：80</span><br><span class=\"line\">print(result)   #hello</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0    #   类变量   和类相关</span><br><span class=\"line\">    name = &apos;weilai&apos;   #在class内部定义变量    类变量</span><br><span class=\"line\">    age = 0           # 类中赋值没有意义的。   #21 ，22 其实是与对象相关，不应出现在这</span><br><span class=\"line\">    # 行为 与  特征   </span><br><span class=\"line\">         </span><br><span class=\"line\">    def __init__(self,name,age):     #构造函数(实例化后，会自动调用),是一个特殊的方法</span><br><span class=\"line\">        #主要是被用来初始化对象属性</span><br><span class=\"line\">        self.name = name            #实例方法操控实例变量</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(self.__class__.sum)   </span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        self.__class__.sum +=1      #实例方法访问类变量中的sum</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br></pre></td></tr></table></figure>\n<p><strong>类方法主要操作和类相关的变量</strong><br><strong>用类调用类方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">Student.plus_sum()  #用类调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">Student.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>对象调用类方法(python可用但最好不要用)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod                  #让其成为类方法     </span><br><span class=\"line\">    def plus_sum(cls):             #sum每运行一次就+1</span><br><span class=\"line\">        cls.sum+=1</span><br><span class=\"line\">        print(cls.sum)</span><br><span class=\"line\"></span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">student1.plus_sum()  #用对象调用类方法</span><br><span class=\"line\">student2 = Student(&apos;li&apos;,19)</span><br><span class=\"line\">student2.plus_sum()</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():        </span><br><span class=\"line\">    sum=0   </span><br><span class=\"line\">    name = &apos;weilai&apos;   </span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age):   </span><br><span class=\"line\">        self.name = name            </span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    @staticmethod                #静态方法</span><br><span class=\"line\">    def add(x):</span><br><span class=\"line\">        print(Student.sum)</span><br><span class=\"line\">        print(&apos;this is a static method&apos;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>静态方法 能用的地方 基本可以用  类方法替代(最好用类方法)</strong><br><strong>当和类和对象没多大关系的时候,可以使用静态方法</strong><br><strong>静态方法和类方法  均不能访问  实例变量</strong></p>\n<p><strong>类中赋值没有意义的。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student():</span><br><span class=\"line\">    name = &apos;weilai&apos;</span><br><span class=\"line\">    age = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self,name,age): </span><br><span class=\"line\">        name = name   </span><br><span class=\"line\">        age = age</span><br><span class=\"line\">      </span><br><span class=\"line\">student1 = Student(&apos;wang&apos;,18)</span><br><span class=\"line\">print(student1.name)   #weilai</span><br><span class=\"line\">print(student1.age)    #0</span><br><span class=\"line\">print(student1.__dict__)    #&#123;&#125;   #__dict__显示student1下所有的变量，即没有变量</span><br><span class=\"line\"># python  会先在  实列变量上寻找 ，寻找不到就会到类变量里寻找，（然后再到父类里寻找）</span><br><span class=\"line\"># 所以即使student1为空，也显示了类变量下的值</span><br><span class=\"line\">#公开的 public    私有的（外部不能访问）private  在方法或变量前加__ 表示私有的</span><br><span class=\"line\">#__init__ 构造函数是python特有的，可以从外部访问</span><br><span class=\"line\">#print(student1._Student__sorce)    表明python中私有只是改了一个名字</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(9) python之闭包","date":"2018-11-14T14:00:48.000Z","_content":"**闭包**\n闭包 = 函数 + 环境变量(函数定义的时候)\n\n**一个最简单的闭包**\n```\ndef curve_pre():\n    def curve():\n        print('This is a function')\n    return curve\n\nf = curve_pre()\nf()   #This is a function\n```\n**闭包不受外部变量影响**\n```\ndef curve_pre1():\n    a = 25\n    def curve1(x):\n        return a*x**2\n    return curve1\n\n#闭包 = 函数 + 环境变量(函数定义的时候)\na = 20     #全局变量\nf1 = curve_pre1()\nprint(f1.__closure__)  \n #(<cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720>,)实质返回了一个闭包\nprint(f1.__closure__[0].cell_contents)  #25  取出环境变量\nf1(2)   \nprint(f1(2))  #100   调用时 a 取 25\n```\n**非闭包**\n```\ndef f2():\n    a = 10\n    def f3():\n        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了\n        a = 20\n        print(a)\n    print(a)\n    f3()\n    print(a)\n\nf2()\n#首先运行f2() ,a=10，print(a)即为10\n#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量\n#最后print(a)即为10\n```\n**闭包**\n```\ndef f4():\n    a = 10\n    def f5():\n        c = 20 * a   #调用了 a=10\n    return f5\n\nf = f4()\nprint(f) #<function f4.<locals>.f5 at 0x0000015AF4F479D8>\nprint(f.__closure__)\n#(<cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540>,)\n```\n\n**闭包 只是一种思维方式，函数式编程**\n\n**闭包可以记忆上次调用的状态**\n\n**例题，origin 最初为0，累加计算**\n```\n#闭包模式\norigin = 0\n\ndef factory(pos):\n    def go(step):\n        nonlocal pos #pos不是本地局部变量\n        new_pos = pos +step\n        pos = new_pos\n        return new_pos\n    return go\n\ntourist = factory(origin)   #初始化为 0\nprint(tourist(2))    #即step为2\nprint(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值\nprint(tourist(3))\nprint(tourist.__closure__[0].cell_contents)#5\nprint(tourist(5))\nprint(tourist.__closure__[0].cell_contents)#10\nprint(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部\n```\n```\n#非闭包\norigin = 0\ndef go(step):\n    global origin   #定义一个全局变量\n    new_pos = origin + step\n    origin = new_pos\n    return new_pos\n\nprint(go(2))#2\nprint(origin)#2  #改变了全局变量的值\nprint(go(3))#5\nprint(origin)#5\nprint(go(5))#10\nprint(origin)#10\n```\n```\n#面向对象编程\nclass Tourist():\n    origin = 0\n    def pos(self,new_pos):\n        self.origin += new_pos\n\ntourist=Tourist()\nprint(tourist.origin)\ntourist.pos(2)\nprint(tourist.origin)\ntourist.pos(3)\nprint(tourist.origin)\ntourist.pos(5)\nprint(tourist.origin)\n```\n","source":"_posts/python基础/python之闭包.md","raw":"---\ntitle: (9) python之闭包\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**闭包**\n闭包 = 函数 + 环境变量(函数定义的时候)\n\n**一个最简单的闭包**\n```\ndef curve_pre():\n    def curve():\n        print('This is a function')\n    return curve\n\nf = curve_pre()\nf()   #This is a function\n```\n**闭包不受外部变量影响**\n```\ndef curve_pre1():\n    a = 25\n    def curve1(x):\n        return a*x**2\n    return curve1\n\n#闭包 = 函数 + 环境变量(函数定义的时候)\na = 20     #全局变量\nf1 = curve_pre1()\nprint(f1.__closure__)  \n #(<cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720>,)实质返回了一个闭包\nprint(f1.__closure__[0].cell_contents)  #25  取出环境变量\nf1(2)   \nprint(f1(2))  #100   调用时 a 取 25\n```\n**非闭包**\n```\ndef f2():\n    a = 10\n    def f3():\n        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了\n        a = 20\n        print(a)\n    print(a)\n    f3()\n    print(a)\n\nf2()\n#首先运行f2() ,a=10，print(a)即为10\n#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量\n#最后print(a)即为10\n```\n**闭包**\n```\ndef f4():\n    a = 10\n    def f5():\n        c = 20 * a   #调用了 a=10\n    return f5\n\nf = f4()\nprint(f) #<function f4.<locals>.f5 at 0x0000015AF4F479D8>\nprint(f.__closure__)\n#(<cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540>,)\n```\n\n**闭包 只是一种思维方式，函数式编程**\n\n**闭包可以记忆上次调用的状态**\n\n**例题，origin 最初为0，累加计算**\n```\n#闭包模式\norigin = 0\n\ndef factory(pos):\n    def go(step):\n        nonlocal pos #pos不是本地局部变量\n        new_pos = pos +step\n        pos = new_pos\n        return new_pos\n    return go\n\ntourist = factory(origin)   #初始化为 0\nprint(tourist(2))    #即step为2\nprint(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值\nprint(tourist(3))\nprint(tourist.__closure__[0].cell_contents)#5\nprint(tourist(5))\nprint(tourist.__closure__[0].cell_contents)#10\nprint(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部\n```\n```\n#非闭包\norigin = 0\ndef go(step):\n    global origin   #定义一个全局变量\n    new_pos = origin + step\n    origin = new_pos\n    return new_pos\n\nprint(go(2))#2\nprint(origin)#2  #改变了全局变量的值\nprint(go(3))#5\nprint(origin)#5\nprint(go(5))#10\nprint(origin)#10\n```\n```\n#面向对象编程\nclass Tourist():\n    origin = 0\n    def pos(self,new_pos):\n        self.origin += new_pos\n\ntourist=Tourist()\nprint(tourist.origin)\ntourist.pos(2)\nprint(tourist.origin)\ntourist.pos(3)\nprint(tourist.origin)\ntourist.pos(5)\nprint(tourist.origin)\n```\n","slug":"python基础/python之闭包","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2m0057tssaen3ze18w","content":"<p><strong>闭包</strong><br>闭包 = 函数 + 环境变量(函数定义的时候)</p>\n<p><strong>一个最简单的闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre():</span><br><span class=\"line\">    def curve():</span><br><span class=\"line\">        print(&apos;This is a function&apos;)</span><br><span class=\"line\">    return curve</span><br><span class=\"line\"></span><br><span class=\"line\">f = curve_pre()</span><br><span class=\"line\">f()   #This is a function</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包不受外部变量影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre1():</span><br><span class=\"line\">    a = 25</span><br><span class=\"line\">    def curve1(x):</span><br><span class=\"line\">        return a*x**2</span><br><span class=\"line\">    return curve1</span><br><span class=\"line\"></span><br><span class=\"line\">#闭包 = 函数 + 环境变量(函数定义的时候)</span><br><span class=\"line\">a = 20     #全局变量</span><br><span class=\"line\">f1 = curve_pre1()</span><br><span class=\"line\">print(f1.__closure__)  </span><br><span class=\"line\"> #(&lt;cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720&gt;,)实质返回了一个闭包</span><br><span class=\"line\">print(f1.__closure__[0].cell_contents)  #25  取出环境变量</span><br><span class=\"line\">f1(2)   </span><br><span class=\"line\">print(f1(2))  #100   调用时 a 取 25</span><br></pre></td></tr></table></figure></p>\n<p><strong>非闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f2():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f3():</span><br><span class=\"line\">        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了</span><br><span class=\"line\">        a = 20</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    f3()</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br><span class=\"line\">#首先运行f2() ,a=10，print(a)即为10</span><br><span class=\"line\">#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量</span><br><span class=\"line\">#最后print(a)即为10</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f4():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f5():</span><br><span class=\"line\">        c = 20 * a   #调用了 a=10</span><br><span class=\"line\">    return f5</span><br><span class=\"line\"></span><br><span class=\"line\">f = f4()</span><br><span class=\"line\">print(f) #&lt;function f4.&lt;locals&gt;.f5 at 0x0000015AF4F479D8&gt;</span><br><span class=\"line\">print(f.__closure__)</span><br><span class=\"line\">#(&lt;cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540&gt;,)</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包 只是一种思维方式，函数式编程</strong></p>\n<p><strong>闭包可以记忆上次调用的状态</strong></p>\n<p><strong>例题，origin 最初为0，累加计算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包模式</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\"></span><br><span class=\"line\">def factory(pos):</span><br><span class=\"line\">    def go(step):</span><br><span class=\"line\">        nonlocal pos #pos不是本地局部变量</span><br><span class=\"line\">        new_pos = pos +step</span><br><span class=\"line\">        pos = new_pos</span><br><span class=\"line\">        return new_pos</span><br><span class=\"line\">    return go</span><br><span class=\"line\"></span><br><span class=\"line\">tourist = factory(origin)   #初始化为 0</span><br><span class=\"line\">print(tourist(2))    #即step为2</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值</span><br><span class=\"line\">print(tourist(3))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#5</span><br><span class=\"line\">print(tourist(5))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#10</span><br><span class=\"line\">print(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#非闭包</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\">def go(step):</span><br><span class=\"line\">    global origin   #定义一个全局变量</span><br><span class=\"line\">    new_pos = origin + step</span><br><span class=\"line\">    origin = new_pos</span><br><span class=\"line\">    return new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">print(go(2))#2</span><br><span class=\"line\">print(origin)#2  #改变了全局变量的值</span><br><span class=\"line\">print(go(3))#5</span><br><span class=\"line\">print(origin)#5</span><br><span class=\"line\">print(go(5))#10</span><br><span class=\"line\">print(origin)#10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#面向对象编程</span><br><span class=\"line\">class Tourist():</span><br><span class=\"line\">    origin = 0</span><br><span class=\"line\">    def pos(self,new_pos):</span><br><span class=\"line\">        self.origin += new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">tourist=Tourist()</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(2)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(3)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(5)</span><br><span class=\"line\">print(tourist.origin)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>闭包</strong><br>闭包 = 函数 + 环境变量(函数定义的时候)</p>\n<p><strong>一个最简单的闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre():</span><br><span class=\"line\">    def curve():</span><br><span class=\"line\">        print(&apos;This is a function&apos;)</span><br><span class=\"line\">    return curve</span><br><span class=\"line\"></span><br><span class=\"line\">f = curve_pre()</span><br><span class=\"line\">f()   #This is a function</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包不受外部变量影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def curve_pre1():</span><br><span class=\"line\">    a = 25</span><br><span class=\"line\">    def curve1(x):</span><br><span class=\"line\">        return a*x**2</span><br><span class=\"line\">    return curve1</span><br><span class=\"line\"></span><br><span class=\"line\">#闭包 = 函数 + 环境变量(函数定义的时候)</span><br><span class=\"line\">a = 20     #全局变量</span><br><span class=\"line\">f1 = curve_pre1()</span><br><span class=\"line\">print(f1.__closure__)  </span><br><span class=\"line\"> #(&lt;cell at 0x00000216457D06D8: int object at 0x00007FFEF75AD720&gt;,)实质返回了一个闭包</span><br><span class=\"line\">print(f1.__closure__[0].cell_contents)  #25  取出环境变量</span><br><span class=\"line\">f1(2)   </span><br><span class=\"line\">print(f1(2))  #100   调用时 a 取 25</span><br></pre></td></tr></table></figure></p>\n<p><strong>非闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f2():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f3():</span><br><span class=\"line\">        #a(=20)被python 认为是一个局部变量,没有引用上面的a(=10)(环境变量)就不是闭包了</span><br><span class=\"line\">        a = 20</span><br><span class=\"line\">        print(a)</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    f3()</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br><span class=\"line\">#首先运行f2() ,a=10，print(a)即为10</span><br><span class=\"line\">#然后运行f3() ,a=20，print(a)即为20，此时a为f3()中的局部变量</span><br><span class=\"line\">#最后print(a)即为10</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def f4():</span><br><span class=\"line\">    a = 10</span><br><span class=\"line\">    def f5():</span><br><span class=\"line\">        c = 20 * a   #调用了 a=10</span><br><span class=\"line\">    return f5</span><br><span class=\"line\"></span><br><span class=\"line\">f = f4()</span><br><span class=\"line\">print(f) #&lt;function f4.&lt;locals&gt;.f5 at 0x0000015AF4F479D8&gt;</span><br><span class=\"line\">print(f.__closure__)</span><br><span class=\"line\">#(&lt;cell at 0x0000015AF4ED06D8: int object at 0x00007FFC0F54D540&gt;,)</span><br></pre></td></tr></table></figure></p>\n<p><strong>闭包 只是一种思维方式，函数式编程</strong></p>\n<p><strong>闭包可以记忆上次调用的状态</strong></p>\n<p><strong>例题，origin 最初为0，累加计算</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#闭包模式</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\"></span><br><span class=\"line\">def factory(pos):</span><br><span class=\"line\">    def go(step):</span><br><span class=\"line\">        nonlocal pos #pos不是本地局部变量</span><br><span class=\"line\">        new_pos = pos +step</span><br><span class=\"line\">        pos = new_pos</span><br><span class=\"line\">        return new_pos</span><br><span class=\"line\">    return go</span><br><span class=\"line\"></span><br><span class=\"line\">tourist = factory(origin)   #初始化为 0</span><br><span class=\"line\">print(tourist(2))    #即step为2</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#取环境变量#2记住了调用的值</span><br><span class=\"line\">print(tourist(3))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#5</span><br><span class=\"line\">print(tourist(5))</span><br><span class=\"line\">print(tourist.__closure__[0].cell_contents)#10</span><br><span class=\"line\">print(origin)  #0  使用闭包，并没有改变全局变量,所有操作都在函数内部</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#非闭包</span><br><span class=\"line\">origin = 0</span><br><span class=\"line\">def go(step):</span><br><span class=\"line\">    global origin   #定义一个全局变量</span><br><span class=\"line\">    new_pos = origin + step</span><br><span class=\"line\">    origin = new_pos</span><br><span class=\"line\">    return new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">print(go(2))#2</span><br><span class=\"line\">print(origin)#2  #改变了全局变量的值</span><br><span class=\"line\">print(go(3))#5</span><br><span class=\"line\">print(origin)#5</span><br><span class=\"line\">print(go(5))#10</span><br><span class=\"line\">print(origin)#10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#面向对象编程</span><br><span class=\"line\">class Tourist():</span><br><span class=\"line\">    origin = 0</span><br><span class=\"line\">    def pos(self,new_pos):</span><br><span class=\"line\">        self.origin += new_pos</span><br><span class=\"line\"></span><br><span class=\"line\">tourist=Tourist()</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(2)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(3)</span><br><span class=\"line\">print(tourist.origin)</span><br><span class=\"line\">tourist.pos(5)</span><br><span class=\"line\">print(tourist.origin)</span><br></pre></td></tr></table></figure>\n"},{"title":"(8) python之初识JSON","date":"2018-11-14T13:59:58.000Z","_content":"\n**JSON是一种轻量级的数据交换格式**\n**JSON 是一种数据格式**\n**字符串是 JSON的表现形式**\n**符合JSON格式的字符串叫做 JSON字符串**\njson易于阅读，易于解析，网络传输效率高    跨语言交换数据\n json.loads()解码(反序列化),json.dumps()编码(序列化)\n```\nimport json   #反序列化\n\njson_str = '{\"name\":\"weilai\",\"age\":18,\"a\":true}'     #JSON字符串格式，双引号\njson_str1 = '[{\"name\":\"weilai\",\"age\":18,\"a\":false},{\"name\":\"weilai\",\"age\":18}]'\n\nstudent = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构\nstudent1 = json.loads(json_str1)     \n\nprint(type(student))  #字典格式  {'name': 'weilai', 'age': 18, 'a': True}\nprint(type(student1)) #列表形式  [{'name': 'weilai', 'age': 18, 'a': False}, {'name': 'weilai', 'age': 18}]\n\nprint(student)  \nprint(student1)\nprint(student['age']) \nprint(student['name']) \n```\n\n**序列化**\n```\nimport json\n\nstudent = [\n            {'name': 'weilai', 'age': 18,'a': False},\n            {'name': 'weilai', 'age': 18}\n          ]\n\njson_str = json.dumps(student)\nprint(type(json_str))  #<class 'str'>\nprint(json_str)        #[{\"name\": \"weilai\", \"age\": 18, \"a\": false}, {\"name\": \"weilai\", \"age\": 18}]\n```\n**JSON对象，json, json字符串**\n\n**在python中没有JSON对象**\n\n**json 是对ecmascript的一种实现  与Javascript相同**\n\n**json 是一种中间数据类型，有自己的数据类型，与JavaScript相似**\n\n**rest  服务的标准格式**\n","source":"_posts/python基础/python之初识JSON.md","raw":"---\ntitle: (8) python之初识JSON\ndate: 2018-11-14 21:59:58\ntags:\ncategories: python基础\n---\n\n**JSON是一种轻量级的数据交换格式**\n**JSON 是一种数据格式**\n**字符串是 JSON的表现形式**\n**符合JSON格式的字符串叫做 JSON字符串**\njson易于阅读，易于解析，网络传输效率高    跨语言交换数据\n json.loads()解码(反序列化),json.dumps()编码(序列化)\n```\nimport json   #反序列化\n\njson_str = '{\"name\":\"weilai\",\"age\":18,\"a\":true}'     #JSON字符串格式，双引号\njson_str1 = '[{\"name\":\"weilai\",\"age\":18,\"a\":false},{\"name\":\"weilai\",\"age\":18}]'\n\nstudent = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构\nstudent1 = json.loads(json_str1)     \n\nprint(type(student))  #字典格式  {'name': 'weilai', 'age': 18, 'a': True}\nprint(type(student1)) #列表形式  [{'name': 'weilai', 'age': 18, 'a': False}, {'name': 'weilai', 'age': 18}]\n\nprint(student)  \nprint(student1)\nprint(student['age']) \nprint(student['name']) \n```\n\n**序列化**\n```\nimport json\n\nstudent = [\n            {'name': 'weilai', 'age': 18,'a': False},\n            {'name': 'weilai', 'age': 18}\n          ]\n\njson_str = json.dumps(student)\nprint(type(json_str))  #<class 'str'>\nprint(json_str)        #[{\"name\": \"weilai\", \"age\": 18, \"a\": false}, {\"name\": \"weilai\", \"age\": 18}]\n```\n**JSON对象，json, json字符串**\n\n**在python中没有JSON对象**\n\n**json 是对ecmascript的一种实现  与Javascript相同**\n\n**json 是一种中间数据类型，有自己的数据类型，与JavaScript相似**\n\n**rest  服务的标准格式**\n","slug":"python基础/python之初识JSON","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2n0059tssahsr7jsyo","content":"<p><strong>JSON是一种轻量级的数据交换格式</strong><br><strong>JSON 是一种数据格式</strong><br><strong>字符串是 JSON的表现形式</strong><br><strong>符合JSON格式的字符串叫做 JSON字符串</strong><br>json易于阅读，易于解析，网络传输效率高    跨语言交换数据<br> json.loads()解码(反序列化),json.dumps()编码(序列化)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json   #反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = &apos;&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:true&#125;&apos;     #JSON字符串格式，双引号</span><br><span class=\"line\">json_str1 = &apos;[&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:false&#125;,&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18&#125;]&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">student = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构</span><br><span class=\"line\">student1 = json.loads(json_str1)     </span><br><span class=\"line\"></span><br><span class=\"line\">print(type(student))  #字典格式  &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: True&#125;</span><br><span class=\"line\">print(type(student1)) #列表形式  [&#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: False&#125;, &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(student)  </span><br><span class=\"line\">print(student1)</span><br><span class=\"line\">print(student[&apos;age&apos;]) </span><br><span class=\"line\">print(student[&apos;name&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><strong>序列化</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">student = [</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18,&apos;a&apos;: False&#125;,</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = json.dumps(student)</span><br><span class=\"line\">print(type(json_str))  #&lt;class &apos;str&apos;&gt;</span><br><span class=\"line\">print(json_str)        #[&#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18, &quot;a&quot;: false&#125;, &#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON对象，json, json字符串</strong></p>\n<p><strong>在python中没有JSON对象</strong></p>\n<p><strong>json 是对ecmascript的一种实现  与Javascript相同</strong></p>\n<p><strong>json 是一种中间数据类型，有自己的数据类型，与JavaScript相似</strong></p>\n<p><strong>rest  服务的标准格式</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>JSON是一种轻量级的数据交换格式</strong><br><strong>JSON 是一种数据格式</strong><br><strong>字符串是 JSON的表现形式</strong><br><strong>符合JSON格式的字符串叫做 JSON字符串</strong><br>json易于阅读，易于解析，网络传输效率高    跨语言交换数据<br> json.loads()解码(反序列化),json.dumps()编码(序列化)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json   #反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = &apos;&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:true&#125;&apos;     #JSON字符串格式，双引号</span><br><span class=\"line\">json_str1 = &apos;[&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18,&quot;a&quot;:false&#125;,&#123;&quot;name&quot;:&quot;weilai&quot;,&quot;age&quot;:18&#125;]&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">student = json.loads(json_str)      #将一个JSON编码的字符串转换回一个Python数据结构</span><br><span class=\"line\">student1 = json.loads(json_str1)     </span><br><span class=\"line\"></span><br><span class=\"line\">print(type(student))  #字典格式  &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: True&#125;</span><br><span class=\"line\">print(type(student1)) #列表形式  [&#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18, &apos;a&apos;: False&#125;, &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">print(student)  </span><br><span class=\"line\">print(student1)</span><br><span class=\"line\">print(student[&apos;age&apos;]) </span><br><span class=\"line\">print(student[&apos;name&apos;])</span><br></pre></td></tr></table></figure></p>\n<p><strong>序列化</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">student = [</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18,&apos;a&apos;: False&#125;,</span><br><span class=\"line\">            &#123;&apos;name&apos;: &apos;weilai&apos;, &apos;age&apos;: 18&#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = json.dumps(student)</span><br><span class=\"line\">print(type(json_str))  #&lt;class &apos;str&apos;&gt;</span><br><span class=\"line\">print(json_str)        #[&#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18, &quot;a&quot;: false&#125;, &#123;&quot;name&quot;: &quot;weilai&quot;, &quot;age&quot;: 18&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>JSON对象，json, json字符串</strong></p>\n<p><strong>在python中没有JSON对象</strong></p>\n<p><strong>json 是对ecmascript的一种实现  与Javascript相同</strong></p>\n<p><strong>json 是一种中间数据类型，有自己的数据类型，与JavaScript相似</strong></p>\n<p><strong>rest  服务的标准格式</strong></p>\n"},{"title":"(11) python之函数式编程","date":"2018-11-14T14:00:48.000Z","_content":"**函数式编程是一种思维，闭包只是其一种体现**\n\n**匿名函数**\n```\n#例如 x+y\n\n#普通函数\ndef add(x,y):\n  return x+y\n\n#匿名函数\nlambda x,y:x+y \n```\n**三元表达式**\n```\n# x,y   x大于y，取x 否则，取y\n# x > y ? x:y  (其他语言中)\n# x if x > y else y #python中\n#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 \nx = 1\ny = 4\nr = x if x > y else y\nprint(r) #4\n```\n**map类**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\ndef square(x):\n    return x * x\n\nr = map(square,list_a)\nprint(r)  #<map object at 0x0000026BCECDE9E8>#map类\nprint(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]\n#map:将集合里每个元素传到square里去，并且映射到新的集合中\n\n#也可以用for\ndef square1(x):\n    return x * x\nfor x in list_a:\n    x = square1(x)\n    print(x)#1, 4, 9, 16, 25, 36, 49, 64\n```\n**map常用方法**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\nr = map(lambda x:x * x,list_a)\nprint(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]\n```\n```\nlist_a = [1,2,3,4,5,6,7,8]\nlist_b = [1, 4, 9, 16, 25, 36, 49]\n\ns = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list\nprint(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个\n```\n**reduce** 连续计算，连续计算，连续调用lambda\n```\nfrom functools import reduce\nlist_a = [1,2,3,4,5,6,7,8]\nr = reduce(lambda x,y:x + y,list_a,10) #初始值为10\n #10+1,得到11，11+2,得到13.....等一系列计算\nprint(r) #46\n```\n```\n#初始值为50，从0累加到99\nfrom functools import reduce\na = range(0,100)\nr = reduce(lambda x,y:x+y,a,50)\nprint(r) \n```\n**map/reduce编程模型 映射 归纳 \n并行计算\n函数式编程**\n\n**filter  过滤**\n```\nlist_a = [1,1,0,0,1,1,0,1,0]\n# r = filter(lambda x: True if x==1 else False, list_a)\nr = filter(lambda x:x,list_a) #因为0代表False\nprint(list(r))\n```\n","source":"_posts/python基础/python之函数式编程.md","raw":"---\ntitle: (11) python之函数式编程\ndate: 2018-11-14 22:00:48\ntags:\ncategories: python基础\n---\n**函数式编程是一种思维，闭包只是其一种体现**\n\n**匿名函数**\n```\n#例如 x+y\n\n#普通函数\ndef add(x,y):\n  return x+y\n\n#匿名函数\nlambda x,y:x+y \n```\n**三元表达式**\n```\n# x,y   x大于y，取x 否则，取y\n# x > y ? x:y  (其他语言中)\n# x if x > y else y #python中\n#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 \nx = 1\ny = 4\nr = x if x > y else y\nprint(r) #4\n```\n**map类**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\ndef square(x):\n    return x * x\n\nr = map(square,list_a)\nprint(r)  #<map object at 0x0000026BCECDE9E8>#map类\nprint(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]\n#map:将集合里每个元素传到square里去，并且映射到新的集合中\n\n#也可以用for\ndef square1(x):\n    return x * x\nfor x in list_a:\n    x = square1(x)\n    print(x)#1, 4, 9, 16, 25, 36, 49, 64\n```\n**map常用方法**\n```\nlist_a = [1,2,3,4,5,6,7,8]\n\nr = map(lambda x:x * x,list_a)\nprint(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]\n```\n```\nlist_a = [1,2,3,4,5,6,7,8]\nlist_b = [1, 4, 9, 16, 25, 36, 49]\n\ns = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list\nprint(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个\n```\n**reduce** 连续计算，连续计算，连续调用lambda\n```\nfrom functools import reduce\nlist_a = [1,2,3,4,5,6,7,8]\nr = reduce(lambda x,y:x + y,list_a,10) #初始值为10\n #10+1,得到11，11+2,得到13.....等一系列计算\nprint(r) #46\n```\n```\n#初始值为50，从0累加到99\nfrom functools import reduce\na = range(0,100)\nr = reduce(lambda x,y:x+y,a,50)\nprint(r) \n```\n**map/reduce编程模型 映射 归纳 \n并行计算\n函数式编程**\n\n**filter  过滤**\n```\nlist_a = [1,1,0,0,1,1,0,1,0]\n# r = filter(lambda x: True if x==1 else False, list_a)\nr = filter(lambda x:x,list_a) #因为0代表False\nprint(list(r))\n```\n","slug":"python基础/python之函数式编程","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2n005btssatf7vpm00","content":"<p><strong>函数式编程是一种思维，闭包只是其一种体现</strong></p>\n<p><strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#例如 x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数</span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">  return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#匿名函数</span><br><span class=\"line\">lambda x,y:x+y</span><br></pre></td></tr></table></figure></p>\n<p><strong>三元表达式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># x,y   x大于y，取x 否则，取y</span><br><span class=\"line\"># x &gt; y ? x:y  (其他语言中)</span><br><span class=\"line\"># x if x &gt; y else y #python中</span><br><span class=\"line\">#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 </span><br><span class=\"line\">x = 1</span><br><span class=\"line\">y = 4</span><br><span class=\"line\">r = x if x &gt; y else y</span><br><span class=\"line\">print(r) #4</span><br></pre></td></tr></table></figure></p>\n<p><strong>map类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">def square(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(square,list_a)</span><br><span class=\"line\">print(r)  #&lt;map object at 0x0000026BCECDE9E8&gt;#map类</span><br><span class=\"line\">print(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]</span><br><span class=\"line\">#map:将集合里每个元素传到square里去，并且映射到新的集合中</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以用for</span><br><span class=\"line\">def square1(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">for x in list_a:</span><br><span class=\"line\">    x = square1(x)</span><br><span class=\"line\">    print(x)#1, 4, 9, 16, 25, 36, 49, 64</span><br></pre></td></tr></table></figure></p>\n<p><strong>map常用方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(lambda x:x * x,list_a)</span><br><span class=\"line\">print(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">list_b = [1, 4, 9, 16, 25, 36, 49]</span><br><span class=\"line\"></span><br><span class=\"line\">s = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list</span><br><span class=\"line\">print(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个</span><br></pre></td></tr></table></figure>\n<p><strong>reduce</strong> 连续计算，连续计算，连续调用lambda<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">r = reduce(lambda x,y:x + y,list_a,10) #初始值为10</span><br><span class=\"line\"> #10+1,得到11，11+2,得到13.....等一系列计算</span><br><span class=\"line\">print(r) #46</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始值为50，从0累加到99</span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">a = range(0,100)</span><br><span class=\"line\">r = reduce(lambda x,y:x+y,a,50)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<p><strong>map/reduce编程模型 映射 归纳<br>并行计算<br>函数式编程</strong></p>\n<p><strong>filter  过滤</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,1,0,0,1,1,0,1,0]</span><br><span class=\"line\"># r = filter(lambda x: True if x==1 else False, list_a)</span><br><span class=\"line\">r = filter(lambda x:x,list_a) #因为0代表False</span><br><span class=\"line\">print(list(r))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>函数式编程是一种思维，闭包只是其一种体现</strong></p>\n<p><strong>匿名函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#例如 x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#普通函数</span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">  return x+y</span><br><span class=\"line\"></span><br><span class=\"line\">#匿名函数</span><br><span class=\"line\">lambda x,y:x+y</span><br></pre></td></tr></table></figure></p>\n<p><strong>三元表达式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># x,y   x大于y，取x 否则，取y</span><br><span class=\"line\"># x &gt; y ? x:y  (其他语言中)</span><br><span class=\"line\"># x if x &gt; y else y #python中</span><br><span class=\"line\">#条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果 </span><br><span class=\"line\">x = 1</span><br><span class=\"line\">y = 4</span><br><span class=\"line\">r = x if x &gt; y else y</span><br><span class=\"line\">print(r) #4</span><br></pre></td></tr></table></figure></p>\n<p><strong>map类</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">def square(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(square,list_a)</span><br><span class=\"line\">print(r)  #&lt;map object at 0x0000026BCECDE9E8&gt;#map类</span><br><span class=\"line\">print(list(r)) #[1, 4, 9, 16, 25, 36, 49, 64]</span><br><span class=\"line\">#map:将集合里每个元素传到square里去，并且映射到新的集合中</span><br><span class=\"line\"></span><br><span class=\"line\">#也可以用for</span><br><span class=\"line\">def square1(x):</span><br><span class=\"line\">    return x * x</span><br><span class=\"line\">for x in list_a:</span><br><span class=\"line\">    x = square1(x)</span><br><span class=\"line\">    print(x)#1, 4, 9, 16, 25, 36, 49, 64</span><br></pre></td></tr></table></figure></p>\n<p><strong>map常用方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\"></span><br><span class=\"line\">r = map(lambda x:x * x,list_a)</span><br><span class=\"line\">print(list(r))#[1, 4, 9, 16, 25, 36, 49, 64]</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">list_b = [1, 4, 9, 16, 25, 36, 49]</span><br><span class=\"line\"></span><br><span class=\"line\">s = map(lambda x,y:x * x + y,list_a,list_b)  #map中传入多个list</span><br><span class=\"line\">print(list(s))  #[2, 8, 18, 32, 50, 72, 98] 长度取决于列表少的那个</span><br></pre></td></tr></table></figure>\n<p><strong>reduce</strong> 连续计算，连续计算，连续调用lambda<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import reduce</span><br><span class=\"line\">list_a = [1,2,3,4,5,6,7,8]</span><br><span class=\"line\">r = reduce(lambda x,y:x + y,list_a,10) #初始值为10</span><br><span class=\"line\"> #10+1,得到11，11+2,得到13.....等一系列计算</span><br><span class=\"line\">print(r) #46</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始值为50，从0累加到99</span><br><span class=\"line\">from functools import reduce</span><br><span class=\"line\">a = range(0,100)</span><br><span class=\"line\">r = reduce(lambda x,y:x+y,a,50)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure>\n<p><strong>map/reduce编程模型 映射 归纳<br>并行计算<br>函数式编程</strong></p>\n<p><strong>filter  过滤</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list_a = [1,1,0,0,1,1,0,1,0]</span><br><span class=\"line\"># r = filter(lambda x: True if x==1 else False, list_a)</span><br><span class=\"line\">r = filter(lambda x:x,list_a) #因为0代表False</span><br><span class=\"line\">print(list(r))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"(18) python异常","date":"2018-11-14T14:07:26.000Z","_content":"###  异常\n\n####  异常的概念\n\n*   程序在运行时，如果 `Python 解释器` **遇到** 到一个错误，**会停止程序的执行，并且提示一些错误信息**，这就是 **异常**\n*   **程序停止执行并且提示错误信息** 这个动作，我们通常称之为：**抛出(raise)异常**\n\n> 程序开发时，很难将 **所有的特殊情况** 都处理的面面俱到，通过 **异常捕获** 可以针对突发事件做集中的处理，从而保证程序的 **稳定性和健壮性**\n> \n> [图片上传失败...(image-81f29f-1542201966094)]\n\n####  捕获异常：`try except else finally`\n\n**简单的捕获异常语法**\n\n*   在程序开发中，如果 **对某些代码的执行不能确定是否正确**，可以增加 `try(尝试)` 来 **捕获异常**\n\n```\ntry:\n    尝试执行的代码\nexcept:\n    出现错误的处理\n\n```\n\n*   `try` **尝试**，下方编写要尝试代码，不确定是否能够正常执行的代码\n*   `except` **如果不是**，下方编写尝试失败的代码\n\n**简单异常捕获1 —— 要求用户输入整数**\n\n```\ntry:\n    # 提示用户输入一个数字\n    num = int(input(\"请输入数字：\"))\nexcept:\n    print(\"请输入正确的数字\")\n\n```\n\n**错误类型捕获**\n\n*   在程序执行时，可能会遇到 **不同类型的异常**，并且需要 **针对不同类型的异常，做出不同的响应**，这个时候，就需要捕获错误类型了\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept (错误类型2, 错误类型3):\n    # 针对错误类型2 和 3，对应的代码处理\n    pass\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n*   当 `Python` 解释器 **抛出异常** 时，**最后一行错误信息的第一个单词，就是错误类型**\n\n**异常类型捕获2 —— 要求用户输入整数**\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\n```\n\n**捕获未知错误**\n\n*   在开发时，**要预判到所有可能出现的错误**，还是有一定难度的\n*   如果希望程序 **无论出现任何错误**，都不会因为 `Python` 解释器 **抛出异常而被终止**，可以再增加一个 `except`\n\n语法如下：\n\n```\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n```\n\n**异常捕获完整语法**\n\n*   在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept 错误类型2:\n    # 针对错误类型2，对应的代码处理\n    pass\nexcept (错误类型3, 错误类型4):\n    # 针对错误类型3 和 4，对应的代码处理\n    pass\nexcept Exception as result:\n    # 打印错误信息\n    print(result)\nelse:\n    # 没有异常才会执行的代码\n    pass\nfinally:\n    # 无论是否有异常，都会执行的代码\n    print(\"无论是否有异常，都会执行的代码\")\n\n```\n\n*   `else` 只有在没有异常时才会执行的代码\n\n*   `finally` 无论是否有异常，都会执行的代码\n\n*   之前一个演练的 **完整捕获异常** 的代码如下：\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\nelse:\n    print(\"正常执行\")\nfinally:\n    print(\"执行完成，但是不保证正确\")\n```\n\n#### 异常的传递\n\n*   **异常的传递** —— 当 **函数/方法** 执行 **出现异常**，会 **将异常传递** 给 函数/方法 的 **调用一方**\n*   如果 **传递到主程序**，仍然 **没有异常处理**，程序才会被终止\n\n> 提示：\n> \n> *   在开发中，可以在主函数中增加 **异常捕获**，而在主函数中调用的其他函数，只要出现异常，**都会传递到主函数**的异常捕获中\n> *   这样就不需要在代码中，增加大量的异常捕获，能够**保证代码的整洁**\n\n```\n'''\n需求:\n1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**\n2\\.  定义函数 `demo2()` 调用 `demo1()`\n3\\.  在主程序中调用 `demo2()`\n'''\ndef demo1():\n    return int(input(\"请输入一个整数：\"))\n\ndef demo2():\n    return demo1()\n\ntry:\n    print(demo2())\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n####  抛出异常： `raise`\n\n**应用场景**\n\n*   在开发中，除了 **代码执行出错** `Python` 解释器会 **抛出** 异常之外\n*   还可以根据 **应用程序** **特有的业务需求** **主动抛出异常**\n\n**示例**\n\n*   提示用户 **输入密码**，如果 **长度少于 8**，抛出 **异常**\n\n    [图片上传失败...(image-3d2a0b-1542201966092)]\n\n**抛出异常**\n\n*   `Python` 中提供了一个 `Exception` **异常类**\n*   在开发时，如果满足 **特定业务需求时**，希望 **抛出异常**，由**其他需要处理的函数捕获异常**，可以：\n    1.  **创建** 一个 `Exception` 的 **对象**\n    2.  使用 `raise` **关键字** 抛出 **异常对象**\n\n```\n'''\n**需求**\n\n*   定义 `input_password` 函数，提示用户输入密码\n*   如果用户输入长度 < 8，抛出异常\n*   如果用户输入长度 >=8，返回输入的密码\n'''\ndef input_password():\n\n    # 1\\. 提示用户输入密码\n    pwd = input(\"请输入密码：\")\n\n    # 2\\. 判断密码长度，如果长度 >= 8，返回用户输入的密码\n    if len(pwd) >= 8:\n        return pwd\n\n    # 3\\. 密码长度不够，需要抛出异常\n    # 1> 创建异常对象 - 使用异常的错误信息字符串作为参数\n    ex = Exception(\"密码长度不够\")\n\n    # 2> 抛出异常对象\n    raise ex\n\ntry:\n    user_pwd = input_password()\n    print(user_pwd)\nexcept Exception as result:\n    print(\"发现错误：%s\" % result)\n```\n参考文章：\nhttps://www.jianshu.com/p/ebc19de7a204","source":"_posts/python基础/python异常.md","raw":"---\ntitle: (18) python异常\ndate: 2018-11-14 22:07:26\ntags:\ncategories: python基础\n---\n###  异常\n\n####  异常的概念\n\n*   程序在运行时，如果 `Python 解释器` **遇到** 到一个错误，**会停止程序的执行，并且提示一些错误信息**，这就是 **异常**\n*   **程序停止执行并且提示错误信息** 这个动作，我们通常称之为：**抛出(raise)异常**\n\n> 程序开发时，很难将 **所有的特殊情况** 都处理的面面俱到，通过 **异常捕获** 可以针对突发事件做集中的处理，从而保证程序的 **稳定性和健壮性**\n> \n> [图片上传失败...(image-81f29f-1542201966094)]\n\n####  捕获异常：`try except else finally`\n\n**简单的捕获异常语法**\n\n*   在程序开发中，如果 **对某些代码的执行不能确定是否正确**，可以增加 `try(尝试)` 来 **捕获异常**\n\n```\ntry:\n    尝试执行的代码\nexcept:\n    出现错误的处理\n\n```\n\n*   `try` **尝试**，下方编写要尝试代码，不确定是否能够正常执行的代码\n*   `except` **如果不是**，下方编写尝试失败的代码\n\n**简单异常捕获1 —— 要求用户输入整数**\n\n```\ntry:\n    # 提示用户输入一个数字\n    num = int(input(\"请输入数字：\"))\nexcept:\n    print(\"请输入正确的数字\")\n\n```\n\n**错误类型捕获**\n\n*   在程序执行时，可能会遇到 **不同类型的异常**，并且需要 **针对不同类型的异常，做出不同的响应**，这个时候，就需要捕获错误类型了\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept (错误类型2, 错误类型3):\n    # 针对错误类型2 和 3，对应的代码处理\n    pass\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n*   当 `Python` 解释器 **抛出异常** 时，**最后一行错误信息的第一个单词，就是错误类型**\n\n**异常类型捕获2 —— 要求用户输入整数**\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\n```\n\n**捕获未知错误**\n\n*   在开发时，**要预判到所有可能出现的错误**，还是有一定难度的\n*   如果希望程序 **无论出现任何错误**，都不会因为 `Python` 解释器 **抛出异常而被终止**，可以再增加一个 `except`\n\n语法如下：\n\n```\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n```\n\n**异常捕获完整语法**\n\n*   在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：\n\n```\ntry:\n    # 尝试执行的代码\n    pass\nexcept 错误类型1:\n    # 针对错误类型1，对应的代码处理\n    pass\nexcept 错误类型2:\n    # 针对错误类型2，对应的代码处理\n    pass\nexcept (错误类型3, 错误类型4):\n    # 针对错误类型3 和 4，对应的代码处理\n    pass\nexcept Exception as result:\n    # 打印错误信息\n    print(result)\nelse:\n    # 没有异常才会执行的代码\n    pass\nfinally:\n    # 无论是否有异常，都会执行的代码\n    print(\"无论是否有异常，都会执行的代码\")\n\n```\n\n*   `else` 只有在没有异常时才会执行的代码\n\n*   `finally` 无论是否有异常，都会执行的代码\n\n*   之前一个演练的 **完整捕获异常** 的代码如下：\n\n```\ntry:\n    num = int(input(\"请输入整数：\"))\n    result = 8 / num\n    print(result)\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept ZeroDivisionError:\n    print(\"除 0 错误\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\nelse:\n    print(\"正常执行\")\nfinally:\n    print(\"执行完成，但是不保证正确\")\n```\n\n#### 异常的传递\n\n*   **异常的传递** —— 当 **函数/方法** 执行 **出现异常**，会 **将异常传递** 给 函数/方法 的 **调用一方**\n*   如果 **传递到主程序**，仍然 **没有异常处理**，程序才会被终止\n\n> 提示：\n> \n> *   在开发中，可以在主函数中增加 **异常捕获**，而在主函数中调用的其他函数，只要出现异常，**都会传递到主函数**的异常捕获中\n> *   这样就不需要在代码中，增加大量的异常捕获，能够**保证代码的整洁**\n\n```\n'''\n需求:\n1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**\n2\\.  定义函数 `demo2()` 调用 `demo1()`\n3\\.  在主程序中调用 `demo2()`\n'''\ndef demo1():\n    return int(input(\"请输入一个整数：\"))\n\ndef demo2():\n    return demo1()\n\ntry:\n    print(demo2())\nexcept ValueError:\n    print(\"请输入正确的整数\")\nexcept Exception as result:\n    print(\"未知错误 %s\" % result)\n\n```\n\n####  抛出异常： `raise`\n\n**应用场景**\n\n*   在开发中，除了 **代码执行出错** `Python` 解释器会 **抛出** 异常之外\n*   还可以根据 **应用程序** **特有的业务需求** **主动抛出异常**\n\n**示例**\n\n*   提示用户 **输入密码**，如果 **长度少于 8**，抛出 **异常**\n\n    [图片上传失败...(image-3d2a0b-1542201966092)]\n\n**抛出异常**\n\n*   `Python` 中提供了一个 `Exception` **异常类**\n*   在开发时，如果满足 **特定业务需求时**，希望 **抛出异常**，由**其他需要处理的函数捕获异常**，可以：\n    1.  **创建** 一个 `Exception` 的 **对象**\n    2.  使用 `raise` **关键字** 抛出 **异常对象**\n\n```\n'''\n**需求**\n\n*   定义 `input_password` 函数，提示用户输入密码\n*   如果用户输入长度 < 8，抛出异常\n*   如果用户输入长度 >=8，返回输入的密码\n'''\ndef input_password():\n\n    # 1\\. 提示用户输入密码\n    pwd = input(\"请输入密码：\")\n\n    # 2\\. 判断密码长度，如果长度 >= 8，返回用户输入的密码\n    if len(pwd) >= 8:\n        return pwd\n\n    # 3\\. 密码长度不够，需要抛出异常\n    # 1> 创建异常对象 - 使用异常的错误信息字符串作为参数\n    ex = Exception(\"密码长度不够\")\n\n    # 2> 抛出异常对象\n    raise ex\n\ntry:\n    user_pwd = input_password()\n    print(user_pwd)\nexcept Exception as result:\n    print(\"发现错误：%s\" % result)\n```\n参考文章：\nhttps://www.jianshu.com/p/ebc19de7a204","slug":"python基础/python异常","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2o005dtssapjy3cimb","content":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><h4 id=\"异常的概念\"><a href=\"#异常的概念\" class=\"headerlink\" title=\"异常的概念\"></a>异常的概念</h4><ul>\n<li>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>\n<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>\n</ul>\n<blockquote>\n<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>\n<p>[图片上传失败…(image-81f29f-1542201966094)]</p>\n</blockquote>\n<h4 id=\"捕获异常：try-except-else-finally\"><a href=\"#捕获异常：try-except-else-finally\" class=\"headerlink\" title=\"捕获异常：try except else finally\"></a>捕获异常：<code>try except else finally</code></h4><p><strong>简单的捕获异常语法</strong></p>\n<ul>\n<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    尝试执行的代码</span><br><span class=\"line\">except:</span><br><span class=\"line\">    出现错误的处理</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>\n<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>\n</ul>\n<p><strong>简单异常捕获1 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 提示用户输入一个数字</span><br><span class=\"line\">    num = int(input(&quot;请输入数字：&quot;))</span><br><span class=\"line\">except:</span><br><span class=\"line\">    print(&quot;请输入正确的数字&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>错误类型捕获</strong></p>\n<ul>\n<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型2, 错误类型3):</span><br><span class=\"line\">    # 针对错误类型2 和 3，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>\n</ul>\n<p><strong>异常类型捕获2 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>捕获未知错误</strong></p>\n<ul>\n<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>\n<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p><strong>异常捕获完整语法</strong></p>\n<ul>\n<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型2:</span><br><span class=\"line\">    # 针对错误类型2，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型3, 错误类型4):</span><br><span class=\"line\">    # 针对错误类型3 和 4，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    # 打印错误信息</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # 没有异常才会执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 无论是否有异常，都会执行的代码</span><br><span class=\"line\">    print(&quot;无论是否有异常，都会执行的代码&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>else</code> 只有在没有异常时才会执行的代码</p>\n</li>\n<li><p><code>finally</code> 无论是否有异常，都会执行的代码</p>\n</li>\n<li><p>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;正常执行&quot;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;执行完成，但是不保证正确&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常的传递\"><a href=\"#异常的传递\" class=\"headerlink\" title=\"异常的传递\"></a>异常的传递</h4><ul>\n<li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></li>\n<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong>，而在主函数中调用的其他函数，只要出现异常，<strong>都会传递到主函数</strong>的异常捕获中</li>\n<li>这样就不需要在代码中，增加大量的异常捕获，能够<strong>保证代码的整洁</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">需求:</span><br><span class=\"line\">1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**</span><br><span class=\"line\">2\\.  定义函数 `demo2()` 调用 `demo1()`</span><br><span class=\"line\">3\\.  在主程序中调用 `demo2()`</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def demo1():</span><br><span class=\"line\">    return int(input(&quot;请输入一个整数：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">def demo2():</span><br><span class=\"line\">    return demo1()</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(demo2())</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常：-raise\"><a href=\"#抛出异常：-raise\" class=\"headerlink\" title=\"抛出异常： raise\"></a>抛出异常： <code>raise</code></h4><p><strong>应用场景</strong></p>\n<ul>\n<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>\n<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>\n</ul>\n<p><strong>示例</strong></p>\n<ul>\n<li><p>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></p>\n<p>[图片上传失败…(image-3d2a0b-1542201966092)]</p>\n</li>\n</ul>\n<p><strong>抛出异常</strong></p>\n<ul>\n<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>\n<li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，由<strong>其他需要处理的函数捕获异常</strong>，可以：<ol>\n<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>\n<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">**需求**</span><br><span class=\"line\"></span><br><span class=\"line\">*   定义 `input_password` 函数，提示用户输入密码</span><br><span class=\"line\">*   如果用户输入长度 &lt; 8，抛出异常</span><br><span class=\"line\">*   如果用户输入长度 &gt;=8，返回输入的密码</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def input_password():</span><br><span class=\"line\"></span><br><span class=\"line\">    # 1\\. 提示用户输入密码</span><br><span class=\"line\">    pwd = input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2\\. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span><br><span class=\"line\">    if len(pwd) &gt;= 8:</span><br><span class=\"line\">        return pwd</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3\\. 密码长度不够，需要抛出异常</span><br><span class=\"line\">    # 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span><br><span class=\"line\">    ex = Exception(&quot;密码长度不够&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2&gt; 抛出异常对象</span><br><span class=\"line\">    raise ex</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    user_pwd = input_password()</span><br><span class=\"line\">    print(user_pwd)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;发现错误：%s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://www.jianshu.com/p/ebc19de7a204\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ebc19de7a204</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><h4 id=\"异常的概念\"><a href=\"#异常的概念\" class=\"headerlink\" title=\"异常的概念\"></a>异常的概念</h4><ul>\n<li>程序在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>\n<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>\n</ul>\n<blockquote>\n<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>\n<p>[图片上传失败…(image-81f29f-1542201966094)]</p>\n</blockquote>\n<h4 id=\"捕获异常：try-except-else-finally\"><a href=\"#捕获异常：try-except-else-finally\" class=\"headerlink\" title=\"捕获异常：try except else finally\"></a>捕获异常：<code>try except else finally</code></h4><p><strong>简单的捕获异常语法</strong></p>\n<ul>\n<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    尝试执行的代码</span><br><span class=\"line\">except:</span><br><span class=\"line\">    出现错误的处理</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>\n<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>\n</ul>\n<p><strong>简单异常捕获1 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 提示用户输入一个数字</span><br><span class=\"line\">    num = int(input(&quot;请输入数字：&quot;))</span><br><span class=\"line\">except:</span><br><span class=\"line\">    print(&quot;请输入正确的数字&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>错误类型捕获</strong></p>\n<ul>\n<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型2, 错误类型3):</span><br><span class=\"line\">    # 针对错误类型2 和 3，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>\n</ul>\n<p><strong>异常类型捕获2 —— 要求用户输入整数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>捕获未知错误</strong></p>\n<ul>\n<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>\n<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p><strong>异常捕获完整语法</strong></p>\n<ul>\n<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    # 尝试执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型1:</span><br><span class=\"line\">    # 针对错误类型1，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except 错误类型2:</span><br><span class=\"line\">    # 针对错误类型2，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except (错误类型3, 错误类型4):</span><br><span class=\"line\">    # 针对错误类型3 和 4，对应的代码处理</span><br><span class=\"line\">    pass</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    # 打印错误信息</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    # 没有异常才会执行的代码</span><br><span class=\"line\">    pass</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    # 无论是否有异常，都会执行的代码</span><br><span class=\"line\">    print(&quot;无论是否有异常，都会执行的代码&quot;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>else</code> 只有在没有异常时才会执行的代码</p>\n</li>\n<li><p><code>finally</code> 无论是否有异常，都会执行的代码</p>\n</li>\n<li><p>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    num = int(input(&quot;请输入整数：&quot;))</span><br><span class=\"line\">    result = 8 / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except ZeroDivisionError:</span><br><span class=\"line\">    print(&quot;除 0 错误&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;正常执行&quot;)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;执行完成，但是不保证正确&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常的传递\"><a href=\"#异常的传递\" class=\"headerlink\" title=\"异常的传递\"></a>异常的传递</h4><ul>\n<li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></li>\n<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong>，而在主函数中调用的其他函数，只要出现异常，<strong>都会传递到主函数</strong>的异常捕获中</li>\n<li>这样就不需要在代码中，增加大量的异常捕获，能够<strong>保证代码的整洁</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">需求:</span><br><span class=\"line\">1\\.  定义函数 `demo1()` **提示用户输入一个整数并且返回**</span><br><span class=\"line\">2\\.  定义函数 `demo2()` 调用 `demo1()`</span><br><span class=\"line\">3\\.  在主程序中调用 `demo2()`</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def demo1():</span><br><span class=\"line\">    return int(input(&quot;请输入一个整数：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">def demo2():</span><br><span class=\"line\">    return demo1()</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    print(demo2())</span><br><span class=\"line\">except ValueError:</span><br><span class=\"line\">    print(&quot;请输入正确的整数&quot;)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;未知错误 %s&quot; % result)</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常：-raise\"><a href=\"#抛出异常：-raise\" class=\"headerlink\" title=\"抛出异常： raise\"></a>抛出异常： <code>raise</code></h4><p><strong>应用场景</strong></p>\n<ul>\n<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>\n<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>\n</ul>\n<p><strong>示例</strong></p>\n<ul>\n<li><p>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></p>\n<p>[图片上传失败…(image-3d2a0b-1542201966092)]</p>\n</li>\n</ul>\n<p><strong>抛出异常</strong></p>\n<ul>\n<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>\n<li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，由<strong>其他需要处理的函数捕获异常</strong>，可以：<ol>\n<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>\n<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">**需求**</span><br><span class=\"line\"></span><br><span class=\"line\">*   定义 `input_password` 函数，提示用户输入密码</span><br><span class=\"line\">*   如果用户输入长度 &lt; 8，抛出异常</span><br><span class=\"line\">*   如果用户输入长度 &gt;=8，返回输入的密码</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">def input_password():</span><br><span class=\"line\"></span><br><span class=\"line\">    # 1\\. 提示用户输入密码</span><br><span class=\"line\">    pwd = input(&quot;请输入密码：&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2\\. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span><br><span class=\"line\">    if len(pwd) &gt;= 8:</span><br><span class=\"line\">        return pwd</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3\\. 密码长度不够，需要抛出异常</span><br><span class=\"line\">    # 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span><br><span class=\"line\">    ex = Exception(&quot;密码长度不够&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 2&gt; 抛出异常对象</span><br><span class=\"line\">    raise ex</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    user_pwd = input_password()</span><br><span class=\"line\">    print(user_pwd)</span><br><span class=\"line\">except Exception as result:</span><br><span class=\"line\">    print(&quot;发现错误：%s&quot; % result)</span><br></pre></td></tr></table></figure>\n<p>参考文章：<br><a href=\"https://www.jianshu.com/p/ebc19de7a204\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ebc19de7a204</a></p>\n"},{"title":"(2) python基本数据类型总结","date":"2018-11-14T13:58:19.000Z","_content":"\n![python基本数据类型总结](https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**整数int与浮点数float**\n整数运算永远是精确的，浮点数的运算可能会有四舍五入。\n2/2结果为1.0\n// 表示整除   2//2结果为1   \n3//2也是1  并不是四舍五入，而是只保留整数部分\n1.23x10^9和 12.3x10^8相等\n1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5\n**进制**\npython中默认为10进制。\n2进制用0b表示，例如0b10即为2。\n8进制用0o表示，例如0o10即为8。\n16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)\n```\nbin()  #转化为2进制\noct()  #转化为8进制\nint()  #转化为10进制\nhex()  #转化为16进制\n```\n**布尔值bool**\n```\nbool()\nbool(0)\nbool('')\nbool([])\nbool({})\nbool(None)\n```\n只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True\n\n**序列**\n字符串 str  可用单引号，双引号或者三引号表示例如'str' 或\"str \"或者'''str'''\n\n其中三引号常用方式如下\n```\n'''\nline1\nline2\n  .\n  .\n'''\n```\n在字符串前面加一个R/r 表示原始字符串\n```\nprint(r'\\t\\r')   #  \\t\\r\n```\n一些转义字符（特殊的字符）\n```\n\\n          #换行       无法“看见”的字符\n\\'           #单引号   与语言本身有冲突的字符\n\\t          #横向制表符\n\\r          #回车\n\\n         #换行\n\\\\          #表示\\\n```\n元组 tuple  ( )与列表list  [ ]\n\n元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)\n```\na = 'hello'\na=a+'world'\nprint(a)  #'helloworld'    a变成了一个新的字符串，而不是改变了字符串\n\n#列表可变\nb=[1,2,3]\nb.append(4)\nprint(b)  #[1,2,3,4]\n\n#改变的是列表不是元组\nc =  (1,2,3,[4,5,['a','b','c']])\nc[3][2][1] = 'd'\nc[3][0]='6'\nc[3][1]=7\n#c[2]=8   #会报错，因为元组不能被改变'tuple' object does not support item assignment\nprint(c)  #(1, 2, 3, ['6', 7, ['a', 'd', 'c']])  改变的是列表  而不是 元组\n ```\n在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。\n```\n#元组\n(1,2,3) \n((1,2,3),(4,'hello',True))\n(1,2,[3,4],{5,6},{(1,2,3):10,'hello':11,100:'hello'})\n()   #空元组\n(1,)  #一个元素的元组\n#列表\n[1,2,3]\n[[1,2,3],[4,'hello',True],(1,2,3),{7,8}{(1,2,3):10,'hello':11,100:'hello'}]\n```\n\n\n序列可以进行加法，与整数相乘，切片操作\n```\n#与整数相乘\n'python'*3   # 'pythonpythonpython'\n((1,2,3),(4,'hello',True))*2  # ((1, 2, 3), (4, 'hello', True), (1, 2, 3), (4, 'hello', True))\n[[1,2,3],[4,'hello',True],(1,2,3)]*2 #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), [1, 2, 3], [4, 'hello', True], (1, 2, 3)]\n#同类型相加\n'hello'+'world'   # 'helloword'\n((1,2,3),(4,'hello',True))+(7,8,9)  #((1, 2, 3), (4, 'hello', True), 7, 8, 9)\n[[1,2,3],[4,'hello',True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), 4, 5, 6]\n#切片\n'hello world'[0]       # 'h'   从0开始\n'hello world'[-1]      # 'd'   从末尾往前数1\n'hello world'[1:4]    # 'ell'  从1开始，4前一位结束\n'hello world'[0:-2]    # 'hello wor'  从开头到末尾减去2位\n'hello world'[:-5]     # 'hello '  从开头到末尾减去5个字符  \n'hello world'[1:-2]   #'ello wor'    从1到末尾减去2位\n'hello world'[6:100]    # 'world'  超过，从第6位取到末尾\n'hello world'[6:]     # 'world'  从第6位取得末尾\n'hello world'[-1:2]   #'’‘  空字符串，不能这样做\n```\n**集合set {}和字典dict {}**\n集合和字典的特点是   **无序，不重复**\nset()表示空集合\n{}  表示空字典\n```\n-   #可以用来求两个集合的差集\n+  #可以用来求两个集合的交集\n|   #可以用来求两个集合的合集\n```\n字典是通过key访问value{key1:value1,key2:value2}\nkey**不能重复,类型为int,str，tuple**\nvalue可以为任意数据\n","source":"_posts/python基础/python基本数据类型总结.md","raw":"---\ntitle: (2) python基本数据类型总结\ndate: 2018-11-14 21:58:19\ntags:\ncategories: python基础\n---\n\n![python基本数据类型总结](https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**整数int与浮点数float**\n整数运算永远是精确的，浮点数的运算可能会有四舍五入。\n2/2结果为1.0\n// 表示整除   2//2结果为1   \n3//2也是1  并不是四舍五入，而是只保留整数部分\n1.23x10^9和 12.3x10^8相等\n1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5\n**进制**\npython中默认为10进制。\n2进制用0b表示，例如0b10即为2。\n8进制用0o表示，例如0o10即为8。\n16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)\n```\nbin()  #转化为2进制\noct()  #转化为8进制\nint()  #转化为10进制\nhex()  #转化为16进制\n```\n**布尔值bool**\n```\nbool()\nbool(0)\nbool('')\nbool([])\nbool({})\nbool(None)\n```\n只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True\n\n**序列**\n字符串 str  可用单引号，双引号或者三引号表示例如'str' 或\"str \"或者'''str'''\n\n其中三引号常用方式如下\n```\n'''\nline1\nline2\n  .\n  .\n'''\n```\n在字符串前面加一个R/r 表示原始字符串\n```\nprint(r'\\t\\r')   #  \\t\\r\n```\n一些转义字符（特殊的字符）\n```\n\\n          #换行       无法“看见”的字符\n\\'           #单引号   与语言本身有冲突的字符\n\\t          #横向制表符\n\\r          #回车\n\\n         #换行\n\\\\          #表示\\\n```\n元组 tuple  ( )与列表list  [ ]\n\n元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)\n```\na = 'hello'\na=a+'world'\nprint(a)  #'helloworld'    a变成了一个新的字符串，而不是改变了字符串\n\n#列表可变\nb=[1,2,3]\nb.append(4)\nprint(b)  #[1,2,3,4]\n\n#改变的是列表不是元组\nc =  (1,2,3,[4,5,['a','b','c']])\nc[3][2][1] = 'd'\nc[3][0]='6'\nc[3][1]=7\n#c[2]=8   #会报错，因为元组不能被改变'tuple' object does not support item assignment\nprint(c)  #(1, 2, 3, ['6', 7, ['a', 'd', 'c']])  改变的是列表  而不是 元组\n ```\n在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。\n```\n#元组\n(1,2,3) \n((1,2,3),(4,'hello',True))\n(1,2,[3,4],{5,6},{(1,2,3):10,'hello':11,100:'hello'})\n()   #空元组\n(1,)  #一个元素的元组\n#列表\n[1,2,3]\n[[1,2,3],[4,'hello',True],(1,2,3),{7,8}{(1,2,3):10,'hello':11,100:'hello'}]\n```\n\n\n序列可以进行加法，与整数相乘，切片操作\n```\n#与整数相乘\n'python'*3   # 'pythonpythonpython'\n((1,2,3),(4,'hello',True))*2  # ((1, 2, 3), (4, 'hello', True), (1, 2, 3), (4, 'hello', True))\n[[1,2,3],[4,'hello',True],(1,2,3)]*2 #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), [1, 2, 3], [4, 'hello', True], (1, 2, 3)]\n#同类型相加\n'hello'+'world'   # 'helloword'\n((1,2,3),(4,'hello',True))+(7,8,9)  #((1, 2, 3), (4, 'hello', True), 7, 8, 9)\n[[1,2,3],[4,'hello',True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, 'hello', True], (1, 2, 3), 4, 5, 6]\n#切片\n'hello world'[0]       # 'h'   从0开始\n'hello world'[-1]      # 'd'   从末尾往前数1\n'hello world'[1:4]    # 'ell'  从1开始，4前一位结束\n'hello world'[0:-2]    # 'hello wor'  从开头到末尾减去2位\n'hello world'[:-5]     # 'hello '  从开头到末尾减去5个字符  \n'hello world'[1:-2]   #'ello wor'    从1到末尾减去2位\n'hello world'[6:100]    # 'world'  超过，从第6位取到末尾\n'hello world'[6:]     # 'world'  从第6位取得末尾\n'hello world'[-1:2]   #'’‘  空字符串，不能这样做\n```\n**集合set {}和字典dict {}**\n集合和字典的特点是   **无序，不重复**\nset()表示空集合\n{}  表示空字典\n```\n-   #可以用来求两个集合的差集\n+  #可以用来求两个集合的交集\n|   #可以用来求两个集合的合集\n```\n字典是通过key访问value{key1:value1,key2:value2}\nkey**不能重复,类型为int,str，tuple**\nvalue可以为任意数据\n","slug":"python基础/python基本数据类型总结","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2p005ftssavoxxbnb2","content":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python基本数据类型总结\"><br><strong>整数int与浮点数float</strong><br>整数运算永远是精确的，浮点数的运算可能会有四舍五入。<br>2/2结果为1.0<br>// 表示整除   2//2结果为1<br>3//2也是1  并不是四舍五入，而是只保留整数部分<br>1.23x10^9和 12.3x10^8相等<br>1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5<br><strong>进制</strong><br>python中默认为10进制。<br>2进制用0b表示，例如0b10即为2。<br>8进制用0o表示，例如0o10即为8。<br>16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin()  #转化为2进制</span><br><span class=\"line\">oct()  #转化为8进制</span><br><span class=\"line\">int()  #转化为10进制</span><br><span class=\"line\">hex()  #转化为16进制</span><br></pre></td></tr></table></figure></p>\n<p><strong>布尔值bool</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool()</span><br><span class=\"line\">bool(0)</span><br><span class=\"line\">bool(&apos;&apos;)</span><br><span class=\"line\">bool([])</span><br><span class=\"line\">bool(&#123;&#125;)</span><br><span class=\"line\">bool(None)</span><br></pre></td></tr></table></figure></p>\n<p>只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True</p>\n<p><strong>序列</strong><br>字符串 str  可用单引号，双引号或者三引号表示例如’str’ 或”str “或者’’’str’’’</p>\n<p>其中三引号常用方式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在字符串前面加一个R/r 表示原始字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&apos;\\t\\r&apos;)   #  \\t\\r</span><br></pre></td></tr></table></figure></p>\n<p>一些转义字符（特殊的字符）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\n          #换行       无法“看见”的字符</span><br><span class=\"line\">\\&apos;           #单引号   与语言本身有冲突的字符</span><br><span class=\"line\">\\t          #横向制表符</span><br><span class=\"line\">\\r          #回车</span><br><span class=\"line\">\\n         #换行</span><br><span class=\"line\">\\\\          #表示\\</span><br></pre></td></tr></table></figure></p>\n<p>元组 tuple  ( )与列表list  [ ]</p>\n<p>元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &apos;hello&apos;</span><br><span class=\"line\">a=a+&apos;world&apos;</span><br><span class=\"line\">print(a)  #&apos;helloworld&apos;    a变成了一个新的字符串，而不是改变了字符串</span><br><span class=\"line\"></span><br><span class=\"line\">#列表可变</span><br><span class=\"line\">b=[1,2,3]</span><br><span class=\"line\">b.append(4)</span><br><span class=\"line\">print(b)  #[1,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">#改变的是列表不是元组</span><br><span class=\"line\">c =  (1,2,3,[4,5,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]])</span><br><span class=\"line\">c[3][2][1] = &apos;d&apos;</span><br><span class=\"line\">c[3][0]=&apos;6&apos;</span><br><span class=\"line\">c[3][1]=7</span><br><span class=\"line\">#c[2]=8   #会报错，因为元组不能被改变&apos;tuple&apos; object does not support item assignment</span><br><span class=\"line\">print(c)  #(1, 2, 3, [&apos;6&apos;, 7, [&apos;a&apos;, &apos;d&apos;, &apos;c&apos;]])  改变的是列表  而不是 元组</span><br></pre></td></tr></table></figure></p>\n<p>在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#元组</span><br><span class=\"line\">(1,2,3) </span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))</span><br><span class=\"line\">(1,2,[3,4],&#123;5,6&#125;,&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;)</span><br><span class=\"line\">()   #空元组</span><br><span class=\"line\">(1,)  #一个元素的元组</span><br><span class=\"line\">#列表</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3),&#123;7,8&#125;&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>序列可以进行加法，与整数相乘，切片操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#与整数相乘</span><br><span class=\"line\">&apos;python&apos;*3   # &apos;pythonpythonpython&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))*2  # ((1, 2, 3), (4, &apos;hello&apos;, True), (1, 2, 3), (4, &apos;hello&apos;, True))</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]*2 #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), [1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3)]</span><br><span class=\"line\">#同类型相加</span><br><span class=\"line\">&apos;hello&apos;+&apos;world&apos;   # &apos;helloword&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))+(7,8,9)  #((1, 2, 3), (4, &apos;hello&apos;, True), 7, 8, 9)</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), 4, 5, 6]</span><br><span class=\"line\">#切片</span><br><span class=\"line\">&apos;hello world&apos;[0]       # &apos;h&apos;   从0开始</span><br><span class=\"line\">&apos;hello world&apos;[-1]      # &apos;d&apos;   从末尾往前数1</span><br><span class=\"line\">&apos;hello world&apos;[1:4]    # &apos;ell&apos;  从1开始，4前一位结束</span><br><span class=\"line\">&apos;hello world&apos;[0:-2]    # &apos;hello wor&apos;  从开头到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[:-5]     # &apos;hello &apos;  从开头到末尾减去5个字符  </span><br><span class=\"line\">&apos;hello world&apos;[1:-2]   #&apos;ello wor&apos;    从1到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[6:100]    # &apos;world&apos;  超过，从第6位取到末尾</span><br><span class=\"line\">&apos;hello world&apos;[6:]     # &apos;world&apos;  从第6位取得末尾</span><br><span class=\"line\">&apos;hello world&apos;[-1:2]   #&apos;’‘  空字符串，不能这样做</span><br></pre></td></tr></table></figure></p>\n<p><strong>集合set {}和字典dict {}</strong><br>集合和字典的特点是   <strong>无序，不重复</strong><br>set()表示空集合<br>{}  表示空字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   #可以用来求两个集合的差集</span><br><span class=\"line\">+  #可以用来求两个集合的交集</span><br><span class=\"line\">|   #可以用来求两个集合的合集</span><br></pre></td></tr></table></figure></p>\n<p>字典是通过key访问value{key1:value1,key2:value2}<br>key<strong>不能重复,类型为int,str，tuple</strong><br>value可以为任意数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d367ffa3f9bbc505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"python基本数据类型总结\"><br><strong>整数int与浮点数float</strong><br>整数运算永远是精确的，浮点数的运算可能会有四舍五入。<br>2/2结果为1.0<br>// 表示整除   2//2结果为1<br>3//2也是1  并不是四舍五入，而是只保留整数部分<br>1.23x10^9和 12.3x10^8相等<br>1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5<br><strong>进制</strong><br>python中默认为10进制。<br>2进制用0b表示，例如0b10即为2。<br>8进制用0o表示，例如0o10即为8。<br>16进制用0x表示，例如0x10即为16。（8,9,a,b,c,d,e,f,0x10)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin()  #转化为2进制</span><br><span class=\"line\">oct()  #转化为8进制</span><br><span class=\"line\">int()  #转化为10进制</span><br><span class=\"line\">hex()  #转化为16进制</span><br></pre></td></tr></table></figure></p>\n<p><strong>布尔值bool</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool()</span><br><span class=\"line\">bool(0)</span><br><span class=\"line\">bool(&apos;&apos;)</span><br><span class=\"line\">bool([])</span><br><span class=\"line\">bool(&#123;&#125;)</span><br><span class=\"line\">bool(None)</span><br></pre></td></tr></table></figure></p>\n<p>只有bool(0)和bool()括号中为空才表示Fasle。bool(’0‘)等表示True</p>\n<p><strong>序列</strong><br>字符串 str  可用单引号，双引号或者三引号表示例如’str’ 或”str “或者’’’str’’’</p>\n<p>其中三引号常用方式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">line1</span><br><span class=\"line\">line2</span><br><span class=\"line\">  .</span><br><span class=\"line\">  .</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>在字符串前面加一个R/r 表示原始字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(r&apos;\\t\\r&apos;)   #  \\t\\r</span><br></pre></td></tr></table></figure></p>\n<p>一些转义字符（特殊的字符）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\n          #换行       无法“看见”的字符</span><br><span class=\"line\">\\&apos;           #单引号   与语言本身有冲突的字符</span><br><span class=\"line\">\\t          #横向制表符</span><br><span class=\"line\">\\r          #回车</span><br><span class=\"line\">\\n         #换行</span><br><span class=\"line\">\\\\          #表示\\</span><br></pre></td></tr></table></figure></p>\n<p>元组 tuple  ( )与列表list  [ ]</p>\n<p>元组与列表在python中的唯一区别就是：元组是不可变的，列表是可变的。(元组和字符串是不可变的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &apos;hello&apos;</span><br><span class=\"line\">a=a+&apos;world&apos;</span><br><span class=\"line\">print(a)  #&apos;helloworld&apos;    a变成了一个新的字符串，而不是改变了字符串</span><br><span class=\"line\"></span><br><span class=\"line\">#列表可变</span><br><span class=\"line\">b=[1,2,3]</span><br><span class=\"line\">b.append(4)</span><br><span class=\"line\">print(b)  #[1,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">#改变的是列表不是元组</span><br><span class=\"line\">c =  (1,2,3,[4,5,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]])</span><br><span class=\"line\">c[3][2][1] = &apos;d&apos;</span><br><span class=\"line\">c[3][0]=&apos;6&apos;</span><br><span class=\"line\">c[3][1]=7</span><br><span class=\"line\">#c[2]=8   #会报错，因为元组不能被改变&apos;tuple&apos; object does not support item assignment</span><br><span class=\"line\">print(c)  #(1, 2, 3, [&apos;6&apos;, 7, [&apos;a&apos;, &apos;d&apos;, &apos;c&apos;]])  改变的是列表  而不是 元组</span><br></pre></td></tr></table></figure></p>\n<p>在你有一些不确定长度的相同类型队列的时候使用列表；在你提前知道元素数量的情况下使用元组，因为元素的位置很重要。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#元组</span><br><span class=\"line\">(1,2,3) </span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))</span><br><span class=\"line\">(1,2,[3,4],&#123;5,6&#125;,&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;)</span><br><span class=\"line\">()   #空元组</span><br><span class=\"line\">(1,)  #一个元素的元组</span><br><span class=\"line\">#列表</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3),&#123;7,8&#125;&#123;(1,2,3):10,&apos;hello&apos;:11,100:&apos;hello&apos;&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>序列可以进行加法，与整数相乘，切片操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#与整数相乘</span><br><span class=\"line\">&apos;python&apos;*3   # &apos;pythonpythonpython&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))*2  # ((1, 2, 3), (4, &apos;hello&apos;, True), (1, 2, 3), (4, &apos;hello&apos;, True))</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]*2 #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), [1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3)]</span><br><span class=\"line\">#同类型相加</span><br><span class=\"line\">&apos;hello&apos;+&apos;world&apos;   # &apos;helloword&apos;</span><br><span class=\"line\">((1,2,3),(4,&apos;hello&apos;,True))+(7,8,9)  #((1, 2, 3), (4, &apos;hello&apos;, True), 7, 8, 9)</span><br><span class=\"line\">[[1,2,3],[4,&apos;hello&apos;,True],(1,2,3)]+[4,5,6] #[[1, 2, 3], [4, &apos;hello&apos;, True], (1, 2, 3), 4, 5, 6]</span><br><span class=\"line\">#切片</span><br><span class=\"line\">&apos;hello world&apos;[0]       # &apos;h&apos;   从0开始</span><br><span class=\"line\">&apos;hello world&apos;[-1]      # &apos;d&apos;   从末尾往前数1</span><br><span class=\"line\">&apos;hello world&apos;[1:4]    # &apos;ell&apos;  从1开始，4前一位结束</span><br><span class=\"line\">&apos;hello world&apos;[0:-2]    # &apos;hello wor&apos;  从开头到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[:-5]     # &apos;hello &apos;  从开头到末尾减去5个字符  </span><br><span class=\"line\">&apos;hello world&apos;[1:-2]   #&apos;ello wor&apos;    从1到末尾减去2位</span><br><span class=\"line\">&apos;hello world&apos;[6:100]    # &apos;world&apos;  超过，从第6位取到末尾</span><br><span class=\"line\">&apos;hello world&apos;[6:]     # &apos;world&apos;  从第6位取得末尾</span><br><span class=\"line\">&apos;hello world&apos;[-1:2]   #&apos;’‘  空字符串，不能这样做</span><br></pre></td></tr></table></figure></p>\n<p><strong>集合set {}和字典dict {}</strong><br>集合和字典的特点是   <strong>无序，不重复</strong><br>set()表示空集合<br>{}  表示空字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-   #可以用来求两个集合的差集</span><br><span class=\"line\">+  #可以用来求两个集合的交集</span><br><span class=\"line\">|   #可以用来求两个集合的合集</span><br></pre></td></tr></table></figure></p>\n<p>字典是通过key访问value{key1:value1,key2:value2}<br>key<strong>不能重复,类型为int,str，tuple</strong><br>value可以为任意数据</p>\n"},{"title":"(17) python文件操作","date":"2018-11-14T14:06:34.000Z","_content":"\n## 文件\n\n### 文件\n\n####文件的概念\n\n*   计算机的 **文件**，就是存储在某种 **长期储存设备** 上的一段 **数据**\n*   长期存储设备包括：硬盘、U 盘、移动硬盘、光盘...\n\n**文件的作用**：将数据长期保存下来，在需要的时候使用\n**文件的存储方式**：在计算机中，文件是以 **二进制** 的方式保存在磁盘上的\n**文本文件**：可以使用 **文本编辑软件** 查看，本质上还是二进制文件\n**二进制文件**：保存的内容 不是给人直接阅读的，而是 **提供给其他软件使用的**，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 **文本编辑软件** 查看\n\n#### 文件的基本操作\n\n**操作文件的套路**：\n在 **计算机** 中要操作文件的套路非常固定，一共包含**三个步骤**：\n\n1.  打开文件\n2.  读、写文件\n    *   **读** 将文件内容读入内存\n    *   **写** 将内存内容写入文件\n3.  关闭文件\n\n**操作文件的函数/方法**\n在 `Python` 中要操作文件\n\n| 序号 | 函数/方法 | 说明 |\n| --- | --- | --- |\n| 01 | open | 打开文件，并且返回文件操作对象 |\n| 02 | read | 将文件内容读取到内存 |\n| 03 | write | 将指定内容写入文件 |\n| 04 | close | 关闭文件 |\n\n`open` 函数负责打开文件，并且返回文件对象\n`read`/`write`/`close` 三个方法都需要通过 **文件对象** 来调用\n\n**读取文件示例**\n\n`open` 函数的第一个参数是要打开的文件名（文件名区分大小写）\n如果文件 **存在**，返回 **文件操作对象**\n如果文件 **不存在**，会 **抛出异常**\n\n`read` 方法可以一次性 **读入** 并 **返回** 文件的 **所有内容**\n\n`close` 方法负责 **关闭文件**\n如果 **忘记关闭文件**，**会造成系统资源消耗，而且会影响到后续对文件的访问**\n\n**注意**：`read` 方法执行后，会把 **文件指针** 移动到 **文件的末尾**\n\n```\n# 1\\. 打开 - 文件名需要注意大小写\nfile = open(\"README\")\n\n# 2\\. 读取\ntext = file.read()\nprint(text)\n\n# 3\\. 关闭\nfile.close()\n\n```\n\n**提示**\n\n*   在开发中，通常会先编写 **打开** 和 **关闭** 的代码，再编写中间针对文件的 **读/写** 操作！\n\n##### <补> 文件指针\n\n*   **文件指针** 标记 **从哪个位置开始读取数据**\n*   **第一次打开** 文件时，通常 **文件指针会指向文件的开始位置**\n*   当执行了 `read` 方法后，**文件指针** 会移动到 **读取内容的末尾**\n    *   默认情况下会移动到 **文件末尾**\n\n**思考**：如果执行了一次 `read` 方法，读取了所有内容，那么再次调用 `read` 方法，还能够获得到内容吗？\n**答案**：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。\n\n##### <补> 打开文件的方式\n\n*   `open` 函数默认以 **只读方式** 打开文件，并且返回文件对象\n\n```\nf = open(\"文件名\", \"访问方式\")\n```\n\n| 访问方式 | 说明 |\n| --- | --- |\n| r | 以**只读**方式打开文件。文件的指针将会放在文件的开头，这是**默认模式**。如果文件不存在，抛出异常 |\n| w | 以**只写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a | 以**追加**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n| r+ | 以**读写**方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常 |\n| w+ | 以**读写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a+ | 以**读写**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n\n**提示**：频繁的移动文件指针，**会影响文件的读写效率**，开发中更多的时候会以 **只读**、**只写** 的方式来操作文件\n\n**写入文件示例**\n\n```\n# 打开文件\nf = open(\"README\", \"w\")\n\nf.write(\"hello python！\\n\")\nf.write(\"今天天气真好\")\n\n# 关闭文件\nf.close()\n\n```\n\n##### <补> 按行读取文件内容：`readline()`\n\n*   `read` 方法默认会把文件的 **所有内容** **一次性读取到内存**\n*   如果文件太大，对内存的占用会非常严重\n*   `readline` 方法可以一次读取一行内容\n*   方法执行后，会把 **文件指针** 移动到下一行，准备再次读取\n\n**读取大文件的正确姿势**\n\n```\n# 打开文件\nfile = open(\"README\")\n\nwhile True:\n    # 读取一行内容\n    text = file.readline()\n\n    # 判断是否读到内容\n    if not text:\n        break\n\n    # 每读取一行的末尾已经有了一个 `\\n`\n    print(text, end=\"\")\n\n# 关闭文件\nfile.close()\n```\n\n**复制大文件**\n\n*   打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件\n\n```\n# 1\\. 打开文件\nfile_read = open(\"README\")\nfile_write = open(\"README[复件]\", \"w\")\n\n# 2\\. 读取并写入文件\nwhile True:\n    # 每次读取一行\n    text = file_read.readline()\n\n    # 判断是否读取到内容\n    if not text:\n        break\n\n    file_write.write(text)\n\n# 3\\. 关闭文件\nfile_read.close()\nfile_write.close()\n\n```\n\n#### 文件/目录的常用管理操作\n\n*   在 **终端** / **文件浏览器**、 中可以执行常规的 **文件** / **目录** 管理操作，例如：\n    *   创建、重命名、删除、改变路径、查看目录内容、……\n*   在 Python 中，如果希望通过程序实现上述功能，需要 `import os` 模块\n\n**文件管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | rename | 重命名文件 | `os.rename(源文件名, 目标文件名)` |\n| 02 | remove | 删除文件 | `os.remove(文件名)` |\n\n**目录管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | listdir | 目录列表 | `os.listdir(目录名)` |\n| 02 | mkdir | 创建目录 | `os.mkdir(目录名)` |\n| 03 | rmdir | 删除目录 | `os.rmdir(目录名)` |\n| 04 | getcwd | 获取当前目录 | `os.getcwd()` |\n| 05 | chdir | 修改工作目录 | `os.chdir(目标目录)` |\n| 06 | path.isdir | 判断是否是文件 | `os.path.isdir(文件路径)` |\n\n> 提示：文件或者目录操作都支持 **相对路径** 和 **绝对路径**\n\n####  文本文件的编码格式\n\n*   文本文件存储的内容是基于 **字符编码** 的文件，常见的编码有 `ASCII` 编码，`UNICODE` 编码等\n\n> Python 2.x 默认使用 `ASCII` 编码格式\n> Python 3.x 默认使用 `UTF-8` 编码格式\n\n**`ASCII` 编码**\n\n*   计算机中只有 `256` 个 `ASCII` 字符\n*   一个 `ASCII` 在内存中占用 **1 个字节** 的空间\n    *   `8` 个 `0/1` 的排列组合方式一共有 `256` 种，也就是 `2 ** 8`\n\n**`UTF-8` 编码格式**\n\n*   计算机中使用 **1~6 个字节** 来表示一个 `UTF-8` 字符，涵盖了 **地球上几乎所有地区的文字**\n*   大多数汉字会使用 **3 个字节** 表示\n*   `UTF-8` 是 `UNICODE` 编码的一种编码格式\n\n```\n# *-* coding:utf8 *-*\n\n# 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串\nhello_str = u\"你好世界\"\n\nprint(hello_str)\n\nfor c in hello_str:\n    print(c)\n\n```\n\n","source":"_posts/python基础/python文件操作.md","raw":"\n---\ntitle: (17) python文件操作\ndate: 2018-11-14 22:06:34\ntags:\ncategories: python基础\n---\n\n## 文件\n\n### 文件\n\n####文件的概念\n\n*   计算机的 **文件**，就是存储在某种 **长期储存设备** 上的一段 **数据**\n*   长期存储设备包括：硬盘、U 盘、移动硬盘、光盘...\n\n**文件的作用**：将数据长期保存下来，在需要的时候使用\n**文件的存储方式**：在计算机中，文件是以 **二进制** 的方式保存在磁盘上的\n**文本文件**：可以使用 **文本编辑软件** 查看，本质上还是二进制文件\n**二进制文件**：保存的内容 不是给人直接阅读的，而是 **提供给其他软件使用的**，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 **文本编辑软件** 查看\n\n#### 文件的基本操作\n\n**操作文件的套路**：\n在 **计算机** 中要操作文件的套路非常固定，一共包含**三个步骤**：\n\n1.  打开文件\n2.  读、写文件\n    *   **读** 将文件内容读入内存\n    *   **写** 将内存内容写入文件\n3.  关闭文件\n\n**操作文件的函数/方法**\n在 `Python` 中要操作文件\n\n| 序号 | 函数/方法 | 说明 |\n| --- | --- | --- |\n| 01 | open | 打开文件，并且返回文件操作对象 |\n| 02 | read | 将文件内容读取到内存 |\n| 03 | write | 将指定内容写入文件 |\n| 04 | close | 关闭文件 |\n\n`open` 函数负责打开文件，并且返回文件对象\n`read`/`write`/`close` 三个方法都需要通过 **文件对象** 来调用\n\n**读取文件示例**\n\n`open` 函数的第一个参数是要打开的文件名（文件名区分大小写）\n如果文件 **存在**，返回 **文件操作对象**\n如果文件 **不存在**，会 **抛出异常**\n\n`read` 方法可以一次性 **读入** 并 **返回** 文件的 **所有内容**\n\n`close` 方法负责 **关闭文件**\n如果 **忘记关闭文件**，**会造成系统资源消耗，而且会影响到后续对文件的访问**\n\n**注意**：`read` 方法执行后，会把 **文件指针** 移动到 **文件的末尾**\n\n```\n# 1\\. 打开 - 文件名需要注意大小写\nfile = open(\"README\")\n\n# 2\\. 读取\ntext = file.read()\nprint(text)\n\n# 3\\. 关闭\nfile.close()\n\n```\n\n**提示**\n\n*   在开发中，通常会先编写 **打开** 和 **关闭** 的代码，再编写中间针对文件的 **读/写** 操作！\n\n##### <补> 文件指针\n\n*   **文件指针** 标记 **从哪个位置开始读取数据**\n*   **第一次打开** 文件时，通常 **文件指针会指向文件的开始位置**\n*   当执行了 `read` 方法后，**文件指针** 会移动到 **读取内容的末尾**\n    *   默认情况下会移动到 **文件末尾**\n\n**思考**：如果执行了一次 `read` 方法，读取了所有内容，那么再次调用 `read` 方法，还能够获得到内容吗？\n**答案**：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。\n\n##### <补> 打开文件的方式\n\n*   `open` 函数默认以 **只读方式** 打开文件，并且返回文件对象\n\n```\nf = open(\"文件名\", \"访问方式\")\n```\n\n| 访问方式 | 说明 |\n| --- | --- |\n| r | 以**只读**方式打开文件。文件的指针将会放在文件的开头，这是**默认模式**。如果文件不存在，抛出异常 |\n| w | 以**只写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a | 以**追加**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n| r+ | 以**读写**方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常 |\n| w+ | 以**读写**方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件 |\n| a+ | 以**读写**方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入 |\n\n**提示**：频繁的移动文件指针，**会影响文件的读写效率**，开发中更多的时候会以 **只读**、**只写** 的方式来操作文件\n\n**写入文件示例**\n\n```\n# 打开文件\nf = open(\"README\", \"w\")\n\nf.write(\"hello python！\\n\")\nf.write(\"今天天气真好\")\n\n# 关闭文件\nf.close()\n\n```\n\n##### <补> 按行读取文件内容：`readline()`\n\n*   `read` 方法默认会把文件的 **所有内容** **一次性读取到内存**\n*   如果文件太大，对内存的占用会非常严重\n*   `readline` 方法可以一次读取一行内容\n*   方法执行后，会把 **文件指针** 移动到下一行，准备再次读取\n\n**读取大文件的正确姿势**\n\n```\n# 打开文件\nfile = open(\"README\")\n\nwhile True:\n    # 读取一行内容\n    text = file.readline()\n\n    # 判断是否读到内容\n    if not text:\n        break\n\n    # 每读取一行的末尾已经有了一个 `\\n`\n    print(text, end=\"\")\n\n# 关闭文件\nfile.close()\n```\n\n**复制大文件**\n\n*   打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件\n\n```\n# 1\\. 打开文件\nfile_read = open(\"README\")\nfile_write = open(\"README[复件]\", \"w\")\n\n# 2\\. 读取并写入文件\nwhile True:\n    # 每次读取一行\n    text = file_read.readline()\n\n    # 判断是否读取到内容\n    if not text:\n        break\n\n    file_write.write(text)\n\n# 3\\. 关闭文件\nfile_read.close()\nfile_write.close()\n\n```\n\n#### 文件/目录的常用管理操作\n\n*   在 **终端** / **文件浏览器**、 中可以执行常规的 **文件** / **目录** 管理操作，例如：\n    *   创建、重命名、删除、改变路径、查看目录内容、……\n*   在 Python 中，如果希望通过程序实现上述功能，需要 `import os` 模块\n\n**文件管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | rename | 重命名文件 | `os.rename(源文件名, 目标文件名)` |\n| 02 | remove | 删除文件 | `os.remove(文件名)` |\n\n**目录管理操作**\n\n| 序号 | 方法名 | 说明 | 示例 |\n| --- | --- | --- | --- |\n| 01 | listdir | 目录列表 | `os.listdir(目录名)` |\n| 02 | mkdir | 创建目录 | `os.mkdir(目录名)` |\n| 03 | rmdir | 删除目录 | `os.rmdir(目录名)` |\n| 04 | getcwd | 获取当前目录 | `os.getcwd()` |\n| 05 | chdir | 修改工作目录 | `os.chdir(目标目录)` |\n| 06 | path.isdir | 判断是否是文件 | `os.path.isdir(文件路径)` |\n\n> 提示：文件或者目录操作都支持 **相对路径** 和 **绝对路径**\n\n####  文本文件的编码格式\n\n*   文本文件存储的内容是基于 **字符编码** 的文件，常见的编码有 `ASCII` 编码，`UNICODE` 编码等\n\n> Python 2.x 默认使用 `ASCII` 编码格式\n> Python 3.x 默认使用 `UTF-8` 编码格式\n\n**`ASCII` 编码**\n\n*   计算机中只有 `256` 个 `ASCII` 字符\n*   一个 `ASCII` 在内存中占用 **1 个字节** 的空间\n    *   `8` 个 `0/1` 的排列组合方式一共有 `256` 种，也就是 `2 ** 8`\n\n**`UTF-8` 编码格式**\n\n*   计算机中使用 **1~6 个字节** 来表示一个 `UTF-8` 字符，涵盖了 **地球上几乎所有地区的文字**\n*   大多数汉字会使用 **3 个字节** 表示\n*   `UTF-8` 是 `UNICODE` 编码的一种编码格式\n\n```\n# *-* coding:utf8 *-*\n\n# 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串\nhello_str = u\"你好世界\"\n\nprint(hello_str)\n\nfor c in hello_str:\n    print(c)\n\n```\n\n","slug":"python基础/python文件操作","published":1,"updated":"2020-04-01T09:23:43.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2q005htssaadrdsiyy","content":"<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h3 id=\"文件-1\"><a href=\"#文件-1\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>####文件的概念</p>\n<ul>\n<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>\n<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>\n</ul>\n<p><strong>文件的作用</strong>：将数据长期保存下来，在需要的时候使用<br><strong>文件的存储方式</strong>：在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的<br><strong>文本文件</strong>：可以使用 <strong>文本编辑软件</strong> 查看，本质上还是二进制文件<br><strong>二进制文件</strong>：保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong>，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 <strong>文本编辑软件</strong> 查看</p>\n<h4 id=\"文件的基本操作\"><a href=\"#文件的基本操作\" class=\"headerlink\" title=\"文件的基本操作\"></a>文件的基本操作</h4><p><strong>操作文件的套路</strong>：<br>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol>\n<li>打开文件</li>\n<li>读、写文件<ul>\n<li><strong>读</strong> 将文件内容读入内存</li>\n<li><strong>写</strong> 将内存内容写入文件</li>\n</ul>\n</li>\n<li>关闭文件</li>\n</ol>\n<p><strong>操作文件的函数/方法</strong><br>在 <code>Python</code> 中要操作文件</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>open</td>\n<td>打开文件，并且返回文件操作对象</td>\n</tr>\n<tr>\n<td>02</td>\n<td>read</td>\n<td>将文件内容读取到内存</td>\n</tr>\n<tr>\n<td>03</td>\n<td>write</td>\n<td>将指定内容写入文件</td>\n</tr>\n<tr>\n<td>04</td>\n<td>close</td>\n<td>关闭文件</td>\n</tr>\n</tbody>\n</table>\n<p><code>open</code> 函数负责打开文件，并且返回文件对象<br><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</p>\n<p><strong>读取文件示例</strong></p>\n<p><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<br>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong><br>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></p>\n<p><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></p>\n<p><code>close</code> 方法负责 <strong>关闭文件</strong><br>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></p>\n<p><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开 - 文件名需要注意大小写</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取</span><br><span class=\"line\">text = file.read()</span><br><span class=\"line\">print(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li>\n</ul>\n<h5 id=\"lt-补-gt-文件指针\"><a href=\"#lt-补-gt-文件指针\" class=\"headerlink\" title=\"&lt;补&gt; 文件指针\"></a>&lt;补&gt; 文件指针</h5><ul>\n<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>\n<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>\n<li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong><ul>\n<li>默认情况下会移动到 <strong>文件末尾</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>思考</strong>：如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？<br><strong>答案</strong>：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。</p>\n<h5 id=\"lt-补-gt-打开文件的方式\"><a href=\"#lt-补-gt-打开文件的方式\" class=\"headerlink\" title=\"&lt;补&gt; 打开文件的方式\"></a>&lt;补&gt; 打开文件的方式</h5><ul>\n<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(&quot;文件名&quot;, &quot;访问方式&quot;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>：频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</p>\n<p><strong>写入文件示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">f = open(&quot;README&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.write(&quot;hello python！\\n&quot;)</span><br><span class=\"line\">f.write(&quot;今天天气真好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h5 id=\"lt-补-gt-按行读取文件内容：readline\"><a href=\"#lt-补-gt-按行读取文件内容：readline\" class=\"headerlink\" title=\"&lt;补&gt; 按行读取文件内容：readline()\"></a>&lt;补&gt; 按行读取文件内容：<code>readline()</code></h5><ul>\n<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>\n<li>如果文件太大，对内存的占用会非常严重</li>\n<li><code>readline</code> 方法可以一次读取一行内容</li>\n<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>\n</ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 读取一行内容</span><br><span class=\"line\">    text = file.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 每读取一行的末尾已经有了一个 `\\n`</span><br><span class=\"line\">    print(text, end=&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>复制大文件</strong></p>\n<ul>\n<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开文件</span><br><span class=\"line\">file_read = open(&quot;README&quot;)</span><br><span class=\"line\">file_write = open(&quot;README[复件]&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取并写入文件</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次读取一行</span><br><span class=\"line\">    text = file_read.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读取到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭文件</span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件-目录的常用管理操作\"><a href=\"#文件-目录的常用管理操作\" class=\"headerlink\" title=\"文件/目录的常用管理操作\"></a>文件/目录的常用管理操作</h4><ul>\n<li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：<ul>\n<li>创建、重命名、删除、改变路径、查看目录内容、……</li>\n</ul>\n</li>\n<li>在 Python 中，如果希望通过程序实现上述功能，需要 <code>import os</code> 模块</li>\n</ul>\n<p><strong>文件管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>rename</td>\n<td>重命名文件</td>\n<td><code>os.rename(源文件名, 目标文件名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>remove</td>\n<td>删除文件</td>\n<td><code>os.remove(文件名)</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>目录管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>listdir</td>\n<td>目录列表</td>\n<td><code>os.listdir(目录名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>mkdir</td>\n<td>创建目录</td>\n<td><code>os.mkdir(目录名)</code></td>\n</tr>\n<tr>\n<td>03</td>\n<td>rmdir</td>\n<td>删除目录</td>\n<td><code>os.rmdir(目录名)</code></td>\n</tr>\n<tr>\n<td>04</td>\n<td>getcwd</td>\n<td>获取当前目录</td>\n<td><code>os.getcwd()</code></td>\n</tr>\n<tr>\n<td>05</td>\n<td>chdir</td>\n<td>修改工作目录</td>\n<td><code>os.chdir(目标目录)</code></td>\n</tr>\n<tr>\n<td>06</td>\n<td>path.isdir</td>\n<td>判断是否是文件</td>\n<td><code>os.path.isdir(文件路径)</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<h4 id=\"文本文件的编码格式\"><a href=\"#文本文件的编码格式\" class=\"headerlink\" title=\"文本文件的编码格式\"></a>文本文件的编码格式</h4><ul>\n<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>\n</ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<p><strong><code>ASCII</code> 编码</strong></p>\n<ul>\n<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>\n<li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间<ul>\n<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><code>UTF-8</code> 编码格式</strong></p>\n<ul>\n<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>\n<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>\n<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># *-* coding:utf8 *-*</span><br><span class=\"line\"></span><br><span class=\"line\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span><br><span class=\"line\">hello_str = u&quot;你好世界&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(hello_str)</span><br><span class=\"line\"></span><br><span class=\"line\">for c in hello_str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h3 id=\"文件-1\"><a href=\"#文件-1\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>####文件的概念</p>\n<ul>\n<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>\n<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>\n</ul>\n<p><strong>文件的作用</strong>：将数据长期保存下来，在需要的时候使用<br><strong>文件的存储方式</strong>：在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的<br><strong>文本文件</strong>：可以使用 <strong>文本编辑软件</strong> 查看，本质上还是二进制文件<br><strong>二进制文件</strong>：保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong>，例如：图片文件、音频文件、视频文件等等，二进制文件不能使用 <strong>文本编辑软件</strong> 查看</p>\n<h4 id=\"文件的基本操作\"><a href=\"#文件的基本操作\" class=\"headerlink\" title=\"文件的基本操作\"></a>文件的基本操作</h4><p><strong>操作文件的套路</strong>：<br>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol>\n<li>打开文件</li>\n<li>读、写文件<ul>\n<li><strong>读</strong> 将文件内容读入内存</li>\n<li><strong>写</strong> 将内存内容写入文件</li>\n</ul>\n</li>\n<li>关闭文件</li>\n</ol>\n<p><strong>操作文件的函数/方法</strong><br>在 <code>Python</code> 中要操作文件</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>函数/方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>open</td>\n<td>打开文件，并且返回文件操作对象</td>\n</tr>\n<tr>\n<td>02</td>\n<td>read</td>\n<td>将文件内容读取到内存</td>\n</tr>\n<tr>\n<td>03</td>\n<td>write</td>\n<td>将指定内容写入文件</td>\n</tr>\n<tr>\n<td>04</td>\n<td>close</td>\n<td>关闭文件</td>\n</tr>\n</tbody>\n</table>\n<p><code>open</code> 函数负责打开文件，并且返回文件对象<br><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</p>\n<p><strong>读取文件示例</strong></p>\n<p><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<br>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong><br>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></p>\n<p><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></p>\n<p><code>close</code> 方法负责 <strong>关闭文件</strong><br>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></p>\n<p><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开 - 文件名需要注意大小写</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取</span><br><span class=\"line\">text = file.read()</span><br><span class=\"line\">print(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li>\n</ul>\n<h5 id=\"lt-补-gt-文件指针\"><a href=\"#lt-补-gt-文件指针\" class=\"headerlink\" title=\"&lt;补&gt; 文件指针\"></a>&lt;补&gt; 文件指针</h5><ul>\n<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>\n<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>\n<li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong><ul>\n<li>默认情况下会移动到 <strong>文件末尾</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>思考</strong>：如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？<br><strong>答案</strong>：不能！第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容。</p>\n<h5 id=\"lt-补-gt-打开文件的方式\"><a href=\"#lt-补-gt-打开文件的方式\" class=\"headerlink\" title=\"&lt;补&gt; 打开文件的方式\"></a>&lt;补&gt; 打开文件的方式</h5><ul>\n<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(&quot;文件名&quot;, &quot;访问方式&quot;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>访问方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n</tbody>\n</table>\n<p><strong>提示</strong>：频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</p>\n<p><strong>写入文件示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">f = open(&quot;README&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">f.write(&quot;hello python！\\n&quot;)</span><br><span class=\"line\">f.write(&quot;今天天气真好&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h5 id=\"lt-补-gt-按行读取文件内容：readline\"><a href=\"#lt-补-gt-按行读取文件内容：readline\" class=\"headerlink\" title=\"&lt;补&gt; 按行读取文件内容：readline()\"></a>&lt;补&gt; 按行读取文件内容：<code>readline()</code></h5><ul>\n<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>\n<li>如果文件太大，对内存的占用会非常严重</li>\n<li><code>readline</code> 方法可以一次读取一行内容</li>\n<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>\n</ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">file = open(&quot;README&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 读取一行内容</span><br><span class=\"line\">    text = file.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 每读取一行的末尾已经有了一个 `\\n`</span><br><span class=\"line\">    print(text, end=&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭文件</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p><strong>复制大文件</strong></p>\n<ul>\n<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1\\. 打开文件</span><br><span class=\"line\">file_read = open(&quot;README&quot;)</span><br><span class=\"line\">file_write = open(&quot;README[复件]&quot;, &quot;w&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2\\. 读取并写入文件</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次读取一行</span><br><span class=\"line\">    text = file_read.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断是否读取到内容</span><br><span class=\"line\">    if not text:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">    file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"># 3\\. 关闭文件</span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件-目录的常用管理操作\"><a href=\"#文件-目录的常用管理操作\" class=\"headerlink\" title=\"文件/目录的常用管理操作\"></a>文件/目录的常用管理操作</h4><ul>\n<li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如：<ul>\n<li>创建、重命名、删除、改变路径、查看目录内容、……</li>\n</ul>\n</li>\n<li>在 Python 中，如果希望通过程序实现上述功能，需要 <code>import os</code> 模块</li>\n</ul>\n<p><strong>文件管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>rename</td>\n<td>重命名文件</td>\n<td><code>os.rename(源文件名, 目标文件名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>remove</td>\n<td>删除文件</td>\n<td><code>os.remove(文件名)</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>目录管理操作</strong></p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>方法名</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td>listdir</td>\n<td>目录列表</td>\n<td><code>os.listdir(目录名)</code></td>\n</tr>\n<tr>\n<td>02</td>\n<td>mkdir</td>\n<td>创建目录</td>\n<td><code>os.mkdir(目录名)</code></td>\n</tr>\n<tr>\n<td>03</td>\n<td>rmdir</td>\n<td>删除目录</td>\n<td><code>os.rmdir(目录名)</code></td>\n</tr>\n<tr>\n<td>04</td>\n<td>getcwd</td>\n<td>获取当前目录</td>\n<td><code>os.getcwd()</code></td>\n</tr>\n<tr>\n<td>05</td>\n<td>chdir</td>\n<td>修改工作目录</td>\n<td><code>os.chdir(目标目录)</code></td>\n</tr>\n<tr>\n<td>06</td>\n<td>path.isdir</td>\n<td>判断是否是文件</td>\n<td><code>os.path.isdir(文件路径)</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<h4 id=\"文本文件的编码格式\"><a href=\"#文本文件的编码格式\" class=\"headerlink\" title=\"文本文件的编码格式\"></a>文本文件的编码格式</h4><ul>\n<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>\n</ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<p><strong><code>ASCII</code> 编码</strong></p>\n<ul>\n<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>\n<li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间<ul>\n<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><code>UTF-8</code> 编码格式</strong></p>\n<ul>\n<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>\n<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>\n<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># *-* coding:utf8 *-*</span><br><span class=\"line\"></span><br><span class=\"line\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span><br><span class=\"line\">hello_str = u&quot;你好世界&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(hello_str)</span><br><span class=\"line\"></span><br><span class=\"line\">for c in hello_str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n"},{"title":"(7) python正则表达式的学习过程","date":"2018-11-14T13:59:42.000Z","_content":"\n```python\n #优先使用内置函数\na = 'C|C++|Java|C#|Python|Javascript'\nprint(a.index('Python')>-1)\nprint('Python' in a)         \n#利用内置函数判断字符串'python'是否在a中\n```\n\n正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。\n例如:\n1、检查一串数字是否是电话号码.\n2、检测一个字符串是否符合email\n3、把一个文本里指定的单词替换为另外一个单词。\n#用正则表达式\n```python\nimport re                      #   引入re 模块 \n\na = 'C|C++|Java|C#|Python|Javascript'\n\nr = re.findall('Python',a)           #findall 方法  \nprint(r)\nif len(r) > 0:\n    print('字符串中包含Python')\nelse:\n    print('No')                    \n ```      \n  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。\n```python\nimport re                       \na = 'C0C++7Java12C#9Python67\\nJavascript8'\n #用r来提取a中的数字\nr = re.findall('\\d',a)      #\\d 来表示数字（0-9）\nprint(r)\n#用s来提取a中的非数字\ns = re.findall('\\D',a)      #\\D 来表示非数字的字符\nprint(s)\n```\n上面'python'是普通字符，'\\d','\\D'属于元字符\n正则表达式就是由普通字符和元字符等组合在一起的。\n\n**字符集**\n虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）\n```python\nimport re\na = 'abc,acc,adc,aec,adfc,ahc,afc'\nr = re.findall('a[cf]c',s)   #提取afc 或acc,普通字符a,c定界，元字符c，f\n#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。\nprint(r) \n```\n**概括字符集**\n \\d即 [0-9]\n\\D所有的非数字\n\\w单词字符 '[A-Za-z0-9]和下划线_ \n\\W 非单词字符，\n\\s 空白字符(空格/制表符/换行符)\n\\S 非空白字符\n.  匹配除换行符之外其他所有的字符\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\d',a) \nprint(r)\n#可自行验证\n```\n**数量词,贪婪与非贪婪**\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\w{3}',a)  #提取出来的\\w 3个一组\ns = re.findall('[A-Za-z]{3}',a)\nt = re.findall('[A-Za-z]{3,7}',a)#3到7个一组，优先选择7个\n#贪婪 与 非贪婪\n#python默认使用贪婪  按最大的匹配\nu = re.findall('[A-Za-z]{3,7}?',a)#非贪婪  按最小的匹配，即3个一组\nprint(r)  \nprint(s)\nprint(t)\nprint(u)\n```\n**问号，星号，加号的使用方法**\n```python\nimport re\na = 'pytho0python1pythonn2'\n\nr =  re.findall('python*',a)  #['pytho', 'python', 'pythonn']\ns =  re.findall('python+',a)\nt =  re.findall('python?',a)\nprint(r)\nprint(s)\nprint(t)\n```\n1、 *  对*前的字符匹配0次或无限多次\n2、+  对+前的字符匹配1次或无限多次\n3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的\n\n**边界匹配**\n```python\nimport re \nqq = '100001'\n#qq位数4-10位数\nr =  re.findall('^\\d{4,10}$',qq)  #^从字符串开头匹配 ， $从字符串末尾匹配\n#即开头到结尾得在4-10之间\nprint(r)\n```\n**组**\n```python\nimport re\na = 'PythonPythonPythonPythonPythonPython'\nr =  re.findall('(Python){2}',a)\nprint(r)#['Python', 'Python', 'Python']\n```\n\n**匹配模式**   （函数中的第三个参数）\nre.I 忽略匹配中的大小写\nre.S 匹配所有的字符，包括换行符\n```\nimport re\na = 'C0C++7Java12C#\\n9Python67Javascript#8'\nr =  re.findall('c#',a,re.I)\nr =  re.findall('c#.{1}',a,re.I|re.S)   #  |  且\nprint(r)#['C#']\nprint(r1)#['C#\\n']\n```\n**re.sub简单用法**     \n```python\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\nr =  re.sub('C#','GO',a,0)  #无限次替换\ns =  re.sub('C#','GO',a,1)  #只替换一次\nt =  a.replace('C#','GO')    #python内置函数\nprint(r)\nprint(s)\nprint(t)\n```\n**re.sub高阶用法**\n```\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\n\ndef convert(value):\n    print(value)\n#<re.Match object; span=(5, 7), match='C#'>\n#<re.Match object; span=(14, 16), match='C#'>\n#<re.Match object; span=(25, 27), match='C#'>\n#<re.Match object; span=(38, 40), match='C#'>\n#所以用value.group()\n    matched = value.group()\n    return '!!' + matched +'!!'\n\nr =  re.sub('C#',convert,a)\nprint(r)\n```\n**把函数作为传递参数**\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\n\ndef convert1(value):\n    print(value)\n    matched1 = value.group()\n    if int(matched1) >=6:\n        return '9'\n    else:\n        return '0'\n\ns =  re.sub( r'\\d',convert1,s)\nprint(s)\n```\n**match和search**\nmatch和search方法类似, 但有些许区别, 顾明思议\nmatch是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回\nsearch是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\nr = re.match(r'\\d',s)    \nr1 = re.search(r'\\d',s)\n\nprint(r) #None\nprint(r1)#<re.Match object; span=(1, 2), match='1'>\n```\n**group()的用法**\n```\nimport re\n\ns = 'life is short,i use python'\nr = re.search('life.*python',s)\nr1 = re.search(('life.*python'),s) #与上行一样\nr2 = re.search('life(.*)python',s)\nprint(r.group())\nprint(r1.group())\nprint(r2.group(0))  #全文匹配\nprint(r2.group(1))  #括号内匹配\nr3 = re.findall('life(.*)python',s)\nprint(r3)\n```\n```\nimport re\n\ns = 'life is short,i use python,I love python'\nr = re.search('life(.*)python(.*)python',s)\nprint(r.group())#life is short,i use python,I love python\nprint(r.group(0))#life is short,i use python,I love python\nprint(r.group(1))# is short,i use (第一组)\nprint(r.group(2))#,I love（第二组）\nprint(r.group(0,1,2))   #用元组的方式表达出来#('life is short,i use python,I love python', ' is short,i use ', ',I love ')\nprint(r.groups())  #只会表示出（.*）的内容#(' is short,i use ', ',I love ')\n```\n","source":"_posts/python基础/python正则表达式的学习过程.md","raw":"---\ntitle: (7) python正则表达式的学习过程\ndate: 2018-11-14 21:59:42\ntags:\ncategories: python基础\n---\n\n```python\n #优先使用内置函数\na = 'C|C++|Java|C#|Python|Javascript'\nprint(a.index('Python')>-1)\nprint('Python' in a)         \n#利用内置函数判断字符串'python'是否在a中\n```\n\n正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。\n例如:\n1、检查一串数字是否是电话号码.\n2、检测一个字符串是否符合email\n3、把一个文本里指定的单词替换为另外一个单词。\n#用正则表达式\n```python\nimport re                      #   引入re 模块 \n\na = 'C|C++|Java|C#|Python|Javascript'\n\nr = re.findall('Python',a)           #findall 方法  \nprint(r)\nif len(r) > 0:\n    print('字符串中包含Python')\nelse:\n    print('No')                    \n ```      \n  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。\n```python\nimport re                       \na = 'C0C++7Java12C#9Python67\\nJavascript8'\n #用r来提取a中的数字\nr = re.findall('\\d',a)      #\\d 来表示数字（0-9）\nprint(r)\n#用s来提取a中的非数字\ns = re.findall('\\D',a)      #\\D 来表示非数字的字符\nprint(s)\n```\n上面'python'是普通字符，'\\d','\\D'属于元字符\n正则表达式就是由普通字符和元字符等组合在一起的。\n\n**字符集**\n虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）\n```python\nimport re\na = 'abc,acc,adc,aec,adfc,ahc,afc'\nr = re.findall('a[cf]c',s)   #提取afc 或acc,普通字符a,c定界，元字符c，f\n#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。\nprint(r) \n```\n**概括字符集**\n \\d即 [0-9]\n\\D所有的非数字\n\\w单词字符 '[A-Za-z0-9]和下划线_ \n\\W 非单词字符，\n\\s 空白字符(空格/制表符/换行符)\n\\S 非空白字符\n.  匹配除换行符之外其他所有的字符\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\d',a) \nprint(r)\n#可自行验证\n```\n**数量词,贪婪与非贪婪**\n```python\nimport re\na = 'C0C++7Java12C#9Python67Javascript8\\n\\r &^'\nr = re.findall('\\w{3}',a)  #提取出来的\\w 3个一组\ns = re.findall('[A-Za-z]{3}',a)\nt = re.findall('[A-Za-z]{3,7}',a)#3到7个一组，优先选择7个\n#贪婪 与 非贪婪\n#python默认使用贪婪  按最大的匹配\nu = re.findall('[A-Za-z]{3,7}?',a)#非贪婪  按最小的匹配，即3个一组\nprint(r)  \nprint(s)\nprint(t)\nprint(u)\n```\n**问号，星号，加号的使用方法**\n```python\nimport re\na = 'pytho0python1pythonn2'\n\nr =  re.findall('python*',a)  #['pytho', 'python', 'pythonn']\ns =  re.findall('python+',a)\nt =  re.findall('python?',a)\nprint(r)\nprint(s)\nprint(t)\n```\n1、 *  对*前的字符匹配0次或无限多次\n2、+  对+前的字符匹配1次或无限多次\n3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的\n\n**边界匹配**\n```python\nimport re \nqq = '100001'\n#qq位数4-10位数\nr =  re.findall('^\\d{4,10}$',qq)  #^从字符串开头匹配 ， $从字符串末尾匹配\n#即开头到结尾得在4-10之间\nprint(r)\n```\n**组**\n```python\nimport re\na = 'PythonPythonPythonPythonPythonPython'\nr =  re.findall('(Python){2}',a)\nprint(r)#['Python', 'Python', 'Python']\n```\n\n**匹配模式**   （函数中的第三个参数）\nre.I 忽略匹配中的大小写\nre.S 匹配所有的字符，包括换行符\n```\nimport re\na = 'C0C++7Java12C#\\n9Python67Javascript#8'\nr =  re.findall('c#',a,re.I)\nr =  re.findall('c#.{1}',a,re.I|re.S)   #  |  且\nprint(r)#['C#']\nprint(r1)#['C#\\n']\n```\n**re.sub简单用法**     \n```python\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\nr =  re.sub('C#','GO',a,0)  #无限次替换\ns =  re.sub('C#','GO',a,1)  #只替换一次\nt =  a.replace('C#','GO')    #python内置函数\nprint(r)\nprint(s)\nprint(t)\n```\n**re.sub高阶用法**\n```\nimport re\na = 'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'\n\ndef convert(value):\n    print(value)\n#<re.Match object; span=(5, 7), match='C#'>\n#<re.Match object; span=(14, 16), match='C#'>\n#<re.Match object; span=(25, 27), match='C#'>\n#<re.Match object; span=(38, 40), match='C#'>\n#所以用value.group()\n    matched = value.group()\n    return '!!' + matched +'!!'\n\nr =  re.sub('C#',convert,a)\nprint(r)\n```\n**把函数作为传递参数**\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\n\ndef convert1(value):\n    print(value)\n    matched1 = value.group()\n    if int(matched1) >=6:\n        return '9'\n    else:\n        return '0'\n\ns =  re.sub( r'\\d',convert1,s)\nprint(s)\n```\n**match和search**\nmatch和search方法类似, 但有些许区别, 顾明思议\nmatch是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回\nsearch是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束\n```\nimport re\ns = 'A1b2c3d4e5f6g7h8i9'\nr = re.match(r'\\d',s)    \nr1 = re.search(r'\\d',s)\n\nprint(r) #None\nprint(r1)#<re.Match object; span=(1, 2), match='1'>\n```\n**group()的用法**\n```\nimport re\n\ns = 'life is short,i use python'\nr = re.search('life.*python',s)\nr1 = re.search(('life.*python'),s) #与上行一样\nr2 = re.search('life(.*)python',s)\nprint(r.group())\nprint(r1.group())\nprint(r2.group(0))  #全文匹配\nprint(r2.group(1))  #括号内匹配\nr3 = re.findall('life(.*)python',s)\nprint(r3)\n```\n```\nimport re\n\ns = 'life is short,i use python,I love python'\nr = re.search('life(.*)python(.*)python',s)\nprint(r.group())#life is short,i use python,I love python\nprint(r.group(0))#life is short,i use python,I love python\nprint(r.group(1))# is short,i use (第一组)\nprint(r.group(2))#,I love（第二组）\nprint(r.group(0,1,2))   #用元组的方式表达出来#('life is short,i use python,I love python', ' is short,i use ', ',I love ')\nprint(r.groups())  #只会表示出（.*）的内容#(' is short,i use ', ',I love ')\n```\n","slug":"python基础/python正则表达式的学习过程","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p2s005jtssaa93re6b7","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#优先使用内置函数</span></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\">print(a.index(<span class=\"string\">'Python'</span>)&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Python'</span> <span class=\"keyword\">in</span> a)         </span><br><span class=\"line\"><span class=\"comment\">#利用内置函数判断字符串'python'是否在a中</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。<br>例如:<br>1、检查一串数字是否是电话号码.<br>2、检测一个字符串是否符合email<br>3、把一个文本里指定的单词替换为另外一个单词。</p>\n<p>#用正则表达式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re                      <span class=\"comment\">#   引入re 模块 </span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'Python'</span>,a)           <span class=\"comment\">#findall 方法  </span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(r) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'字符串中包含Python'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'No'</span>)                    </span><br><span class=\"line\"> ```      </span><br><span class=\"line\">  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> re                       </span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67\\nJavascript8'</span></span><br><span class=\"line\"> <span class=\"comment\">#用r来提取a中的数字</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a)      <span class=\"comment\">#\\d 来表示数字（0-9）</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#用s来提取a中的非数字</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'\\D'</span>,a)      <span class=\"comment\">#\\D 来表示非数字的字符</span></span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p>上面’python’是普通字符，’\\d’,’\\D’属于元字符<br>正则表达式就是由普通字符和元字符等组合在一起的。</p>\n<p><strong>字符集</strong><br>虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'abc,acc,adc,aec,adfc,ahc,afc'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'a[cf]c'</span>,s)   <span class=\"comment\">#提取afc 或acc,普通字符a,c定界，元字符c，f</span></span><br><span class=\"line\"><span class=\"comment\">#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>概括字符集</strong><br> \\d即 [0-9]<br>\\D所有的非数字<br>\\w单词字符 ‘[A-Za-z0-9]和下划线_<br>\\W 非单词字符，<br>\\s 空白字符(空格/制表符/换行符)<br>\\S 非空白字符<br>.  匹配除换行符之外其他所有的字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a) </span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#可自行验证</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数量词,贪婪与非贪婪</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\w&#123;3&#125;'</span>,a)  <span class=\"comment\">#提取出来的\\w 3个一组</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'[A-Za-z]&#123;3&#125;'</span>,a)</span><br><span class=\"line\">t = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;'</span>,a)<span class=\"comment\">#3到7个一组，优先选择7个</span></span><br><span class=\"line\"><span class=\"comment\">#贪婪 与 非贪婪</span></span><br><span class=\"line\"><span class=\"comment\">#python默认使用贪婪  按最大的匹配</span></span><br><span class=\"line\">u = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;?'</span>,a)<span class=\"comment\">#非贪婪  按最小的匹配，即3个一组</span></span><br><span class=\"line\">print(r)  </span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">print(u)</span><br></pre></td></tr></table></figure></p>\n<p><strong>问号，星号，加号的使用方法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'pytho0python1pythonn2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'python*'</span>,a)  <span class=\"comment\">#['pytho', 'python', 'pythonn']</span></span><br><span class=\"line\">s =  re.findall(<span class=\"string\">'python+'</span>,a)</span><br><span class=\"line\">t =  re.findall(<span class=\"string\">'python?'</span>,a)</span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p>1、 <em>  对</em>前的字符匹配0次或无限多次<br>2、+  对+前的字符匹配1次或无限多次<br>3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的</p>\n<p><strong>边界匹配</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\">qq = <span class=\"string\">'100001'</span></span><br><span class=\"line\"><span class=\"comment\">#qq位数4-10位数</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'^\\d&#123;4,10&#125;$'</span>,qq)  <span class=\"comment\">#^从字符串开头匹配 ， $从字符串末尾匹配</span></span><br><span class=\"line\"><span class=\"comment\">#即开头到结尾得在4-10之间</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>组</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'PythonPythonPythonPythonPythonPython'</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'(Python)&#123;2&#125;'</span>,a)</span><br><span class=\"line\">print(r)<span class=\"comment\">#['Python', 'Python', 'Python']</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>匹配模式</strong>   （函数中的第三个参数）<br>re.I 忽略匹配中的大小写<br>re.S 匹配所有的字符，包括换行符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++7Java12C#\\n9Python67Javascript#8&apos;</span><br><span class=\"line\">r =  re.findall(&apos;c#&apos;,a,re.I)</span><br><span class=\"line\">r =  re.findall(&apos;c#.&#123;1&#125;&apos;,a,re.I|re.S)   #  |  且</span><br><span class=\"line\">print(r)#[&apos;C#&apos;]</span><br><span class=\"line\">print(r1)#[&apos;C#\\n&apos;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub简单用法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'</span></span><br><span class=\"line\">r =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">0</span>)  <span class=\"comment\">#无限次替换</span></span><br><span class=\"line\">s =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">1</span>)  <span class=\"comment\">#只替换一次</span></span><br><span class=\"line\">t =  a.replace(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>)    <span class=\"comment\">#python内置函数</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub高阶用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">#&lt;re.Match object; span=(5, 7), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(14, 16), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(25, 27), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(38, 40), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#所以用value.group()</span><br><span class=\"line\">    matched = value.group()</span><br><span class=\"line\">    return &apos;!!&apos; + matched +&apos;!!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.sub(&apos;C#&apos;,convert,a)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>把函数作为传递参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert1(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">    matched1 = value.group()</span><br><span class=\"line\">    if int(matched1) &gt;=6:</span><br><span class=\"line\">        return &apos;9&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s =  re.sub( r&apos;\\d&apos;,convert1,s)</span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>match和search</strong><br>match和search方法类似, 但有些许区别, 顾明思议<br>match是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回<br>search是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\">r = re.match(r&apos;\\d&apos;,s)    </span><br><span class=\"line\">r1 = re.search(r&apos;\\d&apos;,s)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r) #None</span><br><span class=\"line\">print(r1)#&lt;re.Match object; span=(1, 2), match=&apos;1&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>group()的用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python&apos;</span><br><span class=\"line\">r = re.search(&apos;life.*python&apos;,s)</span><br><span class=\"line\">r1 = re.search((&apos;life.*python&apos;),s) #与上行一样</span><br><span class=\"line\">r2 = re.search(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())</span><br><span class=\"line\">print(r1.group())</span><br><span class=\"line\">print(r2.group(0))  #全文匹配</span><br><span class=\"line\">print(r2.group(1))  #括号内匹配</span><br><span class=\"line\">r3 = re.findall(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r3)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python,I love python&apos;</span><br><span class=\"line\">r = re.search(&apos;life(.*)python(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(0))#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(1))# is short,i use (第一组)</span><br><span class=\"line\">print(r.group(2))#,I love（第二组）</span><br><span class=\"line\">print(r.group(0,1,2))   #用元组的方式表达出来#(&apos;life is short,i use python,I love python&apos;, &apos; is short,i use &apos;, &apos;,I love &apos;)</span><br><span class=\"line\">print(r.groups())  #只会表示出（.*）的内容#(&apos; is short,i use &apos;, &apos;,I love &apos;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#优先使用内置函数</span></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\">print(a.index(<span class=\"string\">'Python'</span>)&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Python'</span> <span class=\"keyword\">in</span> a)         </span><br><span class=\"line\"><span class=\"comment\">#利用内置函数判断字符串'python'是否在a中</span></span><br></pre></td></tr></table></figure>\n<p>正则表达式是一个特殊的字符序列，帮助检测一个字符串是否与所设定字符序列相匹配。.可快速检索文本、实现一些替换文本的操作。<br>例如:<br>1、检查一串数字是否是电话号码.<br>2、检测一个字符串是否符合email<br>3、把一个文本里指定的单词替换为另外一个单词。</p>\n<p>#用正则表达式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re                      <span class=\"comment\">#   引入re 模块 </span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"string\">'C|C++|Java|C#|Python|Javascript'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'Python'</span>,a)           <span class=\"comment\">#findall 方法  </span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"keyword\">if</span> len(r) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'字符串中包含Python'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'No'</span>)                    </span><br><span class=\"line\"> ```      </span><br><span class=\"line\">  正则表达式不仅可以用来检测字符串，也可以用来替换字符串。</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"keyword\">import</span> re                       </span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67\\nJavascript8'</span></span><br><span class=\"line\"> <span class=\"comment\">#用r来提取a中的数字</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a)      <span class=\"comment\">#\\d 来表示数字（0-9）</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#用s来提取a中的非数字</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'\\D'</span>,a)      <span class=\"comment\">#\\D 来表示非数字的字符</span></span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p>上面’python’是普通字符，’\\d’,’\\D’属于元字符<br>正则表达式就是由普通字符和元字符等组合在一起的。</p>\n<p><strong>字符集</strong><br>虽然可以提取字符串，但提取出来的都是一个一个字符。只能匹配单一的字符（单个字母，数字）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'abc,acc,adc,aec,adfc,ahc,afc'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'a[cf]c'</span>,s)   <span class=\"comment\">#提取afc 或acc,普通字符a,c定界，元字符c，f</span></span><br><span class=\"line\"><span class=\"comment\">#[]里表示或。[cf] c或f.[cdf] c或d或f  [^cfd]取反，不是c和d和f。[c-f]取c到f。</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>概括字符集</strong><br> \\d即 [0-9]<br>\\D所有的非数字<br>\\w单词字符 ‘[A-Za-z0-9]和下划线_<br>\\W 非单词字符，<br>\\s 空白字符(空格/制表符/换行符)<br>\\S 非空白字符<br>.  匹配除换行符之外其他所有的字符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\d'</span>,a) </span><br><span class=\"line\">print(r)</span><br><span class=\"line\"><span class=\"comment\">#可自行验证</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>数量词,贪婪与非贪婪</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++7Java12C#9Python67Javascript8\\n\\r &amp;^'</span></span><br><span class=\"line\">r = re.findall(<span class=\"string\">'\\w&#123;3&#125;'</span>,a)  <span class=\"comment\">#提取出来的\\w 3个一组</span></span><br><span class=\"line\">s = re.findall(<span class=\"string\">'[A-Za-z]&#123;3&#125;'</span>,a)</span><br><span class=\"line\">t = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;'</span>,a)<span class=\"comment\">#3到7个一组，优先选择7个</span></span><br><span class=\"line\"><span class=\"comment\">#贪婪 与 非贪婪</span></span><br><span class=\"line\"><span class=\"comment\">#python默认使用贪婪  按最大的匹配</span></span><br><span class=\"line\">u = re.findall(<span class=\"string\">'[A-Za-z]&#123;3,7&#125;?'</span>,a)<span class=\"comment\">#非贪婪  按最小的匹配，即3个一组</span></span><br><span class=\"line\">print(r)  </span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br><span class=\"line\">print(u)</span><br></pre></td></tr></table></figure></p>\n<p><strong>问号，星号，加号的使用方法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'pytho0python1pythonn2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'python*'</span>,a)  <span class=\"comment\">#['pytho', 'python', 'pythonn']</span></span><br><span class=\"line\">s =  re.findall(<span class=\"string\">'python+'</span>,a)</span><br><span class=\"line\">t =  re.findall(<span class=\"string\">'python?'</span>,a)</span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p>1、 <em>  对</em>前的字符匹配0次或无限多次<br>2、+  对+前的字符匹配1次或无限多次<br>3、 ?   对?前的字符匹配0次或1次    与贪婪中的?是不同的</p>\n<p><strong>边界匹配</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\">qq = <span class=\"string\">'100001'</span></span><br><span class=\"line\"><span class=\"comment\">#qq位数4-10位数</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'^\\d&#123;4,10&#125;$'</span>,qq)  <span class=\"comment\">#^从字符串开头匹配 ， $从字符串末尾匹配</span></span><br><span class=\"line\"><span class=\"comment\">#即开头到结尾得在4-10之间</span></span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>组</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'PythonPythonPythonPythonPythonPython'</span></span><br><span class=\"line\">r =  re.findall(<span class=\"string\">'(Python)&#123;2&#125;'</span>,a)</span><br><span class=\"line\">print(r)<span class=\"comment\">#['Python', 'Python', 'Python']</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>匹配模式</strong>   （函数中的第三个参数）<br>re.I 忽略匹配中的大小写<br>re.S 匹配所有的字符，包括换行符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++7Java12C#\\n9Python67Javascript#8&apos;</span><br><span class=\"line\">r =  re.findall(&apos;c#&apos;,a,re.I)</span><br><span class=\"line\">r =  re.findall(&apos;c#.&#123;1&#125;&apos;,a,re.I|re.S)   #  |  且</span><br><span class=\"line\">print(r)#[&apos;C#&apos;]</span><br><span class=\"line\">print(r1)#[&apos;C#\\n&apos;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub简单用法</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\">a = <span class=\"string\">'C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8'</span></span><br><span class=\"line\">r =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">0</span>)  <span class=\"comment\">#无限次替换</span></span><br><span class=\"line\">s =  re.sub(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>,a,<span class=\"number\">1</span>)  <span class=\"comment\">#只替换一次</span></span><br><span class=\"line\">t =  a.replace(<span class=\"string\">'C#'</span>,<span class=\"string\">'GO'</span>)    <span class=\"comment\">#python内置函数</span></span><br><span class=\"line\">print(r)</span><br><span class=\"line\">print(s)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure></p>\n<p><strong>re.sub高阶用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">a = &apos;C0C++C#7Java12C#\\n9Python6C#7JavascriptC#8&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">#&lt;re.Match object; span=(5, 7), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(14, 16), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(25, 27), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#&lt;re.Match object; span=(38, 40), match=&apos;C#&apos;&gt;</span><br><span class=\"line\">#所以用value.group()</span><br><span class=\"line\">    matched = value.group()</span><br><span class=\"line\">    return &apos;!!&apos; + matched +&apos;!!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">r =  re.sub(&apos;C#&apos;,convert,a)</span><br><span class=\"line\">print(r)</span><br></pre></td></tr></table></figure></p>\n<p><strong>把函数作为传递参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def convert1(value):</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">    matched1 = value.group()</span><br><span class=\"line\">    if int(matched1) &gt;=6:</span><br><span class=\"line\">        return &apos;9&apos;</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return &apos;0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s =  re.sub( r&apos;\\d&apos;,convert1,s)</span><br><span class=\"line\">print(s)</span><br></pre></td></tr></table></figure></p>\n<p><strong>match和search</strong><br>match和search方法类似, 但有些许区别, 顾明思议<br>match是匹配的意思, 从第一个字符开始匹配, 匹配不到就返回<br>search是搜索的意思, 如果第一个字符匹配不到, 会继续往后匹配, 直到字符结束<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">s = &apos;A1b2c3d4e5f6g7h8i9&apos;</span><br><span class=\"line\">r = re.match(r&apos;\\d&apos;,s)    </span><br><span class=\"line\">r1 = re.search(r&apos;\\d&apos;,s)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r) #None</span><br><span class=\"line\">print(r1)#&lt;re.Match object; span=(1, 2), match=&apos;1&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><strong>group()的用法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python&apos;</span><br><span class=\"line\">r = re.search(&apos;life.*python&apos;,s)</span><br><span class=\"line\">r1 = re.search((&apos;life.*python&apos;),s) #与上行一样</span><br><span class=\"line\">r2 = re.search(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())</span><br><span class=\"line\">print(r1.group())</span><br><span class=\"line\">print(r2.group(0))  #全文匹配</span><br><span class=\"line\">print(r2.group(1))  #括号内匹配</span><br><span class=\"line\">r3 = re.findall(&apos;life(.*)python&apos;,s)</span><br><span class=\"line\">print(r3)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">s = &apos;life is short,i use python,I love python&apos;</span><br><span class=\"line\">r = re.search(&apos;life(.*)python(.*)python&apos;,s)</span><br><span class=\"line\">print(r.group())#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(0))#life is short,i use python,I love python</span><br><span class=\"line\">print(r.group(1))# is short,i use (第一组)</span><br><span class=\"line\">print(r.group(2))#,I love（第二组）</span><br><span class=\"line\">print(r.group(0,1,2))   #用元组的方式表达出来#(&apos;life is short,i use python,I love python&apos;, &apos; is short,i use &apos;, &apos;,I love &apos;)</span><br><span class=\"line\">print(r.groups())  #只会表示出（.*）的内容#(&apos; is short,i use &apos;, &apos;,I love &apos;)</span><br></pre></td></tr></table></figure>\n"},{"title":"(5) python项目的组织结构","date":"2018-11-14T13:59:11.000Z","_content":"包、模块、类→函数、变量\n\n**序列解包**\n```\n# a=1\n# b=2\n# c=3\n# d,e,f=4,5,6  \n```\n**定义一个函数**\n```\ndef damage(skill1,skill2): \n    damage1 = skill1*3\n    damage2 = skill2*2+10\n    return damage1,damage2 (不return，就是返回none)\n\n\nskill1s,skill2s=damage(2,3)\nprint(skill1s,skill2s)\n```\n```\ndef add(x,y):\n    result=x+y\n    return result\n    \ndef print_code(code):\n    print(code)\n    return\n\na=add(1,2)\nprint_code('python')\nprint(a)\n```\n**函数参数**\n```\ndef print_student_files(name, gender,age,adress):\n    print(\"I'm \"+name)\n    print(\"I'm \"+age+'years old')\n    print(\"I'm \"+ gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files('weilai','man','18','hubei')\n\ndef print_student_files1(name, gender='man',age=18,adress='hubei'):\n    print(\"I'm \"+name)\n    print(\"I'm \"+str(age)+ 'years old')\n    print(\"I'm \"+gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files1('weilai','woman',18,'hubei')\n#重点：\n#1）必须参数:形参(例如name)，实参('weilai','man',18,'hubei')\n#2）关键字参数\n#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数\n# 注意事项:1、形参没有给默认值的，函数调用时得给一个实参\n#         2、非默认参数不能放在默认参数之后（调用时，同理）\n#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）\n#         4、给了默认参数，函数调用时优先使用实参\n```\n**import**\n```\nimport _init_\nprint(_init_.b)\n\n# 注意事项：import 与 from import\n#         1）如 print t包C7.py中的a\n#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）\n#         等价于from t import c7.a ~print（c7.a）\n#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）\n\n\n#         3）包和模块不会被重复导入\n        # 4）避免循环导入\n        # 5）from t.c7 import * (导入C7中所有的变量)\n        # 6）from t.c7 impor _all_=['a','c'] (导入C7中'a','c'两个变量） \n```\n**if**\n```\nmood=True \nif mood:\n    print('go to left')\nelse :\n    print('go to right')\n```\n```\na=1\nb=2\nc=3\nd,e,f=4,5,6   #序列解包\nif d<a:\n    print('go to left')\nelif d<b:\n    print('go to left')\nelif d<c:\n    print('go to left')\nelif d<e:\n    print('go to left')\n```\n\n**for**\n```\na=[1,2,3,4,5]\nfor x in a:\n    if x==3:\n        break \n    print(x)\n\n    #     continue\n    # print(x)\n\na = [['apple','orange','banana'],(1,2,3)]\nfor x in a:\n    for y in x: \n        print(y)\n    print(x)\n\n\nfor x in range(0,10):\n    print(x)\nfor x in range(0,10,2):\n    print(x)\n```\n 注意事项：\n        1)break和continue区别：break到3就停止，continue跳过3继续\n       2）注意print()函数的位置，对结果的影响\n       3）递归用while，遍历用for\n","source":"_posts/python基础/python项目的组织结构.md","raw":"---\ntitle: (5) python项目的组织结构\ndate: 2018-11-14 21:59:11\ntags:\ncategories: python基础\n---\n包、模块、类→函数、变量\n\n**序列解包**\n```\n# a=1\n# b=2\n# c=3\n# d,e,f=4,5,6  \n```\n**定义一个函数**\n```\ndef damage(skill1,skill2): \n    damage1 = skill1*3\n    damage2 = skill2*2+10\n    return damage1,damage2 (不return，就是返回none)\n\n\nskill1s,skill2s=damage(2,3)\nprint(skill1s,skill2s)\n```\n```\ndef add(x,y):\n    result=x+y\n    return result\n    \ndef print_code(code):\n    print(code)\n    return\n\na=add(1,2)\nprint_code('python')\nprint(a)\n```\n**函数参数**\n```\ndef print_student_files(name, gender,age,adress):\n    print(\"I'm \"+name)\n    print(\"I'm \"+age+'years old')\n    print(\"I'm \"+ gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files('weilai','man','18','hubei')\n\ndef print_student_files1(name, gender='man',age=18,adress='hubei'):\n    print(\"I'm \"+name)\n    print(\"I'm \"+str(age)+ 'years old')\n    print(\"I'm \"+gender)\n    print(\"I'm living in \"+adress)\n\nprint_student_files1('weilai','woman',18,'hubei')\n#重点：\n#1）必须参数:形参(例如name)，实参('weilai','man',18,'hubei')\n#2）关键字参数\n#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数\n# 注意事项:1、形参没有给默认值的，函数调用时得给一个实参\n#         2、非默认参数不能放在默认参数之后（调用时，同理）\n#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）\n#         4、给了默认参数，函数调用时优先使用实参\n```\n**import**\n```\nimport _init_\nprint(_init_.b)\n\n# 注意事项：import 与 from import\n#         1）如 print t包C7.py中的a\n#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）\n#         等价于from t import c7.a ~print（c7.a）\n#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）\n\n\n#         3）包和模块不会被重复导入\n        # 4）避免循环导入\n        # 5）from t.c7 import * (导入C7中所有的变量)\n        # 6）from t.c7 impor _all_=['a','c'] (导入C7中'a','c'两个变量） \n```\n**if**\n```\nmood=True \nif mood:\n    print('go to left')\nelse :\n    print('go to right')\n```\n```\na=1\nb=2\nc=3\nd,e,f=4,5,6   #序列解包\nif d<a:\n    print('go to left')\nelif d<b:\n    print('go to left')\nelif d<c:\n    print('go to left')\nelif d<e:\n    print('go to left')\n```\n\n**for**\n```\na=[1,2,3,4,5]\nfor x in a:\n    if x==3:\n        break \n    print(x)\n\n    #     continue\n    # print(x)\n\na = [['apple','orange','banana'],(1,2,3)]\nfor x in a:\n    for y in x: \n        print(y)\n    print(x)\n\n\nfor x in range(0,10):\n    print(x)\nfor x in range(0,10,2):\n    print(x)\n```\n 注意事项：\n        1)break和continue区别：break到3就停止，continue跳过3继续\n       2）注意print()函数的位置，对结果的影响\n       3）递归用while，遍历用for\n","slug":"python基础/python项目的组织结构","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p59005ttssadqm264m0","content":"<p>包、模块、类→函数、变量</p>\n<p><strong>序列解包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a=1</span><br><span class=\"line\"># b=2</span><br><span class=\"line\"># c=3</span><br><span class=\"line\"># d,e,f=4,5,6</span><br></pre></td></tr></table></figure></p>\n<p><strong>定义一个函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def damage(skill1,skill2): </span><br><span class=\"line\">    damage1 = skill1*3</span><br><span class=\"line\">    damage2 = skill2*2+10</span><br><span class=\"line\">    return damage1,damage2 (不return，就是返回none)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">skill1s,skill2s=damage(2,3)</span><br><span class=\"line\">print(skill1s,skill2s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">    </span><br><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">a=add(1,2)</span><br><span class=\"line\">print_code(&apos;python&apos;)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p><strong>函数参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_student_files(name, gender,age,adress):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+age+&apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+ gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files(&apos;weilai&apos;,&apos;man&apos;,&apos;18&apos;,&apos;hubei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def print_student_files1(name, gender=&apos;man&apos;,age=18,adress=&apos;hubei&apos;):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+str(age)+ &apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files1(&apos;weilai&apos;,&apos;woman&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#重点：</span><br><span class=\"line\">#1）必须参数:形参(例如name)，实参(&apos;weilai&apos;,&apos;man&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#2）关键字参数</span><br><span class=\"line\">#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数</span><br><span class=\"line\"># 注意事项:1、形参没有给默认值的，函数调用时得给一个实参</span><br><span class=\"line\">#         2、非默认参数不能放在默认参数之后（调用时，同理）</span><br><span class=\"line\">#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）</span><br><span class=\"line\">#         4、给了默认参数，函数调用时优先使用实参</span><br></pre></td></tr></table></figure></p>\n<p><strong>import</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _init_</span><br><span class=\"line\">print(_init_.b)</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意事项：import 与 from import</span><br><span class=\"line\">#         1）如 print t包C7.py中的a</span><br><span class=\"line\">#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）</span><br><span class=\"line\">#         等价于from t import c7.a ~print（c7.a）</span><br><span class=\"line\">#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#         3）包和模块不会被重复导入</span><br><span class=\"line\">        # 4）避免循环导入</span><br><span class=\"line\">        # 5）from t.c7 import * (导入C7中所有的变量)</span><br><span class=\"line\">        # 6）from t.c7 impor _all_=[&apos;a&apos;,&apos;c&apos;] (导入C7中&apos;a&apos;,&apos;c&apos;两个变量）</span><br></pre></td></tr></table></figure></p>\n<p><strong>if</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mood=True </span><br><span class=\"line\">if mood:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">else :</span><br><span class=\"line\">    print(&apos;go to right&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\">c=3</span><br><span class=\"line\">d,e,f=4,5,6   #序列解包</span><br><span class=\"line\">if d&lt;a:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;b:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;c:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;e:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>for</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    if x==3:</span><br><span class=\"line\">        break </span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    #     continue</span><br><span class=\"line\">    # print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [[&apos;apple&apos;,&apos;orange&apos;,&apos;banana&apos;],(1,2,3)]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    for y in x: </span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for x in range(0,10):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">for x in range(0,10,2):</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure></p>\n<p> 注意事项：<br>        1)break和continue区别：break到3就停止，continue跳过3继续<br>       2）注意print()函数的位置，对结果的影响<br>       3）递归用while，遍历用for</p>\n","site":{"data":{}},"excerpt":"","more":"<p>包、模块、类→函数、变量</p>\n<p><strong>序列解包</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a=1</span><br><span class=\"line\"># b=2</span><br><span class=\"line\"># c=3</span><br><span class=\"line\"># d,e,f=4,5,6</span><br></pre></td></tr></table></figure></p>\n<p><strong>定义一个函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def damage(skill1,skill2): </span><br><span class=\"line\">    damage1 = skill1*3</span><br><span class=\"line\">    damage2 = skill2*2+10</span><br><span class=\"line\">    return damage1,damage2 (不return，就是返回none)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">skill1s,skill2s=damage(2,3)</span><br><span class=\"line\">print(skill1s,skill2s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">    </span><br><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\">a=add(1,2)</span><br><span class=\"line\">print_code(&apos;python&apos;)</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p><strong>函数参数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_student_files(name, gender,age,adress):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+age+&apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+ gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files(&apos;weilai&apos;,&apos;man&apos;,&apos;18&apos;,&apos;hubei&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def print_student_files1(name, gender=&apos;man&apos;,age=18,adress=&apos;hubei&apos;):</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+name)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+str(age)+ &apos;years old&apos;)</span><br><span class=\"line\">    print(&quot;I&apos;m &quot;+gender)</span><br><span class=\"line\">    print(&quot;I&apos;m living in &quot;+adress)</span><br><span class=\"line\"></span><br><span class=\"line\">print_student_files1(&apos;weilai&apos;,&apos;woman&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#重点：</span><br><span class=\"line\">#1）必须参数:形参(例如name)，实参(&apos;weilai&apos;,&apos;man&apos;,18,&apos;hubei&apos;)</span><br><span class=\"line\">#2）关键字参数</span><br><span class=\"line\">#3)默认参数：大多数情况下，函数的参数选取的的是一种默认值，可选用默认参数</span><br><span class=\"line\"># 注意事项:1、形参没有给默认值的，函数调用时得给一个实参</span><br><span class=\"line\">#         2、非默认参数不能放在默认参数之后（调用时，同理）</span><br><span class=\"line\">#         3、参数顺序得与默认参数顺序相同（关键字参数有时，可不遵守顺序）</span><br><span class=\"line\">#         4、给了默认参数，函数调用时优先使用实参</span><br></pre></td></tr></table></figure></p>\n<p><strong>import</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _init_</span><br><span class=\"line\">print(_init_.b)</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意事项：import 与 from import</span><br><span class=\"line\">#         1）如 print t包C7.py中的a</span><br><span class=\"line\">#         import t.c7 ~ print（t.c7.a）   等价于from t.c7 import a ~print（a）</span><br><span class=\"line\">#         等价于from t import c7.a ~print（c7.a）</span><br><span class=\"line\">#         2)import t.c7 ~ print（t.c7.a） 等价于import t.c7 as m ~print（m.a）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#         3）包和模块不会被重复导入</span><br><span class=\"line\">        # 4）避免循环导入</span><br><span class=\"line\">        # 5）from t.c7 import * (导入C7中所有的变量)</span><br><span class=\"line\">        # 6）from t.c7 impor _all_=[&apos;a&apos;,&apos;c&apos;] (导入C7中&apos;a&apos;,&apos;c&apos;两个变量）</span><br></pre></td></tr></table></figure></p>\n<p><strong>if</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mood=True </span><br><span class=\"line\">if mood:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">else :</span><br><span class=\"line\">    print(&apos;go to right&apos;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\">c=3</span><br><span class=\"line\">d,e,f=4,5,6   #序列解包</span><br><span class=\"line\">if d&lt;a:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;b:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;c:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br><span class=\"line\">elif d&lt;e:</span><br><span class=\"line\">    print(&apos;go to left&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>for</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    if x==3:</span><br><span class=\"line\">        break </span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    #     continue</span><br><span class=\"line\">    # print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">a = [[&apos;apple&apos;,&apos;orange&apos;,&apos;banana&apos;],(1,2,3)]</span><br><span class=\"line\">for x in a:</span><br><span class=\"line\">    for y in x: </span><br><span class=\"line\">        print(y)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for x in range(0,10):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">for x in range(0,10,2):</span><br><span class=\"line\">    print(x)</span><br></pre></td></tr></table></figure></p>\n<p> 注意事项：<br>        1)break和continue区别：break到3就停止，continue跳过3继续<br>       2）注意print()函数的位置，对结果的影响<br>       3）递归用while，遍历用for</p>\n"},{"title":"(16) python补充","date":"2018-11-14T14:01:49.000Z","_content":"```\nnum2 = 100\nsum1 = lambda num1 : num1 + num2 \nnum2 = 10000\nsum2 = lambda num1 : num1 + num2 \n\nprint( sum1( 1 ) )#10001\nprint( sum2( 1 ) )#10001\n```\nlambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。\n**打印乘法表**\n**占位符**\n```\n#方法1\nfor i in range(1, 10):\n    for j in range(1, i+1):\n # end='' 意思是末尾不换行，加空格\n        print('{}x{}={}\\t'.format(i, j, i*j), end='') \n    print()\n\n#方法2\nfor m in range(1, 10):\n    for n in range(1, m+1):\n        print('%d*%d=%d\\t'%(n,m,n*m), end='')\n \n    print()\n```\n**while 与for (待补充)**\n\n\n\n**从键盘获取输入信息：input**\n在 Python 中可以使用 input 函数从键盘等待用户的输入\n用户输入的 任何内容 Python 都认为是一个 字符串\n\n**格式化输出：print**\n如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符\n% 被称为 格式化操作符，专门用于处理字符串中的格式\n包含 % 的字符串，被称为 格式化字符串\n% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符\n>格式化字符   含义\n%s\t   字符串\n%d\t   有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全\n%f\t  浮点数，%.2f 表示小数点后只显示两位\n%%\t  输出 %\n\n**随机数生成**\n```\nimport random\n#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数\n#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b\n\nrandom.randint(12, 20)  # 生成的随机数n: 12 <= n <= 20   \nrandom.randint(20, 20)  # 结果永远是 20   \nrandom.randint(20, 10)  # 该语句是错误的，下限必须小于上限。\n```\n随机数的小游戏\n\n```\nimport random\n\n# 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）\nplayer = int(input(\"请输入您要出的拳 石头（1）／剪刀（2）／布（3）：\"))\n\n# 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能\ncomputer = random.randint(1, 3)\n\nprint(\"玩家选择的拳头是 %d - 电脑出的拳是 %d\" % (player, computer))\n\n# 比较胜负\n# 1 石头 胜 剪刀\n# 2 剪刀 胜 布\n# 3 布 胜 石头\n# if (()\n#        or ()\n#        or ()):\nif ((player == 1 and computer == 2)\n        or (player == 2 and computer == 3)\n        or (player == 3 and computer == 1)):\n\n    print(\"欧耶，电脑弱爆了！\")\n# 平局\nelif player == computer:\n    print(\"真是心有灵犀啊，再来一盘\")\n# 其他的情况就是电脑获胜\nelse:\n    print(\"不服气，我们决战到天明！\")\n```\n```\nimport random\nguess_list = [\"石头\", \"剪刀\", \"布\"]\nwin_combination = [[\"布\", \"石头\"], [\"石头\", \"剪刀\"], [\"剪刀\", \"布\"]]\n\nwhile True:\n    computer = random.choice(guess_list)\n    people = input('请输入：石头,剪刀,布\\n').strip()\n    if people not in guess_list:\n        continue\n    elif computer == people:\n        print (\"平手，再玩一次！\")\n    elif [computer, people] in win_combination:\n        print (\"电脑获胜，再玩，人获胜才能退出！\")\n    else:\n        print (\"人获胜！\")\n        break\n```\n**函数**\n```    \ndef print_code(code):\n    print(code)\n    #return None\nprint_code('python')  # python\n\ndef add(x,y):\n    result=x+y\n    return result\na = add(1,2)\nprint(a)  # 3\n\ndef add1(x,y):\n    result = x + y\n    print(result)\nadd1(1,2)  # 3\n\ndef add2(x,y):\n    result = x + y\n    print('%d + %d = %d'%(x,y,x+y))\nadd2(1,2)  # 1 + 2 = 3\n```\n####多值参数\n有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。\n\n**python 中有 两种 多值参数：**\n>参数名前增加 一个 * 可以接收 元组\n参数名前增加 两个 ** 可以接收 字典\n\n**一般在给多值参数命名时，习惯使用以下两个名字**\n>*args —— 存放 元组 参数，前面有一个 *\n**kwargs —— 存放 字典 参数，前面有两个 **\n\n```\ndef demo(num, *args, **kwargs):\n\n    print(num)\n    print(args)\n    print(kwargs)\n\n\ndemo(1, 2, 3, 4, 5, name=\"小明\", age=18, gender=True)\n#1\n#(2, 3, 4, 5)\n#{'name': '小明', 'age': 18, 'gender': True}\n\ndemo(1,(2,3,4,5),{\"name\":\"小明\", \"age\":18, \"gender\":True})\n#1\n#((2, 3, 4, 5), {'name': '小明', 'age': 18, 'gender': True})\n#{}\n\ndemo(1,(2,3,4,5), name=\"小明\", age=18, gender=True)\n#1\n#((2, 3, 4, 5),)\n#{'name': '小明', 'age': 18, 'gender': True}\n```\n**元组和字典的拆包**\n在调用带有多值参数的函数时，如果希望：\n将一个 元组变量，直接传递给 args\n将一个 字典变量，直接传递给 kwargs\n就可以使用 拆包，简化参数的传递，拆包 的方式是：\n在 元组变量前，增加 一个 *\n在 字典变量前，增加 两个 *\n```\ndef demo(*args, **kwargs):\n\n    print(args)\n    print(kwargs)\n\n# 需要将一个元组变量/字典变量传递给函数对应的参数\ngl_nums = (1, 2, 3)\ngl_xiaoming = {\"name\": \"小明\", \"age\": 18}\n\n# 会把 num_tuple 和 xiaoming 作为元组传递个 args\ndemo(gl_nums, gl_xiaoming)\n#((1, 2, 3), {'name': '小明', 'age': 18})\n#{}\ndemo(*gl_nums, **gl_xiaoming)\n#(1, 2, 3)\n#{'name': '小明', 'age': 18}\n```\n\n**函数的返回值**\n```\n# Python 专有，利用元组交换两个变量的值\na, b = b, a\n```\n\n\n#面向对象(补充)\n","source":"_posts/python基础/python补充.md","raw":"\n---\ntitle: (16) python补充\ndate: 2018-11-14 22:01:49\ntags:\ncategories: python基础\n---\n```\nnum2 = 100\nsum1 = lambda num1 : num1 + num2 \nnum2 = 10000\nsum2 = lambda num1 : num1 + num2 \n\nprint( sum1( 1 ) )#10001\nprint( sum2( 1 ) )#10001\n```\nlambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。\n**打印乘法表**\n**占位符**\n```\n#方法1\nfor i in range(1, 10):\n    for j in range(1, i+1):\n # end='' 意思是末尾不换行，加空格\n        print('{}x{}={}\\t'.format(i, j, i*j), end='') \n    print()\n\n#方法2\nfor m in range(1, 10):\n    for n in range(1, m+1):\n        print('%d*%d=%d\\t'%(n,m,n*m), end='')\n \n    print()\n```\n**while 与for (待补充)**\n\n\n\n**从键盘获取输入信息：input**\n在 Python 中可以使用 input 函数从键盘等待用户的输入\n用户输入的 任何内容 Python 都认为是一个 字符串\n\n**格式化输出：print**\n如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符\n% 被称为 格式化操作符，专门用于处理字符串中的格式\n包含 % 的字符串，被称为 格式化字符串\n% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符\n>格式化字符   含义\n%s\t   字符串\n%d\t   有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全\n%f\t  浮点数，%.2f 表示小数点后只显示两位\n%%\t  输出 %\n\n**随机数生成**\n```\nimport random\n#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数\n#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b\n\nrandom.randint(12, 20)  # 生成的随机数n: 12 <= n <= 20   \nrandom.randint(20, 20)  # 结果永远是 20   \nrandom.randint(20, 10)  # 该语句是错误的，下限必须小于上限。\n```\n随机数的小游戏\n\n```\nimport random\n\n# 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）\nplayer = int(input(\"请输入您要出的拳 石头（1）／剪刀（2）／布（3）：\"))\n\n# 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能\ncomputer = random.randint(1, 3)\n\nprint(\"玩家选择的拳头是 %d - 电脑出的拳是 %d\" % (player, computer))\n\n# 比较胜负\n# 1 石头 胜 剪刀\n# 2 剪刀 胜 布\n# 3 布 胜 石头\n# if (()\n#        or ()\n#        or ()):\nif ((player == 1 and computer == 2)\n        or (player == 2 and computer == 3)\n        or (player == 3 and computer == 1)):\n\n    print(\"欧耶，电脑弱爆了！\")\n# 平局\nelif player == computer:\n    print(\"真是心有灵犀啊，再来一盘\")\n# 其他的情况就是电脑获胜\nelse:\n    print(\"不服气，我们决战到天明！\")\n```\n```\nimport random\nguess_list = [\"石头\", \"剪刀\", \"布\"]\nwin_combination = [[\"布\", \"石头\"], [\"石头\", \"剪刀\"], [\"剪刀\", \"布\"]]\n\nwhile True:\n    computer = random.choice(guess_list)\n    people = input('请输入：石头,剪刀,布\\n').strip()\n    if people not in guess_list:\n        continue\n    elif computer == people:\n        print (\"平手，再玩一次！\")\n    elif [computer, people] in win_combination:\n        print (\"电脑获胜，再玩，人获胜才能退出！\")\n    else:\n        print (\"人获胜！\")\n        break\n```\n**函数**\n```    \ndef print_code(code):\n    print(code)\n    #return None\nprint_code('python')  # python\n\ndef add(x,y):\n    result=x+y\n    return result\na = add(1,2)\nprint(a)  # 3\n\ndef add1(x,y):\n    result = x + y\n    print(result)\nadd1(1,2)  # 3\n\ndef add2(x,y):\n    result = x + y\n    print('%d + %d = %d'%(x,y,x+y))\nadd2(1,2)  # 1 + 2 = 3\n```\n####多值参数\n有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。\n\n**python 中有 两种 多值参数：**\n>参数名前增加 一个 * 可以接收 元组\n参数名前增加 两个 ** 可以接收 字典\n\n**一般在给多值参数命名时，习惯使用以下两个名字**\n>*args —— 存放 元组 参数，前面有一个 *\n**kwargs —— 存放 字典 参数，前面有两个 **\n\n```\ndef demo(num, *args, **kwargs):\n\n    print(num)\n    print(args)\n    print(kwargs)\n\n\ndemo(1, 2, 3, 4, 5, name=\"小明\", age=18, gender=True)\n#1\n#(2, 3, 4, 5)\n#{'name': '小明', 'age': 18, 'gender': True}\n\ndemo(1,(2,3,4,5),{\"name\":\"小明\", \"age\":18, \"gender\":True})\n#1\n#((2, 3, 4, 5), {'name': '小明', 'age': 18, 'gender': True})\n#{}\n\ndemo(1,(2,3,4,5), name=\"小明\", age=18, gender=True)\n#1\n#((2, 3, 4, 5),)\n#{'name': '小明', 'age': 18, 'gender': True}\n```\n**元组和字典的拆包**\n在调用带有多值参数的函数时，如果希望：\n将一个 元组变量，直接传递给 args\n将一个 字典变量，直接传递给 kwargs\n就可以使用 拆包，简化参数的传递，拆包 的方式是：\n在 元组变量前，增加 一个 *\n在 字典变量前，增加 两个 *\n```\ndef demo(*args, **kwargs):\n\n    print(args)\n    print(kwargs)\n\n# 需要将一个元组变量/字典变量传递给函数对应的参数\ngl_nums = (1, 2, 3)\ngl_xiaoming = {\"name\": \"小明\", \"age\": 18}\n\n# 会把 num_tuple 和 xiaoming 作为元组传递个 args\ndemo(gl_nums, gl_xiaoming)\n#((1, 2, 3), {'name': '小明', 'age': 18})\n#{}\ndemo(*gl_nums, **gl_xiaoming)\n#(1, 2, 3)\n#{'name': '小明', 'age': 18}\n```\n\n**函数的返回值**\n```\n# Python 专有，利用元组交换两个变量的值\na, b = b, a\n```\n\n\n#面向对象(补充)\n","slug":"python基础/python补充","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5a005utssaodojeqwb","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num2 = 100</span><br><span class=\"line\">sum1 = lambda num1 : num1 + num2 </span><br><span class=\"line\">num2 = 10000</span><br><span class=\"line\">sum2 = lambda num1 : num1 + num2 </span><br><span class=\"line\"></span><br><span class=\"line\">print( sum1( 1 ) )#10001</span><br><span class=\"line\">print( sum2( 1 ) )#10001</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。<br><strong>打印乘法表</strong><br><strong>占位符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方法1</span><br><span class=\"line\">for i in range(1, 10):</span><br><span class=\"line\">    for j in range(1, i+1):</span><br><span class=\"line\"> # end=&apos;&apos; 意思是末尾不换行，加空格</span><br><span class=\"line\">        print(&apos;&#123;&#125;x&#123;&#125;=&#123;&#125;\\t&apos;.format(i, j, i*j), end=&apos;&apos;) </span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">#方法2</span><br><span class=\"line\">for m in range(1, 10):</span><br><span class=\"line\">    for n in range(1, m+1):</span><br><span class=\"line\">        print(&apos;%d*%d=%d\\t&apos;%(n,m,n*m), end=&apos;&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p><strong>while 与for (待补充)</strong></p>\n<p><strong>从键盘获取输入信息：input</strong><br>在 Python 中可以使用 input 函数从键盘等待用户的输入<br>用户输入的 任何内容 Python 都认为是一个 字符串</p>\n<p><strong>格式化输出：print</strong><br>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符<br>% 被称为 格式化操作符，专门用于处理字符串中的格式<br>包含 % 的字符串，被称为 格式化字符串<br>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</p>\n<blockquote>\n<p>格式化字符   含义<br>%s       字符串<br>%d       有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全<br>%f      浮点数，%.2f 表示小数点后只显示两位<br>%%      输出 %</p>\n</blockquote>\n<p><strong>随机数生成</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数</span><br><span class=\"line\">#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b</span><br><span class=\"line\"></span><br><span class=\"line\">random.randint(12, 20)  # 生成的随机数n: 12 &lt;= n &lt;= 20   </span><br><span class=\"line\">random.randint(20, 20)  # 结果永远是 20   </span><br><span class=\"line\">random.randint(20, 10)  # 该语句是错误的，下限必须小于上限。</span><br></pre></td></tr></table></figure></p>\n<p>随机数的小游戏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span><br><span class=\"line\">player = int(input(&quot;请输入您要出的拳 石头（1）／剪刀（2）／布（3）：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能</span><br><span class=\"line\">computer = random.randint(1, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;玩家选择的拳头是 %d - 电脑出的拳是 %d&quot; % (player, computer))</span><br><span class=\"line\"></span><br><span class=\"line\"># 比较胜负</span><br><span class=\"line\"># 1 石头 胜 剪刀</span><br><span class=\"line\"># 2 剪刀 胜 布</span><br><span class=\"line\"># 3 布 胜 石头</span><br><span class=\"line\"># if (()</span><br><span class=\"line\">#        or ()</span><br><span class=\"line\">#        or ()):</span><br><span class=\"line\">if ((player == 1 and computer == 2)</span><br><span class=\"line\">        or (player == 2 and computer == 3)</span><br><span class=\"line\">        or (player == 3 and computer == 1)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;欧耶，电脑弱爆了！&quot;)</span><br><span class=\"line\"># 平局</span><br><span class=\"line\">elif player == computer:</span><br><span class=\"line\">    print(&quot;真是心有灵犀啊，再来一盘&quot;)</span><br><span class=\"line\"># 其他的情况就是电脑获胜</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不服气，我们决战到天明！&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">guess_list = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class=\"line\">win_combination = [[&quot;布&quot;, &quot;石头&quot;], [&quot;石头&quot;, &quot;剪刀&quot;], [&quot;剪刀&quot;, &quot;布&quot;]]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    computer = random.choice(guess_list)</span><br><span class=\"line\">    people = input(&apos;请输入：石头,剪刀,布\\n&apos;).strip()</span><br><span class=\"line\">    if people not in guess_list:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    elif computer == people:</span><br><span class=\"line\">        print (&quot;平手，再玩一次！&quot;)</span><br><span class=\"line\">    elif [computer, people] in win_combination:</span><br><span class=\"line\">        print (&quot;电脑获胜，再玩，人获胜才能退出！&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;人获胜！&quot;)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    #return None</span><br><span class=\"line\">print_code(&apos;python&apos;)  # python</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">a = add(1,2)</span><br><span class=\"line\">print(a)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add1(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">add1(1,2)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add2(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(&apos;%d + %d = %d&apos;%(x,y,x+y))</span><br><span class=\"line\">add2(1,2)  # 1 + 2 = 3</span><br></pre></td></tr></table></figure></p>\n<p>####多值参数<br>有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。</p>\n<p><strong>python 中有 两种 多值参数：</strong></p>\n<blockquote>\n<p>参数名前增加 一个 * 可以接收 元组<br>参数名前增加 两个 ** 可以接收 字典</p>\n</blockquote>\n<p><strong>一般在给多值参数命名时，习惯使用以下两个名字</strong></p>\n<blockquote>\n<p><em>args —— 存放 元组 参数，前面有一个 </em><br><strong>kwargs —— 存放 字典 参数，前面有两个 </strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(num, *args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo(1, 2, 3, 4, 5, name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#(2, 3, 4, 5)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5),&#123;&quot;name&quot;:&quot;小明&quot;, &quot;age&quot;:18, &quot;gender&quot;:True&#125;)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5), name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5),)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>元组和字典的拆包</strong><br>在调用带有多值参数的函数时，如果希望：<br>将一个 元组变量，直接传递给 args<br>将一个 字典变量，直接传递给 kwargs<br>就可以使用 拆包，简化参数的传递，拆包 的方式是：<br>在 元组变量前，增加 一个 <em><br>在 字典变量前，增加 两个 </em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(*args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"># 需要将一个元组变量/字典变量传递给函数对应的参数</span><br><span class=\"line\">gl_nums = (1, 2, 3)</span><br><span class=\"line\">gl_xiaoming = &#123;&quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><br><span class=\"line\">demo(gl_nums, gl_xiaoming)</span><br><span class=\"line\">#((1, 2, 3), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\">demo(*gl_nums, **gl_xiaoming)</span><br><span class=\"line\">#(1, 2, 3)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的返回值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python 专有，利用元组交换两个变量的值</span><br><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure></p>\n<p>#面向对象(补充)</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num2 = 100</span><br><span class=\"line\">sum1 = lambda num1 : num1 + num2 </span><br><span class=\"line\">num2 = 10000</span><br><span class=\"line\">sum2 = lambda num1 : num1 + num2 </span><br><span class=\"line\"></span><br><span class=\"line\">print( sum1( 1 ) )#10001</span><br><span class=\"line\">print( sum2( 1 ) )#10001</span><br></pre></td></tr></table></figure>\n<p>lambda 表达式中的 num2 是一个自由变量，在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的。<br><strong>打印乘法表</strong><br><strong>占位符</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方法1</span><br><span class=\"line\">for i in range(1, 10):</span><br><span class=\"line\">    for j in range(1, i+1):</span><br><span class=\"line\"> # end=&apos;&apos; 意思是末尾不换行，加空格</span><br><span class=\"line\">        print(&apos;&#123;&#125;x&#123;&#125;=&#123;&#125;\\t&apos;.format(i, j, i*j), end=&apos;&apos;) </span><br><span class=\"line\">    print()</span><br><span class=\"line\"></span><br><span class=\"line\">#方法2</span><br><span class=\"line\">for m in range(1, 10):</span><br><span class=\"line\">    for n in range(1, m+1):</span><br><span class=\"line\">        print(&apos;%d*%d=%d\\t&apos;%(n,m,n*m), end=&apos;&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure></p>\n<p><strong>while 与for (待补充)</strong></p>\n<p><strong>从键盘获取输入信息：input</strong><br>在 Python 中可以使用 input 函数从键盘等待用户的输入<br>用户输入的 任何内容 Python 都认为是一个 字符串</p>\n<p><strong>格式化输出：print</strong><br>如果希望输出文字信息的同时，一起输出 数据，就需要使用到 格式化操作符<br>% 被称为 格式化操作符，专门用于处理字符串中的格式<br>包含 % 的字符串，被称为 格式化字符串<br>% 和不同的 字符 连用，不同类型的数据 需要使用 不同的格式化字符</p>\n<blockquote>\n<p>格式化字符   含义<br>%s       字符串<br>%d       有符号十进制整数，%06d 表示输出的整数显示位数，不足的地方使用 0 补全<br>%f      浮点数，%.2f 表示小数点后只显示两位<br>%%      输出 %</p>\n</blockquote>\n<p><strong>随机数生成</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">#导入模块后，可以直接在 模块名称 后面敲一个 . 然后按 Tab 键，会提示该模块中包含的所有函数</span><br><span class=\"line\">#random.randint(a, b) ，返回 [a, b] 之间的整数，包含 a 和 b</span><br><span class=\"line\"></span><br><span class=\"line\">random.randint(12, 20)  # 生成的随机数n: 12 &lt;= n &lt;= 20   </span><br><span class=\"line\">random.randint(20, 20)  # 结果永远是 20   </span><br><span class=\"line\">random.randint(20, 10)  # 该语句是错误的，下限必须小于上限。</span><br></pre></td></tr></table></figure></p>\n<p>随机数的小游戏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span><br><span class=\"line\">player = int(input(&quot;请输入您要出的拳 石头（1）／剪刀（2）／布（3）：&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"># 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能</span><br><span class=\"line\">computer = random.randint(1, 3)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;玩家选择的拳头是 %d - 电脑出的拳是 %d&quot; % (player, computer))</span><br><span class=\"line\"></span><br><span class=\"line\"># 比较胜负</span><br><span class=\"line\"># 1 石头 胜 剪刀</span><br><span class=\"line\"># 2 剪刀 胜 布</span><br><span class=\"line\"># 3 布 胜 石头</span><br><span class=\"line\"># if (()</span><br><span class=\"line\">#        or ()</span><br><span class=\"line\">#        or ()):</span><br><span class=\"line\">if ((player == 1 and computer == 2)</span><br><span class=\"line\">        or (player == 2 and computer == 3)</span><br><span class=\"line\">        or (player == 3 and computer == 1)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;欧耶，电脑弱爆了！&quot;)</span><br><span class=\"line\"># 平局</span><br><span class=\"line\">elif player == computer:</span><br><span class=\"line\">    print(&quot;真是心有灵犀啊，再来一盘&quot;)</span><br><span class=\"line\"># 其他的情况就是电脑获胜</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;不服气，我们决战到天明！&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">guess_list = [&quot;石头&quot;, &quot;剪刀&quot;, &quot;布&quot;]</span><br><span class=\"line\">win_combination = [[&quot;布&quot;, &quot;石头&quot;], [&quot;石头&quot;, &quot;剪刀&quot;], [&quot;剪刀&quot;, &quot;布&quot;]]</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    computer = random.choice(guess_list)</span><br><span class=\"line\">    people = input(&apos;请输入：石头,剪刀,布\\n&apos;).strip()</span><br><span class=\"line\">    if people not in guess_list:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    elif computer == people:</span><br><span class=\"line\">        print (&quot;平手，再玩一次！&quot;)</span><br><span class=\"line\">    elif [computer, people] in win_combination:</span><br><span class=\"line\">        print (&quot;电脑获胜，再玩，人获胜才能退出！&quot;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;人获胜！&quot;)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n<p><strong>函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_code(code):</span><br><span class=\"line\">    print(code)</span><br><span class=\"line\">    #return None</span><br><span class=\"line\">print_code(&apos;python&apos;)  # python</span><br><span class=\"line\"></span><br><span class=\"line\">def add(x,y):</span><br><span class=\"line\">    result=x+y</span><br><span class=\"line\">    return result</span><br><span class=\"line\">a = add(1,2)</span><br><span class=\"line\">print(a)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add1(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\">add1(1,2)  # 3</span><br><span class=\"line\"></span><br><span class=\"line\">def add2(x,y):</span><br><span class=\"line\">    result = x + y</span><br><span class=\"line\">    print(&apos;%d + %d = %d&apos;%(x,y,x+y))</span><br><span class=\"line\">add2(1,2)  # 1 + 2 = 3</span><br></pre></td></tr></table></figure></p>\n<p>####多值参数<br>有时可能需要 一个函数 能够处理的参数 个数 是不确定的，这个时候，就可以使用 多值参数。</p>\n<p><strong>python 中有 两种 多值参数：</strong></p>\n<blockquote>\n<p>参数名前增加 一个 * 可以接收 元组<br>参数名前增加 两个 ** 可以接收 字典</p>\n</blockquote>\n<p><strong>一般在给多值参数命名时，习惯使用以下两个名字</strong></p>\n<blockquote>\n<p><em>args —— 存放 元组 参数，前面有一个 </em><br><strong>kwargs —— 存放 字典 参数，前面有两个 </strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(num, *args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo(1, 2, 3, 4, 5, name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#(2, 3, 4, 5)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5),&#123;&quot;name&quot;:&quot;小明&quot;, &quot;age&quot;:18, &quot;gender&quot;:True&#125;)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demo(1,(2,3,4,5), name=&quot;小明&quot;, age=18, gender=True)</span><br><span class=\"line\">#1</span><br><span class=\"line\">#((2, 3, 4, 5),)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18, &apos;gender&apos;: True&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>元组和字典的拆包</strong><br>在调用带有多值参数的函数时，如果希望：<br>将一个 元组变量，直接传递给 args<br>将一个 字典变量，直接传递给 kwargs<br>就可以使用 拆包，简化参数的传递，拆包 的方式是：<br>在 元组变量前，增加 一个 <em><br>在 字典变量前，增加 两个 </em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def demo(*args, **kwargs):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"># 需要将一个元组变量/字典变量传递给函数对应的参数</span><br><span class=\"line\">gl_nums = (1, 2, 3)</span><br><span class=\"line\">gl_xiaoming = &#123;&quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><br><span class=\"line\">demo(gl_nums, gl_xiaoming)</span><br><span class=\"line\">#((1, 2, 3), &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;)</span><br><span class=\"line\">#&#123;&#125;</span><br><span class=\"line\">demo(*gl_nums, **gl_xiaoming)</span><br><span class=\"line\">#(1, 2, 3)</span><br><span class=\"line\">#&#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 18&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数的返回值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python 专有，利用元组交换两个变量的值</span><br><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure></p>\n<p>#面向对象(补充)</p>\n"},{"title":"(19) 网络编程","date":"2018-11-14T14:07:26.000Z","_content":"\n\nPython进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。\n\n# TCP/IP 简介\n\n互联网上每个计算机的唯一标识就是IP地址，类似`123.123.123.123`。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。\n\n**IP协议负责把数据从一台计算机通过网络发送到另一台计算机。**\n数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。\n\nIPv4地址实际上是一个32位整数，以字符串表示的。\nIP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读\nIPv6地址全部长度128位(bit)，每16位为一个双字节。\n\n**TCP协议则是建立在IP协议之上的。**\nTCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。\n\n# socket\n是电脑网络中进程间数据流的端点\n\n主要分为UDP和TCP两种通信方式\n## TCP编程\nSocket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。\n\n\n\n大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。\n\n创建一个基于TCP连接的Socket，可以这样做：\n```\n# 导入socket库:\nimport socket\n\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.baidu.com', 80))\n```\n创建Socket时，`AF_INET`指定使用IPv4协议，如果要用更先进的IPv6，就指定为`AF_INET6`。`SOCK_STREAM`指定使用面向流的TCP协议，这样，一个`Socket`对象就创建成功，但是还没有建立连接。\n\n客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名`www.sina.com.cn`自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。\n\n因此，连接新浪服务器的代码如下：\n```\ns.connect(('www.baidu.com', 80))\n```\n注意参数是一个tuple，包含地址和端口号。\n\n建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：\n```\n# 发送数据:\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\n```\nTCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。\n\n发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：\n```\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n```\n接收数据时，调用`recv(max)`方法，一次最多接收指定的字节数，因此，在一个`while`循环中反复接收，直到`recv()`返回空数据，表示接收完毕，退出循环。\n\n当我们接收完数据后，调用`close()`方法关闭Socket，这样，一次完整的网络通信就结束了：\n```\n# 关闭连接:\ns.close()\n```\n接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：\n```\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\n# python3.x版本，网络数据的发送接受都是byte类型，需要解码\n# 把接收的数据写入文件:\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。\n```\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('www.baidu.com', 80))\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\nbuffer = []\nwhile True:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\ns.close()\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n# 服务器\n\n和客户端编程相比，服务器编程就要复杂一些。\n\n服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。\n\n所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。\n\n但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。\n\n我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上`Hello`再发回去。\n\n首先，创建一个基于IPv4和TCP协议的Socket：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用`0.0.0.0`绑定到所有的网络地址，还可以用`127.0.0.1`绑定到本机地址。`127.0.0.1`是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。\n\n端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用`9999`这个端口号。请注意，小于`1024`的端口号必须要有管理员权限才能绑定：\n\n```\n# 监听端口:\ns.bind(('127.0.0.1', 9999))\n```\n\n紧接着，调用`listen()`方法开始监听端口，传入的参数指定等待连接的最大数量：\n\n```\ns.listen(5)\nprint('Waiting for connection...')\n```\n\n接下来，服务器程序通过一个永久循环来接受来自客户端的连接，`accept()`会等待并返回一个客户端的连接:\n\n```\n# 不断循环，不断接受数据\nwhile True:\n    # 接受一个新连接:\n    sock, addr = s.accept()\n    # 创建新线程来处理TCP连接:\n    t = threading.Thread(target=tcplink, args=(sock, addr))\n    t.start()\n\n```\n\n每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：\n\n```\ndef tcplink(sock, addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n\n # 不断接受客服端发来的消息\n    while True:\n        data = sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':  # 退出\n            break\n        sock.send(('Hello, %s!' % data.decode('utf-8')).encode('utf-8'))  #处理客户端数据\n    sock.close()\n    print('Connection from %s:%s closed.' % addr)\n```\n\n连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上`Hello`再发送给客户端。如果客户端发送了`exit`字符串，就直接关闭连接。\n\n要测试这个服务器程序，我们还需要编写一个客户端程序：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('127.0.0.1', 9999))\n# 接收欢迎消息:\nprint(s.recv(1024).decode('utf-8'))\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n\n    # 发送数据:\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit')\ns.close()\n\n```\n\n我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。\n\n### 小结\n\n用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。\n\n同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。\n\n#UDP 编程\n\nTCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。\n\n使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。\n\n虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。\n\n我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# 绑定端口:\ns.bind(('127.0.0.1', 9999))\n\n```\n\n创建Socket时，`SOCK_DGRAM`指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用`listen()`方法，而是直接接收来自任何客户端的数据：\n\n```\nprint('Bind UDP on 9999...')\nwhile True:\n    # 接收数据:\n    data, addr = s.recvfrom(1024)\n    print('Received from %s:%s.' % addr)\n    s.sendto(b'Hello, %s!' % data, addr)\n\n```\n\n`recvfrom()`方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用`sendto()`就可以把数据用UDP发给客户端。\n\n注意这里省掉了多线程，因为这个例子很简单。\n\n客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用`connect()`，直接通过`sendto()`给服务器发数据：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n    # 发送数据:\n    s.sendto(data, ('127.0.0.1', 9999))\n    # 接收数据:\n    print(s.recv(1024).decode('utf-8'))\ns.close()\n\n```\n\n从服务器接收数据仍然调用`recv()`方法。\n\n仍然用两个命令行分别启动服务器和客户端测试，结果如下：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n\nUDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。\n","source":"_posts/python基础/python网络编程.md","raw":"---\ntitle: (19) 网络编程\ndate: 2018-11-14 22:07:26\ntags:\ncategories: python基础\n---\n\n\nPython进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。\n\n# TCP/IP 简介\n\n互联网上每个计算机的唯一标识就是IP地址，类似`123.123.123.123`。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。\n\n**IP协议负责把数据从一台计算机通过网络发送到另一台计算机。**\n数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。\n\nIPv4地址实际上是一个32位整数，以字符串表示的。\nIP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读\nIPv6地址全部长度128位(bit)，每16位为一个双字节。\n\n**TCP协议则是建立在IP协议之上的。**\nTCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。\n\n# socket\n是电脑网络中进程间数据流的端点\n\n主要分为UDP和TCP两种通信方式\n## TCP编程\nSocket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。\n\n\n\n大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。\n\n创建一个基于TCP连接的Socket，可以这样做：\n```\n# 导入socket库:\nimport socket\n\n# 创建一个socket:\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('www.baidu.com', 80))\n```\n创建Socket时，`AF_INET`指定使用IPv4协议，如果要用更先进的IPv6，就指定为`AF_INET6`。`SOCK_STREAM`指定使用面向流的TCP协议，这样，一个`Socket`对象就创建成功，但是还没有建立连接。\n\n客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名`www.sina.com.cn`自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。\n\n因此，连接新浪服务器的代码如下：\n```\ns.connect(('www.baidu.com', 80))\n```\n注意参数是一个tuple，包含地址和端口号。\n\n建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：\n```\n# 发送数据:\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\n```\nTCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。\n\n发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：\n```\n# 接收数据:\nbuffer = []\nwhile True:\n    # 每次最多接收1k字节:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\n```\n接收数据时，调用`recv(max)`方法，一次最多接收指定的字节数，因此，在一个`while`循环中反复接收，直到`recv()`返回空数据，表示接收完毕，退出循环。\n\n当我们接收完数据后，调用`close()`方法关闭Socket，这样，一次完整的网络通信就结束了：\n```\n# 关闭连接:\ns.close()\n```\n接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：\n```\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\n# python3.x版本，网络数据的发送接受都是byte类型，需要解码\n# 把接收的数据写入文件:\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。\n```\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('www.baidu.com', 80))\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n')\nbuffer = []\nwhile True:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b''.join(buffer)\ns.close()\nheader, html = data.split(b'\\r\\n\\r\\n', 1)\nprint(header.decode('utf-8'))\nwith open('baidu.html', 'wb') as f:\n    f.write(html)\n```\n# 服务器\n\n和客户端编程相比，服务器编程就要复杂一些。\n\n服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。\n\n所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。\n\n但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。\n\n我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上`Hello`再发回去。\n\n首先，创建一个基于IPv4和TCP协议的Socket：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```\n\n然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用`0.0.0.0`绑定到所有的网络地址，还可以用`127.0.0.1`绑定到本机地址。`127.0.0.1`是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。\n\n端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用`9999`这个端口号。请注意，小于`1024`的端口号必须要有管理员权限才能绑定：\n\n```\n# 监听端口:\ns.bind(('127.0.0.1', 9999))\n```\n\n紧接着，调用`listen()`方法开始监听端口，传入的参数指定等待连接的最大数量：\n\n```\ns.listen(5)\nprint('Waiting for connection...')\n```\n\n接下来，服务器程序通过一个永久循环来接受来自客户端的连接，`accept()`会等待并返回一个客户端的连接:\n\n```\n# 不断循环，不断接受数据\nwhile True:\n    # 接受一个新连接:\n    sock, addr = s.accept()\n    # 创建新线程来处理TCP连接:\n    t = threading.Thread(target=tcplink, args=(sock, addr))\n    t.start()\n\n```\n\n每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：\n\n```\ndef tcplink(sock, addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n\n # 不断接受客服端发来的消息\n    while True:\n        data = sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':  # 退出\n            break\n        sock.send(('Hello, %s!' % data.decode('utf-8')).encode('utf-8'))  #处理客户端数据\n    sock.close()\n    print('Connection from %s:%s closed.' % addr)\n```\n\n连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上`Hello`再发送给客户端。如果客户端发送了`exit`字符串，就直接关闭连接。\n\n要测试这个服务器程序，我们还需要编写一个客户端程序：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 建立连接:\ns.connect(('127.0.0.1', 9999))\n# 接收欢迎消息:\nprint(s.recv(1024).decode('utf-8'))\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n\n    # 发送数据:\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit')\ns.close()\n\n```\n\n我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。\n\n### 小结\n\n用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。\n\n同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。\n\n#UDP 编程\n\nTCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。\n\n使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。\n\n虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。\n\n我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# 绑定端口:\ns.bind(('127.0.0.1', 9999))\n\n```\n\n创建Socket时，`SOCK_DGRAM`指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用`listen()`方法，而是直接接收来自任何客户端的数据：\n\n```\nprint('Bind UDP on 9999...')\nwhile True:\n    # 接收数据:\n    data, addr = s.recvfrom(1024)\n    print('Received from %s:%s.' % addr)\n    s.sendto(b'Hello, %s!' % data, addr)\n\n```\n\n`recvfrom()`方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用`sendto()`就可以把数据用UDP发给客户端。\n\n注意这里省掉了多线程，因为这个例子很简单。\n\n客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用`connect()`，直接通过`sendto()`给服务器发数据：\n\n```\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfor data in [b'Michael', b'Tracy', b'Sarah']:\n    # 发送数据:\n    s.sendto(data, ('127.0.0.1', 9999))\n    # 接收数据:\n    print(s.recv(1024).decode('utf-8'))\ns.close()\n\n```\n\n从服务器接收数据仍然调用`recv()`方法。\n\n仍然用两个命令行分别启动服务器和客户端测试，结果如下：\n\n![client-server](http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 小结\n\nUDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。\n","slug":"python基础/python网络编程","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5b005vtssazepebgvu","content":"<p>Python进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。</p>\n<h1 id=\"TCP-IP-简介\"><a href=\"#TCP-IP-简介\" class=\"headerlink\" title=\"TCP/IP 简介\"></a>TCP/IP 简介</h1><p>互联网上每个计算机的唯一标识就是IP地址，类似<code>123.123.123.123</code>。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>\n<p><strong>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。</strong><br>数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>\n<p>IPv4地址实际上是一个32位整数，以字符串表示的。<br>IP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读<br>IPv6地址全部长度128位(bit)，每16位为一个双字节。</p>\n<p><strong>TCP协议则是建立在IP协议之上的。</strong><br>TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>\n<h1 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h1><p>是电脑网络中进程间数据流的端点</p>\n<p>主要分为UDP和TCP两种通信方式</p>\n<h2 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h2><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p>\n<p>大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>\n<p>创建一个基于TCP连接的Socket，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入socket库:</span><br><span class=\"line\">import socket</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个socket:</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>创建Socket时，<code>AF_INET</code>指定使用IPv4协议，如果要用更先进的IPv6，就指定为<code>AF_INET6</code>。<code>SOCK_STREAM</code>指定使用面向流的TCP协议，这样，一个<code>Socket</code>对象就创建成功，但是还没有建立连接。</p>\n<p>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名<code>www.sina.com.cn</code>自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>\n<p>因此，连接新浪服务器的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>注意参数是一个tuple，包含地址和端口号。</p>\n<p>建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送数据:</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>\n<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 接收数据:</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次最多接收1k字节:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br></pre></td></tr></table></figure></p>\n<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个<code>while</code>循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>\n<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭连接:</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\"># python3.x版本，网络数据的发送接受都是byte类型，需要解码</span><br><span class=\"line\"># 把接收的数据写入文件:</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<p>现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>和客户端编程相比，服务器编程就要复杂一些。</p>\n<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>\n<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</p>\n<p>但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p>\n<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上<code>Hello</code>再发回去。</p>\n<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<code>0.0.0.0</code>绑定到所有的网络地址，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>\n<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>9999</code>这个端口号。请注意，小于<code>1024</code>的端口号必须要有管理员权限才能绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>紧接着，调用<code>listen()</code>方法开始监听端口，传入的参数指定等待连接的最大数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen(5)</span><br><span class=\"line\">print(&apos;Waiting for connection...&apos;)</span><br></pre></td></tr></table></figure>\n<p>接下来，服务器程序通过一个永久循环来接受来自客户端的连接，<code>accept()</code>会等待并返回一个客户端的连接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不断循环，不断接受数据</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接受一个新连接:</span><br><span class=\"line\">    sock, addr = s.accept()</span><br><span class=\"line\">    # 创建新线程来处理TCP连接:</span><br><span class=\"line\">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tcplink(sock, addr):</span><br><span class=\"line\">    print(&apos;Accept new connection from %s:%s...&apos; % addr)</span><br><span class=\"line\">    sock.send(b&apos;Welcome!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 不断接受客服端发来的消息</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data = sock.recv(1024)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        if not data or data.decode(&apos;utf-8&apos;) == &apos;exit&apos;:  # 退出</span><br><span class=\"line\">            break</span><br><span class=\"line\">        sock.send((&apos;Hello, %s!&apos; % data.decode(&apos;utf-8&apos;)).encode(&apos;utf-8&apos;))  #处理客户端数据</span><br><span class=\"line\">    sock.close()</span><br><span class=\"line\">    print(&apos;Connection from %s:%s closed.&apos; % addr)</span><br></pre></td></tr></table></figure>\n<p>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上<code>Hello</code>再发送给客户端。如果客户端发送了<code>exit</code>字符串，就直接关闭连接。</p>\n<p>要测试这个服务器程序，我们还需要编写一个客户端程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\"># 接收欢迎消息:</span><br><span class=\"line\">print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\"></span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.send(data)</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.send(b&apos;exit&apos;)</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<p>需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>\n<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>\n<p>#UDP 编程</p>\n<p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>\n<p>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>\n<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>\n<p>我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"># 绑定端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>创建Socket时，<code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用<code>listen()</code>方法，而是直接接收来自任何客户端的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&apos;Bind UDP on 9999...&apos;)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    data, addr = s.recvfrom(1024)</span><br><span class=\"line\">    print(&apos;Received from %s:%s.&apos; % addr)</span><br><span class=\"line\">    s.sendto(b&apos;Hello, %s!&apos; % data, addr)</span><br></pre></td></tr></table></figure>\n<p><code>recvfrom()</code>方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>\n<p>注意这里省掉了多线程，因为这个例子很简单。</p>\n<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器发数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.sendto(data, (&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>从服务器接收数据仍然调用<code>recv()</code>方法。</p>\n<p>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>UDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。</p>\n<h1 id=\"TCP-IP-简介\"><a href=\"#TCP-IP-简介\" class=\"headerlink\" title=\"TCP/IP 简介\"></a>TCP/IP 简介</h1><p>互联网上每个计算机的唯一标识就是IP地址，类似<code>123.123.123.123</code>。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>\n<p><strong>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。</strong><br>数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>\n<p>IPv4地址实际上是一个32位整数，以字符串表示的。<br>IP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读<br>IPv6地址全部长度128位(bit)，每16位为一个双字节。</p>\n<p><strong>TCP协议则是建立在IP协议之上的。</strong><br>TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>\n<h1 id=\"socket\"><a href=\"#socket\" class=\"headerlink\" title=\"socket\"></a>socket</h1><p>是电脑网络中进程间数据流的端点</p>\n<p>主要分为UDP和TCP两种通信方式</p>\n<h2 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h2><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p>\n<p>大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>\n<p>创建一个基于TCP连接的Socket，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入socket库:</span><br><span class=\"line\">import socket</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个socket:</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>创建Socket时，<code>AF_INET</code>指定使用IPv4协议，如果要用更先进的IPv6，就指定为<code>AF_INET6</code>。<code>SOCK_STREAM</code>指定使用面向流的TCP协议，这样，一个<code>Socket</code>对象就创建成功，但是还没有建立连接。</p>\n<p>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名<code>www.sina.com.cn</code>自动转换到IP地址。80端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是25端口，FTP服务是21端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>\n<p>因此，连接新浪服务器的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br></pre></td></tr></table></figure></p>\n<p>注意参数是一个tuple，包含地址和端口号。</p>\n<p>建立TCP连接后，我们就可以向百度服务器发送请求，要求返回首页的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送数据:</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>\n<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收百度服务器返回的数据了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 接收数据:</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 每次最多接收1k字节:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br></pre></td></tr></table></figure></p>\n<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个<code>while</code>循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>\n<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭连接:</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure></p>\n<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\"># python3.x版本，网络数据的发送接受都是byte类型，需要解码</span><br><span class=\"line\"># 把接收的数据写入文件:</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<p>现在，只需要在浏览器中打开这个baidu.html文件，就可以看到百度的首页了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((&apos;www.baidu.com&apos;, 80))</span><br><span class=\"line\">s.send(b&apos;GET / HTTP/1.1\\r\\nHost: www.baidu.com\\r\\nConnection: close\\r\\n\\r\\n&apos;)</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    d = s.recv(1024)</span><br><span class=\"line\">    if d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">data = b&apos;&apos;.join(buffer)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">header, html = data.split(b&apos;\\r\\n\\r\\n&apos;, 1)</span><br><span class=\"line\">print(header.decode(&apos;utf-8&apos;))</span><br><span class=\"line\">with open(&apos;baidu.html&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">    f.write(html)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>和客户端编程相比，服务器编程就要复杂一些。</p>\n<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>\n<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</p>\n<p>但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p>\n<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上<code>Hello</code>再发回去。</p>\n<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>\n<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<code>0.0.0.0</code>绑定到所有的网络地址，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>\n<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>9999</code>这个端口号。请注意，小于<code>1024</code>的端口号必须要有管理员权限才能绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 监听端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>紧接着，调用<code>listen()</code>方法开始监听端口，传入的参数指定等待连接的最大数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.listen(5)</span><br><span class=\"line\">print(&apos;Waiting for connection...&apos;)</span><br></pre></td></tr></table></figure>\n<p>接下来，服务器程序通过一个永久循环来接受来自客户端的连接，<code>accept()</code>会等待并返回一个客户端的连接:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不断循环，不断接受数据</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接受一个新连接:</span><br><span class=\"line\">    sock, addr = s.accept()</span><br><span class=\"line\">    # 创建新线程来处理TCP连接:</span><br><span class=\"line\">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def tcplink(sock, addr):</span><br><span class=\"line\">    print(&apos;Accept new connection from %s:%s...&apos; % addr)</span><br><span class=\"line\">    sock.send(b&apos;Welcome!&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 不断接受客服端发来的消息</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data = sock.recv(1024)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        if not data or data.decode(&apos;utf-8&apos;) == &apos;exit&apos;:  # 退出</span><br><span class=\"line\">            break</span><br><span class=\"line\">        sock.send((&apos;Hello, %s!&apos; % data.decode(&apos;utf-8&apos;)).encode(&apos;utf-8&apos;))  #处理客户端数据</span><br><span class=\"line\">    sock.close()</span><br><span class=\"line\">    print(&apos;Connection from %s:%s closed.&apos; % addr)</span><br></pre></td></tr></table></figure>\n<p>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上<code>Hello</code>再发送给客户端。如果客户端发送了<code>exit</code>字符串，就直接关闭连接。</p>\n<p>要测试这个服务器程序，我们还需要编写一个客户端程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"># 建立连接:</span><br><span class=\"line\">s.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\"># 接收欢迎消息:</span><br><span class=\"line\">print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\"></span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.send(data)</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.send(b&apos;exit&apos;)</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-5801801638423f28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<p>需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>\n<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>\n<p>#UDP 编程</p>\n<p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>\n<p>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>\n<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>\n<p>我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"># 绑定端口:</span><br><span class=\"line\">s.bind((&apos;127.0.0.1&apos;, 9999))</span><br></pre></td></tr></table></figure>\n<p>创建Socket时，<code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用<code>listen()</code>方法，而是直接接收来自任何客户端的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&apos;Bind UDP on 9999...&apos;)</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    data, addr = s.recvfrom(1024)</span><br><span class=\"line\">    print(&apos;Received from %s:%s.&apos; % addr)</span><br><span class=\"line\">    s.sendto(b&apos;Hello, %s!&apos; % data, addr)</span><br></pre></td></tr></table></figure>\n<p><code>recvfrom()</code>方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>\n<p>注意这里省掉了多线程，因为这个例子很简单。</p>\n<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器发数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</span><br><span class=\"line\">    # 发送数据:</span><br><span class=\"line\">    s.sendto(data, (&apos;127.0.0.1&apos;, 9999))</span><br><span class=\"line\">    # 接收数据:</span><br><span class=\"line\">    print(s.recv(1024).decode(&apos;utf-8&apos;))</span><br><span class=\"line\">s.close()</span><br></pre></td></tr></table></figure>\n<p>从服务器接收数据仍然调用<code>recv()</code>方法。</p>\n<p>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/14597179-aacaa3f383b1c1f6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"client-server\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>UDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>\n"},{"title":"HTTP的基本原理","date":"2019-06-25T03:05:31.000Z","_content":"\n\n## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","source":"_posts/python练习/HTTP的基本原理.md","raw":"\n---\ntitle: HTTP的基本原理\ndate: 2019-06-25 11:05:31\ntags:\ncategories: flask\n---\n\n\n## 1. URL 与 URI\nURI : 统一资源标识符\n\nURL : 统一资源定位符\n\n(URN : 统一资源名称  只命名资源 而不指定如何定位资源)\n\nURL 是 URI 的子集 \n\n\n## 2. 超文本\nHypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。\n\n网页源代码 HTML 可以称之为超文本。 \n\n## 3. HTTP HTTPS\nHTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议\n\nHTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。\n1. 建立一个安全信息通道，来保证数据传输的安全。 \n2. 确认网站的真实性。\n\n## 4. HTTP 请求过程\n浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含\n页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。\n\n## 5. Request \n**Request 可分为四部分**\n1. Request Method (请求方式)\n2. Request URL （请求连接）\n3. Request Headers （请求头）\n4. Request Body （请求体）\n\n### 5.1 Request Method\n请求方式，常见有 **GET** , **POST**\n\n**GET** 请求参数会直接包含在URL里， （eg:https://www.baidu.com/s?wd=Python wd 就是要搜寻的关键字）\n\n**POST** 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）\n\n**GET** 请求提交的数据最多只有1024字节。\n\n**其他请求方式**\n\n1. HEAD\n2. PUT\n3. DELETE\n4. CONNECT\n5. OPTIONS\n6. TRACE\n\n### 5.2 Request URL\n\n**请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源**\n\n### 5.3 Request Headers\n \n**请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等**\n\n1. Accept : 请求报头域，用于指定客户端可接受的语言类型\n2. Accept-Language : 指定客户端可接受的语言类型\n3. Accept-Encoding : 指定客户端可接受的内容编码\n4. HOST : 用于指定请求资源的主机和端口号\n5. Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。\n6. Referer : 用来标识这个请求是从哪个页面发出来的\n7. User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）\n8. Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）\n\n### 5.4 Request Body \n\n**一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。**\n\n\n## 6. Response \n\n**由服务端返回给客服端。Response可以分为三部分**\n\n1. Request Status Code (响应状态码)\n2. Response Headers （响应头）\n3. Response Body （响应体）\n\n### 6.1 Request Status Code\n200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。\n\n**一般情况下**\n\n2开头 （请求成功）表示成功处理了请求的状态代码。\n\n3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n### 6.2 Response Headers\n**包含了服务器对请求的应答信息**\n\n部分信息\n\n1. date : 标识 Response 产生的时间\n2. Last-Modified : 指定资源的最后修改时间\n3. Content-Encoding ：指定 Response 内容的编码\n4. Server : 包含了服务器的信息\n5. Content-type ： 同Request\n6. Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。\n7. Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。\n\n\n\n### 6.3 Response Body\n\n**响应的正文数据都是在响应体中**\n（爬虫请求网页后要解析的数据就是解析响应体）\n\n在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取\n\n\n\n\n\n\n","slug":"python练习/HTTP的基本原理","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5d005wtssaibboevi9","content":"<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-URL-与-URI\"><a href=\"#1-URL-与-URI\" class=\"headerlink\" title=\"1. URL 与 URI\"></a>1. URL 与 URI</h2><p>URI : 统一资源标识符</p>\n<p>URL : 统一资源定位符</p>\n<p>(URN : 统一资源名称  只命名资源 而不指定如何定位资源)</p>\n<p>URL 是 URI 的子集 </p>\n<h2 id=\"2-超文本\"><a href=\"#2-超文本\" class=\"headerlink\" title=\"2. 超文本\"></a>2. 超文本</h2><p>Hypertext ,用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</p>\n<p>网页源代码 HTML 可以称之为超文本。 </p>\n<h2 id=\"3-HTTP-HTTPS\"><a href=\"#3-HTTP-HTTPS\" class=\"headerlink\" title=\"3. HTTP HTTPS\"></a>3. HTTP HTTPS</h2><p>HTTP : 超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议</p>\n<p>HTTPS ： 以安全为目标的 HTTP通道。即 HTTP 下加入 SSL 层。通过其传输的内容都经过 SSL 加密。</p>\n<ol>\n<li>建立一个安全信息通道，来保证数据传输的安全。 </li>\n<li>确认网站的真实性。</li>\n</ol>\n<h2 id=\"4-HTTP-请求过程\"><a href=\"#4-HTTP-请求过程\" class=\"headerlink\" title=\"4. HTTP 请求过程\"></a>4. HTTP 请求过程</h2><p>浏览器（客户端） 输入 URL ,向服务器发送一个 Request (请求), 服务器收到 Request 后，返回对应的一个 Response (响应), Response 中包含<br>页面的源代码等内容，浏览器再进行解析，便将网页呈现出来。</p>\n<h2 id=\"5-Request\"><a href=\"#5-Request\" class=\"headerlink\" title=\"5. Request\"></a>5. Request</h2><p><strong>Request 可分为四部分</strong></p>\n<ol>\n<li>Request Method (请求方式)</li>\n<li>Request URL （请求连接）</li>\n<li>Request Headers （请求头）</li>\n<li>Request Body （请求体）</li>\n</ol>\n<h3 id=\"5-1-Request-Method\"><a href=\"#5-1-Request-Method\" class=\"headerlink\" title=\"5.1 Request Method\"></a>5.1 Request Method</h3><p>请求方式，常见有 <strong>GET</strong> , <strong>POST</strong></p>\n<p><strong>GET</strong> 请求参数会直接包含在URL里， （eg:<a href=\"https://www.baidu.com/s?wd=Python\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/s?wd=Python</a> wd 就是要搜寻的关键字）</p>\n<p><strong>POST</strong> 一般用于表单提交发起，数据常以 Form Data 即表单形式传输，不会体现在 URL 中。（包含在 Request Body 中）</p>\n<p><strong>GET</strong> 请求提交的数据最多只有1024字节。</p>\n<p><strong>其他请求方式</strong></p>\n<ol>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ol>\n<h3 id=\"5-2-Request-URL\"><a href=\"#5-2-Request-URL\" class=\"headerlink\" title=\"5.2 Request URL\"></a>5.2 Request URL</h3><p><strong>请求的网址，即统一资源定位符，可以唯一确定我们想请求的资源</strong></p>\n<h3 id=\"5-3-Request-Headers\"><a href=\"#5-3-Request-Headers\" class=\"headerlink\" title=\"5.3 Request Headers\"></a>5.3 Request Headers</h3><p><strong>请求头， 用来说明服务器要使用的附加信息，比较重要的有Cookie,Refer,User-Agent等</strong></p>\n<ol>\n<li>Accept : 请求报头域，用于指定客户端可接受的语言类型</li>\n<li>Accept-Language : 指定客户端可接受的语言类型</li>\n<li>Accept-Encoding : 指定客户端可接受的内容编码</li>\n<li>HOST : 用于指定请求资源的主机和端口号</li>\n<li>Cookie : 是网站为了辨别用户进行 Session 跟踪而储存在用户本地的数据。</li>\n<li>Referer : 用来标识这个请求是从哪个页面发出来的</li>\n<li>User-Agent : UA,特殊的字符串头，使得服务器能够识别客户使用的操作系统及版本、浏览器及版本等信息。（爬虫时可加次信息伪装成浏览器）</li>\n<li>Content-type : 互联网媒体类型，在 HTTP 协议消息中，使用它来表示具体请求中的媒体类型信息。（Application/josn ,image/gif, text/html等）</li>\n</ol>\n<h3 id=\"5-4-Request-Body\"><a href=\"#5-4-Request-Body\" class=\"headerlink\" title=\"5.4 Request Body\"></a>5.4 Request Body</h3><p><strong>一般承载的内容为 POST 请求中的Form Data , 而对于 GET 请求  Request Body 则为空。</strong></p>\n<h2 id=\"6-Response\"><a href=\"#6-Response\" class=\"headerlink\" title=\"6. Response\"></a>6. Response</h2><p><strong>由服务端返回给客服端。Response可以分为三部分</strong></p>\n<ol>\n<li>Request Status Code (响应状态码)</li>\n<li>Response Headers （响应头）</li>\n<li>Response Body （响应体）</li>\n</ol>\n<h3 id=\"6-1-Request-Status-Code\"><a href=\"#6-1-Request-Status-Code\" class=\"headerlink\" title=\"6.1 Request Status Code\"></a>6.1 Request Status Code</h3><p>200 表示正常。 404 表示页面未找到。 500 表示服务器内部异常。</p>\n<p><strong>一般情况下</strong></p>\n<p>2开头 （请求成功）表示成功处理了请求的状态代码。</p>\n<p>3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p>\n<p>4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>\n<p>5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>\n<h3 id=\"6-2-Response-Headers\"><a href=\"#6-2-Response-Headers\" class=\"headerlink\" title=\"6.2 Response Headers\"></a>6.2 Response Headers</h3><p><strong>包含了服务器对请求的应答信息</strong></p>\n<p>部分信息</p>\n<ol>\n<li>date : 标识 Response 产生的时间</li>\n<li>Last-Modified : 指定资源的最后修改时间</li>\n<li>Content-Encoding ：指定 Response 内容的编码</li>\n<li>Server : 包含了服务器的信息</li>\n<li>Content-type ： 同Request</li>\n<li>Set-Cookie : 设置Cookie, 即告诉浏览器需要将此内容放到Cookies中，下次请求携带Cookies请求。</li>\n<li>Expires : 指定 Response 的过期时间，使用它可以控制代理服务器或浏览器将内容更新到缓存中，如再次访问，直接从缓存中加载，降低服务器荷载，缩短加载时间。</li>\n</ol>\n<h3 id=\"6-3-Response-Body\"><a href=\"#6-3-Response-Body\" class=\"headerlink\" title=\"6.3 Response Body\"></a>6.3 Response Body</h3><p><strong>响应的正文数据都是在响应体中</strong><br>（爬虫请求网页后要解析的数据就是解析响应体）</p>\n<p>在浏览器开发工具中点击Preview,就可以看到网页源代码、json数据等，然后从中做相应内容的提取</p>\n"},{"title":"PandaTV爬取主播人气并排序","date":"2018-12-25T03:05:31.000Z","_content":"\n\n很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = 'https://www.panda.tv/cate/yzdr'。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\n![发布的时候nickname和number如图](https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n代码如下：\n```\nimport re\nfrom urllib import request\nimport os\nimport datetime\n \n \nclass Spider():\n    url = 'https://www.panda.tv/all'\n    root_pattern ='<div class=\"video-info\">[\\s\\S]*?</div>'  # 因为number和name均在其下\n    name_pattern = '<span class=\"video-nickname\" title=\"([\\s\\S]*?)\">\\n'\n    number_pattern = '<span class=\"video-number\"><i class=\"ricon ricon-eye\"></i>([\\s\\S]*?)</span>\\n'\n\n    # 获取htmls数据\n    def __fetch_content(self):\n        r = request.Request(Spider.url)\n        r.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758')\n        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法\n        htmls = r.read()     # 读取\n        htmls = str(htmls, encoding='utf-8')   # 转为str\n        return htmls   \n\n    \n    # 建立一个list为: [{'name':name,'number': number},{'name':name,'number': number},...]\n    def __analysis(self, htmls):\n        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的<div class=\"video-info\">[\\s\\S]*?</div>\n        anchors = []\n\n        for html in root_html:  # 将<div class=\"video-info\">[\\s\\S]*?</div>一个一个提取出来\n            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]\n            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]\n            anchor = {'name': name, 'number': number} # 将name 和 number 对应起来，组成一个字典\n            anchors.append(anchor) # 将这个字典添加到 anchors列表中\n        return anchors\n \n    # \n    def __refine(self, anchors):\n        l = lambda anchors: {\n            'name': anchors['name'][0],  #strip()  内置函数，去掉空格\n            'number': anchors['number'][0]   # 取出字符串\n        }\n        return map(l, anchors)  #{['name':'xxx','number':'yyy']},{['name':'xxx1','number':'yyy1']}...\n \n    def __sort(self, anchors):   #排序\n        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序\n        return anchors  #anchor['number']中的转为float格式，按转化后的数字大小进行排序\n \n    def __sort_seed(self, anchor):  # 排序调用的方法\n        r = anchor['number']\n        if '万' in r:\n            r = r.strip('万')\n            r = float(r)\n            r *= 10000\n        number = float(r)\n        return number\n \n    def __show(self, anchors):  # 显示格式  \n        time_stamp = datetime.datetime.now()\n        b = str(time_stamp.strftime('%Y.%m.%d - %H:%M:%S') )\n        with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write('\\n\\n')\n                f.write(b)\n                f.write('\\n\\n') \n        for rank in range(0, len(anchors)):\n            a = str(('rank  ' + str(rank + 1) + '    '   #加排名，因为是从0开始\n                                           '主播姓名' + ':' + anchors[rank]['name'] +\n                  '      ' + '观看人数:'+anchors[rank]['number']))\n            with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write(a)\n                f.write('\\n')\n \n    def go(self):  #主方法\n        htmls = self.__fetch_content()\n        anchors = self.__analysis(htmls)\n        anchors = list(self.__refine(anchors))\n        anchors = self.__sort(anchors)\n        self.__show(anchors)\n \nspider = Spider()\nspider.go()\n```\n附带本次成果\n![](https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/python练习/PandaTV爬取主播人气并排序.md","raw":"---\ntitle: PandaTV爬取主播人气并排序\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = 'https://www.panda.tv/cate/yzdr'。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\n![发布的时候nickname和number如图](https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n代码如下：\n```\nimport re\nfrom urllib import request\nimport os\nimport datetime\n \n \nclass Spider():\n    url = 'https://www.panda.tv/all'\n    root_pattern ='<div class=\"video-info\">[\\s\\S]*?</div>'  # 因为number和name均在其下\n    name_pattern = '<span class=\"video-nickname\" title=\"([\\s\\S]*?)\">\\n'\n    number_pattern = '<span class=\"video-number\"><i class=\"ricon ricon-eye\"></i>([\\s\\S]*?)</span>\\n'\n\n    # 获取htmls数据\n    def __fetch_content(self):\n        r = request.Request(Spider.url)\n        r.add_header('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758')\n        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法\n        htmls = r.read()     # 读取\n        htmls = str(htmls, encoding='utf-8')   # 转为str\n        return htmls   \n\n    \n    # 建立一个list为: [{'name':name,'number': number},{'name':name,'number': number},...]\n    def __analysis(self, htmls):\n        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的<div class=\"video-info\">[\\s\\S]*?</div>\n        anchors = []\n\n        for html in root_html:  # 将<div class=\"video-info\">[\\s\\S]*?</div>一个一个提取出来\n            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]\n            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]\n            anchor = {'name': name, 'number': number} # 将name 和 number 对应起来，组成一个字典\n            anchors.append(anchor) # 将这个字典添加到 anchors列表中\n        return anchors\n \n    # \n    def __refine(self, anchors):\n        l = lambda anchors: {\n            'name': anchors['name'][0],  #strip()  内置函数，去掉空格\n            'number': anchors['number'][0]   # 取出字符串\n        }\n        return map(l, anchors)  #{['name':'xxx','number':'yyy']},{['name':'xxx1','number':'yyy1']}...\n \n    def __sort(self, anchors):   #排序\n        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序\n        return anchors  #anchor['number']中的转为float格式，按转化后的数字大小进行排序\n \n    def __sort_seed(self, anchor):  # 排序调用的方法\n        r = anchor['number']\n        if '万' in r:\n            r = r.strip('万')\n            r = float(r)\n            r *= 10000\n        number = float(r)\n        return number\n \n    def __show(self, anchors):  # 显示格式  \n        time_stamp = datetime.datetime.now()\n        b = str(time_stamp.strftime('%Y.%m.%d - %H:%M:%S') )\n        with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write('\\n\\n')\n                f.write(b)\n                f.write('\\n\\n') \n        for rank in range(0, len(anchors)):\n            a = str(('rank  ' + str(rank + 1) + '    '   #加排名，因为是从0开始\n                                           '主播姓名' + ':' + anchors[rank]['name'] +\n                  '      ' + '观看人数:'+anchors[rank]['number']))\n            with open('./PandaTV主播人气排名.md', 'a') as f:\n                f.write(a)\n                f.write('\\n')\n \n    def go(self):  #主方法\n        htmls = self.__fetch_content()\n        anchors = self.__analysis(htmls)\n        anchors = list(self.__refine(anchors))\n        anchors = self.__sort(anchors)\n        self.__show(anchors)\n \nspider = Spider()\nspider.go()\n```\n附带本次成果\n![](https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"python练习/PandaTV爬取主播人气并排序","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5e005ytssa7iutuwv4","content":"<p>很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = ‘<a href=\"https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\" target=\"_blank\" rel=\"noopener\">https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发布的时候nickname和number如图\"><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from urllib import request</span><br><span class=\"line\">import os</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">class Spider():</span><br><span class=\"line\">    url = &apos;https://www.panda.tv/all&apos;</span><br><span class=\"line\">    root_pattern =&apos;&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;&apos;  # 因为number和name均在其下</span><br><span class=\"line\">    name_pattern = &apos;&lt;span class=&quot;video-nickname&quot; title=&quot;([\\s\\S]*?)&quot;&gt;\\n&apos;</span><br><span class=\"line\">    number_pattern = &apos;&lt;span class=&quot;video-number&quot;&gt;&lt;i class=&quot;ricon ricon-eye&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;\\n&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 获取htmls数据</span><br><span class=\"line\">    def __fetch_content(self):</span><br><span class=\"line\">        r = request.Request(Spider.url)</span><br><span class=\"line\">        r.add_header(&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758&apos;)</span><br><span class=\"line\">        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法</span><br><span class=\"line\">        htmls = r.read()     # 读取</span><br><span class=\"line\">        htmls = str(htmls, encoding=&apos;utf-8&apos;)   # 转为str</span><br><span class=\"line\">        return htmls   </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立一个list为: [&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,...]</span><br><span class=\"line\">    def __analysis(self, htmls):</span><br><span class=\"line\">        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;</span><br><span class=\"line\">        anchors = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for html in root_html:  # 将&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;一个一个提取出来</span><br><span class=\"line\">            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]</span><br><span class=\"line\">            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]</span><br><span class=\"line\">            anchor = &#123;&apos;name&apos;: name, &apos;number&apos;: number&#125; # 将name 和 number 对应起来，组成一个字典</span><br><span class=\"line\">            anchors.append(anchor) # 将这个字典添加到 anchors列表中</span><br><span class=\"line\">        return anchors</span><br><span class=\"line\"> </span><br><span class=\"line\">    # </span><br><span class=\"line\">    def __refine(self, anchors):</span><br><span class=\"line\">        l = lambda anchors: &#123;</span><br><span class=\"line\">            &apos;name&apos;: anchors[&apos;name&apos;][0],  #strip()  内置函数，去掉空格</span><br><span class=\"line\">            &apos;number&apos;: anchors[&apos;number&apos;][0]   # 取出字符串</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map(l, anchors)  #&#123;[&apos;name&apos;:&apos;xxx&apos;,&apos;number&apos;:&apos;yyy&apos;]&#125;,&#123;[&apos;name&apos;:&apos;xxx1&apos;,&apos;number&apos;:&apos;yyy1&apos;]&#125;...</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort(self, anchors):   #排序</span><br><span class=\"line\">        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序</span><br><span class=\"line\">        return anchors  #anchor[&apos;number&apos;]中的转为float格式，按转化后的数字大小进行排序</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort_seed(self, anchor):  # 排序调用的方法</span><br><span class=\"line\">        r = anchor[&apos;number&apos;]</span><br><span class=\"line\">        if &apos;万&apos; in r:</span><br><span class=\"line\">            r = r.strip(&apos;万&apos;)</span><br><span class=\"line\">            r = float(r)</span><br><span class=\"line\">            r *= 10000</span><br><span class=\"line\">        number = float(r)</span><br><span class=\"line\">        return number</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __show(self, anchors):  # 显示格式  </span><br><span class=\"line\">        time_stamp = datetime.datetime.now()</span><br><span class=\"line\">        b = str(time_stamp.strftime(&apos;%Y.%m.%d - %H:%M:%S&apos;) )</span><br><span class=\"line\">        with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;)</span><br><span class=\"line\">                f.write(b)</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;) </span><br><span class=\"line\">        for rank in range(0, len(anchors)):</span><br><span class=\"line\">            a = str((&apos;rank  &apos; + str(rank + 1) + &apos;    &apos;   #加排名，因为是从0开始</span><br><span class=\"line\">                                           &apos;主播姓名&apos; + &apos;:&apos; + anchors[rank][&apos;name&apos;] +</span><br><span class=\"line\">                  &apos;      &apos; + &apos;观看人数:&apos;+anchors[rank][&apos;number&apos;]))</span><br><span class=\"line\">            with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(a)</span><br><span class=\"line\">                f.write(&apos;\\n&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    def go(self):  #主方法</span><br><span class=\"line\">        htmls = self.__fetch_content()</span><br><span class=\"line\">        anchors = self.__analysis(htmls)</span><br><span class=\"line\">        anchors = list(self.__refine(anchors))</span><br><span class=\"line\">        anchors = self.__sort(anchors)</span><br><span class=\"line\">        self.__show(anchors)</span><br><span class=\"line\"> </span><br><span class=\"line\">spider = Spider()</span><br><span class=\"line\">spider.go()</span><br></pre></td></tr></table></figure></p>\n<p>附带本次成果<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早前，第一次爬虫，就用的re加urllib原生爬虫。这次重新来爬取一次PandaTV主播人气排名，来练一下手。毕竟看直播嘛，颜值区更喜欢一点。就以颜值区为例，颜值区url = ‘<a href=\"https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。\" target=\"_blank\" rel=\"noopener\">https://www.panda.tv/cate/yzdr&#39;。结果保存在运行目录下的`PandaTV主播人气排名.md`中。</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-582ea57a648057a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发布的时候nickname和number如图\"><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">from urllib import request</span><br><span class=\"line\">import os</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">class Spider():</span><br><span class=\"line\">    url = &apos;https://www.panda.tv/all&apos;</span><br><span class=\"line\">    root_pattern =&apos;&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;&apos;  # 因为number和name均在其下</span><br><span class=\"line\">    name_pattern = &apos;&lt;span class=&quot;video-nickname&quot; title=&quot;([\\s\\S]*?)&quot;&gt;\\n&apos;</span><br><span class=\"line\">    number_pattern = &apos;&lt;span class=&quot;video-number&quot;&gt;&lt;i class=&quot;ricon ricon-eye&quot;&gt;&lt;/i&gt;([\\s\\S]*?)&lt;/span&gt;\\n&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 获取htmls数据</span><br><span class=\"line\">    def __fetch_content(self):</span><br><span class=\"line\">        r = request.Request(Spider.url)</span><br><span class=\"line\">        r.add_header(&apos;User-Agent&apos;,&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17758&apos;)</span><br><span class=\"line\">        r = request.urlopen(r)   # 打开网页    request 下面的urlopen方法</span><br><span class=\"line\">        htmls = r.read()     # 读取</span><br><span class=\"line\">        htmls = str(htmls, encoding=&apos;utf-8&apos;)   # 转为str</span><br><span class=\"line\">        return htmls   </span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    # 建立一个list为: [&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,&#123;&apos;name&apos;:name,&apos;number&apos;: number&#125;,...]</span><br><span class=\"line\">    def __analysis(self, htmls):</span><br><span class=\"line\">        root_html = re.findall(Spider.root_pattern, htmls)  # 抓取所有的&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;</span><br><span class=\"line\">        anchors = []</span><br><span class=\"line\"></span><br><span class=\"line\">        for html in root_html:  # 将&lt;div class=&quot;video-info&quot;&gt;[\\s\\S]*?&lt;/div&gt;一个一个提取出来</span><br><span class=\"line\">            name = re.findall(Spider.name_pattern, html)  # 将一个的name提取出来 ，格式为[str]</span><br><span class=\"line\">            number = re.findall(Spider.number_pattern, html) # 将一个的number提取出来,格式为[str]</span><br><span class=\"line\">            anchor = &#123;&apos;name&apos;: name, &apos;number&apos;: number&#125; # 将name 和 number 对应起来，组成一个字典</span><br><span class=\"line\">            anchors.append(anchor) # 将这个字典添加到 anchors列表中</span><br><span class=\"line\">        return anchors</span><br><span class=\"line\"> </span><br><span class=\"line\">    # </span><br><span class=\"line\">    def __refine(self, anchors):</span><br><span class=\"line\">        l = lambda anchors: &#123;</span><br><span class=\"line\">            &apos;name&apos;: anchors[&apos;name&apos;][0],  #strip()  内置函数，去掉空格</span><br><span class=\"line\">            &apos;number&apos;: anchors[&apos;number&apos;][0]   # 取出字符串</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map(l, anchors)  #&#123;[&apos;name&apos;:&apos;xxx&apos;,&apos;number&apos;:&apos;yyy&apos;]&#125;,&#123;[&apos;name&apos;:&apos;xxx1&apos;,&apos;number&apos;:&apos;yyy1&apos;]&#125;...</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort(self, anchors):   #排序</span><br><span class=\"line\">        anchors = sorted(anchors, key=self.__sort_seed, reverse=True) #reverse=True表示降序</span><br><span class=\"line\">        return anchors  #anchor[&apos;number&apos;]中的转为float格式，按转化后的数字大小进行排序</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __sort_seed(self, anchor):  # 排序调用的方法</span><br><span class=\"line\">        r = anchor[&apos;number&apos;]</span><br><span class=\"line\">        if &apos;万&apos; in r:</span><br><span class=\"line\">            r = r.strip(&apos;万&apos;)</span><br><span class=\"line\">            r = float(r)</span><br><span class=\"line\">            r *= 10000</span><br><span class=\"line\">        number = float(r)</span><br><span class=\"line\">        return number</span><br><span class=\"line\"> </span><br><span class=\"line\">    def __show(self, anchors):  # 显示格式  </span><br><span class=\"line\">        time_stamp = datetime.datetime.now()</span><br><span class=\"line\">        b = str(time_stamp.strftime(&apos;%Y.%m.%d - %H:%M:%S&apos;) )</span><br><span class=\"line\">        with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;)</span><br><span class=\"line\">                f.write(b)</span><br><span class=\"line\">                f.write(&apos;\\n\\n&apos;) </span><br><span class=\"line\">        for rank in range(0, len(anchors)):</span><br><span class=\"line\">            a = str((&apos;rank  &apos; + str(rank + 1) + &apos;    &apos;   #加排名，因为是从0开始</span><br><span class=\"line\">                                           &apos;主播姓名&apos; + &apos;:&apos; + anchors[rank][&apos;name&apos;] +</span><br><span class=\"line\">                  &apos;      &apos; + &apos;观看人数:&apos;+anchors[rank][&apos;number&apos;]))</span><br><span class=\"line\">            with open(&apos;./PandaTV主播人气排名.md&apos;, &apos;a&apos;) as f:</span><br><span class=\"line\">                f.write(a)</span><br><span class=\"line\">                f.write(&apos;\\n&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">    def go(self):  #主方法</span><br><span class=\"line\">        htmls = self.__fetch_content()</span><br><span class=\"line\">        anchors = self.__analysis(htmls)</span><br><span class=\"line\">        anchors = list(self.__refine(anchors))</span><br><span class=\"line\">        anchors = self.__sort(anchors)</span><br><span class=\"line\">        self.__show(anchors)</span><br><span class=\"line\"> </span><br><span class=\"line\">spider = Spider()</span><br><span class=\"line\">spider.go()</span><br></pre></td></tr></table></figure></p>\n<p>附带本次成果<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-f230dfa9f355d4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n"},{"title":"python判断是否json格式","date":"2019-10-09T03:05:31.000Z","_content":"\nis_json.py\n```\n#!/usr/bin/env python\n#-*-coding:utf-8-*-\nimport json\nimport sys\nimport os\nimport glob\n\nscript_path = os.path.split(os.path.realpath(__file__))[0]\ndef is_json(json_file):\n    try:\n        with open(json_file,'r') as f:\n            load_dict = json.load(f)\n            print(json_file +  ' True')\n    except Exception as e:\n        print(json_file +  ' ERROR')\n        print(e)\n\ndef json_list():\n    try:    \n        json_name = sys.argv[1]\n        json_list = []       \n        for json_name in sys.argv[1:]:\n            json_list.append(json_name)\n            \n    except:   \n        json_list = glob.glob(os.path.join(script_path,'*.json'))\n    return json_list\n\n[is_json(json_file) for json_file in json_list()]\n```","source":"_posts/python练习/is_json.md","raw":"---\ntitle: python判断是否json格式\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\nis_json.py\n```\n#!/usr/bin/env python\n#-*-coding:utf-8-*-\nimport json\nimport sys\nimport os\nimport glob\n\nscript_path = os.path.split(os.path.realpath(__file__))[0]\ndef is_json(json_file):\n    try:\n        with open(json_file,'r') as f:\n            load_dict = json.load(f)\n            print(json_file +  ' True')\n    except Exception as e:\n        print(json_file +  ' ERROR')\n        print(e)\n\ndef json_list():\n    try:    \n        json_name = sys.argv[1]\n        json_list = []       \n        for json_name in sys.argv[1:]:\n            json_list.append(json_name)\n            \n    except:   \n        json_list = glob.glob(os.path.join(script_path,'*.json'))\n    return json_list\n\n[is_json(json_file) for json_file in json_list()]\n```","slug":"python练习/is_json","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5f0060tssarc8e3tdd","content":"<p>is_json.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*-coding:utf-8-*-</span><br><span class=\"line\">import json</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">import glob</span><br><span class=\"line\"></span><br><span class=\"line\">script_path = os.path.split(os.path.realpath(__file__))[0]</span><br><span class=\"line\">def is_json(json_file):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with open(json_file,&apos;r&apos;) as f:</span><br><span class=\"line\">            load_dict = json.load(f)</span><br><span class=\"line\">            print(json_file +  &apos; True&apos;)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(json_file +  &apos; ERROR&apos;)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">def json_list():</span><br><span class=\"line\">    try:    </span><br><span class=\"line\">        json_name = sys.argv[1]</span><br><span class=\"line\">        json_list = []       </span><br><span class=\"line\">        for json_name in sys.argv[1:]:</span><br><span class=\"line\">            json_list.append(json_name)</span><br><span class=\"line\">            </span><br><span class=\"line\">    except:   </span><br><span class=\"line\">        json_list = glob.glob(os.path.join(script_path,&apos;*.json&apos;))</span><br><span class=\"line\">    return json_list</span><br><span class=\"line\"></span><br><span class=\"line\">[is_json(json_file) for json_file in json_list()]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>is_json.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*-coding:utf-8-*-</span><br><span class=\"line\">import json</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">import glob</span><br><span class=\"line\"></span><br><span class=\"line\">script_path = os.path.split(os.path.realpath(__file__))[0]</span><br><span class=\"line\">def is_json(json_file):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with open(json_file,&apos;r&apos;) as f:</span><br><span class=\"line\">            load_dict = json.load(f)</span><br><span class=\"line\">            print(json_file +  &apos; True&apos;)</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(json_file +  &apos; ERROR&apos;)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">def json_list():</span><br><span class=\"line\">    try:    </span><br><span class=\"line\">        json_name = sys.argv[1]</span><br><span class=\"line\">        json_list = []       </span><br><span class=\"line\">        for json_name in sys.argv[1:]:</span><br><span class=\"line\">            json_list.append(json_name)</span><br><span class=\"line\">            </span><br><span class=\"line\">    except:   </span><br><span class=\"line\">        json_list = glob.glob(os.path.join(script_path,&apos;*.json&apos;))</span><br><span class=\"line\">    return json_list</span><br><span class=\"line\"></span><br><span class=\"line\">[is_json(json_file) for json_file in json_list()]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"pathlib模块","date":"2019-07-08T03:05:31.000Z","_content":"\n**面向对象的文件系统路径**\n\npathlib 提供表示文件系统路径的类，适用于不同的操作系统\n\n纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作\n```\nimport pathlib\nprint(pathlib.PurePath(__file__)) # 文件路径\nprint(pathlib.PurePath(__file__).match('*.py'))\nprint(pathlib.Path.cwd())  #  当前路径 （运行路径）\nprint(pathlib.Path.cwd().parent)  # 上一级\nprint(pathlib.Path.cwd().parent.parent)  # 上上级\n\n\nparts = ['first', 'second', 'third']\nprint(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径\n```\n\n**更多**\n```\nfrom pathlib import Path\nPath.iterdir() # 遍历目录的子目录或者文件\n\nPath.is_dir() # 判断是否是目录\n\nPath.glob() # 过滤目录(返回生成器)\n\nPath.resolve() # 返回绝对路径\n\nPath.exists() # 判断路径是否存在\n\nPath.open() # 打开文件(支持with)\n\nPath.unlink() # 删除文件或目录(目录非空触发异常)\n\n# 基本属性\nPath.parts # 分割路径 类似os.path.split(), 不过返回元组\n\nPath.drive # 返回驱动器名称\n\nPath.root # 返回路径的根目录\n\nPath.anchor # 自动判断返回drive或root\n\nPath.parents # 返回所有上级目录的列表\n\n# 改变路径\nPath.with_name() # 更改路径名称, 更改最后一级路径名\n\nPath.with_suffix() # 更改路径后缀\n\n#拼接路径\nPath.joinpath() # 拼接路径\n\nPath.relative_to() # 计算相对路径\n\n# 测试路径\nPath.match() # 测试路径是否符合pattern\n\nPath.is_dir() # 是否是文件\n\nPath.is_absolute() # 是否是绝对路径\n\nPath.is_reserved() # 是否是预留路径\n\nPath.exists() # 判断路径是否真实存在\n\n# 其他方法\nPath.cwd() # 返回当前目录的路径对象\n\nPath.home() # 返回当前用户的home路径对象\n\nPath.stat()  # 返回路径信息, 同os.stat()\n\nPath.chmod()  # 更改路径权限, 类似os.chmod()\n\nPath.expanduser() # 展开~返回完整路径对象\n\nPath.mkdir() # 创建目录\n\nPath.rename()  # 重命名路径\n\nPath.rglob()  # 递归遍历所有子目录的文件\n\n```\n","source":"_posts/python练习/pathlib有关文件路径.md","raw":"---\ntitle: pathlib模块\ndate: 2019-07-08 11:05:31\ntags:\ncategories: python练习\n---\n\n**面向对象的文件系统路径**\n\npathlib 提供表示文件系统路径的类，适用于不同的操作系统\n\n纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作\n```\nimport pathlib\nprint(pathlib.PurePath(__file__)) # 文件路径\nprint(pathlib.PurePath(__file__).match('*.py'))\nprint(pathlib.Path.cwd())  #  当前路径 （运行路径）\nprint(pathlib.Path.cwd().parent)  # 上一级\nprint(pathlib.Path.cwd().parent.parent)  # 上上级\n\n\nparts = ['first', 'second', 'third']\nprint(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径\n```\n\n**更多**\n```\nfrom pathlib import Path\nPath.iterdir() # 遍历目录的子目录或者文件\n\nPath.is_dir() # 判断是否是目录\n\nPath.glob() # 过滤目录(返回生成器)\n\nPath.resolve() # 返回绝对路径\n\nPath.exists() # 判断路径是否存在\n\nPath.open() # 打开文件(支持with)\n\nPath.unlink() # 删除文件或目录(目录非空触发异常)\n\n# 基本属性\nPath.parts # 分割路径 类似os.path.split(), 不过返回元组\n\nPath.drive # 返回驱动器名称\n\nPath.root # 返回路径的根目录\n\nPath.anchor # 自动判断返回drive或root\n\nPath.parents # 返回所有上级目录的列表\n\n# 改变路径\nPath.with_name() # 更改路径名称, 更改最后一级路径名\n\nPath.with_suffix() # 更改路径后缀\n\n#拼接路径\nPath.joinpath() # 拼接路径\n\nPath.relative_to() # 计算相对路径\n\n# 测试路径\nPath.match() # 测试路径是否符合pattern\n\nPath.is_dir() # 是否是文件\n\nPath.is_absolute() # 是否是绝对路径\n\nPath.is_reserved() # 是否是预留路径\n\nPath.exists() # 判断路径是否真实存在\n\n# 其他方法\nPath.cwd() # 返回当前目录的路径对象\n\nPath.home() # 返回当前用户的home路径对象\n\nPath.stat()  # 返回路径信息, 同os.stat()\n\nPath.chmod()  # 更改路径权限, 类似os.chmod()\n\nPath.expanduser() # 展开~返回完整路径对象\n\nPath.mkdir() # 创建目录\n\nPath.rename()  # 重命名路径\n\nPath.rglob()  # 递归遍历所有子目录的文件\n\n```\n","slug":"python练习/pathlib有关文件路径","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5g0063tssac7zxyd83","content":"<p><strong>面向对象的文件系统路径</strong></p>\n<p>pathlib 提供表示文件系统路径的类，适用于不同的操作系统</p>\n<p>纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathlib</span><br><span class=\"line\">print(pathlib.PurePath(__file__)) # 文件路径</span><br><span class=\"line\">print(pathlib.PurePath(__file__).match(&apos;*.py&apos;))</span><br><span class=\"line\">print(pathlib.Path.cwd())  #  当前路径 （运行路径）</span><br><span class=\"line\">print(pathlib.Path.cwd().parent)  # 上一级</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.parent)  # 上上级</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parts = [&apos;first&apos;, &apos;second&apos;, &apos;third&apos;]</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pathlib import Path</span><br><span class=\"line\">Path.iterdir() # 遍历目录的子目录或者文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 判断是否是目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.glob() # 过滤目录(返回生成器)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.resolve() # 返回绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否存在</span><br><span class=\"line\"></span><br><span class=\"line\">Path.open() # 打开文件(支持with)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.unlink() # 删除文件或目录(目录非空触发异常)</span><br><span class=\"line\"></span><br><span class=\"line\"># 基本属性</span><br><span class=\"line\">Path.parts # 分割路径 类似os.path.split(), 不过返回元组</span><br><span class=\"line\"></span><br><span class=\"line\">Path.drive # 返回驱动器名称</span><br><span class=\"line\"></span><br><span class=\"line\">Path.root # 返回路径的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.anchor # 自动判断返回drive或root</span><br><span class=\"line\"></span><br><span class=\"line\">Path.parents # 返回所有上级目录的列表</span><br><span class=\"line\"></span><br><span class=\"line\"># 改变路径</span><br><span class=\"line\">Path.with_name() # 更改路径名称, 更改最后一级路径名</span><br><span class=\"line\"></span><br><span class=\"line\">Path.with_suffix() # 更改路径后缀</span><br><span class=\"line\"></span><br><span class=\"line\">#拼接路径</span><br><span class=\"line\">Path.joinpath() # 拼接路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.relative_to() # 计算相对路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试路径</span><br><span class=\"line\">Path.match() # 测试路径是否符合pattern</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 是否是文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_absolute() # 是否是绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_reserved() # 是否是预留路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否真实存在</span><br><span class=\"line\"></span><br><span class=\"line\"># 其他方法</span><br><span class=\"line\">Path.cwd() # 返回当前目录的路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.home() # 返回当前用户的home路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.stat()  # 返回路径信息, 同os.stat()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.chmod()  # 更改路径权限, 类似os.chmod()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.expanduser() # 展开~返回完整路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.mkdir() # 创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rename()  # 重命名路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rglob()  # 递归遍历所有子目录的文件</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>面向对象的文件系统路径</strong></p>\n<p>pathlib 提供表示文件系统路径的类，适用于不同的操作系统</p>\n<p>纯路径提供纯粹的计算操作，具体路径继承纯路径且可以进行 I/O 操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pathlib</span><br><span class=\"line\">print(pathlib.PurePath(__file__)) # 文件路径</span><br><span class=\"line\">print(pathlib.PurePath(__file__).match(&apos;*.py&apos;))</span><br><span class=\"line\">print(pathlib.Path.cwd())  #  当前路径 （运行路径）</span><br><span class=\"line\">print(pathlib.Path.cwd().parent)  # 上一级</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.parent)  # 上上级</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parts = [&apos;first&apos;, &apos;second&apos;, &apos;third&apos;]</span><br><span class=\"line\">print(pathlib.Path.cwd().parent.joinpath(*parts))  # 在上一级开始拼接路径</span><br></pre></td></tr></table></figure></p>\n<p><strong>更多</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pathlib import Path</span><br><span class=\"line\">Path.iterdir() # 遍历目录的子目录或者文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 判断是否是目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.glob() # 过滤目录(返回生成器)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.resolve() # 返回绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否存在</span><br><span class=\"line\"></span><br><span class=\"line\">Path.open() # 打开文件(支持with)</span><br><span class=\"line\"></span><br><span class=\"line\">Path.unlink() # 删除文件或目录(目录非空触发异常)</span><br><span class=\"line\"></span><br><span class=\"line\"># 基本属性</span><br><span class=\"line\">Path.parts # 分割路径 类似os.path.split(), 不过返回元组</span><br><span class=\"line\"></span><br><span class=\"line\">Path.drive # 返回驱动器名称</span><br><span class=\"line\"></span><br><span class=\"line\">Path.root # 返回路径的根目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.anchor # 自动判断返回drive或root</span><br><span class=\"line\"></span><br><span class=\"line\">Path.parents # 返回所有上级目录的列表</span><br><span class=\"line\"></span><br><span class=\"line\"># 改变路径</span><br><span class=\"line\">Path.with_name() # 更改路径名称, 更改最后一级路径名</span><br><span class=\"line\"></span><br><span class=\"line\">Path.with_suffix() # 更改路径后缀</span><br><span class=\"line\"></span><br><span class=\"line\">#拼接路径</span><br><span class=\"line\">Path.joinpath() # 拼接路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.relative_to() # 计算相对路径</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试路径</span><br><span class=\"line\">Path.match() # 测试路径是否符合pattern</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_dir() # 是否是文件</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_absolute() # 是否是绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.is_reserved() # 是否是预留路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.exists() # 判断路径是否真实存在</span><br><span class=\"line\"></span><br><span class=\"line\"># 其他方法</span><br><span class=\"line\">Path.cwd() # 返回当前目录的路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.home() # 返回当前用户的home路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.stat()  # 返回路径信息, 同os.stat()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.chmod()  # 更改路径权限, 类似os.chmod()</span><br><span class=\"line\"></span><br><span class=\"line\">Path.expanduser() # 展开~返回完整路径对象</span><br><span class=\"line\"></span><br><span class=\"line\">Path.mkdir() # 创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rename()  # 重命名路径</span><br><span class=\"line\"></span><br><span class=\"line\">Path.rglob()  # 递归遍历所有子目录的文件</span><br></pre></td></tr></table></figure></p>\n"},{"title":"psutil模块","date":"2019-07-09T03:05:31.000Z","_content":"\n# 三大模块\n1. System related function\n2. Processes\n3. Windows Service\n\n# 安装方法\n`pip install psutil`\n\n`pip install -user psutil `\n\n# 使用方法\n```\nimport psutil\n\n'''\n待探索\n'''\n# cpu 节选\npsutil.cpu_times() # 将系统cpu时间作为命名元组返回\npsutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比\npsutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率\npsutil.cpu_count()  # cpu 逻辑核心数\npsutil.cpu_count(logical=True) # cpu 物理核心数\n\n\nfor i in range(10):\n    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率\n\n# 内存节选\npsutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回\n\n# 当内存不足，发出提示\ndan = 300 * 1024 * 1024 # 单位为b\nif psutil.virtual_memory().available <= dan:\n    print('memory warning')\n\n# 进程信息\npsutil.pids()\n[p.info for p in psutil.process_iter(attrs=['pid', 'name']) if 'python' in p.info['name']]\n```\n\n# 更多\n单个进程信息\n```\np = psutil.Process(2423) \np.name()   #进程名\np.exe()    #进程的bin路径\np.cwd()    #进程的工作目录绝对路径\np.status()   #进程状态\np.create_time()  #进程创建时间\np.uids()    #进程uid信息\np.gids()    #进程的gid信息\np.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息\np.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好\np.memory_percent()  #进程内存利用率\np.memory_info()    #进程内存rss,vms信息\np.io_counters()    #进程的IO信息,包括读写IO数字及参数\np.connectios()   #返回进程列表\np.num_threads()  #进程开启的线程数\n听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息\nfrom subprocess import PIPE\np = psutil.Popen([\"/usr/bin/python\", \"-c\", \"print('hello')\"],stdout=PIPE)\np.name()\np.username()\n```\n\n# 获取开机时间\n```\npsutil.boot_time() # 时间戳\n\ndatetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(\"%Y-%m-%d %H: %M: %S\") #转换成自然时间格式\n``\n","source":"_posts/python练习/psutil获取系统运行的进程和系统利用率.md","raw":"---\ntitle: psutil模块\ndate: 2019-07-09 11:05:31\ntags:\ncategories: python练习\n---\n\n# 三大模块\n1. System related function\n2. Processes\n3. Windows Service\n\n# 安装方法\n`pip install psutil`\n\n`pip install -user psutil `\n\n# 使用方法\n```\nimport psutil\n\n'''\n待探索\n'''\n# cpu 节选\npsutil.cpu_times() # 将系统cpu时间作为命名元组返回\npsutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比\npsutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率\npsutil.cpu_count()  # cpu 逻辑核心数\npsutil.cpu_count(logical=True) # cpu 物理核心数\n\n\nfor i in range(10):\n    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率\n\n# 内存节选\npsutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回\n\n# 当内存不足，发出提示\ndan = 300 * 1024 * 1024 # 单位为b\nif psutil.virtual_memory().available <= dan:\n    print('memory warning')\n\n# 进程信息\npsutil.pids()\n[p.info for p in psutil.process_iter(attrs=['pid', 'name']) if 'python' in p.info['name']]\n```\n\n# 更多\n单个进程信息\n```\np = psutil.Process(2423) \np.name()   #进程名\np.exe()    #进程的bin路径\np.cwd()    #进程的工作目录绝对路径\np.status()   #进程状态\np.create_time()  #进程创建时间\np.uids()    #进程uid信息\np.gids()    #进程的gid信息\np.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息\np.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好\np.memory_percent()  #进程内存利用率\np.memory_info()    #进程内存rss,vms信息\np.io_counters()    #进程的IO信息,包括读写IO数字及参数\np.connectios()   #返回进程列表\np.num_threads()  #进程开启的线程数\n听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息\nfrom subprocess import PIPE\np = psutil.Popen([\"/usr/bin/python\", \"-c\", \"print('hello')\"],stdout=PIPE)\np.name()\np.username()\n```\n\n# 获取开机时间\n```\npsutil.boot_time() # 时间戳\n\ndatetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(\"%Y-%m-%d %H: %M: %S\") #转换成自然时间格式\n``\n","slug":"python练习/psutil获取系统运行的进程和系统利用率","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5g0065tssa7llia592","content":"<h1 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h1><ol>\n<li>System related function</li>\n<li>Processes</li>\n<li>Windows Service</li>\n</ol>\n<h1 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h1><p><code>pip install psutil</code></p>\n<p><code>pip install -user psutil</code></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import psutil</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">待探索</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># cpu 节选</span><br><span class=\"line\">psutil.cpu_times() # 将系统cpu时间作为命名元组返回</span><br><span class=\"line\">psutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比</span><br><span class=\"line\">psutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\">psutil.cpu_count()  # cpu 逻辑核心数</span><br><span class=\"line\">psutil.cpu_count(logical=True) # cpu 物理核心数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存节选</span><br><span class=\"line\">psutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回</span><br><span class=\"line\"></span><br><span class=\"line\"># 当内存不足，发出提示</span><br><span class=\"line\">dan = 300 * 1024 * 1024 # 单位为b</span><br><span class=\"line\">if psutil.virtual_memory().available &lt;= dan:</span><br><span class=\"line\">    print(&apos;memory warning&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程信息</span><br><span class=\"line\">psutil.pids()</span><br><span class=\"line\">[p.info for p in psutil.process_iter(attrs=[&apos;pid&apos;, &apos;name&apos;]) if &apos;python&apos; in p.info[&apos;name&apos;]]</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>单个进程信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = psutil.Process(2423) </span><br><span class=\"line\">p.name()   #进程名</span><br><span class=\"line\">p.exe()    #进程的bin路径</span><br><span class=\"line\">p.cwd()    #进程的工作目录绝对路径</span><br><span class=\"line\">p.status()   #进程状态</span><br><span class=\"line\">p.create_time()  #进程创建时间</span><br><span class=\"line\">p.uids()    #进程uid信息</span><br><span class=\"line\">p.gids()    #进程的gid信息</span><br><span class=\"line\">p.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息</span><br><span class=\"line\">p.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好</span><br><span class=\"line\">p.memory_percent()  #进程内存利用率</span><br><span class=\"line\">p.memory_info()    #进程内存rss,vms信息</span><br><span class=\"line\">p.io_counters()    #进程的IO信息,包括读写IO数字及参数</span><br><span class=\"line\">p.connectios()   #返回进程列表</span><br><span class=\"line\">p.num_threads()  #进程开启的线程数</span><br><span class=\"line\">听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息</span><br><span class=\"line\">from subprocess import PIPE</span><br><span class=\"line\">p = psutil.Popen([&quot;/usr/bin/python&quot;, &quot;-c&quot;, &quot;print(&apos;hello&apos;)&quot;],stdout=PIPE)</span><br><span class=\"line\">p.name()</span><br><span class=\"line\">p.username()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取开机时间\"><a href=\"#获取开机时间\" class=\"headerlink\" title=\"获取开机时间\"></a>获取开机时间</h1><p><code>`</code><br>psutil.boot_time() # 时间戳</p>\n<p>datetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(“%Y-%m-%d %H: %M: %S”) #转换成自然时间格式<br><code></code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三大模块\"><a href=\"#三大模块\" class=\"headerlink\" title=\"三大模块\"></a>三大模块</h1><ol>\n<li>System related function</li>\n<li>Processes</li>\n<li>Windows Service</li>\n</ol>\n<h1 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h1><p><code>pip install psutil</code></p>\n<p><code>pip install -user psutil</code></p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import psutil</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">待探索</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># cpu 节选</span><br><span class=\"line\">psutil.cpu_times() # 将系统cpu时间作为命名元组返回</span><br><span class=\"line\">psutil.cpu_percent(interval=None, percpu=None)  # cpu 使用百分比</span><br><span class=\"line\">psutil.cpu_percent(interval=3, percpu=True) # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\">psutil.cpu_count()  # cpu 逻辑核心数</span><br><span class=\"line\">psutil.cpu_count(logical=True) # cpu 物理核心数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    psutil.cpu_percent(interval=3, percpu=True)  # 3秒间隔中，cpu 的占用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存节选</span><br><span class=\"line\">psutil.virtual_memory()  # 将系统内存使用情况作为命名元组返回</span><br><span class=\"line\"></span><br><span class=\"line\"># 当内存不足，发出提示</span><br><span class=\"line\">dan = 300 * 1024 * 1024 # 单位为b</span><br><span class=\"line\">if psutil.virtual_memory().available &lt;= dan:</span><br><span class=\"line\">    print(&apos;memory warning&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程信息</span><br><span class=\"line\">psutil.pids()</span><br><span class=\"line\">[p.info for p in psutil.process_iter(attrs=[&apos;pid&apos;, &apos;name&apos;]) if &apos;python&apos; in p.info[&apos;name&apos;]]</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>单个进程信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = psutil.Process(2423) </span><br><span class=\"line\">p.name()   #进程名</span><br><span class=\"line\">p.exe()    #进程的bin路径</span><br><span class=\"line\">p.cwd()    #进程的工作目录绝对路径</span><br><span class=\"line\">p.status()   #进程状态</span><br><span class=\"line\">p.create_time()  #进程创建时间</span><br><span class=\"line\">p.uids()    #进程uid信息</span><br><span class=\"line\">p.gids()    #进程的gid信息</span><br><span class=\"line\">p.cpu_times()   #进程的cpu时间信息,包括user,system两个cpu信息</span><br><span class=\"line\">p.cpu_affinity()  #get进程cpu亲和度,如果要设置cpu亲和度,将cpu号作为参考就好</span><br><span class=\"line\">p.memory_percent()  #进程内存利用率</span><br><span class=\"line\">p.memory_info()    #进程内存rss,vms信息</span><br><span class=\"line\">p.io_counters()    #进程的IO信息,包括读写IO数字及参数</span><br><span class=\"line\">p.connectios()   #返回进程列表</span><br><span class=\"line\">p.num_threads()  #进程开启的线程数</span><br><span class=\"line\">听过psutil的Popen方法启动应用程序，可以跟踪程序的相关信息</span><br><span class=\"line\">from subprocess import PIPE</span><br><span class=\"line\">p = psutil.Popen([&quot;/usr/bin/python&quot;, &quot;-c&quot;, &quot;print(&apos;hello&apos;)&quot;],stdout=PIPE)</span><br><span class=\"line\">p.name()</span><br><span class=\"line\">p.username()</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"获取开机时间\"><a href=\"#获取开机时间\" class=\"headerlink\" title=\"获取开机时间\"></a>获取开机时间</h1><p><code>`</code><br>psutil.boot_time() # 时间戳</p>\n<p>datetime.datetime.fromtimestamp(psutil.boot_time ()).strftime(“%Y-%m-%d %H: %M: %S”) #转换成自然时间格式<br><code></code></p>\n"},{"title":"python的一些技巧","date":"2019-07-09T03:05:31.000Z","_content":"## 变量\n[有关于变量](https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md)\n```\n\n\n\n1. 定义 `__str__` 方法的对象，可以使用 `str()` 函数 返回可读名称\n2. 定义 `__next__` 和 `__iter__` 方法的对象，就可以被循环迭代\n3. 定义 `__bool` 方法的对象，进行布尔值的判断时就会使用自定义的逻辑\n","source":"_posts/python练习/python一些规则.md","raw":"\n---\ntitle: python的一些技巧\ndate: 2019-07-09 11:05:31\ntags:\ncategories: python练习\n---\n## 变量\n[有关于变量](https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md)\n```\n\n\n\n1. 定义 `__str__` 方法的对象，可以使用 `str()` 函数 返回可读名称\n2. 定义 `__next__` 和 `__iter__` 方法的对象，就可以被循环迭代\n3. 定义 `__bool` 方法的对象，进行布尔值的判断时就会使用自定义的逻辑\n","slug":"python练习/python一些规则","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5i0066tssaqoac0ky6","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><a href=\"https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md\" target=\"_blank\" rel=\"noopener\">有关于变量</a><br><code>`</code></p>\n<ol>\n<li>定义 <code>__str__</code> 方法的对象，可以使用 <code>str()</code> 函数 返回可读名称</li>\n<li>定义 <code>__next__</code> 和 <code>__iter__</code> 方法的对象，就可以被循环迭代</li>\n<li>定义 <code>__bool</code> 方法的对象，进行布尔值的判断时就会使用自定义的逻辑</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p><a href=\"https://github.com/piglei/one-python-craftsman/blob/master/zh_CN/1-using-variables-well.md\" target=\"_blank\" rel=\"noopener\">有关于变量</a><br><code>`</code></p>\n<ol>\n<li>定义 <code>__str__</code> 方法的对象，可以使用 <code>str()</code> 函数 返回可读名称</li>\n<li>定义 <code>__next__</code> 和 <code>__iter__</code> 方法的对象，就可以被循环迭代</li>\n<li>定义 <code>__bool</code> 方法的对象，进行布尔值的判断时就会使用自定义的逻辑</li>\n</ol>\n"},{"title":"python拾遗_函数","date":"2019-10-08T03:05:31.000Z","_content":"## 函数\n\n1. 函数有机会给一组语句命名\n2. 函数可以减少重复代码\n3. 一长段程序可以拆分为多个函数，组合起来使用\n4. 一次书写, 多次调用。\n\n\n在函数内部 **实参**会赋值给**形参**的变量\n\n```\ndef print_twice(x):\n    print(x)\n    print(x)\na = print_twice('haha')\na == None  # True # 没有return,返回None  只会实现函数作用\n```\n#### 增量开发\n每次只增加和测试一小部分代码，来避免长时间的调试过程\n\neg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。\n\n1. 圆的面积\n```\nimport math\ndef area(radius):\n    return math.pi * radius **2\na = area(2)  # a 等于return的值\nprint(area(2),a)\n```\n2. 圆的半径\n```\ndef distance(x1, y1, x2, y2):\n   '''\n   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的\n   '''\n   dx = x2 -x1\n   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值\n   dsquared = dx ** 2 + dy ** 2  \n   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除\n   return result\n```\n3. 计算结果\n```\nradius = distance(x1, y1, x2, y2)\nresult = area(radius)\n```\n封装成一个函数\n```\ndef circle_area(x1, y1, x2, y2):\n    radius = distance(x1, y1, x2, y2)\n    result = area(radius)\n    return result\n```\n简化  \n```\ndef circle_area(x1, y1, x2, y2):\n    return area(distance(x1, y1, x2, y2))\ncircle_area(0, 0, 2, 2)  # 25.132741228718352\n```\n\n### 递归\n调用自己的函数称为 **递归的函数**，执行过程称为**递归**\n\n无限递归,会在递归深度到上限时报错\n```\ndef recurse():\n    recurse()\nrecurse()  # RecursionError: maximum recursion depth exceeded\n```\n\n```\ndef print_n(s, n):\n    if n <= 0:\n        retrun\n    print(s)\n    print_n(s,n-1)\nprint_n('haha', 5)\n```\n\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    elif n <= 0:\n        print('haha')\n    else:\n        print(n)\n        countdown(n-1)\ncountdown(10000000000000)  \n```\n\nwhile 循环\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    while n > 0:\n        print(n)\n        n -= 1\n    print('haha')\ncountdown(10000000000000)  \n```\n\n```\nwhile 1:\n    line = input('>')\n    if line == 'done':\n        break   #  使用 break 退出循环\n    print(line)\n```\n","source":"_posts/python练习/python拾遗_函数.md","raw":"\n---\ntitle: python拾遗_函数\ndate: 2019-10-08 11:05:31\ntags:\ncategories: python练习\n---\n## 函数\n\n1. 函数有机会给一组语句命名\n2. 函数可以减少重复代码\n3. 一长段程序可以拆分为多个函数，组合起来使用\n4. 一次书写, 多次调用。\n\n\n在函数内部 **实参**会赋值给**形参**的变量\n\n```\ndef print_twice(x):\n    print(x)\n    print(x)\na = print_twice('haha')\na == None  # True # 没有return,返回None  只会实现函数作用\n```\n#### 增量开发\n每次只增加和测试一小部分代码，来避免长时间的调试过程\n\neg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。\n\n1. 圆的面积\n```\nimport math\ndef area(radius):\n    return math.pi * radius **2\na = area(2)  # a 等于return的值\nprint(area(2),a)\n```\n2. 圆的半径\n```\ndef distance(x1, y1, x2, y2):\n   '''\n   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的\n   '''\n   dx = x2 -x1\n   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值\n   dsquared = dx ** 2 + dy ** 2  \n   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除\n   return result\n```\n3. 计算结果\n```\nradius = distance(x1, y1, x2, y2)\nresult = area(radius)\n```\n封装成一个函数\n```\ndef circle_area(x1, y1, x2, y2):\n    radius = distance(x1, y1, x2, y2)\n    result = area(radius)\n    return result\n```\n简化  \n```\ndef circle_area(x1, y1, x2, y2):\n    return area(distance(x1, y1, x2, y2))\ncircle_area(0, 0, 2, 2)  # 25.132741228718352\n```\n\n### 递归\n调用自己的函数称为 **递归的函数**，执行过程称为**递归**\n\n无限递归,会在递归深度到上限时报错\n```\ndef recurse():\n    recurse()\nrecurse()  # RecursionError: maximum recursion depth exceeded\n```\n\n```\ndef print_n(s, n):\n    if n <= 0:\n        retrun\n    print(s)\n    print_n(s,n-1)\nprint_n('haha', 5)\n```\n\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    elif n <= 0:\n        print('haha')\n    else:\n        print(n)\n        countdown(n-1)\ncountdown(10000000000000)  \n```\n\nwhile 循环\n```\ndef countdown(n):\n    if n > 100000:   # 守卫,保护后面代码，避免出现错误\n        print('over limit')  \n        return  \n    while n > 0:\n        print(n)\n        n -= 1\n    print('haha')\ncountdown(10000000000000)  \n```\n\n```\nwhile 1:\n    line = input('>')\n    if line == 'done':\n        break   #  使用 break 退出循环\n    print(line)\n```\n","slug":"python练习/python拾遗_函数","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5j0068tssafb8thblv","content":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数有机会给一组语句命名</li>\n<li>函数可以减少重复代码</li>\n<li>一长段程序可以拆分为多个函数，组合起来使用</li>\n<li>一次书写, 多次调用。</li>\n</ol>\n<p>在函数内部 <strong>实参</strong>会赋值给<strong>形参</strong>的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_twice(x):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">a = print_twice(&apos;haha&apos;)</span><br><span class=\"line\">a == None  # True # 没有return,返回None  只会实现函数作用</span><br></pre></td></tr></table></figure>\n<h4 id=\"增量开发\"><a href=\"#增量开发\" class=\"headerlink\" title=\"增量开发\"></a>增量开发</h4><p>每次只增加和测试一小部分代码，来避免长时间的调试过程</p>\n<p>eg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。</p>\n<ol>\n<li><p>圆的面积</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">def area(radius):</span><br><span class=\"line\">    return math.pi * radius **2</span><br><span class=\"line\">a = area(2)  # a 等于return的值</span><br><span class=\"line\">print(area(2),a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>圆的半径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def distance(x1, y1, x2, y2):</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   dx = x2 -x1</span><br><span class=\"line\">   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值</span><br><span class=\"line\">   dsquared = dx ** 2 + dy ** 2  </span><br><span class=\"line\">   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除</span><br><span class=\"line\">   return result</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">result = area(radius)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>封装成一个函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">    result = area(radius)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<p>简化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    return area(distance(x1, y1, x2, y2))</span><br><span class=\"line\">circle_area(0, 0, 2, 2)  # 25.132741228718352</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>调用自己的函数称为 <strong>递归的函数</strong>，执行过程称为<strong>递归</strong></p>\n<p>无限递归,会在递归深度到上限时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def recurse():</span><br><span class=\"line\">    recurse()</span><br><span class=\"line\">recurse()  # RecursionError: maximum recursion depth exceeded</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_n(s, n):</span><br><span class=\"line\">    if n &lt;= 0:</span><br><span class=\"line\">        retrun</span><br><span class=\"line\">    print(s)</span><br><span class=\"line\">    print_n(s,n-1)</span><br><span class=\"line\">print_n(&apos;haha&apos;, 5)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    elif n &lt;= 0:</span><br><span class=\"line\">        print(&apos;haha&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        countdown(n-1)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure>\n<p>while 循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\">    print(&apos;haha&apos;)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 1:</span><br><span class=\"line\">    line = input(&apos;&gt;&apos;)</span><br><span class=\"line\">    if line == &apos;done&apos;:</span><br><span class=\"line\">        break   #  使用 break 退出循环</span><br><span class=\"line\">    print(line)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数有机会给一组语句命名</li>\n<li>函数可以减少重复代码</li>\n<li>一长段程序可以拆分为多个函数，组合起来使用</li>\n<li>一次书写, 多次调用。</li>\n</ol>\n<p>在函数内部 <strong>实参</strong>会赋值给<strong>形参</strong>的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_twice(x):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">a = print_twice(&apos;haha&apos;)</span><br><span class=\"line\">a == None  # True # 没有return,返回None  只会实现函数作用</span><br></pre></td></tr></table></figure>\n<h4 id=\"增量开发\"><a href=\"#增量开发\" class=\"headerlink\" title=\"增量开发\"></a>增量开发</h4><p>每次只增加和测试一小部分代码，来避免长时间的调试过程</p>\n<p>eg: 圆心坐标(x1,y1)例如(0,0),圆上一点的坐标(x2,y2)例如(2,2), 计算圆的面积。</p>\n<ol>\n<li><p>圆的面积</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">def area(radius):</span><br><span class=\"line\">    return math.pi * radius **2</span><br><span class=\"line\">a = area(2)  # a 等于return的值</span><br><span class=\"line\">print(area(2),a)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>圆的半径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def distance(x1, y1, x2, y2):</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   计算两点之间的距离   文档字符串，一般用来简明的解释函数是用来做什么的</span><br><span class=\"line\">   &apos;&apos;&apos;</span><br><span class=\"line\">   dx = x2 -x1</span><br><span class=\"line\">   dy = y2 -y1    # 临时变量，在计算中可以用来保存中间计算值</span><br><span class=\"line\">   dsquared = dx ** 2 + dy ** 2  </span><br><span class=\"line\">   result = math.sqrt(dsquared)  # 脚手架代码，构建时有用，最终可以删除</span><br><span class=\"line\">   return result</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>计算结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">result = area(radius)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>封装成一个函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    radius = distance(x1, y1, x2, y2)</span><br><span class=\"line\">    result = area(radius)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure></p>\n<p>简化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def circle_area(x1, y1, x2, y2):</span><br><span class=\"line\">    return area(distance(x1, y1, x2, y2))</span><br><span class=\"line\">circle_area(0, 0, 2, 2)  # 25.132741228718352</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>调用自己的函数称为 <strong>递归的函数</strong>，执行过程称为<strong>递归</strong></p>\n<p>无限递归,会在递归深度到上限时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def recurse():</span><br><span class=\"line\">    recurse()</span><br><span class=\"line\">recurse()  # RecursionError: maximum recursion depth exceeded</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_n(s, n):</span><br><span class=\"line\">    if n &lt;= 0:</span><br><span class=\"line\">        retrun</span><br><span class=\"line\">    print(s)</span><br><span class=\"line\">    print_n(s,n-1)</span><br><span class=\"line\">print_n(&apos;haha&apos;, 5)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    elif n &lt;= 0:</span><br><span class=\"line\">        print(&apos;haha&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        countdown(n-1)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure>\n<p>while 循环<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def countdown(n):</span><br><span class=\"line\">    if n &gt; 100000:   # 守卫,保护后面代码，避免出现错误</span><br><span class=\"line\">        print(&apos;over limit&apos;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        print(n)</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\">    print(&apos;haha&apos;)</span><br><span class=\"line\">countdown(10000000000000)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 1:</span><br><span class=\"line\">    line = input(&apos;&gt;&apos;)</span><br><span class=\"line\">    if line == &apos;done&apos;:</span><br><span class=\"line\">        break   #  使用 break 退出循环</span><br><span class=\"line\">    print(line)</span><br></pre></td></tr></table></figure>\n"},{"title":"python的日志模块","date":"2019-07-10T03:05:31.000Z","_content":"\n## 日志概述\n1. 日志会记录下操作，运行的一些相关内容\n2. 查看日志是获取信息，排查异常，发现问题的最好途径\n3. 日志可在控制台显示，也可以记录到文件中，或者同时输出\n4. 日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分\n5. python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。\n\n```\nDEBUG : 详细信息一般只在调试问题时使用\nINFO : 事情按预期进行\nWARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。\nERROR : 更严重的问题，软件的一部分功能已不能被执行\nCRITICAL ： 严重错误，表明软件不能继续运行\n```\n6. logging 的四大组件\n```\n日志器  Logger     提供了应用程序一直使用的接口\n处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出\n过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n格式器  Formatter  决定日志记录的最终输出格式\n\nlogger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理\n```\n\n## 日志输出\n### 输出到控制台\npython 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。\n```\nimport logging\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\nlogging 提供 basciConfig 让使用者可以适时调整默认日志级别\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n### 输出到文件\n在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    filename='test.log',\n                    filemode='a')\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n## 同时输出到文件及控制器\n[对比](https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py)\n```\nimport os\nimport logging\nimport uuid\nfrom logging import Handler, FileHandler, StreamHandler\n\n\nclass PathFileHandler(FileHandler):\n    def __init__(self, path, filename, mode = 'a', encoding = None, delay = False):\n        filename = os.fspath(filename)\n        if not os.path.exists(path):\n            os.mkdir(path)\n        self.baseFilename = os.path.join(path, filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay =delay\n        if delay:\n            Handler.__init__(self)\n            self.stream = None\n        else:\n            StreamHandler.__init__(self, self._open())\n\n\nclass Loggers():\n    level_relations = {\n        'debug' : logging.DEBUG, 'info' : logging.INFO, 'warning' : logging.WARNING,\n        'error' : logging.ERROR, 'critical' : logging.CRITICAL\n    }\n    uid = uuid.uuid4()\n    def __init__(self, filename = f'{uid}.log', level = 'info', log_dir = 'log',\n                 fmt = \"[%(asctime)s] [%(levelname)8s]  %(message)s\"\n                 ):\n        self.logger =logging.getLogger(filename)\n        abspath = os.path.dirname(os.path.abspath(__file__))\n        self.directory = os.path.join(abspath, log_dir)\n        format_str = logging.Formatter(fmt)\n        self.logger.setLevel(self.level_relations.get(level))\n        stream_handler = logging.StreamHandler()\n        stream_handler.setFormatter(format_str)\n        file_handler = PathFileHandler(path=self.directory, filename=filename, mode='a')\n        file_handler.setFormatter(format_str)\n        self.logger.addHandler(stream_handler)\n        self.logger.addHandler(file_handler)\n\n\nif __name__ == '__main__':\n    text = 'hahaha'\n    log = Loggers(level='debug')\n    log.logger.info(4)\n    log.logger.info(5)\n    log.logger.info(text)\n```\n\n","source":"_posts/python练习/python日志模块.md","raw":"\n---\ntitle: python的日志模块\ndate: 2019-07-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## 日志概述\n1. 日志会记录下操作，运行的一些相关内容\n2. 查看日志是获取信息，排查异常，发现问题的最好途径\n3. 日志可在控制台显示，也可以记录到文件中，或者同时输出\n4. 日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分\n5. python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。\n\n```\nDEBUG : 详细信息一般只在调试问题时使用\nINFO : 事情按预期进行\nWARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。\nERROR : 更严重的问题，软件的一部分功能已不能被执行\nCRITICAL ： 严重错误，表明软件不能继续运行\n```\n6. logging 的四大组件\n```\n日志器  Logger     提供了应用程序一直使用的接口\n处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出\n过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录\n格式器  Formatter  决定日志记录的最终输出格式\n\nlogger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理\n```\n\n## 日志输出\n### 输出到控制台\npython 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。\n```\nimport logging\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\nlogging 提供 basciConfig 让使用者可以适时调整默认日志级别\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n### 输出到文件\n在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)\n```\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG,\n                    filename='test.log',\n                    filemode='a')\n\nlogging.info('info message')\nlogging.warning('warning message')\nlogging.error('error message')\n```\n## 同时输出到文件及控制器\n[对比](https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py)\n```\nimport os\nimport logging\nimport uuid\nfrom logging import Handler, FileHandler, StreamHandler\n\n\nclass PathFileHandler(FileHandler):\n    def __init__(self, path, filename, mode = 'a', encoding = None, delay = False):\n        filename = os.fspath(filename)\n        if not os.path.exists(path):\n            os.mkdir(path)\n        self.baseFilename = os.path.join(path, filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay =delay\n        if delay:\n            Handler.__init__(self)\n            self.stream = None\n        else:\n            StreamHandler.__init__(self, self._open())\n\n\nclass Loggers():\n    level_relations = {\n        'debug' : logging.DEBUG, 'info' : logging.INFO, 'warning' : logging.WARNING,\n        'error' : logging.ERROR, 'critical' : logging.CRITICAL\n    }\n    uid = uuid.uuid4()\n    def __init__(self, filename = f'{uid}.log', level = 'info', log_dir = 'log',\n                 fmt = \"[%(asctime)s] [%(levelname)8s]  %(message)s\"\n                 ):\n        self.logger =logging.getLogger(filename)\n        abspath = os.path.dirname(os.path.abspath(__file__))\n        self.directory = os.path.join(abspath, log_dir)\n        format_str = logging.Formatter(fmt)\n        self.logger.setLevel(self.level_relations.get(level))\n        stream_handler = logging.StreamHandler()\n        stream_handler.setFormatter(format_str)\n        file_handler = PathFileHandler(path=self.directory, filename=filename, mode='a')\n        file_handler.setFormatter(format_str)\n        self.logger.addHandler(stream_handler)\n        self.logger.addHandler(file_handler)\n\n\nif __name__ == '__main__':\n    text = 'hahaha'\n    log = Loggers(level='debug')\n    log.logger.info(4)\n    log.logger.info(5)\n    log.logger.info(text)\n```\n\n","slug":"python练习/python日志模块","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5l0069tssau2mhkpfv","content":"<h2 id=\"日志概述\"><a href=\"#日志概述\" class=\"headerlink\" title=\"日志概述\"></a>日志概述</h2><ol>\n<li>日志会记录下操作，运行的一些相关内容</li>\n<li>查看日志是获取信息，排查异常，发现问题的最好途径</li>\n<li>日志可在控制台显示，也可以记录到文件中，或者同时输出</li>\n<li>日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分</li>\n<li>python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG : 详细信息一般只在调试问题时使用</span><br><span class=\"line\">INFO : 事情按预期进行</span><br><span class=\"line\">WARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。</span><br><span class=\"line\">ERROR : 更严重的问题，软件的一部分功能已不能被执行</span><br><span class=\"line\">CRITICAL ： 严重错误，表明软件不能继续运行</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>logging 的四大组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志器  Logger     提供了应用程序一直使用的接口</span><br><span class=\"line\">处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出</span><br><span class=\"line\">过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</span><br><span class=\"line\">格式器  Formatter  决定日志记录的最终输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">logger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日志输出\"><a href=\"#日志输出\" class=\"headerlink\" title=\"日志输出\"></a>日志输出</h2><h3 id=\"输出到控制台\"><a href=\"#输出到控制台\" class=\"headerlink\" title=\"输出到控制台\"></a>输出到控制台</h3><p>python 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>logging 提供 basciConfig 让使用者可以适时调整默认日志级别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h3><p>在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG,</span><br><span class=\"line\">                    filename=&apos;test.log&apos;,</span><br><span class=\"line\">                    filemode=&apos;a&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"同时输出到文件及控制器\"><a href=\"#同时输出到文件及控制器\" class=\"headerlink\" title=\"同时输出到文件及控制器\"></a>同时输出到文件及控制器</h2><p><a href=\"https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py\" target=\"_blank\" rel=\"noopener\">对比</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import uuid</span><br><span class=\"line\">from logging import Handler, FileHandler, StreamHandler</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PathFileHandler(FileHandler):</span><br><span class=\"line\">    def __init__(self, path, filename, mode = &apos;a&apos;, encoding = None, delay = False):</span><br><span class=\"line\">        filename = os.fspath(filename)</span><br><span class=\"line\">        if not os.path.exists(path):</span><br><span class=\"line\">            os.mkdir(path)</span><br><span class=\"line\">        self.baseFilename = os.path.join(path, filename)</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\">        self.encoding = encoding</span><br><span class=\"line\">        self.delay =delay</span><br><span class=\"line\">        if delay:</span><br><span class=\"line\">            Handler.__init__(self)</span><br><span class=\"line\">            self.stream = None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            StreamHandler.__init__(self, self._open())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Loggers():</span><br><span class=\"line\">    level_relations = &#123;</span><br><span class=\"line\">        &apos;debug&apos; : logging.DEBUG, &apos;info&apos; : logging.INFO, &apos;warning&apos; : logging.WARNING,</span><br><span class=\"line\">        &apos;error&apos; : logging.ERROR, &apos;critical&apos; : logging.CRITICAL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    uid = uuid.uuid4()</span><br><span class=\"line\">    def __init__(self, filename = f&apos;&#123;uid&#125;.log&apos;, level = &apos;info&apos;, log_dir = &apos;log&apos;,</span><br><span class=\"line\">                 fmt = &quot;[%(asctime)s] [%(levelname)8s]  %(message)s&quot;</span><br><span class=\"line\">                 ):</span><br><span class=\"line\">        self.logger =logging.getLogger(filename)</span><br><span class=\"line\">        abspath = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">        self.directory = os.path.join(abspath, log_dir)</span><br><span class=\"line\">        format_str = logging.Formatter(fmt)</span><br><span class=\"line\">        self.logger.setLevel(self.level_relations.get(level))</span><br><span class=\"line\">        stream_handler = logging.StreamHandler()</span><br><span class=\"line\">        stream_handler.setFormatter(format_str)</span><br><span class=\"line\">        file_handler = PathFileHandler(path=self.directory, filename=filename, mode=&apos;a&apos;)</span><br><span class=\"line\">        file_handler.setFormatter(format_str)</span><br><span class=\"line\">        self.logger.addHandler(stream_handler)</span><br><span class=\"line\">        self.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    text = &apos;hahaha&apos;</span><br><span class=\"line\">    log = Loggers(level=&apos;debug&apos;)</span><br><span class=\"line\">    log.logger.info(4)</span><br><span class=\"line\">    log.logger.info(5)</span><br><span class=\"line\">    log.logger.info(text)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日志概述\"><a href=\"#日志概述\" class=\"headerlink\" title=\"日志概述\"></a>日志概述</h2><ol>\n<li>日志会记录下操作，运行的一些相关内容</li>\n<li>查看日志是获取信息，排查异常，发现问题的最好途径</li>\n<li>日志可在控制台显示，也可以记录到文件中，或者同时输出</li>\n<li>日志级别 一般指的是： DEBUG, INFO, WARNING, ERROR, CRITICAL 等严重等级进行划分</li>\n<li>python 的 logging 提供了一组便利的日志函数，分别是： debug(), info(), warning(), error(), critical()。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG : 详细信息一般只在调试问题时使用</span><br><span class=\"line\">INFO : 事情按预期进行</span><br><span class=\"line\">WARNNING : 某些没有预料到的事件提示，或者将来可能出现问题的提示。</span><br><span class=\"line\">ERROR : 更严重的问题，软件的一部分功能已不能被执行</span><br><span class=\"line\">CRITICAL ： 严重错误，表明软件不能继续运行</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>logging 的四大组件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">日志器  Logger     提供了应用程序一直使用的接口</span><br><span class=\"line\">处理器  Handler    将 logger 创建的日志记录发送到合适的目的输出</span><br><span class=\"line\">过滤器  Filter     提供更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</span><br><span class=\"line\">格式器  Formatter  决定日志记录的最终输出格式</span><br><span class=\"line\"></span><br><span class=\"line\">logger 是入口，真正工作的是 handler, handler 还可以通过 filter 和 formatter 对要输出的日志内容做过滤和格式化处理</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"日志输出\"><a href=\"#日志输出\" class=\"headerlink\" title=\"日志输出\"></a>日志输出</h2><h3 id=\"输出到控制台\"><a href=\"#输出到控制台\" class=\"headerlink\" title=\"输出到控制台\"></a>输出到控制台</h3><p>python 中日志的默认等级是 WARNING, DEBUG 和 INFO 级别的日志不会得到显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>logging 提供 basciConfig 让使用者可以适时调整默认日志级别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h3><p>在 basciConfig 中填写 filename(日志名) ,filemode(写入方式)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import logging</span><br><span class=\"line\"></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG,</span><br><span class=\"line\">                    filename=&apos;test.log&apos;,</span><br><span class=\"line\">                    filemode=&apos;a&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">logging.info(&apos;info message&apos;)</span><br><span class=\"line\">logging.warning(&apos;warning message&apos;)</span><br><span class=\"line\">logging.error(&apos;error message&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"同时输出到文件及控制器\"><a href=\"#同时输出到文件及控制器\" class=\"headerlink\" title=\"同时输出到文件及控制器\"></a>同时输出到文件及控制器</h2><p><a href=\"https://github.com/itswl/work/blob/master/%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88/script/logger.py\" target=\"_blank\" rel=\"noopener\">对比</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import uuid</span><br><span class=\"line\">from logging import Handler, FileHandler, StreamHandler</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PathFileHandler(FileHandler):</span><br><span class=\"line\">    def __init__(self, path, filename, mode = &apos;a&apos;, encoding = None, delay = False):</span><br><span class=\"line\">        filename = os.fspath(filename)</span><br><span class=\"line\">        if not os.path.exists(path):</span><br><span class=\"line\">            os.mkdir(path)</span><br><span class=\"line\">        self.baseFilename = os.path.join(path, filename)</span><br><span class=\"line\">        self.mode = mode</span><br><span class=\"line\">        self.encoding = encoding</span><br><span class=\"line\">        self.delay =delay</span><br><span class=\"line\">        if delay:</span><br><span class=\"line\">            Handler.__init__(self)</span><br><span class=\"line\">            self.stream = None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            StreamHandler.__init__(self, self._open())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Loggers():</span><br><span class=\"line\">    level_relations = &#123;</span><br><span class=\"line\">        &apos;debug&apos; : logging.DEBUG, &apos;info&apos; : logging.INFO, &apos;warning&apos; : logging.WARNING,</span><br><span class=\"line\">        &apos;error&apos; : logging.ERROR, &apos;critical&apos; : logging.CRITICAL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    uid = uuid.uuid4()</span><br><span class=\"line\">    def __init__(self, filename = f&apos;&#123;uid&#125;.log&apos;, level = &apos;info&apos;, log_dir = &apos;log&apos;,</span><br><span class=\"line\">                 fmt = &quot;[%(asctime)s] [%(levelname)8s]  %(message)s&quot;</span><br><span class=\"line\">                 ):</span><br><span class=\"line\">        self.logger =logging.getLogger(filename)</span><br><span class=\"line\">        abspath = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">        self.directory = os.path.join(abspath, log_dir)</span><br><span class=\"line\">        format_str = logging.Formatter(fmt)</span><br><span class=\"line\">        self.logger.setLevel(self.level_relations.get(level))</span><br><span class=\"line\">        stream_handler = logging.StreamHandler()</span><br><span class=\"line\">        stream_handler.setFormatter(format_str)</span><br><span class=\"line\">        file_handler = PathFileHandler(path=self.directory, filename=filename, mode=&apos;a&apos;)</span><br><span class=\"line\">        file_handler.setFormatter(format_str)</span><br><span class=\"line\">        self.logger.addHandler(stream_handler)</span><br><span class=\"line\">        self.logger.addHandler(file_handler)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    text = &apos;hahaha&apos;</span><br><span class=\"line\">    log = Loggers(level=&apos;debug&apos;)</span><br><span class=\"line\">    log.logger.info(4)</span><br><span class=\"line\">    log.logger.info(5)</span><br><span class=\"line\">    log.logger.info(text)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"关于import","date":"2019-07-08T03:05:31.000Z","_content":"```\nimport sys\nsys.path.append(\"..\") # 将上层目录加入路径.\nsys.path.append(\"/home\") # 将/home 加入路径.\n\n\n## 一个模块只能被导入一次\nfrom imp import *\nreload(sys) # 重新导入某模块\n```","source":"_posts/python练习/关于import路径.md","raw":"---\ntitle: 关于import\ndate: 2019-07-08 11:05:31\ntags:\ncategories: python练习\n---\n```\nimport sys\nsys.path.append(\"..\") # 将上层目录加入路径.\nsys.path.append(\"/home\") # 将/home 加入路径.\n\n\n## 一个模块只能被导入一次\nfrom imp import *\nreload(sys) # 重新导入某模块\n```","slug":"python练习/关于import路径","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5m006ctssac72f55lq","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.append(&quot;..&quot;) # 将上层目录加入路径.</span><br><span class=\"line\">sys.path.append(&quot;/home&quot;) # 将/home 加入路径.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 一个模块只能被导入一次</span><br><span class=\"line\">from imp import *</span><br><span class=\"line\">reload(sys) # 重新导入某模块</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.append(&quot;..&quot;) # 将上层目录加入路径.</span><br><span class=\"line\">sys.path.append(&quot;/home&quot;) # 将/home 加入路径.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 一个模块只能被导入一次</span><br><span class=\"line\">from imp import *</span><br><span class=\"line\">reload(sys) # 重新导入某模块</span><br></pre></td></tr></table></figure>"},{"title":"优雅的python写法","date":"2019-07-11T03:05:31.000Z","_content":"\n# 学习python cook book 有感\n\n## 1. 交换变量\n```\na, b = b, a \n```\n## 2. 循环遍历区间\n```\nfor i in range(6):\n    print (i)\n```    \n## 3. 带有索引位置的集合遍历\n```\nfor i, color in enumerate(colors):\n    print (i ,colors[i])\n```\n## 4. 字符串拼接\n```\nprint '. ' .join(names)  \n'''\njoin 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象\n'''\n```\n现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）\n## 5. 打开/关闭文件\n```\nwith open ('xxx.xxx','r') as f:\n    data = f.read()\n```   \n## 6. 列表推导式\n```\n[i for i in range(10)]\n```\n## 7. 善用装饰器\n```\n'''\n装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用\nurl 曾使用过直接从cache读出，没有的话存到saved中\n'''\nimport urllib.request as urllib\n\ndef cache(func):\n    saved = {}\n    \n    def wrapper(url):\n        if url in saved:\n            return saved[url]\n        else:\n            page = func(url)\n            saved[url] = page\n            return page\n        \n        return wrapper \n        \n@cache\ndef web_lookup(url):\n    return urllib.urlopen(url).read()\n```\n## 8. 合理使用列表\n```\n'''\nlist是一个查询效率高于更新操作的数据结构,\n删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动\n'''\nfrom collections import deque\nnames = deque([1, 2, 3, 4, 'haha'])\nnames.popleft()\nnames.appendleft('mark')\n\n'''\ndeque 是一个双向队列的数据结构，删除元素和插入元素会很快\n'''\n```\n## 9. 序列解包\n```\np = '1' ,  '2' , '3' , 4 \na, b, c, d, = p\n```\n\n## 10. 遍历字典的 key 和 value\n```\ndict ={1:'haha',2:'xixi'}\nfor key, value in dict.items():\n    print(key ,' + ', value)\n'''\ndict.items 返回迭代器对象，可节省更多的内存\n'''\n```\n## 11. 链式比较操作\n```\nage = 18\nif 18 < age < 60:\n    print('young man')\n    \nFalse == True == True == True\n# False \n```\n## 12. if/else\n```\ntext = '男' if gender == 'male' else '女'\n```\n## 13. True/Fales 值判断\n```\nif a:\n    do_someting()\nif b:\n    do_someting()\n'''\na,b 的值有就是True, 没有就是False\n'''\n```\n## 14. 字符串格式化\n```\na,b = 'haha', [1,2,3]\ns = f'str is {a}, list is {b}' \n'''\n不支持python2\n'''\n```\n## 15. 列表切片\n```\nitems = range(10)\nsub_items = items[1:4]  # 取第1号到第4号元素\nodd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）\ncopy_items = items[::]  # 或者 items[:]\n```\n## 16. 善用生成器\n```\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        yeild a \n        a ,b = b, a + b\n'''\n生成器的好处是无需一次性把所有元素加载到内存，\n只有迭代获取元素时才返回该元素，\n而列表是预先一次性把全部元素加载到内存中\n遇到 yield 会暂停执行另一个函数\n'''\n```\n# 17. 获取字典元素\n```\nd = {'name':'foo'}\nd.get('name','unknow')\nd.get('age','unknow')\n```\n# 18. 预设字典默认值\n```\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n\nfrom collections import defaultdict\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n```\n\n## 19 字典/列表/集合 推导式\n```\nnumbers = [1, 2, 3, 4]\nmy_dict = {number: number*2 for number in numbers}\nprint(my_dict)\n```\n\n## 20. for/else\n'''\npython 特有的语法格式，else中的代码在for 循环完所有元素成后执行\n'''\n```\nflagfound = False\nmylist = [1, 2, 3, 'theflag', 4, 5, 6]\nfor i in mylist:\n    if i == 'theflag':\n        flagfound = True\n        break\n    print(i)    \nelse:\n    raisd ValueError('list argument missing terminal flag')\n```\n## 21 一些特性\n### 给数字加\\_分组并不影响实际\n```\na = 11_22_33_44\nerror = 0xbad_c0ffee\n```\n### 将类型注释添加到函数和方法中\n```\ndef my_add(a:str,b:int) -> str:\n    return a + b\nmy_add(1,2)\n```\n### 直接操作数字\n```\nPI =3.141592653\nf'PI is {PI:.4f}'\n```\n","source":"_posts/python练习/优雅的python写法.md","raw":"\n---\ntitle: 优雅的python写法\ndate: 2019-07-11 11:05:31\ntags:\ncategories: python练习\n---\n\n# 学习python cook book 有感\n\n## 1. 交换变量\n```\na, b = b, a \n```\n## 2. 循环遍历区间\n```\nfor i in range(6):\n    print (i)\n```    \n## 3. 带有索引位置的集合遍历\n```\nfor i, color in enumerate(colors):\n    print (i ,colors[i])\n```\n## 4. 字符串拼接\n```\nprint '. ' .join(names)  \n'''\njoin 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象\n'''\n```\n现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）\n## 5. 打开/关闭文件\n```\nwith open ('xxx.xxx','r') as f:\n    data = f.read()\n```   \n## 6. 列表推导式\n```\n[i for i in range(10)]\n```\n## 7. 善用装饰器\n```\n'''\n装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用\nurl 曾使用过直接从cache读出，没有的话存到saved中\n'''\nimport urllib.request as urllib\n\ndef cache(func):\n    saved = {}\n    \n    def wrapper(url):\n        if url in saved:\n            return saved[url]\n        else:\n            page = func(url)\n            saved[url] = page\n            return page\n        \n        return wrapper \n        \n@cache\ndef web_lookup(url):\n    return urllib.urlopen(url).read()\n```\n## 8. 合理使用列表\n```\n'''\nlist是一个查询效率高于更新操作的数据结构,\n删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动\n'''\nfrom collections import deque\nnames = deque([1, 2, 3, 4, 'haha'])\nnames.popleft()\nnames.appendleft('mark')\n\n'''\ndeque 是一个双向队列的数据结构，删除元素和插入元素会很快\n'''\n```\n## 9. 序列解包\n```\np = '1' ,  '2' , '3' , 4 \na, b, c, d, = p\n```\n\n## 10. 遍历字典的 key 和 value\n```\ndict ={1:'haha',2:'xixi'}\nfor key, value in dict.items():\n    print(key ,' + ', value)\n'''\ndict.items 返回迭代器对象，可节省更多的内存\n'''\n```\n## 11. 链式比较操作\n```\nage = 18\nif 18 < age < 60:\n    print('young man')\n    \nFalse == True == True == True\n# False \n```\n## 12. if/else\n```\ntext = '男' if gender == 'male' else '女'\n```\n## 13. True/Fales 值判断\n```\nif a:\n    do_someting()\nif b:\n    do_someting()\n'''\na,b 的值有就是True, 没有就是False\n'''\n```\n## 14. 字符串格式化\n```\na,b = 'haha', [1,2,3]\ns = f'str is {a}, list is {b}' \n'''\n不支持python2\n'''\n```\n## 15. 列表切片\n```\nitems = range(10)\nsub_items = items[1:4]  # 取第1号到第4号元素\nodd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）\ncopy_items = items[::]  # 或者 items[:]\n```\n## 16. 善用生成器\n```\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        yeild a \n        a ,b = b, a + b\n'''\n生成器的好处是无需一次性把所有元素加载到内存，\n只有迭代获取元素时才返回该元素，\n而列表是预先一次性把全部元素加载到内存中\n遇到 yield 会暂停执行另一个函数\n'''\n```\n# 17. 获取字典元素\n```\nd = {'name':'foo'}\nd.get('name','unknow')\nd.get('age','unknow')\n```\n# 18. 预设字典默认值\n```\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n\nfrom collections import defaultdict\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n```\n\n## 19 字典/列表/集合 推导式\n```\nnumbers = [1, 2, 3, 4]\nmy_dict = {number: number*2 for number in numbers}\nprint(my_dict)\n```\n\n## 20. for/else\n'''\npython 特有的语法格式，else中的代码在for 循环完所有元素成后执行\n'''\n```\nflagfound = False\nmylist = [1, 2, 3, 'theflag', 4, 5, 6]\nfor i in mylist:\n    if i == 'theflag':\n        flagfound = True\n        break\n    print(i)    \nelse:\n    raisd ValueError('list argument missing terminal flag')\n```\n## 21 一些特性\n### 给数字加\\_分组并不影响实际\n```\na = 11_22_33_44\nerror = 0xbad_c0ffee\n```\n### 将类型注释添加到函数和方法中\n```\ndef my_add(a:str,b:int) -> str:\n    return a + b\nmy_add(1,2)\n```\n### 直接操作数字\n```\nPI =3.141592653\nf'PI is {PI:.4f}'\n```\n","slug":"python练习/优雅的python写法","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5n006etssaukkk1erj","content":"<h1 id=\"学习python-cook-book-有感\"><a href=\"#学习python-cook-book-有感\" class=\"headerlink\" title=\"学习python cook book 有感\"></a>学习python cook book 有感</h1><h2 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-循环遍历区间\"><a href=\"#2-循环遍历区间\" class=\"headerlink\" title=\"2. 循环遍历区间\"></a>2. 循环遍历区间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    print (i)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 3. 带有索引位置的集合遍历</span><br></pre></td></tr></table></figure>\n<p>for i, color in enumerate(colors):<br>    print (i ,colors[i])<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 4. 字符串拼接</span><br></pre></td></tr></table></figure></p>\n<p>print ‘. ‘ .join(names)<br>‘’’<br>join 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）</span><br><span class=\"line\">## 5. 打开/关闭文件</span><br></pre></td></tr></table></figure></p>\n<p>with open (‘xxx.xxx’,’r’) as f:<br>    data = f.read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6. 列表推导式</span><br></pre></td></tr></table></figure></p>\n<p>[i for i in range(10)]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 7. 善用装饰器</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用<br>url 曾使用过直接从cache读出，没有的话存到saved中<br>‘’’<br>import urllib.request as urllib</p>\n<p>def cache(func):<br>    saved = {}</p>\n<pre><code>def wrapper(url):\n    if url in saved:\n        return saved[url]\n    else:\n        page = func(url)\n        saved[url] = page\n        return page\n\n    return wrapper \n</code></pre><p>@cache<br>def web_lookup(url):<br>    return urllib.urlopen(url).read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 8. 合理使用列表</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>list是一个查询效率高于更新操作的数据结构,<br>删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动<br>‘’’<br>from collections import deque<br>names = deque([1, 2, 3, 4, ‘haha’])<br>names.popleft()<br>names.appendleft(‘mark’)</p>\n<p>‘’’<br>deque 是一个双向队列的数据结构，删除元素和插入元素会很快<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 9. 序列解包</span><br></pre></td></tr></table></figure></p>\n<p>p = ‘1’ ,  ‘2’ , ‘3’ , 4<br>a, b, c, d, = p<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 10. 遍历字典的 key 和 value</span><br></pre></td></tr></table></figure></p>\n<p>dict ={1:’haha’,2:’xixi’}<br>for key, value in dict.items():<br>    print(key ,’ + ‘, value)<br>‘’’<br>dict.items 返回迭代器对象，可节省更多的内存<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 11. 链式比较操作</span><br></pre></td></tr></table></figure></p>\n<p>age = 18<br>if 18 &lt; age &lt; 60:<br>    print(‘young man’)</p>\n<p>False == True == True == True</p>\n<h1 id=\"False\"><a href=\"#False\" class=\"headerlink\" title=\"False\"></a>False</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 12. if/else</span><br></pre></td></tr></table></figure>\n<p>text = ‘男’ if gender == ‘male’ else ‘女’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 13. True/Fales 值判断</span><br></pre></td></tr></table></figure></p>\n<p>if a:<br>    do_someting()<br>if b:<br>    do_someting()<br>‘’’<br>a,b 的值有就是True, 没有就是False<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 14. 字符串格式化</span><br></pre></td></tr></table></figure></p>\n<p>a,b = ‘haha’, [1,2,3]<br>s = f’str is {a}, list is {b}’<br>‘’’<br>不支持python2<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 15. 列表切片</span><br></pre></td></tr></table></figure></p>\n<p>items = range(10)<br>sub_items = items[1:4]  # 取第1号到第4号元素<br>odd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）<br>copy_items = items[::]  # 或者 items[:]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 16. 善用生成器</span><br></pre></td></tr></table></figure></p>\n<p>def fib(n):<br>    a, b = 0, 1<br>    while a &lt; n:<br>        yeild a<br>        a ,b = b, a + b<br>‘’’<br>生成器的好处是无需一次性把所有元素加载到内存，<br>只有迭代获取元素时才返回该元素，<br>而列表是预先一次性把全部元素加载到内存中<br>遇到 yield 会暂停执行另一个函数<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17. 获取字典元素</span><br></pre></td></tr></table></figure></p>\n<p>d = {‘name’:’foo’}<br>d.get(‘name’,’unknow’)<br>d.get(‘age’,’unknow’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 18. 预设字典默认值</span><br></pre></td></tr></table></figure></p>\n<p>groups = {}<br>for (key, value) in data:<br>    groups.setdefault(key, []).append(value)</p>\n<p>from collections import defaultdict<br>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 19 字典/列表/集合 推导式</span><br></pre></td></tr></table></figure></p>\n<p>numbers = [1, 2, 3, 4]<br>my_dict = {number: number*2 for number in numbers}<br>print(my_dict)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 20. for/else</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">python 特有的语法格式，else中的代码在for 循环完所有元素成后执行</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>flagfound = False<br>mylist = [1, 2, 3, ‘theflag’, 4, 5, 6]<br>for i in mylist:<br>    if i == ‘theflag’:<br>        flagfound = True<br>        break<br>    print(i)<br>else:<br>    raisd ValueError(‘list argument missing terminal flag’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 21 一些特性</span><br><span class=\"line\">### 给数字加\\_分组并不影响实际</span><br></pre></td></tr></table></figure></p>\n<p>a = 11_22_33_44<br>error = 0xbad_c0ffee<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 将类型注释添加到函数和方法中</span><br></pre></td></tr></table></figure></p>\n<p>def my_add(a:str,b:int) -&gt; str:<br>    return a + b<br>my_add(1,2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 直接操作数字</span><br></pre></td></tr></table></figure></p>\n<p>PI =3.141592653<br>f’PI is {PI:.4f}’<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习python-cook-book-有感\"><a href=\"#学习python-cook-book-有感\" class=\"headerlink\" title=\"学习python cook book 有感\"></a>学习python cook book 有感</h1><h2 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-循环遍历区间\"><a href=\"#2-循环遍历区间\" class=\"headerlink\" title=\"2. 循环遍历区间\"></a>2. 循环遍历区间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in range(6):</span><br><span class=\"line\">    print (i)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 3. 带有索引位置的集合遍历</span><br></pre></td></tr></table></figure>\n<p>for i, color in enumerate(colors):<br>    print (i ,colors[i])<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 4. 字符串拼接</span><br></pre></td></tr></table></figure></p>\n<p>print ‘. ‘ .join(names)<br>‘’’<br>join 方法全程只会产生一个字符串对象，而每执行一次 + 操作，就会在内存中生成一个新的字符串对象<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">现在已经可以直接使用加号，不会影响效率。（不要被落后的经验给拖累了）</span><br><span class=\"line\">## 5. 打开/关闭文件</span><br></pre></td></tr></table></figure></p>\n<p>with open (‘xxx.xxx’,’r’) as f:<br>    data = f.read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 6. 列表推导式</span><br></pre></td></tr></table></figure></p>\n<p>[i for i in range(10)]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 7. 善用装饰器</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>装饰器可以吧与业务逻辑无关的代码抽离出来，让代码保持干净清爽，且能多次利用<br>url 曾使用过直接从cache读出，没有的话存到saved中<br>‘’’<br>import urllib.request as urllib</p>\n<p>def cache(func):<br>    saved = {}</p>\n<pre><code>def wrapper(url):\n    if url in saved:\n        return saved[url]\n    else:\n        page = func(url)\n        saved[url] = page\n        return page\n\n    return wrapper \n</code></pre><p>@cache<br>def web_lookup(url):<br>    return urllib.urlopen(url).read()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 8. 合理使用列表</span><br></pre></td></tr></table></figure></p>\n<p>‘’’<br>list是一个查询效率高于更新操作的数据结构,<br>删除/插入 一个元素 执行的效率较低，因为还要对剩下的元素进行移动<br>‘’’<br>from collections import deque<br>names = deque([1, 2, 3, 4, ‘haha’])<br>names.popleft()<br>names.appendleft(‘mark’)</p>\n<p>‘’’<br>deque 是一个双向队列的数据结构，删除元素和插入元素会很快<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 9. 序列解包</span><br></pre></td></tr></table></figure></p>\n<p>p = ‘1’ ,  ‘2’ , ‘3’ , 4<br>a, b, c, d, = p<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 10. 遍历字典的 key 和 value</span><br></pre></td></tr></table></figure></p>\n<p>dict ={1:’haha’,2:’xixi’}<br>for key, value in dict.items():<br>    print(key ,’ + ‘, value)<br>‘’’<br>dict.items 返回迭代器对象，可节省更多的内存<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 11. 链式比较操作</span><br></pre></td></tr></table></figure></p>\n<p>age = 18<br>if 18 &lt; age &lt; 60:<br>    print(‘young man’)</p>\n<p>False == True == True == True</p>\n<h1 id=\"False\"><a href=\"#False\" class=\"headerlink\" title=\"False\"></a>False</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 12. if/else</span><br></pre></td></tr></table></figure>\n<p>text = ‘男’ if gender == ‘male’ else ‘女’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 13. True/Fales 值判断</span><br></pre></td></tr></table></figure></p>\n<p>if a:<br>    do_someting()<br>if b:<br>    do_someting()<br>‘’’<br>a,b 的值有就是True, 没有就是False<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 14. 字符串格式化</span><br></pre></td></tr></table></figure></p>\n<p>a,b = ‘haha’, [1,2,3]<br>s = f’str is {a}, list is {b}’<br>‘’’<br>不支持python2<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 15. 列表切片</span><br></pre></td></tr></table></figure></p>\n<p>items = range(10)<br>sub_items = items[1:4]  # 取第1号到第4号元素<br>odd_items = items[1::2]  # 第1号到最后面，步长为2 （奇数）<br>copy_items = items[::]  # 或者 items[:]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 16. 善用生成器</span><br></pre></td></tr></table></figure></p>\n<p>def fib(n):<br>    a, b = 0, 1<br>    while a &lt; n:<br>        yeild a<br>        a ,b = b, a + b<br>‘’’<br>生成器的好处是无需一次性把所有元素加载到内存，<br>只有迭代获取元素时才返回该元素，<br>而列表是预先一次性把全部元素加载到内存中<br>遇到 yield 会暂停执行另一个函数<br>‘’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 17. 获取字典元素</span><br></pre></td></tr></table></figure></p>\n<p>d = {‘name’:’foo’}<br>d.get(‘name’,’unknow’)<br>d.get(‘age’,’unknow’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 18. 预设字典默认值</span><br></pre></td></tr></table></figure></p>\n<p>groups = {}<br>for (key, value) in data:<br>    groups.setdefault(key, []).append(value)</p>\n<p>from collections import defaultdict<br>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 19 字典/列表/集合 推导式</span><br></pre></td></tr></table></figure></p>\n<p>numbers = [1, 2, 3, 4]<br>my_dict = {number: number*2 for number in numbers}<br>print(my_dict)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 20. for/else</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">python 特有的语法格式，else中的代码在for 循环完所有元素成后执行</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>flagfound = False<br>mylist = [1, 2, 3, ‘theflag’, 4, 5, 6]<br>for i in mylist:<br>    if i == ‘theflag’:<br>        flagfound = True<br>        break<br>    print(i)<br>else:<br>    raisd ValueError(‘list argument missing terminal flag’)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 21 一些特性</span><br><span class=\"line\">### 给数字加\\_分组并不影响实际</span><br></pre></td></tr></table></figure></p>\n<p>a = 11_22_33_44<br>error = 0xbad_c0ffee<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 将类型注释添加到函数和方法中</span><br></pre></td></tr></table></figure></p>\n<p>def my_add(a:str,b:int) -&gt; str:<br>    return a + b<br>my_add(1,2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 直接操作数字</span><br></pre></td></tr></table></figure></p>\n<p>PI =3.141592653<br>f’PI is {PI:.4f}’<br><code>`</code></p>\n"},{"title":"python里的特殊方法","date":"2019-10-09T03:05:31.000Z","_content":"\n## 特殊方法是什么\n是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。\n\n这些魔法方法 都是以双下划线`__`作为 前缀和后缀。\n\n## 初始化\n\n**`__new__()`创造实例， `__init__()`初始化实例。**\n\n`__init__()` 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。\n\n`__new__()` 才是最早被调用的方法 \n\n\n\n1. `__new__()`  : 先读取参数( 如类名称,args,和kwargs）, 然后 __new__() 方法把这些参数传递给 `__init__()` , `__new__(class_name, args, kwargs)`\n2. `__init__()` : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 `__init__(slef, args, kwargs)` \n3. `__del__()`  : 类的析构函数，定义一个对象被垃圾回收的行为。 `__del__(self)`\n\n```\nclass SimpleInit:\n    def __new__(cls):\n        print(\"__new__ is called\")\n        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下\n\n    def __init__(self, value=10):\n        print('__init__ is called')\n        print(\"self is: \", self)\n        self._list = [value]\n\n    def __del__(self):\n        print(self._list)\n        del self._list\n        print(self._list)\n\na = SimpleInit()\na.__del__()\n'''\n输出如下：\n__new__ is called   # __new__()创造实例， __init__()初始化实例\n__init__ is called\nself is:  <__main__.SimpleInit object at 0x0000017E8A132470>\n[10]\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-22-3666a9307d4d> in <module>\n----> 1 a.__del__()\n\n<ipython-input-21-cb926d3eed30> in __del__(self)\n     12         print(self._list)\n     13         del self._list\n---> 14         print(self._list)\n     15\n     16 a = SimpleInit()\n\nAttributeError: 'SimpleInit' object has no attribute '_list'\n'''\n```\n\n## 算术运算,增量赋值\n\n1.  `__add__(self.other)  +    __iadd__(self.other)  +=`\n2.  `__sub__(self.other)  -    __isub__(self.other)  -=`\n3.  `__mul__(self.other)  *    __imul__(self.other)  *=`\n4.  `__floordiv__(self.other) //   __ifloordiv__(self.other) //=`\n5.  `__div__(self.other) /   __idiv__(self.other) /=`\n5.  `__mod__(self.other)  %   __imod__(self.other)  %=`\n6.  `__and__(self.other)  &   __iand__(self.other)  &=`\n7.  `__or__(self.other)  |    __ior__(self.other)  |=`\n8.  `__xor__(self.other)  ^   __ixor__(self.other)  ^=`\n9.  `__pow__(self.other)  **   __ipow__(self.other)  **=`\n10. `__lshift__(self.other)  <<   __ilshift__(self.other)  <<=`\n11. `__rshift__(self.other)  >>   __irshift__(self.other)  >>=`\n```\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Simpleadder:\n    _elements:list = list\n\n    def __add__(self, other):\n        return self._elements + other._elements\n\n\na = Simpleadder([1,2,3,4,5])\nb = Simpleadder([4,5,6,7,8])\nprint(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])\nprint(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]\n```\n## 比较运算\n**python3.7 可使用dataclass**\n\n1. `__eq__(self.other)  ==`\n2. `__ne__(self.other)  !=`\n3. `__lt__(self.other)  <`\n4. `__gt__(self.other)  >`\n5. `__le__(self.other)  <=`\n6. `__ge__(self.other)  >=`\n\n## 类型转换\n1. `__int__(self)`      int\n2. `__long__(self)`     long\n3. `__float__(self) `   float\n4. `__complex__(self)`  complex\n5. `__oct__(self)`      octal (八进制)\n6. `__hex__(self)`      (十六进制)\n7. `__index__(self)`    转为int, 当对象被用于切片表达式\n\n## 最常用\n1. `__str__(self)` \n2. `__repr__(self)`  类似`__str__()`  str()主要用于人类可读, repr() 机器可读\n3. `__hash__(self)`  定义了行为调用hash()\n4. `__len__(self)`   返回容器长度\n5. `__getitem__(self)` __setitem__(self)\n6. `__delitem__(self)`  定义一个删除一个项目的行为\n7. `__iter__(self)`    返回一个迭代容器\n8. `__call__(self)`    使实例能够像函数一样被调用，同时不影响实例本身的生命周期\n\n**`__call__()`不影响一个实例的构造和析构。但是`__call__()`可以用来改变实例的内部成员的值**\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self):\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n\nx = X(1,2,3)\nprint(x)\nx()   #  把实例直接当函数调用\n```\n","source":"_posts/python练习/python里的特殊方法.md","raw":"---\ntitle: python里的特殊方法\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n## 特殊方法是什么\n是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。\n\n这些魔法方法 都是以双下划线`__`作为 前缀和后缀。\n\n## 初始化\n\n**`__new__()`创造实例， `__init__()`初始化实例。**\n\n`__init__()` 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。\n\n`__new__()` 才是最早被调用的方法 \n\n\n\n1. `__new__()`  : 先读取参数( 如类名称,args,和kwargs）, 然后 __new__() 方法把这些参数传递给 `__init__()` , `__new__(class_name, args, kwargs)`\n2. `__init__()` : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 `__init__(slef, args, kwargs)` \n3. `__del__()`  : 类的析构函数，定义一个对象被垃圾回收的行为。 `__del__(self)`\n\n```\nclass SimpleInit:\n    def __new__(cls):\n        print(\"__new__ is called\")\n        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下\n\n    def __init__(self, value=10):\n        print('__init__ is called')\n        print(\"self is: \", self)\n        self._list = [value]\n\n    def __del__(self):\n        print(self._list)\n        del self._list\n        print(self._list)\n\na = SimpleInit()\na.__del__()\n'''\n输出如下：\n__new__ is called   # __new__()创造实例， __init__()初始化实例\n__init__ is called\nself is:  <__main__.SimpleInit object at 0x0000017E8A132470>\n[10]\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-22-3666a9307d4d> in <module>\n----> 1 a.__del__()\n\n<ipython-input-21-cb926d3eed30> in __del__(self)\n     12         print(self._list)\n     13         del self._list\n---> 14         print(self._list)\n     15\n     16 a = SimpleInit()\n\nAttributeError: 'SimpleInit' object has no attribute '_list'\n'''\n```\n\n## 算术运算,增量赋值\n\n1.  `__add__(self.other)  +    __iadd__(self.other)  +=`\n2.  `__sub__(self.other)  -    __isub__(self.other)  -=`\n3.  `__mul__(self.other)  *    __imul__(self.other)  *=`\n4.  `__floordiv__(self.other) //   __ifloordiv__(self.other) //=`\n5.  `__div__(self.other) /   __idiv__(self.other) /=`\n5.  `__mod__(self.other)  %   __imod__(self.other)  %=`\n6.  `__and__(self.other)  &   __iand__(self.other)  &=`\n7.  `__or__(self.other)  |    __ior__(self.other)  |=`\n8.  `__xor__(self.other)  ^   __ixor__(self.other)  ^=`\n9.  `__pow__(self.other)  **   __ipow__(self.other)  **=`\n10. `__lshift__(self.other)  <<   __ilshift__(self.other)  <<=`\n11. `__rshift__(self.other)  >>   __irshift__(self.other)  >>=`\n```\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Simpleadder:\n    _elements:list = list\n\n    def __add__(self, other):\n        return self._elements + other._elements\n\n\na = Simpleadder([1,2,3,4,5])\nb = Simpleadder([4,5,6,7,8])\nprint(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])\nprint(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]\n```\n## 比较运算\n**python3.7 可使用dataclass**\n\n1. `__eq__(self.other)  ==`\n2. `__ne__(self.other)  !=`\n3. `__lt__(self.other)  <`\n4. `__gt__(self.other)  >`\n5. `__le__(self.other)  <=`\n6. `__ge__(self.other)  >=`\n\n## 类型转换\n1. `__int__(self)`      int\n2. `__long__(self)`     long\n3. `__float__(self) `   float\n4. `__complex__(self)`  complex\n5. `__oct__(self)`      octal (八进制)\n6. `__hex__(self)`      (十六进制)\n7. `__index__(self)`    转为int, 当对象被用于切片表达式\n\n## 最常用\n1. `__str__(self)` \n2. `__repr__(self)`  类似`__str__()`  str()主要用于人类可读, repr() 机器可读\n3. `__hash__(self)`  定义了行为调用hash()\n4. `__len__(self)`   返回容器长度\n5. `__getitem__(self)` __setitem__(self)\n6. `__delitem__(self)`  定义一个删除一个项目的行为\n7. `__iter__(self)`    返回一个迭代容器\n8. `__call__(self)`    使实例能够像函数一样被调用，同时不影响实例本身的生命周期\n\n**`__call__()`不影响一个实例的构造和析构。但是`__call__()`可以用来改变实例的内部成员的值**\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self):\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n\nx = X(1,2,3)\nprint(x)\nx()   #  把实例直接当函数调用\n```\n","slug":"python练习/python里的特殊方法","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5o006gtssa900meou7","content":"<h2 id=\"特殊方法是什么\"><a href=\"#特殊方法是什么\" class=\"headerlink\" title=\"特殊方法是什么\"></a>特殊方法是什么</h2><p>是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。</p>\n<p>这些魔法方法 都是以双下划线<code>__</code>作为 前缀和后缀。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p><strong><code>__new__()</code>创造实例， <code>__init__()</code>初始化实例。</strong></p>\n<p><code>__init__()</code> 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。</p>\n<p><code>__new__()</code> 才是最早被调用的方法 </p>\n<ol>\n<li><code>__new__()</code>  : 先读取参数( 如类名称,args,和kwargs）, 然后 <strong>new</strong>() 方法把这些参数传递给 <code>__init__()</code> , <code>__new__(class_name, args, kwargs)</code></li>\n<li><code>__init__()</code> : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 <code>__init__(slef, args, kwargs)</code> </li>\n<li><code>__del__()</code>  : 类的析构函数，定义一个对象被垃圾回收的行为。 <code>__del__(self)</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SimpleInit:</span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        print(&quot;__new__ is called&quot;)</span><br><span class=\"line\">        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, value=10):</span><br><span class=\"line\">        print(&apos;__init__ is called&apos;)</span><br><span class=\"line\">        print(&quot;self is: &quot;, self)</span><br><span class=\"line\">        self._list = [value]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\">        del self._list</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\"></span><br><span class=\"line\">a = SimpleInit()</span><br><span class=\"line\">a.__del__()</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">__new__ is called   # __new__()创造实例， __init__()初始化实例</span><br><span class=\"line\">__init__ is called</span><br><span class=\"line\">self is:  &lt;__main__.SimpleInit object at 0x0000017E8A132470&gt;</span><br><span class=\"line\">[10]</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">AttributeError                            Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input-22-3666a9307d4d&gt; in &lt;module&gt;</span><br><span class=\"line\">----&gt; 1 a.__del__()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-21-cb926d3eed30&gt; in __del__(self)</span><br><span class=\"line\">     12         print(self._list)</span><br><span class=\"line\">     13         del self._list</span><br><span class=\"line\">---&gt; 14         print(self._list)</span><br><span class=\"line\">     15</span><br><span class=\"line\">     16 a = SimpleInit()</span><br><span class=\"line\"></span><br><span class=\"line\">AttributeError: &apos;SimpleInit&apos; object has no attribute &apos;_list&apos;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算-增量赋值\"><a href=\"#算术运算-增量赋值\" class=\"headerlink\" title=\"算术运算,增量赋值\"></a>算术运算,增量赋值</h2><ol>\n<li><code>__add__(self.other)  +    __iadd__(self.other)  +=</code></li>\n<li><code>__sub__(self.other)  -    __isub__(self.other)  -=</code></li>\n<li><code>__mul__(self.other)  *    __imul__(self.other)  *=</code></li>\n<li><code>__floordiv__(self.other) //   __ifloordiv__(self.other) //=</code></li>\n<li><code>__div__(self.other) /   __idiv__(self.other) /=</code></li>\n<li><code>__mod__(self.other)  %   __imod__(self.other)  %=</code></li>\n<li><code>__and__(self.other)  &amp;   __iand__(self.other)  &amp;=</code></li>\n<li><code>__or__(self.other)  |    __ior__(self.other)  |=</code></li>\n<li><code>__xor__(self.other)  ^   __ixor__(self.other)  ^=</code></li>\n<li><code>__pow__(self.other)  **   __ipow__(self.other)  **=</code></li>\n<li><code>__lshift__(self.other)  &lt;&lt;   __ilshift__(self.other)  &lt;&lt;=</code></li>\n<li><code>__rshift__(self.other)  &gt;&gt;   __irshift__(self.other)  &gt;&gt;=</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Simpleadder:</span><br><span class=\"line\">    _elements:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        return self._elements + other._elements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Simpleadder([1,2,3,4,5])</span><br><span class=\"line\">b = Simpleadder([4,5,6,7,8])</span><br><span class=\"line\">print(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])</span><br><span class=\"line\">print(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h2><p><strong>python3.7 可使用dataclass</strong></p>\n<ol>\n<li><code>__eq__(self.other)  ==</code></li>\n<li><code>__ne__(self.other)  !=</code></li>\n<li><code>__lt__(self.other)  &lt;</code></li>\n<li><code>__gt__(self.other)  &gt;</code></li>\n<li><code>__le__(self.other)  &lt;=</code></li>\n<li><code>__ge__(self.other)  &gt;=</code></li>\n</ol>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li><code>__int__(self)</code>      int</li>\n<li><code>__long__(self)</code>     long</li>\n<li><code>__float__(self)</code>   float</li>\n<li><code>__complex__(self)</code>  complex</li>\n<li><code>__oct__(self)</code>      octal (八进制)</li>\n<li><code>__hex__(self)</code>      (十六进制)</li>\n<li><code>__index__(self)</code>    转为int, 当对象被用于切片表达式</li>\n</ol>\n<h2 id=\"最常用\"><a href=\"#最常用\" class=\"headerlink\" title=\"最常用\"></a>最常用</h2><ol>\n<li><code>__str__(self)</code> </li>\n<li><code>__repr__(self)</code>  类似<code>__str__()</code>  str()主要用于人类可读, repr() 机器可读</li>\n<li><code>__hash__(self)</code>  定义了行为调用hash()</li>\n<li><code>__len__(self)</code>   返回容器长度</li>\n<li><code>__getitem__(self)</code> <strong>setitem</strong>(self)</li>\n<li><code>__delitem__(self)</code>  定义一个删除一个项目的行为</li>\n<li><code>__iter__(self)</code>    返回一个迭代容器</li>\n<li><code>__call__(self)</code>    使实例能够像函数一样被调用，同时不影响实例本身的生命周期</li>\n</ol>\n<p><strong><code>__call__()</code>不影响一个实例的构造和析构。但是<code>__call__()</code>可以用来改变实例的内部成员的值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self):</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x()   #  把实例直接当函数调用</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"特殊方法是什么\"><a href=\"#特殊方法是什么\" class=\"headerlink\" title=\"特殊方法是什么\"></a>特殊方法是什么</h2><p>是一种具有特殊魅力的正常方法，python通过这些方法可以赋予你的class魔力。</p>\n<p>这些魔法方法 都是以双下划线<code>__</code>作为 前缀和后缀。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p><strong><code>__new__()</code>创造实例， <code>__init__()</code>初始化实例。</strong></p>\n<p><code>__init__()</code> 是一个类 (class) 的第一个方法，也叫构造函数。 是第一个被创建，但不是第一个被执行的。</p>\n<p><code>__new__()</code> 才是最早被调用的方法 </p>\n<ol>\n<li><code>__new__()</code>  : 先读取参数( 如类名称,args,和kwargs）, 然后 <strong>new</strong>() 方法把这些参数传递给 <code>__init__()</code> , <code>__new__(class_name, args, kwargs)</code></li>\n<li><code>__init__()</code> : 类的初始化方法或构造方法, 几乎用于 全局的初始化目的。 <code>__init__(slef, args, kwargs)</code> </li>\n<li><code>__del__()</code>  : 类的析构函数，定义一个对象被垃圾回收的行为。 <code>__del__(self)</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SimpleInit:</span><br><span class=\"line\">    def __new__(cls):</span><br><span class=\"line\">        print(&quot;__new__ is called&quot;)</span><br><span class=\"line\">        return super(SimpleInit, cls).__new__(cls)  # 不过与python3.7后的dataclass 不兼容，dataclass 机制得好好看一下</span><br><span class=\"line\"></span><br><span class=\"line\">    def __init__(self, value=10):</span><br><span class=\"line\">        print(&apos;__init__ is called&apos;)</span><br><span class=\"line\">        print(&quot;self is: &quot;, self)</span><br><span class=\"line\">        self._list = [value]</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\">        del self._list</span><br><span class=\"line\">        print(self._list)</span><br><span class=\"line\"></span><br><span class=\"line\">a = SimpleInit()</span><br><span class=\"line\">a.__del__()</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">__new__ is called   # __new__()创造实例， __init__()初始化实例</span><br><span class=\"line\">__init__ is called</span><br><span class=\"line\">self is:  &lt;__main__.SimpleInit object at 0x0000017E8A132470&gt;</span><br><span class=\"line\">[10]</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">AttributeError                            Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input-22-3666a9307d4d&gt; in &lt;module&gt;</span><br><span class=\"line\">----&gt; 1 a.__del__()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ipython-input-21-cb926d3eed30&gt; in __del__(self)</span><br><span class=\"line\">     12         print(self._list)</span><br><span class=\"line\">     13         del self._list</span><br><span class=\"line\">---&gt; 14         print(self._list)</span><br><span class=\"line\">     15</span><br><span class=\"line\">     16 a = SimpleInit()</span><br><span class=\"line\"></span><br><span class=\"line\">AttributeError: &apos;SimpleInit&apos; object has no attribute &apos;_list&apos;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算-增量赋值\"><a href=\"#算术运算-增量赋值\" class=\"headerlink\" title=\"算术运算,增量赋值\"></a>算术运算,增量赋值</h2><ol>\n<li><code>__add__(self.other)  +    __iadd__(self.other)  +=</code></li>\n<li><code>__sub__(self.other)  -    __isub__(self.other)  -=</code></li>\n<li><code>__mul__(self.other)  *    __imul__(self.other)  *=</code></li>\n<li><code>__floordiv__(self.other) //   __ifloordiv__(self.other) //=</code></li>\n<li><code>__div__(self.other) /   __idiv__(self.other) /=</code></li>\n<li><code>__mod__(self.other)  %   __imod__(self.other)  %=</code></li>\n<li><code>__and__(self.other)  &amp;   __iand__(self.other)  &amp;=</code></li>\n<li><code>__or__(self.other)  |    __ior__(self.other)  |=</code></li>\n<li><code>__xor__(self.other)  ^   __ixor__(self.other)  ^=</code></li>\n<li><code>__pow__(self.other)  **   __ipow__(self.other)  **=</code></li>\n<li><code>__lshift__(self.other)  &lt;&lt;   __ilshift__(self.other)  &lt;&lt;=</code></li>\n<li><code>__rshift__(self.other)  &gt;&gt;   __irshift__(self.other)  &gt;&gt;=</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Simpleadder:</span><br><span class=\"line\">    _elements:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __add__(self, other):</span><br><span class=\"line\">        return self._elements + other._elements</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Simpleadder([1,2,3,4,5])</span><br><span class=\"line\">b = Simpleadder([4,5,6,7,8])</span><br><span class=\"line\">print(a, b)  # Simpleadder(_elements=[1, 2, 3, 4, 5]) Simpleadder(_elements=[4, 5, 6, 7, 8])</span><br><span class=\"line\">print(a + b)  # [1, 2, 3, 4, 5, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"比较运算\"><a href=\"#比较运算\" class=\"headerlink\" title=\"比较运算\"></a>比较运算</h2><p><strong>python3.7 可使用dataclass</strong></p>\n<ol>\n<li><code>__eq__(self.other)  ==</code></li>\n<li><code>__ne__(self.other)  !=</code></li>\n<li><code>__lt__(self.other)  &lt;</code></li>\n<li><code>__gt__(self.other)  &gt;</code></li>\n<li><code>__le__(self.other)  &lt;=</code></li>\n<li><code>__ge__(self.other)  &gt;=</code></li>\n</ol>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><ol>\n<li><code>__int__(self)</code>      int</li>\n<li><code>__long__(self)</code>     long</li>\n<li><code>__float__(self)</code>   float</li>\n<li><code>__complex__(self)</code>  complex</li>\n<li><code>__oct__(self)</code>      octal (八进制)</li>\n<li><code>__hex__(self)</code>      (十六进制)</li>\n<li><code>__index__(self)</code>    转为int, 当对象被用于切片表达式</li>\n</ol>\n<h2 id=\"最常用\"><a href=\"#最常用\" class=\"headerlink\" title=\"最常用\"></a>最常用</h2><ol>\n<li><code>__str__(self)</code> </li>\n<li><code>__repr__(self)</code>  类似<code>__str__()</code>  str()主要用于人类可读, repr() 机器可读</li>\n<li><code>__hash__(self)</code>  定义了行为调用hash()</li>\n<li><code>__len__(self)</code>   返回容器长度</li>\n<li><code>__getitem__(self)</code> <strong>setitem</strong>(self)</li>\n<li><code>__delitem__(self)</code>  定义一个删除一个项目的行为</li>\n<li><code>__iter__(self)</code>    返回一个迭代容器</li>\n<li><code>__call__(self)</code>    使实例能够像函数一样被调用，同时不影响实例本身的生命周期</li>\n</ol>\n<p><strong><code>__call__()</code>不影响一个实例的构造和析构。但是<code>__call__()</code>可以用来改变实例的内部成员的值</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self):</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">x()   #  把实例直接当函数调用</span><br></pre></td></tr></table></figure></p>\n"},{"title":"python里的一些函数","date":"2019-10-09T03:05:31.000Z","_content":"\n[参考](https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/)\n\n## 1. lambda 函数 （匿名函数）\n没有函数名的函数\n```\nx = lambda a,b : a*b\nprint(x(2,3))\n```\n## 2. Map 函数\nMap() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素\n```\nx = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])\nprint(x)  # <map object at 0x00000255474D24A8>  迭代器\nprint(list(x))  # [3, 7, 11, 15, 19] \n```\n## 3. filter 函数\n与 map()类似，但只返回True的元素\n```\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef filter_odd_numbers(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \nfiltered_numbers = filter(filter_odd_numbers, numbers)\nprint(filtered_numbers) # <filter object at 0x00000237EFD62438> \nprint(list(filtered_numbers))  # [2, 4, 6, 8]\n```\n## 4. any(),all()\n```\nx = [0, 2, 1]\nprint(all(x))  # False\nprint(any(x))  # True\n```\n## 5. zip()\nzip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表\n```\nkeys = ['a', 'b', 'c', 'd', 'e']\nvalues = [1, 2, 3, 3]\nzipped = dict(zip(keys, values))\nprint(zipped)  #  {'a': 1, 'b': 2, 'c': 3, 'd': 3}\n\nd = {k:v for k,v in zip(zipped.values(),zipped.keys())}\nprint(d)  # {1: 'a', 2: 'b', 3: 'd'}\n\n# 根据字典值的大小，对字典的项从大到小排序\nprint(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # {3: 'd', 2: 'b', 1: 'a'}\n```\n","source":"_posts/python练习/python的一些函数.md","raw":"---\ntitle: python里的一些函数\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n[参考](https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/)\n\n## 1. lambda 函数 （匿名函数）\n没有函数名的函数\n```\nx = lambda a,b : a*b\nprint(x(2,3))\n```\n## 2. Map 函数\nMap() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素\n```\nx = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])\nprint(x)  # <map object at 0x00000255474D24A8>  迭代器\nprint(list(x))  # [3, 7, 11, 15, 19] \n```\n## 3. filter 函数\n与 map()类似，但只返回True的元素\n```\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef filter_odd_numbers(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \nfiltered_numbers = filter(filter_odd_numbers, numbers)\nprint(filtered_numbers) # <filter object at 0x00000237EFD62438> \nprint(list(filtered_numbers))  # [2, 4, 6, 8]\n```\n## 4. any(),all()\n```\nx = [0, 2, 1]\nprint(all(x))  # False\nprint(any(x))  # True\n```\n## 5. zip()\nzip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表\n```\nkeys = ['a', 'b', 'c', 'd', 'e']\nvalues = [1, 2, 3, 3]\nzipped = dict(zip(keys, values))\nprint(zipped)  #  {'a': 1, 'b': 2, 'c': 3, 'd': 3}\n\nd = {k:v for k,v in zip(zipped.values(),zipped.keys())}\nprint(d)  # {1: 'a', 2: 'b', 3: 'd'}\n\n# 根据字典值的大小，对字典的项从大到小排序\nprint(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # {3: 'd', 2: 'b', 1: 'a'}\n```\n","slug":"python练习/python的一些函数","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5p006itssakxj0cpvq","content":"<p><a href=\"https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h2 id=\"1-lambda-函数-（匿名函数）\"><a href=\"#1-lambda-函数-（匿名函数）\" class=\"headerlink\" title=\"1. lambda 函数 （匿名函数）\"></a>1. lambda 函数 （匿名函数）</h2><p>没有函数名的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = lambda a,b : a*b</span><br><span class=\"line\">print(x(2,3))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Map-函数\"><a href=\"#2-Map-函数\" class=\"headerlink\" title=\"2. Map 函数\"></a>2. Map 函数</h2><p>Map() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])</span><br><span class=\"line\">print(x)  # &lt;map object at 0x00000255474D24A8&gt;  迭代器</span><br><span class=\"line\">print(list(x))  # [3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-filter-函数\"><a href=\"#3-filter-函数\" class=\"headerlink\" title=\"3. filter 函数\"></a>3. filter 函数</h2><p>与 map()类似，但只返回True的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">def filter_odd_numbers(num):</span><br><span class=\"line\">    if num % 2 == 0:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">        </span><br><span class=\"line\">filtered_numbers = filter(filter_odd_numbers, numbers)</span><br><span class=\"line\">print(filtered_numbers) # &lt;filter object at 0x00000237EFD62438&gt; </span><br><span class=\"line\">print(list(filtered_numbers))  # [2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-any-all\"><a href=\"#4-any-all\" class=\"headerlink\" title=\"4. any(),all()\"></a>4. any(),all()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [0, 2, 1]</span><br><span class=\"line\">print(all(x))  # False</span><br><span class=\"line\">print(any(x))  # True</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-zip\"><a href=\"#5-zip\" class=\"headerlink\" title=\"5. zip()\"></a>5. zip()</h2><p>zip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">values = [1, 2, 3, 3]</span><br><span class=\"line\">zipped = dict(zip(keys, values))</span><br><span class=\"line\">print(zipped)  #  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;k:v for k,v in zip(zipped.values(),zipped.keys())&#125;</span><br><span class=\"line\">print(d)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;d&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据字典值的大小，对字典的项从大到小排序</span><br><span class=\"line\">print(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # &#123;3: &apos;d&apos;, 2: &apos;b&apos;, 1: &apos;a&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://itswl.github.io/python%E5%9F%BA%E7%A1%80/python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h2 id=\"1-lambda-函数-（匿名函数）\"><a href=\"#1-lambda-函数-（匿名函数）\" class=\"headerlink\" title=\"1. lambda 函数 （匿名函数）\"></a>1. lambda 函数 （匿名函数）</h2><p>没有函数名的函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = lambda a,b : a*b</span><br><span class=\"line\">print(x(2,3))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-Map-函数\"><a href=\"#2-Map-函数\" class=\"headerlink\" title=\"2. Map 函数\"></a>2. Map 函数</h2><p>Map() 是 python 里的内置函数，它可以将 函数应用于各种数据结构中的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10,11])</span><br><span class=\"line\">print(x)  # &lt;map object at 0x00000255474D24A8&gt;  迭代器</span><br><span class=\"line\">print(list(x))  # [3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-filter-函数\"><a href=\"#3-filter-函数\" class=\"headerlink\" title=\"3. filter 函数\"></a>3. filter 函数</h2><p>与 map()类似，但只返回True的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">def filter_odd_numbers(num):</span><br><span class=\"line\">    if num % 2 == 0:</span><br><span class=\"line\">        return True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return False</span><br><span class=\"line\">        </span><br><span class=\"line\">filtered_numbers = filter(filter_odd_numbers, numbers)</span><br><span class=\"line\">print(filtered_numbers) # &lt;filter object at 0x00000237EFD62438&gt; </span><br><span class=\"line\">print(list(filtered_numbers))  # [2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-any-all\"><a href=\"#4-any-all\" class=\"headerlink\" title=\"4. any(),all()\"></a>4. any(),all()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [0, 2, 1]</span><br><span class=\"line\">print(all(x))  # False</span><br><span class=\"line\">print(any(x))  # True</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-zip\"><a href=\"#5-zip\" class=\"headerlink\" title=\"5. zip()\"></a>5. zip()</h2><p>zip() 函数 用于将可迭代对象作为参数，将对象中对应的元素打包成一个个元组，然后返回这些元组组成的列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class=\"line\">values = [1, 2, 3, 3]</span><br><span class=\"line\">zipped = dict(zip(keys, values))</span><br><span class=\"line\">print(zipped)  #  &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;k:v for k,v in zip(zipped.values(),zipped.keys())&#125;</span><br><span class=\"line\">print(d)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;d&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据字典值的大小，对字典的项从大到小排序</span><br><span class=\"line\">print(dict(sorted(d.items(),key=lambda x:x[1],reverse=True))) # &#123;3: &apos;d&apos;, 2: &apos;b&apos;, 1: &apos;a&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"多线程","date":"2019-10-10T03:05:31.000Z","_content":"\n## 添加线程\n```\nimport threading\n\ndef main1():\n    print(threading.active_count())   # 获取已激活的线程数\n    print(threading.enumerate()) # 查看所有线程信息\n    print(threading.current_thread())  # 查看现在正在运行的线程\n\ndef thread_job():\n    print('This is a thread of %s' % threading.current_thread())\n\ndef main():\n    thread = threading.Thread(target=thread_job,)  # 定义线程\n    thread.start()  # 让线程开始工作\n    \nif __name__ == '__main__':\n    main1()\n    main()\n\n```\n## join功能\n使用`join()`主线程一直等待全部的子线程结束之后，主线程自身才结束( `print('all done\\n')`)，程序退出\n```\nimport threading\nimport time\ndef T1_job():\n    print('T1 start\\n')\n    for i in range(10):\n        time.sleep(0.1)\n    print('T1 finish\\n')\n\ndef T2_job():\n    print('T2 start\\n')\n    print('T2 finish\\n')\n\ndef main():\n    T1_thread = threading.Thread(target=T1_job, name='T1')\n    T2_thread = threading.Thread(target=T2_job, name='T2')\n    T1_thread.start()\n    T2_thread.start()\n    T1_thread.join()\n    T2_thread.join()\n\n    print('all done\\n')\n    \nif __name__ == '__main__':\n    main()\n```\n### 线程锁\n不使用线程锁\n```\nimport threading\n\ndef job1():\n    global A\n    for i in range(10):\n        A+=1\n        print('job1',A)\n\ndef job2():\n    global A\n    for i in range(10):\n        A+=10\n        print('job2',A)\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果,很杂乱\n```\njob1 job21\n11job1\n job212\n22job1\njob2  3323\n\njob2job1  4344\n\njob2job1  5554\n\njob2job1  6566\n\njob2job1  7677\n\njob2job1  8788\n\njob2job1  9899\n\njob2job1  110109\n```\n#### 使用线程锁\n**lock在不同线程使用同一共享内存时，能够确保线程之间互不影响**\n```\nimport threading\n\ndef job1():\n    global A,lock\n    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问\n    for i in range(10):\n        A+=1\n        print('job1',A)\n    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存\n\ndef job2():\n    global A,lock\n    lock.acquire()\n    for i in range(10):\n        A+=10\n        print('job2',A)\n    lock.release()\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果\n```\njob1 1\njob1 2\njob1 3\njob1 4\njob1 5\njob1 6\njob1 7\njob1 8\njob1 9\njob1 10\njob2 20\njob2 30\njob2 40\njob2 50\njob2 60\njob2 70\njob2 80\njob2 90\njob2 100\njob2 110\n```\n### 储存进程结果 Queue\n```\nimport threading\nimport time\n\nfrom queue import Queue\n\ndef job(l,q):\n    '''\n    对列表的每个元素进行平方计算，将结果保存在队列中\n    '''\n    for i in range (len(l)):\n        l[i] = l[i]**2\n    q.put(l)  # 多线程调用的函数不能用return返回值\n\ndef multithreading():\n    q = Queue()   #  q 中存放返回值，代替return的返回值\n    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]\n    threads = []\n    \n    for i in range(4):\n        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面\n        t.start()  # 开始线程\n        threads.append(t)  # 把每个线程append到线程列表中\n        \n    for thread in threads:\n        thread.join()  # 分别join四个线程到主线程\n        \n    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results\n    for _ in range(4):\n        results.append(q.get())\n    print(results)\n\nif __name___=='__main__':\n    multithreading()\n```\n","source":"_posts/python练习/多线程.md","raw":"---\ntitle: 多线程\ndate: 2019-10-10 11:05:31\ntags:\ncategories: python练习\n---\n\n## 添加线程\n```\nimport threading\n\ndef main1():\n    print(threading.active_count())   # 获取已激活的线程数\n    print(threading.enumerate()) # 查看所有线程信息\n    print(threading.current_thread())  # 查看现在正在运行的线程\n\ndef thread_job():\n    print('This is a thread of %s' % threading.current_thread())\n\ndef main():\n    thread = threading.Thread(target=thread_job,)  # 定义线程\n    thread.start()  # 让线程开始工作\n    \nif __name__ == '__main__':\n    main1()\n    main()\n\n```\n## join功能\n使用`join()`主线程一直等待全部的子线程结束之后，主线程自身才结束( `print('all done\\n')`)，程序退出\n```\nimport threading\nimport time\ndef T1_job():\n    print('T1 start\\n')\n    for i in range(10):\n        time.sleep(0.1)\n    print('T1 finish\\n')\n\ndef T2_job():\n    print('T2 start\\n')\n    print('T2 finish\\n')\n\ndef main():\n    T1_thread = threading.Thread(target=T1_job, name='T1')\n    T2_thread = threading.Thread(target=T2_job, name='T2')\n    T1_thread.start()\n    T2_thread.start()\n    T1_thread.join()\n    T2_thread.join()\n\n    print('all done\\n')\n    \nif __name__ == '__main__':\n    main()\n```\n### 线程锁\n不使用线程锁\n```\nimport threading\n\ndef job1():\n    global A\n    for i in range(10):\n        A+=1\n        print('job1',A)\n\ndef job2():\n    global A\n    for i in range(10):\n        A+=10\n        print('job2',A)\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果,很杂乱\n```\njob1 job21\n11job1\n job212\n22job1\njob2  3323\n\njob2job1  4344\n\njob2job1  5554\n\njob2job1  6566\n\njob2job1  7677\n\njob2job1  8788\n\njob2job1  9899\n\njob2job1  110109\n```\n#### 使用线程锁\n**lock在不同线程使用同一共享内存时，能够确保线程之间互不影响**\n```\nimport threading\n\ndef job1():\n    global A,lock\n    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问\n    for i in range(10):\n        A+=1\n        print('job1',A)\n    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存\n\ndef job2():\n    global A,lock\n    lock.acquire()\n    for i in range(10):\n        A+=10\n        print('job2',A)\n    lock.release()\n\nif __name__== '__main__':\n    lock=threading.Lock()\n    A=0\n    t1=threading.Thread(target=job1)\n    t2=threading.Thread(target=job2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n\n打印结果\n```\njob1 1\njob1 2\njob1 3\njob1 4\njob1 5\njob1 6\njob1 7\njob1 8\njob1 9\njob1 10\njob2 20\njob2 30\njob2 40\njob2 50\njob2 60\njob2 70\njob2 80\njob2 90\njob2 100\njob2 110\n```\n### 储存进程结果 Queue\n```\nimport threading\nimport time\n\nfrom queue import Queue\n\ndef job(l,q):\n    '''\n    对列表的每个元素进行平方计算，将结果保存在队列中\n    '''\n    for i in range (len(l)):\n        l[i] = l[i]**2\n    q.put(l)  # 多线程调用的函数不能用return返回值\n\ndef multithreading():\n    q = Queue()   #  q 中存放返回值，代替return的返回值\n    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]\n    threads = []\n    \n    for i in range(4):\n        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面\n        t.start()  # 开始线程\n        threads.append(t)  # 把每个线程append到线程列表中\n        \n    for thread in threads:\n        thread.join()  # 分别join四个线程到主线程\n        \n    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results\n    for _ in range(4):\n        results.append(q.get())\n    print(results)\n\nif __name___=='__main__':\n    multithreading()\n```\n","slug":"python练习/多线程","published":1,"updated":"2020-04-01T09:23:43.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5p006ktssazxhuedxg","content":"<h2 id=\"添加线程\"><a href=\"#添加线程\" class=\"headerlink\" title=\"添加线程\"></a>添加线程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def main1():</span><br><span class=\"line\">    print(threading.active_count())   # 获取已激活的线程数</span><br><span class=\"line\">    print(threading.enumerate()) # 查看所有线程信息</span><br><span class=\"line\">    print(threading.current_thread())  # 查看现在正在运行的线程</span><br><span class=\"line\"></span><br><span class=\"line\">def thread_job():</span><br><span class=\"line\">    print(&apos;This is a thread of %s&apos; % threading.current_thread())</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    thread = threading.Thread(target=thread_job,)  # 定义线程</span><br><span class=\"line\">    thread.start()  # 让线程开始工作</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main1()</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"join功能\"><a href=\"#join功能\" class=\"headerlink\" title=\"join功能\"></a>join功能</h2><p>使用<code>join()</code>主线程一直等待全部的子线程结束之后，主线程自身才结束( <code>print(&#39;all done\\n&#39;)</code>)，程序退出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\">def T1_job():</span><br><span class=\"line\">    print(&apos;T1 start\\n&apos;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">    print(&apos;T1 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def T2_job():</span><br><span class=\"line\">    print(&apos;T2 start\\n&apos;)</span><br><span class=\"line\">    print(&apos;T2 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    T1_thread = threading.Thread(target=T1_job, name=&apos;T1&apos;)</span><br><span class=\"line\">    T2_thread = threading.Thread(target=T2_job, name=&apos;T2&apos;)</span><br><span class=\"line\">    T1_thread.start()</span><br><span class=\"line\">    T2_thread.start()</span><br><span class=\"line\">    T1_thread.join()</span><br><span class=\"line\">    T2_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;all done\\n&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"线程锁\"><a href=\"#线程锁\" class=\"headerlink\" title=\"线程锁\"></a>线程锁</h3><p>不使用线程锁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果,很杂乱<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 job21</span><br><span class=\"line\">11job1</span><br><span class=\"line\"> job212</span><br><span class=\"line\">22job1</span><br><span class=\"line\">job2  3323</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  4344</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  5554</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  6566</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  7677</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  8788</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  9899</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  110109</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用线程锁\"><a href=\"#使用线程锁\" class=\"headerlink\" title=\"使用线程锁\"></a>使用线程锁</h4><p><strong>lock在不同线程使用同一共享内存时，能够确保线程之间互不影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\">    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 1</span><br><span class=\"line\">job1 2</span><br><span class=\"line\">job1 3</span><br><span class=\"line\">job1 4</span><br><span class=\"line\">job1 5</span><br><span class=\"line\">job1 6</span><br><span class=\"line\">job1 7</span><br><span class=\"line\">job1 8</span><br><span class=\"line\">job1 9</span><br><span class=\"line\">job1 10</span><br><span class=\"line\">job2 20</span><br><span class=\"line\">job2 30</span><br><span class=\"line\">job2 40</span><br><span class=\"line\">job2 50</span><br><span class=\"line\">job2 60</span><br><span class=\"line\">job2 70</span><br><span class=\"line\">job2 80</span><br><span class=\"line\">job2 90</span><br><span class=\"line\">job2 100</span><br><span class=\"line\">job2 110</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"储存进程结果-Queue\"><a href=\"#储存进程结果-Queue\" class=\"headerlink\" title=\"储存进程结果 Queue\"></a>储存进程结果 Queue</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from queue import Queue</span><br><span class=\"line\"></span><br><span class=\"line\">def job(l,q):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    对列表的每个元素进行平方计算，将结果保存在队列中</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    for i in range (len(l)):</span><br><span class=\"line\">        l[i] = l[i]**2</span><br><span class=\"line\">    q.put(l)  # 多线程调用的函数不能用return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">def multithreading():</span><br><span class=\"line\">    q = Queue()   #  q 中存放返回值，代替return的返回值</span><br><span class=\"line\">    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(4):</span><br><span class=\"line\">        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面</span><br><span class=\"line\">        t.start()  # 开始线程</span><br><span class=\"line\">        threads.append(t)  # 把每个线程append到线程列表中</span><br><span class=\"line\">        </span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.join()  # 分别join四个线程到主线程</span><br><span class=\"line\">        </span><br><span class=\"line\">    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results</span><br><span class=\"line\">    for _ in range(4):</span><br><span class=\"line\">        results.append(q.get())</span><br><span class=\"line\">    print(results)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name___==&apos;__main__&apos;:</span><br><span class=\"line\">    multithreading()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加线程\"><a href=\"#添加线程\" class=\"headerlink\" title=\"添加线程\"></a>添加线程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def main1():</span><br><span class=\"line\">    print(threading.active_count())   # 获取已激活的线程数</span><br><span class=\"line\">    print(threading.enumerate()) # 查看所有线程信息</span><br><span class=\"line\">    print(threading.current_thread())  # 查看现在正在运行的线程</span><br><span class=\"line\"></span><br><span class=\"line\">def thread_job():</span><br><span class=\"line\">    print(&apos;This is a thread of %s&apos; % threading.current_thread())</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    thread = threading.Thread(target=thread_job,)  # 定义线程</span><br><span class=\"line\">    thread.start()  # 让线程开始工作</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main1()</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"join功能\"><a href=\"#join功能\" class=\"headerlink\" title=\"join功能\"></a>join功能</h2><p>使用<code>join()</code>主线程一直等待全部的子线程结束之后，主线程自身才结束( <code>print(&#39;all done\\n&#39;)</code>)，程序退出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\">def T1_job():</span><br><span class=\"line\">    print(&apos;T1 start\\n&apos;)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">    print(&apos;T1 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def T2_job():</span><br><span class=\"line\">    print(&apos;T2 start\\n&apos;)</span><br><span class=\"line\">    print(&apos;T2 finish\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    T1_thread = threading.Thread(target=T1_job, name=&apos;T1&apos;)</span><br><span class=\"line\">    T2_thread = threading.Thread(target=T2_job, name=&apos;T2&apos;)</span><br><span class=\"line\">    T1_thread.start()</span><br><span class=\"line\">    T2_thread.start()</span><br><span class=\"line\">    T1_thread.join()</span><br><span class=\"line\">    T2_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;all done\\n&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"线程锁\"><a href=\"#线程锁\" class=\"headerlink\" title=\"线程锁\"></a>线程锁</h3><p>不使用线程锁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果,很杂乱<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 job21</span><br><span class=\"line\">11job1</span><br><span class=\"line\"> job212</span><br><span class=\"line\">22job1</span><br><span class=\"line\">job2  3323</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  4344</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  5554</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  6566</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  7677</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  8788</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  9899</span><br><span class=\"line\"></span><br><span class=\"line\">job2job1  110109</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用线程锁\"><a href=\"#使用线程锁\" class=\"headerlink\" title=\"使用线程锁\"></a>使用线程锁</h4><p><strong>lock在不同线程使用同一共享内存时，能够确保线程之间互不影响</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job1():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()  # 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=1</span><br><span class=\"line\">        print(&apos;job1&apos;,A)</span><br><span class=\"line\">    lock.release() # 执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存</span><br><span class=\"line\"></span><br><span class=\"line\">def job2():</span><br><span class=\"line\">    global A,lock</span><br><span class=\"line\">    lock.acquire()</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        A+=10</span><br><span class=\"line\">        print(&apos;job2&apos;,A)</span><br><span class=\"line\">    lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__== &apos;__main__&apos;:</span><br><span class=\"line\">    lock=threading.Lock()</span><br><span class=\"line\">    A=0</span><br><span class=\"line\">    t1=threading.Thread(target=job1)</span><br><span class=\"line\">    t2=threading.Thread(target=job2)</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job1 1</span><br><span class=\"line\">job1 2</span><br><span class=\"line\">job1 3</span><br><span class=\"line\">job1 4</span><br><span class=\"line\">job1 5</span><br><span class=\"line\">job1 6</span><br><span class=\"line\">job1 7</span><br><span class=\"line\">job1 8</span><br><span class=\"line\">job1 9</span><br><span class=\"line\">job1 10</span><br><span class=\"line\">job2 20</span><br><span class=\"line\">job2 30</span><br><span class=\"line\">job2 40</span><br><span class=\"line\">job2 50</span><br><span class=\"line\">job2 60</span><br><span class=\"line\">job2 70</span><br><span class=\"line\">job2 80</span><br><span class=\"line\">job2 90</span><br><span class=\"line\">job2 100</span><br><span class=\"line\">job2 110</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"储存进程结果-Queue\"><a href=\"#储存进程结果-Queue\" class=\"headerlink\" title=\"储存进程结果 Queue\"></a>储存进程结果 Queue</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from queue import Queue</span><br><span class=\"line\"></span><br><span class=\"line\">def job(l,q):</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    对列表的每个元素进行平方计算，将结果保存在队列中</span><br><span class=\"line\">    &apos;&apos;&apos;</span><br><span class=\"line\">    for i in range (len(l)):</span><br><span class=\"line\">        l[i] = l[i]**2</span><br><span class=\"line\">    q.put(l)  # 多线程调用的函数不能用return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">def multithreading():</span><br><span class=\"line\">    q = Queue()   #  q 中存放返回值，代替return的返回值</span><br><span class=\"line\">    data = [[1,2,3],[3,4,5],[4,4,4],[5,5,5]]</span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(4):</span><br><span class=\"line\">        t = threading.Thread(target=job,args=(data[i],q)) # 被调用的job函数没有括号，只是一个索引，参数在后面</span><br><span class=\"line\">        t.start()  # 开始线程</span><br><span class=\"line\">        threads.append(t)  # 把每个线程append到线程列表中</span><br><span class=\"line\">        </span><br><span class=\"line\">    for thread in threads:</span><br><span class=\"line\">        thread.join()  # 分别join四个线程到主线程</span><br><span class=\"line\">        </span><br><span class=\"line\">    results = []  # 定义一个空的列表results，将四个线运行后保存在队列中的结果返回给空列表results</span><br><span class=\"line\">    for _ in range(4):</span><br><span class=\"line\">        results.append(q.get())</span><br><span class=\"line\">    print(results)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name___==&apos;__main__&apos;:</span><br><span class=\"line\">    multithreading()</span><br></pre></td></tr></table></figure>\n"},{"title":"慕课网数据采集总结","date":"2018-12-25T03:05:31.000Z","_content":"\n\n\nhttps://www.imooc.com/video/12637   课程地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","source":"_posts/python练习/慕课网数据采集总结.md","raw":"---\ntitle: 慕课网数据采集总结\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\nhttps://www.imooc.com/video/12637   课程地址\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image.png](https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n","slug":"python练习/慕课网数据采集总结","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5r006mtssawqvmosco","content":"<p><a href=\"https://www.imooc.com/video/12637\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/12637</a>   课程地址</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.imooc.com/video/12637\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/12637</a>   课程地址</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-330c668824bc4fc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-87b7316595bbbc86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1ac86357afd20cee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-5c11b4dbb3570abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-dc68bc25831eade2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-9d30530d19e2ff77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-b517ca78dc4cbb23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c8489fb73c6fecb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-1a440af695c3945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-e95a853cd16eac56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-fea00536c8a777c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-8cfcf10d28d19e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n"},{"title":"多线程的鸡肋","date":"2019-07-12T03:05:31.000Z","_content":"\n\n```\nfrom contextlib import contextmanager\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n@contextmanager\ndef _cost_time():\n    start_time = time.time()\n    print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    yield\n    end_time = time.time()\n    seconds = end_time - start_time\n    m, s = divmod(seconds, 60)\n    h, m = divmod(m, 60)\n    print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    print('time cost  %d:%02d:%02d ' % (h, m, s))\n\n\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\n\nwith _cost_time():\n    decrement(100000000)\n\n#\nimport threading\nwith _cost_time():\n    t1 = threading.Thread(target=decrement,args=[50000000])\n    t2 = threading.Thread(target=decrement,args=[50000000])\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n```\n\n## 修改一下\n\n```\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n\n\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        func(*args,**kw)\n        end_time = time.time()\n        seconds = end_time - start_time\n        m, s = divmod(seconds, 60)\n        h, m = divmod(m, 60)\n        print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        print('time cost  %d:%02d:%02d ' % (h, m, s))\n    return warpper\n\n@_cost_time\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\ndecrement(100000000)\n\n# Multithreading\nimport threading\nt1 = threading.Thread(target=decrement,args=[50000000])\nt2 = threading.Thread(target=decrement,args=[50000000])\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n\n```\n\n","source":"_posts/python练习/多线程的鸡肋.md","raw":"\n---\ntitle: 多线程的鸡肋\ndate: 2019-07-12 11:05:31\ntags:\ncategories: python练习\n---\n\n\n```\nfrom contextlib import contextmanager\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n@contextmanager\ndef _cost_time():\n    start_time = time.time()\n    print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    yield\n    end_time = time.time()\n    seconds = end_time - start_time\n    m, s = divmod(seconds, 60)\n    h, m = divmod(m, 60)\n    print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n    print('time cost  %d:%02d:%02d ' % (h, m, s))\n\n\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\n\nwith _cost_time():\n    decrement(100000000)\n\n#\nimport threading\nwith _cost_time():\n    t1 = threading.Thread(target=decrement,args=[50000000])\n    t2 = threading.Thread(target=decrement,args=[50000000])\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n\n```\n\n## 修改一下\n\n```\nimport time\n\n##  因为GIL锁的原因，多线程并没有多少用\n## 不适合计算密集型\n\n\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        print('start time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        func(*args,**kw)\n        end_time = time.time()\n        seconds = end_time - start_time\n        m, s = divmod(seconds, 60)\n        h, m = divmod(m, 60)\n        print('end time : ' + time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))\n        print('time cost  %d:%02d:%02d ' % (h, m, s))\n    return warpper\n\n@_cost_time\ndef decrement(n):\n    while n > 0:\n        n -= 1\n\n# Single thread\ndecrement(100000000)\n\n# Multithreading\nimport threading\nt1 = threading.Thread(target=decrement,args=[50000000])\nt2 = threading.Thread(target=decrement,args=[50000000])\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n\n```\n\n","slug":"python练习/多线程的鸡肋","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5s006otssazasevg3h","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def _cost_time():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    seconds = end_time - start_time</span><br><span class=\"line\">    m, s = divmod(seconds, 60)</span><br><span class=\"line\">    h, m = divmod(m, 60)</span><br><span class=\"line\">    print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\"></span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">import threading</span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一下\"><a href=\"#修改一下\" class=\"headerlink\" title=\"修改一下\"></a>修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        seconds = end_time - start_time</span><br><span class=\"line\">        m, s = divmod(seconds, 60)</span><br><span class=\"line\">        h, m = divmod(m, 60)</span><br><span class=\"line\">        print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\">decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\"># Multithreading</span><br><span class=\"line\">import threading</span><br><span class=\"line\">t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">t2.start()</span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">t2.join()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def _cost_time():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    seconds = end_time - start_time</span><br><span class=\"line\">    m, s = divmod(seconds, 60)</span><br><span class=\"line\">    h, m = divmod(m, 60)</span><br><span class=\"line\">    print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">    print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\"></span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\">import threading</span><br><span class=\"line\">with _cost_time():</span><br><span class=\"line\">    t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改一下\"><a href=\"#修改一下\" class=\"headerlink\" title=\"修改一下\"></a>修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">##  因为GIL锁的原因，多线程并没有多少用</span><br><span class=\"line\">## 不适合计算密集型</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        print(&apos;start time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        seconds = end_time - start_time</span><br><span class=\"line\">        m, s = divmod(seconds, 60)</span><br><span class=\"line\">        h, m = divmod(m, 60)</span><br><span class=\"line\">        print(&apos;end time : &apos; + time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</span><br><span class=\"line\">        print(&apos;time cost  %d:%02d:%02d &apos; % (h, m, s))</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def decrement(n):</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Single thread</span><br><span class=\"line\">decrement(100000000)</span><br><span class=\"line\"></span><br><span class=\"line\"># Multithreading</span><br><span class=\"line\">import threading</span><br><span class=\"line\">t1 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t2 = threading.Thread(target=decrement,args=[50000000])</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">t2.start()</span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">t2.join()</span><br></pre></td></tr></table></figure>\n"},{"title":"多进程","date":"2019-10-11T03:05:31.000Z","_content":"## 多进程\n多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing\n\n### 多进程与多线程\n使用方法几乎一致\n```\nimport multiprocessing\nimport threading\n\ndef job_t(a,d):\n    print('tttt')\n\ndef job_p(a,d):\n    print('pppp')\n\n\nt1 = threading.Thread(target=job_t,args=(1,2))\np1 = multiprocessing.Process(target=job_p,args=(1,2))\nt1.start()\np1.start()\n\nt1.join()\np1.join()\n```\n### 进程结果 Queue()\n```\nimport multiprocessing as mp\n\ndef job(q):\n    res=0\n    for i in range(1000):\n        res+=i+i**2+i**3\n    q.put(res)    #queue\n\nif __name__=='__main__':\n    q = mp.Queue()\n    p1 = mp.Process(target=job,args=(q,))\n    p2 = mp.Process(target=job,args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    print(res1)\n    res2 = q.get()\n    print(res2)\n    print(res1+res2)\n```\n###  效率对比\n```\nimport time\nimport multiprocessing \nimport threading\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        func(*args,**kw)\n        end_time = time.time()\n        print('cost time :',end_time - start_time)\n    return warpper\n    \n\ndef job(q):\n    res = 0\n    for i in range(1000000):\n        res += i + i**2 + i**3\n    q.put(res) # queue\n\n@_cost_time\ndef normal():\n    res = 0\n    for _ in range(2):\n        for i in range(1000000):\n            res += i + i**2 + i**3\n    print('normal:', res)\n    \n\n@_cost_time\ndef multithread():\n    q = multiprocessing.Queue() \n    t1 = threading.Thread(target=job, args=(q,))\n    t2 = threading.Thread(target=job, args=(q,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multithread:', res1 + res2)\n\n\n@_cost_time\ndef multicore():\n    q =  multiprocessing.Queue()\n    p1 = multiprocessing .Process(target=job, args=(q,))\n    p2 =  multiprocessing .Process(target=job, args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multicore:',res1 + res2)\n\n\nnormal()\nmultithread()\nmulticore()\n```\n打印结果\n```\n('normal:', 499999666667166666000000L)\n('cost time :', 0.8630490303039551)\n('multithread:', 499999666667166666000000L)\n('cost time :', 1.8854999542236328)\n('multicore:', 499999666667166666000000L)\n('cost time :', 0.47038793563842773)\n```\n耗时 `多进程 < 普通 < 多线程` 。\n\n多线程不适合计算密集型\n","source":"_posts/python练习/多进程.md","raw":"---\ntitle: 多进程\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n## 多进程\n多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing\n\n### 多进程与多线程\n使用方法几乎一致\n```\nimport multiprocessing\nimport threading\n\ndef job_t(a,d):\n    print('tttt')\n\ndef job_p(a,d):\n    print('pppp')\n\n\nt1 = threading.Thread(target=job_t,args=(1,2))\np1 = multiprocessing.Process(target=job_p,args=(1,2))\nt1.start()\np1.start()\n\nt1.join()\np1.join()\n```\n### 进程结果 Queue()\n```\nimport multiprocessing as mp\n\ndef job(q):\n    res=0\n    for i in range(1000):\n        res+=i+i**2+i**3\n    q.put(res)    #queue\n\nif __name__=='__main__':\n    q = mp.Queue()\n    p1 = mp.Process(target=job,args=(q,))\n    p2 = mp.Process(target=job,args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    print(res1)\n    res2 = q.get()\n    print(res2)\n    print(res1+res2)\n```\n###  效率对比\n```\nimport time\nimport multiprocessing \nimport threading\n\ndef _cost_time(func):\n    def warpper(*args,**kw):\n        start_time = time.time()\n        func(*args,**kw)\n        end_time = time.time()\n        print('cost time :',end_time - start_time)\n    return warpper\n    \n\ndef job(q):\n    res = 0\n    for i in range(1000000):\n        res += i + i**2 + i**3\n    q.put(res) # queue\n\n@_cost_time\ndef normal():\n    res = 0\n    for _ in range(2):\n        for i in range(1000000):\n            res += i + i**2 + i**3\n    print('normal:', res)\n    \n\n@_cost_time\ndef multithread():\n    q = multiprocessing.Queue() \n    t1 = threading.Thread(target=job, args=(q,))\n    t2 = threading.Thread(target=job, args=(q,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multithread:', res1 + res2)\n\n\n@_cost_time\ndef multicore():\n    q =  multiprocessing.Queue()\n    p1 = multiprocessing .Process(target=job, args=(q,))\n    p2 =  multiprocessing .Process(target=job, args=(q,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n    res1 = q.get()\n    res2 = q.get()\n    print('multicore:',res1 + res2)\n\n\nnormal()\nmultithread()\nmulticore()\n```\n打印结果\n```\n('normal:', 499999666667166666000000L)\n('cost time :', 0.8630490303039551)\n('multithread:', 499999666667166666000000L)\n('cost time :', 1.8854999542236328)\n('multicore:', 499999666667166666000000L)\n('cost time :', 0.47038793563842773)\n```\n耗时 `多进程 < 普通 < 多线程` 。\n\n多线程不适合计算密集型\n","slug":"python练习/多进程","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5w006qtssa6rfmxglf","content":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing</p>\n<h3 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h3><p>使用方法几乎一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job_t(a,d):</span><br><span class=\"line\">    print(&apos;tttt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def job_p(a,d):</span><br><span class=\"line\">    print(&apos;pppp&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t1 = threading.Thread(target=job_t,args=(1,2))</span><br><span class=\"line\">p1 = multiprocessing.Process(target=job_p,args=(1,2))</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">p1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">p1.join()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进程结果-Queue\"><a href=\"#进程结果-Queue\" class=\"headerlink\" title=\"进程结果 Queue()\"></a>进程结果 Queue()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res=0</span><br><span class=\"line\">    for i in range(1000):</span><br><span class=\"line\">        res+=i+i**2+i**3</span><br><span class=\"line\">    q.put(res)    #queue</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    q = mp.Queue()</span><br><span class=\"line\">    p1 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p2 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    print(res1)</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(res2)</span><br><span class=\"line\">    print(res1+res2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import multiprocessing </span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        print(&apos;cost time :&apos;,end_time - start_time)</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for i in range(1000000):</span><br><span class=\"line\">        res += i + i**2 + i**3</span><br><span class=\"line\">    q.put(res) # queue</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def normal():</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for _ in range(2):</span><br><span class=\"line\">        for i in range(1000000):</span><br><span class=\"line\">            res += i + i**2 + i**3</span><br><span class=\"line\">    print(&apos;normal:&apos;, res)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multithread():</span><br><span class=\"line\">    q = multiprocessing.Queue() </span><br><span class=\"line\">    t1 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t2 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multithread:&apos;, res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multicore():</span><br><span class=\"line\">    q =  multiprocessing.Queue()</span><br><span class=\"line\">    p1 = multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p2 =  multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multicore:&apos;,res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normal()</span><br><span class=\"line\">multithread()</span><br><span class=\"line\">multicore()</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;normal:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.8630490303039551)</span><br><span class=\"line\">(&apos;multithread:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 1.8854999542236328)</span><br><span class=\"line\">(&apos;multicore:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.47038793563842773)</span><br></pre></td></tr></table></figure></p>\n<p>耗时 <code>多进程 &lt; 普通 &lt; 多线程</code> 。</p>\n<p>多线程不适合计算密集型</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>多进程 Multiprocessing 和多线程 threading 类似，用来弥补 threading 的一些劣势（例如GIL）， Python 出了一个 multiprocessing</p>\n<h3 id=\"多进程与多线程\"><a href=\"#多进程与多线程\" class=\"headerlink\" title=\"多进程与多线程\"></a>多进程与多线程</h3><p>使用方法几乎一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def job_t(a,d):</span><br><span class=\"line\">    print(&apos;tttt&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def job_p(a,d):</span><br><span class=\"line\">    print(&apos;pppp&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t1 = threading.Thread(target=job_t,args=(1,2))</span><br><span class=\"line\">p1 = multiprocessing.Process(target=job_p,args=(1,2))</span><br><span class=\"line\">t1.start()</span><br><span class=\"line\">p1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">t1.join()</span><br><span class=\"line\">p1.join()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"进程结果-Queue\"><a href=\"#进程结果-Queue\" class=\"headerlink\" title=\"进程结果 Queue()\"></a>进程结果 Queue()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res=0</span><br><span class=\"line\">    for i in range(1000):</span><br><span class=\"line\">        res+=i+i**2+i**3</span><br><span class=\"line\">    q.put(res)    #queue</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&apos;__main__&apos;:</span><br><span class=\"line\">    q = mp.Queue()</span><br><span class=\"line\">    p1 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p2 = mp.Process(target=job,args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    print(res1)</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(res2)</span><br><span class=\"line\">    print(res1+res2)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效率对比\"><a href=\"#效率对比\" class=\"headerlink\" title=\"效率对比\"></a>效率对比</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import multiprocessing </span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def _cost_time(func):</span><br><span class=\"line\">    def warpper(*args,**kw):</span><br><span class=\"line\">        start_time = time.time()</span><br><span class=\"line\">        func(*args,**kw)</span><br><span class=\"line\">        end_time = time.time()</span><br><span class=\"line\">        print(&apos;cost time :&apos;,end_time - start_time)</span><br><span class=\"line\">    return warpper</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def job(q):</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for i in range(1000000):</span><br><span class=\"line\">        res += i + i**2 + i**3</span><br><span class=\"line\">    q.put(res) # queue</span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def normal():</span><br><span class=\"line\">    res = 0</span><br><span class=\"line\">    for _ in range(2):</span><br><span class=\"line\">        for i in range(1000000):</span><br><span class=\"line\">            res += i + i**2 + i**3</span><br><span class=\"line\">    print(&apos;normal:&apos;, res)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multithread():</span><br><span class=\"line\">    q = multiprocessing.Queue() </span><br><span class=\"line\">    t1 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t2 = threading.Thread(target=job, args=(q,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multithread:&apos;, res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@_cost_time</span><br><span class=\"line\">def multicore():</span><br><span class=\"line\">    q =  multiprocessing.Queue()</span><br><span class=\"line\">    p1 = multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p2 =  multiprocessing .Process(target=job, args=(q,))</span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    p1.join()</span><br><span class=\"line\">    p2.join()</span><br><span class=\"line\">    res1 = q.get()</span><br><span class=\"line\">    res2 = q.get()</span><br><span class=\"line\">    print(&apos;multicore:&apos;,res1 + res2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normal()</span><br><span class=\"line\">multithread()</span><br><span class=\"line\">multicore()</span><br></pre></td></tr></table></figure>\n<p>打印结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;normal:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.8630490303039551)</span><br><span class=\"line\">(&apos;multithread:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 1.8854999542236328)</span><br><span class=\"line\">(&apos;multicore:&apos;, 499999666667166666000000L)</span><br><span class=\"line\">(&apos;cost time :&apos;, 0.47038793563842773)</span><br></pre></td></tr></table></figure></p>\n<p>耗时 <code>多进程 &lt; 普通 &lt; 多线程</code> 。</p>\n<p>多线程不适合计算密集型</p>\n"},{"title":"爬取百度百科词条写入数据库","date":"2018-12-25T03:30:41.000Z","_content":"\n这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。\n如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。\n**数据库中可以设置url唯一**\n数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。\n\n代码如下：\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\nimport pymysql.cursors   # 数据库\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E5%8F%B2%E8%AE%B0\"]\n\nfor i in range(1000):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n\n# 链接数据库\n    connection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\n\n    try:\n        # 获取会话指针\n        with connection.cursor() as cursor:\n            # 创建sql 语句\n            sql = 'insert into `urls`(`urlname`,`urlhref`)values(%s,%s)'\n            # 执行sql 语句\n            cursor.execute(sql,(soup.find('h1').get_text(),url))\n            # 提交\n            connection.commit()\n    except:\n        pass \n    finally:\n        connection.close()\n```\n\n**读取数据库**\n```\nimport pymysql.cursors\n\nconnection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\ntry:\n    # 获取会话指针\n    with connection.cursor() as cursor:\n        # 查询sql 语句\n        sql = 'select `urlname` , `urlhref` from `urls` where `id` is not null'\n        # 执行sql 语句\n        conut = cursor.execute(sql)\n        print(conut)\n\n        # result = cursor.fetchall()\n        # print(result)\n\nfinally:\n    connection.close()\n\n```\n","source":"_posts/python练习/爬取百度百科词条写入数据库.md","raw":"\n---\ntitle: 爬取百度百科词条写入数据库\ndate: 2018-12-25 11:30:41\ntags:\ncategories: python练习\n---\n\n这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。\n如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。\n**数据库中可以设置url唯一**\n数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。\n\n代码如下：\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\nimport pymysql.cursors   # 数据库\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E5%8F%B2%E8%AE%B0\"]\n\nfor i in range(1000):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n\n# 链接数据库\n    connection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\n\n    try:\n        # 获取会话指针\n        with connection.cursor() as cursor:\n            # 创建sql 语句\n            sql = 'insert into `urls`(`urlname`,`urlhref`)values(%s,%s)'\n            # 执行sql 语句\n            cursor.execute(sql,(soup.find('h1').get_text(),url))\n            # 提交\n            connection.commit()\n    except:\n        pass \n    finally:\n        connection.close()\n```\n\n**读取数据库**\n```\nimport pymysql.cursors\n\nconnection = pymysql.connect(host = 'localhost',\n                user = 'root',\n                password = 'password',\n                db = 'baikeurl',\n                charset = 'utf8mb4',\n                     )\ntry:\n    # 获取会话指针\n    with connection.cursor() as cursor:\n        # 查询sql 语句\n        sql = 'select `urlname` , `urlhref` from `urls` where `id` is not null'\n        # 执行sql 语句\n        conut = cursor.execute(sql)\n        print(conut)\n\n        # result = cursor.fetchall()\n        # print(result)\n\nfinally:\n    connection.close()\n\n```\n","slug":"python练习/爬取百度百科词条写入数据库","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5w006stssaqiuvrvlj","content":"<p>这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。<br>如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。<br><strong>数据库中可以设置url唯一</strong><br>数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql.cursors   # 数据库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E5%8F%B2%E8%AE%B0&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(1000):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(&quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接数据库</span><br><span class=\"line\">    connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获取会话指针</span><br><span class=\"line\">        with connection.cursor() as cursor:</span><br><span class=\"line\">            # 创建sql 语句</span><br><span class=\"line\">            sql = &apos;insert into `urls`(`urlname`,`urlhref`)values(%s,%s)&apos;</span><br><span class=\"line\">            # 执行sql 语句</span><br><span class=\"line\">            cursor.execute(sql,(soup.find(&apos;h1&apos;).get_text(),url))</span><br><span class=\"line\">            # 提交</span><br><span class=\"line\">            connection.commit()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass </span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>读取数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql.cursors</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\">try:</span><br><span class=\"line\">    # 获取会话指针</span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # 查询sql 语句</span><br><span class=\"line\">        sql = &apos;select `urlname` , `urlhref` from `urls` where `id` is not null&apos;</span><br><span class=\"line\">        # 执行sql 语句</span><br><span class=\"line\">        conut = cursor.execute(sql)</span><br><span class=\"line\">        print(conut)</span><br><span class=\"line\"></span><br><span class=\"line\">        # result = cursor.fetchall()</span><br><span class=\"line\">        # print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是在把百度百科上从一个词条中，随机选择一个关键字，然后从这个关键词的词条中，继续这样一个步骤，同时保存到数据库。<br>如果遇到某词条下没有其他关键字，就会返回到上一个关键字处，目前有一个问题，就是两条关键词都只有一个的话，会进入循环。<br><strong>数据库中可以设置url唯一</strong><br>数据库这一块的操作，得先安装pymysql。直接使用pip安装即可。随机数random是python自带的。</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">import pymysql.cursors   # 数据库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E5%8F%B2%E8%AE%B0&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(1000):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(&quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接数据库</span><br><span class=\"line\">    connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\"></span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # 获取会话指针</span><br><span class=\"line\">        with connection.cursor() as cursor:</span><br><span class=\"line\">            # 创建sql 语句</span><br><span class=\"line\">            sql = &apos;insert into `urls`(`urlname`,`urlhref`)values(%s,%s)&apos;</span><br><span class=\"line\">            # 执行sql 语句</span><br><span class=\"line\">            cursor.execute(sql,(soup.find(&apos;h1&apos;).get_text(),url))</span><br><span class=\"line\">            # 提交</span><br><span class=\"line\">            connection.commit()</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass </span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        connection.close()</span><br></pre></td></tr></table></figure>\n<p><strong>读取数据库</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pymysql.cursors</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pymysql.connect(host = &apos;localhost&apos;,</span><br><span class=\"line\">                user = &apos;root&apos;,</span><br><span class=\"line\">                password = &apos;password&apos;,</span><br><span class=\"line\">                db = &apos;baikeurl&apos;,</span><br><span class=\"line\">                charset = &apos;utf8mb4&apos;,</span><br><span class=\"line\">                     )</span><br><span class=\"line\">try:</span><br><span class=\"line\">    # 获取会话指针</span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # 查询sql 语句</span><br><span class=\"line\">        sql = &apos;select `urlname` , `urlhref` from `urls` where `id` is not null&apos;</span><br><span class=\"line\">        # 执行sql 语句</span><br><span class=\"line\">        conut = cursor.execute(sql)</span><br><span class=\"line\">        print(conut)</span><br><span class=\"line\"></span><br><span class=\"line\">        # result = cursor.fetchall()</span><br><span class=\"line\">        # print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">finally:</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure></p>\n"},{"title":"爬虫整理（五）slenium","date":"2018-12-25T03:15:09.000Z","_content":"\n\n\n首先使用pip安装并加入环境变量\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# firefox plugin\n# https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu\n\n# hide browser window\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")       # define headless\n\n# add the option when creating driver\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.get(\"https://morvanzhou.github.io/\")\ndriver.find_element_by_xpath(u\"//img[@alt='强化学习 (Reinforcement Learning)']\").click()\ndriver.find_element_by_link_text(\"About\").click()\ndriver.find_element_by_link_text(u\"赞助\").click()\ndriver.find_element_by_link_text(u\"教程 ▾\").click()\ndriver.find_element_by_link_text(u\"数据处理 ▾\").click()\ndriver.find_element_by_link_text(u\"网页爬虫\").click()\n\nprint(driver.page_source[:200])\ndriver.get_screenshot_as_file(\"./img/sreenshot2.png\")\ndriver.close()\nprint('finish')\n```\n","source":"_posts/python练习/爬虫整理-(五)--slenium.md","raw":"\n---\ntitle: 爬虫整理（五）slenium\ndate: 2018-12-25 11:15:09\ntags:\ncategories: python练习\n---\n\n\n\n首先使用pip安装并加入环境变量\n```\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\n# firefox plugin\n# https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu\n\n# hide browser window\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")       # define headless\n\n# add the option when creating driver\ndriver = webdriver.Chrome(chrome_options=chrome_options)\ndriver.get(\"https://morvanzhou.github.io/\")\ndriver.find_element_by_xpath(u\"//img[@alt='强化学习 (Reinforcement Learning)']\").click()\ndriver.find_element_by_link_text(\"About\").click()\ndriver.find_element_by_link_text(u\"赞助\").click()\ndriver.find_element_by_link_text(u\"教程 ▾\").click()\ndriver.find_element_by_link_text(u\"数据处理 ▾\").click()\ndriver.find_element_by_link_text(u\"网页爬虫\").click()\n\nprint(driver.page_source[:200])\ndriver.get_screenshot_as_file(\"./img/sreenshot2.png\")\ndriver.close()\nprint('finish')\n```\n","slug":"python练习/爬虫整理-(五)--slenium","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5x006utssa01irvgbt","content":"<p>首先使用pip安装并加入环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.chrome.options import Options</span><br><span class=\"line\"></span><br><span class=\"line\"># firefox plugin</span><br><span class=\"line\"># https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"># hide browser window</span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)       # define headless</span><br><span class=\"line\"></span><br><span class=\"line\"># add the option when creating driver</span><br><span class=\"line\">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class=\"line\">driver.get(&quot;https://morvanzhou.github.io/&quot;)</span><br><span class=\"line\">driver.find_element_by_xpath(u&quot;//img[@alt=&apos;强化学习 (Reinforcement Learning)&apos;]&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(&quot;About&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;赞助&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;教程 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;数据处理 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;网页爬虫&quot;).click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.page_source[:200])</span><br><span class=\"line\">driver.get_screenshot_as_file(&quot;./img/sreenshot2.png&quot;)</span><br><span class=\"line\">driver.close()</span><br><span class=\"line\">print(&apos;finish&apos;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先使用pip安装并加入环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\">from selenium.webdriver.chrome.options import Options</span><br><span class=\"line\"></span><br><span class=\"line\"># firefox plugin</span><br><span class=\"line\"># https://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"># hide browser window</span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(&quot;--headless&quot;)       # define headless</span><br><span class=\"line\"></span><br><span class=\"line\"># add the option when creating driver</span><br><span class=\"line\">driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class=\"line\">driver.get(&quot;https://morvanzhou.github.io/&quot;)</span><br><span class=\"line\">driver.find_element_by_xpath(u&quot;//img[@alt=&apos;强化学习 (Reinforcement Learning)&apos;]&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(&quot;About&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;赞助&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;教程 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;数据处理 ▾&quot;).click()</span><br><span class=\"line\">driver.find_element_by_link_text(u&quot;网页爬虫&quot;).click()</span><br><span class=\"line\"></span><br><span class=\"line\">print(driver.page_source[:200])</span><br><span class=\"line\">driver.get_screenshot_as_file(&quot;./img/sreenshot2.png&quot;)</span><br><span class=\"line\">driver.close()</span><br><span class=\"line\">print(&apos;finish&apos;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"爬虫整理（四）多进程分布式与异步","date":"2018-12-25T03:33:19.000Z","_content":"\n有的时候，爬取速度不快，就要想一些其他的办法。\n比如多进程多线程以及异步。\n不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。\n爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。\n\n多进程分布式与异步的代码如下：\n\n```\nfrom urllib.request import urlopen, urljoin\nfrom bs4 import BeautifulSoup\nimport multiprocessing as mp\nimport re\nimport time\n\n\ndef crawl(url):\n    response = urlopen(url)\n    time.sleep(0.1)             # slightly delay for downloading\n    return response.read().decode()\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])   # remove duplication\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nif __name__ == '__main__':\n    base_url = 'https://morvanzhou.github.io/'\n    # base_url = \"http://127.0.0.1:4000/\"\n\n    # DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\n    if base_url != \"http://127.0.0.1:4000/\":\n        restricted_crawl = True\n    else:\n        restricted_crawl = False\n\n    unseen = set([base_url,])\n    seen = set()\n\n    pool = mp.Pool(4)                       # number strongly affected\n    count, t1 = 1, time.time()\n\n    while len(unseen) != 0:              # still get some url to visit\n        if restricted_crawl and len(seen) > 20:\n            break\n        print('\\nDistributed Crawling...')\n        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]\n        htmls = [j.get() for j in crawl_jobs]                                       # request connection\n        htmls = [h for h in htmls if h is not None]     # remove None\n\n        print('\\nDistributed Parsing...')\n        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n        results = [j.get() for j in parse_jobs]                                     # parse html\n\n        print('\\nAnalysing...')\n        seen.update(unseen)\n        unseen.clear()\n\n        for title, page_urls, url in results:\n                print(count, title, url)\n                count += 1\n                unseen.update(page_urls - seen)\n\n    print('Total time: %.1f s' % (time.time()-t1, ))\n\n```\n\n```\nimport aiohttp\nimport asyncio\nimport time\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urljoin\nimport re\nimport multiprocessing as mp\n\nbase_url = \"https://morvanzhou.github.io/\"\n# base_url = \"http://127.0.0.1:4000/\"\n\n# DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\nif base_url != \"http://127.0.0.1:4000/\":\n    restricted_crawl = True\nelse:\n    restricted_crawl = False\n\nseen = set()\nunseen = set([base_url])\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nasync def crawl(url, session):\n    r = await session.get(url)\n    html = await r.text()\n    await asyncio.sleep(0.1)        # slightly delay for downloading\n    return html\n\n\nasync def main(loop):\n    pool = mp.Pool(2)               # slightly affected\n    async with aiohttp.ClientSession() as session:\n        count = 1\n        while len(unseen) != 0:\n            if restricted_crawl and len(seen) > 20:\n                break\n            tasks = [loop.create_task(crawl(url, session)) for url in unseen]\n            finished, unfinished = await asyncio.wait(tasks)\n            htmls = [f.result() for f in finished]\n\n            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n            results = [j.get() for j in parse_jobs]\n\n            seen.update(unseen)\n            unseen.clear()\n            for title, page_urls, url in results:\n                print(count, title, url)\n                unseen.update(page_urls - seen)\n                count += 1\n\nif __name__ == \"__main__\":\n    t1 = time.time()\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main(loop))\n    loop.close()\n    print(\"Async total time: \", time.time() - t1)\n```\n","source":"_posts/python练习/爬虫整理-(四)-多进程分布式与异步.md","raw":"---\ntitle: 爬虫整理（四）多进程分布式与异步\ndate: 2018-12-25 11:33:19\ntags:\ncategories: python练习\n---\n\n有的时候，爬取速度不快，就要想一些其他的办法。\n比如多进程多线程以及异步。\n不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。\n爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。\n\n多进程分布式与异步的代码如下：\n\n```\nfrom urllib.request import urlopen, urljoin\nfrom bs4 import BeautifulSoup\nimport multiprocessing as mp\nimport re\nimport time\n\n\ndef crawl(url):\n    response = urlopen(url)\n    time.sleep(0.1)             # slightly delay for downloading\n    return response.read().decode()\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])   # remove duplication\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nif __name__ == '__main__':\n    base_url = 'https://morvanzhou.github.io/'\n    # base_url = \"http://127.0.0.1:4000/\"\n\n    # DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\n    if base_url != \"http://127.0.0.1:4000/\":\n        restricted_crawl = True\n    else:\n        restricted_crawl = False\n\n    unseen = set([base_url,])\n    seen = set()\n\n    pool = mp.Pool(4)                       # number strongly affected\n    count, t1 = 1, time.time()\n\n    while len(unseen) != 0:              # still get some url to visit\n        if restricted_crawl and len(seen) > 20:\n            break\n        print('\\nDistributed Crawling...')\n        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]\n        htmls = [j.get() for j in crawl_jobs]                                       # request connection\n        htmls = [h for h in htmls if h is not None]     # remove None\n\n        print('\\nDistributed Parsing...')\n        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n        results = [j.get() for j in parse_jobs]                                     # parse html\n\n        print('\\nAnalysing...')\n        seen.update(unseen)\n        unseen.clear()\n\n        for title, page_urls, url in results:\n                print(count, title, url)\n                count += 1\n                unseen.update(page_urls - seen)\n\n    print('Total time: %.1f s' % (time.time()-t1, ))\n\n```\n\n```\nimport aiohttp\nimport asyncio\nimport time\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urljoin\nimport re\nimport multiprocessing as mp\n\nbase_url = \"https://morvanzhou.github.io/\"\n# base_url = \"http://127.0.0.1:4000/\"\n\n# DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN\nif base_url != \"http://127.0.0.1:4000/\":\n    restricted_crawl = True\nelse:\n    restricted_crawl = False\n\nseen = set()\nunseen = set([base_url])\n\n\ndef parse(html):\n    soup = BeautifulSoup(html, 'lxml')\n    urls = soup.find_all('a', {\"href\": re.compile('^/.+?/$')})\n    title = soup.find('h1').get_text().strip()\n    page_urls = set([urljoin(base_url, url['href']) for url in urls])\n    url = soup.find('meta', {'property': \"og:url\"})['content']\n    return title, page_urls, url\n\n\nasync def crawl(url, session):\n    r = await session.get(url)\n    html = await r.text()\n    await asyncio.sleep(0.1)        # slightly delay for downloading\n    return html\n\n\nasync def main(loop):\n    pool = mp.Pool(2)               # slightly affected\n    async with aiohttp.ClientSession() as session:\n        count = 1\n        while len(unseen) != 0:\n            if restricted_crawl and len(seen) > 20:\n                break\n            tasks = [loop.create_task(crawl(url, session)) for url in unseen]\n            finished, unfinished = await asyncio.wait(tasks)\n            htmls = [f.result() for f in finished]\n\n            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]\n            results = [j.get() for j in parse_jobs]\n\n            seen.update(unseen)\n            unseen.clear()\n            for title, page_urls, url in results:\n                print(count, title, url)\n                unseen.update(page_urls - seen)\n                count += 1\n\nif __name__ == \"__main__\":\n    t1 = time.time()\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main(loop))\n    loop.close()\n    print(\"Async total time: \", time.time() - t1)\n```\n","slug":"python练习/爬虫整理-(四)-多进程分布式与异步","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5y006wtssaa4raa1p6","content":"<p>有的时候，爬取速度不快，就要想一些其他的办法。<br>比如多进程多线程以及异步。<br>不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。<br>爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。</p>\n<p>多进程分布式与异步的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen, urljoin</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\">import re</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def crawl(url):</span><br><span class=\"line\">    response = urlopen(url)</span><br><span class=\"line\">    time.sleep(0.1)             # slightly delay for downloading</span><br><span class=\"line\">    return response.read().decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])   # remove duplication</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    base_url = &apos;https://morvanzhou.github.io/&apos;</span><br><span class=\"line\">    # base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    # DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">    if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">        restricted_crawl = True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">    unseen = set([base_url,])</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\"></span><br><span class=\"line\">    pool = mp.Pool(4)                       # number strongly affected</span><br><span class=\"line\">    count, t1 = 1, time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    while len(unseen) != 0:              # still get some url to visit</span><br><span class=\"line\">        if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;\\nDistributed Crawling...&apos;)</span><br><span class=\"line\">        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]</span><br><span class=\"line\">        htmls = [j.get() for j in crawl_jobs]                                       # request connection</span><br><span class=\"line\">        htmls = [h for h in htmls if h is not None]     # remove None</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nDistributed Parsing...&apos;)</span><br><span class=\"line\">        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">        results = [j.get() for j in parse_jobs]                                     # parse html</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nAnalysing...&apos;)</span><br><span class=\"line\">        seen.update(unseen)</span><br><span class=\"line\">        unseen.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">        for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Total time: %.1f s&apos; % (time.time()-t1, ))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import aiohttp</span><br><span class=\"line\">import asyncio</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urljoin</span><br><span class=\"line\">import re</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://morvanzhou.github.io/&quot;</span><br><span class=\"line\"># base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">    restricted_crawl = True</span><br><span class=\"line\">else:</span><br><span class=\"line\">    restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">seen = set()</span><br><span class=\"line\">unseen = set([base_url])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def crawl(url, session):</span><br><span class=\"line\">    r = await session.get(url)</span><br><span class=\"line\">    html = await r.text()</span><br><span class=\"line\">    await asyncio.sleep(0.1)        # slightly delay for downloading</span><br><span class=\"line\">    return html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def main(loop):</span><br><span class=\"line\">    pool = mp.Pool(2)               # slightly affected</span><br><span class=\"line\">    async with aiohttp.ClientSession() as session:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        while len(unseen) != 0:</span><br><span class=\"line\">            if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">                break</span><br><span class=\"line\">            tasks = [loop.create_task(crawl(url, session)) for url in unseen]</span><br><span class=\"line\">            finished, unfinished = await asyncio.wait(tasks)</span><br><span class=\"line\">            htmls = [f.result() for f in finished]</span><br><span class=\"line\"></span><br><span class=\"line\">            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">            results = [j.get() for j in parse_jobs]</span><br><span class=\"line\"></span><br><span class=\"line\">            seen.update(unseen)</span><br><span class=\"line\">            unseen.clear()</span><br><span class=\"line\">            for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    t1 = time.time()</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete(main(loop))</span><br><span class=\"line\">    loop.close()</span><br><span class=\"line\">    print(&quot;Async total time: &quot;, time.time() - t1)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有的时候，爬取速度不快，就要想一些其他的办法。<br>比如多进程多线程以及异步。<br>不过一般的网站都会对其有限制，所以还得看实际情况具体来选取爬虫方式。<br>爬虫并不复杂。爬虫更关键的是在，爬虫，反爬虫和反反爬虫这一块。</p>\n<p>多进程分布式与异步的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen, urljoin</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\">import re</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def crawl(url):</span><br><span class=\"line\">    response = urlopen(url)</span><br><span class=\"line\">    time.sleep(0.1)             # slightly delay for downloading</span><br><span class=\"line\">    return response.read().decode()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])   # remove duplication</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    base_url = &apos;https://morvanzhou.github.io/&apos;</span><br><span class=\"line\">    # base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    # DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">    if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">        restricted_crawl = True</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">    unseen = set([base_url,])</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\"></span><br><span class=\"line\">    pool = mp.Pool(4)                       # number strongly affected</span><br><span class=\"line\">    count, t1 = 1, time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    while len(unseen) != 0:              # still get some url to visit</span><br><span class=\"line\">        if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        print(&apos;\\nDistributed Crawling...&apos;)</span><br><span class=\"line\">        crawl_jobs = [pool.apply_async(crawl, args=(url,)) for url in unseen]</span><br><span class=\"line\">        htmls = [j.get() for j in crawl_jobs]                                       # request connection</span><br><span class=\"line\">        htmls = [h for h in htmls if h is not None]     # remove None</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nDistributed Parsing...&apos;)</span><br><span class=\"line\">        parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">        results = [j.get() for j in parse_jobs]                                     # parse html</span><br><span class=\"line\"></span><br><span class=\"line\">        print(&apos;\\nAnalysing...&apos;)</span><br><span class=\"line\">        seen.update(unseen)</span><br><span class=\"line\">        unseen.clear()</span><br><span class=\"line\"></span><br><span class=\"line\">        for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Total time: %.1f s&apos; % (time.time()-t1, ))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import aiohttp</span><br><span class=\"line\">import asyncio</span><br><span class=\"line\">import time</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urljoin</span><br><span class=\"line\">import re</span><br><span class=\"line\">import multiprocessing as mp</span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://morvanzhou.github.io/&quot;</span><br><span class=\"line\"># base_url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># DON&apos;T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span><br><span class=\"line\">if base_url != &quot;http://127.0.0.1:4000/&quot;:</span><br><span class=\"line\">    restricted_crawl = True</span><br><span class=\"line\">else:</span><br><span class=\"line\">    restricted_crawl = False</span><br><span class=\"line\"></span><br><span class=\"line\">seen = set()</span><br><span class=\"line\">unseen = set([base_url])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def parse(html):</span><br><span class=\"line\">    soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class=\"line\">    urls = soup.find_all(&apos;a&apos;, &#123;&quot;href&quot;: re.compile(&apos;^/.+?/$&apos;)&#125;)</span><br><span class=\"line\">    title = soup.find(&apos;h1&apos;).get_text().strip()</span><br><span class=\"line\">    page_urls = set([urljoin(base_url, url[&apos;href&apos;]) for url in urls])</span><br><span class=\"line\">    url = soup.find(&apos;meta&apos;, &#123;&apos;property&apos;: &quot;og:url&quot;&#125;)[&apos;content&apos;]</span><br><span class=\"line\">    return title, page_urls, url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def crawl(url, session):</span><br><span class=\"line\">    r = await session.get(url)</span><br><span class=\"line\">    html = await r.text()</span><br><span class=\"line\">    await asyncio.sleep(0.1)        # slightly delay for downloading</span><br><span class=\"line\">    return html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">async def main(loop):</span><br><span class=\"line\">    pool = mp.Pool(2)               # slightly affected</span><br><span class=\"line\">    async with aiohttp.ClientSession() as session:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        while len(unseen) != 0:</span><br><span class=\"line\">            if restricted_crawl and len(seen) &gt; 20:</span><br><span class=\"line\">                break</span><br><span class=\"line\">            tasks = [loop.create_task(crawl(url, session)) for url in unseen]</span><br><span class=\"line\">            finished, unfinished = await asyncio.wait(tasks)</span><br><span class=\"line\">            htmls = [f.result() for f in finished]</span><br><span class=\"line\"></span><br><span class=\"line\">            parse_jobs = [pool.apply_async(parse, args=(html,)) for html in htmls]</span><br><span class=\"line\">            results = [j.get() for j in parse_jobs]</span><br><span class=\"line\"></span><br><span class=\"line\">            seen.update(unseen)</span><br><span class=\"line\">            unseen.clear()</span><br><span class=\"line\">            for title, page_urls, url in results:</span><br><span class=\"line\">                print(count, title, url)</span><br><span class=\"line\">                unseen.update(page_urls - seen)</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    t1 = time.time()</span><br><span class=\"line\">    loop = asyncio.get_event_loop()</span><br><span class=\"line\">    loop.run_until_complete(main(loop))</span><br><span class=\"line\">    loop.close()</span><br><span class=\"line\">    print(&quot;Async total time: &quot;, time.time() - t1)</span><br></pre></td></tr></table></figure>\n"},{"title":"爬虫整理（一）使用re和urllib","date":"2018-12-25T03:05:31.000Z","_content":"\n\n\n### 完整代码\n```\nfrom urllib.request import urlopen\n\n\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n        \n    ).decode('utf-8')\nprint(html)\n\n\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html)\nprint(\"\\nPage title is: \", res[0])\n\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \nprint(\"\\nPage paragraph is: \", res[0])\n\n\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n## 正文\n### 使用re和urllib\n```\nfrom urllib.request import urlopen\n# if has Chinese, apply decode()\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\"\n).read().decode('utf-8')  \nprint(html) # 打开，读取，转换可显示中文，最后打印出来\n```\n**结果显示**\n![print(html)](https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 接下来，使用re筛选数据\n```\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html) \nprint(res)  # ['Scraping tutorial 1 | 莫烦Python'] # 列表\nprint(res[0]) # Scraping tutorial 1 | 莫烦Python\nres = re.findall(r\"<p>(.*?)</p>\", html)\nprint(res)  # []\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \n# re.DOTALL if multi line\nprnt(res)\nprint(res[0]) \n```\n![以上五个的print数据](https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n![筛选链接](https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/python练习/爬虫整理（一）使用re和urllib.md","raw":"\n---\ntitle: 爬虫整理（一）使用re和urllib\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n### 完整代码\n```\nfrom urllib.request import urlopen\n\n\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n        \n    ).decode('utf-8')\nprint(html)\n\n\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html)\nprint(\"\\nPage title is: \", res[0])\n\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \nprint(\"\\nPage paragraph is: \", res[0])\n\n\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n## 正文\n### 使用re和urllib\n```\nfrom urllib.request import urlopen\n# if has Chinese, apply decode()\nhtml = urlopen(\n    \"https://morvanzhou.github.io/static/scraping/basic-structure.html\"\n).read().decode('utf-8')  \nprint(html) # 打开，读取，转换可显示中文，最后打印出来\n```\n**结果显示**\n![print(html)](https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#### 接下来，使用re筛选数据\n```\nimport re\nres = re.findall(r\"<title>(.+?)</title>\", html) \nprint(res)  # ['Scraping tutorial 1 | 莫烦Python'] # 列表\nprint(res[0]) # Scraping tutorial 1 | 莫烦Python\nres = re.findall(r\"<p>(.*?)</p>\", html)\nprint(res)  # []\n\nres = re.findall(r\"<p>(.*?)</p>\", html, flags=re.DOTALL) \n# re.DOTALL if multi line\nprnt(res)\nprint(res[0]) \n```\n![以上五个的print数据](https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nres = re.findall(r'href=\"(.*?)\"', html)\nprint(\"\\nAll links: \", res)\n```\n![筛选链接](https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"python练习/爬虫整理（一）使用re和urllib","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p5z006ytssabnpk372i","content":"<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">        </span><br><span class=\"line\">    ).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html)</span><br><span class=\"line\">print(&quot;\\nPage title is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\">print(&quot;\\nPage paragraph is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用re和urllib\"><a href=\"#使用re和urllib\" class=\"headerlink\" title=\"使用re和urllib\"></a>使用re和urllib</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;</span><br><span class=\"line\">).read().decode(&apos;utf-8&apos;)  </span><br><span class=\"line\">print(html) # 打开，读取，转换可显示中文，最后打印出来</span><br></pre></td></tr></table></figure>\n<p><strong>结果显示</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print(html)\"></p>\n<h4 id=\"接下来，使用re筛选数据\"><a href=\"#接下来，使用re筛选数据\" class=\"headerlink\" title=\"接下来，使用re筛选数据\"></a>接下来，使用re筛选数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html) </span><br><span class=\"line\">print(res)  # [&apos;Scraping tutorial 1 | 莫烦Python&apos;] # 列表</span><br><span class=\"line\">print(res[0]) # Scraping tutorial 1 | 莫烦Python</span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html)</span><br><span class=\"line\">print(res)  # []</span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\"># re.DOTALL if multi line</span><br><span class=\"line\">prnt(res)</span><br><span class=\"line\">print(res[0])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"以上五个的print数据\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"筛选链接\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">        </span><br><span class=\"line\">    ).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html)</span><br><span class=\"line\">print(&quot;\\nPage title is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\">print(&quot;\\nPage paragraph is: &quot;, res[0])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"使用re和urllib\"><a href=\"#使用re和urllib\" class=\"headerlink\" title=\"使用re和urllib\"></a>使用re和urllib</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">    &quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;</span><br><span class=\"line\">).read().decode(&apos;utf-8&apos;)  </span><br><span class=\"line\">print(html) # 打开，读取，转换可显示中文，最后打印出来</span><br></pre></td></tr></table></figure>\n<p><strong>结果显示</strong><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3fc7bec17b3ab982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print(html)\"></p>\n<h4 id=\"接下来，使用re筛选数据\"><a href=\"#接下来，使用re筛选数据\" class=\"headerlink\" title=\"接下来，使用re筛选数据\"></a>接下来，使用re筛选数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\">res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html) </span><br><span class=\"line\">print(res)  # [&apos;Scraping tutorial 1 | 莫烦Python&apos;] # 列表</span><br><span class=\"line\">print(res[0]) # Scraping tutorial 1 | 莫烦Python</span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html)</span><br><span class=\"line\">print(res)  # []</span><br><span class=\"line\"></span><br><span class=\"line\">res = re.findall(r&quot;&lt;p&gt;(.*?)&lt;/p&gt;&quot;, html, flags=re.DOTALL) </span><br><span class=\"line\"># re.DOTALL if multi line</span><br><span class=\"line\">prnt(res)</span><br><span class=\"line\">print(res[0])</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-c0284891771dc42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"以上五个的print数据\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = re.findall(r&apos;href=&quot;(.*?)&quot;&apos;, html)</span><br><span class=\"line\">print(&quot;\\nAll links: &quot;, res)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-3141c3afe0a3e428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"筛选链接\"></p>\n"},{"title":"网络请求","date":"2019-07-13T03:05:31.000Z","_content":"\n## url 与 ip\nip : Internet Protocol\n\n1. 如果 '域名-ip' 已被记录，则直接访问目标ip\n浏览器缓存，系统缓存，路由缓存\n\n2. 没有被记录，则 依靠 DNS\nDNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。\n\n网卡上，有 'DNS 服务器' 配置项\n\n3. DNS 劫持\n访问 A 结果 访问了 B\n\n4. DNS 投毒(污染)\n从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源\n\n5. DNS 正常解析\n返回正常的 ip 地址\n","source":"_posts/python练习/网络请求.md","raw":"\n---\ntitle: 网络请求\ndate: 2019-07-13 11:05:31\ntags:\ncategories: flask\n---\n\n## url 与 ip\nip : Internet Protocol\n\n1. 如果 '域名-ip' 已被记录，则直接访问目标ip\n浏览器缓存，系统缓存，路由缓存\n\n2. 没有被记录，则 依靠 DNS\nDNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。\n\n网卡上，有 'DNS 服务器' 配置项\n\n3. DNS 劫持\n访问 A 结果 访问了 B\n\n4. DNS 投毒(污染)\n从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源\n\n5. DNS 正常解析\n返回正常的 ip 地址\n","slug":"python练习/网络请求","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p600070tssaoriyeemi","content":"<h2 id=\"url-与-ip\"><a href=\"#url-与-ip\" class=\"headerlink\" title=\"url 与 ip\"></a>url 与 ip</h2><p>ip : Internet Protocol</p>\n<ol>\n<li><p>如果 ‘域名-ip’ 已被记录，则直接访问目标ip<br>浏览器缓存，系统缓存，路由缓存</p>\n</li>\n<li><p>没有被记录，则 依靠 DNS<br>DNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。</p>\n</li>\n</ol>\n<p>网卡上，有 ‘DNS 服务器’ 配置项</p>\n<ol start=\"3\">\n<li><p>DNS 劫持<br>访问 A 结果 访问了 B</p>\n</li>\n<li><p>DNS 投毒(污染)<br>从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源</p>\n</li>\n<li><p>DNS 正常解析<br>返回正常的 ip 地址</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"url-与-ip\"><a href=\"#url-与-ip\" class=\"headerlink\" title=\"url 与 ip\"></a>url 与 ip</h2><p>ip : Internet Protocol</p>\n<ol>\n<li><p>如果 ‘域名-ip’ 已被记录，则直接访问目标ip<br>浏览器缓存，系统缓存，路由缓存</p>\n</li>\n<li><p>没有被记录，则 依靠 DNS<br>DNS : Domain Name System  是一个将域名和 IP 相互映射的分布式数据库。</p>\n</li>\n</ol>\n<p>网卡上，有 ‘DNS 服务器’ 配置项</p>\n<ol start=\"3\">\n<li><p>DNS 劫持<br>访问 A 结果 访问了 B</p>\n</li>\n<li><p>DNS 投毒(污染)<br>从客户端 向 DNS 服务器发出 查询IP 的请求，到响应 返回到客户端 的这段时间，被伪造返回来一个 错误的DNS应答，那么访问不到真正的资源</p>\n</li>\n<li><p>DNS 正常解析<br>返回正常的 ip 地址</p>\n</li>\n</ol>\n"},{"title":"给博客加日期","date":"2019-02-28T13:20:41.000Z","_content":"\n之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。\n原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。\n![](https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**代码如下**\n```\nimport os\nimport sys\nimport time\n\npath = r'E:\\WeiLai\\OneDrive\\blog\\source\\_posts'\nfor root, dir, files in os.walk(path):\n    for file in files:\n        full_path = os.path.join(root, file)\n        if '.md' in full_path:\n            mtime = os.stat(full_path).st_mtime\n            file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))\n            date = 'date: '+file_modify_time\n\n            with open (full_path,'r', encoding='UTF-8') as f:\n                s = f.read()\n                q = s.partition('tags:')       \n                t = q[0] + date +'\\n' + q [1] + q[2]\n                with open (full_path,'w', encoding='UTF-8') as f:\n                    f.write(t)\n```\n![修改前](https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![修改后](https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","source":"_posts/python练习/给博客加日期.md","raw":"---\ntitle: 给博客加日期\ndate: 2019-02-28 21:20:41\ntags:\ncategories: python练习\n---\n\n之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。\n原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。\n![](https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**代码如下**\n```\nimport os\nimport sys\nimport time\n\npath = r'E:\\WeiLai\\OneDrive\\blog\\source\\_posts'\nfor root, dir, files in os.walk(path):\n    for file in files:\n        full_path = os.path.join(root, file)\n        if '.md' in full_path:\n            mtime = os.stat(full_path).st_mtime\n            file_modify_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))\n            date = 'date: '+file_modify_time\n\n            with open (full_path,'r', encoding='UTF-8') as f:\n                s = f.read()\n                q = s.partition('tags:')       \n                t = q[0] + date +'\\n' + q [1] + q[2]\n                with open (full_path,'w', encoding='UTF-8') as f:\n                    f.write(t)\n```\n![修改前](https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![修改后](https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n","slug":"python练习/给博客加日期","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p630072tssabi583bk8","content":"<p>之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。<br>原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">path = r&apos;E:\\WeiLai\\OneDrive\\blog\\source\\_posts&apos;</span><br><span class=\"line\">for root, dir, files in os.walk(path):</span><br><span class=\"line\">    for file in files:</span><br><span class=\"line\">        full_path = os.path.join(root, file)</span><br><span class=\"line\">        if &apos;.md&apos; in full_path:</span><br><span class=\"line\">            mtime = os.stat(full_path).st_mtime</span><br><span class=\"line\">            file_modify_time = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(mtime))</span><br><span class=\"line\">            date = &apos;date: &apos;+file_modify_time</span><br><span class=\"line\"></span><br><span class=\"line\">            with open (full_path,&apos;r&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                s = f.read()</span><br><span class=\"line\">                q = s.partition(&apos;tags:&apos;)       </span><br><span class=\"line\">                t = q[0] + date +&apos;\\n&apos; + q [1] + q[2]</span><br><span class=\"line\">                with open (full_path,&apos;w&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                    f.write(t)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改前\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写文章，一直没有写时间，也没多大问题。后来换了一台电脑后，上传新文章全部乱了顺序。<br>原来之前是按文件的创建时间排序，而我这复制过来的文件，创建时间几乎一样。所以博客乱了套。后来发现文件的修改时间还是以前的，于是给每篇文章，按修改时间添加了date。<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-7b009a5638c9493d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p><strong>代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">path = r&apos;E:\\WeiLai\\OneDrive\\blog\\source\\_posts&apos;</span><br><span class=\"line\">for root, dir, files in os.walk(path):</span><br><span class=\"line\">    for file in files:</span><br><span class=\"line\">        full_path = os.path.join(root, file)</span><br><span class=\"line\">        if &apos;.md&apos; in full_path:</span><br><span class=\"line\">            mtime = os.stat(full_path).st_mtime</span><br><span class=\"line\">            file_modify_time = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, time.localtime(mtime))</span><br><span class=\"line\">            date = &apos;date: &apos;+file_modify_time</span><br><span class=\"line\"></span><br><span class=\"line\">            with open (full_path,&apos;r&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                s = f.read()</span><br><span class=\"line\">                q = s.partition(&apos;tags:&apos;)       </span><br><span class=\"line\">                t = q[0] + date +&apos;\\n&apos; + q [1] + q[2]</span><br><span class=\"line\">                with open (full_path,&apos;w&apos;, encoding=&apos;UTF-8&apos;) as f:</span><br><span class=\"line\">                    f.write(t)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-0a6e3d1201522f72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改前\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-2f97cccb5f1175fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"修改后\"></p>\n"},{"title":"爬虫整理（二）BeautifulSoup","date":"2018-12-25T03:05:31.000Z","_content":"\n#### BeautifulSoup 解析：基础\n[本段完整代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb)\n\n![安装命令行](https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n具体安装过程可自行搜索。\n**beautifulSoup使用过程**\n1. 选择要爬的网址 (url)\n2. 使用 python 打开这个网址 (urlopen等)\n3. 读取网页信息 (read() 出来)\n4. 将读取的信息放入 BeautifulSoup\n5. 使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)\n```\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n).decode('utf-8')\n```\n![与上章同一个网页](https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用BeautifulSoup筛选数据**\n```\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, features='lxml')  #以 lxml 的这种形式加载\nprint(soup)\n```\n![可以看到原格式转为如上形式](https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nprint(soup.h1)   # 输出<h1> 标题\nprint(soup.p)  # 输出<p> 标题\n\nall_href = soup.find_all('a')\nprint('\\n',all_href)\nall_href = [l['href'] for l in all_href] \n#像 Python 字典的形式, 用 key 来读取 l[\"href\"]\nprint('\\n', all_href)\n```\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页:CSS\n\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb)\n![网页源码](https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/list.html\").read(\n).decode('utf-8')\n\nsoup = BeautifulSoup(html, features='lxml')\n\n# use class to narrow search\nmonth = soup.find_all('li', {\"class\": \"month\"})\nprint(month)\n\n#要找所有 class=month 的信息. 并打印出它们的 tag 内文字\nfor m in month:\n    print(m.get_text())   # 打印tag中的文字\n\n\njan = soup.find('ul', {\"class\": 'jan'})\nprint('\\n',jan)\nd_jan = jan.find_all('li')              # use jan as a parent\nprint('\\n',d_jan)\nfor d in d_jan:\n    print('\\n',d.get_text())\n```\n![get_txt()](https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![详细情况](https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页正则表达式\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb)\n```\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/table.html\").read(\n).decode('utf-8')\nprint(html)\n\nsoup = BeautifulSoup(html, features='lxml')\n\nimg_links = soup.find_all(\"img\", {\"src\": re.compile('.*?\\.jpg')})\nfor link in img_links:\n    print(link['src'])\n\nprint('\\n')\n\ncourse_links = soup.find_all('a', {'href': re.compile('https://morvan.*')})\nfor link in course_links:\n    print(link['href'])\n```\n我们发现, 如果是图片, 它们都藏在这样一个 tag 中:\n```\n<td>\n    <img src=\"https://morvanzhou.github.io/static/img/course_cover/tf.jpg\">\n</td>\n```\n用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r'.*?\\.jpg' 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.\n想要的链接都有统一的形式, 就是开头都会有 https://morvan., 定一个正则, 让 BeautifulSoup 找到符合规则的链接.\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 一个小练习来熟悉\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711\"]\n\nfor i in range(20):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\n      \"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n```\n","source":"_posts/python练习/爬虫整理（二）BeautifulSoup.md","raw":"---\ntitle: 爬虫整理（二）BeautifulSoup\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n#### BeautifulSoup 解析：基础\n[本段完整代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb)\n\n![安装命令行](https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n具体安装过程可自行搜索。\n**beautifulSoup使用过程**\n1. 选择要爬的网址 (url)\n2. 使用 python 打开这个网址 (urlopen等)\n3. 读取网页信息 (read() 出来)\n4. 将读取的信息放入 BeautifulSoup\n5. 使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)\n```\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/basic-structure.html\").read(\n).decode('utf-8')\n```\n![与上章同一个网页](https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**使用BeautifulSoup筛选数据**\n```\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, features='lxml')  #以 lxml 的这种形式加载\nprint(soup)\n```\n![可以看到原格式转为如上形式](https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nprint(soup.h1)   # 输出<h1> 标题\nprint(soup.p)  # 输出<p> 标题\n\nall_href = soup.find_all('a')\nprint('\\n',all_href)\nall_href = [l['href'] for l in all_href] \n#像 Python 字典的形式, 用 key 来读取 l[\"href\"]\nprint('\\n', all_href)\n```\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页:CSS\n\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb)\n![网页源码](https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\n\n# if has Chinese, apply decode()\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/list.html\").read(\n).decode('utf-8')\n\nsoup = BeautifulSoup(html, features='lxml')\n\n# use class to narrow search\nmonth = soup.find_all('li', {\"class\": \"month\"})\nprint(month)\n\n#要找所有 class=month 的信息. 并打印出它们的 tag 内文字\nfor m in month:\n    print(m.get_text())   # 打印tag中的文字\n\n\njan = soup.find('ul', {\"class\": 'jan'})\nprint('\\n',jan)\nd_jan = jan.find_all('li')              # use jan as a parent\nprint('\\n',d_jan)\nfor d in d_jan:\n    print('\\n',d.get_text())\n```\n![get_txt()](https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![详细情况](https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### BeautifulSoup 解析网页正则表达式\n[本节代码](https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb)\n```\nhtml = urlopen(\n\"https://morvanzhou.github.io/static/scraping/table.html\").read(\n).decode('utf-8')\nprint(html)\n\nsoup = BeautifulSoup(html, features='lxml')\n\nimg_links = soup.find_all(\"img\", {\"src\": re.compile('.*?\\.jpg')})\nfor link in img_links:\n    print(link['src'])\n\nprint('\\n')\n\ncourse_links = soup.find_all('a', {'href': re.compile('https://morvan.*')})\nfor link in course_links:\n    print(link['href'])\n```\n我们发现, 如果是图片, 它们都藏在这样一个 tag 中:\n```\n<td>\n    <img src=\"https://morvanzhou.github.io/static/img/course_cover/tf.jpg\">\n</td>\n```\n用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r'.*?\\.jpg' 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.\n想要的链接都有统一的形式, 就是开头都会有 https://morvan., 定一个正则, 让 BeautifulSoup 找到符合规则的链接.\n![print结果](https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 一个小练习来熟悉\n```\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\nimport random\n\n\nbase_url = \"https://baike.baidu.com\"\nhis = [\"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711\"]\n\nfor i in range(20):\n    # dealing with Chinese symbols\n    url = base_url + his[-1]\n\n    html = urlopen(url).read().decode('utf-8')\n    soup = BeautifulSoup(html, features='lxml')\n    print(i, soup.find('h1').get_text(), '    url: ', url)\n\n    # find valid urls\n    sub_urls = soup.find_all(\n      \"a\", {\"target\": \"_blank\", \"href\": re.compile(\"/item/(%.{2})+$\")})\n\n    if len(sub_urls) != 0:\n        his.append(random.sample(sub_urls, 1)[0]['href'])\n    else:\n        # no valid sub link found\n        his.pop()\n```\n","slug":"python练习/爬虫整理（二）BeautifulSoup","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p630074tssa1i8ql9ct","content":"<h4 id=\"BeautifulSoup-解析：基础\"><a href=\"#BeautifulSoup-解析：基础\" class=\"headerlink\" title=\"BeautifulSoup 解析：基础\"></a>BeautifulSoup 解析：基础</h4><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb\" target=\"_blank\" rel=\"noopener\">本段完整代码</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装命令行\"><br>具体安装过程可自行搜索。<br><strong>beautifulSoup使用过程</strong></p>\n<ol>\n<li>选择要爬的网址 (url)</li>\n<li>使用 python 打开这个网址 (urlopen等)</li>\n<li>读取网页信息 (read() 出来)</li>\n<li>将读取的信息放入 BeautifulSoup</li>\n<li>使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与上章同一个网页\"></p>\n<p><strong>使用BeautifulSoup筛选数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)  #以 lxml 的这种形式加载</span><br><span class=\"line\">print(soup)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可以看到原格式转为如上形式\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.h1)   # 输出&lt;h1&gt; 标题</span><br><span class=\"line\">print(soup.p)  # 输出&lt;p&gt; 标题</span><br><span class=\"line\"></span><br><span class=\"line\">all_href = soup.find_all(&apos;a&apos;)</span><br><span class=\"line\">print(&apos;\\n&apos;,all_href)</span><br><span class=\"line\">all_href = [l[&apos;href&apos;] for l in all_href] </span><br><span class=\"line\">#像 Python 字典的形式, 用 key 来读取 l[&quot;href&quot;]</span><br><span class=\"line\">print(&apos;\\n&apos;, all_href)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"BeautifulSoup-解析网页-CSS\"><a href=\"#BeautifulSoup-解析网页-CSS\" class=\"headerlink\" title=\"BeautifulSoup 解析网页:CSS\"></a>BeautifulSoup 解析网页:CSS</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网页源码\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/list.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># use class to narrow search</span><br><span class=\"line\">month = soup.find_all(&apos;li&apos;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</span><br><span class=\"line\">print(month)</span><br><span class=\"line\"></span><br><span class=\"line\">#要找所有 class=month 的信息. 并打印出它们的 tag 内文字</span><br><span class=\"line\">for m in month:</span><br><span class=\"line\">    print(m.get_text())   # 打印tag中的文字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jan = soup.find(&apos;ul&apos;, &#123;&quot;class&quot;: &apos;jan&apos;&#125;)</span><br><span class=\"line\">print(&apos;\\n&apos;,jan)</span><br><span class=\"line\">d_jan = jan.find_all(&apos;li&apos;)              # use jan as a parent</span><br><span class=\"line\">print(&apos;\\n&apos;,d_jan)</span><br><span class=\"line\">for d in d_jan:</span><br><span class=\"line\">    print(&apos;\\n&apos;,d.get_text())</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"get_txt()\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"详细情况\"></p>\n<h3 id=\"BeautifulSoup-解析网页正则表达式\"><a href=\"#BeautifulSoup-解析网页正则表达式\" class=\"headerlink\" title=\"BeautifulSoup 解析网页正则表达式\"></a>BeautifulSoup 解析网页正则表达式</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/table.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">img_links = soup.find_all(&quot;img&quot;, &#123;&quot;src&quot;: re.compile(&apos;.*?\\.jpg&apos;)&#125;)</span><br><span class=\"line\">for link in img_links:</span><br><span class=\"line\">    print(link[&apos;src&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">print(&apos;\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">course_links = soup.find_all(&apos;a&apos;, &#123;&apos;href&apos;: re.compile(&apos;https://morvan.*&apos;)&#125;)</span><br><span class=\"line\">for link in course_links:</span><br><span class=\"line\">    print(link[&apos;href&apos;])</span><br></pre></td></tr></table></figure></p>\n<p>我们发现, 如果是图片, 它们都藏在这样一个 tag 中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    &lt;img src=&quot;https://morvanzhou.github.io/static/img/course_cover/tf.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r’.*?.jpg’ 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.<br>想要的链接都有统一的形式, 就是开头都会有 <a href=\"https://morvan.\" target=\"_blank\" rel=\"noopener\">https://morvan.</a>, 定一个正则, 让 BeautifulSoup 找到符合规则的链接.<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"一个小练习来熟悉\"><a href=\"#一个小练习来熟悉\" class=\"headerlink\" title=\"一个小练习来熟悉\"></a>一个小练习来熟悉</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(20):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(</span><br><span class=\"line\">      &quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"BeautifulSoup-解析：基础\"><a href=\"#BeautifulSoup-解析：基础\" class=\"headerlink\" title=\"BeautifulSoup 解析：基础\"></a>BeautifulSoup 解析：基础</h4><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-1-beautifulsoup-basic.ipynb\" target=\"_blank\" rel=\"noopener\">本段完整代码</a></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-972acc5683052977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装命令行\"><br>具体安装过程可自行搜索。<br><strong>beautifulSoup使用过程</strong></p>\n<ol>\n<li>选择要爬的网址 (url)</li>\n<li>使用 python 打开这个网址 (urlopen等)</li>\n<li>读取网页信息 (read() 出来)</li>\n<li>将读取的信息放入 BeautifulSoup</li>\n<li>使用 BeautifulSoup 选取 tag 信息等 (代替正则表达式)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/basic-structure.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d4b80cef625ef7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"与上章同一个网页\"></p>\n<p><strong>使用BeautifulSoup筛选数据</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)  #以 lxml 的这种形式加载</span><br><span class=\"line\">print(soup)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-ab04ce3575b957d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"可以看到原格式转为如上形式\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(soup.h1)   # 输出&lt;h1&gt; 标题</span><br><span class=\"line\">print(soup.p)  # 输出&lt;p&gt; 标题</span><br><span class=\"line\"></span><br><span class=\"line\">all_href = soup.find_all(&apos;a&apos;)</span><br><span class=\"line\">print(&apos;\\n&apos;,all_href)</span><br><span class=\"line\">all_href = [l[&apos;href&apos;] for l in all_href] </span><br><span class=\"line\">#像 Python 字典的形式, 用 key 来读取 l[&quot;href&quot;]</span><br><span class=\"line\">print(&apos;\\n&apos;, all_href)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-d23938e9b6c5424d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"BeautifulSoup-解析网页-CSS\"><a href=\"#BeautifulSoup-解析网页-CSS\" class=\"headerlink\" title=\"BeautifulSoup 解析网页:CSS\"></a>BeautifulSoup 解析网页:CSS</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-2-beautifulsoup-css.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-92507ccb838ab38a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"网页源码\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\"></span><br><span class=\"line\"># if has Chinese, apply decode()</span><br><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/list.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># use class to narrow search</span><br><span class=\"line\">month = soup.find_all(&apos;li&apos;, &#123;&quot;class&quot;: &quot;month&quot;&#125;)</span><br><span class=\"line\">print(month)</span><br><span class=\"line\"></span><br><span class=\"line\">#要找所有 class=month 的信息. 并打印出它们的 tag 内文字</span><br><span class=\"line\">for m in month:</span><br><span class=\"line\">    print(m.get_text())   # 打印tag中的文字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jan = soup.find(&apos;ul&apos;, &#123;&quot;class&quot;: &apos;jan&apos;&#125;)</span><br><span class=\"line\">print(&apos;\\n&apos;,jan)</span><br><span class=\"line\">d_jan = jan.find_all(&apos;li&apos;)              # use jan as a parent</span><br><span class=\"line\">print(&apos;\\n&apos;,d_jan)</span><br><span class=\"line\">for d in d_jan:</span><br><span class=\"line\">    print(&apos;\\n&apos;,d.get_text())</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/14597179-4ee3fccc37d160d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"get_txt()\"><br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a13fb259bf35f0fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"详细情况\"></p>\n<h3 id=\"BeautifulSoup-解析网页正则表达式\"><a href=\"#BeautifulSoup-解析网页正则表达式\" class=\"headerlink\" title=\"BeautifulSoup 解析网页正则表达式\"></a>BeautifulSoup 解析网页正则表达式</h3><p><a href=\"https://github.com/MorvanZhou/easy-scraping-tutorial/blob/master/notebook/2-3-beautifulsoup-regex.ipynb\" target=\"_blank\" rel=\"noopener\">本节代码</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html = urlopen(</span><br><span class=\"line\">&quot;https://morvanzhou.github.io/static/scraping/table.html&quot;).read(</span><br><span class=\"line\">).decode(&apos;utf-8&apos;)</span><br><span class=\"line\">print(html)</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">img_links = soup.find_all(&quot;img&quot;, &#123;&quot;src&quot;: re.compile(&apos;.*?\\.jpg&apos;)&#125;)</span><br><span class=\"line\">for link in img_links:</span><br><span class=\"line\">    print(link[&apos;src&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">print(&apos;\\n&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">course_links = soup.find_all(&apos;a&apos;, &#123;&apos;href&apos;: re.compile(&apos;https://morvan.*&apos;)&#125;)</span><br><span class=\"line\">for link in course_links:</span><br><span class=\"line\">    print(link[&apos;href&apos;])</span><br></pre></td></tr></table></figure></p>\n<p>我们发现, 如果是图片, 它们都藏在这样一个 tag 中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    &lt;img src=&quot;https://morvanzhou.github.io/static/img/course_cover/tf.jpg&quot;&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p>\n<p>用 soup 将这些 <img> tag 全部找出来, 但是每一个 img 的链接(src)都可能不同，可能是 jpg 有的是 png, 只挑选 jpg 形式的图片, 用这样一个正则 r’.*?.jpg’ 来选取. 把正则的 compile 形式放到 BeautifulSoup 的功能中, 就能选到符合要求的图片链接了.<br>想要的链接都有统一的形式, 就是开头都会有 <a href=\"https://morvan.\" target=\"_blank\" rel=\"noopener\">https://morvan.</a>, 定一个正则, 让 BeautifulSoup 找到符合规则的链接.<br><img src=\"https://upload-images.jianshu.io/upload_images/14597179-a8138d244e0abd66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"print结果\"></p>\n<h3 id=\"一个小练习来熟悉\"><a href=\"#一个小练习来熟悉\" class=\"headerlink\" title=\"一个小练习来熟悉\"></a>一个小练习来熟悉</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">from urllib.request import urlopen</span><br><span class=\"line\">import re</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">base_url = &quot;https://baike.baidu.com&quot;</span><br><span class=\"line\">his = [&quot;/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(20):</span><br><span class=\"line\">    # dealing with Chinese symbols</span><br><span class=\"line\">    url = base_url + his[-1]</span><br><span class=\"line\"></span><br><span class=\"line\">    html = urlopen(url).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\">    soup = BeautifulSoup(html, features=&apos;lxml&apos;)</span><br><span class=\"line\">    print(i, soup.find(&apos;h1&apos;).get_text(), &apos;    url: &apos;, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    # find valid urls</span><br><span class=\"line\">    sub_urls = soup.find_all(</span><br><span class=\"line\">      &quot;a&quot;, &#123;&quot;target&quot;: &quot;_blank&quot;, &quot;href&quot;: re.compile(&quot;/item/(%.&#123;2&#125;)+$&quot;)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(sub_urls) != 0:</span><br><span class=\"line\">        his.append(random.sample(sub_urls, 1)[0][&apos;href&apos;])</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # no valid sub link found</span><br><span class=\"line\">        his.pop()</span><br></pre></td></tr></table></figure>\n"},{"title":"爬虫整理（三）Requests","date":"2018-12-25T03:05:31.000Z","_content":"\n\n[Requests](http://docs.python-requests.org/en/master/) 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.\n\n\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('https://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\n# https://www.baidu.com/s?wd=itswl.github\n```\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('http://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\ndef get():\n    print('\\nget')\n    param = {\"wd\": \"itswl.github\"}\n    r = requests.get('https://www.baidu.com/s', params=param)\n    print(r.url)\n    print(r.text)\n\n# get()\ndef post_name():\n    print('\\npost name')\n    # http://pythonscraping.com/pages/files/form.html\n    data = {'firstname': 'laii', 'lastname': 'weii'}\n    r = requests.post('http://pythonscraping.com/files/processing.php', data=data)\n    print(r.text)\npost_name()\n\ndef post_image():\n    print('\\npost image')\n    # http://pythonscraping.com/files/form2.html\n    file = {'uploadFile': open('./image.png', 'rb')}\n    r = requests.post('http://pythonscraping.com/files/processing2.php', files=file)\n    print(r.text)\n\n\ndef post_login():\n    print('\\npost login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = requests.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    # http://pythonscraping.com/pages/cookies/profile.php\n    r = requests.get('http://pythonscraping.com/pages/cookies/profile.php', cookies=r.cookies)\n    print(r.text)\n\n\ndef session_login():   # 使用cookie\n    print('\\nsession login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    session = requests.Session()\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = session.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    r = session.get(\"http://pythonscraping.com/pages/cookies/profile.php\")\n    print(r.text)\n\n\n\npost_name()\npost_image()\npost_login()\nsession_login()\n```\n### 下载文件\n```\nimport os\nos.makedirs('./img/', exist_ok=True)\n\nIMAGE_URL = \"https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png\"\n\n\ndef urllib_download():\n    from urllib.request import urlretrieve\n    urlretrieve(IMAGE_URL, './img/image1.png')      # whole document\n\n\ndef request_download():\n    import requests\n    r = requests.get(IMAGE_URL)\n    with open('./img/image2.png', 'wb') as f:\n        f.write(r.content)                      # whole document\n\n\ndef chunk_download():\n    import requests\n    r = requests.get(IMAGE_URL, stream=True)    # stream loading\n\n    with open('./img/image3.png', 'wb') as f:\n        for chunk in r.iter_content(chunk_size=32):\n            f.write(chunk)\n\n\nurllib_download()\nprint('download image1')\nrequest_download()\nprint('download image2')\nchunk_download()\nprint('download image3')\n```\n###  一个小练习，抓取美女吧图片\n```\n# coding=utf-8\nimport requests\nfrom lxml import etree\nimport os\nimport re\n\n\nclass TieBa(object):\n    \"\"\"抓取百度贴吧美女图片\"\"\"\n    def __init__(self, word):\n        self.url = 'https://tieba.baidu.com/f?kw={}'.format(word) # word 美女\n        self.headers = {\n            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) '\n        }\n\n    def get_data(self, url):\n        # 构造请求\n        response = requests.get(url, headers=self.headers)\n        data = response.content\n        # print(data)\n        return data\n\n    def parse_page(self, data):\n        \"\"\"解析数据\"\"\"\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # 提取当前页标题，url数据\n        node_list = html.xpath('//*[@id=\"thread_list\"]/li/div/div[2]/div[1]/div[1]/a')\n        detail_list = []\n        for node in node_list:\n            temp = dict()\n            temp['title'] = node.xpath('./text()')[0]\n            temp['url'] = 'https://tieba.baidu.com' + node.xpath('./@href')[0]\n            detail_list.append(temp)\n            # print(temp)\n        # 提取下一页连接\n        next_url = html.xpath('//*[@id=\"frs_list_pager\"]/a[contains(text(), \"下一页\")]/@href')[0]\n        next_url = 'http:' + next_url if len(next_url) > 0 else None\n        # print(next_url)\n        return detail_list, next_url\n\n    def parse_detail(self, detail_list):\n        \"\"\"提取详情页url\"\"\"\n        data_url = []\n        for detail in detail_list:\n            data_url.append(detail['url'])\n        return data_url\n\n    def save_data(self, url):\n        \"\"\"保存数据\"\"\"\n        # 请求标题连接地址\n        data = self.get_data(url)\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # print(html)\n        # print(url)\n        # 获取图片url\n        try:\n            image_url = html.xpath('//*[contains(@id,\"post_content\")]/img[1]/@src')[0]\n        except Exception as e:\n            return\n        print(image_url)\n        # 判断图片地址是否已jpg结尾\n        if re.match(r'.*\\.jpg$', image_url):\n            # 请求图片地址，获取图片\n            image_data = self.get_data(image_url)\n            filename = 'image/' + image_url.split('/')[-1]\n            # print(filename)\n            # 保存图片\n            with open(filename, 'wb') as f:\n                f.write(image_data)\n\n    def run(self):\n        # 判断是否有image文件夹\n        if not os.path.exists('image'):\n            # 创建文件夹\n            os.mkdir('image')\n        next_url = self.url\n        # 请求美女吧首页\n        data = self.get_data(next_url)\n        # 保存首页文件，观察数据，是否有需要的数据\n        with open('tieba.json', 'wb') as f:\n            f.write(data)\n        # 如果有下一页就执行\n        while next_url:\n            # 获取每页标题和对应的连接地址\n            detail_list, next_url = self.parse_page(data)\n            # 提取每页的详情页的url\n            data_url = self.parse_detail(detail_list)\n            # 遍历每个url\n            for url in data_url:\n                # 保存图片\n                self.save_data(url)\n            # 构造下一页请求\n            data = self.get_data(next_url)\n\n\nif __name__ == '__main__':\n    tb = TieBa('美女')\n    tb.run()\n\n```\n","source":"_posts/python练习/爬虫整理（三）Requests.md","raw":"---\ntitle: 爬虫整理（三）Requests\ndate: 2018-12-25 11:05:31\ntags:\ncategories: python练习\n---\n\n\n[Requests](http://docs.python-requests.org/en/master/) 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.\n\n\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('https://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\n# https://www.baidu.com/s?wd=itswl.github\n```\n```\nimport requests\nimport webbrowser  #  使用浏览器打开\nparam = {\"wd\": \"itswl.github\"}  # 搜索的信息\nr = requests.get('http://www.baidu.com/s', params=param)\nprint(r.url)    # 用get 方式\nwebbrowser.open(r.url)\ndef get():\n    print('\\nget')\n    param = {\"wd\": \"itswl.github\"}\n    r = requests.get('https://www.baidu.com/s', params=param)\n    print(r.url)\n    print(r.text)\n\n# get()\ndef post_name():\n    print('\\npost name')\n    # http://pythonscraping.com/pages/files/form.html\n    data = {'firstname': 'laii', 'lastname': 'weii'}\n    r = requests.post('http://pythonscraping.com/files/processing.php', data=data)\n    print(r.text)\npost_name()\n\ndef post_image():\n    print('\\npost image')\n    # http://pythonscraping.com/files/form2.html\n    file = {'uploadFile': open('./image.png', 'rb')}\n    r = requests.post('http://pythonscraping.com/files/processing2.php', files=file)\n    print(r.text)\n\n\ndef post_login():\n    print('\\npost login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = requests.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    # http://pythonscraping.com/pages/cookies/profile.php\n    r = requests.get('http://pythonscraping.com/pages/cookies/profile.php', cookies=r.cookies)\n    print(r.text)\n\n\ndef session_login():   # 使用cookie\n    print('\\nsession login')\n    # http://pythonscraping.com/pages/cookies/login.html\n    session = requests.Session()\n    payload = {'username': 'Morvan', 'password': 'password'}\n    r = session.post('http://pythonscraping.com/pages/cookies/welcome.php', data=payload)\n    print(r.cookies.get_dict())\n    r = session.get(\"http://pythonscraping.com/pages/cookies/profile.php\")\n    print(r.text)\n\n\n\npost_name()\npost_image()\npost_login()\nsession_login()\n```\n### 下载文件\n```\nimport os\nos.makedirs('./img/', exist_ok=True)\n\nIMAGE_URL = \"https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png\"\n\n\ndef urllib_download():\n    from urllib.request import urlretrieve\n    urlretrieve(IMAGE_URL, './img/image1.png')      # whole document\n\n\ndef request_download():\n    import requests\n    r = requests.get(IMAGE_URL)\n    with open('./img/image2.png', 'wb') as f:\n        f.write(r.content)                      # whole document\n\n\ndef chunk_download():\n    import requests\n    r = requests.get(IMAGE_URL, stream=True)    # stream loading\n\n    with open('./img/image3.png', 'wb') as f:\n        for chunk in r.iter_content(chunk_size=32):\n            f.write(chunk)\n\n\nurllib_download()\nprint('download image1')\nrequest_download()\nprint('download image2')\nchunk_download()\nprint('download image3')\n```\n###  一个小练习，抓取美女吧图片\n```\n# coding=utf-8\nimport requests\nfrom lxml import etree\nimport os\nimport re\n\n\nclass TieBa(object):\n    \"\"\"抓取百度贴吧美女图片\"\"\"\n    def __init__(self, word):\n        self.url = 'https://tieba.baidu.com/f?kw={}'.format(word) # word 美女\n        self.headers = {\n            'User-Agent': 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) '\n        }\n\n    def get_data(self, url):\n        # 构造请求\n        response = requests.get(url, headers=self.headers)\n        data = response.content\n        # print(data)\n        return data\n\n    def parse_page(self, data):\n        \"\"\"解析数据\"\"\"\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # 提取当前页标题，url数据\n        node_list = html.xpath('//*[@id=\"thread_list\"]/li/div/div[2]/div[1]/div[1]/a')\n        detail_list = []\n        for node in node_list:\n            temp = dict()\n            temp['title'] = node.xpath('./text()')[0]\n            temp['url'] = 'https://tieba.baidu.com' + node.xpath('./@href')[0]\n            detail_list.append(temp)\n            # print(temp)\n        # 提取下一页连接\n        next_url = html.xpath('//*[@id=\"frs_list_pager\"]/a[contains(text(), \"下一页\")]/@href')[0]\n        next_url = 'http:' + next_url if len(next_url) > 0 else None\n        # print(next_url)\n        return detail_list, next_url\n\n    def parse_detail(self, detail_list):\n        \"\"\"提取详情页url\"\"\"\n        data_url = []\n        for detail in detail_list:\n            data_url.append(detail['url'])\n        return data_url\n\n    def save_data(self, url):\n        \"\"\"保存数据\"\"\"\n        # 请求标题连接地址\n        data = self.get_data(url)\n        # 创建xpath对象\n        html = etree.HTML(data)\n        # print(html)\n        # print(url)\n        # 获取图片url\n        try:\n            image_url = html.xpath('//*[contains(@id,\"post_content\")]/img[1]/@src')[0]\n        except Exception as e:\n            return\n        print(image_url)\n        # 判断图片地址是否已jpg结尾\n        if re.match(r'.*\\.jpg$', image_url):\n            # 请求图片地址，获取图片\n            image_data = self.get_data(image_url)\n            filename = 'image/' + image_url.split('/')[-1]\n            # print(filename)\n            # 保存图片\n            with open(filename, 'wb') as f:\n                f.write(image_data)\n\n    def run(self):\n        # 判断是否有image文件夹\n        if not os.path.exists('image'):\n            # 创建文件夹\n            os.mkdir('image')\n        next_url = self.url\n        # 请求美女吧首页\n        data = self.get_data(next_url)\n        # 保存首页文件，观察数据，是否有需要的数据\n        with open('tieba.json', 'wb') as f:\n            f.write(data)\n        # 如果有下一页就执行\n        while next_url:\n            # 获取每页标题和对应的连接地址\n            detail_list, next_url = self.parse_page(data)\n            # 提取每页的详情页的url\n            data_url = self.parse_detail(detail_list)\n            # 遍历每个url\n            for url in data_url:\n                # 保存图片\n                self.save_data(url)\n            # 构造下一页请求\n            data = self.get_data(next_url)\n\n\nif __name__ == '__main__':\n    tb = TieBa('美女')\n    tb.run()\n\n```\n","slug":"python练习/爬虫整理（三）Requests","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p650076tssay58ne2k6","content":"<p><a href=\"http://docs.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">Requests</a> 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\"># https://www.baidu.com/s?wd=itswl.github</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;http://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\">def get():</span><br><span class=\"line\">    print(&apos;\\nget&apos;)</span><br><span class=\"line\">    param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;</span><br><span class=\"line\">    r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">    print(r.url)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"># get()</span><br><span class=\"line\">def post_name():</span><br><span class=\"line\">    print(&apos;\\npost name&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/files/form.html</span><br><span class=\"line\">    data = &#123;&apos;firstname&apos;: &apos;laii&apos;, &apos;lastname&apos;: &apos;weii&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing.php&apos;, data=data)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\">post_name()</span><br><span class=\"line\"></span><br><span class=\"line\">def post_image():</span><br><span class=\"line\">    print(&apos;\\npost image&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/files/form2.html</span><br><span class=\"line\">    file = &#123;&apos;uploadFile&apos;: open(&apos;./image.png&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing2.php&apos;, files=file)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def post_login():</span><br><span class=\"line\">    print(&apos;\\npost login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/profile.php</span><br><span class=\"line\">    r = requests.get(&apos;http://pythonscraping.com/pages/cookies/profile.php&apos;, cookies=r.cookies)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def session_login():   # 使用cookie</span><br><span class=\"line\">    print(&apos;\\nsession login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = session.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    r = session.get(&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">post_name()</span><br><span class=\"line\">post_image()</span><br><span class=\"line\">post_login()</span><br><span class=\"line\">session_login()</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.makedirs(&apos;./img/&apos;, exist_ok=True)</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_URL = &quot;https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def urllib_download():</span><br><span class=\"line\">    from urllib.request import urlretrieve</span><br><span class=\"line\">    urlretrieve(IMAGE_URL, &apos;./img/image1.png&apos;)      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL)</span><br><span class=\"line\">    with open(&apos;./img/image2.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(r.content)                      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def chunk_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL, stream=True)    # stream loading</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;./img/image3.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        for chunk in r.iter_content(chunk_size=32):</span><br><span class=\"line\">            f.write(chunk)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">urllib_download()</span><br><span class=\"line\">print(&apos;download image1&apos;)</span><br><span class=\"line\">request_download()</span><br><span class=\"line\">print(&apos;download image2&apos;)</span><br><span class=\"line\">chunk_download()</span><br><span class=\"line\">print(&apos;download image3&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个小练习，抓取美女吧图片\"><a href=\"#一个小练习，抓取美女吧图片\" class=\"headerlink\" title=\"一个小练习，抓取美女吧图片\"></a>一个小练习，抓取美女吧图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class TieBa(object):</span><br><span class=\"line\">    &quot;&quot;&quot;抓取百度贴吧美女图片&quot;&quot;&quot;</span><br><span class=\"line\">    def __init__(self, word):</span><br><span class=\"line\">        self.url = &apos;https://tieba.baidu.com/f?kw=&#123;&#125;&apos;.format(word) # word 美女</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            &apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) &apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_data(self, url):</span><br><span class=\"line\">        # 构造请求</span><br><span class=\"line\">        response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        data = response.content</span><br><span class=\"line\">        # print(data)</span><br><span class=\"line\">        return data</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_page(self, data):</span><br><span class=\"line\">        &quot;&quot;&quot;解析数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # 提取当前页标题，url数据</span><br><span class=\"line\">        node_list = html.xpath(&apos;//*[@id=&quot;thread_list&quot;]/li/div/div[2]/div[1]/div[1]/a&apos;)</span><br><span class=\"line\">        detail_list = []</span><br><span class=\"line\">        for node in node_list:</span><br><span class=\"line\">            temp = dict()</span><br><span class=\"line\">            temp[&apos;title&apos;] = node.xpath(&apos;./text()&apos;)[0]</span><br><span class=\"line\">            temp[&apos;url&apos;] = &apos;https://tieba.baidu.com&apos; + node.xpath(&apos;./@href&apos;)[0]</span><br><span class=\"line\">            detail_list.append(temp)</span><br><span class=\"line\">            # print(temp)</span><br><span class=\"line\">        # 提取下一页连接</span><br><span class=\"line\">        next_url = html.xpath(&apos;//*[@id=&quot;frs_list_pager&quot;]/a[contains(text(), &quot;下一页&quot;)]/@href&apos;)[0]</span><br><span class=\"line\">        next_url = &apos;http:&apos; + next_url if len(next_url) &gt; 0 else None</span><br><span class=\"line\">        # print(next_url)</span><br><span class=\"line\">        return detail_list, next_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_detail(self, detail_list):</span><br><span class=\"line\">        &quot;&quot;&quot;提取详情页url&quot;&quot;&quot;</span><br><span class=\"line\">        data_url = []</span><br><span class=\"line\">        for detail in detail_list:</span><br><span class=\"line\">            data_url.append(detail[&apos;url&apos;])</span><br><span class=\"line\">        return data_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def save_data(self, url):</span><br><span class=\"line\">        &quot;&quot;&quot;保存数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 请求标题连接地址</span><br><span class=\"line\">        data = self.get_data(url)</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # print(html)</span><br><span class=\"line\">        # print(url)</span><br><span class=\"line\">        # 获取图片url</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            image_url = html.xpath(&apos;//*[contains(@id,&quot;post_content&quot;)]/img[1]/@src&apos;)[0]</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            return</span><br><span class=\"line\">        print(image_url)</span><br><span class=\"line\">        # 判断图片地址是否已jpg结尾</span><br><span class=\"line\">        if re.match(r&apos;.*\\.jpg$&apos;, image_url):</span><br><span class=\"line\">            # 请求图片地址，获取图片</span><br><span class=\"line\">            image_data = self.get_data(image_url)</span><br><span class=\"line\">            filename = &apos;image/&apos; + image_url.split(&apos;/&apos;)[-1]</span><br><span class=\"line\">            # print(filename)</span><br><span class=\"line\">            # 保存图片</span><br><span class=\"line\">            with open(filename, &apos;wb&apos;) as f:</span><br><span class=\"line\">                f.write(image_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        # 判断是否有image文件夹</span><br><span class=\"line\">        if not os.path.exists(&apos;image&apos;):</span><br><span class=\"line\">            # 创建文件夹</span><br><span class=\"line\">            os.mkdir(&apos;image&apos;)</span><br><span class=\"line\">        next_url = self.url</span><br><span class=\"line\">        # 请求美女吧首页</span><br><span class=\"line\">        data = self.get_data(next_url)</span><br><span class=\"line\">        # 保存首页文件，观察数据，是否有需要的数据</span><br><span class=\"line\">        with open(&apos;tieba.json&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">        # 如果有下一页就执行</span><br><span class=\"line\">        while next_url:</span><br><span class=\"line\">            # 获取每页标题和对应的连接地址</span><br><span class=\"line\">            detail_list, next_url = self.parse_page(data)</span><br><span class=\"line\">            # 提取每页的详情页的url</span><br><span class=\"line\">            data_url = self.parse_detail(detail_list)</span><br><span class=\"line\">            # 遍历每个url</span><br><span class=\"line\">            for url in data_url:</span><br><span class=\"line\">                # 保存图片</span><br><span class=\"line\">                self.save_data(url)</span><br><span class=\"line\">            # 构造下一页请求</span><br><span class=\"line\">            data = self.get_data(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    tb = TieBa(&apos;美女&apos;)</span><br><span class=\"line\">    tb.run()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://docs.python-requests.org/en/master/\" target=\"_blank\" rel=\"noopener\">Requests</a> 是一个 Python 的外部模块, 需要手动安装. 使用 pip 安装就好了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\"># https://www.baidu.com/s?wd=itswl.github</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import webbrowser  #  使用浏览器打开</span><br><span class=\"line\">param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;  # 搜索的信息</span><br><span class=\"line\">r = requests.get(&apos;http://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">print(r.url)    # 用get 方式</span><br><span class=\"line\">webbrowser.open(r.url)</span><br><span class=\"line\">def get():</span><br><span class=\"line\">    print(&apos;\\nget&apos;)</span><br><span class=\"line\">    param = &#123;&quot;wd&quot;: &quot;itswl.github&quot;&#125;</span><br><span class=\"line\">    r = requests.get(&apos;https://www.baidu.com/s&apos;, params=param)</span><br><span class=\"line\">    print(r.url)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"># get()</span><br><span class=\"line\">def post_name():</span><br><span class=\"line\">    print(&apos;\\npost name&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/files/form.html</span><br><span class=\"line\">    data = &#123;&apos;firstname&apos;: &apos;laii&apos;, &apos;lastname&apos;: &apos;weii&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing.php&apos;, data=data)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\">post_name()</span><br><span class=\"line\"></span><br><span class=\"line\">def post_image():</span><br><span class=\"line\">    print(&apos;\\npost image&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/files/form2.html</span><br><span class=\"line\">    file = &#123;&apos;uploadFile&apos;: open(&apos;./image.png&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/files/processing2.php&apos;, files=file)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def post_login():</span><br><span class=\"line\">    print(&apos;\\npost login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = requests.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/profile.php</span><br><span class=\"line\">    r = requests.get(&apos;http://pythonscraping.com/pages/cookies/profile.php&apos;, cookies=r.cookies)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def session_login():   # 使用cookie</span><br><span class=\"line\">    print(&apos;\\nsession login&apos;)</span><br><span class=\"line\">    # http://pythonscraping.com/pages/cookies/login.html</span><br><span class=\"line\">    session = requests.Session()</span><br><span class=\"line\">    payload = &#123;&apos;username&apos;: &apos;Morvan&apos;, &apos;password&apos;: &apos;password&apos;&#125;</span><br><span class=\"line\">    r = session.post(&apos;http://pythonscraping.com/pages/cookies/welcome.php&apos;, data=payload)</span><br><span class=\"line\">    print(r.cookies.get_dict())</span><br><span class=\"line\">    r = session.get(&quot;http://pythonscraping.com/pages/cookies/profile.php&quot;)</span><br><span class=\"line\">    print(r.text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">post_name()</span><br><span class=\"line\">post_image()</span><br><span class=\"line\">post_login()</span><br><span class=\"line\">session_login()</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.makedirs(&apos;./img/&apos;, exist_ok=True)</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE_URL = &quot;https://morvanzhou.github.io/static/img/description/learning_step_flowchart.png&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def urllib_download():</span><br><span class=\"line\">    from urllib.request import urlretrieve</span><br><span class=\"line\">    urlretrieve(IMAGE_URL, &apos;./img/image1.png&apos;)      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def request_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL)</span><br><span class=\"line\">    with open(&apos;./img/image2.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        f.write(r.content)                      # whole document</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def chunk_download():</span><br><span class=\"line\">    import requests</span><br><span class=\"line\">    r = requests.get(IMAGE_URL, stream=True)    # stream loading</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(&apos;./img/image3.png&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">        for chunk in r.iter_content(chunk_size=32):</span><br><span class=\"line\">            f.write(chunk)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">urllib_download()</span><br><span class=\"line\">print(&apos;download image1&apos;)</span><br><span class=\"line\">request_download()</span><br><span class=\"line\">print(&apos;download image2&apos;)</span><br><span class=\"line\">chunk_download()</span><br><span class=\"line\">print(&apos;download image3&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"一个小练习，抓取美女吧图片\"><a href=\"#一个小练习，抓取美女吧图片\" class=\"headerlink\" title=\"一个小练习，抓取美女吧图片\"></a>一个小练习，抓取美女吧图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\">import os</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class TieBa(object):</span><br><span class=\"line\">    &quot;&quot;&quot;抓取百度贴吧美女图片&quot;&quot;&quot;</span><br><span class=\"line\">    def __init__(self, word):</span><br><span class=\"line\">        self.url = &apos;https://tieba.baidu.com/f?kw=&#123;&#125;&apos;.format(word) # word 美女</span><br><span class=\"line\">        self.headers = &#123;</span><br><span class=\"line\">            &apos;User-Agent&apos;: &apos;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; TUCOWS) &apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_data(self, url):</span><br><span class=\"line\">        # 构造请求</span><br><span class=\"line\">        response = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        data = response.content</span><br><span class=\"line\">        # print(data)</span><br><span class=\"line\">        return data</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_page(self, data):</span><br><span class=\"line\">        &quot;&quot;&quot;解析数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # 提取当前页标题，url数据</span><br><span class=\"line\">        node_list = html.xpath(&apos;//*[@id=&quot;thread_list&quot;]/li/div/div[2]/div[1]/div[1]/a&apos;)</span><br><span class=\"line\">        detail_list = []</span><br><span class=\"line\">        for node in node_list:</span><br><span class=\"line\">            temp = dict()</span><br><span class=\"line\">            temp[&apos;title&apos;] = node.xpath(&apos;./text()&apos;)[0]</span><br><span class=\"line\">            temp[&apos;url&apos;] = &apos;https://tieba.baidu.com&apos; + node.xpath(&apos;./@href&apos;)[0]</span><br><span class=\"line\">            detail_list.append(temp)</span><br><span class=\"line\">            # print(temp)</span><br><span class=\"line\">        # 提取下一页连接</span><br><span class=\"line\">        next_url = html.xpath(&apos;//*[@id=&quot;frs_list_pager&quot;]/a[contains(text(), &quot;下一页&quot;)]/@href&apos;)[0]</span><br><span class=\"line\">        next_url = &apos;http:&apos; + next_url if len(next_url) &gt; 0 else None</span><br><span class=\"line\">        # print(next_url)</span><br><span class=\"line\">        return detail_list, next_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse_detail(self, detail_list):</span><br><span class=\"line\">        &quot;&quot;&quot;提取详情页url&quot;&quot;&quot;</span><br><span class=\"line\">        data_url = []</span><br><span class=\"line\">        for detail in detail_list:</span><br><span class=\"line\">            data_url.append(detail[&apos;url&apos;])</span><br><span class=\"line\">        return data_url</span><br><span class=\"line\"></span><br><span class=\"line\">    def save_data(self, url):</span><br><span class=\"line\">        &quot;&quot;&quot;保存数据&quot;&quot;&quot;</span><br><span class=\"line\">        # 请求标题连接地址</span><br><span class=\"line\">        data = self.get_data(url)</span><br><span class=\"line\">        # 创建xpath对象</span><br><span class=\"line\">        html = etree.HTML(data)</span><br><span class=\"line\">        # print(html)</span><br><span class=\"line\">        # print(url)</span><br><span class=\"line\">        # 获取图片url</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            image_url = html.xpath(&apos;//*[contains(@id,&quot;post_content&quot;)]/img[1]/@src&apos;)[0]</span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            return</span><br><span class=\"line\">        print(image_url)</span><br><span class=\"line\">        # 判断图片地址是否已jpg结尾</span><br><span class=\"line\">        if re.match(r&apos;.*\\.jpg$&apos;, image_url):</span><br><span class=\"line\">            # 请求图片地址，获取图片</span><br><span class=\"line\">            image_data = self.get_data(image_url)</span><br><span class=\"line\">            filename = &apos;image/&apos; + image_url.split(&apos;/&apos;)[-1]</span><br><span class=\"line\">            # print(filename)</span><br><span class=\"line\">            # 保存图片</span><br><span class=\"line\">            with open(filename, &apos;wb&apos;) as f:</span><br><span class=\"line\">                f.write(image_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    def run(self):</span><br><span class=\"line\">        # 判断是否有image文件夹</span><br><span class=\"line\">        if not os.path.exists(&apos;image&apos;):</span><br><span class=\"line\">            # 创建文件夹</span><br><span class=\"line\">            os.mkdir(&apos;image&apos;)</span><br><span class=\"line\">        next_url = self.url</span><br><span class=\"line\">        # 请求美女吧首页</span><br><span class=\"line\">        data = self.get_data(next_url)</span><br><span class=\"line\">        # 保存首页文件，观察数据，是否有需要的数据</span><br><span class=\"line\">        with open(&apos;tieba.json&apos;, &apos;wb&apos;) as f:</span><br><span class=\"line\">            f.write(data)</span><br><span class=\"line\">        # 如果有下一页就执行</span><br><span class=\"line\">        while next_url:</span><br><span class=\"line\">            # 获取每页标题和对应的连接地址</span><br><span class=\"line\">            detail_list, next_url = self.parse_page(data)</span><br><span class=\"line\">            # 提取每页的详情页的url</span><br><span class=\"line\">            data_url = self.parse_detail(detail_list)</span><br><span class=\"line\">            # 遍历每个url</span><br><span class=\"line\">            for url in data_url:</span><br><span class=\"line\">                # 保存图片</span><br><span class=\"line\">                self.save_data(url)</span><br><span class=\"line\">            # 构造下一页请求</span><br><span class=\"line\">            data = self.get_data(next_url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    tb = TieBa(&apos;美女&apos;)</span><br><span class=\"line\">    tb.run()</span><br></pre></td></tr></table></figure>\n"},{"title":"读取TXT_PDF","date":"2018-12-25T03:26:55.000Z","_content":"\n这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。\n`pip install pdfminer3k`。PDF其中注释掉的为读取网络上的PDF文档。\n代码如下：\n\n```\nfrom urllib import request\n\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager\nfrom pdfminer.pdfparser import PDFDocument, PDFParser\nfrom pdfminer.converter import PDFPageAggregator\nfrom pdfminer.layout import LAParams\n\n\n# html = request.urlopen(\n# 'https://en.wikipedia.org/robots.txt'\n# ).read().decode('utf-8')\n# print(html)   # 读取txt\n\n\n# fp = open('./practice/byte-of-python-chinese-edition.pdf','rb')  # 获取文档对象\nfp = request.urlopen('https://q.stock.sohu.com/newpdf/201831703172.pdf')  # 读取网络pdf\nparser = PDFParser(fp)   # 创建一个与文档关联的解释器\ndoc = PDFDocument() # 文档对象\n\n# 链接解释器和文档对象\nparser.set_document(doc)\ndoc.set_parser(parser)\n\n# 初始化文档\ndoc.initialize()   # 可接收文档密码\n\nresource = PDFResourceManager()  # 创建PDF资源管理器\n\nlaparam = LAParams()   # 参数分析器\n\ndevice = PDFPageAggregator(resource,laparams=laparam)\n# 创建一个聚合器\n\ninterpreter = PDFPageInterpreter(resource,device)\n# 创建 PDF页面解释器\n\n# 使用文档对象得到页面的集合\nfor page in doc.get_pages():\n    # 使用页面解释器来读取\n    interpreter.process_page(page)\n\n    # 使用聚合器来获取内容\n    layout = device.get_result()\n\n    for out in layout:\n        if hasattr(out,'get_text'):   # 有没有这个属性\n            print(out.get_text())\n\n\n```\n","source":"_posts/python练习/读取TXT_PDF.md","raw":"\n---\ntitle: 读取TXT_PDF\ndate: 2018-12-25 11:26:55\ntags:\ncategories: python练习\n---\n\n这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。\n`pip install pdfminer3k`。PDF其中注释掉的为读取网络上的PDF文档。\n代码如下：\n\n```\nfrom urllib import request\n\nfrom pdfminer.pdfdevice import PDFDevice\nfrom pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager\nfrom pdfminer.pdfparser import PDFDocument, PDFParser\nfrom pdfminer.converter import PDFPageAggregator\nfrom pdfminer.layout import LAParams\n\n\n# html = request.urlopen(\n# 'https://en.wikipedia.org/robots.txt'\n# ).read().decode('utf-8')\n# print(html)   # 读取txt\n\n\n# fp = open('./practice/byte-of-python-chinese-edition.pdf','rb')  # 获取文档对象\nfp = request.urlopen('https://q.stock.sohu.com/newpdf/201831703172.pdf')  # 读取网络pdf\nparser = PDFParser(fp)   # 创建一个与文档关联的解释器\ndoc = PDFDocument() # 文档对象\n\n# 链接解释器和文档对象\nparser.set_document(doc)\ndoc.set_parser(parser)\n\n# 初始化文档\ndoc.initialize()   # 可接收文档密码\n\nresource = PDFResourceManager()  # 创建PDF资源管理器\n\nlaparam = LAParams()   # 参数分析器\n\ndevice = PDFPageAggregator(resource,laparams=laparam)\n# 创建一个聚合器\n\ninterpreter = PDFPageInterpreter(resource,device)\n# 创建 PDF页面解释器\n\n# 使用文档对象得到页面的集合\nfor page in doc.get_pages():\n    # 使用页面解释器来读取\n    interpreter.process_page(page)\n\n    # 使用聚合器来获取内容\n    layout = device.get_result()\n\n    for out in layout:\n        if hasattr(out,'get_text'):   # 有没有这个属性\n            print(out.get_text())\n\n\n```\n","slug":"python练习/读取TXT_PDF","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p660078tssak9lj49te","content":"<p>这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。<br><code>pip install pdfminer3k</code>。PDF其中注释掉的为读取网络上的PDF文档。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib import request</span><br><span class=\"line\"></span><br><span class=\"line\">from pdfminer.pdfdevice import PDFDevice</span><br><span class=\"line\">from pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager</span><br><span class=\"line\">from pdfminer.pdfparser import PDFDocument, PDFParser</span><br><span class=\"line\">from pdfminer.converter import PDFPageAggregator</span><br><span class=\"line\">from pdfminer.layout import LAParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># html = request.urlopen(</span><br><span class=\"line\"># &apos;https://en.wikipedia.org/robots.txt&apos;</span><br><span class=\"line\"># ).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\"># print(html)   # 读取txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># fp = open(&apos;./practice/byte-of-python-chinese-edition.pdf&apos;,&apos;rb&apos;)  # 获取文档对象</span><br><span class=\"line\">fp = request.urlopen(&apos;https://q.stock.sohu.com/newpdf/201831703172.pdf&apos;)  # 读取网络pdf</span><br><span class=\"line\">parser = PDFParser(fp)   # 创建一个与文档关联的解释器</span><br><span class=\"line\">doc = PDFDocument() # 文档对象</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接解释器和文档对象</span><br><span class=\"line\">parser.set_document(doc)</span><br><span class=\"line\">doc.set_parser(parser)</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化文档</span><br><span class=\"line\">doc.initialize()   # 可接收文档密码</span><br><span class=\"line\"></span><br><span class=\"line\">resource = PDFResourceManager()  # 创建PDF资源管理器</span><br><span class=\"line\"></span><br><span class=\"line\">laparam = LAParams()   # 参数分析器</span><br><span class=\"line\"></span><br><span class=\"line\">device = PDFPageAggregator(resource,laparams=laparam)</span><br><span class=\"line\"># 创建一个聚合器</span><br><span class=\"line\"></span><br><span class=\"line\">interpreter = PDFPageInterpreter(resource,device)</span><br><span class=\"line\"># 创建 PDF页面解释器</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用文档对象得到页面的集合</span><br><span class=\"line\">for page in doc.get_pages():</span><br><span class=\"line\">    # 使用页面解释器来读取</span><br><span class=\"line\">    interpreter.process_page(page)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用聚合器来获取内容</span><br><span class=\"line\">    layout = device.get_result()</span><br><span class=\"line\"></span><br><span class=\"line\">    for out in layout:</span><br><span class=\"line\">        if hasattr(out,&apos;get_text&apos;):   # 有没有这个属性</span><br><span class=\"line\">            print(out.get_text())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这个是我学习爬取TXT和PDF的代码，前半段是读取TXT，后半段是读取PDF，PDF中使用了第三方库，pdfminer3k,使用pip安装即可。<br><code>pip install pdfminer3k</code>。PDF其中注释掉的为读取网络上的PDF文档。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from urllib import request</span><br><span class=\"line\"></span><br><span class=\"line\">from pdfminer.pdfdevice import PDFDevice</span><br><span class=\"line\">from pdfminer.pdfinterp import PDFPageInterpreter, PDFResourceManager</span><br><span class=\"line\">from pdfminer.pdfparser import PDFDocument, PDFParser</span><br><span class=\"line\">from pdfminer.converter import PDFPageAggregator</span><br><span class=\"line\">from pdfminer.layout import LAParams</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># html = request.urlopen(</span><br><span class=\"line\"># &apos;https://en.wikipedia.org/robots.txt&apos;</span><br><span class=\"line\"># ).read().decode(&apos;utf-8&apos;)</span><br><span class=\"line\"># print(html)   # 读取txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># fp = open(&apos;./practice/byte-of-python-chinese-edition.pdf&apos;,&apos;rb&apos;)  # 获取文档对象</span><br><span class=\"line\">fp = request.urlopen(&apos;https://q.stock.sohu.com/newpdf/201831703172.pdf&apos;)  # 读取网络pdf</span><br><span class=\"line\">parser = PDFParser(fp)   # 创建一个与文档关联的解释器</span><br><span class=\"line\">doc = PDFDocument() # 文档对象</span><br><span class=\"line\"></span><br><span class=\"line\"># 链接解释器和文档对象</span><br><span class=\"line\">parser.set_document(doc)</span><br><span class=\"line\">doc.set_parser(parser)</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化文档</span><br><span class=\"line\">doc.initialize()   # 可接收文档密码</span><br><span class=\"line\"></span><br><span class=\"line\">resource = PDFResourceManager()  # 创建PDF资源管理器</span><br><span class=\"line\"></span><br><span class=\"line\">laparam = LAParams()   # 参数分析器</span><br><span class=\"line\"></span><br><span class=\"line\">device = PDFPageAggregator(resource,laparams=laparam)</span><br><span class=\"line\"># 创建一个聚合器</span><br><span class=\"line\"></span><br><span class=\"line\">interpreter = PDFPageInterpreter(resource,device)</span><br><span class=\"line\"># 创建 PDF页面解释器</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用文档对象得到页面的集合</span><br><span class=\"line\">for page in doc.get_pages():</span><br><span class=\"line\">    # 使用页面解释器来读取</span><br><span class=\"line\">    interpreter.process_page(page)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 使用聚合器来获取内容</span><br><span class=\"line\">    layout = device.get_result()</span><br><span class=\"line\"></span><br><span class=\"line\">    for out in layout:</span><br><span class=\"line\">        if hasattr(out,&apos;get_text&apos;):   # 有没有这个属性</span><br><span class=\"line\">            print(out.get_text())</span><br></pre></td></tr></table></figure>\n"},{"title":"迭代对象，迭代器，生成器","date":"2019-07-14T03:05:31.000Z","_content":"\n\n\n## 容器\n**容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中**\n\n`assert` 如果为Fasle, 那么raise一个AssertionError\n```\nassert False, 'error'\nassert True, 'error'\nassert 1 in [1, 2, 3, 4],'error'\n```\n\n大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）\n\n## 可迭代对象 （iterable）\n**凡是可以返回一个迭代器的对象都可以称之为可迭代对象**\n\n**可迭代对象实现了 __iter__ (返回可迭代对象本身) 和 __next__ 方法，**\n```\nx = [1, 2, 3]\ny = iter(x)\nz = iter(x) #两个不同的迭代器\nnext(y) \nnext(y)\nnext(z)\ntype(x) # list  可迭代对象\ntype(y) # list_iterator  具体的迭代类型\n\na = 'hahaha'\nb = iter(a)\ntype(b)  # str_iterator\n```\n\n## 迭代器 (iterator)\n**迭代器**是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.\n\n迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。\n\n## 生成器（generator）\n**相比其他容器对象，它更能节省内存和cpu。**\n\n```\n sum(i for i in range(100_000_000)) # 生成器\n sum[i for i in range(100_000_000)] # 列表推导式\n \n\n```\n**生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。**\n\n\n```\ndef someting():\n    result = []\n    for x in ..:\n        result.append(x)\n    return result\n```\n都可以改写\n```\ndef iter_something():\n    for x in ..:\n        yield x \n```\n## 生成器表达式（generator expression）\n**列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象**\n```\na = (x * x for x in range(10))\n```\n生成器只能遍历一次\n","source":"_posts/python练习/迭代对象，迭代器，生成器.md","raw":"\n---\ntitle: 迭代对象，迭代器，生成器\ndate: 2019-07-14 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n## 容器\n**容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中**\n\n`assert` 如果为Fasle, 那么raise一个AssertionError\n```\nassert False, 'error'\nassert True, 'error'\nassert 1 in [1, 2, 3, 4],'error'\n```\n\n大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）\n\n## 可迭代对象 （iterable）\n**凡是可以返回一个迭代器的对象都可以称之为可迭代对象**\n\n**可迭代对象实现了 __iter__ (返回可迭代对象本身) 和 __next__ 方法，**\n```\nx = [1, 2, 3]\ny = iter(x)\nz = iter(x) #两个不同的迭代器\nnext(y) \nnext(y)\nnext(z)\ntype(x) # list  可迭代对象\ntype(y) # list_iterator  具体的迭代类型\n\na = 'hahaha'\nb = iter(a)\ntype(b)  # str_iterator\n```\n\n## 迭代器 (iterator)\n**迭代器**是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.\n\n迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。\n\n## 生成器（generator）\n**相比其他容器对象，它更能节省内存和cpu。**\n\n```\n sum(i for i in range(100_000_000)) # 生成器\n sum[i for i in range(100_000_000)] # 列表推导式\n \n\n```\n**生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。**\n\n\n```\ndef someting():\n    result = []\n    for x in ..:\n        result.append(x)\n    return result\n```\n都可以改写\n```\ndef iter_something():\n    for x in ..:\n        yield x \n```\n## 生成器表达式（generator expression）\n**列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象**\n```\na = (x * x for x in range(10))\n```\n生成器只能遍历一次\n","slug":"python练习/迭代对象，迭代器，生成器","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p67007atssa3t8vlnpo","content":"<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong>容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中</strong></p>\n<p><code>assert</code> 如果为Fasle, 那么raise一个AssertionError<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert False, &apos;error&apos;</span><br><span class=\"line\">assert True, &apos;error&apos;</span><br><span class=\"line\">assert 1 in [1, 2, 3, 4],&apos;error&apos;</span><br></pre></td></tr></table></figure></p>\n<p>大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）</p>\n<h2 id=\"可迭代对象-（iterable）\"><a href=\"#可迭代对象-（iterable）\" class=\"headerlink\" title=\"可迭代对象 （iterable）\"></a>可迭代对象 （iterable）</h2><p><strong>凡是可以返回一个迭代器的对象都可以称之为可迭代对象</strong></p>\n<p><strong>可迭代对象实现了 <strong>iter</strong> (返回可迭代对象本身) 和 <strong>next</strong> 方法，</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = iter(x)</span><br><span class=\"line\">z = iter(x) #两个不同的迭代器</span><br><span class=\"line\">next(y) </span><br><span class=\"line\">next(y)</span><br><span class=\"line\">next(z)</span><br><span class=\"line\">type(x) # list  可迭代对象</span><br><span class=\"line\">type(y) # list_iterator  具体的迭代类型</span><br><span class=\"line\"></span><br><span class=\"line\">a = &apos;hahaha&apos;</span><br><span class=\"line\">b = iter(a)</span><br><span class=\"line\">type(b)  # str_iterator</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 (iterator)\"></a>迭代器 (iterator)</h2><p><strong>迭代器</strong>是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.</p>\n<p>迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。</p>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p><strong>相比其他容器对象，它更能节省内存和cpu。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(i for i in range(100_000_000)) # 生成器</span><br><span class=\"line\">sum[i for i in range(100_000_000)] # 列表推导式</span><br></pre></td></tr></table></figure>\n<p><strong>生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def someting():</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure>\n<p>都可以改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def iter_something():</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        yield x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成器表达式（generator-expression）\"><a href=\"#生成器表达式（generator-expression）\" class=\"headerlink\" title=\"生成器表达式（generator expression）\"></a>生成器表达式（generator expression）</h2><p><strong>列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (x * x for x in range(10))</span><br></pre></td></tr></table></figure></p>\n<p>生成器只能遍历一次</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p><strong>容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用 in , not in 关键字判断元素是否包含在容器中</strong></p>\n<p><code>assert</code> 如果为Fasle, 那么raise一个AssertionError<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert False, &apos;error&apos;</span><br><span class=\"line\">assert True, &apos;error&apos;</span><br><span class=\"line\">assert 1 in [1, 2, 3, 4],&apos;error&apos;</span><br></pre></td></tr></table></figure></p>\n<p>大多数容器提供了某种方式来获取其中每一个元素,（是可迭代对象赋予了容器这种能力）</p>\n<h2 id=\"可迭代对象-（iterable）\"><a href=\"#可迭代对象-（iterable）\" class=\"headerlink\" title=\"可迭代对象 （iterable）\"></a>可迭代对象 （iterable）</h2><p><strong>凡是可以返回一个迭代器的对象都可以称之为可迭代对象</strong></p>\n<p><strong>可迭代对象实现了 <strong>iter</strong> (返回可迭代对象本身) 和 <strong>next</strong> 方法，</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [1, 2, 3]</span><br><span class=\"line\">y = iter(x)</span><br><span class=\"line\">z = iter(x) #两个不同的迭代器</span><br><span class=\"line\">next(y) </span><br><span class=\"line\">next(y)</span><br><span class=\"line\">next(z)</span><br><span class=\"line\">type(x) # list  可迭代对象</span><br><span class=\"line\">type(y) # list_iterator  具体的迭代类型</span><br><span class=\"line\"></span><br><span class=\"line\">a = &apos;hahaha&apos;</span><br><span class=\"line\">b = iter(a)</span><br><span class=\"line\">type(b)  # str_iterator</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"迭代器-iterator\"><a href=\"#迭代器-iterator\" class=\"headerlink\" title=\"迭代器 (iterator)\"></a>迭代器 (iterator)</h2><p><strong>迭代器</strong>是一个带状态的对象，能在调用 next() 方法时返回容器的下一个值.</p>\n<p>迭代器等有人需要的时候才生成值返回， 没调用的时候， 就处于休眠状态等待下一次调用。</p>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p><strong>相比其他容器对象，它更能节省内存和cpu。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(i for i in range(100_000_000)) # 生成器</span><br><span class=\"line\">sum[i for i in range(100_000_000)] # 列表推导式</span><br></pre></td></tr></table></figure>\n<p><strong>生成器是一种特殊的迭代器，只需要yield关键字。生成器一定是迭代器（反之不成立）。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def someting():</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        result.append(x)</span><br><span class=\"line\">    return result</span><br></pre></td></tr></table></figure>\n<p>都可以改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def iter_something():</span><br><span class=\"line\">    for x in ..:</span><br><span class=\"line\">        yield x</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成器表达式（generator-expression）\"><a href=\"#生成器表达式（generator-expression）\" class=\"headerlink\" title=\"生成器表达式（generator expression）\"></a>生成器表达式（generator expression）</h2><p><strong>列表推导式的生成器版本，但他返回的是一个生成器对象，而不是列表对象</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (x * x for x in range(10))</span><br></pre></td></tr></table></figure></p>\n<p>生成器只能遍历一次</p>\n"},{"title":"装饰器","date":"2019-10-09T03:05:31.000Z","_content":"\n绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.\n\nPython 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象\n```\ndef foo(): pass\ntype(foo)  # function\ncallable(foo)  # True\n```\n\n只要自定义类的 `__call__` 魔法方法即可让任意类变成可被调用\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self): # 定义类的 `__call__` 方法\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n    def __del__(self):\n        del self.a\n        del self.b\n        del self.range\n\nx = X(1,2,3)\nx() # 像函数一样调用\n```\n\n```\nimport time\nimport random\nimport functools\n\ndef timer(wrapped):\n    \"\"\"装饰器：记录并打印函数耗时\"\"\"\n\n    @functools.wraps(wrapped)  #  可以使函数保持原有签名\n    def decorated(*args, **kwargs):\n        st = time.time()\n        ret = wrapped(*args, **kwargs)\n        print('execution take: {} seconds'.format(time.time() - st))\n        return ret\n    return decorated\n\ndef counter(func):\n    \"\"\"装饰器：记录并打印调用次数\"\"\"\n    count = 0\n    @functools.wraps(func)\n    def decorated(*args, **kwargs):\n        # 次数累加\n        nonlocal count\n        count += 1\n        print(f\"Count: {count}\")\n        return func(*args, **kwargs)\n    return decorated\n\n@counter\n@timer\ndef random_sleep():\n    '德玛西亚'\n    time.sleep(random.random())\n\n\nrandom_sleep()\nrandom_sleep()\nprint(random_sleep.__name__)\nprint(random_sleep.__doc__)\n```\n\n```\n\n\ndef provide_number(min_num, max_num):\n    \"\"\"装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数\n    \"\"\"\n\n    def wrapper(func):\n        def decorated(*args, **kwargs):\n            num = random.randint(min_num, max_num)\n            # 将 num 作为第一个参数追加后调用函数\n            return func(num, *args, **kwargs)\n\n        return decorated\n\n    return wrapper\n\n\n@provide_number(1, 100)\ndef print_random_number(num):\n    print(num)\n```\nwrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决**“嵌套层级深”和“无法通用”**两个问题\n```\nimport wrapt\nimport random\n\n\ndef provide_number(min_num, max_num):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        # 参数含义：\n        #\n        # - wrapped：被装饰的函数或类方法\n        # - instance：\n        #   - 如果被装饰者为普通类方法，该值为类实例\n        #   - 如果被装饰者为 classmethod 类方法，该值为类\n        #   - 如果被装饰者为类/函数/静态方法，该值为 None\n        #\n        # - args：调用时的位置参数（注意没有 * 符号）\n        # - kwargs：调用时的关键字参数（注意没有 ** 符号）\n        #\n        num = random.randint(min_num, max_num)\n        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数\n        args = (num,) + args\n        return wrapped(*args, **kwargs)\n\n    return wrapper\n\n@provide_number(1,100)\ndef number(num):\n    print(num)\n\nnumber()\n```\n```\nimport time\nimport functools\n\n\nclass DelayFunc:\n    def __init__(self,  duration, func):\n        self.duration = duration\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print(f'Wait for {self.duration} seconds...')\n        time.sleep(self.duration)\n        return self.func(*args, **kwargs)\n\n    def eager_call(self, *args, **kwargs):\n        print('Call without delay')\n        return self.func(*args, **kwargs)\n\n\ndef delay(duration):\n    \"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行\n    \"\"\"\n    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造\n    # DelayFunc 实例\n    return functools.partial(DelayFunc, duration)\n\n@delay(duration=2)\ndef add(a, b):\n    return a + b\n\n\n# 这次调用将会延迟 2 秒\nprint(add(1, 2))\n# 这次调用将会立即执行\nprint(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数\n```\n```\ndef add(a, b):\n    return a + b\n\nimport functools\nadd_3 = functools.partial(add, 3)\nprint(add_3(1))\n```\n","source":"_posts/python练习/装饰器.md","raw":"---\ntitle: 装饰器\ndate: 2019-10-09 11:05:31\ntags:\ncategories: python练习\n---\n\n绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.\n\nPython 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象\n```\ndef foo(): pass\ntype(foo)  # function\ncallable(foo)  # True\n```\n\n只要自定义类的 `__call__` 魔法方法即可让任意类变成可被调用\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass X:\n    a:int\n    b:int\n    range:int\n\n    def __call__(self): # 定义类的 `__call__` 方法\n        print('__call__ with （{}, {}）'.format(self.a, self.b))\n\n    def __del__(self):\n        del self.a\n        del self.b\n        del self.range\n\nx = X(1,2,3)\nx() # 像函数一样调用\n```\n\n```\nimport time\nimport random\nimport functools\n\ndef timer(wrapped):\n    \"\"\"装饰器：记录并打印函数耗时\"\"\"\n\n    @functools.wraps(wrapped)  #  可以使函数保持原有签名\n    def decorated(*args, **kwargs):\n        st = time.time()\n        ret = wrapped(*args, **kwargs)\n        print('execution take: {} seconds'.format(time.time() - st))\n        return ret\n    return decorated\n\ndef counter(func):\n    \"\"\"装饰器：记录并打印调用次数\"\"\"\n    count = 0\n    @functools.wraps(func)\n    def decorated(*args, **kwargs):\n        # 次数累加\n        nonlocal count\n        count += 1\n        print(f\"Count: {count}\")\n        return func(*args, **kwargs)\n    return decorated\n\n@counter\n@timer\ndef random_sleep():\n    '德玛西亚'\n    time.sleep(random.random())\n\n\nrandom_sleep()\nrandom_sleep()\nprint(random_sleep.__name__)\nprint(random_sleep.__doc__)\n```\n\n```\n\n\ndef provide_number(min_num, max_num):\n    \"\"\"装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数\n    \"\"\"\n\n    def wrapper(func):\n        def decorated(*args, **kwargs):\n            num = random.randint(min_num, max_num)\n            # 将 num 作为第一个参数追加后调用函数\n            return func(num, *args, **kwargs)\n\n        return decorated\n\n    return wrapper\n\n\n@provide_number(1, 100)\ndef print_random_number(num):\n    print(num)\n```\nwrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决**“嵌套层级深”和“无法通用”**两个问题\n```\nimport wrapt\nimport random\n\n\ndef provide_number(min_num, max_num):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        # 参数含义：\n        #\n        # - wrapped：被装饰的函数或类方法\n        # - instance：\n        #   - 如果被装饰者为普通类方法，该值为类实例\n        #   - 如果被装饰者为 classmethod 类方法，该值为类\n        #   - 如果被装饰者为类/函数/静态方法，该值为 None\n        #\n        # - args：调用时的位置参数（注意没有 * 符号）\n        # - kwargs：调用时的关键字参数（注意没有 ** 符号）\n        #\n        num = random.randint(min_num, max_num)\n        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数\n        args = (num,) + args\n        return wrapped(*args, **kwargs)\n\n    return wrapper\n\n@provide_number(1,100)\ndef number(num):\n    print(num)\n\nnumber()\n```\n```\nimport time\nimport functools\n\n\nclass DelayFunc:\n    def __init__(self,  duration, func):\n        self.duration = duration\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print(f'Wait for {self.duration} seconds...')\n        time.sleep(self.duration)\n        return self.func(*args, **kwargs)\n\n    def eager_call(self, *args, **kwargs):\n        print('Call without delay')\n        return self.func(*args, **kwargs)\n\n\ndef delay(duration):\n    \"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行\n    \"\"\"\n    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造\n    # DelayFunc 实例\n    return functools.partial(DelayFunc, duration)\n\n@delay(duration=2)\ndef add(a, b):\n    return a + b\n\n\n# 这次调用将会延迟 2 秒\nprint(add(1, 2))\n# 这次调用将会立即执行\nprint(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数\n```\n```\ndef add(a, b):\n    return a + b\n\nimport functools\nadd_3 = functools.partial(add, 3)\nprint(add_3(1))\n```\n","slug":"python练习/装饰器","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p67007ctssaibw69t4r","content":"<p>绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.</p>\n<p>Python 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(): pass</span><br><span class=\"line\">type(foo)  # function</span><br><span class=\"line\">callable(foo)  # True</span><br></pre></td></tr></table></figure></p>\n<p>只要自定义类的 <code>__call__</code> 魔法方法即可让任意类变成可被调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self): # 定义类的 `__call__` 方法</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        del self.a</span><br><span class=\"line\">        del self.b</span><br><span class=\"line\">        del self.range</span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">x() # 像函数一样调用</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\">def timer(wrapped):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印函数耗时&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @functools.wraps(wrapped)  #  可以使函数保持原有签名</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        st = time.time()</span><br><span class=\"line\">        ret = wrapped(*args, **kwargs)</span><br><span class=\"line\">        print(&apos;execution take: &#123;&#125; seconds&apos;.format(time.time() - st))</span><br><span class=\"line\">        return ret</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">def counter(func):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印调用次数&quot;&quot;&quot;</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    @functools.wraps(func)</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        # 次数累加</span><br><span class=\"line\">        nonlocal count</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">        print(f&quot;Count: &#123;count&#125;&quot;)</span><br><span class=\"line\">        return func(*args, **kwargs)</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">@counter</span><br><span class=\"line\">@timer</span><br><span class=\"line\">def random_sleep():</span><br><span class=\"line\">    &apos;德玛西亚&apos;</span><br><span class=\"line\">    time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">print(random_sleep.__name__)</span><br><span class=\"line\">print(random_sleep.__doc__)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def wrapper(func):</span><br><span class=\"line\">        def decorated(*args, **kwargs):</span><br><span class=\"line\">            num = random.randint(min_num, max_num)</span><br><span class=\"line\">            # 将 num 作为第一个参数追加后调用函数</span><br><span class=\"line\">            return func(num, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1, 100)</span><br><span class=\"line\">def print_random_number(num):</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n<p>wrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决<strong>“嵌套层级深”和“无法通用”</strong>两个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import wrapt</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    @wrapt.decorator</span><br><span class=\"line\">    def wrapper(wrapped, instance, args, kwargs):</span><br><span class=\"line\">        # 参数含义：</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - wrapped：被装饰的函数或类方法</span><br><span class=\"line\">        # - instance：</span><br><span class=\"line\">        #   - 如果被装饰者为普通类方法，该值为类实例</span><br><span class=\"line\">        #   - 如果被装饰者为 classmethod 类方法，该值为类</span><br><span class=\"line\">        #   - 如果被装饰者为类/函数/静态方法，该值为 None</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - args：调用时的位置参数（注意没有 * 符号）</span><br><span class=\"line\">        # - kwargs：调用时的关键字参数（注意没有 ** 符号）</span><br><span class=\"line\">        #</span><br><span class=\"line\">        num = random.randint(min_num, max_num)</span><br><span class=\"line\">        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span><br><span class=\"line\">        args = (num,) + args</span><br><span class=\"line\">        return wrapped(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1,100)</span><br><span class=\"line\">def number(num):</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">number()</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class DelayFunc:</span><br><span class=\"line\">    def __init__(self,  duration, func):</span><br><span class=\"line\">        self.duration = duration</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(f&apos;Wait for &#123;self.duration&#125; seconds...&apos;)</span><br><span class=\"line\">        time.sleep(self.duration)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    def eager_call(self, *args, **kwargs):</span><br><span class=\"line\">        print(&apos;Call without delay&apos;)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def delay(duration):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span><br><span class=\"line\">    # DelayFunc 实例</span><br><span class=\"line\">    return functools.partial(DelayFunc, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">@delay(duration=2)</span><br><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这次调用将会延迟 2 秒</span><br><span class=\"line\">print(add(1, 2))</span><br><span class=\"line\"># 这次调用将会立即执行</span><br><span class=\"line\">print(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">import functools</span><br><span class=\"line\">add_3 = functools.partial(add, 3)</span><br><span class=\"line\">print(add_3(1))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>绝大多数装饰器都是基于函数和 闭包 实现的，但这并非制造装饰器的唯一方式.</p>\n<p>Python 对某个对象是否能通过装饰器（@decorator）形式使用只有一个要求：decorator 必须是一个“可被调用（callable）的对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(): pass</span><br><span class=\"line\">type(foo)  # function</span><br><span class=\"line\">callable(foo)  # True</span><br></pre></td></tr></table></figure></p>\n<p>只要自定义类的 <code>__call__</code> 魔法方法即可让任意类变成可被调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class X:</span><br><span class=\"line\">    a:int</span><br><span class=\"line\">    b:int</span><br><span class=\"line\">    range:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self): # 定义类的 `__call__` 方法</span><br><span class=\"line\">        print(&apos;__call__ with （&#123;&#125;, &#123;&#125;）&apos;.format(self.a, self.b))</span><br><span class=\"line\"></span><br><span class=\"line\">    def __del__(self):</span><br><span class=\"line\">        del self.a</span><br><span class=\"line\">        del self.b</span><br><span class=\"line\">        del self.range</span><br><span class=\"line\"></span><br><span class=\"line\">x = X(1,2,3)</span><br><span class=\"line\">x() # 像函数一样调用</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import random</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\">def timer(wrapped):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印函数耗时&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    @functools.wraps(wrapped)  #  可以使函数保持原有签名</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        st = time.time()</span><br><span class=\"line\">        ret = wrapped(*args, **kwargs)</span><br><span class=\"line\">        print(&apos;execution take: &#123;&#125; seconds&apos;.format(time.time() - st))</span><br><span class=\"line\">        return ret</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">def counter(func):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：记录并打印调用次数&quot;&quot;&quot;</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    @functools.wraps(func)</span><br><span class=\"line\">    def decorated(*args, **kwargs):</span><br><span class=\"line\">        # 次数累加</span><br><span class=\"line\">        nonlocal count</span><br><span class=\"line\">        count += 1</span><br><span class=\"line\">        print(f&quot;Count: &#123;count&#125;&quot;)</span><br><span class=\"line\">        return func(*args, **kwargs)</span><br><span class=\"line\">    return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">@counter</span><br><span class=\"line\">@timer</span><br><span class=\"line\">def random_sleep():</span><br><span class=\"line\">    &apos;德玛西亚&apos;</span><br><span class=\"line\">    time.sleep(random.random())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">random_sleep()</span><br><span class=\"line\">print(random_sleep.__name__)</span><br><span class=\"line\">print(random_sleep.__doc__)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：随机生成一个在 [min_num, max_num] 范围的整数，追加为函数的第一个位置参数</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    def wrapper(func):</span><br><span class=\"line\">        def decorated(*args, **kwargs):</span><br><span class=\"line\">            num = random.randint(min_num, max_num)</span><br><span class=\"line\">            # 将 num 作为第一个参数追加后调用函数</span><br><span class=\"line\">            return func(num, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">        return decorated</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1, 100)</span><br><span class=\"line\">def print_random_number(num):</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n<p>wrapt 模块是一个专门帮助编写装饰器的工具库。可以非常方便的改造 provide_number 装饰器，完美解决<strong>“嵌套层级深”和“无法通用”</strong>两个问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import wrapt</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def provide_number(min_num, max_num):</span><br><span class=\"line\">    @wrapt.decorator</span><br><span class=\"line\">    def wrapper(wrapped, instance, args, kwargs):</span><br><span class=\"line\">        # 参数含义：</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - wrapped：被装饰的函数或类方法</span><br><span class=\"line\">        # - instance：</span><br><span class=\"line\">        #   - 如果被装饰者为普通类方法，该值为类实例</span><br><span class=\"line\">        #   - 如果被装饰者为 classmethod 类方法，该值为类</span><br><span class=\"line\">        #   - 如果被装饰者为类/函数/静态方法，该值为 None</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # - args：调用时的位置参数（注意没有 * 符号）</span><br><span class=\"line\">        # - kwargs：调用时的关键字参数（注意没有 ** 符号）</span><br><span class=\"line\">        #</span><br><span class=\"line\">        num = random.randint(min_num, max_num)</span><br><span class=\"line\">        # 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span><br><span class=\"line\">        args = (num,) + args</span><br><span class=\"line\">        return wrapped(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    return wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">@provide_number(1,100)</span><br><span class=\"line\">def number(num):</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">number()</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import functools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class DelayFunc:</span><br><span class=\"line\">    def __init__(self,  duration, func):</span><br><span class=\"line\">        self.duration = duration</span><br><span class=\"line\">        self.func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    def __call__(self, *args, **kwargs):</span><br><span class=\"line\">        print(f&apos;Wait for &#123;self.duration&#125; seconds...&apos;)</span><br><span class=\"line\">        time.sleep(self.duration)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    def eager_call(self, *args, **kwargs):</span><br><span class=\"line\">        print(&apos;Call without delay&apos;)</span><br><span class=\"line\">        return self.func(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def delay(duration):</span><br><span class=\"line\">    &quot;&quot;&quot;装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    # 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span><br><span class=\"line\">    # DelayFunc 实例</span><br><span class=\"line\">    return functools.partial(DelayFunc, duration)</span><br><span class=\"line\"></span><br><span class=\"line\">@delay(duration=2)</span><br><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 这次调用将会延迟 2 秒</span><br><span class=\"line\">print(add(1, 2))</span><br><span class=\"line\"># 这次调用将会立即执行</span><br><span class=\"line\">print(add.eager_call(1, 2))  # 还是进入了类，duration=2， 但调用类里面的eager_call()方法直接返回函数</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def add(a, b):</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">import functools</span><br><span class=\"line\">add_3 = functools.partial(add, 3)</span><br><span class=\"line\">print(add_3(1))</span><br></pre></td></tr></table></figure>\n"},{"title":"面向对象","date":"2019-07-15T03:05:31.000Z","_content":"\n\n\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","source":"_posts/python练习/面向对象.md","raw":"\n---\ntitle: 面向对象\ndate: 2019-07-15 11:05:31\ntags:\ncategories: python练习\n---\n\n\n\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","slug":"python练习/面向对象","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p68007etssaznsrfx5x","content":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n"},{"title":"mongodb常用命令","date":"2019-08-13T02:51:16.000Z","_content":"\n1.mongo\n连入本机数据库\n\n2.mongo 10.66.66.126:27017\n连入ip地址为10.66.66.126的机器的数据库\n\n3.db / db.getName()\n查看当前数据库(db就是Database)\n\n4.use demo\n切换/创建数据库(demo为数据库名)\n\n5.show dbs\n查看所有数据库\nshow tables\n查看所有表集合\n\n6.db.dropDatabase()\n删除当前操作的数据库\n\n7.db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")\n从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中\n\n8.db.repairDatabase()\n修复当前数据库\n\n9.db.version()\n当前db版本\n\n10.db.stats()\n显示当前db状态\n\n11.db.getMongo()\n查看当前db的链接机器地址\n\n12.数据库表 (Collection聚集集合 )\n\t1)创建一个表\n\tdb.createCollection(“collName”, {size: 20, capped: 5, max: 100})\n\n\t2)得到指定名称的表\n\tdb.getCollection(\"table\")\n\n\t3)查询当前db的所有表名的集合\n\tdb.getCollectionNames()\n\n\t4)显示当前db所有表索引的状态\n\tdb.printCollectionStats()\n\t\n13.查数据\n\t1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)\n\tdb.table.find() \n\t相当于：select * from table;\n\tdb.table.find().pretty()  查看的数据格式化\n\tdb.table.find({}, {id: 0, \"name\": 0})\t查询表中所有数据,id和name字段不返回\n\tdb.table.find({}, {id: 1, \"name\": 1})\t查询表中所有数据,id和name字段返回(默认返回)\n\t\n\t\n\t2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\n\tdb.table.distinct(\"name\")\n\t相当于: select distinct name from table;\n\t\n\t3)查询某张表中\"name\"=\"Bill\"的数据\n\tdb.table.find({\"name\"=\"Bill\"})\n\t相当于：select * from table where name = Bill;\n\n\t4)查询某张表中 id > 1 的数据 ($gt >, $lt <，$gte >=, $lte <=, $ne !=)\n\tdb.table.find({id: {$gt: 1}})\n\t相当于: select * from table where id > 1;\n\t\n\t5)查询某张表中 id > 1 $$ id <= 5的数据\n\tdb.table.find({id: {$gt: 1,$lte: 5}})\n\t相当于： select * from table where (id > 1 and id <= 5);\n\t\n\t6)查询某张表中 name 中包含 li 的数据\n\tdb.table.find({name: /li/})\n\t相当于： select * from table where name like '%li%';\n\t\n\t7)查询某张表中 name 以 li 开头的数据\n\tdb.table.find({name: /^li/})\n\t相当于： select * from table where name like 'li%';\n\t\n\t8)查询某张表中 name 以 li 结尾的数据\n\tdb.table.find({name: /li$/})\n\t相当于：select * from table where name like '%li'; \n\t\n\t9)查询指定列 name 和 work 的数据\n\tdb.table.find({}, {name: 1, work: 1})\n\t相当于：select name, work from table;\n\t\n\t10)查询 id > 3 的指定列 name 和 work 的数据\n\tdb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n\t想当于： select name, work from table where id > 3;\n\t\n\t11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n\t升序: db.table.find().sort({number: 1})\t\n\t降序：db.table.find().sort({number: -1})\n\t\n\t12)查询前三条数据\n\tdb.table.find().limit(3)\n\t相当于：select top 3 * from table;\n\t\n\t13)查询前三条之后的数据\n\tdb.table.find().skip(3)\n\t相当于：select * from table where id not in (select top 3 * from table);\n\t\n\t14)查询前三条之后的5条数据\n\tdb.table.find().limit(5).skip(3)\n\t\n\t15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\n\tdb.table.find({$or: [{id: 2}, {id: 5}]})\n\t相当于：select * from table where id = 2 or id = 5;\n\t\n\t16)查询第一条数据\n\tdb.table.findOne()\n\t相当于：select top 1 * from table;\n\t\n\t17)查询 id >= 5 的数据的个数 (count() 查询数量)\n\tdb.table.find({id: {$gte: 5}}).count()\n\t相当于：select count(*) from table where id >= 5;\n\t\n\t18)查询有 name字段 的数据的个数 \n\tdb.table.find({name: {$exists: true}}).count()\n\t相当于: select count(name) from table;\n\t\n14.索引\n索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。\n索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。\nMongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引\n此外，排序可能升序或降序排列，而索引只有升序一种方式。\n\t1)创建索引\n\tdb.table.ensureIndex({name: 1})\n\tdb.table.ensureIndex({name: 1, ts: -1})\n\t \n\t2)查询当前聚集集合所有索引\n\tdb.table.getIndexes()\n\t \n\t3)查看总索引记录大小\n\tdb.table.totalIndexSize()\n\t \n\t4)读取当前集合的所有index信息\n\tdb.table.reIndex()\n\t \n\t5)删除指定索引\n\tdb.table.dropIndex(\"name_1\")\n\t \n\t6)删除所有索引索引\n\tdb.table.dropIndexes()\n\t\n15.添加数据\n\t1)插入数据字段\n\tdb.table.insert({})\n\tdb.table.save({})\n\t\n\t2)导入数据表\n\tmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n\t-d: 数据库\n\t-c: 表名\n\t--file: 数据文件地址\n\t--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n\t\n\t\n\t\n16.修改数据\n\t1)修改表中条件为 name : \"baiqi\" 的数据的 字段 number($set设置)\n\tdb.table.update({name: \"baiqi\"}, {$set: {number: \"111\"}}, false, true)\n\t第一个false表示不新增数据\n\t相当于：update table set number = '111' where name = \"baiqi\";\n\t\n\t2)修改表中条件为 name : \"mayun\" 的数据 让 number = number + 111, id = id + 2($inc自增)\n\tdb.table.update({name: \"mayun\"}, {$inc: {number: 111, id: 2}}, false, true)\n\t相当于：update table set number = number + 111, id = id + 2 where name = \"mayun\";\n\t\n\t3)综合上面两个修改\n\tdb.table.update({name: 'liuqiangdong'}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n\t相当于： update table set id = id + 3, number = 113 where name = 'liuqiangdong';\n\t\n17.删除数据\n\tdb.table.remove({_id: ObjectId(\"59a67e103cbae75d282fe46b\")})\n\t\n其他\n\t1)查询之前的错误信息\n\tdb.getPrevError()\n\t\n\t2)清除错误记录\n\tdb.resetError()\n","source":"_posts/数据库/mongodb/mongodb常用命令.md","raw":"---\n\ntitle: mongodb常用命令\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n1.mongo\n连入本机数据库\n\n2.mongo 10.66.66.126:27017\n连入ip地址为10.66.66.126的机器的数据库\n\n3.db / db.getName()\n查看当前数据库(db就是Database)\n\n4.use demo\n切换/创建数据库(demo为数据库名)\n\n5.show dbs\n查看所有数据库\nshow tables\n查看所有表集合\n\n6.db.dropDatabase()\n删除当前操作的数据库\n\n7.db.copyDatabase(\"mydb\", \"temp\", \"127.0.0.1\")\n从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中\n\n8.db.repairDatabase()\n修复当前数据库\n\n9.db.version()\n当前db版本\n\n10.db.stats()\n显示当前db状态\n\n11.db.getMongo()\n查看当前db的链接机器地址\n\n12.数据库表 (Collection聚集集合 )\n\t1)创建一个表\n\tdb.createCollection(“collName”, {size: 20, capped: 5, max: 100})\n\n\t2)得到指定名称的表\n\tdb.getCollection(\"table\")\n\n\t3)查询当前db的所有表名的集合\n\tdb.getCollectionNames()\n\n\t4)显示当前db所有表索引的状态\n\tdb.printCollectionStats()\n\t\n13.查数据\n\t1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)\n\tdb.table.find() \n\t相当于：select * from table;\n\tdb.table.find().pretty()  查看的数据格式化\n\tdb.table.find({}, {id: 0, \"name\": 0})\t查询表中所有数据,id和name字段不返回\n\tdb.table.find({}, {id: 1, \"name\": 1})\t查询表中所有数据,id和name字段返回(默认返回)\n\t\n\t\n\t2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\n\tdb.table.distinct(\"name\")\n\t相当于: select distinct name from table;\n\t\n\t3)查询某张表中\"name\"=\"Bill\"的数据\n\tdb.table.find({\"name\"=\"Bill\"})\n\t相当于：select * from table where name = Bill;\n\n\t4)查询某张表中 id > 1 的数据 ($gt >, $lt <，$gte >=, $lte <=, $ne !=)\n\tdb.table.find({id: {$gt: 1}})\n\t相当于: select * from table where id > 1;\n\t\n\t5)查询某张表中 id > 1 $$ id <= 5的数据\n\tdb.table.find({id: {$gt: 1,$lte: 5}})\n\t相当于： select * from table where (id > 1 and id <= 5);\n\t\n\t6)查询某张表中 name 中包含 li 的数据\n\tdb.table.find({name: /li/})\n\t相当于： select * from table where name like '%li%';\n\t\n\t7)查询某张表中 name 以 li 开头的数据\n\tdb.table.find({name: /^li/})\n\t相当于： select * from table where name like 'li%';\n\t\n\t8)查询某张表中 name 以 li 结尾的数据\n\tdb.table.find({name: /li$/})\n\t相当于：select * from table where name like '%li'; \n\t\n\t9)查询指定列 name 和 work 的数据\n\tdb.table.find({}, {name: 1, work: 1})\n\t相当于：select name, work from table;\n\t\n\t10)查询 id > 3 的指定列 name 和 work 的数据\n\tdb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n\t想当于： select name, work from table where id > 3;\n\t\n\t11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n\t升序: db.table.find().sort({number: 1})\t\n\t降序：db.table.find().sort({number: -1})\n\t\n\t12)查询前三条数据\n\tdb.table.find().limit(3)\n\t相当于：select top 3 * from table;\n\t\n\t13)查询前三条之后的数据\n\tdb.table.find().skip(3)\n\t相当于：select * from table where id not in (select top 3 * from table);\n\t\n\t14)查询前三条之后的5条数据\n\tdb.table.find().limit(5).skip(3)\n\t\n\t15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\n\tdb.table.find({$or: [{id: 2}, {id: 5}]})\n\t相当于：select * from table where id = 2 or id = 5;\n\t\n\t16)查询第一条数据\n\tdb.table.findOne()\n\t相当于：select top 1 * from table;\n\t\n\t17)查询 id >= 5 的数据的个数 (count() 查询数量)\n\tdb.table.find({id: {$gte: 5}}).count()\n\t相当于：select count(*) from table where id >= 5;\n\t\n\t18)查询有 name字段 的数据的个数 \n\tdb.table.find({name: {$exists: true}}).count()\n\t相当于: select count(name) from table;\n\t\n14.索引\n索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。\n索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。\nMongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引\n此外，排序可能升序或降序排列，而索引只有升序一种方式。\n\t1)创建索引\n\tdb.table.ensureIndex({name: 1})\n\tdb.table.ensureIndex({name: 1, ts: -1})\n\t \n\t2)查询当前聚集集合所有索引\n\tdb.table.getIndexes()\n\t \n\t3)查看总索引记录大小\n\tdb.table.totalIndexSize()\n\t \n\t4)读取当前集合的所有index信息\n\tdb.table.reIndex()\n\t \n\t5)删除指定索引\n\tdb.table.dropIndex(\"name_1\")\n\t \n\t6)删除所有索引索引\n\tdb.table.dropIndexes()\n\t\n15.添加数据\n\t1)插入数据字段\n\tdb.table.insert({})\n\tdb.table.save({})\n\t\n\t2)导入数据表\n\tmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n\t-d: 数据库\n\t-c: 表名\n\t--file: 数据文件地址\n\t--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n\t\n\t\n\t\n16.修改数据\n\t1)修改表中条件为 name : \"baiqi\" 的数据的 字段 number($set设置)\n\tdb.table.update({name: \"baiqi\"}, {$set: {number: \"111\"}}, false, true)\n\t第一个false表示不新增数据\n\t相当于：update table set number = '111' where name = \"baiqi\";\n\t\n\t2)修改表中条件为 name : \"mayun\" 的数据 让 number = number + 111, id = id + 2($inc自增)\n\tdb.table.update({name: \"mayun\"}, {$inc: {number: 111, id: 2}}, false, true)\n\t相当于：update table set number = number + 111, id = id + 2 where name = \"mayun\";\n\t\n\t3)综合上面两个修改\n\tdb.table.update({name: 'liuqiangdong'}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n\t相当于： update table set id = id + 3, number = 113 where name = 'liuqiangdong';\n\t\n17.删除数据\n\tdb.table.remove({_id: ObjectId(\"59a67e103cbae75d282fe46b\")})\n\t\n其他\n\t1)查询之前的错误信息\n\tdb.getPrevError()\n\t\n\t2)清除错误记录\n\tdb.resetError()\n","slug":"数据库/mongodb/mongodb常用命令","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6o007mtssaxm5m1udo","content":"<p>1.mongo<br>连入本机数据库</p>\n<p>2.mongo 10.66.66.126:27017<br>连入ip地址为10.66.66.126的机器的数据库</p>\n<p>3.db / db.getName()<br>查看当前数据库(db就是Database)</p>\n<p>4.use demo<br>切换/创建数据库(demo为数据库名)</p>\n<p>5.show dbs<br>查看所有数据库<br>show tables<br>查看所有表集合</p>\n<p>6.db.dropDatabase()<br>删除当前操作的数据库</p>\n<p>7.db.copyDatabase(“mydb”, “temp”, “127.0.0.1”)<br>从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中</p>\n<p>8.db.repairDatabase()<br>修复当前数据库</p>\n<p>9.db.version()<br>当前db版本</p>\n<p>10.db.stats()<br>显示当前db状态</p>\n<p>11.db.getMongo()<br>查看当前db的链接机器地址</p>\n<p>12.数据库表 (Collection聚集集合 )<br>    1)创建一个表<br>    db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</p>\n<pre><code>2)得到指定名称的表\ndb.getCollection(&quot;table&quot;)\n\n3)查询当前db的所有表名的集合\ndb.getCollectionNames()\n\n4)显示当前db所有表索引的状态\ndb.printCollectionStats()\n</code></pre><p>13.查数据<br>    1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)<br>    db.table.find()<br>    相当于：select * from table;<br>    db.table.find().pretty()  查看的数据格式化<br>    db.table.find({}, {id: 0, “name”: 0})    查询表中所有数据,id和name字段不返回<br>    db.table.find({}, {id: 1, “name”: 1})    查询表中所有数据,id和name字段返回(默认返回)</p>\n<pre><code>2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\ndb.table.distinct(&quot;name&quot;)\n相当于: select distinct name from table;\n\n3)查询某张表中&quot;name&quot;=&quot;Bill&quot;的数据\ndb.table.find({&quot;name&quot;=&quot;Bill&quot;})\n相当于：select * from table where name = Bill;\n\n4)查询某张表中 id &gt; 1 的数据 ($gt &gt;, $lt &lt;，$gte &gt;=, $lte &lt;=, $ne !=)\ndb.table.find({id: {$gt: 1}})\n相当于: select * from table where id &gt; 1;\n\n5)查询某张表中 id &gt; 1 $$ id &lt;= 5的数据\ndb.table.find({id: {$gt: 1,$lte: 5}})\n相当于： select * from table where (id &gt; 1 and id &lt;= 5);\n\n6)查询某张表中 name 中包含 li 的数据\ndb.table.find({name: /li/})\n相当于： select * from table where name like &apos;%li%&apos;;\n\n7)查询某张表中 name 以 li 开头的数据\ndb.table.find({name: /^li/})\n相当于： select * from table where name like &apos;li%&apos;;\n\n8)查询某张表中 name 以 li 结尾的数据\ndb.table.find({name: /li$/})\n相当于：select * from table where name like &apos;%li&apos;; \n\n9)查询指定列 name 和 work 的数据\ndb.table.find({}, {name: 1, work: 1})\n相当于：select name, work from table;\n\n10)查询 id &gt; 3 的指定列 name 和 work 的数据\ndb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n想当于： select name, work from table where id &gt; 3;\n\n11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n升序: db.table.find().sort({number: 1})    \n降序：db.table.find().sort({number: -1})\n\n12)查询前三条数据\ndb.table.find().limit(3)\n相当于：select top 3 * from table;\n\n13)查询前三条之后的数据\ndb.table.find().skip(3)\n相当于：select * from table where id not in (select top 3 * from table);\n\n14)查询前三条之后的5条数据\ndb.table.find().limit(5).skip(3)\n\n15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\ndb.table.find({$or: [{id: 2}, {id: 5}]})\n相当于：select * from table where id = 2 or id = 5;\n\n16)查询第一条数据\ndb.table.findOne()\n相当于：select top 1 * from table;\n\n17)查询 id &gt;= 5 的数据的个数 (count() 查询数量)\ndb.table.find({id: {$gte: 5}}).count()\n相当于：select count(*) from table where id &gt;= 5;\n\n18)查询有 name字段 的数据的个数 \ndb.table.find({name: {$exists: true}}).count()\n相当于: select count(name) from table;\n</code></pre><p>14.索引<br>索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。<br>索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。<br>MongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引<br>此外，排序可能升序或降序排列，而索引只有升序一种方式。<br>    1)创建索引<br>    db.table.ensureIndex({name: 1})<br>    db.table.ensureIndex({name: 1, ts: -1})</p>\n<pre><code>2)查询当前聚集集合所有索引\ndb.table.getIndexes()\n\n3)查看总索引记录大小\ndb.table.totalIndexSize()\n\n4)读取当前集合的所有index信息\ndb.table.reIndex()\n\n5)删除指定索引\ndb.table.dropIndex(&quot;name_1&quot;)\n\n6)删除所有索引索引\ndb.table.dropIndexes()\n</code></pre><p>15.添加数据<br>    1)插入数据字段<br>    db.table.insert({})<br>    db.table.save({})</p>\n<pre><code>2)导入数据表\nmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n-d: 数据库\n-c: 表名\n--file: 数据文件地址\n--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n</code></pre><p>16.修改数据<br>    1)修改表中条件为 name : “baiqi” 的数据的 字段 number($set设置)<br>    db.table.update({name: “baiqi”}, {$set: {number: “111”}}, false, true)<br>    第一个false表示不新增数据<br>    相当于：update table set number = ‘111’ where name = “baiqi”;</p>\n<pre><code>2)修改表中条件为 name : &quot;mayun&quot; 的数据 让 number = number + 111, id = id + 2($inc自增)\ndb.table.update({name: &quot;mayun&quot;}, {$inc: {number: 111, id: 2}}, false, true)\n相当于：update table set number = number + 111, id = id + 2 where name = &quot;mayun&quot;;\n\n3)综合上面两个修改\ndb.table.update({name: &apos;liuqiangdong&apos;}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n相当于： update table set id = id + 3, number = 113 where name = &apos;liuqiangdong&apos;;\n</code></pre><p>17.删除数据<br>    db.table.remove({_id: ObjectId(“59a67e103cbae75d282fe46b”)})</p>\n<p>其他<br>    1)查询之前的错误信息<br>    db.getPrevError()</p>\n<pre><code>2)清除错误记录\ndb.resetError()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>1.mongo<br>连入本机数据库</p>\n<p>2.mongo 10.66.66.126:27017<br>连入ip地址为10.66.66.126的机器的数据库</p>\n<p>3.db / db.getName()<br>查看当前数据库(db就是Database)</p>\n<p>4.use demo<br>切换/创建数据库(demo为数据库名)</p>\n<p>5.show dbs<br>查看所有数据库<br>show tables<br>查看所有表集合</p>\n<p>6.db.dropDatabase()<br>删除当前操作的数据库</p>\n<p>7.db.copyDatabase(“mydb”, “temp”, “127.0.0.1”)<br>从指定的机器上复制指定数据库数据到某个数据库，将本机的mydb的数据复制到temp数据库中</p>\n<p>8.db.repairDatabase()<br>修复当前数据库</p>\n<p>9.db.version()<br>当前db版本</p>\n<p>10.db.stats()<br>显示当前db状态</p>\n<p>11.db.getMongo()<br>查看当前db的链接机器地址</p>\n<p>12.数据库表 (Collection聚集集合 )<br>    1)创建一个表<br>    db.createCollection(“collName”, {size: 20, capped: 5, max: 100})</p>\n<pre><code>2)得到指定名称的表\ndb.getCollection(&quot;table&quot;)\n\n3)查询当前db的所有表名的集合\ndb.getCollectionNames()\n\n4)显示当前db所有表索引的状态\ndb.printCollectionStats()\n</code></pre><p>13.查数据<br>    1)查询某表中所有记录(如果数据太多分页查看输出 it 回车)<br>    db.table.find()<br>    相当于：select * from table;<br>    db.table.find().pretty()  查看的数据格式化<br>    db.table.find({}, {id: 0, “name”: 0})    查询表中所有数据,id和name字段不返回<br>    db.table.find({}, {id: 1, “name”: 1})    查询表中所有数据,id和name字段返回(默认返回)</p>\n<pre><code>2)查询某张表中的某个字段的重复数据(会过滤掉name字段中相同的数据)\ndb.table.distinct(&quot;name&quot;)\n相当于: select distinct name from table;\n\n3)查询某张表中&quot;name&quot;=&quot;Bill&quot;的数据\ndb.table.find({&quot;name&quot;=&quot;Bill&quot;})\n相当于：select * from table where name = Bill;\n\n4)查询某张表中 id &gt; 1 的数据 ($gt &gt;, $lt &lt;，$gte &gt;=, $lte &lt;=, $ne !=)\ndb.table.find({id: {$gt: 1}})\n相当于: select * from table where id &gt; 1;\n\n5)查询某张表中 id &gt; 1 $$ id &lt;= 5的数据\ndb.table.find({id: {$gt: 1,$lte: 5}})\n相当于： select * from table where (id &gt; 1 and id &lt;= 5);\n\n6)查询某张表中 name 中包含 li 的数据\ndb.table.find({name: /li/})\n相当于： select * from table where name like &apos;%li%&apos;;\n\n7)查询某张表中 name 以 li 开头的数据\ndb.table.find({name: /^li/})\n相当于： select * from table where name like &apos;li%&apos;;\n\n8)查询某张表中 name 以 li 结尾的数据\ndb.table.find({name: /li$/})\n相当于：select * from table where name like &apos;%li&apos;; \n\n9)查询指定列 name 和 work 的数据\ndb.table.find({}, {name: 1, work: 1})\n相当于：select name, work from table;\n\n10)查询 id &gt; 3 的指定列 name 和 work 的数据\ndb.table.find({id: {$gt: 3}}, {name: 1, work: 1})\n想当于： select name, work from table where id &gt; 3;\n\n11)按照 number 大小 升序和降序查询 (1表示升序, -1表示降序)\n升序: db.table.find().sort({number: 1})    \n降序：db.table.find().sort({number: -1})\n\n12)查询前三条数据\ndb.table.find().limit(3)\n相当于：select top 3 * from table;\n\n13)查询前三条之后的数据\ndb.table.find().skip(3)\n相当于：select * from table where id not in (select top 3 * from table);\n\n14)查询前三条之后的5条数据\ndb.table.find().limit(5).skip(3)\n\n15)查询 id=2 或者 id=5 的数据($or 或者, $in 包含, $nin 不包含)\ndb.table.find({$or: [{id: 2}, {id: 5}]})\n相当于：select * from table where id = 2 or id = 5;\n\n16)查询第一条数据\ndb.table.findOne()\n相当于：select top 1 * from table;\n\n17)查询 id &gt;= 5 的数据的个数 (count() 查询数量)\ndb.table.find({id: {$gte: 5}}).count()\n相当于：select count(*) from table where id &gt;= 5;\n\n18)查询有 name字段 的数据的个数 \ndb.table.find({name: {$exists: true}}).count()\n相当于: select count(name) from table;\n</code></pre><p>14.索引<br>索引是为了快速查找数据用的,主要是用来降低CPU成本消耗的。<br>索引相当于排序，但与排序不同的是，排序是将原数据重新排列，改变了原数据的排列顺序。而索引只是建立一个顺序表，由这个顺序表指出数据的顺序，所以索引不改变原数据的排列顺序。<br>MongoDB支持的索引：_id索引(默认建立)、单键索引、多键索引、复合索引、过期索引、全文索引、地理位置索引<br>此外，排序可能升序或降序排列，而索引只有升序一种方式。<br>    1)创建索引<br>    db.table.ensureIndex({name: 1})<br>    db.table.ensureIndex({name: 1, ts: -1})</p>\n<pre><code>2)查询当前聚集集合所有索引\ndb.table.getIndexes()\n\n3)查看总索引记录大小\ndb.table.totalIndexSize()\n\n4)读取当前集合的所有index信息\ndb.table.reIndex()\n\n5)删除指定索引\ndb.table.dropIndex(&quot;name_1&quot;)\n\n6)删除所有索引索引\ndb.table.dropIndexes()\n</code></pre><p>15.添加数据<br>    1)插入数据字段<br>    db.table.insert({})<br>    db.table.save({})</p>\n<pre><code>2)导入数据表\nmongoimport -d Lanyu -c shangpin --file D:\\MongoDB\\data\\product.json --jsonArray\n-d: 数据库\n-c: 表名\n--file: 数据文件地址\n--jsonArray: 导入json文件专用,否则导入失败, json文件格式：[{},{},{},{},{}]\n</code></pre><p>16.修改数据<br>    1)修改表中条件为 name : “baiqi” 的数据的 字段 number($set设置)<br>    db.table.update({name: “baiqi”}, {$set: {number: “111”}}, false, true)<br>    第一个false表示不新增数据<br>    相当于：update table set number = ‘111’ where name = “baiqi”;</p>\n<pre><code>2)修改表中条件为 name : &quot;mayun&quot; 的数据 让 number = number + 111, id = id + 2($inc自增)\ndb.table.update({name: &quot;mayun&quot;}, {$inc: {number: 111, id: 2}}, false, true)\n相当于：update table set number = number + 111, id = id + 2 where name = &quot;mayun&quot;;\n\n3)综合上面两个修改\ndb.table.update({name: &apos;liuqiangdong&apos;}, {$inc: {id: 3}, $set: {number: 113}}, false, true)\n相当于： update table set id = id + 3, number = 113 where name = &apos;liuqiangdong&apos;;\n</code></pre><p>17.删除数据<br>    db.table.remove({_id: ObjectId(“59a67e103cbae75d282fe46b”)})</p>\n<p>其他<br>    1)查询之前的错误信息<br>    db.getPrevError()</p>\n<pre><code>2)清除错误记录\ndb.resetError()\n</code></pre>"},{"title":"odm","date":"2019-08-13T02:51:16.000Z","_content":"\n\n```\n\nfrom mongoengine import connect, Document, StringField, IntField, \\\n    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字\nconnect('test')   # 连接的数据库\n# connect('test', host = '192.168.0.2', port=27017)\n# connect('test', host = 'mongodb://localhost/test') \nSEX_CHOICE = (\n    ('male', '男'),\n    ('female', '女')\n)\n\nclass Grade(EmbeddedDocument):\n    '''  成绩信息  '''\n    name =  StringField(required=True)\n    score = FloatField(required=True)\n\nclass Student(DynamicDocument):   # 可以在后面插入其他关键字\n    ''' 学生信息 '''\n    name = StringField(max_length=32, required=True)\n    age = IntField(required=True)\n    sex = StringField(choices=SEX_CHOICE, required=True)\n    grade = FloatField()\n    address = StringField()\n    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联\n    \n    meta = {\n        'collection': 'students'  # 指定连接的集合\n    }\n```","source":"_posts/数据库/mongodb/odm.md","raw":"---\n\ntitle: odm\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n\n```\n\nfrom mongoengine import connect, Document, StringField, IntField, \\\n    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字\nconnect('test')   # 连接的数据库\n# connect('test', host = '192.168.0.2', port=27017)\n# connect('test', host = 'mongodb://localhost/test') \nSEX_CHOICE = (\n    ('male', '男'),\n    ('female', '女')\n)\n\nclass Grade(EmbeddedDocument):\n    '''  成绩信息  '''\n    name =  StringField(required=True)\n    score = FloatField(required=True)\n\nclass Student(DynamicDocument):   # 可以在后面插入其他关键字\n    ''' 学生信息 '''\n    name = StringField(max_length=32, required=True)\n    age = IntField(required=True)\n    sex = StringField(choices=SEX_CHOICE, required=True)\n    grade = FloatField()\n    address = StringField()\n    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联\n    \n    meta = {\n        'collection': 'students'  # 指定连接的集合\n    }\n```","slug":"数据库/mongodb/odm","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6q007ntssaljxy5nl3","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from mongoengine import connect, Document, StringField, IntField, \\</span><br><span class=\"line\">    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字</span><br><span class=\"line\">connect(&apos;test&apos;)   # 连接的数据库</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;192.168.0.2&apos;, port=27017)</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;mongodb://localhost/test&apos;) </span><br><span class=\"line\">SEX_CHOICE = (</span><br><span class=\"line\">    (&apos;male&apos;, &apos;男&apos;),</span><br><span class=\"line\">    (&apos;female&apos;, &apos;女&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class Grade(EmbeddedDocument):</span><br><span class=\"line\">    &apos;&apos;&apos;  成绩信息  &apos;&apos;&apos;</span><br><span class=\"line\">    name =  StringField(required=True)</span><br><span class=\"line\">    score = FloatField(required=True)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(DynamicDocument):   # 可以在后面插入其他关键字</span><br><span class=\"line\">    &apos;&apos;&apos; 学生信息 &apos;&apos;&apos;</span><br><span class=\"line\">    name = StringField(max_length=32, required=True)</span><br><span class=\"line\">    age = IntField(required=True)</span><br><span class=\"line\">    sex = StringField(choices=SEX_CHOICE, required=True)</span><br><span class=\"line\">    grade = FloatField()</span><br><span class=\"line\">    address = StringField()</span><br><span class=\"line\">    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联</span><br><span class=\"line\">    </span><br><span class=\"line\">    meta = &#123;</span><br><span class=\"line\">        &apos;collection&apos;: &apos;students&apos;  # 指定连接的集合</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">from mongoengine import connect, Document, StringField, IntField, \\</span><br><span class=\"line\">    FloatField, EmbeddedDocument, ListField, EmbeddedDocumentField, DynamicDocument # 可以在后面插入其他关键字</span><br><span class=\"line\">connect(&apos;test&apos;)   # 连接的数据库</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;192.168.0.2&apos;, port=27017)</span><br><span class=\"line\"># connect(&apos;test&apos;, host = &apos;mongodb://localhost/test&apos;) </span><br><span class=\"line\">SEX_CHOICE = (</span><br><span class=\"line\">    (&apos;male&apos;, &apos;男&apos;),</span><br><span class=\"line\">    (&apos;female&apos;, &apos;女&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">class Grade(EmbeddedDocument):</span><br><span class=\"line\">    &apos;&apos;&apos;  成绩信息  &apos;&apos;&apos;</span><br><span class=\"line\">    name =  StringField(required=True)</span><br><span class=\"line\">    score = FloatField(required=True)</span><br><span class=\"line\"></span><br><span class=\"line\">class Student(DynamicDocument):   # 可以在后面插入其他关键字</span><br><span class=\"line\">    &apos;&apos;&apos; 学生信息 &apos;&apos;&apos;</span><br><span class=\"line\">    name = StringField(max_length=32, required=True)</span><br><span class=\"line\">    age = IntField(required=True)</span><br><span class=\"line\">    sex = StringField(choices=SEX_CHOICE, required=True)</span><br><span class=\"line\">    grade = FloatField()</span><br><span class=\"line\">    address = StringField()</span><br><span class=\"line\">    grades = ListField(EmbeddedDocumentField(Grade))  # 与 Grade 关联</span><br><span class=\"line\">    </span><br><span class=\"line\">    meta = &#123;</span><br><span class=\"line\">        &apos;collection&apos;: &apos;students&apos;  # 指定连接的集合</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"mongodb入门","date":"2019-08-13T02:51:16.000Z","_content":"## 简介\n### 文档\n1. eg: {\"foo\":3,\"greeting\":\"Hello world!\"}\n2. 区分大小写\n3. key唯一\n4. 文档可嵌套\n5. 键值对 有序\n\n### 集合\n1. 集合就是一组文档\n2. 文档类似于 关系库里的 行\n3. 集合类似于 关系库里的表\n4. 集合中的文档无需固定的结构\n\n集合命名规则：\n\n### 数据库\n1. 多个文档组成集合，多个集合组成数据库\n2. 一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）\n3. 每个数据库都有独立权限\n4. 保留的数据库名称（admin,local,config）\n\n## 使用命令行操作数据库\n### 兼容js操作\n> 1+2\n3\n> function add(r1,r2){\n... return r1 + r2;\n... }\n> add(8,2)\n10\n### 新增数据\n`show dbs` 查看所有数据库\n`db.collection.insert()`\n`db.collection.insertOne()`\n`db.collection.insertMany()`\n```\n> show dbs\nadmin  0.078GB\nlocal  0.078GB\n```\n`use test` 使用 test 数据库 （没有就会创建）\n```\n> use students\nswitched to db students\n> db   # 查看当前数据库\nstudents\n> stu = { name : 'weilai', age : 22 }\n{ \"name\" : \"weilai\", \"age\" : 22 }\n> db.students.insert(stu)\nWriteResult({ \"nInserted\" : 1 })\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n```\n\n### 查询数据\n`db.collection.find()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n`db.collection.findOne()`\n```\n> db.students.findOne()   # 查询第一条数据\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n```\n\n### 修改数据\n`db.collection.update()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> s = db.students.findOne()\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n> db.students.update({name:'weilai'},{name:'cool'})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }  # 直接替换，并非仅修改 name 的值\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n仅修改值\n```\n> s_obj = db.students.findOne({'name':'weilai1'})\n{\n        \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"),\n        \"name\" : \"weilai1\",\n        \"age\" : 22,\n        \"sex\" : \"male\"\n}\n> s_obj.name = 'amy'\namy\n> db.students.update({name:'weilai1'},s_obj)\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n```\n\n### 删除数据\n`db.collection.remove({name:'cool'})`  删除 1条数据\n`db.collection.remove({})` 删除所有数据\n```\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({name:'cool'})\nWriteResult({ \"nRemoved\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({})\nWriteResult({ \"nRemoved\" : 2 })\n> db.students.find()\n>\n```\n\n\n\n\n","source":"_posts/数据库/mongodb/入门.md","raw":"---\n\ntitle: mongodb入门\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n## 简介\n### 文档\n1. eg: {\"foo\":3,\"greeting\":\"Hello world!\"}\n2. 区分大小写\n3. key唯一\n4. 文档可嵌套\n5. 键值对 有序\n\n### 集合\n1. 集合就是一组文档\n2. 文档类似于 关系库里的 行\n3. 集合类似于 关系库里的表\n4. 集合中的文档无需固定的结构\n\n集合命名规则：\n\n### 数据库\n1. 多个文档组成集合，多个集合组成数据库\n2. 一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）\n3. 每个数据库都有独立权限\n4. 保留的数据库名称（admin,local,config）\n\n## 使用命令行操作数据库\n### 兼容js操作\n> 1+2\n3\n> function add(r1,r2){\n... return r1 + r2;\n... }\n> add(8,2)\n10\n### 新增数据\n`show dbs` 查看所有数据库\n`db.collection.insert()`\n`db.collection.insertOne()`\n`db.collection.insertMany()`\n```\n> show dbs\nadmin  0.078GB\nlocal  0.078GB\n```\n`use test` 使用 test 数据库 （没有就会创建）\n```\n> use students\nswitched to db students\n> db   # 查看当前数据库\nstudents\n> stu = { name : 'weilai', age : 22 }\n{ \"name\" : \"weilai\", \"age\" : 22 }\n> db.students.insert(stu)\nWriteResult({ \"nInserted\" : 1 })\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n```\n\n### 查询数据\n`db.collection.find()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n`db.collection.findOne()`\n```\n> db.students.findOne()   # 查询第一条数据\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n```\n\n### 修改数据\n`db.collection.update()`\n```\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"weilai\", \"age\" : 22 }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> s = db.students.findOne()\n{\n        \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"),\n        \"name\" : \"weilai\",\n        \"age\" : 22\n}\n> db.students.update({name:'weilai'},{name:'cool'})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }  # 直接替换，并非仅修改 name 的值\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n```\n仅修改值\n```\n> s_obj = db.students.findOne({'name':'weilai1'})\n{\n        \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"),\n        \"name\" : \"weilai1\",\n        \"age\" : 22,\n        \"sex\" : \"male\"\n}\n> s_obj.name = 'amy'\namy\n> db.students.update({name:'weilai1'},s_obj)\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n```\n\n### 删除数据\n`db.collection.remove({name:'cool'})`  删除 1条数据\n`db.collection.remove({})` 删除所有数据\n```\n> db.students.insert({ \"name\" : \"weilai1\", \"age\" : 22, \"sex\": \"male\" })\nWriteResult({ \"nInserted\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a491ff626673ec5503c9\"), \"name\" : \"cool\" }\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({name:'cool'})\nWriteResult({ \"nRemoved\" : 1 })\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8a554ff626673ec5503ca\"), \"name\" : \"amy\", \"age\" : 22, \"sex\" : \"male\" }\n{ \"_id\" : ObjectId(\"5de8ae63ff626673ec5503cb\"), \"name\" : \"weilai1\", \"age\" : 22, \"sex\" : \"male\" }\n> db.students.remove({})\nWriteResult({ \"nRemoved\" : 2 })\n> db.students.find()\n>\n```\n\n\n\n\n","slug":"数据库/mongodb/入门","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6s007qtssand0olswu","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ol>\n<li>eg: {“foo”:3,”greeting”:”Hello world!”}</li>\n<li>区分大小写</li>\n<li>key唯一</li>\n<li>文档可嵌套</li>\n<li>键值对 有序</li>\n</ol>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><ol>\n<li>集合就是一组文档</li>\n<li>文档类似于 关系库里的 行</li>\n<li>集合类似于 关系库里的表</li>\n<li>集合中的文档无需固定的结构</li>\n</ol>\n<p>集合命名规则：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>多个文档组成集合，多个集合组成数据库</li>\n<li>一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）</li>\n<li>每个数据库都有独立权限</li>\n<li>保留的数据库名称（admin,local,config）</li>\n</ol>\n<h2 id=\"使用命令行操作数据库\"><a href=\"#使用命令行操作数据库\" class=\"headerlink\" title=\"使用命令行操作数据库\"></a>使用命令行操作数据库</h2><h3 id=\"兼容js操作\"><a href=\"#兼容js操作\" class=\"headerlink\" title=\"兼容js操作\"></a>兼容js操作</h3><blockquote>\n<p>1+2<br>3<br>function add(r1,r2){<br>… return r1 + r2;<br>… }<br>add(8,2)<br>10</p>\n</blockquote>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><p><code>show dbs</code> 查看所有数据库<br><code>db.collection.insert()</code><br><code>db.collection.insertOne()</code><br><code>db.collection.insertMany()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin  0.078GB</span><br><span class=\"line\">local  0.078GB</span><br></pre></td></tr></table></figure></p>\n<p><code>use test</code> 使用 test 数据库 （没有就会创建）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use students</span><br><span class=\"line\">switched to db students</span><br><span class=\"line\">&gt; db   # 查看当前数据库</span><br><span class=\"line\">students</span><br><span class=\"line\">&gt; stu = &#123; name : &apos;weilai&apos;, age : 22 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&gt; db.students.insert(stu)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><code>db.collection.find()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>db.collection.findOne()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.findOne()   # 查询第一条数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><code>db.collection.update()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; s = db.students.findOne()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai&apos;&#125;,&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;  # 直接替换，并非仅修改 name 的值</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>仅修改值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; s_obj = db.students.findOne(&#123;&apos;name&apos;:&apos;weilai1&apos;&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai1&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22,</span><br><span class=\"line\">        &quot;sex&quot; : &quot;male&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; s_obj.name = &apos;amy&apos;</span><br><span class=\"line\">amy</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai1&apos;&#125;,s_obj)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><code>db.collection.remove({name:&#39;cool&#39;})</code>  删除 1条数据<br><code>db.collection.remove({})</code> 删除所有数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ol>\n<li>eg: {“foo”:3,”greeting”:”Hello world!”}</li>\n<li>区分大小写</li>\n<li>key唯一</li>\n<li>文档可嵌套</li>\n<li>键值对 有序</li>\n</ol>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><ol>\n<li>集合就是一组文档</li>\n<li>文档类似于 关系库里的 行</li>\n<li>集合类似于 关系库里的表</li>\n<li>集合中的文档无需固定的结构</li>\n</ol>\n<p>集合命名规则：</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ol>\n<li>多个文档组成集合，多个集合组成数据库</li>\n<li>一个实例 可以承载多个数据库  （可以理解为一个mongodb可以有多个数据库）</li>\n<li>每个数据库都有独立权限</li>\n<li>保留的数据库名称（admin,local,config）</li>\n</ol>\n<h2 id=\"使用命令行操作数据库\"><a href=\"#使用命令行操作数据库\" class=\"headerlink\" title=\"使用命令行操作数据库\"></a>使用命令行操作数据库</h2><h3 id=\"兼容js操作\"><a href=\"#兼容js操作\" class=\"headerlink\" title=\"兼容js操作\"></a>兼容js操作</h3><blockquote>\n<p>1+2<br>3<br>function add(r1,r2){<br>… return r1 + r2;<br>… }<br>add(8,2)<br>10</p>\n</blockquote>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><p><code>show dbs</code> 查看所有数据库<br><code>db.collection.insert()</code><br><code>db.collection.insertOne()</code><br><code>db.collection.insertMany()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin  0.078GB</span><br><span class=\"line\">local  0.078GB</span><br></pre></td></tr></table></figure></p>\n<p><code>use test</code> 使用 test 数据库 （没有就会创建）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use students</span><br><span class=\"line\">switched to db students</span><br><span class=\"line\">&gt; db   # 查看当前数据库</span><br><span class=\"line\">students</span><br><span class=\"line\">&gt; stu = &#123; name : &apos;weilai&apos;, age : 22 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&gt; db.students.insert(stu)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><p><code>db.collection.find()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>db.collection.findOne()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.findOne()   # 查询第一条数据</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><code>db.collection.update()</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;weilai&quot;, &quot;age&quot; : 22 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; s = db.students.findOne()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai&apos;&#125;,&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;  # 直接替换，并非仅修改 name 的值</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<p>仅修改值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; s_obj = db.students.findOne(&#123;&apos;name&apos;:&apos;weilai1&apos;&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;),</span><br><span class=\"line\">        &quot;name&quot; : &quot;weilai1&quot;,</span><br><span class=\"line\">        &quot;age&quot; : 22,</span><br><span class=\"line\">        &quot;sex&quot; : &quot;male&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; s_obj.name = &apos;amy&apos;</span><br><span class=\"line\">amy</span><br><span class=\"line\">&gt; db.students.update(&#123;name:&apos;weilai1&apos;&#125;,s_obj)</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><p><code>db.collection.remove({name:&#39;cool&#39;})</code>  删除 1条数据<br><code>db.collection.remove({})</code> 删除所有数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.students.insert(&#123; &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot;: &quot;male&quot; &#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a491ff626673ec5503c9&quot;), &quot;name&quot; : &quot;cool&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;name:&apos;cool&apos;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8a554ff626673ec5503ca&quot;), &quot;name&quot; : &quot;amy&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8ae63ff626673ec5503cb&quot;), &quot;name&quot; : &quot;weilai1&quot;, &quot;age&quot; : 22, &quot;sex&quot; : &quot;male&quot; &#125;</span><br><span class=\"line\">&gt; db.students.remove(&#123;&#125;)</span><br><span class=\"line\">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"test_odm","date":"2019-08-13T02:51:16.000Z","_content":"\n```\nfrom odm import Grade, Student\n\nclass TestMongoEngine:\n    def add_one(self):\n        math = Grade(name = '数学', score = 90)\n        English = Grade(name = '英语', score = 89.5)\n\n        stu_obj = Student(\n            name =  'weilai',\n            age = 22,\n            sex = 'male',\n            grades = [math, English]\n        )\n        stu_obj.remake = 'remake'  # 动态插入\n        stu_obj.save()\n        return stu_obj\n\n    def get_one(self):\n        return Student.objects.first()\n\n    def get_more(self):\n        return Student.objects.all()\n    \n    def get_from_oid(self, oid):\n        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据\n         \n    def update_more(self):\n        return Student.objects.filter(sex='male',age__gt=20).update(inc__age=10)\n\n    def update_one(self):\n        return Student.objects.filter(sex='male',age__gt=20).update_one(inc__age=100)\n\n    def delete_one(self):\n        return Student.objects.filter(sex='male').first().delete()\n\n    def delete_more(self):\n        return Student.objects.filter(sex='male').delete()\n\ndef main():\n    obj = TestMongoEngine()\n    result = obj.add_one()\n    print(result.pk)\n    get_one = obj.get_one()\n    print(get_one.id)\n    print(get_one.name)\n    print(obj.get_from_oid(get_one.id).id)\n    rows = obj.get_more()\n    for row in rows:\n        print(row.sex)\n    print(obj.update_more())\n    print(obj.update_one())\n    print(obj.delete_one())\n    print(obj.delete_more())\n\nif __name__ == '__main__':\n    main()\n```","source":"_posts/数据库/mongodb/test_odm.md","raw":"---\n\ntitle: test_odm\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n```\nfrom odm import Grade, Student\n\nclass TestMongoEngine:\n    def add_one(self):\n        math = Grade(name = '数学', score = 90)\n        English = Grade(name = '英语', score = 89.5)\n\n        stu_obj = Student(\n            name =  'weilai',\n            age = 22,\n            sex = 'male',\n            grades = [math, English]\n        )\n        stu_obj.remake = 'remake'  # 动态插入\n        stu_obj.save()\n        return stu_obj\n\n    def get_one(self):\n        return Student.objects.first()\n\n    def get_more(self):\n        return Student.objects.all()\n    \n    def get_from_oid(self, oid):\n        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据\n         \n    def update_more(self):\n        return Student.objects.filter(sex='male',age__gt=20).update(inc__age=10)\n\n    def update_one(self):\n        return Student.objects.filter(sex='male',age__gt=20).update_one(inc__age=100)\n\n    def delete_one(self):\n        return Student.objects.filter(sex='male').first().delete()\n\n    def delete_more(self):\n        return Student.objects.filter(sex='male').delete()\n\ndef main():\n    obj = TestMongoEngine()\n    result = obj.add_one()\n    print(result.pk)\n    get_one = obj.get_one()\n    print(get_one.id)\n    print(get_one.name)\n    print(obj.get_from_oid(get_one.id).id)\n    rows = obj.get_more()\n    for row in rows:\n        print(row.sex)\n    print(obj.update_more())\n    print(obj.update_one())\n    print(obj.delete_one())\n    print(obj.delete_more())\n\nif __name__ == '__main__':\n    main()\n```","slug":"数据库/mongodb/test_odm","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6t007rtssa3c3qljn0","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from odm import Grade, Student</span><br><span class=\"line\"></span><br><span class=\"line\">class TestMongoEngine:</span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        math = Grade(name = &apos;数学&apos;, score = 90)</span><br><span class=\"line\">        English = Grade(name = &apos;英语&apos;, score = 89.5)</span><br><span class=\"line\"></span><br><span class=\"line\">        stu_obj = Student(</span><br><span class=\"line\">            name =  &apos;weilai&apos;,</span><br><span class=\"line\">            age = 22,</span><br><span class=\"line\">            sex = &apos;male&apos;,</span><br><span class=\"line\">            grades = [math, English]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        stu_obj.remake = &apos;remake&apos;  # 动态插入</span><br><span class=\"line\">        stu_obj.save()</span><br><span class=\"line\">        return stu_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return Student.objects.all()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_from_oid(self, oid):</span><br><span class=\"line\">        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据</span><br><span class=\"line\">         </span><br><span class=\"line\">    def update_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update(inc__age=10)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update_one(inc__age=100)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).first().delete()</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).delete()</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = TestMongoEngine()</span><br><span class=\"line\">    result = obj.add_one()</span><br><span class=\"line\">    print(result.pk)</span><br><span class=\"line\">    get_one = obj.get_one()</span><br><span class=\"line\">    print(get_one.id)</span><br><span class=\"line\">    print(get_one.name)</span><br><span class=\"line\">    print(obj.get_from_oid(get_one.id).id)</span><br><span class=\"line\">    rows = obj.get_more()</span><br><span class=\"line\">    for row in rows:</span><br><span class=\"line\">        print(row.sex)</span><br><span class=\"line\">    print(obj.update_more())</span><br><span class=\"line\">    print(obj.update_one())</span><br><span class=\"line\">    print(obj.delete_one())</span><br><span class=\"line\">    print(obj.delete_more())</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from odm import Grade, Student</span><br><span class=\"line\"></span><br><span class=\"line\">class TestMongoEngine:</span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        math = Grade(name = &apos;数学&apos;, score = 90)</span><br><span class=\"line\">        English = Grade(name = &apos;英语&apos;, score = 89.5)</span><br><span class=\"line\"></span><br><span class=\"line\">        stu_obj = Student(</span><br><span class=\"line\">            name =  &apos;weilai&apos;,</span><br><span class=\"line\">            age = 22,</span><br><span class=\"line\">            sex = &apos;male&apos;,</span><br><span class=\"line\">            grades = [math, English]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        stu_obj.remake = &apos;remake&apos;  # 动态插入</span><br><span class=\"line\">        stu_obj.save()</span><br><span class=\"line\">        return stu_obj</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return Student.objects.all()</span><br><span class=\"line\">    </span><br><span class=\"line\">    def get_from_oid(self, oid):</span><br><span class=\"line\">        return Student.objects.filter(pk=oid).first()  # 根据id 得到一条数据</span><br><span class=\"line\">         </span><br><span class=\"line\">    def update_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update(inc__age=10)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;,age__gt=20).update_one(inc__age=100)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).first().delete()</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_more(self):</span><br><span class=\"line\">        return Student.objects.filter(sex=&apos;male&apos;).delete()</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = TestMongoEngine()</span><br><span class=\"line\">    result = obj.add_one()</span><br><span class=\"line\">    print(result.pk)</span><br><span class=\"line\">    get_one = obj.get_one()</span><br><span class=\"line\">    print(get_one.id)</span><br><span class=\"line\">    print(get_one.name)</span><br><span class=\"line\">    print(obj.get_from_oid(get_one.id).id)</span><br><span class=\"line\">    rows = obj.get_more()</span><br><span class=\"line\">    for row in rows:</span><br><span class=\"line\">        print(row.sex)</span><br><span class=\"line\">    print(obj.update_more())</span><br><span class=\"line\">    print(obj.update_one())</span><br><span class=\"line\">    print(obj.delete_one())</span><br><span class=\"line\">    print(obj.delete_more())</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"title":"python操作MongoDB","date":"2019-08-13T02:51:16.000Z","_content":"\npython操作MongoDB\n\n```\nfrom pymongo import MongoClient\nfrom dataclasses import dataclass\nfrom bson.objectid import ObjectId\n\n\n@dataclass\nclass Test_Mongo():\n    client:dict = MongoClient()\n    db:dict = client['test']  # 连接到 test 数据库\n    \n    def add_one(self):\n        post = {\n            'name': 'justin',\n            'age': 18,\n            'sex': 'male',\n            'grade': 80\n        }\n        return self.db.students.insert_one(post)\n\n    def add_many(self):\n        return self.db.students.insert_many([{'name':i} for i in range(0,10)])\n\n\n    def get_one(self):\n        return self.db.students.find_one({'name':'justin'})\n\n    def get_more(self):\n        return self.db.students.find({'sex':'male'})\n\n    def get_one_from_oid(self, oid):\n        obj = ObjectId(oid)\n        return self.db.students.find_one({'_id': obj})\n\n    def get_count(self):\n        return self.db.students.estimated_document_count()\n\n\n    def update_one(self):\n        return self.db.students.update_one({'name':'justin'},{'$inc':{'age':10}})\n\n    def update_many(self):\n        return self.db.students.update_many({},{'$inc':{'age':5}})\n\n    def delete_one(self):\n        return self.db.students.delete_one({'name':'justin'})\n\n    def delete_many(self):\n        return self.db.students.delete_many({'name':'justin'})\n\n\ndef main():\n    obj = Test_Mongo()\n    print(obj.add_one().inserted_id)\n    print(obj.get_one())\n    print(obj.add_many().inserted_ids)\n    print(obj.get_count())\n    for item in obj.get_more():\n        print(item['_id'])\n    print(obj.get_one_from_oid(obj.add_one().inserted_id))\n    print(obj.update_one().matched_count)\n    print(obj.update_one().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.delete_one().deleted_count)\n    print(obj.delete_many().deleted_count)\n\n\nif __name__ == '__main__':\n    main()\n```","source":"_posts/数据库/mongodb/python操作MongoDB.md","raw":"---\n\ntitle: python操作MongoDB\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\npython操作MongoDB\n\n```\nfrom pymongo import MongoClient\nfrom dataclasses import dataclass\nfrom bson.objectid import ObjectId\n\n\n@dataclass\nclass Test_Mongo():\n    client:dict = MongoClient()\n    db:dict = client['test']  # 连接到 test 数据库\n    \n    def add_one(self):\n        post = {\n            'name': 'justin',\n            'age': 18,\n            'sex': 'male',\n            'grade': 80\n        }\n        return self.db.students.insert_one(post)\n\n    def add_many(self):\n        return self.db.students.insert_many([{'name':i} for i in range(0,10)])\n\n\n    def get_one(self):\n        return self.db.students.find_one({'name':'justin'})\n\n    def get_more(self):\n        return self.db.students.find({'sex':'male'})\n\n    def get_one_from_oid(self, oid):\n        obj = ObjectId(oid)\n        return self.db.students.find_one({'_id': obj})\n\n    def get_count(self):\n        return self.db.students.estimated_document_count()\n\n\n    def update_one(self):\n        return self.db.students.update_one({'name':'justin'},{'$inc':{'age':10}})\n\n    def update_many(self):\n        return self.db.students.update_many({},{'$inc':{'age':5}})\n\n    def delete_one(self):\n        return self.db.students.delete_one({'name':'justin'})\n\n    def delete_many(self):\n        return self.db.students.delete_many({'name':'justin'})\n\n\ndef main():\n    obj = Test_Mongo()\n    print(obj.add_one().inserted_id)\n    print(obj.get_one())\n    print(obj.add_many().inserted_ids)\n    print(obj.get_count())\n    for item in obj.get_more():\n        print(item['_id'])\n    print(obj.get_one_from_oid(obj.add_one().inserted_id))\n    print(obj.update_one().matched_count)\n    print(obj.update_one().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.update_many().matched_count)\n    print(obj.delete_one().deleted_count)\n    print(obj.delete_many().deleted_count)\n\n\nif __name__ == '__main__':\n    main()\n```","slug":"数据库/mongodb/python操作MongoDB","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6u007stssa2xi7w8ca","content":"<p>python操作MongoDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">from bson.objectid import ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Test_Mongo():</span><br><span class=\"line\">    client:dict = MongoClient()</span><br><span class=\"line\">    db:dict = client[&apos;test&apos;]  # 连接到 test 数据库</span><br><span class=\"line\">    </span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        post = &#123;</span><br><span class=\"line\">            &apos;name&apos;: &apos;justin&apos;,</span><br><span class=\"line\">            &apos;age&apos;: 18,</span><br><span class=\"line\">            &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">            &apos;grade&apos;: 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self.db.students.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_many(self):</span><br><span class=\"line\">        return self.db.students.insert_many([&#123;&apos;name&apos;:i&#125; for i in range(0,10)])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.db.students.find(&#123;&apos;sex&apos;:&apos;male&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one_from_oid(self, oid):</span><br><span class=\"line\">        obj = ObjectId(oid)</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;_id&apos;: obj&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_count(self):</span><br><span class=\"line\">        return self.db.students.estimated_document_count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return self.db.students.update_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:10&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_many(self):</span><br><span class=\"line\">        return self.db.students.update_many(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:5&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return self.db.students.delete_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_many(self):</span><br><span class=\"line\">        return self.db.students.delete_many(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = Test_Mongo()</span><br><span class=\"line\">    print(obj.add_one().inserted_id)</span><br><span class=\"line\">    print(obj.get_one())</span><br><span class=\"line\">    print(obj.add_many().inserted_ids)</span><br><span class=\"line\">    print(obj.get_count())</span><br><span class=\"line\">    for item in obj.get_more():</span><br><span class=\"line\">        print(item[&apos;_id&apos;])</span><br><span class=\"line\">    print(obj.get_one_from_oid(obj.add_one().inserted_id))</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.delete_one().deleted_count)</span><br><span class=\"line\">    print(obj.delete_many().deleted_count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>python操作MongoDB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pymongo import MongoClient</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">from bson.objectid import ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Test_Mongo():</span><br><span class=\"line\">    client:dict = MongoClient()</span><br><span class=\"line\">    db:dict = client[&apos;test&apos;]  # 连接到 test 数据库</span><br><span class=\"line\">    </span><br><span class=\"line\">    def add_one(self):</span><br><span class=\"line\">        post = &#123;</span><br><span class=\"line\">            &apos;name&apos;: &apos;justin&apos;,</span><br><span class=\"line\">            &apos;age&apos;: 18,</span><br><span class=\"line\">            &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">            &apos;grade&apos;: 80</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self.db.students.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\">    def add_many(self):</span><br><span class=\"line\">        return self.db.students.insert_many([&#123;&apos;name&apos;:i&#125; for i in range(0,10)])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one(self):</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_more(self):</span><br><span class=\"line\">        return self.db.students.find(&#123;&apos;sex&apos;:&apos;male&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_one_from_oid(self, oid):</span><br><span class=\"line\">        obj = ObjectId(oid)</span><br><span class=\"line\">        return self.db.students.find_one(&#123;&apos;_id&apos;: obj&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_count(self):</span><br><span class=\"line\">        return self.db.students.estimated_document_count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def update_one(self):</span><br><span class=\"line\">        return self.db.students.update_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:10&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def update_many(self):</span><br><span class=\"line\">        return self.db.students.update_many(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;&apos;age&apos;:5&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_one(self):</span><br><span class=\"line\">        return self.db.students.delete_one(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def delete_many(self):</span><br><span class=\"line\">        return self.db.students.delete_many(&#123;&apos;name&apos;:&apos;justin&apos;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    obj = Test_Mongo()</span><br><span class=\"line\">    print(obj.add_one().inserted_id)</span><br><span class=\"line\">    print(obj.get_one())</span><br><span class=\"line\">    print(obj.add_many().inserted_ids)</span><br><span class=\"line\">    print(obj.get_count())</span><br><span class=\"line\">    for item in obj.get_more():</span><br><span class=\"line\">        print(item[&apos;_id&apos;])</span><br><span class=\"line\">    print(obj.get_one_from_oid(obj.add_one().inserted_id))</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_one().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.update_many().matched_count)</span><br><span class=\"line\">    print(obj.delete_one().deleted_count)</span><br><span class=\"line\">    print(obj.delete_many().deleted_count)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"title":"mongodb插入数据","date":"2019-08-13T02:51:16.000Z","_content":"\n## 插入数据\n```\n> use test\nswitched to db test\n> db.students.insertMany(\n... [{\"name\": \"测试-0\", \"age\": 63, \"sex\": \"female\", \"grade\": 1},{\"name\": \"测试-1\", \"age\": 32, \"sex\": \"male\", \"grade\": 7},{\"name\": \"测试-2\", \"age\": 20, \"sex\": \"female\", \"grade\": 8},{\"name\": \"测试-3\", \"age\": 55, \"sex\": \"female\", \"grade\": 58},{\"name\": \"测试-4\", \"age\": 84, \"sex\": \"male\", \"grade\": 65},{\"name\": \"测试-5\", \"age\": 27, \"sex\": \"female\", \"grade\": 57},{\"name\": \"测试-6\", \"age\": 86, \"sex\": \"female\", \"grade\": 61},{\"name\": \"测试-7\", \"age\": 18, \"sex\": \"female\", \"grade\": 93},{\"name\": \"测试-8\", \"age\": 50, \"sex\": \"female\", \"grade\": 71},{\"name\": \"测试-9\", \"age\": 81, \"sex\": \"male\", \"grade\": 42},{\"name\": \"测试-10\", \"age\": 26, \"sex\": \"male\", \"grade\": 25},{\"name\": \"测试-11\", \"age\": 91, \"sex\": \"female\", \"grade\": 14},{\"name\": \"测试-12\", \"age\": 6, \"sex\": \"female\", \"grade\": 54},{\"name\": \"测试-13\", \"age\": 73, \"sex\": \"male\", \"grade\": 24},{\"name\": \"测试-14\", \"age\": 51, \"sex\": \"male\", \"grade\": 14},{\"name\": \"测试-15\", \"age\": 53, \"sex\": \"female\", \"grade\": 19},{\"name\": \"测试-16\", \"age\": 3, \"sex\": \"female\", \"grade\": 48},{\"name\": \"测试-17\", \"age\": 13, \"sex\": \"male\", \"grade\": 11},{\"name\": \"测试-18\", \"age\": 40, \"sex\": \"female\", \"grade\": 97},{\"name\": \"测试-19\", \"age\": 97, \"sex\": \"male\", \"grade\": 96}])\n{\n        \"acknowledged\" : true,\n        \"insertedIds\" : [\n                ObjectId(\"5de8b35c75deb540ecfc5332\"),\n                ObjectId(\"5de8b35c75deb540ecfc5333\"),\n                ObjectId(\"5de8b35c75deb540ecfc5334\"),\n                ObjectId(\"5de8b35c75deb540ecfc5335\"),\n                ObjectId(\"5de8b35c75deb540ecfc5336\"),\n                ObjectId(\"5de8b35c75deb540ecfc5337\"),\n                ObjectId(\"5de8b35c75deb540ecfc5338\"),\n                ObjectId(\"5de8b35c75deb540ecfc5339\"),\n                ObjectId(\"5de8b35c75deb540ecfc533a\"),\n                ObjectId(\"5de8b35c75deb540ecfc533b\"),\n                ObjectId(\"5de8b35c75deb540ecfc533c\"),\n                ObjectId(\"5de8b35c75deb540ecfc533d\"),\n                ObjectId(\"5de8b35c75deb540ecfc533e\"),\n                ObjectId(\"5de8b35c75deb540ecfc533f\"),\n                ObjectId(\"5de8b35c75deb540ecfc5340\"),\n                ObjectId(\"5de8b35c75deb540ecfc5341\"),\n                ObjectId(\"5de8b35c75deb540ecfc5342\"),\n                ObjectId(\"5de8b35c75deb540ecfc5343\"),\n                ObjectId(\"5de8b35c75deb540ecfc5344\"),\n                ObjectId(\"5de8b35c75deb540ecfc5345\")\n        ]\n}\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({sex:'male'},{age:1,name:1,_id:0})  # sex 为 male false 不显示， true 显示\n{ \"name\" : \"测试-1\", \"age\" : 32 }\n{ \"name\" : \"测试-4\", \"age\" : 84 }\n{ \"name\" : \"测试-9\", \"age\" : 81 }\n{ \"name\" : \"测试-10\", \"age\" : 26 }\n{ \"name\" : \"测试-13\", \"age\" : 73 }\n{ \"name\" : \"测试-14\", \"age\" : 51 }\n{ \"name\" : \"测试-17\", \"age\" : 13 }\n{ \"name\" : \"测试-19\", \"age\" : 97 }\n> db.students.find({grade:{'$gte':60}},{_id:0})  # grade 大于等于 60 \n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({'$or':[{sex:'female',age:18},{sex:'male',age:81}]},{_id:0})  # age =18,sex  = famale 或 age = 81,sex  = male\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n> db.students.find().sort({age:-1})  #  按 age 倒序 \n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n> db.students.find({},{_id:0}).sort({age:1})  # 查询所有，不显示_id,按age 升序\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 1'}})  # 仅修改第一条数据\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 1\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 2'}},{multi:true}) # {multi:true} 多条属性\nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 19 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({},{'$inc':{age:1}},{multi:true})  # 所有人的age加1 \nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 20 })\n> db.students.find({},{_id:0})  \n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({sex:'male'},{'$inc':{grade:-1}},{multi:true}) # sex:male 的grade 减1 \nWriteResult({ \"nMatched\" : 8, \"nUpserted\" : 0, \"nModified\" : 8 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 6, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 64, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 41, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 23, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 13, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 10, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 95, \"class\" : \"class 2\" }\n```\n\n\n\n","source":"_posts/数据库/mongodb/入门补充.md","raw":"---\n\ntitle: mongodb插入数据\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n\n## 插入数据\n```\n> use test\nswitched to db test\n> db.students.insertMany(\n... [{\"name\": \"测试-0\", \"age\": 63, \"sex\": \"female\", \"grade\": 1},{\"name\": \"测试-1\", \"age\": 32, \"sex\": \"male\", \"grade\": 7},{\"name\": \"测试-2\", \"age\": 20, \"sex\": \"female\", \"grade\": 8},{\"name\": \"测试-3\", \"age\": 55, \"sex\": \"female\", \"grade\": 58},{\"name\": \"测试-4\", \"age\": 84, \"sex\": \"male\", \"grade\": 65},{\"name\": \"测试-5\", \"age\": 27, \"sex\": \"female\", \"grade\": 57},{\"name\": \"测试-6\", \"age\": 86, \"sex\": \"female\", \"grade\": 61},{\"name\": \"测试-7\", \"age\": 18, \"sex\": \"female\", \"grade\": 93},{\"name\": \"测试-8\", \"age\": 50, \"sex\": \"female\", \"grade\": 71},{\"name\": \"测试-9\", \"age\": 81, \"sex\": \"male\", \"grade\": 42},{\"name\": \"测试-10\", \"age\": 26, \"sex\": \"male\", \"grade\": 25},{\"name\": \"测试-11\", \"age\": 91, \"sex\": \"female\", \"grade\": 14},{\"name\": \"测试-12\", \"age\": 6, \"sex\": \"female\", \"grade\": 54},{\"name\": \"测试-13\", \"age\": 73, \"sex\": \"male\", \"grade\": 24},{\"name\": \"测试-14\", \"age\": 51, \"sex\": \"male\", \"grade\": 14},{\"name\": \"测试-15\", \"age\": 53, \"sex\": \"female\", \"grade\": 19},{\"name\": \"测试-16\", \"age\": 3, \"sex\": \"female\", \"grade\": 48},{\"name\": \"测试-17\", \"age\": 13, \"sex\": \"male\", \"grade\": 11},{\"name\": \"测试-18\", \"age\": 40, \"sex\": \"female\", \"grade\": 97},{\"name\": \"测试-19\", \"age\": 97, \"sex\": \"male\", \"grade\": 96}])\n{\n        \"acknowledged\" : true,\n        \"insertedIds\" : [\n                ObjectId(\"5de8b35c75deb540ecfc5332\"),\n                ObjectId(\"5de8b35c75deb540ecfc5333\"),\n                ObjectId(\"5de8b35c75deb540ecfc5334\"),\n                ObjectId(\"5de8b35c75deb540ecfc5335\"),\n                ObjectId(\"5de8b35c75deb540ecfc5336\"),\n                ObjectId(\"5de8b35c75deb540ecfc5337\"),\n                ObjectId(\"5de8b35c75deb540ecfc5338\"),\n                ObjectId(\"5de8b35c75deb540ecfc5339\"),\n                ObjectId(\"5de8b35c75deb540ecfc533a\"),\n                ObjectId(\"5de8b35c75deb540ecfc533b\"),\n                ObjectId(\"5de8b35c75deb540ecfc533c\"),\n                ObjectId(\"5de8b35c75deb540ecfc533d\"),\n                ObjectId(\"5de8b35c75deb540ecfc533e\"),\n                ObjectId(\"5de8b35c75deb540ecfc533f\"),\n                ObjectId(\"5de8b35c75deb540ecfc5340\"),\n                ObjectId(\"5de8b35c75deb540ecfc5341\"),\n                ObjectId(\"5de8b35c75deb540ecfc5342\"),\n                ObjectId(\"5de8b35c75deb540ecfc5343\"),\n                ObjectId(\"5de8b35c75deb540ecfc5344\"),\n                ObjectId(\"5de8b35c75deb540ecfc5345\")\n        ]\n}\n> db.students.find()\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({sex:'male'},{age:1,name:1,_id:0})  # sex 为 male false 不显示， true 显示\n{ \"name\" : \"测试-1\", \"age\" : 32 }\n{ \"name\" : \"测试-4\", \"age\" : 84 }\n{ \"name\" : \"测试-9\", \"age\" : 81 }\n{ \"name\" : \"测试-10\", \"age\" : 26 }\n{ \"name\" : \"测试-13\", \"age\" : 73 }\n{ \"name\" : \"测试-14\", \"age\" : 51 }\n{ \"name\" : \"测试-17\", \"age\" : 13 }\n{ \"name\" : \"测试-19\", \"age\" : 97 }\n> db.students.find({grade:{'$gte':60}},{_id:0})  # grade 大于等于 60 \n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.find({'$or':[{sex:'female',age:18},{sex:'male',age:81}]},{_id:0})  # age =18,sex  = famale 或 age = 81,sex  = male\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n> db.students.find().sort({age:-1})  #  按 age 倒序 \n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5345\"), \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533d\"), \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5338\"), \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5336\"), \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533b\"), \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533f\"), \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5332\"), \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5335\"), \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5341\"), \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5340\"), \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533a\"), \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5344\"), \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5333\"), \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5337\"), \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533c\"), \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5334\"), \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5339\"), \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5343\"), \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc533e\"), \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"_id\" : ObjectId(\"5de8b35c75deb540ecfc5342\"), \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n> db.students.find({},{_id:0}).sort({age:1})  # 查询所有，不显示_id,按age 升序\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 1'}})  # 仅修改第一条数据\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 1\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7 }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8 }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58 }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65 }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57 }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61 }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93 }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71 }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42 }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25 }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14 }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54 }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24 }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14 }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19 }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48 }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11 }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97 }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96 }\n> db.students.update({},{'$set':{class:'class 2'}},{multi:true}) # {multi:true} 多条属性\nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 19 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 63, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 32, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 20, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 55, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 84, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 27, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 86, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 18, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 50, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 81, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 26, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 91, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 6, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 73, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 51, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 53, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 3, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 13, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 40, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 97, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({},{'$inc':{age:1}},{multi:true})  # 所有人的age加1 \nWriteResult({ \"nMatched\" : 20, \"nUpserted\" : 0, \"nModified\" : 20 })\n> db.students.find({},{_id:0})  \n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 7, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 65, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 42, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 25, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 11, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 96, \"class\" : \"class 2\" }\n> db.students.update({sex:'male'},{'$inc':{grade:-1}},{multi:true}) # sex:male 的grade 减1 \nWriteResult({ \"nMatched\" : 8, \"nUpserted\" : 0, \"nModified\" : 8 })\n> db.students.find({},{_id:0})\n{ \"name\" : \"测试-0\", \"age\" : 64, \"sex\" : \"female\", \"grade\" : 1, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-1\", \"age\" : 33, \"sex\" : \"male\", \"grade\" : 6, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-2\", \"age\" : 21, \"sex\" : \"female\", \"grade\" : 8, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-3\", \"age\" : 56, \"sex\" : \"female\", \"grade\" : 58, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-4\", \"age\" : 85, \"sex\" : \"male\", \"grade\" : 64, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-5\", \"age\" : 28, \"sex\" : \"female\", \"grade\" : 57, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-6\", \"age\" : 87, \"sex\" : \"female\", \"grade\" : 61, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-7\", \"age\" : 19, \"sex\" : \"female\", \"grade\" : 93, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-8\", \"age\" : 51, \"sex\" : \"female\", \"grade\" : 71, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-9\", \"age\" : 82, \"sex\" : \"male\", \"grade\" : 41, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-10\", \"age\" : 27, \"sex\" : \"male\", \"grade\" : 24, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-11\", \"age\" : 92, \"sex\" : \"female\", \"grade\" : 14, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-12\", \"age\" : 7, \"sex\" : \"female\", \"grade\" : 54, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-13\", \"age\" : 74, \"sex\" : \"male\", \"grade\" : 23, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-14\", \"age\" : 52, \"sex\" : \"male\", \"grade\" : 13, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-15\", \"age\" : 54, \"sex\" : \"female\", \"grade\" : 19, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-16\", \"age\" : 4, \"sex\" : \"female\", \"grade\" : 48, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-17\", \"age\" : 14, \"sex\" : \"male\", \"grade\" : 10, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-18\", \"age\" : 41, \"sex\" : \"female\", \"grade\" : 97, \"class\" : \"class 2\" }\n{ \"name\" : \"测试-19\", \"age\" : 98, \"sex\" : \"male\", \"grade\" : 95, \"class\" : \"class 2\" }\n```\n\n\n\n","slug":"数据库/mongodb/入门补充","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6v007wtssa0brst442","content":"<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use test</span><br><span class=\"line\">switched to db test</span><br><span class=\"line\">&gt; db.students.insertMany(</span><br><span class=\"line\">... [&#123;&quot;name&quot;: &quot;测试-0&quot;, &quot;age&quot;: 63, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;测试-1&quot;, &quot;age&quot;: 32, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 7&#125;,&#123;&quot;name&quot;: &quot;测试-2&quot;, &quot;age&quot;: 20, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 8&#125;,&#123;&quot;name&quot;: &quot;测试-3&quot;, &quot;age&quot;: 55, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 58&#125;,&#123;&quot;name&quot;: &quot;测试-4&quot;, &quot;age&quot;: 84, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 65&#125;,&#123;&quot;name&quot;: &quot;测试-5&quot;, &quot;age&quot;: 27, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 57&#125;,&#123;&quot;name&quot;: &quot;测试-6&quot;, &quot;age&quot;: 86, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 61&#125;,&#123;&quot;name&quot;: &quot;测试-7&quot;, &quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 93&#125;,&#123;&quot;name&quot;: &quot;测试-8&quot;, &quot;age&quot;: 50, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 71&#125;,&#123;&quot;name&quot;: &quot;测试-9&quot;, &quot;age&quot;: 81, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 42&#125;,&#123;&quot;name&quot;: &quot;测试-10&quot;, &quot;age&quot;: 26, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 25&#125;,&#123;&quot;name&quot;: &quot;测试-11&quot;, &quot;age&quot;: 91, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-12&quot;, &quot;age&quot;: 6, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 54&#125;,&#123;&quot;name&quot;: &quot;测试-13&quot;, &quot;age&quot;: 73, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 24&#125;,&#123;&quot;name&quot;: &quot;测试-14&quot;, &quot;age&quot;: 51, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-15&quot;, &quot;age&quot;: 53, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 19&#125;,&#123;&quot;name&quot;: &quot;测试-16&quot;, &quot;age&quot;: 3, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 48&#125;,&#123;&quot;name&quot;: &quot;测试-17&quot;, &quot;age&quot;: 13, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 11&#125;,&#123;&quot;name&quot;: &quot;测试-18&quot;, &quot;age&quot;: 40, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 97&#125;,&#123;&quot;name&quot;: &quot;测试-19&quot;, &quot;age&quot;: 97, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 96&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedIds&quot; : [</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;sex:&apos;male&apos;&#125;,&#123;age:1,name:1,_id:0&#125;)  # sex 为 male false 不显示， true 显示</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;grade:&#123;&apos;$gte&apos;:60&#125;&#125;,&#123;_id:0&#125;)  # grade 大于等于 60 </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&apos;$or&apos;:[&#123;sex:&apos;female&apos;,age:18&#125;,&#123;sex:&apos;male&apos;,age:81&#125;]&#125;,&#123;_id:0&#125;)  # age =18,sex  = famale 或 age = 81,sex  = male</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&gt; db.students.find().sort(&#123;age:-1&#125;)  #  按 age 倒序 </span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)  # 查询所有，不显示_id,按age 升序</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 1&apos;&#125;&#125;)  # 仅修改第一条数据</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 1&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 2&apos;&#125;&#125;,&#123;multi:true&#125;) # &#123;multi:true&#125; 多条属性</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 19 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;age:1&#125;&#125;,&#123;multi:true&#125;)  # 所有人的age加1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 20 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)  </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;sex:&apos;male&apos;&#125;,&#123;&apos;$inc&apos;:&#123;grade:-1&#125;&#125;,&#123;multi:true&#125;) # sex:male 的grade 减1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 8, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 6, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 64, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 41, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 23, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 13, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 10, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 95, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use test</span><br><span class=\"line\">switched to db test</span><br><span class=\"line\">&gt; db.students.insertMany(</span><br><span class=\"line\">... [&#123;&quot;name&quot;: &quot;测试-0&quot;, &quot;age&quot;: 63, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 1&#125;,&#123;&quot;name&quot;: &quot;测试-1&quot;, &quot;age&quot;: 32, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 7&#125;,&#123;&quot;name&quot;: &quot;测试-2&quot;, &quot;age&quot;: 20, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 8&#125;,&#123;&quot;name&quot;: &quot;测试-3&quot;, &quot;age&quot;: 55, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 58&#125;,&#123;&quot;name&quot;: &quot;测试-4&quot;, &quot;age&quot;: 84, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 65&#125;,&#123;&quot;name&quot;: &quot;测试-5&quot;, &quot;age&quot;: 27, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 57&#125;,&#123;&quot;name&quot;: &quot;测试-6&quot;, &quot;age&quot;: 86, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 61&#125;,&#123;&quot;name&quot;: &quot;测试-7&quot;, &quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 93&#125;,&#123;&quot;name&quot;: &quot;测试-8&quot;, &quot;age&quot;: 50, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 71&#125;,&#123;&quot;name&quot;: &quot;测试-9&quot;, &quot;age&quot;: 81, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 42&#125;,&#123;&quot;name&quot;: &quot;测试-10&quot;, &quot;age&quot;: 26, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 25&#125;,&#123;&quot;name&quot;: &quot;测试-11&quot;, &quot;age&quot;: 91, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-12&quot;, &quot;age&quot;: 6, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 54&#125;,&#123;&quot;name&quot;: &quot;测试-13&quot;, &quot;age&quot;: 73, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 24&#125;,&#123;&quot;name&quot;: &quot;测试-14&quot;, &quot;age&quot;: 51, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 14&#125;,&#123;&quot;name&quot;: &quot;测试-15&quot;, &quot;age&quot;: 53, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 19&#125;,&#123;&quot;name&quot;: &quot;测试-16&quot;, &quot;age&quot;: 3, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 48&#125;,&#123;&quot;name&quot;: &quot;测试-17&quot;, &quot;age&quot;: 13, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 11&#125;,&#123;&quot;name&quot;: &quot;测试-18&quot;, &quot;age&quot;: 40, &quot;sex&quot;: &quot;female&quot;, &quot;grade&quot;: 97&#125;,&#123;&quot;name&quot;: &quot;测试-19&quot;, &quot;age&quot;: 97, &quot;sex&quot;: &quot;male&quot;, &quot;grade&quot;: 96&#125;])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedIds&quot; : [</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;),</span><br><span class=\"line\">                ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.students.find()</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;sex:&apos;male&apos;&#125;,&#123;age:1,name:1,_id:0&#125;)  # sex 为 male false 不显示， true 显示</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;grade:&#123;&apos;$gte&apos;:60&#125;&#125;,&#123;_id:0&#125;)  # grade 大于等于 60 </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&apos;$or&apos;:[&#123;sex:&apos;female&apos;,age:18&#125;,&#123;sex:&apos;male&apos;,age:81&#125;]&#125;,&#123;_id:0&#125;)  # age =18,sex  = famale 或 age = 81,sex  = male</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&gt; db.students.find().sort(&#123;age:-1&#125;)  #  按 age 倒序 </span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5345&quot;), &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533d&quot;), &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5338&quot;), &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5336&quot;), &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533b&quot;), &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533f&quot;), &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5332&quot;), &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5335&quot;), &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5341&quot;), &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5340&quot;), &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533a&quot;), &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5344&quot;), &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5333&quot;), &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5337&quot;), &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533c&quot;), &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5334&quot;), &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5339&quot;), &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5343&quot;), &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc533e&quot;), &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;5de8b35c75deb540ecfc5342&quot;), &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)  # 查询所有，不显示_id,按age 升序</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 1&apos;&#125;&#125;)  # 仅修改第一条数据</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 1&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97 &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96 &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$set&apos;:&#123;class:&apos;class 2&apos;&#125;&#125;,&#123;multi:true&#125;) # &#123;multi:true&#125; 多条属性</span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 19 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 63, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 32, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 20, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 55, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 84, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 86, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 50, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 81, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 26, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 91, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 6, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 73, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 53, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 3, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 13, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 40, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 97, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;&#125;,&#123;&apos;$inc&apos;:&#123;age:1&#125;&#125;,&#123;multi:true&#125;)  # 所有人的age加1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 20, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 20 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)  </span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 7, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 65, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 42, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 25, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 11, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 96, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&gt; db.students.update(&#123;sex:&apos;male&apos;&#125;,&#123;&apos;$inc&apos;:&#123;grade:-1&#125;&#125;,&#123;multi:true&#125;) # sex:male 的grade 减1 </span><br><span class=\"line\">WriteResult(&#123; &quot;nMatched&quot; : 8, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 8 &#125;)</span><br><span class=\"line\">&gt; db.students.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-0&quot;, &quot;age&quot; : 64, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 1, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-1&quot;, &quot;age&quot; : 33, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 6, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-2&quot;, &quot;age&quot; : 21, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 8, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-3&quot;, &quot;age&quot; : 56, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 58, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-4&quot;, &quot;age&quot; : 85, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 64, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-5&quot;, &quot;age&quot; : 28, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 57, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-6&quot;, &quot;age&quot; : 87, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 61, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-7&quot;, &quot;age&quot; : 19, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 93, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-8&quot;, &quot;age&quot; : 51, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 71, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-9&quot;, &quot;age&quot; : 82, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 41, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-10&quot;, &quot;age&quot; : 27, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 24, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-11&quot;, &quot;age&quot; : 92, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 14, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-12&quot;, &quot;age&quot; : 7, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 54, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-13&quot;, &quot;age&quot; : 74, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 23, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-14&quot;, &quot;age&quot; : 52, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 13, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-15&quot;, &quot;age&quot; : 54, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 19, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-16&quot;, &quot;age&quot; : 4, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 48, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-17&quot;, &quot;age&quot; : 14, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 10, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-18&quot;, &quot;age&quot; : 41, &quot;sex&quot; : &quot;female&quot;, &quot;grade&quot; : 97, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br><span class=\"line\">&#123; &quot;name&quot; : &quot;测试-19&quot;, &quot;age&quot; : 98, &quot;sex&quot; : &quot;male&quot;, &quot;grade&quot; : 95, &quot;class&quot; : &quot;class 2&quot; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"python操作安装redis","date":"2019-08-17T04:51:16.000Z","_content":"\n### 1. 准备工作\n1. 安装好 `redis` 和 `RedisPy库`\n2. `RedisDump`  可以用来做数据导入或导出\n### 2. RedisPy库\nRedisPy库 提供两个类 `redis` 和 `StrictRedis` 来实现 Redis 的命令操作。\n\n`StrictRedis` 实现了绝大部分官方命令，参数也一一对应。\n\n`redis` 是 `StrictRedis` 的子类，主要功能是用于向后兼容旧版本库里的几个方法。\n\n推荐使用 `StrictRedis` \n\n### 连接 Redis\n```\nfrom redis import StrictRedis\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(host='localhost', port=6379, db=0, password='password') \nredis.set('name', 'weilai')\nprint(redis.get('name'))\n```\n使用`ConnectionPool` 连接\n\n```\nfrom redis import StrictRedis, ConnectionPool\n\npool = ConnectionPool(host='localhost', port=6379, db=0, password=password)\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(connection_pool=pool) \n#redis.set('name', 'weilai')\nprint(redis.get('name'))\n\n```\n\n`ConnectionPool` 还支持通过 url 来构建\n\n```\nredis://[:password]@host:port/db  # tcp\nrediss://[:password]@host:port/db  # tcp +ssl \nunix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接 \n```\neg:\n```\nurl = 'redis://:password@localhost:6379/0'\npool = ConnectionPool.from_url(url)\nredis = StrictRedis(connection_pool=pool) \nprint(redis.get('name'))\n```\n## 类 改写\n```\nimport redis\n\nclass TestString:\n    def __init__(self):\n        self.r = redis.StrictRedis(host='localhost', port=6379, db=0) \n    \n    def test_set(self):\n        result = self.r.set('name2','weilai2') \n        print(result)\n        return result\n\n    def test_get(self):\n        result = self.r.get('name2')\n        print(result)\n        return result\n\n    def test_mset(self):\n        d = {\n            'name3' : 'user3',\n            'name4' : 'user4'\n        }\n        result = self.r.mset(d)\n        print(result)\n        return result\n\n    def test_mget(self):\n        l = ['name3', 'name4']\n        result = self.r.mget(l)\n        print(result)\n        return result\n\n\ndef main():\n    str_obj =  TestString()\n    str_obj.test_set()\n    str_obj.test_get()\n    str_obj.test_mset()\n    str_obj.test_mget()\n\nif __name__ == '__main__':\n    main()\n```\n\n","source":"_posts/数据库/redis/python操作redis.md","raw":"---\n\ntitle: python操作安装redis\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n### 1. 准备工作\n1. 安装好 `redis` 和 `RedisPy库`\n2. `RedisDump`  可以用来做数据导入或导出\n### 2. RedisPy库\nRedisPy库 提供两个类 `redis` 和 `StrictRedis` 来实现 Redis 的命令操作。\n\n`StrictRedis` 实现了绝大部分官方命令，参数也一一对应。\n\n`redis` 是 `StrictRedis` 的子类，主要功能是用于向后兼容旧版本库里的几个方法。\n\n推荐使用 `StrictRedis` \n\n### 连接 Redis\n```\nfrom redis import StrictRedis\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(host='localhost', port=6379, db=0, password='password') \nredis.set('name', 'weilai')\nprint(redis.get('name'))\n```\n使用`ConnectionPool` 连接\n\n```\nfrom redis import StrictRedis, ConnectionPool\n\npool = ConnectionPool(host='localhost', port=6379, db=0, password=password)\n# localhost port=6379 默认数据库 password=password\nredis = StrictRedis(connection_pool=pool) \n#redis.set('name', 'weilai')\nprint(redis.get('name'))\n\n```\n\n`ConnectionPool` 还支持通过 url 来构建\n\n```\nredis://[:password]@host:port/db  # tcp\nrediss://[:password]@host:port/db  # tcp +ssl \nunix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接 \n```\neg:\n```\nurl = 'redis://:password@localhost:6379/0'\npool = ConnectionPool.from_url(url)\nredis = StrictRedis(connection_pool=pool) \nprint(redis.get('name'))\n```\n## 类 改写\n```\nimport redis\n\nclass TestString:\n    def __init__(self):\n        self.r = redis.StrictRedis(host='localhost', port=6379, db=0) \n    \n    def test_set(self):\n        result = self.r.set('name2','weilai2') \n        print(result)\n        return result\n\n    def test_get(self):\n        result = self.r.get('name2')\n        print(result)\n        return result\n\n    def test_mset(self):\n        d = {\n            'name3' : 'user3',\n            'name4' : 'user4'\n        }\n        result = self.r.mset(d)\n        print(result)\n        return result\n\n    def test_mget(self):\n        l = ['name3', 'name4']\n        result = self.r.mget(l)\n        print(result)\n        return result\n\n\ndef main():\n    str_obj =  TestString()\n    str_obj.test_set()\n    str_obj.test_get()\n    str_obj.test_mset()\n    str_obj.test_mget()\n\nif __name__ == '__main__':\n    main()\n```\n\n","slug":"数据库/redis/python操作redis","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6w007ytssayhbvyksn","content":"<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ol>\n<li>安装好 <code>redis</code> 和 <code>RedisPy库</code></li>\n<li><code>RedisDump</code>  可以用来做数据导入或导出<h3 id=\"2-RedisPy库\"><a href=\"#2-RedisPy库\" class=\"headerlink\" title=\"2. RedisPy库\"></a>2. RedisPy库</h3>RedisPy库 提供两个类 <code>redis</code> 和 <code>StrictRedis</code> 来实现 Redis 的命令操作。</li>\n</ol>\n<p><code>StrictRedis</code> 实现了绝大部分官方命令，参数也一一对应。</p>\n<p><code>redis</code> 是 <code>StrictRedis</code> 的子类，主要功能是用于向后兼容旧版本库里的几个方法。</p>\n<p>推荐使用 <code>StrictRedis</code> </p>\n<h3 id=\"连接-Redis\"><a href=\"#连接-Redis\" class=\"headerlink\" title=\"连接 Redis\"></a>连接 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(host=&apos;localhost&apos;, port=6379, db=0, password=&apos;password&apos;) </span><br><span class=\"line\">redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p>使用<code>ConnectionPool</code> 连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis, ConnectionPool</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0, password=password)</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">#redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p><code>ConnectionPool</code> 还支持通过 url 来构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis://[:password]@host:port/db  # tcp</span><br><span class=\"line\">rediss://[:password]@host:port/db  # tcp +ssl </span><br><span class=\"line\">unix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接</span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = &apos;redis://:password@localhost:6379/0&apos;</span><br><span class=\"line\">pool = ConnectionPool.from_url(url)</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类-改写\"><a href=\"#类-改写\" class=\"headerlink\" title=\"类 改写\"></a>类 改写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis</span><br><span class=\"line\"></span><br><span class=\"line\">class TestString:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    def test_set(self):</span><br><span class=\"line\">        result = self.r.set(&apos;name2&apos;,&apos;weilai2&apos;) </span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_get(self):</span><br><span class=\"line\">        result = self.r.get(&apos;name2&apos;)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mset(self):</span><br><span class=\"line\">        d = &#123;</span><br><span class=\"line\">            &apos;name3&apos; : &apos;user3&apos;,</span><br><span class=\"line\">            &apos;name4&apos; : &apos;user4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = self.r.mset(d)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mget(self):</span><br><span class=\"line\">        l = [&apos;name3&apos;, &apos;name4&apos;]</span><br><span class=\"line\">        result = self.r.mget(l)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    str_obj =  TestString()</span><br><span class=\"line\">    str_obj.test_set()</span><br><span class=\"line\">    str_obj.test_get()</span><br><span class=\"line\">    str_obj.test_mset()</span><br><span class=\"line\">    str_obj.test_mget()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><ol>\n<li>安装好 <code>redis</code> 和 <code>RedisPy库</code></li>\n<li><code>RedisDump</code>  可以用来做数据导入或导出<h3 id=\"2-RedisPy库\"><a href=\"#2-RedisPy库\" class=\"headerlink\" title=\"2. RedisPy库\"></a>2. RedisPy库</h3>RedisPy库 提供两个类 <code>redis</code> 和 <code>StrictRedis</code> 来实现 Redis 的命令操作。</li>\n</ol>\n<p><code>StrictRedis</code> 实现了绝大部分官方命令，参数也一一对应。</p>\n<p><code>redis</code> 是 <code>StrictRedis</code> 的子类，主要功能是用于向后兼容旧版本库里的几个方法。</p>\n<p>推荐使用 <code>StrictRedis</code> </p>\n<h3 id=\"连接-Redis\"><a href=\"#连接-Redis\" class=\"headerlink\" title=\"连接 Redis\"></a>连接 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(host=&apos;localhost&apos;, port=6379, db=0, password=&apos;password&apos;) </span><br><span class=\"line\">redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p>使用<code>ConnectionPool</code> 连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from redis import StrictRedis, ConnectionPool</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0, password=password)</span><br><span class=\"line\"># localhost port=6379 默认数据库 password=password</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">#redis.set(&apos;name&apos;, &apos;weilai&apos;)</span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure>\n<p><code>ConnectionPool</code> 还支持通过 url 来构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis://[:password]@host:port/db  # tcp</span><br><span class=\"line\">rediss://[:password]@host:port/db  # tcp +ssl </span><br><span class=\"line\">unix://[:password]@/path/to/socket.sock?db=db  # UNIX socket 连接</span><br></pre></td></tr></table></figure>\n<p>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = &apos;redis://:password@localhost:6379/0&apos;</span><br><span class=\"line\">pool = ConnectionPool.from_url(url)</span><br><span class=\"line\">redis = StrictRedis(connection_pool=pool) </span><br><span class=\"line\">print(redis.get(&apos;name&apos;))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"类-改写\"><a href=\"#类-改写\" class=\"headerlink\" title=\"类 改写\"></a>类 改写</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import redis</span><br><span class=\"line\"></span><br><span class=\"line\">class TestString:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0) </span><br><span class=\"line\">    </span><br><span class=\"line\">    def test_set(self):</span><br><span class=\"line\">        result = self.r.set(&apos;name2&apos;,&apos;weilai2&apos;) </span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_get(self):</span><br><span class=\"line\">        result = self.r.get(&apos;name2&apos;)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mset(self):</span><br><span class=\"line\">        d = &#123;</span><br><span class=\"line\">            &apos;name3&apos; : &apos;user3&apos;,</span><br><span class=\"line\">            &apos;name4&apos; : &apos;user4&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = self.r.mset(d)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\">    def test_mget(self):</span><br><span class=\"line\">        l = [&apos;name3&apos;, &apos;name4&apos;]</span><br><span class=\"line\">        result = self.r.mget(l)</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        return result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    str_obj =  TestString()</span><br><span class=\"line\">    str_obj.test_set()</span><br><span class=\"line\">    str_obj.test_get()</span><br><span class=\"line\">    str_obj.test_mset()</span><br><span class=\"line\">    str_obj.test_mget()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n"},{"title":"docker安装redis","date":"2019-08-17T04:51:16.000Z","_content":"\n\n1. `docker search redis`  查询镜像\n2. `docker pull redis`  拉取官方镜像\n3. `docker images`  查看一下是否成功\n4. 启动镜像\n\n4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下\n4.2  docker启动redis\n\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n命令解释说明：\n-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。\n--name myredis  ##指定容器名称，查看和进行操作都比较方便。\n\n-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data\n-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中\n\n-d redis 表示后台启动redis\nredis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf\n--appendonly yes 开启redis 持久化 --requirepass \"passwd\"  需要密码\n\n5. `docker ps` 查看容器启动情况\n6. 连接redis的几种方式\n\n```\ndocker exec -ti myredis redis-cli  # 或者用id\n\ndocker exec -ti myredis redis-cli -a \"passwd\"\n\ndocker exec -ti myredis redis-cli -h localhost -p 6379 \ndocker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 \ndocker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379\n\n\n```\ndocker-compose.yml文件内容：\n```\nredis:\n  image: redis\n  container_name: test-redis\n  restart: always\n  ports:\n    - 6379:6379\n  volumes:\n    - /opt/data/redis:/data\n  command: redis-server --appendonly yes --requirepass \"redis\"\n```\n\n7. 客户端连接\n`docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379`\n`ctrl + p + q `后台运行\n再次进入\n`docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379`\n","source":"_posts/数据库/redis/docker安装redis.md","raw":"---\n\ntitle: docker安装redis\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n\n1. `docker search redis`  查询镜像\n2. `docker pull redis`  拉取官方镜像\n3. `docker images`  查看一下是否成功\n4. 启动镜像\n\n4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下\n4.2  docker启动redis\n\n```\n$ mkdir -p /opt/data/redis\n$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass \"passwd\" \n```\n命令解释说明：\n-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。\n--name myredis  ##指定容器名称，查看和进行操作都比较方便。\n\n-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data\n-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中\n\n-d redis 表示后台启动redis\nredis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf\n--appendonly yes 开启redis 持久化 --requirepass \"passwd\"  需要密码\n\n5. `docker ps` 查看容器启动情况\n6. 连接redis的几种方式\n\n```\ndocker exec -ti myredis redis-cli  # 或者用id\n\ndocker exec -ti myredis redis-cli -a \"passwd\"\n\ndocker exec -ti myredis redis-cli -h localhost -p 6379 \ndocker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 \ndocker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379\n\n\n```\ndocker-compose.yml文件内容：\n```\nredis:\n  image: redis\n  container_name: test-redis\n  restart: always\n  ports:\n    - 6379:6379\n  volumes:\n    - /opt/data/redis:/data\n  command: redis-server --appendonly yes --requirepass \"redis\"\n```\n\n7. 客户端连接\n`docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379`\n`ctrl + p + q `后台运行\n再次进入\n`docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379`\n","slug":"数据库/redis/docker安装redis","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p6z0083tssaaq0zbohw","content":"<ol>\n<li><code>docker search redis</code>  查询镜像</li>\n<li><code>docker pull redis</code>  拉取官方镜像</li>\n<li><code>docker images</code>  查看一下是否成功</li>\n<li>启动镜像</li>\n</ol>\n<p>4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下<br>4.2  docker启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure>\n<p>命令解释说明：<br>-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。<br>–name myredis  ##指定容器名称，查看和进行操作都比较方便。</p>\n<p>-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data<br>-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中</p>\n<p>-d redis 表示后台启动redis<br>redis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf<br>–appendonly yes 开启redis 持久化 –requirepass “passwd”  需要密码</p>\n<ol start=\"5\">\n<li><code>docker ps</code> 查看容器启动情况</li>\n<li>连接redis的几种方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -ti myredis redis-cli  # 或者用id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -a &quot;passwd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -h localhost -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis:</span><br><span class=\"line\">  image: redis</span><br><span class=\"line\">  container_name: test-redis</span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - 6379:6379</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - /opt/data/redis:/data</span><br><span class=\"line\">  command: redis-server --appendonly yes --requirepass &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>客户端连接<br><code>docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379</code><br><code>ctrl + p + q</code>后台运行<br>再次进入<br><code>docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><code>docker search redis</code>  查询镜像</li>\n<li><code>docker pull redis</code>  拉取官方镜像</li>\n<li><code>docker images</code>  查看一下是否成功</li>\n<li>启动镜像</li>\n</ol>\n<p>4.1. 下载并凭需求修改redis.conf，配置文件放在/opt/data/redis/目录下<br>4.2  docker启动redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/data/redis</span><br><span class=\"line\">$ docker run -p 6379:6379 --name myredis -v /opt/data/redis/redis.conf:/etc/redis/redis.conf -v /opt/data/redis:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes --requirepass &quot;passwd&quot;</span><br></pre></td></tr></table></figure>\n<p>命令解释说明：<br>-p 6379:6379  ##端口映射，:前表示主机部分，:后表示容器部分。<br>–name myredis  ##指定容器名称，查看和进行操作都比较方便。</p>\n<p>-v /opt/data/redis:/data ##将主机中/opt/data/redis目录下的redis挂载到容器的/data<br>-v /opt/data/redis/redis.conf:/etc/redis/redis.conf ##将主机中redis.conf配置文件挂载到容器的/etc/redis/redis.conf文件中</p>\n<p>-d redis 表示后台启动redis<br>redis-server /etc/redis/redis.conf  以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/opt/data/redis/redis.conf<br>–appendonly yes 开启redis 持久化 –requirepass “passwd”  需要密码</p>\n<ol start=\"5\">\n<li><code>docker ps</code> 查看容器启动情况</li>\n<li>连接redis的几种方式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -ti myredis redis-cli  # 或者用id</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -a &quot;passwd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -ti myredis redis-cli -h localhost -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">docker exec -ti myredis redis-cli -h 172.17.0.3 -p 6379</span><br></pre></td></tr></table></figure>\n<p>docker-compose.yml文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis:</span><br><span class=\"line\">  image: redis</span><br><span class=\"line\">  container_name: test-redis</span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - 6379:6379</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - /opt/data/redis:/data</span><br><span class=\"line\">  command: redis-server --appendonly yes --requirepass &quot;redis&quot;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>客户端连接<br><code>docker run --name myredis-cli -it redis:latest  redis-cli -h  服务器 -p 6379</code><br><code>ctrl + p + q</code>后台运行<br>再次进入<br><code>docker exec -ti myredis-cli redis-cli -h 服务器 -p 6379</code></li>\n</ol>\n"},{"title":"redis命令","date":"2019-08-17T04:51:16.000Z","_content":"### 键\n```\nredis 127.0.0.1:6379> SET weilai redis  -- 设置键\nOK\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 1\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 0  # 删除失败\n```\n","source":"_posts/数据库/redis/命令.md","raw":"---\n\ntitle: redis命令\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n### 键\n```\nredis 127.0.0.1:6379> SET weilai redis  -- 设置键\nOK\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 1\nredis 127.0.0.1:6379> DEL weilai  -- 删除键\n(integer) 0  # 删除失败\n```\n","slug":"数据库/redis/命令","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p700086tssacbcbz66d","content":"<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET weilai redis  -- 设置键</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 0  # 删除失败</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"键\"><a href=\"#键\" class=\"headerlink\" title=\"键\"></a>键</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SET weilai redis  -- 设置键</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; DEL weilai  -- 删除键</span><br><span class=\"line\">(integer) 0  # 删除失败</span><br></pre></td></tr></table></figure>\n"},{"title":"mongodb补充数据","date":"2019-08-13T02:51:16.000Z","_content":"```\nimport random\nimport json\n\na = {\n    'name' : 'weilai',\n    'age' : 18,\n    'sex': 'male',\n    'grade' : 45 \n    }\nlist_json = []\nfor i in range(0,20):\n    a['name'] = f\"测试-{i}\"\n    a['age'] = random.randint(0, 100)\n    a['sex'] =  random.choice(['male', 'female'])\n    a['grade'] = random.randint(0, 100)\n    j = json.dumps(a, ensure_ascii=False)\n    list_json.append(j)\n\nlist_json = ','.join(list_json)\nlist_json = '[' + list_json +']'\nprint(list_json)\n```","source":"_posts/数据库/mongodb/入门补充生成数据.md","raw":"---\n\ntitle: mongodb补充数据\n\ndate: 2019-8-13 10:51:16\n\ntags: mongodb\n\ncategories: 数据库\n\n---\n```\nimport random\nimport json\n\na = {\n    'name' : 'weilai',\n    'age' : 18,\n    'sex': 'male',\n    'grade' : 45 \n    }\nlist_json = []\nfor i in range(0,20):\n    a['name'] = f\"测试-{i}\"\n    a['age'] = random.randint(0, 100)\n    a['sex'] =  random.choice(['male', 'female'])\n    a['grade'] = random.randint(0, 100)\n    j = json.dumps(a, ensure_ascii=False)\n    list_json.append(j)\n\nlist_json = ','.join(list_json)\nlist_json = '[' + list_json +']'\nprint(list_json)\n```","slug":"数据库/mongodb/入门补充生成数据","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p71008atssac50454no","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">a = &#123;</span><br><span class=\"line\">    &apos;name&apos; : &apos;weilai&apos;,</span><br><span class=\"line\">    &apos;age&apos; : 18,</span><br><span class=\"line\">    &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">    &apos;grade&apos; : 45 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">list_json = []</span><br><span class=\"line\">for i in range(0,20):</span><br><span class=\"line\">    a[&apos;name&apos;] = f&quot;测试-&#123;i&#125;&quot;</span><br><span class=\"line\">    a[&apos;age&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    a[&apos;sex&apos;] =  random.choice([&apos;male&apos;, &apos;female&apos;])</span><br><span class=\"line\">    a[&apos;grade&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    j = json.dumps(a, ensure_ascii=False)</span><br><span class=\"line\">    list_json.append(j)</span><br><span class=\"line\"></span><br><span class=\"line\">list_json = &apos;,&apos;.join(list_json)</span><br><span class=\"line\">list_json = &apos;[&apos; + list_json +&apos;]&apos;</span><br><span class=\"line\">print(list_json)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">import json</span><br><span class=\"line\"></span><br><span class=\"line\">a = &#123;</span><br><span class=\"line\">    &apos;name&apos; : &apos;weilai&apos;,</span><br><span class=\"line\">    &apos;age&apos; : 18,</span><br><span class=\"line\">    &apos;sex&apos;: &apos;male&apos;,</span><br><span class=\"line\">    &apos;grade&apos; : 45 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">list_json = []</span><br><span class=\"line\">for i in range(0,20):</span><br><span class=\"line\">    a[&apos;name&apos;] = f&quot;测试-&#123;i&#125;&quot;</span><br><span class=\"line\">    a[&apos;age&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    a[&apos;sex&apos;] =  random.choice([&apos;male&apos;, &apos;female&apos;])</span><br><span class=\"line\">    a[&apos;grade&apos;] = random.randint(0, 100)</span><br><span class=\"line\">    j = json.dumps(a, ensure_ascii=False)</span><br><span class=\"line\">    list_json.append(j)</span><br><span class=\"line\"></span><br><span class=\"line\">list_json = &apos;,&apos;.join(list_json)</span><br><span class=\"line\">list_json = &apos;[&apos; + list_json +&apos;]&apos;</span><br><span class=\"line\">print(list_json)</span><br></pre></td></tr></table></figure>"},{"title":"redis数据类型","date":"2019-08-17T04:51:16.000Z","_content":"\n\n\n## redis 数据类型\n**Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。**\n\n### string\nstring类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB\n```\n# SET 设置键值  GET 获取键值\nredis 127.0.0.1:6379> SET name \"weilai\"  \nOK\nredis 127.0.0.1:6379> GET name \n\"weilai\"\n```\n\n**mset** 和 **mget** 设置（得到） 多个key的值\n```\n127.0.0.1:6379> mset date \"2019.08.30\" time \"11:00 a.m.\" weather \"sunny\"\nOK\n127.0.0.1:6379> mget  date time name  weather\n1) \"2019.08.30\"\n2) \"11:00 a.m.\"\n3) \"weilai\"\n4) \"sunny\"\n```\n\n**append**  添加字符串\n```\n127.0.0.1:6379> append name '1995'\n(integer) 10\n127.0.0.1:6379> GET name\n\"weilai1995\"\n```\n**del**  删除\n```\n127.0.0.1:6379> del name\n(integer) 1\n127.0.0.1:6379> get name\n(nil)\n```\n**incr/decr**  增加/减少 1\n```\n127.0.0.1:6379> set num 0\nOK\n127.0.0.1:6379> get num\n\"0\"\n127.0.0.1:6379> decr num\n(integer) -1\n127.0.0.1:6379> get num\n\"-1\"\n127.0.0.1:6379> incr num\n(integer) 0\n127.0.0.1:6379> get num\n\"0\"\n```\n\n### Hash\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n`HMSET, HGETALL` 命令 `user:1` 为键值\n```\nredis 127.0.0.1:6379> hmset user:1 username weilai password handsome \nOK\n127.0.0.1:6379> hmget user:1 username password\n1) \"weilai\"\n2) \"handsome\"\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"weilai\"\n3) \"password\"\n4) \"handsome\"\n127.0.0.1:6379> hmget user:1 username password port\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\nredis 127.0.0.1:6379> hget user:1 username\n\"weilai\"\n127.0.0.1:6379> HGET user:1 weilai\n(nil)\n127.0.0.1:6379> hkeys user:1  # 获取 key\n1) \"username\"\n2) \"password\"\n3) \"port\"\n127.0.0.1:6379> hvals user:1   #获取 value\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\n127.0.0.1:6379> hlen user:1\n(integer) 3\n127.0.0.1:6379> hexists user:1  password  # 是否存在 passw\n(integer) 1\n127.0.0.1:6379> hexists user:1  passwd\n(integer) 0\n hdel  user:1 password port\n(integer) 2\n127.0.0.1:6379> hgetall user:1\n1) \"username\"\n2) \"weilai\"\n127.0.0.1:6379>  hsetnx  user:1 username fisher  # 存在username 不创建\n(integer) 0\n127.0.0.1:6379>  hgetall user:1 \n1) \"username\"\n2) \"weilai\"\n# 每个 hash 可以存储 232 - 1 键值对（40多亿）\n```\n\n### List\nRedis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素`lpush`到列表的头部（左边）或者`rpush`尾部（右边）\n`lrange` 获取指定长度 （从0 开始）\n\n`lpushx/rpushx` 只能是 key 存在，且仅能添加一个\n\n`lpop/rpop` 移除最左/右 边 的一个元素\n\n`ltrim`  截取一段长度 \n\n`llen`  列表元素个数\n\n`lrem weilai 0 python` 删除所有的'python'\n```\nredis 127.0.0.1:6379> lpush weilai redis\n(integer) 1\nredis 127.0.0.1:6379> lpush weilai mongodb\n(integer) 2\nredis 127.0.0.1:6379> rpush weilai rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange weilai 0 10\n1) \"mongodb\"\n2) \"redis\"\n3) \"rabitmq\"\"\n127.0.0.1:6379> lrange weilai 0 1\n1) \"mongodb\"\n2) \"redis\"\n127.0.0.1:6379> llen weilai\n(integer) 3\n127.0.0.1:6379> lpush weilai python java c++ shell\n(integer) 8\n127.0.0.1:6379> lrange weilai 0 10     \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"python\"\n5) \"mongodb\"\n6) \"redis\"\n7) \"rabitmq\"\n127.0.0.1:6379> lrem weilai 0 python  # 删除所有的python 元素\n(integer) 1\n127.0.0.1:6379> lrange weilai 0 10  \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"mongodb\"\n5) \"redis\"\n6) \"rabitmq\"\n127.0.0.1:6379> ltrim weilai 2 4\nOK\n127.0.0.1:6379> lrange weilai 0 10\n1) \"java\"\n2) \"mongodb\"\n3) \"redis\"\n\n# 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)\n```\n\n### Set\nRedis的Set是string类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)\n\n`sadd/srem`  添加/删除元素\n`sismember`  判断是否为set的一个元素\n`smembers`   返回该集合的所有成员\n`sdiff`      返回一个集合与其它集合的差异\n`sinter`     返回几个集合的交集\n`sunion`     返回几个集合的并集\n\n\n```\n127.0.0.1:6379> sadd zoo cat dog\n(integer) 2\n127.0.0.1:6379> sadd zoo cat dog fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cat\"\n127.0.0.1:6379> srem zoo cat\n(integer) 1\n127.0.0.1:6379> srem zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n127.0.0.1:6379> sadd zoo1 dog cow\n(integer) 2\n127.0.0.1:6379> smembers zoo1\n1) \"cow\"\n2) \"dog\"\n127.0.0.1:6379> sdiff zoo zoo1\n1) \"fisher\"\n127.0.0.1:6379> sdiff zoo1 zoo\n1) \"cow\"\n127.0.0.1:6379> sinter zoo1 zoo\n1) \"dog\"\n127.0.0.1:6379> sunion zoo1 zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cow\"\n# 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\n\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)\n```\n#### zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复\n\n```\nredis 127.0.0.1:6379> zadd weilai 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE weilai 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```\n\n\n","source":"_posts/数据库/redis/数据类型.md","raw":"---\n\ntitle: redis数据类型\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n\n\n\n## redis 数据类型\n**Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。**\n\n### string\nstring类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB\n```\n# SET 设置键值  GET 获取键值\nredis 127.0.0.1:6379> SET name \"weilai\"  \nOK\nredis 127.0.0.1:6379> GET name \n\"weilai\"\n```\n\n**mset** 和 **mget** 设置（得到） 多个key的值\n```\n127.0.0.1:6379> mset date \"2019.08.30\" time \"11:00 a.m.\" weather \"sunny\"\nOK\n127.0.0.1:6379> mget  date time name  weather\n1) \"2019.08.30\"\n2) \"11:00 a.m.\"\n3) \"weilai\"\n4) \"sunny\"\n```\n\n**append**  添加字符串\n```\n127.0.0.1:6379> append name '1995'\n(integer) 10\n127.0.0.1:6379> GET name\n\"weilai1995\"\n```\n**del**  删除\n```\n127.0.0.1:6379> del name\n(integer) 1\n127.0.0.1:6379> get name\n(nil)\n```\n**incr/decr**  增加/减少 1\n```\n127.0.0.1:6379> set num 0\nOK\n127.0.0.1:6379> get num\n\"0\"\n127.0.0.1:6379> decr num\n(integer) -1\n127.0.0.1:6379> get num\n\"-1\"\n127.0.0.1:6379> incr num\n(integer) 0\n127.0.0.1:6379> get num\n\"0\"\n```\n\n### Hash\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n`HMSET, HGETALL` 命令 `user:1` 为键值\n```\nredis 127.0.0.1:6379> hmset user:1 username weilai password handsome \nOK\n127.0.0.1:6379> hmget user:1 username password\n1) \"weilai\"\n2) \"handsome\"\nredis 127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"weilai\"\n3) \"password\"\n4) \"handsome\"\n127.0.0.1:6379> hmget user:1 username password port\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\nredis 127.0.0.1:6379> hget user:1 username\n\"weilai\"\n127.0.0.1:6379> HGET user:1 weilai\n(nil)\n127.0.0.1:6379> hkeys user:1  # 获取 key\n1) \"username\"\n2) \"password\"\n3) \"port\"\n127.0.0.1:6379> hvals user:1   #获取 value\n1) \"weilai\"\n2) \"handsome\"\n3) \"22\"\n127.0.0.1:6379> hlen user:1\n(integer) 3\n127.0.0.1:6379> hexists user:1  password  # 是否存在 passw\n(integer) 1\n127.0.0.1:6379> hexists user:1  passwd\n(integer) 0\n hdel  user:1 password port\n(integer) 2\n127.0.0.1:6379> hgetall user:1\n1) \"username\"\n2) \"weilai\"\n127.0.0.1:6379>  hsetnx  user:1 username fisher  # 存在username 不创建\n(integer) 0\n127.0.0.1:6379>  hgetall user:1 \n1) \"username\"\n2) \"weilai\"\n# 每个 hash 可以存储 232 - 1 键值对（40多亿）\n```\n\n### List\nRedis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素`lpush`到列表的头部（左边）或者`rpush`尾部（右边）\n`lrange` 获取指定长度 （从0 开始）\n\n`lpushx/rpushx` 只能是 key 存在，且仅能添加一个\n\n`lpop/rpop` 移除最左/右 边 的一个元素\n\n`ltrim`  截取一段长度 \n\n`llen`  列表元素个数\n\n`lrem weilai 0 python` 删除所有的'python'\n```\nredis 127.0.0.1:6379> lpush weilai redis\n(integer) 1\nredis 127.0.0.1:6379> lpush weilai mongodb\n(integer) 2\nredis 127.0.0.1:6379> rpush weilai rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange weilai 0 10\n1) \"mongodb\"\n2) \"redis\"\n3) \"rabitmq\"\"\n127.0.0.1:6379> lrange weilai 0 1\n1) \"mongodb\"\n2) \"redis\"\n127.0.0.1:6379> llen weilai\n(integer) 3\n127.0.0.1:6379> lpush weilai python java c++ shell\n(integer) 8\n127.0.0.1:6379> lrange weilai 0 10     \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"python\"\n5) \"mongodb\"\n6) \"redis\"\n7) \"rabitmq\"\n127.0.0.1:6379> lrem weilai 0 python  # 删除所有的python 元素\n(integer) 1\n127.0.0.1:6379> lrange weilai 0 10  \n1) \"shell\"\n2) \"c++\"\n3) \"java\"\n4) \"mongodb\"\n5) \"redis\"\n6) \"rabitmq\"\n127.0.0.1:6379> ltrim weilai 2 4\nOK\n127.0.0.1:6379> lrange weilai 0 10\n1) \"java\"\n2) \"mongodb\"\n3) \"redis\"\n\n# 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)\n```\n\n### Set\nRedis的Set是string类型的无序集合。\n\n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)\n\n`sadd/srem`  添加/删除元素\n`sismember`  判断是否为set的一个元素\n`smembers`   返回该集合的所有成员\n`sdiff`      返回一个集合与其它集合的差异\n`sinter`     返回几个集合的交集\n`sunion`     返回几个集合的并集\n\n\n```\n127.0.0.1:6379> sadd zoo cat dog\n(integer) 2\n127.0.0.1:6379> sadd zoo cat dog fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cat\"\n127.0.0.1:6379> srem zoo cat\n(integer) 1\n127.0.0.1:6379> srem zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo cat\n(integer) 0\n127.0.0.1:6379> sismember zoo fisher\n(integer) 1\n127.0.0.1:6379> smembers zoo\n1) \"fisher\"\n2) \"dog\"\n127.0.0.1:6379> sadd zoo1 dog cow\n(integer) 2\n127.0.0.1:6379> smembers zoo1\n1) \"cow\"\n2) \"dog\"\n127.0.0.1:6379> sdiff zoo zoo1\n1) \"fisher\"\n127.0.0.1:6379> sdiff zoo1 zoo\n1) \"cow\"\n127.0.0.1:6379> sinter zoo1 zoo\n1) \"dog\"\n127.0.0.1:6379> sunion zoo1 zoo\n1) \"fisher\"\n2) \"dog\"\n3) \"cow\"\n# 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。\n\n集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)\n```\n#### zset(sorted set：有序集合)\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。\n\nzset的成员是唯一的,但分数(score)却可以重复\n\n```\nredis 127.0.0.1:6379> zadd weilai 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE weilai 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```\n\n\n","slug":"数据库/redis/数据类型","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p72008dtssaei519cs9","content":"<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><p><strong>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</strong></p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SET 设置键值  GET 获取键值</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;weilai&quot;  </span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET name </span><br><span class=\"line\">&quot;weilai&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>mset</strong> 和 <strong>mget</strong> 设置（得到） 多个key的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset date &quot;2019.08.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget  date time name  weather</span><br><span class=\"line\">1) &quot;2019.08.30&quot;</span><br><span class=\"line\">2) &quot;11:00 a.m.&quot;</span><br><span class=\"line\">3) &quot;weilai&quot;</span><br><span class=\"line\">4) &quot;sunny&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>append</strong>  添加字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append name &apos;1995&apos;</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; GET name</span><br><span class=\"line\">&quot;weilai1995&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>del</strong>  删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p><strong>incr/decr</strong>  增加/减少 1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set num 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; decr num</span><br><span class=\"line\">(integer) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><code>HMSET, HGETALL</code> 命令 <code>user:1</code> 为键值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; hmset user:1 username weilai password handsome </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGETALL user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">3) &quot;password&quot;</span><br><span class=\"line\">4) &quot;handsome&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password port</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; hget user:1 username</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user:1 weilai</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys user:1  # 获取 key</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;password&quot;</span><br><span class=\"line\">3) &quot;port&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user:1   #获取 value</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen user:1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  password  # 是否存在 passw</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  passwd</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"> hdel  user:1 password port</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;  hsetnx  user:1 username fisher  # 存在username 不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;  hgetall user:1 </span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\"># 每个 hash 可以存储 232 - 1 键值对（40多亿）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素<code>lpush</code>到列表的头部（左边）或者<code>rpush</code>尾部（右边）<br><code>lrange</code> 获取指定长度 （从0 开始）</p>\n<p><code>lpushx/rpushx</code> 只能是 key 存在，且仅能添加一个</p>\n<p><code>lpop/rpop</code> 移除最左/右 边 的一个元素</p>\n<p><code>ltrim</code>  截取一段长度 </p>\n<p><code>llen</code>  列表元素个数</p>\n<p><code>lrem weilai 0 python</code> 删除所有的’python’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; rpush weilai rabitmq</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 1</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; llen weilai</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush weilai python java c++ shell</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10     </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;python&quot;</span><br><span class=\"line\">5) &quot;mongodb&quot;</span><br><span class=\"line\">6) &quot;redis&quot;</span><br><span class=\"line\">7) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem weilai 0 python  # 删除所有的python 元素</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10  </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;mongodb&quot;</span><br><span class=\"line\">5) &quot;redis&quot;</span><br><span class=\"line\">6) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim weilai 2 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;java&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Redis的Set是string类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</p>\n<p><code>sadd/srem</code>  添加/删除元素<br><code>sismember</code>  判断是否为set的一个元素<br><code>smembers</code>   返回该集合的所有成员<br><code>sdiff</code>      返回一个集合与其它集合的差异<br><code>sinter</code>     返回几个集合的交集<br><code>sunion</code>     返回几个集合的并集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cat&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo1 dog cow</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo1</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo zoo1</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo1 zoo</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter zoo1 zoo</span><br><span class=\"line\">1) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion zoo1 zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cow&quot;</span><br><span class=\"line\"># 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。</span><br><span class=\"line\"></span><br><span class=\"line\">集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</span><br></pre></td></tr></table></figure>\n<h4 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE weilai 0 1000</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><p><strong>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</strong></p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><p>string类型是Redis最基本的数据类型，二进制安全的。redis的string可以包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># SET 设置键值  GET 获取键值</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;weilai&quot;  </span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET name </span><br><span class=\"line\">&quot;weilai&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>mset</strong> 和 <strong>mget</strong> 设置（得到） 多个key的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset date &quot;2019.08.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget  date time name  weather</span><br><span class=\"line\">1) &quot;2019.08.30&quot;</span><br><span class=\"line\">2) &quot;11:00 a.m.&quot;</span><br><span class=\"line\">3) &quot;weilai&quot;</span><br><span class=\"line\">4) &quot;sunny&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>append</strong>  添加字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; append name &apos;1995&apos;</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; GET name</span><br><span class=\"line\">&quot;weilai1995&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>del</strong>  删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del name</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p><strong>incr/decr</strong>  增加/减少 1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set num 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; decr num</span><br><span class=\"line\">(integer) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;0&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><code>HMSET, HGETALL</code> 命令 <code>user:1</code> 为键值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; hmset user:1 username weilai password handsome </span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; HGETALL user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">3) &quot;password&quot;</span><br><span class=\"line\">4) &quot;handsome&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:1 username password port</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; hget user:1 username</span><br><span class=\"line\">&quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; HGET user:1 weilai</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys user:1  # 获取 key</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;password&quot;</span><br><span class=\"line\">3) &quot;port&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user:1   #获取 value</span><br><span class=\"line\">1) &quot;weilai&quot;</span><br><span class=\"line\">2) &quot;handsome&quot;</span><br><span class=\"line\">3) &quot;22&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen user:1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  password  # 是否存在 passw</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user:1  passwd</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\"> hdel  user:1 password port</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;  hsetnx  user:1 username fisher  # 存在username 不创建</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt;  hgetall user:1 </span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;weilai&quot;</span><br><span class=\"line\"># 每个 hash 可以存储 232 - 1 键值对（40多亿）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素<code>lpush</code>到列表的头部（左边）或者<code>rpush</code>尾部（右边）<br><code>lrange</code> 获取指定长度 （从0 开始）</p>\n<p><code>lpushx/rpushx</code> 只能是 key 存在，且仅能添加一个</p>\n<p><code>lpop/rpop</code> 移除最左/右 边 的一个元素</p>\n<p><code>ltrim</code>  截取一段长度 </p>\n<p><code>llen</code>  列表元素个数</p>\n<p><code>lrem weilai 0 python</code> 删除所有的’python’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lpush weilai mongodb</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; rpush weilai rabitmq</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 1</span><br><span class=\"line\">1) &quot;mongodb&quot;</span><br><span class=\"line\">2) &quot;redis&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; llen weilai</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush weilai python java c++ shell</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10     </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;python&quot;</span><br><span class=\"line\">5) &quot;mongodb&quot;</span><br><span class=\"line\">6) &quot;redis&quot;</span><br><span class=\"line\">7) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem weilai 0 python  # 删除所有的python 元素</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10  </span><br><span class=\"line\">1) &quot;shell&quot;</span><br><span class=\"line\">2) &quot;c++&quot;</span><br><span class=\"line\">3) &quot;java&quot;</span><br><span class=\"line\">4) &quot;mongodb&quot;</span><br><span class=\"line\">5) &quot;redis&quot;</span><br><span class=\"line\">6) &quot;rabitmq&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim weilai 2 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange weilai 0 10</span><br><span class=\"line\">1) &quot;java&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Redis的Set是string类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</p>\n<p><code>sadd/srem</code>  添加/删除元素<br><code>sismember</code>  判断是否为set的一个元素<br><code>smembers</code>   返回该集合的所有成员<br><code>sdiff</code>      返回一个集合与其它集合的差异<br><code>sinter</code>     返回几个集合的交集<br><code>sunion</code>     返回几个集合的并集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo cat dog fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cat&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; srem zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo cat</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember zoo fisher</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd zoo1 dog cow</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers zoo1</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo zoo1</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff zoo1 zoo</span><br><span class=\"line\">1) &quot;cow&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter zoo1 zoo</span><br><span class=\"line\">1) &quot;dog&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion zoo1 zoo</span><br><span class=\"line\">1) &quot;fisher&quot;</span><br><span class=\"line\">2) &quot;dog&quot;</span><br><span class=\"line\">3) &quot;cow&quot;</span><br><span class=\"line\"># 添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误。</span><br><span class=\"line\"></span><br><span class=\"line\">集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)</span><br></pre></td></tr></table></figure>\n<h4 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset的成员是唯一的,但分数(score)却可以重复</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 redis</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 mongodb</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 0 rabitmq</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; zadd weilai 10 redis  --  添加元素到集合，元素在集合中存在则更新对应score</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE weilai 0 1000</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;redis&quot;</span><br><span class=\"line\">2) &quot;mongodb&quot;</span><br><span class=\"line\">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"redis简介与安装","date":"2019-08-17T04:51:16.000Z","_content":"## 简介\n**Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。**\n1. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n3. Redis支持数据的备份，即master-slave模式的数据备份\n\nRedis运行在内存中但是可以持久化到磁盘(性能极高)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.\n\n**主要用途** ： 数据库，缓存和消息中间件\n\n## 安装\n```\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\ntar xzf redis-5.0.5.tar.gz\ncd redis-5.0.5\nmake \n\n\n./redis-server  # 启动redis服务\n./redis-server redis.conf  # 依据配置，启动redis服务\n\n./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互\n\n# eg:\n$ ./redis-cli\nredis> ping\nPONG  # 以上操作代表 redis已经安装完成。\n\n# 在远程服务器上执行命令\nredis-cli -h host -p port -a password\n\neg:\n$redis-cli -h 127.0.0.1 -p 6379 -a \"mypass\"\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n\n```\n\n### 配置  redis.conf\n\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令(**CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE**)来修改配置\n\neg：\n```\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\nOK\nredis 127.0.0.1:6379> CONFIG GET loglevel\n\n1) \"loglevel\"\n2) \"notice\"\n```\n具体配置信息参考文档\n\n\n\n\n\n\n","source":"_posts/数据库/redis/简介与安装.md","raw":"---\n\ntitle: redis简介与安装\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n## 简介\n**Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。**\n1. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n3. Redis支持数据的备份，即master-slave模式的数据备份\n\nRedis运行在内存中但是可以持久化到磁盘(性能极高)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.\n\n**主要用途** ： 数据库，缓存和消息中间件\n\n## 安装\n```\nwget http://download.redis.io/releases/redis-5.0.5.tar.gz\ntar xzf redis-5.0.5.tar.gz\ncd redis-5.0.5\nmake \n\n\n./redis-server  # 启动redis服务\n./redis-server redis.conf  # 依据配置，启动redis服务\n\n./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互\n\n# eg:\n$ ./redis-cli\nredis> ping\nPONG  # 以上操作代表 redis已经安装完成。\n\n# 在远程服务器上执行命令\nredis-cli -h host -p port -a password\n\neg:\n$redis-cli -h 127.0.0.1 -p 6379 -a \"mypass\"\nredis 127.0.0.1:6379>\nredis 127.0.0.1:6379> PING\n\nPONG\n\n```\n\n### 配置  redis.conf\n\n可以通过修改 redis.conf 文件或使用 CONFIG set 命令(**CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE**)来修改配置\n\neg：\n```\nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"\nOK\nredis 127.0.0.1:6379> CONFIG GET loglevel\n\n1) \"loglevel\"\n2) \"notice\"\n```\n具体配置信息参考文档\n\n\n\n\n\n\n","slug":"数据库/redis/简介与安装","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p73008htssaumgiyxkb","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</strong></p>\n<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份</li>\n</ol>\n<p>Redis运行在内存中但是可以持久化到磁盘(性能极高)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.</p>\n<p><strong>主要用途</strong> ： 数据库，缓存和消息中间件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class=\"line\">tar xzf redis-5.0.5.tar.gz</span><br><span class=\"line\">cd redis-5.0.5</span><br><span class=\"line\">make </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./redis-server  # 启动redis服务</span><br><span class=\"line\">./redis-server redis.conf  # 依据配置，启动redis服务</span><br><span class=\"line\"></span><br><span class=\"line\">./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互</span><br><span class=\"line\"></span><br><span class=\"line\"># eg:</span><br><span class=\"line\">$ ./redis-cli</span><br><span class=\"line\">redis&gt; ping</span><br><span class=\"line\">PONG  # 以上操作代表 redis已经安装完成。</span><br><span class=\"line\"></span><br><span class=\"line\"># 在远程服务器上执行命令</span><br><span class=\"line\">redis-cli -h host -p port -a password</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PING</span><br><span class=\"line\"></span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-redis-conf\"><a href=\"#配置-redis-conf\" class=\"headerlink\" title=\"配置  redis.conf\"></a>配置  redis.conf</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令(<strong>CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</strong>)来修改配置</p>\n<p>eg：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure></p>\n<p>具体配置信息参考文档</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</strong></p>\n<ol>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份</li>\n</ol>\n<p>Redis运行在内存中但是可以持久化到磁盘(性能极高)，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存.</p>\n<p><strong>主要用途</strong> ： 数据库，缓存和消息中间件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class=\"line\">tar xzf redis-5.0.5.tar.gz</span><br><span class=\"line\">cd redis-5.0.5</span><br><span class=\"line\">make </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./redis-server  # 启动redis服务</span><br><span class=\"line\">./redis-server redis.conf  # 依据配置，启动redis服务</span><br><span class=\"line\"></span><br><span class=\"line\">./redis-cli  # 使用测试客户端程序redis-cli和redis服务交互</span><br><span class=\"line\"></span><br><span class=\"line\"># eg:</span><br><span class=\"line\">$ ./redis-cli</span><br><span class=\"line\">redis&gt; ping</span><br><span class=\"line\">PONG  # 以上操作代表 redis已经安装完成。</span><br><span class=\"line\"></span><br><span class=\"line\"># 在远程服务器上执行命令</span><br><span class=\"line\">redis-cli -h host -p port -a password</span><br><span class=\"line\"></span><br><span class=\"line\">eg:</span><br><span class=\"line\">$redis-cli -h 127.0.0.1 -p 6379 -a &quot;mypass&quot;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt;</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PING</span><br><span class=\"line\"></span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-redis-conf\"><a href=\"#配置-redis-conf\" class=\"headerlink\" title=\"配置  redis.conf\"></a>配置  redis.conf</h3><p>可以通过修改 redis.conf 文件或使用 CONFIG set 命令(<strong>CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</strong>)来修改配置</p>\n<p>eg：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;loglevel&quot;</span><br><span class=\"line\">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure></p>\n<p>具体配置信息参考文档</p>\n"},{"title":"redis安全性能测试客户端连接管道技术","date":"2019-08-17T04:51:16.000Z","_content":"### 安全\n\n查看是否设置密码\n```\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"\"\n\n# 默认没有设置\n```\n\n设置密码\n```\n127.0.0.1:6379> CONFIG set requirepass \"mypassword\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"mypassword\"\n```\n设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。\n\n```\n127.0.0.1:6379> AUTH \"mypassword\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n```\n### 性能测试\nRedis 性能测试是通过同时执行多个命令实现的\n`redis-benchmark [option] [option value]`\n\n```\nredis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q\n\nSET: 146198.83 requests per second\nLPUSH: 145560.41 requests per second\n```\n\n### 客户端连接\nRedis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：\n\n1. 首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。\n2. 然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法\n3. 然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送\n\n```\nconfig get maxclients\n\n1) \"maxclients\"\n2) \"10000\"\n```\n\n启动时设置最大连接数\n```\nredis-server --maxclients 100000\n```\n### 管道技术\n\nRedis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n\n客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\n服务端处理命令，并将结果返回给客户端。\n\nRedis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\n```\n$(echo -en \"PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n\"; sleep 10) | nc localhost 6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3\n```\n","source":"_posts/数据库/redis/安全性能测试客户端连接管道技术.md","raw":"---\n\ntitle: redis安全性能测试客户端连接管道技术\n\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n### 安全\n\n查看是否设置密码\n```\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"\"\n\n# 默认没有设置\n```\n\n设置密码\n```\n127.0.0.1:6379> CONFIG set requirepass \"mypassword\"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) \"requirepass\"\n2) \"mypassword\"\n```\n设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。\n\n```\n127.0.0.1:6379> AUTH \"mypassword\"\nOK\n127.0.0.1:6379> SET mykey \"Test value\"\nOK\n127.0.0.1:6379> GET mykey\n\"Test value\"\n```\n### 性能测试\nRedis 性能测试是通过同时执行多个命令实现的\n`redis-benchmark [option] [option value]`\n\n```\nredis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q\n\nSET: 146198.83 requests per second\nLPUSH: 145560.41 requests per second\n```\n\n### 客户端连接\nRedis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：\n\n1. 首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。\n2. 然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法\n3. 然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送\n\n```\nconfig get maxclients\n\n1) \"maxclients\"\n2) \"10000\"\n```\n\n启动时设置最大连接数\n```\nredis-server --maxclients 100000\n```\n### 管道技术\n\nRedis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：\n\n客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。\n服务端处理命令，并将结果返回给客户端。\n\nRedis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。\n```\n$(echo -en \"PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n\"; sleep 10) | nc localhost 6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3\n```\n","slug":"数据库/redis/安全性能测试客户端连接管道技术","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p75008ktssafohvfgkt","content":"<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>查看是否设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认没有设置</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG set requirepass &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;mypassword&quot;</span><br></pre></td></tr></table></figure></p>\n<p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET mykey</span><br><span class=\"line\">&quot;Test value&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>Redis 性能测试是通过同时执行多个命令实现的<br><code>redis-benchmark [option] [option value]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q</span><br><span class=\"line\"></span><br><span class=\"line\">SET: 146198.83 requests per second</span><br><span class=\"line\">LPUSH: 145560.41 requests per second</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p>Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：</p>\n<ol>\n<li>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。</li>\n<li>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法</li>\n<li>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get maxclients</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;maxclients&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n<p>启动时设置最大连接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"管道技术\"><a href=\"#管道技术\" class=\"headerlink\" title=\"管道技术\"></a>管道技术</h3><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>\n<p>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。<br>服务端处理命令，并将结果返回给客户端。</p>\n<p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(echo -en &quot;PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379</span><br><span class=\"line\"></span><br><span class=\"line\">+PONG</span><br><span class=\"line\">+OK</span><br><span class=\"line\">redis</span><br><span class=\"line\">:1</span><br><span class=\"line\">:2</span><br><span class=\"line\">:3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><p>查看是否设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认没有设置</span><br></pre></td></tr></table></figure></p>\n<p>设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG set requirepass &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;mypassword&quot;</span><br></pre></td></tr></table></figure></p>\n<p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH &quot;mypassword&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET mykey</span><br><span class=\"line\">&quot;Test value&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h3><p>Redis 性能测试是通过同时执行多个命令实现的<br><code>redis-benchmark [option] [option value]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q</span><br><span class=\"line\"></span><br><span class=\"line\">SET: 146198.83 requests per second</span><br><span class=\"line\">LPUSH: 145560.41 requests per second</span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p>Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，当一个连接建立后，Redis 内部会进行以下一些操作：</p>\n<ol>\n<li>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。</li>\n<li>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法</li>\n<li>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get maxclients</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;maxclients&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\n<p>启动时设置最大连接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"管道技术\"><a href=\"#管道技术\" class=\"headerlink\" title=\"管道技术\"></a>管道技术</h3><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>\n<p>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。<br>服务端处理命令，并将结果返回给客户端。</p>\n<p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(echo -en &quot;PING\\r\\n SET MYkey redis\\r\\nGET MYkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379</span><br><span class=\"line\"></span><br><span class=\"line\">+PONG</span><br><span class=\"line\">+OK</span><br><span class=\"line\">redis</span><br><span class=\"line\">:1</span><br><span class=\"line\">:2</span><br><span class=\"line\">:3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"数据备份与恢复","date":"2019-08-17T04:51:16.000Z","_content":"### 备份\nRedis SAVE 命令用于创建当前数据库的备份\n```\nredis 127.0.0.1:6379> SAVE \nOK\n```\n该命令将在 redis 安装目录中创建dump.rdb文件\n\n**BGSAVE**后台执行\n```\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n```\n\n### 恢复\n将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务\n```\nredis 127.0.0.1:6379> CONFIG GET dir  -- CONFIG 命令获取 redis目录\n1) \"dir\"\n2) \"/usr/local/redis/bin\"\n```\n\n\n","source":"_posts/数据库/redis/数据备份与恢复.md","raw":"---\n\ntitle: 数据备份与恢复\ndate: 2019-8-17 12:51:16\n\ntags: redis\n\ncategories: 数据库\n\n---\n### 备份\nRedis SAVE 命令用于创建当前数据库的备份\n```\nredis 127.0.0.1:6379> SAVE \nOK\n```\n该命令将在 redis 安装目录中创建dump.rdb文件\n\n**BGSAVE**后台执行\n```\n127.0.0.1:6379> BGSAVE\n\nBackground saving started\n```\n\n### 恢复\n将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务\n```\nredis 127.0.0.1:6379> CONFIG GET dir  -- CONFIG 命令获取 redis目录\n1) \"dir\"\n2) \"/usr/local/redis/bin\"\n```\n\n\n","slug":"数据库/redis/数据备份与恢复","published":1,"updated":"2020-04-01T09:23:43.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p76008otssa3bp036ut","content":"<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>Redis SAVE 命令用于创建当前数据库的备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SAVE </span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在 redis 安装目录中创建dump.rdb文件</p>\n<p><strong>BGSAVE</strong>后台执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\"></span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET dir  -- CONFIG 命令获取 redis目录</span><br><span class=\"line\">1) &quot;dir&quot;</span><br><span class=\"line\">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>Redis SAVE 命令用于创建当前数据库的备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SAVE </span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure></p>\n<p>该命令将在 redis 安装目录中创建dump.rdb文件</p>\n<p><strong>BGSAVE</strong>后台执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\"></span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET dir  -- CONFIG 命令获取 redis目录</span><br><span class=\"line\">1) &quot;dir&quot;</span><br><span class=\"line\">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"staticmethod和classmethod","date":"2019-10-10T03:05:31.000Z","_content":"一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。\n\n而使用 `@staticmethod`或 `@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n```\nclass A:\n    bar = 1\n    def foo(self):\n        print 'foo'\n \n    @staticmethod\n    def static_foo():\n        print 'static_foo'\n        print A.bar\n \n    @classmethod\n    def class_foo(cls):\n        print 'class_foo'\n        print cls.bar\n        cls().foo()\n \nA.static_foo()\nA.class_foo()\n\n```\n如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。\n\n而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码\n\n\n这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。\n\n这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：\n\n1. 方法可以判断出自己是通过基类被调用，还是通过某个子类被调用\n2. 通过子类调用时，方法可以返回子类的实例而非基类的实例\n3. 通过子类调用时，方法可以调用子类的其他classmethod\n","source":"_posts/python练习/面向对象/@staticmethod和@classmethod.md","raw":"---\ntitle: staticmethod和classmethod\ndate: 2019-10-10 11:05:31\ntags:\ncategories: python练习\n---\n一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。\n\n而使用 `@staticmethod`或 `@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n```\nclass A:\n    bar = 1\n    def foo(self):\n        print 'foo'\n \n    @staticmethod\n    def static_foo():\n        print 'static_foo'\n        print A.bar\n \n    @classmethod\n    def class_foo(cls):\n        print 'class_foo'\n        print cls.bar\n        cls().foo()\n \nA.static_foo()\nA.class_foo()\n\n```\n如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。\n\n而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码\n\n\n这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。\n\n这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：\n\n1. 方法可以判断出自己是通过基类被调用，还是通过某个子类被调用\n2. 通过子类调用时，方法可以返回子类的实例而非基类的实例\n3. 通过子类调用时，方法可以调用子类的其他classmethod\n","slug":"python练习/面向对象/@staticmethod和@classmethod","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8i0091tssah6s6t9g4","content":"<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p>\n<p>而使用 <code>@staticmethod</code>或 <code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    bar = 1</span><br><span class=\"line\">    def foo(self):</span><br><span class=\"line\">        print &apos;foo&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def static_foo():</span><br><span class=\"line\">        print &apos;static_foo&apos;</span><br><span class=\"line\">        print A.bar</span><br><span class=\"line\"> </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def class_foo(cls):</span><br><span class=\"line\">        print &apos;class_foo&apos;</span><br><span class=\"line\">        print cls.bar</span><br><span class=\"line\">        cls().foo()</span><br><span class=\"line\"> </span><br><span class=\"line\">A.static_foo()</span><br><span class=\"line\">A.class_foo()</span><br></pre></td></tr></table></figure>\n<p>如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。</p>\n<p>而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码</p>\n<p>这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。</p>\n<p>这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：</p>\n<ol>\n<li>方法可以判断出自己是通过基类被调用，还是通过某个子类被调用</li>\n<li>通过子类调用时，方法可以返回子类的实例而非基类的实例</li>\n<li>通过子类调用时，方法可以调用子类的其他classmethod</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。</p>\n<p>而使用 <code>@staticmethod</code>或 <code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    bar = 1</span><br><span class=\"line\">    def foo(self):</span><br><span class=\"line\">        print &apos;foo&apos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    def static_foo():</span><br><span class=\"line\">        print &apos;static_foo&apos;</span><br><span class=\"line\">        print A.bar</span><br><span class=\"line\"> </span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def class_foo(cls):</span><br><span class=\"line\">        print &apos;class_foo&apos;</span><br><span class=\"line\">        print cls.bar</span><br><span class=\"line\">        cls().foo()</span><br><span class=\"line\"> </span><br><span class=\"line\">A.static_foo()</span><br><span class=\"line\">A.class_foo()</span><br></pre></td></tr></table></figure>\n<p>如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。</p>\n<p>而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码</p>\n<p>这两个方法的用法是类似的，大多数情况下，classmethod也可以通过staticmethod代替，在通过类调用时，这两者对于调用者来说是不可区分的。</p>\n<p>这两者的区别在于，classmethod增加了一个对实际调用类的引用，这带来了很多方便的地方：</p>\n<ol>\n<li>方法可以判断出自己是通过基类被调用，还是通过某个子类被调用</li>\n<li>通过子类调用时，方法可以返回子类的实例而非基类的实例</li>\n<li>通过子类调用时，方法可以调用子类的其他classmethod</li>\n</ol>\n"},{"title":"上下文管理器","date":"2019-10-15T03:05:31.000Z","_content":"\n## 上下文管理器\n### 让对象支持上下文管理器\n对象需要定义 `__enter__ ` 和 `__exit__ `\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\n\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = family\n        self.type = type\n        self.sock = None\n\n    def __enter__(self):\n        if self.sock is not None:\n            raise RuntimeError('Already connected')\n        self.sock = socket(self.family, self.type)\n        self.sock.connect(self.address)\n        return self.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback\n        self.sock.close()\n        self.sock = None\n        #return True  如果这里返回True 则代表不处理with中的异常\n\nif __name__ == '__main__':\n    from functools import partial\n\n    conn = LazyConnection(('www.python.org', 80))\n    # Connection closed\n    with conn as s:\n        # conn.__enter__() executes: connection open\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.python.org\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n        print(resp)\n        # conn.__exit__() executes: connection closed\n\n```\n\n\n线程安全修改版\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = AF_INET\n        self.type = SOCK_STREAM\n        self.local = threading.local()\n\n    def __enter__(self):\n        if hasattr(self.local, 'sock'):\n            raise RuntimeError('Already connected')\n        self.local.sock = socket(self.family, self.type)\n        self.local.sock.connect(self.address)\n        return self.local.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):\n        self.local.sock.close()\n        del self.local.sock\n\nfrom functools import partial\ndef test(conn):\n    with conn as s:\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.huawei.com\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n\n    print('Got {} bytes'.format(len(resp)))\n\nif __name__ == '__main__':\n    conn = LazyConnection(('www.huawei.com', 80))\n\n    t1 = threading.Thread(target=test, args=(conn,))\n    t2 = threading.Thread(target=test, args=(conn,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n## 使用 `contexlib` 模块中的 `@contextmanager`装饰器\n**实现一个新的上下文管理器的最简单的方法**\n\n`yield` 之前的代码会在上下文管理器中作为 `__enter__()` 方法执行，\n所有在 `yield` 之后的代码会作为 `__exit__()` 方法执行\n\n先执行`print('《', end='')`，遇到yeild ,执行 `print('挪威的森林',end='')` , 最后执行 `print('》', end='')`\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef book_mark():\n    print('《', end='')\n    yield\n    print('》', end='')\n\n\nwith book_mark():\n    print('挪威的森林',end='')\n    \n# 《挪威的森林》\n```\n```\nimport time\nclass timethis:\n    def __init__(self, label):\n        self.label = label\n\n    def __enter__(self):\n        self.start = time.time()\n        print(f'start = {self.start}')\n\n    def __exit__(self, exc_ty, exc_val, exc_tb):\n        end = time.time()\n        print(f'{end = }')\n        print('{}: {}'.format(self.label, end - self.start))\n     \nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n#### 使用`from contextlib import contextmanager`\n```\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timethis(label):\n    start = time.time()\n    print(f'{start = }')\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f'{end = }')\n        print(f'{label} : {end - start}')\n\n# Example use\nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n\n### 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n```\n    \n    \nfrom contextlib import contextmanager\n\n@contextmanager\ndef list_transaction(orig_list):\n    working = list(orig_list)\n    yield working\n    orig_list[:] = working \n  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n\nitems = [1,2,3]\nwith list_transaction(items) as working:\n    working.append(4)\n    working.append(5)\n\nprint(items)  # [1,2,3,4,5]\n\nwith list_transaction(items) as working:\n    working.append(6)\n    working.append(7) working是[1,2,3,4,5,6,7]\n    raise RuntimeError('oops')  执行不了orig_list[:] = working\n\nprint(items)  ## 还是 [1,2,3,4,5] \n\n```\n\n","source":"_posts/python练习/面向对象/上下文管理器.md","raw":"---\ntitle: 上下文管理器\ndate: 2019-10-15 11:05:31\ntags:\ncategories: python练习\n---\n\n## 上下文管理器\n### 让对象支持上下文管理器\n对象需要定义 `__enter__ ` 和 `__exit__ `\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\n\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = family\n        self.type = type\n        self.sock = None\n\n    def __enter__(self):\n        if self.sock is not None:\n            raise RuntimeError('Already connected')\n        self.sock = socket(self.family, self.type)\n        self.sock.connect(self.address)\n        return self.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback\n        self.sock.close()\n        self.sock = None\n        #return True  如果这里返回True 则代表不处理with中的异常\n\nif __name__ == '__main__':\n    from functools import partial\n\n    conn = LazyConnection(('www.python.org', 80))\n    # Connection closed\n    with conn as s:\n        # conn.__enter__() executes: connection open\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.python.org\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n        print(resp)\n        # conn.__exit__() executes: connection closed\n\n```\n\n\n线程安全修改版\n```\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\n\nclass LazyConnection:\n    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):\n        self.address = address\n        self.family = AF_INET\n        self.type = SOCK_STREAM\n        self.local = threading.local()\n\n    def __enter__(self):\n        if hasattr(self.local, 'sock'):\n            raise RuntimeError('Already connected')\n        self.local.sock = socket(self.family, self.type)\n        self.local.sock.connect(self.address)\n        return self.local.sock\n\n    def __exit__(self, exc_ty, exc_val, tb):\n        self.local.sock.close()\n        del self.local.sock\n\nfrom functools import partial\ndef test(conn):\n    with conn as s:\n        s.send(b'GET /index.html HTTP/1.0\\r\\n')\n        s.send(b'Host: www.huawei.com\\r\\n')\n        s.send(b'\\r\\n')\n        resp = b''.join(iter(partial(s.recv, 8192), b''))\n\n    print('Got {} bytes'.format(len(resp)))\n\nif __name__ == '__main__':\n    conn = LazyConnection(('www.huawei.com', 80))\n\n    t1 = threading.Thread(target=test, args=(conn,))\n    t2 = threading.Thread(target=test, args=(conn,))\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n```\n## 使用 `contexlib` 模块中的 `@contextmanager`装饰器\n**实现一个新的上下文管理器的最简单的方法**\n\n`yield` 之前的代码会在上下文管理器中作为 `__enter__()` 方法执行，\n所有在 `yield` 之后的代码会作为 `__exit__()` 方法执行\n\n先执行`print('《', end='')`，遇到yeild ,执行 `print('挪威的森林',end='')` , 最后执行 `print('》', end='')`\n```\nfrom contextlib import contextmanager\n@contextmanager\ndef book_mark():\n    print('《', end='')\n    yield\n    print('》', end='')\n\n\nwith book_mark():\n    print('挪威的森林',end='')\n    \n# 《挪威的森林》\n```\n```\nimport time\nclass timethis:\n    def __init__(self, label):\n        self.label = label\n\n    def __enter__(self):\n        self.start = time.time()\n        print(f'start = {self.start}')\n\n    def __exit__(self, exc_ty, exc_val, exc_tb):\n        end = time.time()\n        print(f'{end = }')\n        print('{}: {}'.format(self.label, end - self.start))\n     \nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n#### 使用`from contextlib import contextmanager`\n```\nimport time\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timethis(label):\n    start = time.time()\n    print(f'{start = }')\n    try:\n        yield\n    finally:\n        end = time.time()\n        print(f'{end = }')\n        print(f'{label} : {end - start}')\n\n# Example use\nwith timethis('counting'):\n    n = 10000000\n    while n > 0:\n        n -= 1\n```\n\n### 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n```\n    \n    \nfrom contextlib import contextmanager\n\n@contextmanager\ndef list_transaction(orig_list):\n    working = list(orig_list)\n    yield working\n    orig_list[:] = working \n  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\n\nitems = [1,2,3]\nwith list_transaction(items) as working:\n    working.append(4)\n    working.append(5)\n\nprint(items)  # [1,2,3,4,5]\n\nwith list_transaction(items) as working:\n    working.append(6)\n    working.append(7) working是[1,2,3,4,5,6,7]\n    raise RuntimeError('oops')  执行不了orig_list[:] = working\n\nprint(items)  ## 还是 [1,2,3,4,5] \n\n```\n\n","slug":"python练习/面向对象/上下文管理器","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8j0092tssa1zcuztir","content":"<h2 id=\"上下文管理器\"><a href=\"#上下文管理器\" class=\"headerlink\" title=\"上下文管理器\"></a>上下文管理器</h2><h3 id=\"让对象支持上下文管理器\"><a href=\"#让对象支持上下文管理器\" class=\"headerlink\" title=\"让对象支持上下文管理器\"></a>让对象支持上下文管理器</h3><p>对象需要定义 <code>__enter__</code> 和 <code>__exit__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = family</span><br><span class=\"line\">        self.type = type</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if self.sock is not None:</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.sock.connect(self.address)</span><br><span class=\"line\">        return self.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback</span><br><span class=\"line\">        self.sock.close()</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\">        #return True  如果这里返回True 则代表不处理with中的异常</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    from functools import partial</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = LazyConnection((&apos;www.python.org&apos;, 80))</span><br><span class=\"line\">    # Connection closed</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        # conn.__enter__() executes: connection open</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.python.org\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\">        print(resp)</span><br><span class=\"line\">        # conn.__exit__() executes: connection closed</span><br></pre></td></tr></table></figure></p>\n<p>线程安全修改版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = AF_INET</span><br><span class=\"line\">        self.type = SOCK_STREAM</span><br><span class=\"line\">        self.local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if hasattr(self.local, &apos;sock&apos;):</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.local.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.local.sock.connect(self.address)</span><br><span class=\"line\">        return self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):</span><br><span class=\"line\">        self.local.sock.close()</span><br><span class=\"line\">        del self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import partial</span><br><span class=\"line\">def test(conn):</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.huawei.com\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Got &#123;&#125; bytes&apos;.format(len(resp)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    conn = LazyConnection((&apos;www.huawei.com&apos;, 80))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t2 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-contexlib-模块中的-contextmanager装饰器\"><a href=\"#使用-contexlib-模块中的-contextmanager装饰器\" class=\"headerlink\" title=\"使用 contexlib 模块中的 @contextmanager装饰器\"></a>使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code>装饰器</h2><p><strong>实现一个新的上下文管理器的最简单的方法</strong></p>\n<p><code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行，<br>所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行</p>\n<p>先执行<code>print(&#39;《&#39;, end=&#39;&#39;)</code>，遇到yeild ,执行 <code>print(&#39;挪威的森林&#39;,end=&#39;&#39;)</code> , 最后执行 <code>print(&#39;》&#39;, end=&#39;&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def book_mark():</span><br><span class=\"line\">    print(&apos;《&apos;, end=&apos;&apos;)</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    print(&apos;》&apos;, end=&apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">with book_mark():</span><br><span class=\"line\">    print(&apos;挪威的森林&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 《挪威的森林》</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">class timethis:</span><br><span class=\"line\">    def __init__(self, label):</span><br><span class=\"line\">        self.label = label</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.start = time.time()</span><br><span class=\"line\">        print(f&apos;start = &#123;self.start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, exc_tb):</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(&apos;&#123;&#125;: &#123;&#125;&apos;.format(self.label, end - self.start))</span><br><span class=\"line\">     </span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用from-contextlib-import-contextmanager\"><a href=\"#使用from-contextlib-import-contextmanager\" class=\"headerlink\" title=\"使用from contextlib import contextmanager\"></a>使用<code>from contextlib import contextmanager</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def timethis(label):</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(f&apos;&#123;start = &#125;&apos;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        yield</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(f&apos;&#123;label&#125; : &#123;end - start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Example use</span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"><a href=\"#任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\" class=\"headerlink\" title=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"></a>任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def list_transaction(orig_list):</span><br><span class=\"line\">    working = list(orig_list)</span><br><span class=\"line\">    yield working</span><br><span class=\"line\">    orig_list[:] = working </span><br><span class=\"line\">  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</span><br><span class=\"line\"></span><br><span class=\"line\">items = [1,2,3]</span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(4)</span><br><span class=\"line\">    working.append(5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  # [1,2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(6)</span><br><span class=\"line\">    working.append(7) working是[1,2,3,4,5,6,7]</span><br><span class=\"line\">    raise RuntimeError(&apos;oops&apos;)  执行不了orig_list[:] = working</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  ## 还是 [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"上下文管理器\"><a href=\"#上下文管理器\" class=\"headerlink\" title=\"上下文管理器\"></a>上下文管理器</h2><h3 id=\"让对象支持上下文管理器\"><a href=\"#让对象支持上下文管理器\" class=\"headerlink\" title=\"让对象支持上下文管理器\"></a>让对象支持上下文管理器</h3><p>对象需要定义 <code>__enter__</code> 和 <code>__exit__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = family</span><br><span class=\"line\">        self.type = type</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if self.sock is not None:</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.sock.connect(self.address)</span><br><span class=\"line\">        return self.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):  # 异常类型，异常值和异常的trackback</span><br><span class=\"line\">        self.sock.close()</span><br><span class=\"line\">        self.sock = None</span><br><span class=\"line\">        #return True  如果这里返回True 则代表不处理with中的异常</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    from functools import partial</span><br><span class=\"line\"></span><br><span class=\"line\">    conn = LazyConnection((&apos;www.python.org&apos;, 80))</span><br><span class=\"line\">    # Connection closed</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        # conn.__enter__() executes: connection open</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.python.org\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\">        print(resp)</span><br><span class=\"line\">        # conn.__exit__() executes: connection closed</span><br></pre></td></tr></table></figure></p>\n<p>线程安全修改版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from socket import socket, AF_INET, SOCK_STREAM</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">class LazyConnection:</span><br><span class=\"line\">    def __init__(self, address, family=AF_INET, type=SOCK_STREAM):</span><br><span class=\"line\">        self.address = address</span><br><span class=\"line\">        self.family = AF_INET</span><br><span class=\"line\">        self.type = SOCK_STREAM</span><br><span class=\"line\">        self.local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        if hasattr(self.local, &apos;sock&apos;):</span><br><span class=\"line\">            raise RuntimeError(&apos;Already connected&apos;)</span><br><span class=\"line\">        self.local.sock = socket(self.family, self.type)</span><br><span class=\"line\">        self.local.sock.connect(self.address)</span><br><span class=\"line\">        return self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, tb):</span><br><span class=\"line\">        self.local.sock.close()</span><br><span class=\"line\">        del self.local.sock</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import partial</span><br><span class=\"line\">def test(conn):</span><br><span class=\"line\">    with conn as s:</span><br><span class=\"line\">        s.send(b&apos;GET /index.html HTTP/1.0\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;Host: www.huawei.com\\r\\n&apos;)</span><br><span class=\"line\">        s.send(b&apos;\\r\\n&apos;)</span><br><span class=\"line\">        resp = b&apos;&apos;.join(iter(partial(s.recv, 8192), b&apos;&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;Got &#123;&#125; bytes&apos;.format(len(resp)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    conn = LazyConnection((&apos;www.huawei.com&apos;, 80))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t2 = threading.Thread(target=test, args=(conn,))</span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用-contexlib-模块中的-contextmanager装饰器\"><a href=\"#使用-contexlib-模块中的-contextmanager装饰器\" class=\"headerlink\" title=\"使用 contexlib 模块中的 @contextmanager装饰器\"></a>使用 <code>contexlib</code> 模块中的 <code>@contextmanager</code>装饰器</h2><p><strong>实现一个新的上下文管理器的最简单的方法</strong></p>\n<p><code>yield</code> 之前的代码会在上下文管理器中作为 <code>__enter__()</code> 方法执行，<br>所有在 <code>yield</code> 之后的代码会作为 <code>__exit__()</code> 方法执行</p>\n<p>先执行<code>print(&#39;《&#39;, end=&#39;&#39;)</code>，遇到yeild ,执行 <code>print(&#39;挪威的森林&#39;,end=&#39;&#39;)</code> , 最后执行 <code>print(&#39;》&#39;, end=&#39;&#39;)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def book_mark():</span><br><span class=\"line\">    print(&apos;《&apos;, end=&apos;&apos;)</span><br><span class=\"line\">    yield</span><br><span class=\"line\">    print(&apos;》&apos;, end=&apos;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">with book_mark():</span><br><span class=\"line\">    print(&apos;挪威的森林&apos;,end=&apos;&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\"># 《挪威的森林》</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">class timethis:</span><br><span class=\"line\">    def __init__(self, label):</span><br><span class=\"line\">        self.label = label</span><br><span class=\"line\"></span><br><span class=\"line\">    def __enter__(self):</span><br><span class=\"line\">        self.start = time.time()</span><br><span class=\"line\">        print(f&apos;start = &#123;self.start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __exit__(self, exc_ty, exc_val, exc_tb):</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(&apos;&#123;&#125;: &#123;&#125;&apos;.format(self.label, end - self.start))</span><br><span class=\"line\">     </span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用from-contextlib-import-contextmanager\"><a href=\"#使用from-contextlib-import-contextmanager\" class=\"headerlink\" title=\"使用from contextlib import contextmanager\"></a>使用<code>from contextlib import contextmanager</code></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def timethis(label):</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(f&apos;&#123;start = &#125;&apos;)</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        yield</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        end = time.time()</span><br><span class=\"line\">        print(f&apos;&#123;end = &#125;&apos;)</span><br><span class=\"line\">        print(f&apos;&#123;label&#125; : &#123;end - start&#125;&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Example use</span><br><span class=\"line\">with timethis(&apos;counting&apos;):</span><br><span class=\"line\">    n = 10000000</span><br><span class=\"line\">    while n &gt; 0:</span><br><span class=\"line\">        n -= 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"><a href=\"#任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\" class=\"headerlink\" title=\"任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效\"></a>任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">from contextlib import contextmanager</span><br><span class=\"line\"></span><br><span class=\"line\">@contextmanager</span><br><span class=\"line\">def list_transaction(orig_list):</span><br><span class=\"line\">    working = list(orig_list)</span><br><span class=\"line\">    yield working</span><br><span class=\"line\">    orig_list[:] = working </span><br><span class=\"line\">  # 任何对列表的修改只有当所有代码运行完成并且不出现异常的情况下才会生效</span><br><span class=\"line\"></span><br><span class=\"line\">items = [1,2,3]</span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(4)</span><br><span class=\"line\">    working.append(5)</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  # [1,2,3,4,5]</span><br><span class=\"line\"></span><br><span class=\"line\">with list_transaction(items) as working:</span><br><span class=\"line\">    working.append(6)</span><br><span class=\"line\">    working.append(7) working是[1,2,3,4,5,6,7]</span><br><span class=\"line\">    raise RuntimeError(&apos;oops&apos;)  执行不了orig_list[:] = working</span><br><span class=\"line\"></span><br><span class=\"line\">print(items)  ## 还是 [1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n"},{"title":"调用父类方法","date":"2019-10-11T03:05:31.000Z","_content":"##  调用父类方法\n### super()\n1. 为了调用父类(超类)的一个方法，可以使用 `super()` 函数\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n\nclass B(A):\n    def spam(self):\n        print('B.spam')\n        super().spam()  # Call parent spam()\n\nb = B()\nb.spam()\n''' \n输出结果\nB.spam  先调用 B 的 spam\nA.spam  然后再调用 A 的 spam\n'''\n```\n2. `super()` 函数的一个常见用法是在 `__init__()` 方法中确保父类被正确的初始化了\n```\nclass A:\n    def __init__(self):\n        self.x = 0\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        self.y = 1\n\nb = B()\nprint(b.x,b.y) # 0,1\n```\n使用dataclasses改写\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass A:\n    x:int = 0\n\n@dataclass\nclass B(A):\n    y:int = 1\n\nb = B()\nprint(b)  # B(x=0, y=1)\n```\n3. \n```\nclass Father:\n    def __init__(self, name):\n        self.name = name\n        print(\"init Father's name\")\n\n\nclass Mather:\n    def __init__(self, age):\n        self.age = age\n        print(\"init Mather's age\")\n\n\nclass Son(Father, Mather):\n    def __init__(self, name, age, sex):\n        super().__init__(name)  # 先继承 Father 的 name\n        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age\n        self.sex = sex # 最后 实例化自己的 sex\n        print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(\"Tom\", 5, \"Male\")\n    print(Son.__mro__) # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son.name, son.age, son.sex)\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Father:\n    name:str\n    print(\"init Father's name\")\n\n@dataclass\nclass Mather:\n    age:int\n    print(\"init Mather's age\")\n\n@dataclass\nclass Son(Father, Mather):\n    sex:str\n    print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(name=\"Tom\", age=5, sex=\"Male\")  # 这个会先实例化age,再name,再sex\n    print(Son.__mro__)  # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son)\n```\n\n### MRO列表\nPython会在MRO列表上继续搜索下一个类。\n只要每个重定义的方法统一使用 ``super()`` 并只调用它一次，\n那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次\nsuper()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，\n你甚至可以在一个没有直接父类的类中使用它\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n        super().spam()\nclass B:\n    def spam(self):\n        print('B.spam')\n\nclass C(A,B):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nc.spam() \n'''\nA.spam\nB.spam\n'''\n\n```\n\n```\nclass C(B,A):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)\nc.spam() \n'''\nB.spam\n'''\n# 不会报错，只会执行 B下面的\n```\n### 关于super()\n\n由于 ``super()`` 可能会调用不是你想要的方法，你应该遵循一些通用原则。\n首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。\n这样可以确保 ``super()`` 调用一个非直接父类方法时不会出错。\n其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。\n\n在Python社区中对于 ``super()`` 的使用有时候会引来一些争议。\n尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。\nRaymond Hettinger为此写了一篇非常好的文章\n[Python’s super() Considered Super](http://rhettinger.wordpress.com/2011/05/26/super-considered-super)\n通过大量的例子向我们解释了为什么 ``super()`` 是极好的。\n","source":"_posts/python练习/面向对象/调用父类方法.md","raw":"---\ntitle: 调用父类方法\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n##  调用父类方法\n### super()\n1. 为了调用父类(超类)的一个方法，可以使用 `super()` 函数\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n\nclass B(A):\n    def spam(self):\n        print('B.spam')\n        super().spam()  # Call parent spam()\n\nb = B()\nb.spam()\n''' \n输出结果\nB.spam  先调用 B 的 spam\nA.spam  然后再调用 A 的 spam\n'''\n```\n2. `super()` 函数的一个常见用法是在 `__init__()` 方法中确保父类被正确的初始化了\n```\nclass A:\n    def __init__(self):\n        self.x = 0\n\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        self.y = 1\n\nb = B()\nprint(b.x,b.y) # 0,1\n```\n使用dataclasses改写\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass A:\n    x:int = 0\n\n@dataclass\nclass B(A):\n    y:int = 1\n\nb = B()\nprint(b)  # B(x=0, y=1)\n```\n3. \n```\nclass Father:\n    def __init__(self, name):\n        self.name = name\n        print(\"init Father's name\")\n\n\nclass Mather:\n    def __init__(self, age):\n        self.age = age\n        print(\"init Mather's age\")\n\n\nclass Son(Father, Mather):\n    def __init__(self, name, age, sex):\n        super().__init__(name)  # 先继承 Father 的 name\n        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age\n        self.sex = sex # 最后 实例化自己的 sex\n        print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(\"Tom\", 5, \"Male\")\n    print(Son.__mro__) # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son.name, son.age, son.sex)\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Father:\n    name:str\n    print(\"init Father's name\")\n\n@dataclass\nclass Mather:\n    age:int\n    print(\"init Mather's age\")\n\n@dataclass\nclass Son(Father, Mather):\n    sex:str\n    print(\"init Son's sex\")\n\n\nif __name__ == \"__main__\":\n    son = Son(name=\"Tom\", age=5, sex=\"Male\")  # 这个会先实例化age,再name,再sex\n    print(Son.__mro__)  # (<class '__main__.Son'>, <class '__main__.Father'>, <class '__main__.Mather'>, <class 'object'>)\n    print(son)\n```\n\n### MRO列表\nPython会在MRO列表上继续搜索下一个类。\n只要每个重定义的方法统一使用 ``super()`` 并只调用它一次，\n那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次\nsuper()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，\n你甚至可以在一个没有直接父类的类中使用它\n\n```\nclass A:\n    def spam(self):\n        print('A.spam')\n        super().spam()\nclass B:\n    def spam(self):\n        print('B.spam')\n\nclass C(A,B):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)\nc.spam() \n'''\nA.spam\nB.spam\n'''\n\n```\n\n```\nclass C(B,A):\n    pass\n\nc = C()\nprint(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)\nc.spam() \n'''\nB.spam\n'''\n# 不会报错，只会执行 B下面的\n```\n### 关于super()\n\n由于 ``super()`` 可能会调用不是你想要的方法，你应该遵循一些通用原则。\n首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。\n这样可以确保 ``super()`` 调用一个非直接父类方法时不会出错。\n其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。\n\n在Python社区中对于 ``super()`` 的使用有时候会引来一些争议。\n尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。\nRaymond Hettinger为此写了一篇非常好的文章\n[Python’s super() Considered Super](http://rhettinger.wordpress.com/2011/05/26/super-considered-super)\n通过大量的例子向我们解释了为什么 ``super()`` 是极好的。\n","slug":"python练习/面向对象/调用父类方法","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8k0093tssao4awecx7","content":"<h2 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h2><h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super()\"></a>super()</h3><ol>\n<li>为了调用父类(超类)的一个方法，可以使用 <code>super()</code> 函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\">        super().spam()  # Call parent spam()</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">b.spam()</span><br><span class=\"line\">&apos;&apos;&apos; </span><br><span class=\"line\">输出结果</span><br><span class=\"line\">B.spam  先调用 B 的 spam</span><br><span class=\"line\">A.spam  然后再调用 A 的 spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>super()</code> 函数的一个常见用法是在 <code>__init__()</code> 方法中确保父类被正确的初始化了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.x = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.y = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b.x,b.y) # 0,1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用dataclasses改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class A:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    y:int = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b)  # B(x=0, y=1)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    def __init__(self, name, age, sex):</span><br><span class=\"line\">        super().__init__(name)  # 先继承 Father 的 name</span><br><span class=\"line\">        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age</span><br><span class=\"line\">        self.sex = sex # 最后 实例化自己的 sex</span><br><span class=\"line\">        print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(&quot;Tom&quot;, 5, &quot;Male&quot;)</span><br><span class=\"line\">    print(Son.__mro__) # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son.name, son.age, son.sex)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Father:</span><br><span class=\"line\">    name:str</span><br><span class=\"line\">    print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    age:int</span><br><span class=\"line\">    print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    sex:str</span><br><span class=\"line\">    print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(name=&quot;Tom&quot;, age=5, sex=&quot;Male&quot;)  # 这个会先实例化age,再name,再sex</span><br><span class=\"line\">    print(Son.__mro__)  # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son)</span><br></pre></td></tr></table></figure>\n<h3 id=\"MRO列表\"><a href=\"#MRO列表\" class=\"headerlink\" title=\"MRO列表\"></a>MRO列表</h3><p>Python会在MRO列表上继续搜索下一个类。<br>只要每个重定义的方法统一使用 <code>super()</code> 并只调用它一次，<br>那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次<br>super()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，<br>你甚至可以在一个没有直接父类的类中使用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\">        super().spam()</span><br><span class=\"line\">class B:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A,B):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class C(B,A):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># 不会报错，只会执行 B下面的</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于super\"><a href=\"#关于super\" class=\"headerlink\" title=\"关于super()\"></a>关于super()</h3><p>由于 <code>super()</code> 可能会调用不是你想要的方法，你应该遵循一些通用原则。<br>首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。<br>这样可以确保 <code>super()</code> 调用一个非直接父类方法时不会出错。<br>其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。</p>\n<p>在Python社区中对于 <code>super()</code> 的使用有时候会引来一些争议。<br>尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。<br>Raymond Hettinger为此写了一篇非常好的文章<br><a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super\" target=\"_blank\" rel=\"noopener\">Python’s super() Considered Super</a><br>通过大量的例子向我们解释了为什么 <code>super()</code> 是极好的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h2><h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super()\"></a>super()</h3><ol>\n<li>为了调用父类(超类)的一个方法，可以使用 <code>super()</code> 函数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\">        super().spam()  # Call parent spam()</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">b.spam()</span><br><span class=\"line\">&apos;&apos;&apos; </span><br><span class=\"line\">输出结果</span><br><span class=\"line\">B.spam  先调用 B 的 spam</span><br><span class=\"line\">A.spam  然后再调用 A 的 spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>super()</code> 函数的一个常见用法是在 <code>__init__()</code> 方法中确保父类被正确的初始化了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.x = 0</span><br><span class=\"line\"></span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        super().__init__()</span><br><span class=\"line\">        self.y = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b.x,b.y) # 0,1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用dataclasses改写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class A:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class B(A):</span><br><span class=\"line\">    y:int = 1</span><br><span class=\"line\"></span><br><span class=\"line\">b = B()</span><br><span class=\"line\">print(b)  # B(x=0, y=1)</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    def __init__(self, age):</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    def __init__(self, name, age, sex):</span><br><span class=\"line\">        super().__init__(name)  # 先继承 Father 的 name</span><br><span class=\"line\">        super(Father, self).__init__(age) # 继承后 再继承 Mother 的age</span><br><span class=\"line\">        self.sex = sex # 最后 实例化自己的 sex</span><br><span class=\"line\">        print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(&quot;Tom&quot;, 5, &quot;Male&quot;)</span><br><span class=\"line\">    print(Son.__mro__) # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son.name, son.age, son.sex)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Father:</span><br><span class=\"line\">    name:str</span><br><span class=\"line\">    print(&quot;init Father&apos;s name&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Mather:</span><br><span class=\"line\">    age:int</span><br><span class=\"line\">    print(&quot;init Mather&apos;s age&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Son(Father, Mather):</span><br><span class=\"line\">    sex:str</span><br><span class=\"line\">    print(&quot;init Son&apos;s sex&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    son = Son(name=&quot;Tom&quot;, age=5, sex=&quot;Male&quot;)  # 这个会先实例化age,再name,再sex</span><br><span class=\"line\">    print(Son.__mro__)  # (&lt;class &apos;__main__.Son&apos;&gt;, &lt;class &apos;__main__.Father&apos;&gt;, &lt;class &apos;__main__.Mather&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">    print(son)</span><br></pre></td></tr></table></figure>\n<h3 id=\"MRO列表\"><a href=\"#MRO列表\" class=\"headerlink\" title=\"MRO列表\"></a>MRO列表</h3><p>Python会在MRO列表上继续搜索下一个类。<br>只要每个重定义的方法统一使用 <code>super()</code> 并只调用它一次，<br>那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次<br>super()有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类，<br>你甚至可以在一个没有直接父类的类中使用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;A.spam&apos;)</span><br><span class=\"line\">        super().spam()</span><br><span class=\"line\">class B:</span><br><span class=\"line\">    def spam(self):</span><br><span class=\"line\">        print(&apos;B.spam&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">class C(A,B):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class C(B,A):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">c = C()</span><br><span class=\"line\">print(C.__mro__)  # (&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;)</span><br><span class=\"line\">c.spam() </span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">B.spam</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"># 不会报错，只会执行 B下面的</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于super\"><a href=\"#关于super\" class=\"headerlink\" title=\"关于super()\"></a>关于super()</h3><p>由于 <code>super()</code> 可能会调用不是你想要的方法，你应该遵循一些通用原则。<br>首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。<br>这样可以确保 <code>super()</code> 调用一个非直接父类方法时不会出错。<br>其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。</p>\n<p>在Python社区中对于 <code>super()</code> 的使用有时候会引来一些争议。<br>尽管如此，如果一切顺利的话，你应该在你最新代码中使用它。<br>Raymond Hettinger为此写了一篇非常好的文章<br><a href=\"http://rhettinger.wordpress.com/2011/05/26/super-considered-super\" target=\"_blank\" rel=\"noopener\">Python’s super() Considered Super</a><br>通过大量的例子向我们解释了为什么 <code>super()</code> 是极好的。</p>\n"},{"title":"面向对象","date":"2019-10-13T03:05:31.000Z","_content":"\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n\n`__solts__ ` 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 ``__slots__`` 中定义的那些属性名\n\n使用`__solts__ `,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。\n另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。\n\n尽量不要使用 `__solts__ `\n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","source":"_posts/python练习/面向对象/面向对象.md","raw":"---\ntitle: 面向对象\ndate: 2019-10-13 11:05:31\ntags:\ncategories: python练习\n---\n\n# 待解决\n`dataclass` + `__solts__ `的问题 \n\n\n`__solts__ ` 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 ``__slots__`` 中定义的那些属性名\n\n使用`__solts__ `,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。\n另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。\n\n尽量不要使用 `__solts__ `\n\n[github上相关问题](https://github.com/ericvsmith/dataclasses/issues/28)\n\n[多加一个装饰器](https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py)\n## 基础\n```\nclass Color():\n    r = 200\n    def __init__(self,r=250):\n        self.r = r\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color(255)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n\n```\n\n```\nclass Color():\n    r = 200\n    def __init__(self):\n        self.g = self.get_g()\n        self.b = self.get_b\n\n    def get_g(self):\n        g = 223\n        return g\n\n    @property\n    def get_b(self):\n        b = 222\n        return b\n\n    def __str__(self):\n        return  f'{self.__class__.__name__}(class_r = {self.__class__.r}, r = {self.r}, g = {self.g}, b = {self.b})'\n\ncolor = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\n```\n## 使用第三方插件修改一下\n```\nfrom attr import attrs, attrib  # dataclass 内置库可替代\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Color():\n    r = attrib(type=int, default=100)\n    g = attrib(type=int, default=200)\n    b = attrib(type=int, default=222)\n\n\ncolor = Color(255,254,253)\ncolor1 = Color()\nprint(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)\nprint(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)\n```\n## 声明和比较\n```\nfrom attr import attrs, attrib  # dataclass内置库可替代\n\n'''\nattrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,\n__ge__,__hash__,这几个方法\n'''\n\n@attrs\nclass Point():\n    x = attrib()\n    y = attrib()\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n## 使用python3.7 的内置库\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\nprint(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)\n```\n\n```\n# 默认init,repr,eq 为True， 其余为False\n@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\np2 = Point(y=3,x=4)\np3 = Point(x=1,y=2)\nprint(p1>p2)  # fasle\nprint(p1==p3)  # True\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass(frozen=1)\nclass Point():\n    x:int = 0\n    y:int = 0\n\np1 = Point(1,2)\nprint(p1)  \n# 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError\n#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field 'x'\n\n```\n\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def x_add_1(self):\n        self.x += 1\n\np1 = Point(1,2)\nprint(p1)  # Point(x=1, y=2)\np1.x_add_1()\nprint(p1)  # Point(x=2, y=2)\n\n```\n`__init__`方法在返回前会调用`__post_init__`\n```\nfrom dataclasses import dataclass\n\n@dataclass()\nclass Point():\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n        \np1 = Point(1,2)\nprint(p1)  # Point(x=2, y=2)\n```\n### 有关继承\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=2, y=3, z=4)\n\n\n```\n**super**\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x:int = 0\n    y:int = 0\n\n    def __post_init__(self):\n        self.x += 1\n\n@dataclass\nclass ThirdPonit(Point):\n    z:int =0\n\n    def __post_init__(self):\n        super().__post_init__()  # 调用 父类的__post_init__()\n        self.x += 10\n\nppp = ThirdPonit(1,3,4)\nprint(ppp)   # ThirdPonit(x=12, y=3, z=4)\n\n```\n\n## 复合初始化\n```\nimport random\nfrom dataclasses import dataclass\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:list = list\n\n    def __post_init__(self):  # 额外的工作\n        self.marks = get_random_marks()\n\na = Student()\nprint(a)  # Student(marks=[2, 9, 8, 8, 2])\nprint(a.marks)  # [2, 9, 8, 8, 2]\n```\n**修改**\n```\nimport random\nfrom dataclasses import dataclass, field\n\ndef get_random_marks():\n    return [random.randint(1,10) for _ in range(5)]\n\n@dataclass\nclass Student:\n    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型\n    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）\n    # 使用 get_random_marks 方法 初始化 marks\n    \n\na = Student()\nprint(a)  # Student(marks=[7, 2, 4, 7, 4])\nprint(a.marks)  # [7, 2, 4, 7, 4]\nprint(type(a.marks))  # <class 'list'>\nb = Student('b')  # 传参则不影响\nprint(b)  # Student(marks='b')\nprint(b.marks)  # b\nprint(type(b.marks))  # <class 'str'>\n```\n### filed 更多操作\n```\nfrom dataclasses import dataclass, field\n\n@dataclass(order=1)\nclass Number:\n    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印\n    val:int\n    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化\n\na = Number(3,4)\nb = Number(4,3)\nprint(a < b) # False\nprint(a) # Number(val=4, verified=0)\nprint(b) # Number(val=3, verified=0)\nb.verified = 1\nprint(b) # Number(val=3, verified=1)\n```\n","slug":"python练习/面向对象/面向对象","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8m0094tssajlqcqszw","content":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><code>__solts__</code> 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 <code>__slots__</code> 中定义的那些属性名</p>\n<p>使用<code>__solts__</code>,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。</p>\n<p>尽量不要使用 <code>__solts__</code></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"待解决\"><a href=\"#待解决\" class=\"headerlink\" title=\"待解决\"></a>待解决</h1><p><code>dataclass</code> + <code>__solts__</code>的问题 </p>\n<p><code>__solts__</code> 使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 <code>__slots__</code> 中定义的那些属性名</p>\n<p>使用<code>__solts__</code>,python实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似.Python的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了slots后的类不再支持一些普通类特性了，比如多继承。</p>\n<p>尽量不要使用 <code>__solts__</code></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/issues/28\" target=\"_blank\" rel=\"noopener\">github上相关问题</a></p>\n<p><a href=\"https://github.com/ericvsmith/dataclasses/blob/master/dataclass_tools.py\" target=\"_blank\" rel=\"noopener\">多加一个装饰器</a></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self,r=250):</span><br><span class=\"line\">        self.r = r</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Color():</span><br><span class=\"line\">    r = 200</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.g = self.get_g()</span><br><span class=\"line\">        self.b = self.get_b</span><br><span class=\"line\"></span><br><span class=\"line\">    def get_g(self):</span><br><span class=\"line\">        g = 223</span><br><span class=\"line\">        return g</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def get_b(self):</span><br><span class=\"line\">        b = 222</span><br><span class=\"line\">        return b</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return  f&apos;&#123;self.__class__.__name__&#125;(class_r = &#123;self.__class__.r&#125;, r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">color = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用第三方插件修改一下\"><a href=\"#使用第三方插件修改一下\" class=\"headerlink\" title=\"使用第三方插件修改一下\"></a>使用第三方插件修改一下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass 内置库可替代</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Color():</span><br><span class=\"line\">    r = attrib(type=int, default=100)</span><br><span class=\"line\">    g = attrib(type=int, default=200)</span><br><span class=\"line\">    b = attrib(type=int, default=222)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">color = Color(255,254,253)</span><br><span class=\"line\">color1 = Color()</span><br><span class=\"line\">print(color)  #  Color(class_r = 200, r = 255, g = 223, b = 222)</span><br><span class=\"line\">print(color1)  # Color(class_r = 200, r = 250, g = 223, b = 222)</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明和比较\"><a href=\"#声明和比较\" class=\"headerlink\" title=\"声明和比较\"></a>声明和比较</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from attr import attrs, attrib  # dataclass内置库可替代</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">attrs 修饰符，可以自动实现__init__,__repr__,__eq__,__ne__,__it__,__le__,__gt__,</span><br><span class=\"line\">__ge__,__hash__,这几个方法</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@attrs</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x = attrib()</span><br><span class=\"line\">    y = attrib()</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用python3-7-的内置库\"><a href=\"#使用python3-7-的内置库\" class=\"headerlink\" title=\"使用python3.7 的内置库\"></a>使用python3.7 的内置库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">print(p1,p2)  # Point(x=1, y=2) Point(x=4, y=3)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认init,repr,eq 为True， 其余为False</span><br><span class=\"line\">@dataclass(init=1,repr=1,eq=1,order=1,unsafe_hash=0,frozen=0)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">p2 = Point(y=3,x=4)</span><br><span class=\"line\">p3 = Point(x=1,y=2)</span><br><span class=\"line\">print(p1&gt;p2)  # fasle</span><br><span class=\"line\">print(p1==p3)  # True</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(frozen=1)</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  </span><br><span class=\"line\"># 当实例化一个frozen 对象时，任何企图修改对象属性的行为都会引发 FrozenInstanceError</span><br><span class=\"line\">#p1.x = 10  # dataclasses.FrozenInstanceError: cannot assign to field &apos;x&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def x_add_1(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=1, y=2)</span><br><span class=\"line\">p1.x_add_1()</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure>\n<p><code>__init__</code>方法在返回前会调用<code>__post_init__</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass()</span><br><span class=\"line\">class Point():</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\">        </span><br><span class=\"line\">p1 = Point(1,2)</span><br><span class=\"line\">print(p1)  # Point(x=2, y=2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"有关继承\"><a href=\"#有关继承\" class=\"headerlink\" title=\"有关继承\"></a>有关继承</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=2, y=3, z=4)</span><br></pre></td></tr></table></figure>\n<p><strong>super</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Point:</span><br><span class=\"line\">    x:int = 0</span><br><span class=\"line\">    y:int = 0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        self.x += 1</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class ThirdPonit(Point):</span><br><span class=\"line\">    z:int =0</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):</span><br><span class=\"line\">        super().__post_init__()  # 调用 父类的__post_init__()</span><br><span class=\"line\">        self.x += 10</span><br><span class=\"line\"></span><br><span class=\"line\">ppp = ThirdPonit(1,3,4)</span><br><span class=\"line\">print(ppp)   # ThirdPonit(x=12, y=3, z=4)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"复合初始化\"><a href=\"#复合初始化\" class=\"headerlink\" title=\"复合初始化\"></a>复合初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:list = list</span><br><span class=\"line\"></span><br><span class=\"line\">    def __post_init__(self):  # 额外的工作</span><br><span class=\"line\">        self.marks = get_random_marks()</span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[2, 9, 8, 8, 2])</span><br><span class=\"line\">print(a.marks)  # [2, 9, 8, 8, 2]</span><br></pre></td></tr></table></figure>\n<p><strong>修改</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import random</span><br><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">def get_random_marks():</span><br><span class=\"line\">    return [random.randint(1,10) for _ in range(5)]</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Student:</span><br><span class=\"line\">    marks:int = field(default_factory= get_random_marks)  # int 不建议，建议使用数据类型</span><br><span class=\"line\">    # default_factory ：如果在创建对象时没赋值，则使用该方法初始化该字段 （必须是可以调用的无参数方法）</span><br><span class=\"line\">    # 使用 get_random_marks 方法 初始化 marks</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">a = Student()</span><br><span class=\"line\">print(a)  # Student(marks=[7, 2, 4, 7, 4])</span><br><span class=\"line\">print(a.marks)  # [7, 2, 4, 7, 4]</span><br><span class=\"line\">print(type(a.marks))  # &lt;class &apos;list&apos;&gt;</span><br><span class=\"line\">b = Student(&apos;b&apos;)  # 传参则不影响</span><br><span class=\"line\">print(b)  # Student(marks=&apos;b&apos;)</span><br><span class=\"line\">print(b.marks)  # b</span><br><span class=\"line\">print(type(b.marks))  # &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filed-更多操作\"><a href=\"#filed-更多操作\" class=\"headerlink\" title=\"filed 更多操作\"></a>filed 更多操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass, field</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass(order=1)</span><br><span class=\"line\">class Number:</span><br><span class=\"line\">    number:int = field(compare= False,repr= False)  # number 不进行比较,不打印</span><br><span class=\"line\">    val:int</span><br><span class=\"line\">    verified:1 = field(default=0,init=0) # 默认为 1，不进行初始化</span><br><span class=\"line\"></span><br><span class=\"line\">a = Number(3,4)</span><br><span class=\"line\">b = Number(4,3)</span><br><span class=\"line\">print(a &lt; b) # False</span><br><span class=\"line\">print(a) # Number(val=4, verified=0)</span><br><span class=\"line\">print(b) # Number(val=3, verified=0)</span><br><span class=\"line\">b.verified = 1</span><br><span class=\"line\">print(b) # Number(val=3, verified=1)</span><br></pre></td></tr></table></figure>\n"},{"title":"格式化字符串","date":"2019-10-11T03:05:31.000Z","_content":"\n实例的字符串显示\n```\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'({self.x}, {self.y})'\n\n\n    def __str__(self):\n        return f'Pair({self.x=}, {self.y=})'\n\np = Pair(3, 4)\nprint(p)\n\n```\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Pair:\n    x:int\n    y:int = 0  # y 默认值为0\np = Pair(3, 4)\nprint(p)\n\n```\n\n对象自定义格式化\n```\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\nd = Date(2012, 12, 21)\nprint(d)\nprint(format(d, 'mdy'))\nprint('The date is {:ymd}'.format(d))\nprint('The date is {:mdy}'.format(d))\n```\n修改后\n```\nfrom dataclasses import dataclass\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n@dataclass\nclass Date:\n    year:int \n    month:int\n    day:int\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\na = Date(2012, 12, 21)\nprint(a)\nprint(format(a, 'mdy'))\nprint('The date is {:ymd}'.format(a))\nprint('The date is {:mdy}'.format(a))\n```\n","source":"_posts/python练习/面向对象/格式化字符串.md","raw":"---\ntitle: 格式化字符串\ndate: 2019-10-11 11:05:31\ntags:\ncategories: python练习\n---\n\n实例的字符串显示\n```\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f'({self.x}, {self.y})'\n\n\n    def __str__(self):\n        return f'Pair({self.x=}, {self.y=})'\n\np = Pair(3, 4)\nprint(p)\n\n```\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass Pair:\n    x:int\n    y:int = 0  # y 默认值为0\np = Pair(3, 4)\nprint(p)\n\n```\n\n对象自定义格式化\n```\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n\nclass Date:\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\nd = Date(2012, 12, 21)\nprint(d)\nprint(format(d, 'mdy'))\nprint('The date is {:ymd}'.format(d))\nprint('The date is {:mdy}'.format(d))\n```\n修改后\n```\nfrom dataclasses import dataclass\n_formats = {\n    'ymd': '{d.year}-{d.month}-{d.day}',\n    'mdy': '{d.month}/{d.day}/{d.year}',\n    'dmy': '{d.day}/{d.month}/{d.year}'\n}\n\n@dataclass\nclass Date:\n    year:int \n    month:int\n    day:int\n\n    def __format__(self, code):\n        if code == '':\n            code = 'ymd'\n        fmt = _formats[code]\n        return fmt.format(d=self)\n\n\na = Date(2012, 12, 21)\nprint(a)\nprint(format(a, 'mdy'))\nprint('The date is {:ymd}'.format(a))\nprint('The date is {:mdy}'.format(a))\n```\n","slug":"python练习/面向对象/格式化字符串","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8n0096tssayqakaxtv","content":"<p>实例的字符串显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Pair:</span><br><span class=\"line\">    def __init__(self, x, y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return f&apos;(&#123;self.x&#125;, &#123;self.y&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&apos;Pair(&#123;self.x=&#125;, &#123;self.y=&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Pair:</span><br><span class=\"line\">    x:int</span><br><span class=\"line\">    y:int = 0  # y 默认值为0</span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n<p>对象自定义格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    def __init__(self, year, month, day):</span><br><span class=\"line\">        self.year = year</span><br><span class=\"line\">        self.month = month</span><br><span class=\"line\">        self.day = day</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">d = Date(2012, 12, 21)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">print(format(d, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(d))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(d))</span><br></pre></td></tr></table></figure></p>\n<p>修改后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    year:int </span><br><span class=\"line\">    month:int</span><br><span class=\"line\">    day:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Date(2012, 12, 21)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(format(a, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(a))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(a))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实例的字符串显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Pair:</span><br><span class=\"line\">    def __init__(self, x, y):</span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\"></span><br><span class=\"line\">    def __repr__(self):</span><br><span class=\"line\">        return f&apos;(&#123;self.x&#125;, &#123;self.y&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&apos;Pair(&#123;self.x=&#125;, &#123;self.y=&#125;)&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Pair:</span><br><span class=\"line\">    x:int</span><br><span class=\"line\">    y:int = 0  # y 默认值为0</span><br><span class=\"line\">p = Pair(3, 4)</span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n<p>对象自定义格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    def __init__(self, year, month, day):</span><br><span class=\"line\">        self.year = year</span><br><span class=\"line\">        self.month = month</span><br><span class=\"line\">        self.day = day</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">d = Date(2012, 12, 21)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">print(format(d, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(d))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(d))</span><br></pre></td></tr></table></figure></p>\n<p>修改后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from dataclasses import dataclass</span><br><span class=\"line\">_formats = &#123;</span><br><span class=\"line\">    &apos;ymd&apos;: &apos;&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;&apos;,</span><br><span class=\"line\">    &apos;mdy&apos;: &apos;&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;&apos;,</span><br><span class=\"line\">    &apos;dmy&apos;: &apos;&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@dataclass</span><br><span class=\"line\">class Date:</span><br><span class=\"line\">    year:int </span><br><span class=\"line\">    month:int</span><br><span class=\"line\">    day:int</span><br><span class=\"line\"></span><br><span class=\"line\">    def __format__(self, code):</span><br><span class=\"line\">        if code == &apos;&apos;:</span><br><span class=\"line\">            code = &apos;ymd&apos;</span><br><span class=\"line\">        fmt = _formats[code]</span><br><span class=\"line\">        return fmt.format(d=self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = Date(2012, 12, 21)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(format(a, &apos;mdy&apos;))</span><br><span class=\"line\">print(&apos;The date is &#123;:ymd&#125;&apos;.format(a))</span><br><span class=\"line\">print(&apos;The date is &#123;:mdy&#125;&apos;.format(a))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"有关于@property","date":"2019-10-16T03:05:31.000Z","_content":"## 有关于@property\n### 1. 将方法改为属性\n这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来\n\n```\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    @property\n    def diameter(self):\n        return self.radius * 2\n\n    @property\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\nc = Circle(3)\nprint(c.area()) #  方法调用\nprint(c.diameter) # 属性访问\nprint(c.perimeter)\n```\n\n### 2. 做限定\n参考前文\n\n### 3. \n","source":"_posts/python练习/面向对象/有关于@property.md","raw":"---\ntitle: 有关于@property\ndate: 2019-10-16 11:05:31\ntags:\ncategories: python练习\n---\n## 有关于@property\n### 1. 将方法改为属性\n这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来\n\n```\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return math.pi * self.radius ** 2\n\n    @property\n    def diameter(self):\n        return self.radius * 2\n\n    @property\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n\nc = Circle(3)\nprint(c.area()) #  方法调用\nprint(c.diameter) # 属性访问\nprint(c.perimeter)\n```\n\n### 2. 做限定\n参考前文\n\n### 3. \n","slug":"python练习/面向对象/有关于@property","published":1,"updated":"2020-04-01T09:23:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kb4p8o0098tssarbhwmwnw","content":"<h2 id=\"有关于-property\"><a href=\"#有关于-property\" class=\"headerlink\" title=\"有关于@property\"></a>有关于@property</h2><h3 id=\"1-将方法改为属性\"><a href=\"#1-将方法改为属性\" class=\"headerlink\" title=\"1. 将方法改为属性\"></a>1. 将方法改为属性</h3><p>这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">class Circle:</span><br><span class=\"line\">    def __init__(self, radius):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    def area(self):</span><br><span class=\"line\">        return math.pi * self.radius ** 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def diameter(self):</span><br><span class=\"line\">        return self.radius * 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def perimeter(self):</span><br><span class=\"line\">        return 2 * math.pi * self.radius</span><br><span class=\"line\"></span><br><span class=\"line\">c = Circle(3)</span><br><span class=\"line\">print(c.area()) #  方法调用</span><br><span class=\"line\">print(c.diameter) # 属性访问</span><br><span class=\"line\">print(c.perimeter)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-做限定\"><a href=\"#2-做限定\" class=\"headerlink\" title=\"2. 做限定\"></a>2. 做限定</h3><p>参考前文</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"有关于-property\"><a href=\"#有关于-property\" class=\"headerlink\" title=\"有关于@property\"></a>有关于@property</h2><h3 id=\"1-将方法改为属性\"><a href=\"#1-将方法改为属性\" class=\"headerlink\" title=\"1. 将方法改为属性\"></a>1. 将方法改为属性</h3><p>这种类型的attributes并不会被实际的存储，而是在需要的时候计算出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">class Circle:</span><br><span class=\"line\">    def __init__(self, radius):</span><br><span class=\"line\">        self.radius = radius</span><br><span class=\"line\"></span><br><span class=\"line\">    def area(self):</span><br><span class=\"line\">        return math.pi * self.radius ** 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def diameter(self):</span><br><span class=\"line\">        return self.radius * 2</span><br><span class=\"line\"></span><br><span class=\"line\">    @property</span><br><span class=\"line\">    def perimeter(self):</span><br><span class=\"line\">        return 2 * math.pi * self.radius</span><br><span class=\"line\"></span><br><span class=\"line\">c = Circle(3)</span><br><span class=\"line\">print(c.area()) #  方法调用</span><br><span class=\"line\">print(c.diameter) # 属性访问</span><br><span class=\"line\">print(c.perimeter)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-做限定\"><a href=\"#2-做限定\" class=\"headerlink\" title=\"2. 做限定\"></a>2. 做限定</h3><p>参考前文</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8kb4owr0008tssak335n26w","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4owy000dtssa4samc2np"},{"post_id":"ck8kb4owf0004tssaebcjwh3a","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4ox1000gtssa0lquskhi"},{"post_id":"ck8kb4owl0005tssashbq3075","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4ox3000jtssa407g15vq"},{"post_id":"ck8kb4owp0007tssanqp2dx8q","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4oxa000mtssaqmm5u73b"},{"post_id":"ck8kb4ox3000ktssay38ipia6","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxd000qtssas6ozdg20"},{"post_id":"ck8kb4owt0009tssa95ayh1ay","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxf000ttssay0urwn7f"},{"post_id":"ck8kb4ox9000ltssal0djauu2","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxh000vtssaqdxvunru"},{"post_id":"ck8kb4oww000btssabn1vm4yj","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxi000ytssa5qgedd4k"},{"post_id":"ck8kb4owx000ctssah5xukm9r","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxk0011tssae7dear75"},{"post_id":"ck8kb4owz000ftssadr0ofz66","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxo0015tssaxv1gg1wo"},{"post_id":"ck8kb4ox1000htssanmj5sj6m","category_id":"ck8kb4ox2000itssaye2frji2","_id":"ck8kb4oxq0018tssafq1lai2e"},{"post_id":"ck8kb4oxa000otssa8wlnuumd","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4oxv001dtssa81eo3ufj"},{"post_id":"ck8kb4oxc000ptssau96078ce","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4oxx001htssa6fnup3qm"},{"post_id":"ck8kb4oxe000stssaw32oihjd","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4oy1001ltssagra6xxk5"},{"post_id":"ck8kb4oxg000utssayxasg4oa","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4oyw001ptssa8qpzz18f"},{"post_id":"ck8kb4oxi000xtssa2y1yw2mb","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4oz8001stssabv7o15pp"},{"post_id":"ck8kb4oxj000ztssaiu8bjqa3","category_id":"ck8kb4oyv001otssatz8ctdh0","_id":"ck8kb4ozb001xtssaja3eidyp"},{"post_id":"ck8kb4oxk0012tssag8oldtus","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4ozc0020tssabmve0wgc"},{"post_id":"ck8kb4oxm0013tssajuojilyj","category_id":"ck8kb4oxo0014tssa31elfhl4","_id":"ck8kb4ozd0021tssaubqnskam"},{"post_id":"ck8kb4oxo0016tssa3zy2bybf","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4oze0024tssade1f0za9"},{"post_id":"ck8kb4oxp0017tssa0hzl07xg","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozf0026tssasfev8as7"},{"post_id":"ck8kb4oxr001atssamedaj8yv","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozg0028tssajg3jarxi"},{"post_id":"ck8kb4oxu001btssab02jf45j","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozh002atssa71njwmhm"},{"post_id":"ck8kb4oxv001etssaz0l8lop8","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozk002ctssae5ssb0xk"},{"post_id":"ck8kb4oxw001ftssauy0ykovf","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozl002etssafkl5vesg"},{"post_id":"ck8kb4oxy001itssal8koq02n","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozm002gtssatn7zc90g"},{"post_id":"ck8kb4oy0001jtssamk9lyt59","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozn002htssaresvth49"},{"post_id":"ck8kb4oy1001mtssaqmavy698","category_id":"ck8kb4ozm002ftssagdkslu1i","_id":"ck8kb4ozo002ktssa3ylp9skk"},{"post_id":"ck8kb4oyr001ntssapzv10ewh","category_id":"ck8kb4ozc001ztssaf2n9kx16","_id":"ck8kb4ozo002ltssae4untet8"},{"post_id":"ck8kb4oyw001qtssafixi29e2","category_id":"ck8kb4ozn002jtssa8pv529k3","_id":"ck8kb4ozp002ntssa26g4guoj"},{"post_id":"ck8kb4oyx001rtssaar5rsq5r","category_id":"ck8kb4ozo002mtssa2p2kotix","_id":"ck8kb4ozq002qtssa41qud149"},{"post_id":"ck8kb4oz8001utssa5ku1m03y","category_id":"ck8kb4ozo002mtssa2p2kotix","_id":"ck8kb4ozr002stssa2mx9a36c"},{"post_id":"ck8kb4oza001vtssaus78gzvb","category_id":"ck8kb4ozo002mtssa2p2kotix","_id":"ck8kb4ozs002ttssa9mtjkorl"},{"post_id":"ck8kb4ozb001ytssa0c8f41xa","category_id":"ck8kb4ozo002mtssa2p2kotix","_id":"ck8kb4ozs002utssa8rguxkdb"},{"post_id":"ck8kb4p0y002vtssalhwl1343","category_id":"ck8kb4ozo002mtssa2p2kotix","_id":"ck8kb4p130030tssa4iig5pk2"},{"post_id":"ck8kb4p0z002wtssau1amz4x2","category_id":"ck8kb4p12002ytssa69e1swza","_id":"ck8kb4p1c0037tssaw0zfhfmb"},{"post_id":"ck8kb4p11002xtssa14t3xyhq","category_id":"ck8kb4p12002ytssa69e1swza","_id":"ck8kb4p1e003atssatcxuks6a"},{"post_id":"ck8kb4p1c0038tssa9wbfhfsq","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1g003etssaywni82sc"},{"post_id":"ck8kb4p12002ztssa6i4j2npv","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1l003htssaqqk0mm2t"},{"post_id":"ck8kb4p1d0039tssaa4bsbqga","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1m003jtssaoq8sttge"},{"post_id":"ck8kb4p1e003ctssanurdijwz","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1n003mtssa2ivwf9c1"},{"post_id":"ck8kb4p140031tssaa8f8i5iu","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1o003otssa9i8948bw"},{"post_id":"ck8kb4p1f003dtssa3hybonqx","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1p003rtssabfsmksko"},{"post_id":"ck8kb4p1h003gtssa1o1kegn9","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1q003ttssaamwaw85g"},{"post_id":"ck8kb4p180032tssanmj54g7m","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1r003wtssalql7af4h"},{"post_id":"ck8kb4p1l003itssa2bdkantu","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1s003ytssa2hj6x8s6"},{"post_id":"ck8kb4p1m003ltssawch9fxew","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1t0041tssas80as6ss"},{"post_id":"ck8kb4p1a0034tssabv36bs5d","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1u0043tssawv8rcl7m"},{"post_id":"ck8kb4p1o003ntssaklyv0pn7","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1x0046tssapp0ze7s0"},{"post_id":"ck8kb4p1b0035tssa7emdni1o","category_id":"ck8kb4p1c0036tssa81xzqi7k","_id":"ck8kb4p1y0048tssa06p88q0e"},{"post_id":"ck8kb4p1p003qtssafiq7p0af","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p1z004btssa2ieth4oh"},{"post_id":"ck8kb4p1s003ztssa6ghmc46z","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p20004dtssaxoescedr"},{"post_id":"ck8kb4p1t0042tssa6o5jvway","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p21004ftssa2wzeaj9l"},{"post_id":"ck8kb4p1q003stssau746rc12","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p23004htssa8vomngqs"},{"post_id":"ck8kb4p1u0044tssaxmnl5goh","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p24004jtssanzsj67x8"},{"post_id":"ck8kb4p1y0047tssanu315tca","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p25004ltssanid5d502"},{"post_id":"ck8kb4p1r003vtssaqhma6kor","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p26004ntssahdqizn29"},{"post_id":"ck8kb4p1z0049tssa362lnh9d","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p27004qtssax8zloc7n"},{"post_id":"ck8kb4p20004ctssax2zwhqai","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2f004stssa1lmr2vfk"},{"post_id":"ck8kb4p1r003xtssava3h74ay","category_id":"ck8kb4p1z004atssa8gmky2k9","_id":"ck8kb4p2g004utssaeyp34i2p"},{"post_id":"ck8kb4p21004etssakhgrxbcv","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2h004wtssa6ui14uyk"},{"post_id":"ck8kb4p21004gtssa0h6ii3af","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2h004ytssakd5fqofu"},{"post_id":"ck8kb4p23004itssa4ev1sq73","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2j0050tssascytbl86"},{"post_id":"ck8kb4p25004mtssal9bls5av","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2k0052tssak0q8eh8f"},{"post_id":"ck8kb4p26004ptssafy2zuphj","category_id":"ck8kb4p1r003utssaexq46azb","_id":"ck8kb4p2l0054tssawtoj37dd"},{"post_id":"ck8kb4p27004rtssakv67v1ct","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2m0056tssa0ux32n3r"},{"post_id":"ck8kb4p24004ktssax5uzwc6i","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2m0058tssas8hl30z8"},{"post_id":"ck8kb4p2f004ttssaewpdxhd5","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2n005atssa3mnlz2xf"},{"post_id":"ck8kb4p2g004vtssan0hn32kj","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2o005ctssag93nrcwf"},{"post_id":"ck8kb4p2h004xtssa6j8bmpwq","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2p005etssar8v0gdf1"},{"post_id":"ck8kb4p2i004ztssajma0av4p","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2q005gtssak9wy72q5"},{"post_id":"ck8kb4p2j0051tssa9j7c7t1v","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2s005itssar7gs5608"},{"post_id":"ck8kb4p2k0053tssauoefqtbo","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2s005ktssaqzh8ntt9"},{"post_id":"ck8kb4p2l0055tssa9bjh8vxq","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005ltssawb2l9oq8"},{"post_id":"ck8kb4p2m0057tssaen3ze18w","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005mtssan9y09vb3"},{"post_id":"ck8kb4p2n0059tssahsr7jsyo","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005ntssai3kqku5r"},{"post_id":"ck8kb4p2n005btssatf7vpm00","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005otssazwi234ru"},{"post_id":"ck8kb4p2o005dtssapjy3cimb","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005ptssat0gymxjo"},{"post_id":"ck8kb4p2p005ftssavoxxbnb2","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005qtssa2syvbjr2"},{"post_id":"ck8kb4p2q005htssaadrdsiyy","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005rtssagijmhzu1"},{"post_id":"ck8kb4p2s005jtssaa93re6b7","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p2t005stssa5xpg94sw"},{"post_id":"ck8kb4p59005ttssadqm264m0","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p5e005xtssajc623h1k"},{"post_id":"ck8kb4p5a005utssaodojeqwb","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p5e005ztssaer0c69a8"},{"post_id":"ck8kb4p5b005vtssazepebgvu","category_id":"ck8kb4p26004otssahuwoek9j","_id":"ck8kb4p5f0061tssaw9qo3z4x"},{"post_id":"ck8kb4p5d005wtssaibboevi9","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4p5g0064tssaf0v595uz"},{"post_id":"ck8kb4p5g0065tssa7llia592","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5l006atssalp1k6i82"},{"post_id":"ck8kb4p5e005ytssa7iutuwv4","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5n006dtssapwzdgkc2"},{"post_id":"ck8kb4p5i0066tssaqoac0ky6","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5n006ftssay7s5fs23"},{"post_id":"ck8kb4p5j0068tssafb8thblv","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5o006htssagwuvzlbl"},{"post_id":"ck8kb4p5f0060tssarc8e3tdd","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5p006jtssaj4ksg8xz"},{"post_id":"ck8kb4p5l0069tssau2mhkpfv","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5q006ltssap2wn92fp"},{"post_id":"ck8kb4p5m006ctssac72f55lq","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5s006ntssalrejndr8"},{"post_id":"ck8kb4p5g0063tssac7zxyd83","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5v006ptssabgeqcltl"},{"post_id":"ck8kb4p5n006etssaukkk1erj","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5w006rtssacsq17z1w"},{"post_id":"ck8kb4p5o006gtssa900meou7","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5x006ttssavby7ht7k"},{"post_id":"ck8kb4p5p006itssakxj0cpvq","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5y006vtssaukg51jln"},{"post_id":"ck8kb4p5p006ktssazxhuedxg","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p5z006xtssaddd37rai"},{"post_id":"ck8kb4p5r006mtssawqvmosco","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p60006ztssax0bya4n5"},{"post_id":"ck8kb4p5s006otssazasevg3h","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p620071tssajc0nu8y0"},{"post_id":"ck8kb4p5w006qtssa6rfmxglf","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p630073tssab9tg53m5"},{"post_id":"ck8kb4p5w006stssaqiuvrvlj","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p640075tssai43amt39"},{"post_id":"ck8kb4p5x006utssa01irvgbt","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p650077tssait6bwkk1"},{"post_id":"ck8kb4p5y006wtssaa4raa1p6","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p660079tssacgocs1bk"},{"post_id":"ck8kb4p5z006ytssabnpk372i","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p67007btssaw301qhd6"},{"post_id":"ck8kb4p600070tssaoriyeemi","category_id":"ck8kb4owo0006tssav6d9rhvf","_id":"ck8kb4p68007dtssa7ejzud0g"},{"post_id":"ck8kb4p630072tssabi583bk8","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p69007ftssaphtx1s4w"},{"post_id":"ck8kb4p630074tssa1i8ql9ct","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6a007gtssadp0zor3m"},{"post_id":"ck8kb4p650076tssay58ne2k6","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6b007htssap1jis1yv"},{"post_id":"ck8kb4p660078tssak9lj49te","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6b007itssai3mfamzd"},{"post_id":"ck8kb4p67007atssa3t8vlnpo","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6b007jtssav0ij1h11"},{"post_id":"ck8kb4p67007ctssaibw69t4r","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6b007ktssainauw0jm"},{"post_id":"ck8kb4p68007etssaznsrfx5x","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p6b007ltssarndv0y29"},{"post_id":"ck8kb4p6t007rtssa3c3qljn0","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p6y007ztssayyj3gtgg"},{"post_id":"ck8kb4p6o007mtssaxm5m1udo","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p700084tssaehhkc5fq"},{"post_id":"ck8kb4p6u007stssa2xi7w8ca","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p710087tssaj30gcr7n"},{"post_id":"ck8kb4p6v007wtssa0brst442","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p72008btssaae4si1z0"},{"post_id":"ck8kb4p6q007ntssaljxy5nl3","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p73008etssaeppyaeg7"},{"post_id":"ck8kb4p6w007ytssayhbvyksn","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p74008itssaa0bf10h6"},{"post_id":"ck8kb4p6z0083tssaaq0zbohw","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p76008ltssawlwi5jc0"},{"post_id":"ck8kb4p6s007qtssand0olswu","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p78008ptssanx2r2m4x"},{"post_id":"ck8kb4p700086tssacbcbz66d","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p79008rtssabgt63csm"},{"post_id":"ck8kb4p71008atssac50454no","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p79008ttssadxj10h08"},{"post_id":"ck8kb4p72008dtssaei519cs9","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p7c008vtssa46bnoxzt"},{"post_id":"ck8kb4p73008htssaumgiyxkb","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p7c008xtssaa7hubnpq"},{"post_id":"ck8kb4p75008ktssafohvfgkt","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p7c008ztssa3y69e3e1"},{"post_id":"ck8kb4p76008otssa3bp036ut","category_id":"ck8kb4p6r007otssabdcxxcmi","_id":"ck8kb4p7c0090tssalto5hus0"},{"post_id":"ck8kb4p8i0091tssah6s6t9g4","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8m0095tssazpqk5fbm"},{"post_id":"ck8kb4p8j0092tssa1zcuztir","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8n0097tssaf9d9wrij"},{"post_id":"ck8kb4p8k0093tssao4awecx7","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8o0099tssajkr37oyf"},{"post_id":"ck8kb4p8m0094tssajlqcqszw","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8p009atssab6jyrqxl"},{"post_id":"ck8kb4p8n0096tssayqakaxtv","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8p009btssawld516p4"},{"post_id":"ck8kb4p8o0098tssarbhwmwnw","category_id":"ck8kb4p5f0062tssaevxgmis6","_id":"ck8kb4p8p009ctssaoo4usq2y"}],"PostTag":[{"post_id":"ck8kb4p6t007rtssa3c3qljn0","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p6v007vtssa6jsvfov3"},{"post_id":"ck8kb4p6o007mtssaxm5m1udo","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p6w007xtssaszd3yb37"},{"post_id":"ck8kb4p6u007stssa2xi7w8ca","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p6z0082tssaupvwbcnh"},{"post_id":"ck8kb4p6v007wtssa0brst442","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p700085tssaoswgesdw"},{"post_id":"ck8kb4p6q007ntssaljxy5nl3","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p710089tssa4qsmk0av"},{"post_id":"ck8kb4p6s007qtssand0olswu","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p72008ctssaine15fmx"},{"post_id":"ck8kb4p71008atssac50454no","tag_id":"ck8kb4p6r007ptssahgt7glmc","_id":"ck8kb4p73008gtssa8f9pi1er"},{"post_id":"ck8kb4p6w007ytssayhbvyksn","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p75008jtssama09ig2q"},{"post_id":"ck8kb4p72008dtssaei519cs9","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p76008ntssa9yvt7wpy"},{"post_id":"ck8kb4p73008htssaumgiyxkb","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p78008qtssavte82zt2"},{"post_id":"ck8kb4p6z0083tssaaq0zbohw","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p79008stssaxb5rh23y"},{"post_id":"ck8kb4p75008ktssafohvfgkt","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p79008utssafifvx49t"},{"post_id":"ck8kb4p76008otssa3bp036ut","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p7c008wtssayo6ljlub"},{"post_id":"ck8kb4p700086tssacbcbz66d","tag_id":"ck8kb4p710088tssa6u5gokbn","_id":"ck8kb4p7c008ytssakwr5jink"}],"Tag":[{"name":"mongodb","_id":"ck8kb4p6r007ptssahgt7glmc"},{"name":"redis","_id":"ck8kb4p710088tssa6u5gokbn"}]}}